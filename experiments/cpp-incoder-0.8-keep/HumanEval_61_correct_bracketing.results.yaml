name: HumanEval_61_correct_bracketing
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // Initialize\
    \ an empty string: current_bracket\n    std::string current_bracket = \"\";\n\
    \    // Initialize the counter: number_of_open_brackets\n    int number_of_open_brackets\
    \ = 0;\n\n    // Iterate over the string brackets\n    for (int i = 0; i < brackets.length();\
    \ ++i) {\n        // Get the current character in the string\n        char c =\
    \ brackets[i];\n\n        // Check if the character is equal to the current opening\
    \ bracket.\n        // If so, remember it.\n        if (current_bracket.length()\
    \ > 0 && current_bracket == c)\n            current_bracket += c;\n        //\
    \ If the current character is equal to the current opening bracket,\n        //\
    \ increment the count of open brackets.\n        else if (current_bracket.length()\
    \ == 0 && c == '(')\n            ++number_of_open_brackets;\n        // If the\
    \ current character is not equal to the current opening bracket,\n        // reset\
    \ the count of open brackets.\n        else if (current_bracket.length() == 0\
    \ && c == ')')\n            --number_of_open_brackets;\n\n        // If the current\
    \ character is ')', return False because we don't want\n        // to keep counting\
    \ open brackets when the current closing bracket is encountered.\n        if (c\
    \ == ')')\n            return false;\n    }\n\n    // If the number of open brackets\
    \ is equal to the number of closing brackets,\n    // return True. Otherwise,\
    \ return False.\n    return number_of_open_brackets == brackets.length() - 1;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj65eijjp.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpj65eijjp.cpp:26:61: error: no match for \u2018operator==\u2019 (operand\
    \ types are \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } and \u2018char\u2019)\n   26 |         if (current_bracket.length() > 0 && current_bracket\
    \ == c)\n      |                                             ~~~~~~~~~~~~~~~ ^~\
    \ ~\n      |                                             |                  |\n\
    \      |                                             |                  char\n\
    \      |                                             std::string {aka std::__cxx11::basic_string<char>}\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpj65eijjp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpj65eijjp.cpp:26:64:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   26\
    \ |         if (current_bracket.length() > 0 && current_bracket == c)\n      |\
    \                                                                ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n       \
    \          from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpj65eijjp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1099:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::opera"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::vector<std::string>\
    \ brackets_list = brackets.split('(');\n    bool ok = true;\n    for (unsigned\
    \ int i = 0; i < brackets_list.size(); i++) {\n        for (unsigned int j = 0;\
    \ j < brackets_list.size(); j++) {\n            if (i != j) ok &= brackets_list[i].substr(0,\
    \ brackets_list[i].size() - 1) == brackets_list[j].substr(brackets_list[j].size()\
    \ - 1);\n        }\n    }\n    return ok;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp64ql2z7z.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmp64ql2z7z.cpp:14:55: error: \u2018std::string\u2019 {aka \u2018class\
    \ std::__cxx11::basic_string<char>\u2019} has no member named \u2018split\u2019\
    \n   14 |     std::vector<std::string> brackets_list = brackets.split('(');\n\
    \      |                                                       ^~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // write\
    \ your code here\n    std::string brackets_str = brackets;\n    size_t open_bracket\
    \ = 0;\n    size_t close_bracket = 0;\n    while (brackets_str[open_bracket] !=\
    \ '\\0'){\n        if (brackets_str[open_bracket] == '('){\n            open_bracket++;\n\
    \        }\n        if (brackets_str[open_bracket] == ')'){\n            close_bracket++;\n\
    \        }\n    }\n    return (open_bracket == close_bracket);\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"()\"))\
    \ == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // Write\
    \ your code here.\n    // Solution using stack\n    Stack<char> s;\n    char c;\n\
    \    for (c in brackets) {\n        s.push(c);\n    }\n    while(!s.empty()) {\n\
    \        if(s.top() == '(') {\n            s.pop();\n        } else if(s.top()\
    \ == ')') {\n            s.pop();\n        } else if(s.top() == '[') {\n     \
    \       s.pop();\n        } else if(s.top() == ']') {\n            s.pop();\n\
    \        } else if(s.top() == '{' && s.peek() == '}') {\n            s.pop();\n\
    \        } else if(s.top() == '}') {\n            s.pop();\n        } else if(s.top()\
    \ == '[' && s.peek() == ']') {\n            s.pop();\n        } else if(s.top()\
    \ == '[' && s.peek() == '}') {\n            s.pop();\n        } else {\n     \
    \       return false;\n        }\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpor37bxpp.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpor37bxpp.cpp:16:5: error: \u2018Stack\u2019 was not declared in this\
    \ scope\n   16 |     Stack<char> s;\n      |     ^~~~~\n/tmp/tmpor37bxpp.cpp:16:11:\
    \ error: expected primary-expression before \u2018char\u2019\n   16 |     Stack<char>\
    \ s;\n      |           ^~~~\n/tmp/tmpor37bxpp.cpp:18:11: error: expected \u2018\
    ;\u2019 before \u2018in\u2019\n   18 |     for (c in brackets) {\n      |    \
    \       ^~~\n      |           ;\n/tmp/tmpor37bxpp.cpp:21:5: error: expected primary-expression\
    \ before \u2018while\u2019\n   21 |     while(!s.empty()) {\n      |     ^~~~~\n\
    /tmp/tmpor37bxpp.cpp:20:6: error: expected \u2018;\u2019 before \u2018while\u2019\
    \n   20 |     }\n      |      ^\n      |      ;\n   21 |     while(!s.empty())\
    \ {\n      |     ~~~~~\n/tmp/tmpor37bxpp.cpp:21:5: error: expected primary-expression\
    \ before \u2018while\u2019\n   21 |     while(!s.empty()) {\n      |     ^~~~~\n\
    /tmp/tmpor37bxpp.cpp:20:6: error: expected \u2018)\u2019 before \u2018while\u2019\
    \n   20 |     }\n      |      ^\n      |      )\n   21 |     while(!s.empty())\
    \ {\n      |     ~~~~~\n/tmp/tmpor37bxpp.cpp:18:9: note: to match this \u2018\
    (\u2019\n   18 |     for (c in brackets) {\n      |         ^\n/tmp/tmpor37bxpp.cpp:21:12:\
    \ error: \u2018s\u2019 was not declared in this scope\n   21 |     while(!s.empty())\
    \ {\n      |            ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  int cnt\
    \ = 0;\n  for (int i = 0; brackets[i]; i++) {\n    if (brackets[i] == '(') {\n\
    \      cnt++;\n    } else if (brackets[i] == ')') {\n      cnt--;\n      if (cnt\
    \ < 0) return false;\n    }\n  }\n  if (cnt != 0) return false;\n  return true;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ brackets_size = brackets.size();\n    size_t opening_brackets = brackets_size/2;\n\
    \    size_t closing_brackets = brackets_size/2 - opening_brackets;\n    size_t\
    \ open_brackets = 0;\n    size_t i = 0;\n    size_t j = 0;\n    bool are_open_brackets_correct\
    \ = true;\n    while (i<brackets.size() && are_open_brackets_correct) {\n    \
    \    if ( brackets[i] == '(') {\n            open_brackets++;\n        }\n   \
    \     else {\n            open_brackets--;\n        }\n        if (open_brackets\
    \ == closing_brackets) {\n            are_open_brackets_correct = false;\n   \
    \     }\n        i++;\n    }\n    return are_open_brackets_correct;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"()\"))\
    \ == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpk1wlip4f: /tmp/tmpk1wlip4f.cpp:37: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tint openingbrackets\
    \ = brackets.size();\n\tint closingbrackets = 0;\n\tint j = 0;\n\tfor (int i =\
    \ 0; i < brackets.size(); i++) {\n\t\tif (brackets[i] == '(')\n\t\t\topeningbrackets++;\n\
    \t\telse if (brackets[i] == ')')\n\t\t\tclosingbrackets++;\n\t\telse {\n\t\t\t\
    while (j < openingbrackets && brackets[j] != brackets[i])\n\t\t\t\tj++;\n\t\t\t\
    if (j == openingbrackets)\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn (closingbrackets\
    \ == openingbrackets);\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmp6gkna26r: /tmp/tmp6gkna26r.cpp:33: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::string\
    \ correct_brackets = \"\";\n    for(int i=0; i < brackets.size(); i++) {\n   \
    \     if(brackets[i] == '(') correct_brackets += brackets[i];\n        else if(brackets[i]\
    \ == ')') {\n            while(i != brackets.size() &&\n            brackets[i]\
    \ == ')') {\n                correct_brackets += brackets[i];\n              \
    \  i++;\n            }\n            correct_brackets += brackets[i];\n       \
    \ }\n        else correct_brackets += brackets[i];\n    }\n    std::reverse(correct_brackets.begin(),\
    \ correct_brackets.end());\n    return correct_brackets == brackets;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"()\"))\
    \ == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp304cq3fa: /tmp/tmp304cq3fa.cpp:32: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int len\
    \ = brackets.length();\n    for (int i = 0; i < len; ++i) {\n        if (brackets[i]\
    \ == '(') {\n            int counter = 0;\n            for (int j = i + 1; j <\
    \ len; ++j) {\n                if (brackets[j] == ')') {\n                   \
    \ counter++;\n                    if (counter == 2) {\n                      \
    \  return true;\n                    }\n                } else {\n           \
    \         counter = 0;\n                }\n            }\n        }\n    }\n \
    \   return false;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpwn08z7qy: /tmp/tmpwn08z7qy.cpp:34: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  if (brackets.size()\
    \ % 2 != 0)\n    return false;\n  for (int i = 0; i < brackets.size() / 2; ++i)\
    \ {\n    if (brackets[i] == '(' && brackets[i + 1] == ')')\n      return true;\n\
    \    else if (brackets[i] == '[' && brackets[i + 1] == ']')\n      return true;\n\
    \    else if (brackets[i] == '{' && brackets[i + 1] == '}')\n      return true;\n\
    \    else if (brackets[i] == '(' && brackets[i + 1] == ']')\n      return true;\n\
    \    else if (brackets[i] == '[' && brackets[i + 1] == '}')\n      return true;\n\
    \  }\n  return false;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmp8s118mga: /tmp/tmp8s118mga.cpp:42: int main(): Assertion `candidate((\"\
    ()()(()())())(()\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  int opening_brackets\
    \ = brackets.size();\n  int closing_brackets = 0;\n  bool result;\n  for (int\
    \ i = 0; i < brackets.size(); ++i) {\n    if (brackets[i] == '(') ++closing_brackets;\n\
    \    else if (brackets[i] == ')') ++closing_brackets;\n    else if (brackets[i]\
    \ == '[') ++closing_brackets;\n    else if (brackets[i] == ']') ++closing_brackets;\n\
    \    else if (brackets[i] == '{') ++closing_brackets;\n    else if (brackets[i]\
    \ == '}') ++closing_brackets;\n  }\n  result = opening_brackets == closing_brackets;\n\
    \  return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpi6_hymju: /tmp/tmpi6_hymju.cpp:34: int main(): Assertion `candidate((\"\
    ((()())))\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::string\
    \ result;\n    // \"(\" is also a closed bracket.\n    if (brackets[0] == '(')\
    \ {\n        result.append(\")\");\n    } else {\n        result.append(\"(\"\
    );\n    }\n    for (size_t i = 1; i < brackets.size() - 1; ++i) {\n        //\
    \ \"(\" is not a closed bracket.\n        if (brackets[i] == '(') {\n        \
    \    // \"(\" is not a closed bracket.\n            result.append(\")\");\n  \
    \          continue;\n        }\n        // \")\" is not a closed bracket.\n \
    \       if (brackets[i] == ')') {\n            // \")\" is not a closed bracket.\n\
    \            result.append(\")\");\n            continue;\n        }\n       \
    \ // \")\" is an open bracket.\n        if (brackets[i] == '[') {\n          \
    \  result.append(\")\");\n            continue;\n        }\n        // \"]\" is\
    \ an open bracket.\n        if (brackets[i] == '{') {\n            result.append(\"\
    )\");\n            continue;\n        }\n        // \"(\" is an open bracket.\n\
    \        if (brackets[i] == '(') {\n            result.append(\"(\");\n      \
    \      continue;\n        }\n        // \"(\" is an open bracket.\n        if\
    \ (brackets[i] == '[') {\n            result.append(\"[\");\n            continue;\n\
    \        }\n        // \"(\" is an open bracket.\n        if (brackets[i] == '{')\
    \ {\n            result.append(\"{\");\n            continue;\n        }\n   \
    \ }\n    return result == brackets;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmps1kld9qp: /tmp/tmps1kld9qp.cpp:64: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::stack<std::string>\
    \ parens;\n    std::stack<std::string> stack;\n    bool flag = false;\n    bool\
    \ brackets_ok = true;\n    std::string stack_string;\n\n    for (int i = 0; i\
    \ < brackets.length(); i++) {\n        if (brackets[i] == '(') {\n           \
    \ parens.push(brackets[i]);\n        }\n        if (brackets[i] == ')') {\n  \
    \          if (!parens.empty() && !parens.top().empty()) {\n                parens.pop();\n\
    \                stack_string = std::to_string(parens.top());\n              \
    \  if (brackets[i] == stack_string) {\n                    flag = true;\n    \
    \                brackets_ok = true;\n                } else {\n             \
    \       stack.push(stack_string);\n                }\n            } else {\n \
    \               if (brackets[i] == '(') {\n                    stack_string =\
    \ std::to_string(stack.top());\n                    stack.push(stack_string);\n\
    \                    flag = true;\n                    brackets_ok = true;\n \
    \               } else {\n                    stack.push(stack.top());\n     \
    \               stack.pop();\n                }\n            }\n        }\n  \
    \      if (!brackets.empty() && !brackets.top().empty() && parens.top() == brackets[i])\
    \ {\n            stack.push(stack.top());\n            stack.pop();\n        }\n\
    \    }\n    if (!parens.empty() && !parens.top().empty()) {\n        stack_string\
    \ = std::to_string(parens.top());\n        stack.push(stack_string);\n       \
    \ flag = true;\n        brackets_ok = true;\n    }\n    return flag && brackets_ok;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp23jzczli.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmp23jzczli.cpp:22:36: error: no matching function for call to \u2018\
    std::stack<std::__cxx11::basic_string<char> >::push(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   22 |             parens.push(brackets[i]);\n \
    \     |                                    ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/stack:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:89,\n\
    \                 from /tmp/tmp23jzczli.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_stack.h:233:7:\
    \ note: candidate: \u2018void std::stack<_Tp, _Sequence>::push(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Sequence = std::deque<std::__cxx11::basic_string<char>,\
    \ std::allocator<std::__cxx11::basic_string<char> > >; std::stack<_Tp, _Sequence>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n  233 |       push(const value_type&\
    \ __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_stack.h:233:30:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n  233 |       push(const\
    \ value_type& __x)\n      |            ~~~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_stack.h:238:7:\
    \ note: candidate: \u2018void std::stack<_Tp, _Sequence>::push(std::stack<_Tp,\
    \ _Sequence>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Sequence\
    \ = std::deque<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>\
    \ > >; std::stack<_Tp, _Sequence>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n  238 |       push(value_type&& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_stack.h:238:25:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::valu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  for (int\
    \ i = 0; i < brackets.length(); i++) {\n    // If current char is opening bracket,\
    \ go up one position and add it to stack.\n    if (brackets[i] == '(') {\n   \
    \   stackOfParenthesis.push(brackets.substr(i));\n    }\n    // If current char\
    \ is closing bracket, go down one position and remove it from stack.\n    else\
    \ if (brackets[i] == ')') {\n      if (stackOfParenthesis.top() != '(') {\n  \
    \      return false;\n      }\n      stackOfParenthesis.pop();\n    }\n  }\n \
    \ // If there is still open brackets in the stack,\n  // return false because\
    \ it's not a proper brackets string.\n  return stackOfParenthesis.top() != ')';\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_48qyyw_.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmp_48qyyw_.cpp:17:7: error: \u2018stackOfParenthesis\u2019 was not declared\
    \ in this scope\n   17 |       stackOfParenthesis.push(brackets.substr(i));\n\
    \      |       ^~~~~~~~~~~~~~~~~~\n/tmp/tmp_48qyyw_.cpp:21:11: error: \u2018stackOfParenthesis\u2019\
    \ was not declared in this scope\n   21 |       if (stackOfParenthesis.top() !=\
    \ '(') {\n      |           ^~~~~~~~~~~~~~~~~~\n/tmp/tmp_48qyyw_.cpp:24:7: error:\
    \ \u2018stackOfParenthesis\u2019 was not declared in this scope\n   24 |     \
    \  stackOfParenthesis.pop();\n      |       ^~~~~~~~~~~~~~~~~~\n/tmp/tmp_48qyyw_.cpp:29:10:\
    \ error: \u2018stackOfParenthesis\u2019 was not declared in this scope\n   29\
    \ |   return stackOfParenthesis.top() != ')';\n      |          ^~~~~~~~~~~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  int n =\
    \ brackets.size();\n  for (int i = 0; i < n; ++i) {\n    if (brackets[i] == '(')\
    \ {\n      if (brackets[(i+1)] == ')') return false;\n    } else {\n      if (brackets[i]\
    \ == ')') return false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpkltdkcrw: /tmp/tmpkltdkcrw.cpp:26: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  // your\
    \ code goes here\n  int cnt = 0;\n  while (brackets.size() > cnt){\n    if (brackets.at(cnt)\
    \ == '('){\n      cnt ++;\n    }\n    else if (brackets.at(cnt) == ')'){\n   \
    \   cnt ++;\n    }\n    else {\n      return false;\n    }\n  }\n  return true;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp_e0xc5mm: /tmp/tmp_e0xc5mm.cpp:35: int main(): Assertion `candidate((\"\
    ((()())))\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // Check\
    \ whether brackets has only two characters.\n    if (brackets.size() < 2)\n  \
    \      return false;\n    // Check the opening bracket.\n    if (brackets[0] !=\
    \ brackets[1])\n        return false;\n    // Iterate through the rest of the\
    \ brackets.\n    for (int i = 2; i < brackets.size(); i++) {\n        // If the\
    \ opening bracket is followed by an opening bracket,\n        // we found a bracket\
    \ that isn't closed yet.\n        if (brackets[i] == brackets[i - 1]) {\n    \
    \        // Check that the closing bracket is paired correctly.\n            if\
    \ (brackets[i] != brackets[i + 1])\n                return false;\n          \
    \  // Skip the closing bracket.\n            i += 1;\n        }\n        // If\
    \ the opening bracket isn't followed by an opening bracket,\n        // we found\
    \ a closing bracket that isn't paired yet.\n        else {\n            // Check\
    \ that the closing bracket is paired correctly.\n            if (brackets[i] !=\
    \ brackets[i - 1])\n                return false;\n            // Skip the opening\
    \ bracket.\n            i -= 1;\n        }\n    }\n    // The brackets look correct!\n\
    \    return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpbuslfiwi: /tmp/tmpbuslfiwi.cpp:46: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ opening_brackets = 0, closing_brackets = 0;\n    for (char c : brackets) {\n\
    \        if (c == '(') {\n            opening_brackets++;\n        }\n       \
    \ else if (c == ')') {\n            closing_brackets++;\n        }\n    }\n  \
    \  // Check every opening bracket has a corresponding closing bracket.\n    for\
    \ (int i = 0; i < opening_brackets; i++) {\n        if (brackets[i] == '(') {\n\
    \            if (brackets[i+1] == ')')\n                return true;\n       \
    \ }\n    }\n    // Check every closing bracket has a corresponding opening bracket.\n\
    \    for (int i = 0; i < closing_brackets; i++) {\n        if (brackets[i] ==\
    \ ')') {\n            if (brackets[i+1] == '(')\n                return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmp1in45ia9: /tmp/tmp1in45ia9.cpp:45: int main(): Assertion `candidate((\"\
    ((()())))\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int len\
    \ = brackets.size();\n    for (int i = 0; i < len; ++i) {\n        if (brackets[i]\
    \ != '(' && brackets[i] != ')') {\n            return false;\n        }\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmp4rov9ug0: /tmp/tmp4rov9ug0.cpp:28: int main(): Assertion `candidate((\"\
    ((()())))\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    if (brackets.length()\
    \ == 0) return false;\n    int brackets_counter = 0;\n    for (int i = 0; i <\
    \ brackets.length(); i++)\n    {\n        if (brackets[i] == '(')\n        {\n\
    \            brackets_counter++;\n        }\n        if (brackets[i] == ')')\n\
    \        {\n            if (brackets_counter > 0) brackets_counter--;\n      \
    \  }\n    }\n    if (brackets_counter == 0) return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpunoygnrl: /tmp/tmpunoygnrl.cpp:36: int main(): Assertion `candidate((\"\
    ((()())))\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  int stack=0;\n\
    \  int openbrackets=0;\n  for (char c: brackets) {\n    if (c=='(')\n      stack++;\n\
    \    else if (c==')')\n      stack--;\n    else if (stack==0 && c=='(')\n    \
    \  openbrackets++;\n    else if (stack==0 && c==')')\n      openbrackets--;\n\
    \    else if (stack==0 && c==')')\n      openbrackets--;\n    else if (stack==0\
    \ && c=='(')\n      openbrackets++;\n    else if (stack==0)\n      return false;\n\
    \  }\n  return (openbrackets==0);\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmp12q_f6m1: /tmp/tmp12q_f6m1.cpp:40: int main(): Assertion `candidate((\"\
    ((()())))\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tauto pos\
    \ = brackets.find(\"(\");\n\tauto opening = brackets.substr(0, pos);\n\tauto closing\
    \ = brackets.substr(pos + 1, brackets.size() - pos - 1);\n\treturn (opening ==\
    \ closing);\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp43nlehaz: /tmp/tmp43nlehaz.cpp:21: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  int level\
    \ = 0;\n  for (int i = 0; i < brackets.size(); ++i) {\n    if (brackets[i] ==\
    \ '(') {\n      ++level;\n    }\n    else if (brackets[i] == ')') {\n      --level;\n\
    \    }\n  }\n  return level == 0;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpd21bj_o5: /tmp/tmpd21bj_o5.cpp:32: int main(): Assertion `candidate((\"\
    )(()\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tint cnt\
    \ = 0;\n\tint cur_pos = 0;\n\tint bracket_pos = 0;\n\tstd::string cur = brackets;\n\
    \tfor (char c : cur) {\n\t\tif (c == '(') bracket_pos++;\n\t\tif (c == ')') bracket_pos--;\n\
    \t\tcnt++;\n\t\tif (bracket_pos == 0 && cnt == cur_pos) return false;\n\t\tcur_pos++;\n\
    \t}\n\treturn true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpnwa8bmsp: /tmp/tmpnwa8bmsp.cpp:33: int main(): Assertion `candidate((\"\
    ((()())))\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  std::stack<char>\
    \ bracket_stack;\n  std::string open_bracket, close_bracket;\n\n  bracket_stack.push(brackets.front());\n\
    \n  for (std::size_t i = 1; i < brackets.size(); i++) {\n    if (brackets[i] ==\
    \ '(') {\n      open_bracket = brackets[i - 1];\n    } else if (brackets[i] ==\
    \ ')') {\n      close_bracket = brackets[i - 1];\n    }\n\n    if (open_bracket\
    \ == close_bracket) {\n      bracket_stack.push(brackets[i]);\n    } else {\n\
    \      if (open_bracket.empty()) {\n        return false;\n      }\n\n      if\
    \ (!bracket_stack.empty() && open_bracket == bracket_stack.top()) {\n        bracket_stack.pop();\n\
    \      } else {\n        return false;\n      }\n    }\n  }\n\n  return !bracket_stack.empty();\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq0_1wzc3.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpq0_1wzc3.cpp:33:50: error: no match for \u2018operator==\u2019 (operand\
    \ types are \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } and \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019})\n   33 |       if (!bracket_stack.empty() && open_bracket\
    \ == bracket_stack.top()) {\n      |                                     ~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~\n      |                                     |      \
    \                          |\n      |                                     |  \
    \                              __gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type {aka char}\n      |                                     std::string\
    \ {aka std::__cxx11::basic_string<char>}\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpq0_1wzc3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpq0_1wzc3.cpp:33:71:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   33\
    \ |       if (!bracket_stack.empty() && open_bracket == bracket_stack.top()) {\n\
    \      |                                                                     \
    \  ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpq0_1wzc3."
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ open = 0, close = 0;\n    for (size_t i = 0; i < brackets.length(); i++) {\n\
    \        if (brackets[i] == '(') {\n            open++;\n        } else if (brackets[i]\
    \ == ')') {\n            close++;\n        }\n        if (open != close) return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpy41j8wcj: /tmp/tmpy41j8wcj.cpp:27: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    if (brackets.size()\
    \ <= 1) return false;\n    bool all_open = true;\n    for (char c : brackets)\
    \ {\n        if (c != ')') all_open = false;\n    }\n    if (all_open) return\
    \ true;\n    int stack = 1;\n    for (int i = 0; i < brackets.size() - 1; i++)\
    \ {\n        if (brackets[i] == '(') {\n            stack++;\n        } else {\n\
    \            if (brackets[i] == ')') {\n                stack--;\n           \
    \ }\n        }\n    }\n    return stack == 0;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpr69hndae: /tmp/tmpr69hndae.cpp:34: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int open\
    \ = brackets.find(\"(\");\n    if (open < 0) {\n        return false;\n    }\n\
    \    int close = brackets.find(\")\", open);\n    if (close < 0) {\n        return\
    \ false;\n    }\n    for (int i = 0; i <= close; ++i) {\n        int open = brackets.find(\"\
    (\", i);\n        if (open < 0) {\n            continue;\n        }\n        int\
    \ close = brackets.find(\")\", open);\n        if (close < 0) {\n            continue;\n\
    \        }\n        close += 1;\n        if (close < i) {\n            continue;\n\
    \        }\n        if (brackets[open] == '(' && brackets[close] == ')') {\n \
    \           continue;\n        }\n        if (brackets[open] == '{' && brackets[close]\
    \ == '}') {\n            continue;\n        }\n        if (brackets[open] == '['\
    \ && brackets[close] == ']') {\n            continue;\n        }\n        return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpfmmqcvbu: /tmp/tmpfmmqcvbu.cpp:50: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int brackets_count\
    \ = brackets.length();\n    if(brackets_count == 0) {\n        return false;\n\
    \    }\n    int left_bracket = brackets.front();\n    int right_bracket = brackets.back();\n\
    \    for(int i = 0; i < brackets_count; i++) {\n        int left = brackets[i];\n\
    \        int right = brackets[brackets_count - i - 1];\n        if(left != right_bracket)\
    \ {\n            if(left < right_bracket) {\n                return false;\n \
    \           }\n            return true;\n        }\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmplh_miyif: /tmp/tmplh_miyif.cpp:34: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    if(brackets.size()\
    \ % 2 == 1) {\n        std::cerr << \"Incorrect bracketing: \" << brackets <<\
    \ std::endl;\n        return false; \n    }\n\n    std::vector<std::string> opening_brackets,\
    \ closing_brackets;\n\n    for (size_t i = 0; i < (brackets.size() - 1) / 2; ++i)\
    \ {\n        opening_brackets.push_back(brackets[i]);\n        closing_brackets.push_back(brackets[i\
    \ + 2]);\n    }\n\n    size_t opening_brackets_len = opening_brackets.size();\n\
    \    size_t closing_brackets_len = closing_brackets.size();\n\n    bool ok = true;\n\
    \    for(size_t i = 0; i < opening_brackets_len; ++i) {\n        bool found_correct_bracket\
    \ = false;\n        for(size_t j = 0; j < closing_brackets_len; ++j) {\n     \
    \       if (opening_brackets[i] == closing_brackets[j]) {\n                found_correct_bracket\
    \ = true;\n            }\n        }\n\n        if (!found_correct_bracket) {\n\
    \            std::cerr << \"Incorrect bracketing: \" << brackets << std::endl;\n\
    \            ok = false;\n        }\n    }\n\n    return ok;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpea88eyld.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpea88eyld.cpp:22:47: error: no matching function for call to \u2018\
    std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   22 |         opening_brackets.push_back(brackets[i]);\n\
    \      |                                               ^\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n           \
    \      from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n  \
    \               from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpea88eyld.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cx"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  int cnt\
    \ = 0;\n  for (int i = 0; i < brackets.size(); i++) {\n    if (brackets[i] ==\
    \ '(') {\n      cnt++;\n    } else {\n      if (cnt > 0) {\n        cnt--;\n \
    \     }\n    }\n  }\n  return cnt == 0;\n}\nint main() {\n    auto candidate =\
    \ correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpep781504: /tmp/tmpep781504.cpp:32: int main(): Assertion `candidate((\"\
    ((()())))\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n   \n   if(brackets.length()==0)\n\
    \      return false;\n   \n   for(int i=0;i<brackets.length();i++) {\n      if(brackets[i]=='(')\n\
    \         return true;\n      if(brackets[i]==')')\n         return true;\n  \
    \    if(brackets[i]=='[') {\n         bool found = false;\n         for(int j=0;j<brackets.length();j++)\
    \ {\n            if(brackets[j]==']') {\n               found = true;\n      \
    \         break;\n            }\n         }\n         if(found)\n            return\
    \ true;\n         else\n            return false;\n      }\n      if(brackets[i]==']')\n\
    \         return true;\n      if(brackets[i]==',')\n         return false;\n \
    \  }\n   return false;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmp1ctniw7j: /tmp/tmp1ctniw7j.cpp:49: int main(): Assertion `candidate((\"\
    ((()())))\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int n\
    \ = brackets.size();\n    int i = 0;\n    for (int j = 0; j < n; j++) {\n    \
    \    char c = brackets[j];\n        if (c == ')') i++;\n        if (c == '(')\
    \ i--;\n        if (i >= 0) return false;\n    }\n    return i == 0;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"()\"))\
    \ == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpjx9xl3hs: /tmp/tmpjx9xl3hs.cpp:26: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  int count\
    \ = 0;\n  for (int i = 0; i < brackets.size() - 1; i++) {\n    if (brackets.at(i)\
    \ == '(') {\n      count++;\n    } else if (brackets.at(i) == ')') {\n      count--;\n\
    \    }\n  }\n  return count == 0 && brackets.at(brackets.size() - 1) == '(';\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpcw4stpxr: /tmp/tmpcw4stpxr.cpp:26: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // your\
    \ code goes here.\n    stack<char> parenStack;\n    \n    int len = brackets.size();\n\
    \    for (int i = 0; i < len; ++i) {\n        if (brackets[i] == '(') {\n    \
    \        parenStack.push('(');\n        } else {\n            if (parenStack.top()\
    \ == '(') {\n                if (brackets[i] == ')') {\n                    parenStack.pop();\n\
    \                } else {\n                    parenStack.push(brackets[i]);\n\
    \                }\n            } else {\n                return false;\n    \
    \        }\n        }\n    }\n    return parenStack.empty();\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpio3ydfuh.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpio3ydfuh.cpp:15:5: error: \u2018stack\u2019 was not declared in this\
    \ scope; did you mean \u2018std::stack\u2019?\n   15 |     stack<char> parenStack;\n\
    \      |     ^~~~~\n      |     std::stack\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/stack:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:89,\n\
    \                 from /tmp/tmpio3ydfuh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_stack.h:99:11:\
    \ note: \u2018std::stack\u2019 declared here\n   99 |     class stack\n      |\
    \           ^~~~~\n/tmp/tmpio3ydfuh.cpp:15:11: error: expected primary-expression\
    \ before \u2018char\u2019\n   15 |     stack<char> parenStack;\n      |      \
    \     ^~~~\n/tmp/tmpio3ydfuh.cpp:20:13: error: \u2018parenStack\u2019 was not\
    \ declared in this scope\n   20 |             parenStack.push('(');\n      | \
    \            ^~~~~~~~~~\n/tmp/tmpio3ydfuh.cpp:22:17: error: \u2018parenStack\u2019\
    \ was not declared in this scope\n   22 |             if (parenStack.top() ==\
    \ '(') {\n      |                 ^~~~~~~~~~\n/tmp/tmpio3ydfuh.cpp:33:12: error:\
    \ \u2018parenStack\u2019 was not declared in this scope\n   33 |     return parenStack.empty();\n\
    \      |            ^~~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tint left_bracket\
    \ = brackets.find('(');\n\tint right_bracket = brackets.find(')');\n\treturn left_bracket\
    \ != -1 && right_bracket != -1 && left_bracket < right_bracket;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"()\"))\
    \ == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmps4t2ag44: /tmp/tmps4t2ag44.cpp:24: int main(): Assertion `candidate((\"\
    ((()())))\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    for(size_t\
    \ i = 1; i < brackets.size(); ++i) {\n        if(brackets[i-1] != '(') {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpfvub6cmr: /tmp/tmpfvub6cmr.cpp:24: int main(): Assertion `candidate((\"\
    (()())\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    for (int\
    \ i = 0; i < brackets.length(); i++) {\n        if (brackets.at(i) != brackets.at(0)\
    \ && brackets.at(i) != brackets.at(1) && brackets.at(i) != brackets.at(2))\n \
    \           return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpz3_5tpgu: /tmp/tmpz3_5tpgu.cpp:27: int main(): Assertion `candidate((\"\
    )(()\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    stack<char>\
    \ s;\n    for (char c : brackets) {\n        if (c != ')')\n            s.push(std::char_traits<char>::tolower(c));\n\
    \        else\n            return s.empty();\n    }\n    return s.empty();\n}\n\
    int main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2txelyme.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmp2txelyme.cpp:14:5: error: \u2018stack\u2019 was not declared in this\
    \ scope; did you mean \u2018std::stack\u2019?\n   14 |     stack<char> s;\n  \
    \    |     ^~~~~\n      |     std::stack\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/stack:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:89,\n\
    \                 from /tmp/tmp2txelyme.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_stack.h:99:11:\
    \ note: \u2018std::stack\u2019 declared here\n   99 |     class stack\n      |\
    \           ^~~~~\n/tmp/tmp2txelyme.cpp:14:11: error: expected primary-expression\
    \ before \u2018char\u2019\n   14 |     stack<char> s;\n      |           ^~~~\n\
    /tmp/tmp2txelyme.cpp:17:13: error: \u2018s\u2019 was not declared in this scope\n\
    \   17 |             s.push(std::char_traits<char>::tolower(c));\n      |    \
    \         ^\n/tmp/tmp2txelyme.cpp:17:44: error: \u2018tolower\u2019 is not a member\
    \ of \u2018std::char_traits<char>\u2019\n   17 |             s.push(std::char_traits<char>::tolower(c));\n\
    \      |                                            ^~~~~~~\n/tmp/tmp2txelyme.cpp:19:20:\
    \ error: \u2018s\u2019 was not declared in this scope\n   19 |             return\
    \ s.empty();\n      |                    ^\n/tmp/tmp2txelyme.cpp:21:12: error:\
    \ \u2018s\u2019 was not declared in this scope\n   21 |     return s.empty();\n\
    \      |            ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // The\
    \ first \"bracket\" is the \"open bracket\" we will be looking for.\n    // The\
    \ last \"bracket\" is the \"close bracket\" we will be looking for.\n    std::string\
    \ first_bracket = brackets.substr(0, 1);\n    std::string last_bracket = brackets.substr(brackets.size()\
    \ - 1, 1);\n    // If the first \"bracket\" is not \"(\" and the last \"bracket\"\
    \ is not \")\",\n    // the string is not valid.\n    if (first_bracket != \"\
    (\" && last_bracket != \")\")\n        return false;\n    // Look through the\
    \ string and count \"(\", \")\".\n    // If we find an \"open\" bracket, subtract\
    \ one from the counter.\n    // If we find a \"close\" bracket, add one to the\
    \ counter.\n    int counter = 0;\n    for (size_t i = 0; i < brackets.size();\
    \ ++i) {\n        std::string next_bracket = brackets[i];\n        if (next_bracket\
    \ == '(') {\n            counter--;\n        } else if (next_bracket == ')') {\n\
    \            counter++;\n        }\n    }\n    // If the counter of the \"brackets\"\
    \ string is not equal to zero,\n    // the string is not valid.\n    if (counter\
    \ != 0)\n        return false;\n    // Otherwise, return true.\n    return true;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxtfnx6id.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpxtfnx6id.cpp:27:46: error: conversion from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to non-scalar type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} requested\n   27 |      \
    \   std::string next_bracket = brackets[i];\n      |                         \
    \                     ^\n/tmp/tmpxtfnx6id.cpp:28:26: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } and \u2018char\u2019)\n   28 |         if (next_bracket == '(') {\n      | \
    \            ~~~~~~~~~~~~ ^~ ~~~\n      |             |               |\n    \
    \  |             |               char\n      |             std::string {aka std::__cxx11::basic_string<char>}\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpxtfnx6id.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpxtfnx6id.cpp:28:29:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   28\
    \ |         if (next_bracket == '(') {\n      |                             ^~~\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpxtfnx6id.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1099:5:\
    \ note:"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  std::string\
    \ opening = brackets.substr(0, 1);\n  std::string closing = brackets.substr(1,\
    \ 1);\n\n  return (brackets.substr(0, 1) == brackets.substr(closing, 1).substr(opening.length));\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0rgvp_gk.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmp0rgvp_gk.cpp:17:52: error: cannot convert \u2018std::string\u2019 {aka\
    \ \u2018std::__cxx11::basic_string<char>\u2019} to \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019}\n   17 |   return (brackets.substr(0, 1)\
    \ == brackets.substr(closing, 1).substr(opening.length));\n      |           \
    \                                         ^~~~~~~\n      |                   \
    \                                 |\n      |                                 \
    \                   std::string {aka std::__cxx11::basic_string<char>}\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp0rgvp_gk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:2834:24:\
    \ note:   initializing argument 1 of \u2018std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc> std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::substr(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type)\
    \ const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned\
    \ int]\u2019\n 2834 |       substr(size_type __pos = 0, size_type __n = npos"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    if (brackets.empty())\
    \ {\n        return true;\n    }\n\n    bool ok = false;\n    size_t i = 0;\n\
    \    size_t j = 0;\n    std::string s = brackets;\n    while (i < s.size() &&\
    \ j < s.size() && s[j] == s[i]) {\n        i++;\n        j++;\n    }\n\n    if\
    \ (i == s.size()) {\n        return true;\n    }\n\n    if (j == s.size()) {\n\
    \        return false;\n    }\n\n    if (s[j] == '(') {\n        return correct_bracketing(brackets.substr(0,\
    \ i));\n    }\n    if (s[j] == ')') {\n        return correct_bracketing(brackets.substr(i\
    \ + 1));\n    }\n\n    return ok;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmphojqwf0a: /tmp/tmphojqwf0a.cpp:50: int main(): Assertion `candidate((\"\
    ((()())))\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::stack<bool>\
    \ open_brackets;\n    for (char c : brackets) {\n        if (c == '(') open_brackets.push(false);\n\
    \        else if (c == ')') open_brackets.pop();\n        else if (!open_brackets.empty()\
    \ && c == open_brackets.top()) open_brackets.pop();\n    }\n    return open_brackets.empty();\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::stack<std::pair<int,\
    \ char>> bracketStack;\n    for (auto c : brackets)\n        bracketStack.emplace(bracketStack.begin(),\
    \ c);\n    while (!bracketStack.empty()) {\n        auto c = bracketStack.top();\n\
    \        switch (c) {\n            case '(':\n                bracketStack.pop();\n\
    \                break;\n            case ')':\n                auto next = bracketStack.top();\n\
    \                if (next == '(') {\n                    bracketStack.pop();\n\
    \                } else {\n                    bracketStack.emplace(0, c);\n \
    \               }\n                break;\n            default:\n            \
    \    bracketStack.emplace(0, c);\n        }\n    }\n    return bracketStack.empty();\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmptjb4vnwt.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmptjb4vnwt.cpp:16:43: error: \u2018class std::stack<std::pair<int, char>\
    \ >\u2019 has no member named \u2018begin\u2019\n   16 |         bracketStack.emplace(bracketStack.begin(),\
    \ c);\n      |                                           ^~~~~\n/tmp/tmptjb4vnwt.cpp:19:18:\
    \ error: switch quantity not an integer\n   19 |         switch (c) {\n      |\
    \                  ^\n/tmp/tmptjb4vnwt.cpp:25:26: error: no match for \u2018operator==\u2019\
    \ (operand types are \u2018std::pair<int, char>\u2019 and \u2018char\u2019)\n\
    \   25 |                 if (next == '(') {\n      |                     ~~~~\
    \ ^~ ~~~\n      |                     |       |\n      |                     |\
    \       char\n      |                     std::pair<int, char>\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n       \
    \          from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmptjb4vnwt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmptjb4vnwt.cpp:25:29:\
    \ note:   \u2018std::pair<int, char>\u2019 is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \n   25 |                 if (next == '(') {\n      |                        \
    \     ^~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmptjb4vnwt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1099:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_a"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  int counter\
    \ = 0;\n  for (int i = 0; i < brackets.length(); ++i) {\n    if (brackets[i] ==\
    \ '(') {\n      ++counter;\n    } else if (brackets[i] == ')') {\n      --counter;\n\
    \    }\n    if (counter < 0) {\n      return false;\n    }\n  }\n  if (counter\
    \ == 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"()\"))\
    \ == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  std::string::size_type\
    \ pos = 0;\n  std::string temp = \"\";\n  while (brackets.size() > 0) {\n    if\
    \ (brackets.at(0) == brackets.at(pos) && brackets.size() > pos) {\n      temp\
    \ += brackets.at(pos);\n      brackets.erase(pos);\n    } else {\n      pos =\
    \ brackets.find('(');\n      if (pos == std::string::npos) {\n        return false;\n\
    \      }\n      temp += brackets.at(pos);\n      brackets.erase(pos);\n    }\n\
    \  }\n  if (brackets.size() == 0) {\n    return true;\n  } else {\n    return\
    \ false;\n  }\n}\nint main() {\n    auto candidate = correct_bracketing;\n   \
    \ assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\")) ==\
    \ (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpq6dbnrpb: /tmp/tmpq6dbnrpb.cpp:41: int main(): Assertion `candidate((\"\
    ((()())))\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int size\
    \ = brackets.size();\n    for (int i = 0; i < size; i++) {\n        if (brackets[i]\
    \ == '(' && brackets[i + 1] == ')')\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpna5mrhxw: /tmp/tmpna5mrhxw.cpp:23: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  int count\
    \ = 0;\n  // Count the number of open brackets in the given brackets string.\n\
    \  for (int i = 0; i < brackets.length(); i++)\n    if (brackets[i] == '(')\n\
    \      count++;\n\n  // Test that all brackets are closed.\n  for (int i = 0;\
    \ i < brackets.length(); i++) {\n    if (brackets[i] == '(')\n      count--;\n\
    \n    if (count < 0) {\n      return false;\n    }\n  }\n  return true;\n}\nint\
    \ main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpx4f2d1p3: /tmp/tmpx4f2d1p3.cpp:37: int main(): Assertion `candidate((\"\
    ((()())))\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tint counter\
    \ = 0;\n\tfor (int i = 0; i < brackets.size(); ++i) {\n\t\tcounter += (brackets[i]\
    \ == '(' ? 1 : 0)\n\t\t\t\t+ (brackets[i] == ')' ? 1 : 0)\n\t\t\t\t+ (brackets[i]\
    \ == '{' ? 1 : 0)\n\t\t\t\t+ (brackets[i] == '}' ? 1 : 0)\n\t\t\t\t+ (brackets[i]\
    \ == '[' ? 1 : 0)\n\t\t\t\t+ (brackets[i] == ']' ? 1 : 0);\n\t\tif (counter >\
    \ 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmppy3_w92l: /tmp/tmppy3_w92l.cpp:29: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // your\
    \ code here\n    int cnt = 0;\n    for(string::size_type i = 0; i != brackets.size()\
    \ - 1; ++i){\n        if(brackets[i] == '(' && brackets[i + 1] != ')'){\n    \
    \        cnt += 1;\n        }\n        else if(brackets[i] == '[' && brackets[i\
    \ + 1] != ']'){\n            cnt += 1;\n        }\n        else if(brackets[i]\
    \ == '{' && brackets[i + 1] != '}'){\n            cnt += 1;\n        }\n    }\n\
    \    if(cnt == 0){\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"()\"))\
    \ == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp10fhjtja.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmp10fhjtja.cpp:16:9: error: \u2018string\u2019 has not been declared\n\
    \   16 |     for(string::size_type i = 0; i != brackets.size() - 1; ++i){\n  \
    \    |         ^~~~~~\n/tmp/tmp10fhjtja.cpp:16:34: error: \u2018i\u2019 was not\
    \ declared in this scope\n   16 |     for(string::size_type i = 0; i != brackets.size()\
    \ - 1; ++i){\n      |                                  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  int open_brackets_cnt\
    \ = 0;\n  int close_brackets_cnt = 0;\n  for (char c : brackets) {\n    if (c\
    \ == '(') ++open_brackets_cnt;\n    else if (c == ')') ++close_brackets_cnt;\n\
    \    else if (c == ',') ++close_brackets_cnt;\n  }\n  // if (brackets.length()\
    \ != open_brackets_cnt + close_brackets_cnt)\n  //  return false;\n  if (open_brackets_cnt\
    \ != close_brackets_cnt)\n    return false;\n  return true;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp9vhnocs7: /tmp/tmp9vhnocs7.cpp:34: int main(): Assertion `candidate((\"\
    )(()\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  int open\
    \ = brackets.find_first_not_of(\"()\");\n  int close = brackets.find_last_not_of(\"\
    ()\");\n  return open < close;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpiyw0bfud: /tmp/tmpiyw0bfud.cpp:20: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int level\
    \ = 0;\n    for (int i = 0; i < brackets.size() - 1; i++) {\n        if (brackets[i]\
    \ == '(') {\n            level++;\n        } else if (brackets[i] == ')') {\n\
    \            level--;\n        } else {\n            return false;\n        }\n\
    \        if (level < 0) {\n            return false;\n        }\n    }\n    if\
    \ (brackets[brackets.size() - 1] != ')') {\n        return false;\n    }\n   \
    \ return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n  \
    \  assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"))\
    \ == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmplgncvk9q: /tmp/tmplgncvk9q.cpp:38: int main(): Assertion `candidate((\"\
    ((()())))\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // count\
    \ the opening and closing brackets.\n    int opening = 0;\n    int closing = 0;\n\
    \    for (auto c : brackets) {\n        if (c == '(') {\n            ++opening;\n\
    \        } else if (c == ')') {\n            ++closing;\n        }\n    }\n  \
    \  // return True if every opening bracket has a corresponding closing bracket.\n\
    \    return closing >= opening;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmp5nzbf0dx: /tmp/tmp5nzbf0dx.cpp:33: int main(): Assertion `candidate((\"\
    ((()())))\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    if (brackets.empty())\
    \ {\n        return true;\n    }\n    std::stack<char> s;\n    for (int i = 0;\
    \ i < brackets.length(); ++i) {\n        char c = brackets[i];\n        if (c\
    \ == '(') {\n            s.push(c);\n        } else if (c == ')') {\n        \
    \    if (s.size() > 0) {\n                s.pop();\n                return true;\n\
    \            }\n        }\n    }\n    return s.size() > 0;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpx85lqm6a: /tmp/tmpx85lqm6a.cpp:37: int main(): Assertion `candidate((\"\
    ((()())))\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::string\
    \ s = \"{\" + brackets + \"}\";\n    size_t slen = s.length();\n    char c;\n\
    \    bool result = true;\n    bool stack[slen];\n    for (size_t i = 0; i != slen;\
    \ ++i) {\n        c = s[i];\n        if (c == '(' || c == ')') {\n           \
    \ stack[s] = false;\n        }\n        else {\n            stack[s] = true;\n\
    \        }\n        s = s + c;\n    }\n    for (size_t i = 0; i != slen; ++i)\
    \ {\n        c = s[i];\n        if (!stack[s]) {\n            result = false;\n\
    \            break;\n        }\n        s = s + c;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1pgluj3j.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmp1pgluj3j.cpp:22:18: error: no match for \u2018operator[]\u2019 (operand\
    \ types are \u2018bool [slen]\u2019 and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    })\n   22 |             stack[s] = false;\n      |                  ^\n/tmp/tmp1pgluj3j.cpp:25:18:\
    \ error: no match for \u2018operator[]\u2019 (operand types are \u2018bool [slen]\u2019\
    \ and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    })\n   25 |             stack[s] = true;\n      |                  ^\n/tmp/tmp1pgluj3j.cpp:31:19:\
    \ error: no match for \u2018operator[]\u2019 (operand types are \u2018bool [slen]\u2019\
    \ and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    })\n   31 |         if (!stack[s]) {\n      |                   ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    char opening_brackets[]\
    \ = { '(', ')' };\n    size_t opening_brackets_size = sizeof(opening_brackets)\
    \ / sizeof(opening_brackets[0]);\n    char closing_brackets[] = { '{', '}' };\n\
    \    size_t closing_brackets_size = sizeof(closing_brackets) / sizeof(closing_brackets[0]);\n\
    \    bool result = (brackets.size() == opening_brackets_size && brackets.size()\
    \ == closing_brackets_size);\n    if (!result) {\n        std::cout << \"Brackets\
    \ are incorrect. Correct format is '(\" and \")'. Example format is '(())'.\\\
    n\";\n    }\n    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  stdout: Brackets are incorrect. Correct format is '(
  stderr: "tmpx179qn70: /tmp/tmpx179qn70.cpp:27: int main(): Assertion `candidate((\"\
    (()())\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    \n   \
    \ // Initialize result as true\n    bool result = true;\n    \n    // Iterate\
    \ through string and count opening and closing brackets\n    for (int i = 0; i\
    \ < brackets.length(); i++) {\n        \n        // If the current character is\
    \ a bracket and previous character is also a bracket, \n        // then we have\
    \ a problem.\n        if (brackets[i] == '(' && brackets[i - 1] == ')') {\n  \
    \      \n            // If previous character was not a bracket as well, then\
    \ we have a problem.\n            if (brackets[i - 1] != ')') {\n            \
    \    \n                // Set result to false\n                result = false;\n\
    \                \n                // Break the loop (the previous character was\
    \ not a bracket)\n                break;\n            }\n        }\n        \n\
    \        // If the current character is not a bracket and previous character was\
    \ a bracket, \n        // then we have a problem.\n        else if (brackets[i]\
    \ != '(' && brackets[i - 1] == '(') {\n            \n            // Set result\
    \ to false\n            result = false;\n            \n            // Break the\
    \ loop (the current character is not a bracket)\n            break;\n        }\n\
    \    }\n    \n    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmplw_ydame: /tmp/tmplw_ydame.cpp:52: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  int i =\
    \ 0;\n  int j = 0;\n  bool bracketFound = false;\n  for (; i < brackets.size()\
    \ && j < brackets.size() && !bracketFound; i++) {\n    if (brackets[i] == '(')\
    \ {\n      bracketFound = true;\n      if (brackets[j] != '(') return false;\n\
    \      j++;\n    } else if (brackets[i] == ')') {\n      bracketFound = true;\n\
    \      if (brackets[j] != ')') return false;\n      j++;\n    }\n  }\n  return\
    \ bracketFound && i == brackets.size();\n}\nint main() {\n    auto candidate =\
    \ correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpea8p3gmi: /tmp/tmpea8p3gmi.cpp:32: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  if (brackets.length()\
    \ <= 0) return false;\n  for (int i = 0; i < brackets.length(); i++) {\n    char\
    \ c = brackets[i];\n    if (c == '(' || c == '[' || c == '{' || c == '<' || c\
    \ == '>') {\n      if (brackets[i] != brackets[i + 1]) return true;\n    }\n \
    \ }\n  return false;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpws3mllor: /tmp/tmpws3mllor.cpp:29: int main(): Assertion `candidate((\"\
    ((()())))\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tstd::string::size_type\
    \ open_bracket = 0;\n\tstd::string::size_type close_bracket = 0;\n\tfor (std::string::size_type\
    \ i = 0; i < brackets.size(); i++) {\n\t\tif (brackets[i] == '(') {\n\t\t\tif\
    \ (open_bracket != std::string::npos) return false; // there is an open bracket\
    \ without corresponding closing bracket\n\t\t\topen_bracket = i;\n\t\t} else if\
    \ (brackets[i] == ')') {\n\t\t\tif (close_bracket != std::string::npos) return\
    \ false; // there is an open bracket without corresponding closing bracket\n\t\
    \t\tclose_bracket = i;\n\t\t}\n\t}\n\treturn open_bracket == close_bracket;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpfhlrd21m: /tmp/tmpfhlrd21m.cpp:29: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // for\
    \ each opening bracket, check if it's a closing bracket\n    for (int i = 0; i\
    \ < brackets.size(); i++) {\n        if (brackets[i] == \"(\") {\n           \
    \ if (i == brackets.size() - 1 ||\n                brackets[i + 1] != \"(\")\n\
    \                return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"()\"))\
    \ == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_gn862vf.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmp_gn862vf.cpp:16:28: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   16 |         if (brackets[i] == \"(\") {\n  \
    \    |                            ^~~\n/tmp/tmp_gn862vf.cpp:18:36: error: ISO\
    \ C++ forbids comparison between pointer and integer [-fpermissive]\n   18 | \
    \                brackets[i + 1] != \"(\")\n      |                          \
    \          ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    if (brackets.length()\
    \ != 1 ||\n        !std::isalpha(brackets[0]) ||\n        brackets[0] != '(' ||\n\
    \        brackets[0] != '[' ||\n        brackets[0] != '{' ||\n        brackets[0]\
    \ != '<' ||\n        brackets[0] != '>' ||\n        brackets[0] != ',' ||\n  \
    \      brackets[0] != ';') {\n        return false;\n    }\n    for (size_t i\
    \ = 1; i < brackets.length(); ++i) {\n        if (!std::isalpha(brackets[i]) ||\n\
    \            brackets[i] == ')' ||\n            brackets[i] == '}' ||\n      \
    \      brackets[i] == ']' ||\n            brackets[i] == '>' ||\n            brackets[i]\
    \ == '>' ||\n            brackets[i] == '<' ||\n            brackets[i] == '<'\
    \ ||\n            brackets[i] == ',' ||\n            brackets[i] == ';') {\n \
    \           return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpk3vq9ano: /tmp/tmpk3vq9ano.cpp:43: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    if(brackets.size()\
    \ == 0) return false;\n    if(brackets.front() != '(' || brackets.back() != ')')\
    \ return false;\n    std::string open_bracket = brackets.substr(0, 1);\n    std::string\
    \ close_bracket = brackets.substr(1, 1);\n    for(char c : brackets) {\n     \
    \   if(c == open_bracket) {\n            if(close_bracket.empty())\n         \
    \       return false;\n            else if(close_bracket.front() != c)\n     \
    \           return false;\n        }\n        else if(c == close_bracket) {\n\
    \            if(open_bracket.empty())\n                return false;\n       \
    \     else if(open_bracket.back() != c)\n                return false;\n     \
    \   }\n    }\n    return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6es3avnt.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmp6es3avnt.cpp:19:14: error: no match for \u2018operator==\u2019 (operand\
    \ types are \u2018char\u2019 and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    })\n   19 |         if(c == open_bracket) {\n      |            ~ ^~ ~~~~~~~~~~~~\n\
    \      |            |    |\n      |            char std::string {aka std::__cxx11::basic_string<char>}\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp6es3avnt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6es3avnt.cpp:19:17:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018char\u2019\n   19 |         if(c == open_bracket) {\n      |     \
    \            ^~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp6es3avnt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1099:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator==(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1099 |     operator==(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1099:5: note:\
    \   template argument deduction/sub"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  std::stack<char>\
    \ brackets;\n  std::string ans = \"()()\";\n\n  // Keep adding brackets to the\
    \ stack until we encounter the closing bracket to close\n  // this bracket and\
    \ end the stack.\n  for (int i = 0; i < brackets.size(); i++) {\n    if (brackets[i]\
    \ == ')') {\n      brackets.pop();\n      if (brackets.size() == 0)\n        ans\
    \ = brackets.top();\n    } else {\n      brackets.push(brackets[i]);\n    }\n\
    \  }\n  return ans == brackets.top();\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm03a8fru.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpm03a8fru.cpp:14:20: error: declaration of \u2018std::stack<char> brackets\u2019\
    \ shadows a parameter\n   14 |   std::stack<char> brackets;\n      |         \
    \           ^~~~~~~~\n/tmp/tmpm03a8fru.cpp:20:17: error: no match for \u2018operator[]\u2019\
    \ (operand types are \u2018std::stack<char>\u2019 and \u2018int\u2019)\n   20\
    \ |     if (brackets[i] == ')') {\n      |                 ^\n/tmp/tmpm03a8fru.cpp:25:29:\
    \ error: no match for \u2018operator[]\u2019 (operand types are \u2018std::stack<char>\u2019\
    \ and \u2018int\u2019)\n   25 |       brackets.push(brackets[i]);\n      |   \
    \                          ^\n/tmp/tmpm03a8fru.cpp:28:14: error: no match for\
    \ \u2018operator==\u2019 (operand types are \u2018std::string\u2019 {aka \u2018\
    std::__cxx11::basic_string<char>\u2019} and \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019})\n   28 |   return ans == brackets.top();\n\
    \      |          ~~~ ^~ ~~~~~~~~~~~~~~\n      |          |                  |\n\
    \      |          |                  __gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type {aka char}\n      |          std::string {aka std::__cxx11::basic_string<char>}\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpm03a8fru.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpm03a8fru.cpp:28:30:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   28\
    \ |   return ans == brackets.top();\n      |          "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  std::stack<char>\
    \ bracket_stack;\n  bool result = true;\n  // iterate through the brackets.\n\
    \  for (char bracket : brackets) {\n    if (bracket_stack.empty()) {\n      //\
    \ if the first bracket, the stack is empty.\n      // just add the current bracket.\n\
    \      bracket_stack.push(bracket);\n    } else {\n      // if not the first bracket,\
    \ then push the current bracket onto the stack.\n      bracket_stack.push(bracket);\n\
    \      // check if the next bracket is a closing bracket.\n      bool check_bracket\
    \ = bracket_stack.top() == '(';\n      // if the next bracket is a closing bracket.\n\
    \      if (check_bracket) {\n        // if the stack is not empty then pop the\
    \ top bracket from the stack\n        // and add it to the result.\n        if\
    \ (bracket_stack.size() != 0) {\n          result += bracket_stack.top() == '(';\n\
    \          bracket_stack.pop();\n        }\n      }\n    }\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp0cgl3nvf: /tmp/tmp0cgl3nvf.cpp:46: int main(): Assertion `candidate((\"\
    ((()())))\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool found_first\
    \ = false;\n    bool found_second = false;\n    for (char c : brackets) {\n  \
    \      if (c == '(') {\n            found_first = true;\n        }\n        if\
    \ (c == ')') {\n            found_second = true;\n        }\n        if (found_first\
    \ && found_second) {\n            return true;\n        }\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpxysjh9o6: /tmp/tmpxysjh9o6.cpp:35: int main(): Assertion `candidate((\"\
    ((()())))\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  if (brackets.empty())\n\
    \    return true;\n  std::stack<char> bracket;\n  for (char c : brackets)\n  \
    \  if (c == '(')\n      bracket.push(c);\n    else if (c == ')')\n      bracket.push(c);\n\
    \    else if (bracket.empty() && !bracket.top())\n      return false;\n    else\n\
    \      bracket.pop();\n  return !bracket.empty();\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp_tk50jvg: /tmp/tmp_tk50jvg.cpp:34: int main(): Assertion `candidate((\"\
    ((()())))\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::vector<int>\
    \ brackets;\n    for (char c : brackets) {\n        if (c != ')' && c != ']')\n\
    \            return false;\n        brackets.push_back(c);\n    }\n\n    for (std::vector<int>::iterator\
    \ i = brackets.begin(); i != brackets.end(); ++i) {\n        // if the previous\
    \ was a closing bracket,\n        // then the next should be a closing bracket.\n\
    \        if (brackets[i - 1] == ')' && brackets[i + 1] == ')')\n            return\
    \ true;\n        if (brackets[i - 1] == ']' && brackets[i + 1] == ']')\n     \
    \       return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjm7rhjtt.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpjm7rhjtt.cpp:14:22: error: declaration of \u2018std::vector<int> brackets\u2019\
    \ shadows a parameter\n   14 |     std::vector<int> brackets;\n      |       \
    \               ^~~~~~~~\n/tmp/tmpjm7rhjtt.cpp:24:21: error: no match for \u2018\
    operator[]\u2019 (operand types are \u2018std::vector<int>\u2019 and \u2018__gnu_cxx::__normal_iterator<int*,\
    \ std::vector<int> >\u2019)\n   24 |         if (brackets[i - 1] == ')' && brackets[i\
    \ + 1] == ')')\n      |                     ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpjm7rhjtt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1040:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::reference std::vector<_Tp,\
    \ _Alloc>::operator[](std::vector<_Tp, _Alloc>::size_type) [with _Tp = int; _Alloc\
    \ = std::allocator<int>; std::vector<_Tp, _Alloc>::reference = int&; std::vector<_Tp,\
    \ _Alloc>::size_type = long unsigned int]\u2019\n 1040 |       operator[](size_type\
    \ __n) _GLIBCXX_NOEXCEPT\n      |       ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1040:28:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__normal_iterator<int*,\
    \ std::vector<int> >\u2019 to \u2018std::vector<int>::size_type\u2019 {aka \u2018\
    long unsigned int\u2019}\n 1040 |       operator[](size_type __n) _GLIBCXX_NOEXCEPT\n\
    \      |                  ~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1058:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::const_reference std::vector<_Tp,\
    \ _Alloc>::operator[](std::vector<_Tp, _Alloc>::size_type) const [with _Tp = int;\
    \ _Alloc = std::allocator<int>; std::vector<_Tp, _Alloc>::const_reference = const\
    \ int&; std::vector<_Tp, _Alloc>::size_type = long unsigned int]\u2019\n 1058\
    \ |       operator[](size_type __n) const _GLIBCXX_NOE"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  // Initialize\
    \ number of open brackets.\n  int open_brackets = 0;\n  // Iterate over all characters\
    \ in the string.\n  for (char c: brackets) {\n    // Increment number of open\
    \ brackets.\n    if (c == '(') open_brackets++;\n    // Decrement number of closed\
    \ brackets.\n    if (c == ')') open_brackets--;\n    // Return true if the number\
    \ of brackets is 0.\n    if (open_brackets == 0)\n      return true;\n  }\n  //\
    \ Return false if there were no closing brackets.\n  return open_brackets == 0;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp_7e2ks0p: /tmp/tmp_7e2ks0p.cpp:35: int main(): Assertion `candidate((\"\
    ((()())))\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::string\
    \ s = \"[\" + brackets + \"]\";\n    return s.find(\"[\") != s.find(\"]\");\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp3hjwcw51: /tmp/tmp3hjwcw51.cpp:23: int main(): Assertion `candidate((\"\
    ((()())))\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ found = 0;\n    for (int i=0; i<brackets.length(); i++) {\n        if (brackets[i]\
    \ == '(')\n            ++found;\n        else if (brackets[i] == '[' || brackets[i]\
    \ == '{' || brackets[i] == '(')\n            --found;\n        else if (brackets[i]\
    \ == ')' && found > 0)\n            return false;\n        else if (brackets[i]\
    \ == ']' && found < 0)\n            return false;\n        else if (brackets[i]\
    \ == '}' && found > 0)\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpv62nxj2s: /tmp/tmpv62nxj2s.cpp:31: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    auto it\
    \ = brackets.begin();\n    while (it != brackets.end()) {\n        // get the\
    \ first char on the string and then find it\n        // by going through the string\
    \ char by char.\n        // if brackets[it] == brackets[it + 1], return true;\n\
    \        // if brackets[it] != brackets[it + 1], return false;\n        if (brackets[it]\
    \ == brackets[it + 1])\n            it++;\n        else\n            return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvmtfollg.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpvmtfollg.cpp:20:21: error: no match for \u2018operator[]\u2019 (operand\
    \ types are \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } and \u2018__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >\u2019)\n   20 |         if (brackets[it] == brackets[it + 1])\n      |   \
    \                  ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpvmtfollg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1046:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_reference\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator[](std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type) const [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_reference\
    \ = const char&; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019\n 1046 |       operator[] (size_type __pos) const\
    \ _GLIBCXX_NOEXCEPT\n      |       ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1046:29:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__normal_iterator<char*,\
    \ s"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // Your\
    \ code goes here\n    for(int i = 0; brackets[i] != '\\0'; i++) {\n        if(brackets[i]\
    \ != ')' && brackets[i] != ')'){\n            return false;\n        }\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmp6a7pkhhh: /tmp/tmp6a7pkhhh.cpp:24: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tassert(brackets.size()\
    \ >= 2);\n\tfor (int i = 0; i < brackets.size() - 1; i++) {\n\t\tint j = i;\n\t\
    \twhile (j < brackets.size() &&\n\t\t\tbrackets[j] == brackets[j + 1]) {\n\t\t\
    \tj++;\n\t\t}\n\t\tif (j == brackets.size() - 1) {\n\t\t\treturn true;\n\t\t}\n\
    \t}\n\treturn false;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpy1aqqiog: /tmp/tmpy1aqqiog.cpp:29: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool found\
    \ = false;\n    for (int i = 0; i < brackets.size() - 1; ++i) {\n        if (brackets.at(i)\
    \ == '(' && brackets.at(i + 1) == ')') {\n            found = true;\n        }\n\
    \    }\n    return found;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpbnxjrfe7: /tmp/tmpbnxjrfe7.cpp:28: int main(): Assertion `candidate((\"\
    ((()())))\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    for (char\
    \ c: brackets) {\n        if (c != '(' && c != ')')\n            return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmp3gfn62kn: /tmp/tmp3gfn62kn.cpp:26: int main(): Assertion `candidate((\"\
    ((()())))\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int brackets_size\
    \ = brackets.length();\n    // every opening bracket has a corresponding closing\
    \ bracket.\n    if (brackets_size < 1) {\n        return false;\n    }\n    int\
    \ brackets_index = 0;\n    while (brackets_index < brackets_size) {\n        int\
    \ opening_bracket = brackets[brackets_index];\n        int closing_bracket = brackets[brackets_index\
    \ + 1];\n        if ((opening_bracket == '(') && (closing_bracket == ')')) {\n\
    \            brackets_index += 2;\n        } else if (opening_bracket == '(')\
    \ {\n            brackets_index++;\n        } else if (closing_bracket == ')')\
    \ {\n            brackets_index++;\n        } else {\n            brackets_index++;\n\
    \        }\n    }\n    return brackets_index == brackets_size;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"()\"))\
    \ == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpp99sitsw: /tmp/tmpp99sitsw.cpp:41: int main(): Assertion `candidate((\"\
    ((()())))\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  int stack[brackets.size()\
    \ + 1];\n  int i;\n  int open_brackets = 0;\n  int closed_brackets = 0;\n  for\
    \ (i = 0; i < brackets.size(); i++) {\n    if (brackets[i] == '(') {\n      open_brackets++;\n\
    \    } else if (brackets[i] == ')') {\n      closed_brackets++;\n    }\n  }\n\
    \  stack[open_brackets] = closed_brackets;\n  while (open_brackets != closed_brackets)\
    \ {\n    closed_brackets = 0;\n    for (i = 0; i < open_brackets; i++) {\n   \
    \   if (stack[i] == 0) {\n        stack[i] = 1;\n      } else if (stack[i] ==\
    \ 1) {\n        stack[i] = 0;\n      } else {\n        closed_brackets++;\n  \
    \    }\n    }\n    open_brackets = 0;\n    for (i = 0; i < closed_brackets; i++)\
    \ {\n      if (stack[i] == 1) {\n        open_brackets++;\n      } else if (stack[i]\
    \ == 0) {\n        closed_brackets++;\n      }\n    }\n  }\n  return stack[brackets.size()\
    \ - 1] == 0;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpq0hcw5i5: /tmp/tmpq0hcw5i5.cpp:50: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    for (auto\
    \ it = brackets.begin(); it != brackets.end(); ++it)\n        if (*it == '(')\n\
    \            return false;\n    return true;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpigx6t3b_: /tmp/tmpigx6t3b_.cpp:21: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    stack<char>\
    \ bracketStack;\n    for (auto b : brackets) {\n        if (b == '(') {\n    \
    \        bracketStack.push(b);\n        } else if (b == ')') {\n            if\
    \ (bracketStack.empty()) {\n                return false;\n            } else\
    \ {\n                char c = bracketStack.top();\n                bracketStack.pop();\n\
    \                if (c != ')') {\n                    return false;\n        \
    \        }\n            }\n        }\n    }\n    return bracketStack.empty();\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgv0yk98p.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpgv0yk98p.cpp:14:5: error: \u2018stack\u2019 was not declared in this\
    \ scope; did you mean \u2018std::stack\u2019?\n   14 |     stack<char> bracketStack;\n\
    \      |     ^~~~~\n      |     std::stack\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/stack:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:89,\n\
    \                 from /tmp/tmpgv0yk98p.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_stack.h:99:11:\
    \ note: \u2018std::stack\u2019 declared here\n   99 |     class stack\n      |\
    \           ^~~~~\n/tmp/tmpgv0yk98p.cpp:14:11: error: expected primary-expression\
    \ before \u2018char\u2019\n   14 |     stack<char> bracketStack;\n      |    \
    \       ^~~~\n/tmp/tmpgv0yk98p.cpp:17:13: error: \u2018bracketStack\u2019 was\
    \ not declared in this scope\n   17 |             bracketStack.push(b);\n    \
    \  |             ^~~~~~~~~~~~\n/tmp/tmpgv0yk98p.cpp:19:17: error: \u2018bracketStack\u2019\
    \ was not declared in this scope\n   19 |             if (bracketStack.empty())\
    \ {\n      |                 ^~~~~~~~~~~~\n/tmp/tmpgv0yk98p.cpp:30:12: error:\
    \ \u2018bracketStack\u2019 was not declared in this scope\n   30 |     return\
    \ bracketStack.empty();\n      |            ^~~~~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  if (brackets.empty())\
    \ return false;\n  int index = 0;\n  while (index != brackets.size() -1) {\n \
    \   if (brackets[index] != '(') return false;\n    index++;\n  }\n  if (index\
    \ != brackets.size() - 1) return false;\n  if (brackets[index] != ')') return\
    \ false;\n  return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpzb_5va6f: /tmp/tmpzb_5va6f.cpp:27: int main(): Assertion `candidate((\"\
    (()())\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    for (int\
    \ i = 0; i < brackets.length(); i++) {\n        std::string s = brackets.substr(i,\
    \ brackets.length());\n        if (s[0] == '(') {\n            if (s.substr(0,\
    \ 1).find('(') == std::string::npos) {\n                return false;\n      \
    \      }\n            if (s.substr(0, 1).rfind(')') != std::string::npos) {\n\
    \                return false;\n            }\n        } else if (s[0] == ')')\
    \ {\n            if (s.substr(0, 1).find('(') == std::string::npos) {\n      \
    \          return false;\n            }\n            if (s.substr(0, 1).rfind(')')\
    \ != std::string::npos) {\n                return false;\n            }\n    \
    \    }\n    }\n    return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpwtdl3tyh: /tmp/tmpwtdl3tyh.cpp:36: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    assert(brackets.size()\
    \ == 2);\n    return (brackets[0] == brackets[1]);\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpa7p6483k: /tmp/tmpa7p6483k.cpp:19: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // Use\
    \ a stack to keep track of whether or not a bracket is properly paired.\n    bool\
    \ result = true;\n    int top = -1;\n    for (int i = 0; i <= brackets.size()\
    \ - 1; ++i) {\n        // If brackets[i] is ')', we're done with bracketing.\n\
    \        if (brackets[i] == '(') {\n            if (brackets[++i] != ')') {\n\
    \                result = false;\n                break;\n            }\n    \
    \        // If brackets[++i] is ')', we're done with bracketing.\n           \
    \ if (brackets[++i] != ')') {\n                result = false;\n             \
    \   break;\n            }\n            // If we reached the end of the string\
    \ without finding a matching ')',\n            // then we didn't have all the\
    \ brackets.\n            if (i != brackets.size() - 1) result = false;\n     \
    \       // If brackets[i] is ')', we're done with bracketing.\n            if\
    \ (brackets[++i] != ')') {\n                result = false;\n                break;\n\
    \            }\n            // If we reached the end of the string without finding\
    \ a matching ')',\n            // then we didn't have all the brackets.\n    \
    \        if (i != brackets.size() - 1) result = false;\n        }\n        //\
    \ If brackets[i] is ')', we're done with bracketing.\n        else if (brackets[i]\
    \ == ')') {\n            // If brackets[++i] is ')', we're done with bracketing.\n\
    \            if (brackets[++i] != ')') {\n                result = false;\n  \
    \              break;\n            }\n            // If we reached the end of\
    \ the string without finding a matching ')',\n            // then we didn't have\
    \ all the brackets.\n            if (i != brackets.size() - 1) result = false;\n\
    \        }\n        // If brackets[i] is ')', we're done with bracketing.\n  \
    \      else if (brackets[i] == '(') {\n            // If we reached the end of\
    \ the string without finding a matching ')',\n            // then we didn't have\
    \ all the brackets.\n            if (i != brackets.size() - 1) result = false;\n\
    \        }\n        // If brackets[i] is ')', we're done with bracketing.\n  \
    \      else if (brackets[i] == '[') {\n            // If we reached the end of\
    \ the string without finding a matching ']',\n            // then we didn't have\
    \ all the brackets.\n            if (i != brackets.size() - 1) result = false;\n\
    \        }\n        // If brackets[i] is ']', we're done with bracketing.\n  \
    \      else if (brackets[i] == ']') {\n            // If we reached the end of\
    \ the string without finding a matching '[',\n            // then we didn't have\
    \ all the brackets.\n            if (i != brackets.size() - 1) result = false;\n\
    \        }\n        // If brackets[i] is ']', we're done with bracketing.\n  \
    \      else if (brackets[i] == '{') {\n            // If we reached the end of\
    \ the string without finding a matching '}',\n            // then we didn't have\
    \ all the brackets.\n            if (i != brackets.size() - 1) result = false;\n\
    \        }\n        // If brackets[i] is '}', we're done with bracketing.\n  \
    \      else if (brackets[i] == '}') {\n\n}\nint main() {\n    auto candidate =\
    \ correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg6qtl0hc.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpg6qtl0hc.cpp:80:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   80 | int main() {\n      |            ^\n/tmp/tmpg6qtl0hc.cpp:94:1:\
    \ error: expected \u2018}\u2019 at end of input\n   94 | }\n      | ^\n/tmp/tmpg6qtl0hc.cpp:17:52:\
    \ note: to match this \u2018{\u2019\n   17 |     for (int i = 0; i <= brackets.size()\
    \ - 1; ++i) {\n      |                                                    ^\n\
    /tmp/tmpg6qtl0hc.cpp:94:1: error: expected \u2018}\u2019 at end of input\n   94\
    \ | }\n      | ^\n/tmp/tmpg6qtl0hc.cpp:13:47: note: to match this \u2018{\u2019\
    \n   13 | bool correct_bracketing(std::string brackets) {\n      |           \
    \                                    ^\n/tmp/tmpg6qtl0hc.cpp:94:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   94 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // Your\
    \ code here\n    std::string s = \"()\";\n    size_t len = s.size();\n    bool\
    \ flag = true;\n    for (size_t i = 0; i < len; ++i) {\n        if (brackets[i]\
    \ != brackets[len - i - 1]) {\n            flag = false;\n            break;\n\
    \        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmp1dx0els8: /tmp/tmp1dx0els8.cpp:28: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::stack<char>\
    \ bracket;\n    int opening_brackets = brackets.size();\n    for (int i = 0; i\
    \ < opening_brackets; ++i) {\n        char c = brackets.at(i);\n        // a closing\
    \ bracket?\n        if (c == ')') bracket.push(c);\n        else if (c == '(')\
    \ {\n            // not last, is it correct?\n            if (bracket.empty())\
    \ return false;\n            char last = bracket.top();\n            char next\
    \ = brackets.at(i + 1);\n            // correct bracketing?\n            if ((next\
    \ != ')') && (next != c)) return false;\n            // closing bracket and opening\
    \ bracket is same character?\n            if (last != next) return false;\n  \
    \          // closing bracket is last?\n            if (last == c) bracket.pop();\n\
    \        }\n    }\n    // open brackets now empty, no need to check.\n    return\
    \ bracket.empty();\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmp1oy2h46t: /tmp/tmp1oy2h46t.cpp:38: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ leng = brackets.length();\n    std::string result;\n    bool result = true;\n\
    \    for (size_t i = 0; i < leng; i++) {\n        if (brackets[i] == '(') {\n\
    \            if (i == leng - 1) return false;\n            if (brackets[i + 1]\
    \ != ')') return false;\n            i++;\n        } else if (brackets[i] == '[')\
    \ {\n            if (i == leng - 1) return false;\n            if (brackets[i\
    \ + 1] != ']') return false;\n            i++;\n        } else if (brackets[i]\
    \ == '{') {\n            if (i == leng - 1) return false;\n            if (brackets[i\
    \ + 1] != '{') return false;\n            i++;\n        } else if (brackets[i]\
    \ == '}') {\n            if (i == leng - 1) return false;\n            if (brackets[i\
    \ + 1] != '}') return false;\n            i++;\n        } else {\n           \
    \ return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt0b3t_75.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpt0b3t_75.cpp:16:10: error: conflicting declaration \u2018bool result\u2019\
    \n   16 |     bool result = true;\n      |          ^~~~~~\n/tmp/tmpt0b3t_75.cpp:15:17:\
    \ note: previous declaration as \u2018std::string result\u2019\n   15 |     std::string\
    \ result;\n      |                 ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  for (int\
    \ i = 1; i < brackets.length(); i++) {\n    if (brackets[i] != brackets[i - 1])\
    \ \n      return false;\n  }\n  return true;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpk6_3xhgi: /tmp/tmpk6_3xhgi.cpp:22: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    if (brackets.length()\
    \ != 1 || !brackets[0]) return 0;\n    if (brackets[0] == '(') {\n        return\
    \ brackets[1] == '(';\n    }\n    if (brackets[0] == '[') {\n        return brackets[1]\
    \ == '[';\n    }\n    if (brackets[0] == '{') {\n        return brackets[1] ==\
    \ '{';\n    }\n    if (brackets[0] == '<') {\n        return brackets[1] == '<';\n\
    \    }\n    if (brackets[0] == '>') {\n        return brackets[1] == '>';\n  \
    \  }\n    return 0;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpfqnwp75w: /tmp/tmpfqnwp75w.cpp:34: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int len\
    \ = brackets.size();\n    // if the string is empty, return true\n    if (len\
    \ == 0)\n        return true;\n    // if we have found the closing bracket, we\
    \ know it is the last bracket.\n    // if not, we know there are more brackets\
    \ than we have.\n    if (brackets[len - 1] != '(') {\n        return false;\n\
    \    }\n    int close = brackets.find_first_of('(', len - 1);\n    // if the closing\
    \ bracket is found before the opening bracket, return false.\n    if (close <\
    \ 0)\n        return false;\n    int open = brackets.find_first_of(')', close\
    \ + 1);\n    // if the opening bracket is found before the closing bracket, return\
    \ false.\n    if (open < 0)\n        return false;\n    // if this opening bracket\
    \ is followed by the closing bracket, return false.\n    if (brackets[open] ==\
    \ brackets[close])\n        return false;\n    // if this opening bracket is followed\
    \ by a \"(\" or a \")\", return false.\n    if (brackets[open] == '(' || brackets[open]\
    \ == ')')\n        return false;\n    // otherwise, return true.\n    return true;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp_hyt102p: /tmp/tmp_hyt102p.cpp:42: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  int n_open\
    \ = brackets.size();\n  int n_close = brackets.size();\n  for (int i = 0; i <\
    \ n_close; i++) {\n    int index = brackets.find_first_of(\"()\", i);\n    if\
    \ (index < 0) return false;\n    // if the index of a closing bracket is greater\
    \ than the index of an opening bracket, swap the positions.\n    if (brackets[index]\
    \ == brackets[i]) swap(index--, i);\n    // now index is the index of the opening\
    \ bracket.\n    if (index != i) {\n      // the closing bracket is not an opening\
    \ bracket.\n      if (brackets[i] != brackets[index]) {\n        // the closing\
    \ bracket is part of a longer opening bracket\n        if (brackets[i + 1] !=\
    \ brackets[index + 1]) return false;\n      }\n      // the closing bracket is\
    \ the same as the opening bracket.\n      swap(index--, i);\n    }\n    if (index\
    \ < 0) {\n      // the opening bracket is not closed.\n      return false;\n \
    \   }\n    n_close = index;\n  }\n  // if we didn't find the closing bracket,\
    \ there is no right bracket.\n  if (n_close >= n_open) return false;\n  return\
    \ true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpexmr6_ub.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpexmr6_ub.cpp:20:41: error: \u2018swap\u2019 was not declared in this\
    \ scope\n   20 |     if (brackets[index] == brackets[i]) swap(index--, i);\n \
    \     |                                         ^~~~\n/tmp/tmpexmr6_ub.cpp:20:41:\
    \ note: suggested alternatives:\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpexmr6_ub.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:2029:5:\
    \ note:   \u2018std::__cxx11::swap\u2019\n 2029 |     swap(match_results<_Bi_iter,\
    \ _Alloc>& __lhs,\n      |     ^~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/exception:143,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpexmr6_ub.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/exception_ptr.h:166:5:\
    \ note:   \u2018std::__exception_ptr::swap\u2019\n  166 |     swap(exception_ptr&\
    \ __lhs, exception_ptr& __rhs)\n      |     ^~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/nested_exception.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/exception:144,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sst"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  std::string\
    \ s = \"((\";\n  std::string t = \"))\";\n  int i = 0; // keep track of the position\
    \ of brackets.\n  while (i < brackets.size()) {\n    if (brackets[i] == s[0])\
    \ {\n      if (brackets[i + 1] != t[0]) {\n        return false;\n      }\n  \
    \    i += 2;\n    } else {\n      if (brackets[i] != t[0]) {\n        return false;\n\
    \      }\n      i++;\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp23jgemzl: /tmp/tmp23jgemzl.cpp:35: int main(): Assertion `candidate((\"\
    (()())\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tauto opening_bracket\
    \ = brackets.find(\"(\");\n\tif (opening_bracket == std::string::npos)\n\t\treturn\
    \ false;\n\tauto closing_bracket = brackets.rfind(\")\");\n\tif (closing_bracket\
    \ == std::string::npos)\n\t\treturn false;\n\tassert(opening_bracket < closing_bracket);\n\
    \tfor (auto i = opening_bracket; i < closing_bracket; ++i) {\n\t\tif (brackets[i]\
    \ != brackets[opening_bracket])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\n\
    int main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmphj7rowie: /tmp/tmphj7rowie.cpp:30: int main(): Assertion `candidate((\"\
    (()())\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  if (brackets.front()\
    \ != '(')\n    return false;\n  int n = (int)brackets.size();\n  for (int i =\
    \ 1; i < n; i++) {\n    if (brackets[i] != ')')\n      return false;\n  }\n  return\
    \ brackets[n] == ')';\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpij2kfw9f: /tmp/tmpij2kfw9f.cpp:25: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tint n =\
    \ brackets.length();\n\tint paren = 0;\n\tfor (int i = 0; i < n; ++i) {\n\t\t\
    if (brackets[i] == '(') {\n\t\t\tparen += 1;\n\t\t} else if (brackets[i] == ')')\
    \ {\n\t\t\tparen -= 1;\n\t\t\tif (paren == 0) return true;\n\t\t} else if (brackets[i]\
    \ != ' ') return false;\n\t}\n\treturn paren != 0;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmphhz29aec: /tmp/tmphhz29aec.cpp:32: int main(): Assertion `candidate((\"\
    ((()())))\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // We\
    \ just need one character for our \"stack\"\n    char stack[brackets.size() +\
    \ 1];\n    stack[0] = '\\0';\n\n    // Loop over all characters in brackets\n\
    \    for (char c : brackets) {\n        // If the character is parens, push it\n\
    \        if (c == '(') {\n            stack[stack.size() - 1] = '\\0';\n     \
    \       stack[stack.size()] = '(';\n        }\n        // If the character is\
    \ brackets, pop it\n        else if (c == '[') {\n            if (stack[stack.size()\
    \ - 1] == '(') {\n                stack[stack.size()] = '\\0';\n             \
    \   stack[stack.size() - 1] = ')';\n            }\n            else {\n      \
    \          stack[stack.size()] = '\\0';\n                stack[stack.size() -\
    \ 1] = '[';\n            }\n        }\n        // If it is a closing bracket,\
    \ pop it\n        else if (c == ')') {\n            if (stack[stack.size() - 1]\
    \ == '[') {\n                stack[stack.size()] = '\\0';\n                stack[stack.size()\
    \ - 1] = ']';\n            }\n            else {\n                stack[stack.size()]\
    \ = '\\0';\n                stack[stack.size() - 1] = ')';\n            }\n  \
    \      }\n        // If it is a closing bracket, pop it\n        else if (c ==\
    \ ']') {\n            if (stack[stack.size() - 1] == '(') {\n                stack[stack.size()]\
    \ = '\\0';\n                stack[stack.size() - 1] = '[';\n            }\n  \
    \          else {\n                stack[stack.size()] = '\\0';\n            \
    \    stack[stack.size() - 1] = '[';\n            }\n        }\n    }\n    if (stack[0]\
    \ == '\\0') {\n        return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp663f0wea.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmp663f0wea.cpp:22:25: error: request for member \u2018size\u2019 in \u2018\
    stack\u2019, which is of non-class type \u2018char [(<anonymous> + 1)]\u2019\n\
    \   22 |             stack[stack.size() - 1] = '\\0';\n      |               \
    \          ^~~~\n/tmp/tmp663f0wea.cpp:23:25: error: request for member \u2018\
    size\u2019 in \u2018stack\u2019, which is of non-class type \u2018char [(<anonymous>\
    \ + 1)]\u2019\n   23 |             stack[stack.size()] = '(';\n      |       \
    \                  ^~~~\n/tmp/tmp663f0wea.cpp:27:29: error: request for member\
    \ \u2018size\u2019 in \u2018stack\u2019, which is of non-class type \u2018char\
    \ [(<anonymous> + 1)]\u2019\n   27 |             if (stack[stack.size() - 1] ==\
    \ '(') {\n      |                             ^~~~\n/tmp/tmp663f0wea.cpp:28:29:\
    \ error: request for member \u2018size\u2019 in \u2018stack\u2019, which is of\
    \ non-class type \u2018char [(<anonymous> + 1)]\u2019\n   28 |               \
    \  stack[stack.size()] = '\\0';\n      |                             ^~~~\n/tmp/tmp663f0wea.cpp:29:29:\
    \ error: request for member \u2018size\u2019 in \u2018stack\u2019, which is of\
    \ non-class type \u2018char [(<anonymous> + 1)]\u2019\n   29 |               \
    \  stack[stack.size() - 1] = ')';\n      |                             ^~~~\n\
    /tmp/tmp663f0wea.cpp:32:29: error: request for member \u2018size\u2019 in \u2018\
    stack\u2019, which is of non-class type \u2018char [(<anonymous> + 1)]\u2019\n\
    \   32 |                 stack[stack.size()] = '\\0';\n      |               \
    \              ^~~~\n/tmp/tmp663f0wea.cpp:33:29: error: request for member \u2018\
    size\u2019 in \u2018stack\u2019, which is of non-class type \u2018char [(<anonymous>\
    \ + 1)]\u2019\n   33 |                 stack[stack.size() - 1] = '[';\n      |\
    \                             ^~~~\n/tmp/tmp663f0wea.cpp:38:29: error: request\
    \ for member \u2018size\u2019 in \u2018stack\u2019, which is of non-class type\
    \ \u2018char [(<anonymous> + 1)]\u2019\n   38 |             if (stack[stack.size()\
    \ - 1] == '[') {\n      |                             ^~~~\n/tmp/tmp663f0wea.cpp:39:29:\
    \ error: request for member \u2018size\u2019 in \u2018stack\u2019, which is of\
    \ non-class type \u2018char [(<anonymous> + 1)]\u2019\n   39 |               \
    \  stack[stack.size()] = '\\0';\n      |                       "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // iterate\
    \ through the string, a left bracket is one char left.\n    // the char left is\
    \ a left bracket\n    // the char right is a right bracket\n    // if an open\
    \ bracket is followed by a right bracket,\n    // then the bracket is closed,\
    \ and the bracket is opened again\n    // the bracket is closed if it is not followed\
    \ by a right bracket\n\n    bool result = true;\n    size_t left_bracket = 0;\n\
    \    size_t right_bracket = 0;\n    size_t left_index = 0;\n    size_t right_index\
    \ = 0;\n    \n    // iterate through brackets one character at a time\n    while(left_index\
    \ < brackets.size()) {\n        char left_char = brackets[left_index];\n     \
    \   char right_char = brackets[right_index];\n        \n        // if the left\
    \ bracket is closed, then it must have a right bracket\n        if (left_char\
    \ == ')') {\n            if (right_char != '(') {\n                result = false;\n\
    \                left_index++;\n                right_index++;\n             \
    \   break;\n            } else {\n                left_bracket++;\n          \
    \      right_bracket = 0;\n            }\n        } else { // if the right bracket\
    \ is closed, then it must have a left bracket\n            if (right_char == ')')\
    \ {\n                if (left_char != '(') {\n                    result = false;\n\
    \                    right_index++;\n                    left_index++;\n     \
    \               break;\n                } else {\n                    right_bracket++;\n\
    \                    left_bracket = 0;\n                }\n            } else\
    \ {\n                if (left_char != right_char) {\n                    result\
    \ = false;\n                    left_index++;\n                    right_index++;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     left_index++;\n    }\n    \n    return result;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpdslrld85: /tmp/tmpdslrld85.cpp:74: int main(): Assertion `candidate((\"\
    ((()())))\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int n_open\
    \ = brackets.size();\n    int n_closed = brackets.size() - 1;\n    for (int i\
    \ = 0; i < n_closed; i++) {\n        if (brackets[i] != brackets[i + 1]) \n  \
    \          return false;\n    }\n    return brackets[brackets.size() - 1] == brackets[0];\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp5o_cf7ul: /tmp/tmp5o_cf7ul.cpp:24: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // Your\
    \ code goes here\n    // for (int i = 0; i < brackets.length(); i++) {\n    //\
    \     if (brackets[i] == '(')\n    //         if (brackets[i+1] == ')')\n    //\
    \             return true;\n    //         else\n    //             return false;\n\
    \    //     else if (brackets[i] == '[' || brackets[i] == '{')\n    //       \
    \  if (brackets[i+1] == ']' || brackets[i+1] == '}')\n    //             return\
    \ true;\n    //         else\n    //             return false;\n    //     else\
    \ if (brackets[i] == '(' || brackets[i] == '{' || brackets[i] == '[')\n    //\
    \         return false;\n    //     else\n    //         return false;\n    //\
    \ }\n    return false;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpnkfzblat: /tmp/tmpnkfzblat.cpp:35: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  int pos\
    \ = 0;\n  while (pos < brackets.size() - 1) {\n    if (brackets[pos] == '(') {\n\
    \      pos = pos + 1;\n    } else {\n      if (brackets[pos] == ')') {\n     \
    \   return true;\n      } else {\n        pos = pos + 1;\n      }\n    }\n  }\n\
    \  return brackets[brackets.size() - 1] == ')';\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpizh8pu8_: /tmp/tmpizh8pu8_.cpp:34: int main(): Assertion `candidate((\"\
    ((()())))\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::vector<char>\
    \ vchBrackets;\n    for (char bracket: brackets) {\n        if (bracket == '(')\
    \ {\n            vchBrackets.push_back(bracket);\n        } else if (bracket ==\
    \ ')') {\n            if (vchBrackets.size() > 0) {\n                auto ch =\
    \ vchBrackets.back();\n                vchBrackets.pop_back();\n             \
    \   return ch == '(';\n            } else {\n                return false;\n \
    \           }\n        } else {\n            vchBrackets.push_back(bracket);\n\
    \        }\n    }\n    if (vchBrackets.size() > 0) return false;\n    return true;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpihypbw24: /tmp/tmpihypbw24.cpp:39: int main(): Assertion `candidate((\"\
    ((()())))\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int open\
    \ = 0;\n    int close = 0;\n    for (char c : brackets) {\n        if (c == '(')\
    \ open++;\n        else if (c == ')') close++;\n    }\n    return close == open;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmptbrmbmj6: /tmp/tmptbrmbmj6.cpp:29: int main(): Assertion `candidate((\"\
    )(()\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  std::stack<char>\
    \ brackets;\n  for (char &i : brackets) {\n    i = static_cast<char>(0);\n  }\n\
    \  bool ans = brackets.empty();\n  for (char c : brackets) {\n    ans &= ((c ==\
    \ ')') && brackets.empty()) || ((c == '(') && brackets.size() > 0);\n    if (!ans)\
    \ {\n      return false;\n    }\n  }\n  return ans;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2m4xlfuo.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmp2m4xlfuo.cpp:14:20: error: declaration of \u2018std::stack<char> brackets\u2019\
    \ shadows a parameter\n   14 |   std::stack<char> brackets;\n      |         \
    \           ^~~~~~~~\n/tmp/tmp2m4xlfuo.cpp:15:18: error: no matching function\
    \ for call to \u2018begin(std::stack<char>&)\u2019\n   15 |   for (char &i : brackets)\
    \ {\n      |                  ^~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/range_access.h:36,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp2m4xlfuo.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp* std::begin(std::initializer_list<_Tp>)\u2019\
    \n   89 |     begin(initializer_list<_Tp> __ils) noexcept\n      |     ^~~~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp2m4xlfuo.cpp:15:18:\
    \ note:   \u2018std::stack<char>\u2019 is not derived from \u2018std::initializer_list<_Tp>\u2019\
    \n   15 |   for (char &i : brackets) {\n      |                  ^~~~~~~~\nIn\
    \ file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n\
    \                 from /shared/cento"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  int open\
    \ = 1;\n  for (int i = 0; i < brackets.length(); i++) {\n    char curr = brackets[i];\n\
    \    if (curr == '(') open++;\n    else if (curr == ')') open--;\n    if (open\
    \ < 0) return false;\n  }\n  return true;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpej2z33u1: /tmp/tmpej2z33u1.cpp:29: int main(): Assertion `candidate((\"\
    ((()())))\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  for (size_t\
    \ i = 0; i < brackets.size() - 1; i++) {\n    if (brackets[i] == brackets[i +\
    \ 1]) return false;\n  }\n  return brackets[brackets.size() - 1] == ')';\n}\n\
    int main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpz7pufjrj: /tmp/tmpz7pufjrj.cpp:22: int main(): Assertion `candidate((\"\
    (()())\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  int count\
    \ = 0;\n  for(int i = 0; i < brackets.length(); i++) {\n    if(brackets[i] ==\
    \ '(') count++;\n    else if(brackets[i] == ')') count--;\n    if(count < 0) return\
    \ false;\n  }\n  \n  return count == 0;\n}\nint main() {\n    auto candidate =\
    \ correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  int num_open_brackets\
    \ = brackets.size();\n  assert(num_open_brackets > 0);\n  int current_index =\
    \ 0;\n  while (current_index < num_open_brackets) {\n    if (brackets[current_index]\
    \ == '(') {\n      if (brackets[current_index + 1] == '(') {\n        // OK\n\
    \      } else {\n        // BAD\n        return false;\n      }\n    } else {\n\
    \      if (brackets[current_index + 1] != ')') {\n        // BAD\n        return\
    \ false;\n      } else {\n        // OK\n      }\n    }\n    current_index++;\n\
    \  }\n  return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpfziawbz3: /tmp/tmpfziawbz3.cpp:39: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int opening\
    \ = 0, closing = 0;\n    for (auto it = brackets.begin(); it != brackets.end();\
    \ ++it) {\n        if (*it == '(') opening++;\n        if (*it == ')') closing++;\n\
    \    }\n    return opening == closing;\n}\nint main() {\n    auto candidate =\
    \ correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp6j5_70tw: /tmp/tmp6j5_70tw.cpp:28: int main(): Assertion `candidate((\"\
    )(()\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // convert\
    \ brackets to an array and find the index for each opening bracket\n    std::vector<char>\
    \ open_brackets  = brackets.toCharArray();\n    std::vector<int> open_bracket_index(open_brackets.size());\
    \ // to keep track of index of opening brackets\n    std::vector<char> close_brackets\
    \ = brackets.toCharArray(); // make a copy of the brackets array\n    std::vector<int>\
    \ close_bracket_index(close_brackets.size()); // to keep track of index of closing\
    \ brackets\n    int start_index = 0;\n    int end_index = 0;\n    for (int i =\
    \ 0; i < brackets.size(); i++) {\n        switch (open_brackets[i]) {\n      \
    \  case '(':\n            open_bracket_index[i] = start_index;\n            start_index++;\n\
    \            break;\n        case ')':\n            end_index = open_bracket_index[i];\n\
    \            open_bracket_index[i] = start_index;\n            start_index++;\n\
    \            break;\n        }\n    }\n    // if brackets are in order and are\
    \ balanced\n    if (start_index == end_index && open_brackets.size() == close_brackets.size())\
    \ {\n        // reverse the array to get the corresponding brackets\n        std::reverse(close_brackets.begin(),\
    \ close_brackets.end());\n        // compare the brackets to see if they are correct\n\
    \        if (brackets == std::string(\"(\") + close_brackets + std::string(\"\
    )\"))\n            return true;\n        return false;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpoervamih.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpoervamih.cpp:15:49: error: \u2018std::string\u2019 {aka \u2018class\
    \ std::__cxx11::basic_string<char>\u2019} has no member named \u2018toCharArray\u2019\
    \n   15 |     std::vector<char> open_brackets  = brackets.toCharArray();\n   \
    \   |                                                 ^~~~~~~~~~~\n/tmp/tmpoervamih.cpp:17:49:\
    \ error: \u2018std::string\u2019 {aka \u2018class std::__cxx11::basic_string<char>\u2019\
    } has no member named \u2018toCharArray\u2019\n   17 |     std::vector<char> close_brackets\
    \ = brackets.toCharArray(); // make a copy of the brackets array\n      |    \
    \                                             ^~~~~~~~~~~\n/tmp/tmpoervamih.cpp:39:42:\
    \ error: no match for \u2018operator+\u2019 (operand types are \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} and \u2018std::vector<char>\u2019\
    )\n   39 |         if (brackets == std::string(\"(\") + close_brackets + std::string(\"\
    )\"))\n      |                              ~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~\n   \
    \   |                              |             |\n      |                  \
    \            |             std::vector<char>\n      |                        \
    \      std::string {aka std::__cxx11::basic_string<char>}\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpoervamih.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018t"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int brackets_count\
    \ = brackets.size();\n    if (brackets_count < 3 || brackets_count % 2 != 0)\n\
    \        return false;\n    for (int i = 0; i < brackets_count; ++i) {\n     \
    \   char b = brackets[i];\n        if (b != '(' && b != ')')\n            return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpre0k5m2u: /tmp/tmpre0k5m2u.cpp:26: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int n\
    \ = brackets.size();\n    int count = 0;\n    for (int i = 0; i < n; ++i) {\n\
    \        if (brackets[i] == '(') count++;\n        else if (brackets[i] == ')')\
    \ count--;\n        if (!count) {\n            // if we can't find matching bracket,\
    \ the brackets are invalid.\n            return false;\n        }\n    }\n   \
    \ return count == 0;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpdp9itap6: /tmp/tmpdp9itap6.cpp:28: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int brackets_size\
    \ = brackets.size();\n    for (int i = 0; i < brackets_size; ++i) {\n        if\
    \ (brackets[i] != ')') {\n            if (brackets[i] != ')') {\n            \
    \    return false;\n            }\n        }\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpo25refpf: /tmp/tmpo25refpf.cpp:26: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\t// write\
    \ your code here\n\tint open_brackets_cnt = 0;\n\tint close_brackets_cnt = 0;\n\
    \tint open_brackets = 0;\n\tint close_brackets = 0;\n\tfor (char i : brackets)\n\
    \t{\n\t\tif (i == '(')\n\t\t{\n\t\t\topen_brackets++;\n\t\t\tif (open_brackets_cnt\
    \ == 0)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse if (i == ')')\n\
    \t\t{\n\t\t\tclose_brackets++;\n\t\t\tclose_brackets_cnt++;\n\t\t\tif (close_brackets_cnt\
    \ == open_brackets)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse if\
    \ (i == '[' || i == '{' || i == '(')\n\t\t{\n\t\t\topen_brackets_cnt++;\n\t\t\
    }\n\t\telse if (i == ']' || i == '}' || i == ']')\n\t\t{\n\t\t\tclose_brackets_cnt++;\n\
    \t\t}\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpf8ciaxjv: /tmp/tmpf8ciaxjv.cpp:55: int main(): Assertion `candidate((\"\
    ((()())))\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int left\
    \ = 0, right = 0;\n    for (int i = 0; i < brackets.size(); i++) {\n        if\
    \ (brackets[i] == '(') {\n            left++;\n        } else if (brackets[i]\
    \ == ')') {\n            right++;\n        }\n        if (right < left)\n    \
    \        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpsvdz3sm6: /tmp/tmpsvdz3sm6.cpp:28: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool flag\
    \ = false;\n    int count = 0;\n    for (int i = 0; i < brackets.size() - 1; i++)\
    \ {\n        if (brackets[i] == '(') {\n            count++;\n        } else if\
    \ (brackets[i] == '(') {\n            count--;\n        } else {\n           \
    \ continue;\n        }\n        if (count == 0) {\n            flag = true;\n\
    \            break;\n        }\n    }\n    return flag;\n}\nint main() {\n   \
    \ auto candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpqberf85u: /tmp/tmpqberf85u.cpp:33: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int opening_brackets\
    \ = 0;\n    int closing_brackets = 0;\n    for (int i = 0; i < brackets.size()\
    \ - 1; i++) {\n        if (brackets[i] == brackets[i+1]) closing_brackets++;\n\
    \        if (brackets[i] == \"(\") opening_brackets++;\n        if (brackets[i]\
    \ == \")\") closing_brackets++;\n    }\n    return (closing_brackets + 1 == opening_brackets);\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsu130rjn.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpsu130rjn.cpp:18:28: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   18 |         if (brackets[i] == \"(\") opening_brackets++;\n\
    \      |                            ^~~\n/tmp/tmpsu130rjn.cpp:19:28: error: ISO\
    \ C++ forbids comparison between pointer and integer [-fpermissive]\n   19 | \
    \        if (brackets[i] == \")\") closing_brackets++;\n      |              \
    \              ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool brackets_valid\
    \ = true;\n    for (char brack : brackets) {\n        if (brack != ')' && brack\
    \ != '(')\n            brackets_valid = false;\n    }\n    return brackets_valid;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpt32lggii: /tmp/tmpt32lggii.cpp:27: int main(): Assertion `candidate((\"\
    ((()())))\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::stack<std::string>\
    \ opening_brackets;\n    std::string current_bracket;\n    for (std::size_t i\
    \ = 0; i < brackets.size(); i++) {\n        current_bracket = brackets[i];\n \
    \       if (current_bracket == '(') {\n            opening_brackets.push(current_bracket);\n\
    \        } else if (current_bracket == ')') {\n            if (opening_brackets.size()\
    \ == 0)\n                return false;\n            opening_brackets.pop();\n\
    \        } else {\n            return false;\n        }\n    }\n    return opening_brackets.size()\
    \ == 0;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgfifsnj2.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpgfifsnj2.cpp:18:29: error: no match for \u2018operator==\u2019 (operand\
    \ types are \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } and \u2018char\u2019)\n   18 |         if (current_bracket == '(') {\n     \
    \ |             ~~~~~~~~~~~~~~~ ^~ ~~~\n      |             |                \
    \  |\n      |             |                  char\n      |             std::string\
    \ {aka std::__cxx11::basic_string<char>}\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpgfifsnj2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpgfifsnj2.cpp:18:32:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   18\
    \ |         if (current_bracket == '(') {\n      |                           \
    \     ^~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpgfifsnj2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1099:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator==(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1099 |     operator==(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    stack<char>\
    \ s;\n    // The stack stores pairs of opening brackets with closing brackets\n\
    \    while (1) {\n        if (brackets.empty())\n            return true;\n  \
    \      if (brackets.front() == '(')\n            s.push(brackets.front());\n \
    \       else if (brackets.front() == ')')\n            s.pop();\n        else\n\
    \            return false;\n        brackets.pop();\n    }\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgov4q7qa.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpgov4q7qa.cpp:14:5: error: \u2018stack\u2019 was not declared in this\
    \ scope; did you mean \u2018std::stack\u2019?\n   14 |     stack<char> s;\n  \
    \    |     ^~~~~\n      |     std::stack\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/stack:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:89,\n\
    \                 from /tmp/tmpgov4q7qa.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_stack.h:99:11:\
    \ note: \u2018std::stack\u2019 declared here\n   99 |     class stack\n      |\
    \           ^~~~~\n/tmp/tmpgov4q7qa.cpp:14:11: error: expected primary-expression\
    \ before \u2018char\u2019\n   14 |     stack<char> s;\n      |           ^~~~\n\
    /tmp/tmpgov4q7qa.cpp:20:13: error: \u2018s\u2019 was not declared in this scope\n\
    \   20 |             s.push(brackets.front());\n      |             ^\n/tmp/tmpgov4q7qa.cpp:22:13:\
    \ error: \u2018s\u2019 was not declared in this scope\n   22 |             s.pop();\n\
    \      |             ^\n/tmp/tmpgov4q7qa.cpp:25:18: error: \u2018std::string\u2019\
    \ {aka \u2018class std::__cxx11::basic_string<char>\u2019} has no member named\
    \ \u2018pop\u2019\n   25 |         brackets.pop();\n      |                  ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    assert(brackets.size()\
    \ > 0);\n    size_t opening_pos = brackets.find('(');\n    size_t closing_pos\
    \ = brackets.find(')');\n    if (opening_pos == std::string::npos || closing_pos\
    \ == std::string::npos) {\n        return false;\n    }\n    if (opening_pos >\
    \ closing_pos) {\n        return false;\n    }\n    if (brackets[opening_pos -\
    \ 1] == '(') {\n        if (brackets[opening_pos + 1] != ')') {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpn3b3q14s: /tmp/tmpn3b3q14s.cpp:36: int main(): Assertion `candidate((\"\
    ((()())))\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    stack<char>\
    \ bracketStack, bracketStackCopy;\n    for (auto c : brackets) {\n        if (c\
    \ == '(') {\n            bracketStack.push(c);\n        } else if (c == ')') {\n\
    \            while (bracketStack.size() >= 2) {\n                bracketStackCopy.push(bracketStack.top());\n\
    \                bracketStack.pop();\n            }\n            if (bracketStack.size()\
    \ != 0) bracketStackCopy.pop();\n            if (bracketStackCopy.empty()) break;\n\
    \            bracketStack.push(bracketStackCopy.top());\n        }\n    }\n  \
    \  return bracketStack.empty();\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbvx49zfc.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpbvx49zfc.cpp:14:5: error: \u2018stack\u2019 was not declared in this\
    \ scope; did you mean \u2018std::stack\u2019?\n   14 |     stack<char> bracketStack,\
    \ bracketStackCopy;\n      |     ^~~~~\n      |     std::stack\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/stack:61,\n       \
    \          from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:89,\n\
    \                 from /tmp/tmpbvx49zfc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_stack.h:99:11:\
    \ note: \u2018std::stack\u2019 declared here\n   99 |     class stack\n      |\
    \           ^~~~~\n/tmp/tmpbvx49zfc.cpp:14:11: error: expected primary-expression\
    \ before \u2018char\u2019\n   14 |     stack<char> bracketStack, bracketStackCopy;\n\
    \      |           ^~~~\n/tmp/tmpbvx49zfc.cpp:17:13: error: \u2018bracketStack\u2019\
    \ was not declared in this scope\n   17 |             bracketStack.push(c);\n\
    \      |             ^~~~~~~~~~~~\n/tmp/tmpbvx49zfc.cpp:19:20: error: \u2018bracketStack\u2019\
    \ was not declared in this scope\n   19 |             while (bracketStack.size()\
    \ >= 2) {\n      |                    ^~~~~~~~~~~~\n/tmp/tmpbvx49zfc.cpp:20:17:\
    \ error: \u2018bracketStackCopy\u2019 was not declared in this scope\n   20 |\
    \                 bracketStackCopy.push(bracketStack.top());\n      |        \
    \         ^~~~~~~~~~~~~~~~\n/tmp/tmpbvx49zfc.cpp:23:17: error: \u2018bracketStack\u2019\
    \ was not declared in this scope\n   23 |             if (bracketStack.size()\
    \ != 0) bracketStackCopy.pop();\n      |                 ^~~~~~~~~~~~\n/tmp/tmpbvx49zfc.cpp:23:43:\
    \ error: \u2018bracketStackCopy\u2019 was not declared in this scope\n   23 |\
    \             if (bracketStack.size() != 0) bracketStackCopy.pop();\n      | \
    \                                          ^~~~~~~~~~~~~~~~\n/tmp/tmpbvx49zfc.cpp:24:17:\
    \ error: \u2018bracketStackCopy\u2019 was not declared in this scope\n   24 |\
    \             if (bracketStackCopy.empty()) break;\n      |                 ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpbvx49zfc.cpp:25:13: error: \u2018bracketStack\u2019 was not declared in\
    \ this scope\n   25 |       "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  std::stack<std::string>\
    \ brackets_stack;\n  for (auto c: brackets) {\n    switch (c) {\n      case '(':\n\
    \        brackets_stack.push(brackets_stack.top());\n        continue;\n     \
    \ case ')':\n        if (!brackets_stack.empty()) {\n          brackets_stack.pop();\n\
    \          continue;\n        } else {\n          return false;\n        }\n \
    \     default:\n        continue;\n    }\n  }\n\n  return brackets_stack.empty();\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int open_brackets\
    \ = brackets.size();\n    // loop over the string and check if the opening and\
    \ closing brackets are the same (open_brackets is always 1 or 0)\n    for (int\
    \ i = 0; i < open_brackets; ++i) {\n        if (brackets[i] == '(' && brackets[i\
    \ - 1] == ')')\n            return false;\n        else if (brackets[i] == '('\
    \ && brackets[i - 1] != '(')\n            return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpi7606hu5: /tmp/tmpi7606hu5.cpp:30: int main(): Assertion `candidate((\"\
    ((()())))\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  int open_brackets\
    \ = 0;\n  for (int i = 0; i < brackets.length(); i++) {\n    if (brackets[i] ==\
    \ '(')\n      open_brackets++;\n    if (brackets[i] == ')')\n      open_brackets--;\n\
    \    if (open_brackets != 0)\n      return false;\n  }\n  return true;\n}\nint\
    \ main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp3cula68s: /tmp/tmp3cula68s.cpp:27: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::vector<bool>\
    \ isOpen(brackets.size(), false);\n    for (int i = 0; i < brackets.size(); i++)\
    \ {\n        char ch = brackets[i];\n        if ('(' == ch) {\n            isOpen[i\
    \ - 1] = true;\n        }\n        if (')' == ch) {\n            isOpen[i] = true;\n\
    \        }\n        if ('[' == ch) {\n            isOpen[i + 1] = true;\n    \
    \    }\n        if (']' == ch) {\n            isOpen[i - 1] = true;\n        }\n\
    \    }\n\n    for (int i = 0; i < brackets.size(); i++) {\n        if (isOpen[i])\
    \ {\n            continue;\n        }\n        if ('(' == brackets[i]) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    stack<char>\
    \ brackets_stack;\n    std::string current_bracket;\n    for (size_t i = 0; i\
    \ < brackets.length(); i++) {\n        current_bracket = brackets.substr(i, 1);\n\
    \        if (current_bracket.length() == 0) {\n            brackets_stack.push(brackets[i]);\n\
    \        }\n        if (brackets[i] == '(') {\n            brackets_stack.push('(');\n\
    \        }\n        if (brackets[i] == ')') {\n            while (!brackets_stack.empty()\
    \ &&\n                   brackets_stack.top() != '(') {\n                brackets_stack.pop();\n\
    \            }\n            if (!brackets_stack.empty()) {\n                brackets_stack.pop();\n\
    \            }\n        }\n    }\n    return brackets_stack.empty();\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"()\"))\
    \ == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpoexxyap7.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpoexxyap7.cpp:14:5: error: \u2018stack\u2019 was not declared in this\
    \ scope; did you mean \u2018std::stack\u2019?\n   14 |     stack<char> brackets_stack;\n\
    \      |     ^~~~~\n      |     std::stack\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/stack:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:89,\n\
    \                 from /tmp/tmpoexxyap7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_stack.h:99:11:\
    \ note: \u2018std::stack\u2019 declared here\n   99 |     class stack\n      |\
    \           ^~~~~\n/tmp/tmpoexxyap7.cpp:14:11: error: expected primary-expression\
    \ before \u2018char\u2019\n   14 |     stack<char> brackets_stack;\n      |  \
    \         ^~~~\n/tmp/tmpoexxyap7.cpp:19:13: error: \u2018brackets_stack\u2019\
    \ was not declared in this scope\n   19 |             brackets_stack.push(brackets[i]);\n\
    \      |             ^~~~~~~~~~~~~~\n/tmp/tmpoexxyap7.cpp:22:13: error: \u2018\
    brackets_stack\u2019 was not declared in this scope\n   22 |             brackets_stack.push('(');\n\
    \      |             ^~~~~~~~~~~~~~\n/tmp/tmpoexxyap7.cpp:25:21: error: \u2018\
    brackets_stack\u2019 was not declared in this scope\n   25 |             while\
    \ (!brackets_stack.empty() &&\n      |                     ^~~~~~~~~~~~~~\n/tmp/tmpoexxyap7.cpp:29:18:\
    \ error: \u2018brackets_stack\u2019 was not declared in this scope\n   29 |  \
    \           if (!brackets_stack.empty()) {\n      |                  ^~~~~~~~~~~~~~\n\
    /tmp/tmpoexxyap7.cpp:34:12: error: \u2018brackets_stack\u2019 was not declared\
    \ in this scope\n   34 |     return brackets_stack.empty();\n      |         \
    \   ^~~~~~~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ brackets_size = brackets.size();\n    // If there are no brackets, return true.\n\
    \    if (brackets_size < 2) {\n        return true;\n    }\n    // Create a std::stack\
    \ of 'true'.\n    bool stack[brackets_size];\n    // Initialize stack to 'false'.\n\
    \    for (size_t i = 0; i < brackets_size; i++) {\n        stack[i] = false;\n\
    \    }\n    // Push first bracket onto the stack to mark it as 'true'.\n    stack[brackets_size\
    \ - 1] = true;\n    for (size_t i = 1; i < brackets_size; i++) {\n        if (brackets.at(i)\
    \ == '(') {\n            // If the current bracket is open,\n            // push\
    \ 'true' onto the stack.\n            stack[i - 1] = true;\n        } else if\
    \ (brackets.at(i) == ')') {\n            // If the current bracket is closed,\n\
    \            // pop 'true' off the stack.\n            stack[i - 1] = false;\n\
    \        }\n        // If stack[i - 1] is true, then brackets[i] is not a bracket.\n\
    \        if (stack[i - 1]) {\n            return false;\n        }\n    }\n  \
    \  // We got to the end without finding any brackets.\n    return true;\n}\nint\
    \ main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp_471vq_b: /tmp/tmp_471vq_b.cpp:48: int main(): Assertion `candidate((\"\
    (()())\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    char open_brackets[brackets.size()\
    \ + 1];\n    strcpy(open_brackets, brackets.c_str());\n    int n = brackets.size();\n\
    \    for (int i = 1; i < n; ++i) {\n        if (open_brackets[i] == '(')\n   \
    \         return false;\n    }\n    return n == 0;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpcji20tx_: /tmp/tmpcji20tx_.cpp:25: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // The\
    \ stack stores the last opened bracket.\n    std::stack<char> stack;\n    stack.push(brackets[0]);\n\
    \n    for (auto c : brackets) {\n        if (c != stack.top()) {\n           \
    \ return false;\n        }\n        stack.pop();\n    }\n    return stack.empty();\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int bracket_count\
    \ = 1;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i]\
    \ == '(') {\n            bracket_count++;\n        } else if (brackets[i] == ')')\
    \ {\n            if (bracket_count <= 0) {\n                return false;\n  \
    \          }\n            bracket_count--;\n        }\n    }\n    return bracket_count\
    \ == 0;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpw96q0_21: /tmp/tmpw96q0_21.cpp:29: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::stack<char>\
    \ bracketStack;\n    for (int i = 0; i < brackets.size(); i++) {\n        if (brackets[i]\
    \ == '(') {\n            if (!bracketStack.empty()) {\n                if (brackets[i]\
    \ != bracketStack.top()) {\n                    return false;\n              \
    \  }\n                bracketStack.pop();\n            } else {\n            \
    \    bracketStack.push(brackets[i]);\n            }\n        } else {\n      \
    \      if (brackets[i] != bracketStack.top()) {\n                return false;\n\
    \            }\n            bracketStack.pop();\n        }\n    }\n    return\
    \ !bracketStack.empty();\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpfpd4rl1n: /tmp/tmpfpd4rl1n.cpp:36: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    if (brackets.empty())\n\
    \        return true;\n    int opening = 0;\n    int closing = 0;\n    for (int\
    \ i = 0; i < brackets.size(); i++) {\n        if (brackets[i] == '(') {\n    \
    \        opening++;\n        } else if (brackets[i] == ')') {\n            closing++;\n\
    \        } else if (brackets[i] == '[' || brackets[i] == '{' || brackets[i] ==\
    \ '(' || brackets[i] == '+' || brackets[i] == '-') {\n            if (opening\
    \ > closing)\n                return false;\n            opening = 0;\n      \
    \      closing = 0;\n        } else {\n            opening = closing = 0;\n  \
    \      }\n    }\n    return opening == closing;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpt4xapov8: /tmp/tmpt4xapov8.cpp:41: int main(): Assertion `candidate((\"\
    )(()\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool result\
    \ = true;\n    for (int i=0; i<brackets.size() - 1; i++) {\n        // if we have\
    \ found an opening bracket,\n        // and it is followed by an opening bracket,\n\
    \        // then we have a matching closing bracket.\n        if (brackets.at(i)\
    \ == '(' && brackets.at(i+1) == '(') {\n            // We found a matching closing\
    \ bracket.\n            // Now we just have to make sure it is the right kind\n\
    \            // of bracket.\n            // >>> correct_bracketing(\"()[]\")\n\
    \            // True\n            // >>> correct_bracketing(\"()[]()\")\n    \
    \        // False\n            if (brackets.at(i+2) == ')' && brackets.at(i+3)\
    \ == ']') {\n                // We found a matching closing bracket.\n       \
    \         // Now we just have to make sure it is the right kind\n            \
    \    // of bracket.\n                // >>> correct_bracketing(\"()[]\")\n   \
    \             // True\n                // >>> correct_bracketing(\"()[]()\")\n\
    \                // True\n                // >>> correct_bracketing(\"()[]()()\"\
    )\n                // True\n                // >>> correct_bracketing(\"()[]()()()\"\
    )\n                // False\n                return true;\n            }\n   \
    \     }\n    }\n    return false;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpgugcnitt: /tmp/tmpgugcnitt.cpp:47: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  // Your\
    \ code here\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp2iaj_wu4: /tmp/tmp2iaj_wu4.cpp:18: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  int level\
    \ = 0;\n  int opening_brackets_index = 0;\n  int opening_brackets_count = 1;\n\
    \  while (opening_brackets_index < brackets.size()) {\n    if (brackets[opening_brackets_index]\
    \ == ')') {\n      level--;\n    } else if (brackets[opening_brackets_index] ==\
    \ '(') {\n      level++;\n    } else {\n      return false;\n    }\n    opening_brackets_count++;\n\
    \    if (opening_brackets_count == level) {\n      opening_brackets_count = 1;\n\
    \      opening_brackets_index++;\n    }\n  }\n  return opening_brackets_index\
    \ == 0;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    for (int\
    \ i = 1; i < brackets.length() - 1; i++) {\n        if (brackets[i - 1] != \"\
    (\" || brackets[i] != \")\") {\n            return false;\n        }\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzuchhbmh.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpzuchhbmh.cpp:15:32: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   15 |         if (brackets[i - 1] != \"(\" ||\
    \ brackets[i] != \")\") {\n      |                                ^~~\n/tmp/tmpzuchhbmh.cpp:15:54:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   15 |         if (brackets[i - 1] != \"(\" || brackets[i] != \")\") {\n   \
    \   |                                                      ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    auto opening_bracket\
    \ = std::find_if(brackets.begin(), brackets.end(),\n                         \
    \              [](char c) { return c == '('; });\n    bool ok = true;\n    if\
    \ (opening_bracket != brackets.end()) {\n        auto closing_bracket = std::find_if(opening_bracket,\
    \ brackets.end(),\n                                           [](char c) { return\
    \ c == ')'; });\n        if (closing_bracket == brackets.end()) {\n          \
    \  return false;\n        } else {\n            opening_bracket++;\n        }\n\
    \    }\n    return ok;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpen6mnexx: /tmp/tmpen6mnexx.cpp:34: int main(): Assertion `candidate((\"\
    ((()())))\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::string\
    \ open_bracket = \"\";\n    std::string close_bracket = \"\";\n    for (int i=0;\
    \ i<brackets.size(); ++i) {\n        if (brackets[i] == '(')\n            open_bracket\
    \ = brackets[i];\n        else if (brackets[i] == ')')\n            close_bracket\
    \ = brackets[i];\n        else if (brackets[i] == '(' || brackets[i] == ')')\n\
    \            assert(open_bracket.size() > 0 && close_bracket.size()>0);\n    \
    \    else\n            assert(0);\n    }\n    return open_bracket==close_bracket;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpywmr2cgp: /tmp/tmpywmr2cgp.cpp:30: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  int n =\
    \ brackets.size();\n  char c;\n  for (int i = 0; i < n; i++) {\n    c = brackets.at(i);\n\
    \    if (c == '(' || c == '[' || c == '{' || c == '<' || c == '>') {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmphoel49dp: /tmp/tmphoel49dp.cpp:26: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int len\
    \ = brackets.size();\n    for (int i = 0; i < len; i++) {\n        if (brackets[i]\
    \ == '(')\n            return false;\n        if (brackets[i] == '[' || brackets[i]\
    \ == '{')\n            return false;\n        if (brackets[i] == '}' || brackets[i]\
    \ == ']')\n            return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpv8ftubjl: /tmp/tmpv8ftubjl.cpp:27: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    brackets\
    \ += \"]\";\n    brackets += \"[\";\n    if (brackets.size() % 2 != 0) {\n   \
    \     return false;\n    }\n    int count = 0;\n    for (int i = 0; i < brackets.size()\
    \ - 1; i++) {\n        if (brackets[i] != brackets[i + 1]) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpgsrh4hgj: /tmp/tmpgsrh4hgj.cpp:29: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // Write\
    \ your code here.\n    bool res = false;\n    for (int i = 0; i < brackets.size();\
    \ i++) {\n        if (brackets.at(i) == brackets.at(i + 1)) {\n            bool\
    \ flag = true;\n            for (int j = 0; j < brackets.size() - 1; j++)\n  \
    \              if (brackets.at(j) == brackets.at(j + 1))\n                   \
    \ flag = false;\n            if (flag)\n                res = true;\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::at: __n (which is 2) >= this->size() (which is 2)\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int len\
    \ = brackets.length();\n    stack<pair<int, int>> s;\n    for (int i = 0; i <\
    \ len; ++i) {\n        // if opening bracket or closing bracket is missing, return\
    \ false.\n        if (brackets[i] != ')' && brackets[i] != ')' && brackets[i]\
    \ != ')')\n            return false;\n        // if closing bracket is missing,\
    \ push it to stack\n        if (brackets[i] == ')')\n            s.push(make_pair(i,\
    \ -1));\n        // if opening bracket is missing, pop from stack\n        else\
    \ if (brackets[i] == '(')\n            s.pop();\n        // if opening bracket\
    \ is not equal to closing bracket, return false.\n        else if (brackets[i]\
    \ != brackets[s.top().first])\n            return false;\n    }\n    // if stack\
    \ is empty, return true\n    return s.empty();\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpoqa3suo8.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpoqa3suo8.cpp:15:5: error: \u2018stack\u2019 was not declared in this\
    \ scope; did you mean \u2018std::stack\u2019?\n   15 |     stack<pair<int, int>>\
    \ s;\n      |     ^~~~~\n      |     std::stack\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/stack:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:89,\n\
    \                 from /tmp/tmpoqa3suo8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_stack.h:99:11:\
    \ note: \u2018std::stack\u2019 declared here\n   99 |     class stack\n      |\
    \           ^~~~~\n/tmp/tmpoqa3suo8.cpp:15:11: error: \u2018pair\u2019 was not\
    \ declared in this scope; did you mean \u2018std::pair\u2019?\n   15 |     stack<pair<int,\
    \ int>> s;\n      |           ^~~~\n      |           std::pair\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:64,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpoqa3suo8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_pair.h:208:12:\
    \ note: \u2018std::pair\u2019 declared here\n  208 |     struct pair\n      |\
    \            ^~~~\n/tmp/tmpoqa3suo8.cpp:15:16: error: expected primary-expression\
    \ before \u2018int\u2019\n   15 |     stack<pair<int, int>> s;\n      |      \
    \          ^~~\n/tmp/tmpoqa3suo8.cpp:22:13: error: \u2018s\u2019 was not declared\
    \ in this scope\n   22 |             s.push(make_pair(i, -1));\n      |      \
    \   "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool ans\
    \ = brackets.size() == 0;\n    if (brackets[0] == '(') {\n        ans = brackets.substr(0,\
    \ brackets.size() - 1) == \"()\";\n    }\n    return ans;\n}\nint main() {\n \
    \   auto candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpe54xcsn0: /tmp/tmpe54xcsn0.cpp:22: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::vector<std::pair<int,int>\
    \ > stack;\n    stack.push_back(std::make_pair(0,0));\n    for(char c : brackets)\
    \ {\n        while(stack.size()!=0 && !(c==')' && stack[stack.size()-1].first==-1))\
    \ {\n            stack.push_back(std::make_pair(stack.size()-1,0));\n        }\n\
    \        stack.push_back(std::make_pair(stack.size()-1,stack.size()-1));\n   \
    \     if(c=='(') stack.push_back(std::make_pair(stack.size()-1,0));\n    }\n \
    \   while(stack.size()!=0) {\n        std::pair<int,int> top = stack.back();\n\
    \        if(top.first!=-1 && !top.second==-1) {\n            stack.push_back(std::make_pair(top.first+1,top.second));\n\
    \            stack.push_back(std::make_pair(top.first+1,top.second));\n      \
    \  } else if(top.first==-1) {\n            stack.back().first++;\n           \
    \ if(top.second!=-1) {\n                stack.push_back(std::make_pair(top.first+1,top.second+1));\n\
    \            }\n        } else {\n            stack.back().second++;\n       \
    \     if(top.second==-1) {\n                stack.back().first--;\n          \
    \  }\n        }\n    }\n    return stack.size()==0;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    if (brackets.size()\
    \ != 2) {\n        return false;\n    }\n    for (int i = 1; i <= brackets.size();\
    \ i++) {\n        if (brackets[i - 1] != brackets[i]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpvgfihohi: /tmp/tmpvgfihohi.cpp:26: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // The\
    \ brackets string will be of size 1, if brackets has only one bracket the function\
    \ will return true.\n    // Since brackets string will be of size 1, if brackets[0]\
    \ is opening bracket and brackets[1] is closing bracket\n    // brackets.length()\
    \ will be 1, hence if brackets.length() is 1 the brackets will be of size 1, else\
    \ the brackets string will\n    // be of size 2.\n    if (brackets.length() ==\
    \ 1) {\n        // We are checking if the opening bracket has a corresponding\
    \ closing bracket.\n        // If brackets[0] is opening bracket and brackets[1]\
    \ is closing bracket\n        // Then brackets[0] will equal brackets[1] which\
    \ will return false.\n        // Because brackets[1] is closing bracket.\n   \
    \     return brackets[0] == brackets[1];\n    }\n    // If brackets.length() is\
    \ greater than 1, brackets[0] will be the opening bracket and brackets[1] the\
    \ closing bracket.\n    // brackets[0] and brackets[1] will be equal, only brackets.length()\
    \ will be greater than 2.\n    // We are checking if the opening bracket has a\
    \ corresponding closing bracket.\n    // If brackets[0] is opening bracket and\
    \ brackets[1] is closing bracket\n    // Then brackets[0] will equal brackets[1]\
    \ which will return false.\n    // Because brackets[1] is closing bracket.\n \
    \   return brackets[0] == brackets[1] && brackets.length() > 2;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"()\"))\
    \ == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpeum8yqmb: /tmp/tmpeum8yqmb.cpp:35: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  if(brackets.length()\
    \ % 2 == 1) {\n    return false;\n  }\n  std::string opening = brackets.substr(0,brackets.length()/2);\n\
    \  std::string closing = brackets.substr(brackets.length()/2);\n  bool result\
    \ = false;\n  for(int i = 0; i != opening.length(); ++i) {\n    if(brackets[i]\
    \ == opening[i]) {\n      ++i;\n      continue;\n    }\n    if(brackets[i] !=\
    \ closing[i]) {\n      return false;\n    }\n  }\n  return true;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"()\"))\
    \ == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp5z_9ihwj: /tmp/tmp5z_9ihwj.cpp:33: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  std::stack<char>\
    \ bracketStack;\n  for (int i = 0; i < brackets.length(); ++i) {\n    if (brackets[i]\
    \ == '(' || brackets[i] == ')') {\n      bracketStack.push(brackets[i]);\n   \
    \ } else if (brackets[i] == '[' || brackets[i] == ']') {\n      if (!bracketStack.empty()\
    \ && brackets[bracketStack.top()] == '[') {\n        bracketStack.pop();\n   \
    \   }\n    }\n  }\n  return !bracketStack.empty();\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp_orfzuab: /tmp/tmp_orfzuab.cpp:32: int main(): Assertion `candidate((\"\
    ((()())))\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    stack<char>\
    \ bracketStack;\n    for (auto it = brackets.begin(); it != brackets.end(); ++it)\
    \ {\n        if (*it == '(') {\n            bracketStack.push('(');\n        }\n\
    \        else if (*it == ')') {\n            if (bracketStack.top() != '(') {\n\
    \                return false;\n            }\n            else {\n          \
    \      bracketStack.pop();\n            }\n        }\n    }\n    return bracketStack.empty();\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfe35d0hd.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpfe35d0hd.cpp:14:5: error: \u2018stack\u2019 was not declared in this\
    \ scope; did you mean \u2018std::stack\u2019?\n   14 |     stack<char> bracketStack;\n\
    \      |     ^~~~~\n      |     std::stack\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/stack:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:89,\n\
    \                 from /tmp/tmpfe35d0hd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_stack.h:99:11:\
    \ note: \u2018std::stack\u2019 declared here\n   99 |     class stack\n      |\
    \           ^~~~~\n/tmp/tmpfe35d0hd.cpp:14:11: error: expected primary-expression\
    \ before \u2018char\u2019\n   14 |     stack<char> bracketStack;\n      |    \
    \       ^~~~\n/tmp/tmpfe35d0hd.cpp:17:13: error: \u2018bracketStack\u2019 was\
    \ not declared in this scope\n   17 |             bracketStack.push('(');\n  \
    \    |             ^~~~~~~~~~~~\n/tmp/tmpfe35d0hd.cpp:20:17: error: \u2018bracketStack\u2019\
    \ was not declared in this scope\n   20 |             if (bracketStack.top() !=\
    \ '(') {\n      |                 ^~~~~~~~~~~~\n/tmp/tmpfe35d0hd.cpp:28:12: error:\
    \ \u2018bracketStack\u2019 was not declared in this scope\n   28 |     return\
    \ bracketStack.empty();\n      |            ^~~~~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int open_bracket_pos\
    \ = 0;\n    int close_bracket_pos = 0;\n    while (brackets.size() > 0) {\n  \
    \      char bracket = brackets.at(open_bracket_pos);\n        if (bracket != '(')\
    \ {\n            // no open bracket\n            return false;\n        }\n  \
    \      open_bracket_pos++;\n        close_bracket_pos++;\n        brackets.erase(brackets.begin()\
    \ + open_bracket_pos);\n    }\n    return open_bracket_pos == close_bracket_pos;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::at: __n (which is 1) >= this->size() (which is 1)\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  int opening_bracket\
    \ = 0;\n  int closing_bracket = 0;\n  while (brackets.size() > 1) {\n    ++opening_bracket;\n\
    \    if (brackets[opening_bracket] == '(')\n      ++closing_bracket;\n    else\n\
    \      ++closing_bracket;\n  }\n  return brackets.size() == 1 && brackets[0] ==\
    \ '(' && closing_bracket == opening_bracket;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool found\
    \ = false;\n    for (const auto& b : brackets) {\n        if (b == '(') {\n  \
    \          if (!found) {\n                found = true;\n            } else {\n\
    \                return false;\n            }\n        } else if (b == ')') {\n\
    \            if (found) {\n                return false;\n            }\n    \
    \    } else {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpm45atjfq: /tmp/tmpm45atjfq.cpp:34: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::stack<char>\
    \ bracket;\n    for (int i = 0; brackets[i] != ')'; i++) {\n        if (brackets[i]\
    \ == '(') {\n            if (bracket.empty()) {\n                bracket.push('(');\n\
    \            } else {\n                bracket.pop();\n            }\n       \
    \ } else {\n            if (bracket.empty()) {\n                return false;\n\
    \            }\n        }\n    }\n    return (bracket.empty() || bracket.top()\
    \ == '(');\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmph26zsmc5: /tmp/tmph26zsmc5.cpp:36: int main(): Assertion `candidate((\"\
    ((()())))\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  int open\
    \ = 0;\n  int close = 0;\n  for (int i = 0; i < brackets.size(); i++) {\n    if\
    \ (brackets[i] == '(') {\n      open++;\n    } else if (brackets[i] == ')') {\n\
    \      close++;\n    }\n  }\n\n  return open == close;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp0z61kfms: /tmp/tmp0z61kfms.cpp:33: int main(): Assertion `candidate((\"\
    )(()\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    if (brackets.empty())\n\
    \        return true;\n    std::vector<int> opening_brackets;\n    for (char c\
    \ : brackets) {\n        if (c == '(')\n            opening_brackets.push_back(0);\n\
    \        else\n            opening_brackets.back() += 1;\n    }\n    // check\
    \ that all brackets except the last are properly closed;\n    // if there are\
    \ not enough open brackets, return false.\n    if (opening_brackets.size() > OPENING_BRACKETS)\n\
    \        return false;\n    for (int i = 1; i < opening_brackets.size(); i++)\
    \ {\n        int current_opening_bracket = opening_brackets[i];\n        if (current_opening_bracket\
    \ < 0)\n            return false;\n        // check that there exist at least\
    \ one closing bracket before this opening bracket;\n        // if not, return\
    \ false.\n        if (current_opening_bracket != opening_brackets[i - 1] - 1)\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpilrq75mz.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpilrq75mz.cpp:25:35: error: \u2018OPENING_BRACKETS\u2019 was not declared\
    \ in this scope\n   25 |     if (opening_brackets.size() > OPENING_BRACKETS)\n\
    \      |                                   ^~~~~~~~~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\t// We need\
    \ brackets.size() rather than brackets.size() because brackets.size() will give\
    \ us an int which doesn't have the + operator overloaded.\n\treturn std::count(brackets.begin(),\
    \ brackets.end(), ')') == brackets.size() - 1 &&\n\t       std::count(brackets.begin(),\
    \ brackets.end(), '(') == brackets.size() - 1;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp67776e00: /tmp/tmp67776e00.cpp:21: int main(): Assertion `candidate((\"\
    (()())\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int opening_brackets\
    \ = brackets.size();\n    for (int i = 0; i < opening_brackets; i++) {\n     \
    \   if (brackets[i] == '(') {\n            opening_brackets--;\n        } else\
    \ if (brackets[i] == ')') {\n            opening_brackets++;\n        } else {\n\
    \            return false;\n        }\n    }\n    return opening_brackets == 0;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp69qbaeun: /tmp/tmp69qbaeun.cpp:28: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    if (brackets.size()\
    \ == 0) {\n        return true;\n    }\n    int brackets_size = brackets.size();\n\
    \    for (int i = 0; i < brackets_size; i++) {\n        if (brackets[i] == '('\
    \ || brackets[i] == ')') {\n            if (brackets[i + 1] != '(' && brackets[i\
    \ + 1] != ')') {\n                return false;\n            }\n            i\
    \ += 1;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpkluj7otv: /tmp/tmpkluj7otv.cpp:35: int main(): Assertion `candidate((\"\
    )(()\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ open_bracket_pos = 0;\n    size_t close_bracket_pos = 0;\n    while (brackets.size()\
    \ > 0) {\n        if (brackets.at(brackets.size() - 1) == ')') {\n           \
    \ close_bracket_pos++;\n        } else if (brackets.at(brackets.size() - 1) ==\
    \ '(') {\n            open_bracket_pos++;\n        } else {\n            return\
    \ false;\n        }\n        brackets.pop_back();\n    }\n    return brackets.size()\
    \ == 0;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmprh5treen: /tmp/tmprh5treen.cpp:34: int main(): Assertion `candidate((\"\
    ((()())))\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::stack<char>\
    \ stk;\n    for (char c : brackets) {\n        stk.push(c);\n        if (c ==\
    \ '(' || c == '[' || c == '{') {\n            char temp = stk.top();\n       \
    \     stk.pop();\n            stk.push(temp);\n        }\n        else if (c ==\
    \ ')' || c == ']' || c == '}') {\n            char temp = stk.top();\n       \
    \     stk.pop();\n            if (stk.empty()) {\n                return false;\n\
    \            }\n            stk.push(temp);\n        }\n    }\n    return stk.empty();\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpp5x_dkhv: /tmp/tmpp5x_dkhv.cpp:35: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tsize_t left_open\
    \ = brackets.find_first_not_of(\"(\");\n\tsize_t right_close = brackets.find_last_not_of(\"\
    )\");\n\treturn (left_open != right_close);\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpxm7w67_t: /tmp/tmpxm7w67_t.cpp:24: int main(): Assertion `candidate((\"\
    ((()())))\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    for (int\
    \ i = 0; i < brackets.size() - 1; i++) {\n        if (brackets[i] == '(' && brackets[i\
    \ + 1] != ')')\n            return false;\n        if (brackets[i] == '[' && brackets[i\
    \ + 1] != ']')\n            return false;\n        if (brackets[i] == '{' && brackets[i\
    \ + 1] != '}')\n            return false;\n        if (brackets[i] == '<' && brackets[i\
    \ + 1] != '>')\n            return false;\n        if (brackets[i] == '>' && brackets[i\
    \ + 1] != '>')\n            return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"()\"))\
    \ == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpo77r0r7z: /tmp/tmpo77r0r7z.cpp:31: int main(): Assertion `candidate((\"\
    (()())\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  assert(brackets.size()\
    \ % 2 == 0);\n  bool correct = true;\n  for (int i = 1; i < brackets.size() -\
    \ 1; i += 2) {\n    if (brackets[i] != brackets[i + 1]) {\n      correct = false;\n\
    \      break;\n    }\n  }\n  return correct;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp9grtd8r1: /tmp/tmp9grtd8r1.cpp:27: int main(): Assertion `candidate((\"\
    (()())\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    for (auto\
    \ i : brackets) {\n        if (i != ')' && i != ']') return false;\n    }\n  \
    \  return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n \
    \   assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"))\
    \ == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpgmcubezk: /tmp/tmpgmcubezk.cpp:21: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    for (int\
    \ i = 0; i < brackets.size(); ++i) {\n        if (brackets[i] == '(')\n      \
    \      return !(brackets[i + 1] == ')');\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"()\"))\
    \ == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpt2ibjzy6: /tmp/tmpt2ibjzy6.cpp:22: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // open\
    \ brackets must be closed before open brackets.\n    if (brackets.size() != (brackets.size()\
    \ - 1)) {\n        return false;\n    }\n\n    // closing brackets must be open\
    \ before closing brackets.\n    for (int i = 1; i < brackets.size(); i++) {\n\
    \        if (brackets[i] != '(' || brackets[i] != ')') {\n            return false;\n\
    \        }\n    }\n\n    // All brackets must be closed.\n    for (int i = 1;\
    \ i < brackets.size(); i++) {\n        if (brackets[i] != brackets[i - 1]) {\n\
    \            return false;\n        }\n    }\n\n    return true;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"()\"))\
    \ == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpbi1pkxxz: /tmp/tmpbi1pkxxz.cpp:37: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tint stack[brackets.size()\
    \ + 1];\n\tint pos = 0;\n\tint i = 0;\n\tfor (auto &b : brackets) {\n\t\tif (b\
    \ == '(') {\n\t\t\tstack[++pos] = i;\n\t\t} else if (b == ')') {\n\t\t\tassert(stack[pos]\
    \ != -1);\n\t\t\tif (pos == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (pos\
    \ == stack[pos]) {\n\t\t\t\tstack[pos] = -1;\n\t\t\t}\n\t\t\tpos = stack[--pos];\n\
    \t\t}\n\t\ti++;\n\t}\n\treturn pos == -1;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpgj3arat1: /tmp/tmpgj3arat1.cpp:36: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    if(brackets.size()\
    \ == 0){\n        return false;\n    }\n    int brackets_size = brackets.size();\n\
    \    for(int i = 0; i< brackets_size; i++){\n        if(brackets.at(i) == '('\
    \ && brackets.at(i+1) == ')'){\n            return true;\n        }\n        if(brackets.at(i)\
    \ == '(' && brackets.at(i+1) == '('){\n            return false;\n        }\n\
    \        if(brackets.at(i) == '(' && brackets.at(i+1) == ')'){\n            return\
    \ false;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmphhbzo4fg: /tmp/tmphhbzo4fg.cpp:34: int main(): Assertion `candidate((\"\
    (()())\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int openBracketCount\
    \ = 0, closeBracketCount = 0;\n    for (int i = 0; i < brackets.length(); i++)\
    \ {\n        char c = brackets.at(i);\n        switch (c) {\n        case '(':\n\
    \            openBracketCount++;\n            break;\n        case ')':\n    \
    \        closeBracketCount++;\n            break;\n        }\n    }\n    if (openBracketCount\
    \ == closeBracketCount) {\n        return true;\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpuq9kg11_: /tmp/tmpuq9kg11_.cpp:38: int main(): Assertion `candidate((\"\
    )(()\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  for (int\
    \ i = 0; i < brackets.size(); ++i) {\n    if (brackets[i] == '(') return true;\n\
    \    if (brackets[i] == ')') return false;\n  }\n  // if the loop terminates without\
    \ returning true, there is an opening bracket without a corresponding closing\
    \ bracket.\n  // >> the loop terminates without returning true.\n  // the loop\
    \ does not terminate.\n  assert(false);\n}\nint main() {\n    auto candidate =\
    \ correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpye48j9qe: /tmp/tmpye48j9qe.cpp:29: int main(): Assertion `candidate((\"\
    ((()())))\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::string\
    \ opening_brackets = \"(\";\n    std::set<char> opening_brackets_set{opening_brackets.begin(),\
    \ opening_brackets.end()};\n\n    std::string closing_brackets = \")\";\n    std::set<char>\
    \ closing_brackets_set{closing_brackets.begin(), closing_brackets.end()};\n\n\
    \    std::string opening_brackets_string = \"\";\n    std::string closing_brackets_string\
    \ = \"\";\n\n    for (int i = 0; i < brackets.size() - 1; i++) {\n        if (opening_brackets_set.find(brackets[i])\
    \ == opening_brackets_set.end())\n            continue;\n        if (opening_brackets_set.find(brackets[i\
    \ + 1]) != opening_brackets_set.end())\n            continue;\n\n        opening_brackets_string\
    \ += brackets[i];\n        closing_brackets_string += brackets[i + 1];\n    }\n\
    \n    // if not brackets is a complete bracket pair, return False\n    if (opening_brackets_string.empty()\
    \ || closing_brackets_string.empty())\n        return false;\n\n    // if the\
    \ two brackets are not the same, return False\n    if (opening_brackets_string\
    \ != closing_brackets_string)\n        return false;\n\n    // if brackets are\
    \ the same, return True\n    return true;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp9ig0oy7b: /tmp/tmp9ig0oy7b.cpp:46: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    for (size_t\
    \ i=0; i<brackets.size() - 1; i++) {\n        if (brackets[i]==brackets[i+1])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"()\"))\
    \ == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp_84hc3rb: /tmp/tmp_84hc3rb.cpp:24: int main(): Assertion `candidate((\"\
    (()())\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int len\
    \ = brackets.size();\n    for (int i = 1; i < len-1; i++) {\n        if (brackets[i]\
    \ == '(' && brackets[i-1] != ')') {\n            return false;\n        }\n  \
    \  }\n    return brackets[len-1] == ')';\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp99jo8rwa: /tmp/tmp99jo8rwa.cpp:25: int main(): Assertion `candidate((\"\
    (()())\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    assert(brackets.size()\
    \ != 0);\n    // iterate through the brackets until we encounter an opening bracket.\n\
    \    // if we see anything other than an opening bracket, return false\n    for\
    \ (auto c : brackets) {\n        if (c == '(') {\n            // if we've seen\
    \ an opening bracket, we're done.\n            return false;\n        }\n    }\n\
    \    // we've iterated through the brackets so far so return true.\n    return\
    \ true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpwgtw1vcs: /tmp/tmpwgtw1vcs.cpp:28: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  brackets\
    \ = brackets.substr(1, brackets.size() - 2);\n  std::string parens[brackets.size()\
    \ << 1];\n  int pos = 0;\n  for (auto b : brackets) {\n    parens[pos++] = b;\n\
    \  }\n  for (; pos < parens.size(); pos++) {\n    if (!check_closing_brackets(parens[pos],\
    \ parens, pos + 1))\n      return false;\n  }\n  return true;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp61kteq2l.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmp61kteq2l.cpp:20:23: error: request for member \u2018size\u2019 in \u2018\
    parens\u2019, which is of non-class type \u2018std::string [(<anonymous> + 1)]\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char> [(<anonymous> + 1)]\u2019}\n   20\
    \ |   for (; pos < parens.size(); pos++) {\n      |                       ^~~~\n\
    /tmp/tmp61kteq2l.cpp:21:10: error: \u2018check_closing_brackets\u2019 was not\
    \ declared in this scope\n   21 |     if (!check_closing_brackets(parens[pos],\
    \ parens, pos + 1))\n      |          ^~~~~~~~~~~~~~~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tstd::string::size_type\
    \ open_bracket = 1;\n\tfor (std::string::size_type i = 0; i < brackets.size();\
    \ ++i) {\n\t\twhile (open_bracket > 0 && brackets[open_bracket] != brackets[i])\
    \ --open_bracket;\n\t\tif (open_bracket <= 0) return false;\n\t\twhile (open_bracket\
    \ < brackets.size() && brackets[open_bracket] == brackets[i]) ++open_bracket;\n\
    \t}\n\treturn true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmp4jz3f21v: /tmp/tmp4jz3f21v.cpp:24: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  int open_bracket_count\
    \ = 0;\n  for (int i = 0; i < brackets.length(); i++) {\n    if (brackets[i] ==\
    \ '(')\n      open_bracket_count++;\n    else if (brackets[i] == ')')\n      open_bracket_count--;\n\
    \  }\n  return open_bracket_count == 0;\n}\nint main() {\n    auto candidate =\
    \ correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpkqgnjaji: /tmp/tmpkqgnjaji.cpp:30: int main(): Assertion `candidate((\"\
    )(()\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool correct\
    \ = true;\n    size_t bracket_count = 1;\n    for (size_t i = 0; i < brackets.size();\
    \ ++i) {\n        if (brackets[i] == \"(\")\n            ++bracket_count;\n  \
    \      if (brackets[i] == \")\")\n            --bracket_count;\n        if (brackets[i]\
    \ != brackets[brackets.length() - i])\n            correct = false;\n    }\n \
    \   if (bracket_count != 0)\n        correct = false;\n    return correct;\n}\n\
    int main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9wgc8gbp.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmp9wgc8gbp.cpp:17:28: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   17 |         if (brackets[i] == \"(\")\n    \
    \  |                            ^~~\n/tmp/tmp9wgc8gbp.cpp:19:28: error: ISO C++\
    \ forbids comparison between pointer and integer [-fpermissive]\n   19 |     \
    \    if (brackets[i] == \")\")\n      |                            ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ open_count = 1;\n    size_t close_count = 1;\n    for (auto bracket_it = brackets.begin();\
    \ bracket_it != brackets.end(); ++bracket_it) {\n        if (*bracket_it == '(')\
    \ {\n            if (open_count != close_count)\n                return false;\n\
    \            open_count++;\n        } else if (*bracket_it == ')') {\n       \
    \     close_count++;\n            if (open_count != close_count)\n           \
    \     return false;\n            open_count--;\n        } else {\n           \
    \ if (open_count != close_count)\n                return false;\n        }\n \
    \   }\n    return open_count == close_count;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpifgs35n5: /tmp/tmpifgs35n5.cpp:35: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // count\
    \ the number of opening brackets\n    int number_of_open_brackets = 0;\n    for\
    \ (int i = 0; i < brackets.size(); i++) {\n        if (brackets[i] == \"(\") {\n\
    \            number_of_open_brackets++;\n        }\n    }\n    \n    // If all\
    \ brackets are closed, we do not need to check the closing brackets.\n    if (number_of_open_brackets\
    \ == brackets.size()) {\n        return true;\n    }\n    \n    // otherwise we\
    \ must check every closing bracket\n    for (int i = 0; i < brackets.size(); i++)\
    \ {\n        if (brackets[i] == \")\") {\n            if (number_of_open_brackets\
    \ > 0) {\n                // if we have more opening brackets than clossing brackets,\n\
    \                // then there is some problem\n                if (number_of_open_brackets\
    \ != brackets.size() - 1) {\n                    return false;\n             \
    \   }\n                // if we have no more brackets, then the closing brackets\
    \ are ok\n                number_of_open_brackets--;\n            }\n        }\n\
    \    }\n    \n    // if we did not reach the end of brackets, then there is a\
    \ problem\n    return number_of_open_brackets == 0;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7ihng_6h.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmp7ihng_6h.cpp:17:28: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   17 |         if (brackets[i] == \"(\") {\n  \
    \    |                            ^~~\n/tmp/tmp7ihng_6h.cpp:29:28: error: ISO\
    \ C++ forbids comparison between pointer and integer [-fpermissive]\n   29 | \
    \        if (brackets[i] == \")\") {\n      |                            ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  int len\
    \ = brackets.size();\n  if (len == 0) return false;\n  int i = 0;\n  while (i\
    \ < len && brackets[i] == ')') {\n    i++;\n  }\n  if (brackets[i++] != ')') return\
    \ false;\n  while (i < len && brackets[i] != ')') {\n    i++;\n  }\n  return brackets[i]\
    \ == ')';\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp96bxv54e: /tmp/tmp96bxv54e.cpp:28: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  int bracket_count\
    \ = 0;\n  for (int i = 0; i < brackets.size(); i++) {\n    if (brackets[i] ==\
    \ '(') {\n      bracket_count++;\n    } else if (brackets[i] == ')') {\n     \
    \ bracket_count--;\n    }\n    if (bracket_count < 0) {\n      return false;\n\
    \    }\n  }\n  return (bracket_count == 0);\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int stack[brackets.length()];\n\
    \    for(int i = 0;i < brackets.length();i++)\n    {\n        // if the current\
    \ character is a left parenthesis or a right bracket\n        // push it to the\
    \ stack\n        if(brackets[i] == '(' || brackets[i] == ')')\n        {\n   \
    \         stack[brackets.length()-1] = brackets[i];\n        }\n        // otherwise\
    \ we pop the stack\n        else\n        {\n            int top = stack[brackets.length()-1];\n\
    \            int next = brackets[i];\n            stack[brackets.length()-1] =\
    \ next;\n            if(top == '(')\n            {\n                if(next ==\
    \ '(')\n                {\n                    stack[brackets.length()-1] = next;\n\
    \                }\n                else if(next == ')')\n                {\n\
    \                    stack[brackets.length()-1] = next;\n                }\n \
    \           }\n            else if(top == '{')\n            {\n              \
    \  if(next == '{')\n                {\n                    stack[brackets.length()-1]\
    \ = next;\n                }\n                else if(next == '}')\n         \
    \       {\n                    stack[brackets.length()-1] = next;\n          \
    \      }\n            }\n            else if(top == '[')\n            {\n    \
    \            if(next == '[')\n                {\n                    stack[brackets.length()-1]\
    \ = next;\n                }\n                else if(next == ']')\n         \
    \       {\n                    stack[brackets.length()-1] = next;\n          \
    \      }\n            }\n            else if(top == '<')\n            {\n    \
    \            if(next == '>')\n                {\n                    stack[brackets.length()-1]\
    \ = next;\n                }\n                else if(next == '>')\n         \
    \       {\n                    stack[brackets.length()-1] = next;\n          \
    \      }\n            }\n            else if(top == '>')\n            {\n    \
    \            if(next == '>')\n                {\n                    stack[brackets.length()-1]\
    \ = next;\n                }\n                else if(next == '<')\n         \
    \       {\n                    stack[brackets.length()-1] = next;\n          \
    \      }\n            }\n        }\n    }\n    for(int i = 0;i < brackets.length();i++)\n\
    \    {\n        if(brackets[i] != stack[brackets.length()-1])\n        {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpbon0phnz: /tmp/tmpbon0phnz.cpp:97: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ open_brackets = 0;\n    for (size_t i = 0; i < brackets.length(); i++) {\n \
    \       if (brackets[i] == '(') open_brackets++;\n        else if (brackets[i]\
    \ == '[') open_brackets++;\n        else if (brackets[i] == '{') open_brackets++;\n\
    \        else if (brackets[i] == '>') open_brackets++;\n        else if (brackets[i]\
    \ == '<') open_brackets++;\n        else if (brackets[i] == '}') open_brackets--;\n\
    \        else if (brackets[i] == ']') open_brackets--;\n        else if (brackets[i]\
    \ == ')') open_brackets--;\n        else if (brackets[i] == '(') open_brackets--;\n\
    \        else if (brackets[i] == '[') open_brackets--;\n        else if (brackets[i]\
    \ == '{') open_brackets--;\n        else if (brackets[i] == '>') open_brackets--;\n\
    \        else if (brackets[i] == '<') open_brackets--;\n        else if (brackets[i]\
    \ == '}') open_brackets++;\n        else if (brackets[i] == ']') open_brackets++;\n\
    \        else if (brackets[i] == ')') open_brackets++;\n        else if (brackets[i]\
    \ == '(') open_brackets++;\n        else if (brackets[i] == '[') open_brackets++;\n\
    \        else if (brackets[i] == '{') open_brackets++;\n        else if (brackets[i]\
    \ == '>') open_brackets++;\n        else if (brackets[i] == '<') open_brackets++;\n\
    \        else if (brackets[i] == '}') open_brackets--;\n        else if (brackets[i]\
    \ == ']') open_brackets--;\n        else if (brackets[i] == ')') open_brackets--;\n\
    \        else if (brackets[i] == '(') open_brackets--;\n        else if (brackets[i]\
    \ == '[') open_brackets--;\n        else if (brackets[i] == '{') open_brackets--;\n\
    \        else if (brackets[i] == '>') open_brackets--;\n        else if (brackets[i]\
    \ == '<') open_brackets--;\n        else if (brackets[i] == '}') open_brackets++;\n\
    \        else if (brackets[i] == ']') open_brackets++;\n        else if (brackets[i]\
    \ == ')') open_brackets++;\n        else if (brackets[i] == '(') open_brackets++;\n\
    \        else if (brackets[i] == '[') open_brackets++;\n        else if (brackets[i]\
    \ == '{') open_brackets++;\n        else if (brackets[i] == '>') open_brackets++;\n\
    \        else if (brackets[i] == '<') open_brackets++;\n        else if (brackets[i]\
    \ == '}') open_brackets--;\n        else if (bracket\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzaqo7coi.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpzaqo7coi.cpp:54:18: error: \u2018bracket\u2019 was not declared in\
    \ this scope; did you mean \u2018brackets\u2019?\n   54 |         else if (bracket\n\
    \      |                  ^~~~~~~\n      |                  brackets\n/tmp/tmpzaqo7coi.cpp:54:25:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n   54 |         else\
    \ if (bracket\n      |                 ~       ^\n      |                    \
    \     )\n   55 | }\n      | ~                        \n/tmp/tmpzaqo7coi.cpp:55:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   55 | }\n \
    \     | ^\n/tmp/tmpzaqo7coi.cpp:56:12: error: a function-definition is not allowed\
    \ here before \u2018{\u2019 token\n   56 | int main() {\n      |            ^\n\
    /tmp/tmpzaqo7coi.cpp:70:1: error: expected \u2018}\u2019 at end of input\n   70\
    \ | }\n      | ^\n/tmp/tmpzaqo7coi.cpp:13:47: note: to match this \u2018{\u2019\
    \n   13 | bool correct_bracketing(std::string brackets) {\n      |           \
    \                                    ^\n/tmp/tmpzaqo7coi.cpp:70:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   70 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ bracket_count = brackets.size();\n    bool result = true;\n    for (size_t i\
    \ = 0; i < bracket_count; ++i) {\n        if (brackets[i] != brackets[brackets.size()-1\
    \ - i]) {\n            result = false;\n            break;\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpbsuxhafd: /tmp/tmpbsuxhafd.cpp:26: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    stack<char>\
    \ s;\n    for (auto c : brackets) {\n        if (c == '(' || c == '[' || c ==\
    \ '{' || c == '(' || c == '[' || c == '{')\n            s.push(static_cast<char>(c));\n\
    \        else if (c == '(')\n            while (!s.empty() && s.top() != '(')\n\
    \                s.pop();\n        else if (c == '[' || c == '{')\n          \
    \  while (!s.empty() && s.top() != '[')\n                s.pop();\n        else\
    \ if (c == '{')\n            while (!s.empty() && s.top() != '{')\n          \
    \      s.pop();\n        else if (c == '[' || c == '(')\n            return false;\n\
    \    }\n    return s.empty();\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjfd16t3u.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpjfd16t3u.cpp:14:5: error: \u2018stack\u2019 was not declared in this\
    \ scope; did you mean \u2018std::stack\u2019?\n   14 |     stack<char> s;\n  \
    \    |     ^~~~~\n      |     std::stack\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/stack:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:89,\n\
    \                 from /tmp/tmpjfd16t3u.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_stack.h:99:11:\
    \ note: \u2018std::stack\u2019 declared here\n   99 |     class stack\n      |\
    \           ^~~~~\n/tmp/tmpjfd16t3u.cpp:14:11: error: expected primary-expression\
    \ before \u2018char\u2019\n   14 |     stack<char> s;\n      |           ^~~~\n\
    /tmp/tmpjfd16t3u.cpp:17:13: error: \u2018s\u2019 was not declared in this scope\n\
    \   17 |             s.push(static_cast<char>(c));\n      |             ^\n/tmp/tmpjfd16t3u.cpp:19:21:\
    \ error: \u2018s\u2019 was not declared in this scope\n   19 |             while\
    \ (!s.empty() && s.top() != '(')\n      |                     ^\n/tmp/tmpjfd16t3u.cpp:22:21:\
    \ error: \u2018s\u2019 was not declared in this scope\n   22 |             while\
    \ (!s.empty() && s.top() != '[')\n      |                     ^\n/tmp/tmpjfd16t3u.cpp:25:21:\
    \ error: \u2018s\u2019 was not declared in this scope\n   25 |             while\
    \ (!s.empty() && s.top() != '{')\n      |                     ^\n/tmp/tmpjfd16t3u.cpp:30:12:\
    \ error: \u2018s\u2019 was not declared in this scope\n   30 |     return s.empty();\n\
    \      |            ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  int open_brackets\
    \ = 0;\n  for (int i = 0; i < brackets.size(); i++) {\n    if (brackets[i] ==\
    \ '(') {\n      open_brackets++;\n    } else if (brackets[i] == ')') {\n     \
    \ if (open_brackets > 0) {\n        open_brackets--;\n      } else {\n       \
    \ return false;\n      }\n    }\n  }\n  return open_brackets == 0;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"()\"))\
    \ == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int paren_counter\
    \ = 0;\n    for (auto c : brackets) {\n        switch (c) {\n            case\
    \ '(':\n                ++paren_counter;\n                break;\n           \
    \ case ')':\n                if (paren_counter > 0) {\n                    --paren_counter;\n\
    \                }\n                break;\n            default:\n           \
    \     break;\n        }\n        if (paren_counter < 0) {\n            return\
    \ false;\n        }\n    }\n    return paren_counter == 0;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpfuiym8_x: /tmp/tmpfuiym8_x.cpp:40: int main(): Assertion `candidate((\"\
    ((()())))\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int counter\
    \ = 0;\n    bool correct = false;\n    for (int i = 0; i < brackets.length();\
    \ i++) {\n        char c = brackets[i];\n        if (c != '(' && c != ')') return\
    \ false;\n        counter++;\n        if (counter == 2) {\n            correct\
    \ = true;\n            break;\n        }\n    }\n    return correct;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"()\"))\
    \ == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp8t7b5sdp: /tmp/tmp8t7b5sdp.cpp:33: int main(): Assertion `candidate((\"\
    ((()())))\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // Write\
    \ your code here.\n    bool result = true;\n    std::string token;\n    int count\
    \ = 0;\n    size_t start_pos = 0;\n    for (size_t pos = 0; pos < brackets.length();\
    \ ++pos) {\n        token = brackets.substr(start_pos, pos - start_pos);\n   \
    \     if (token == \"(\")\n            count++;\n        if (token == \")\") {\n\
    \            count--;\n            if (count == 0)\n                start_pos\
    \ = pos + 1;\n        }\n    }\n    result = start_pos == 0;\n    return result;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmphphvvw35: /tmp/tmphphvvw35.cpp:38: int main(): Assertion `candidate((\"\
    ((()())))\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::stack<char>\
    \ bracketsStack;\n    for (auto c : brackets) {\n        switch (c) {\n      \
    \      case '(': bracketsStack.push('('); break;\n            case '[': bracketsStack.push('[');\
    \ break;\n            case '{': bracketsStack.push('<'); break;\n            case\
    \ ')': bracketsStack.push('>'); break;\n            case '<': bracketsStack.push('{');\
    \ break;\n            case ']': bracketsStack.pop(); break;\n            case\
    \ '}': bracketsStack.pop(); break;\n            default: break;\n        }\n \
    \   }\n    return bracketsStack.empty();\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp8iciohl6: /tmp/tmp8iciohl6.cpp:31: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // write\
    \ your code here\n    \n    return true;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpc63fm24z: /tmp/tmpc63fm24z.cpp:24: int main(): Assertion `candidate((\"\
    ((()())))\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  // check\
    \ that the string is well formed\n  if (brackets.size() != 2) {\n    return false;\n\
    \  }\n  // initialize result to false\n  bool result = false;\n  // iterate over\
    \ every character in the input string\n  for (int i = 0; i < brackets.size();\
    \ i++) {\n    // get the current character\n    char curr = brackets[i];\n   \
    \ // iterate over every character in the brackets\n    for (int j = 0; j < brackets.size();\
    \ j++) {\n      // if the character at i equals the character at j\n      if (i\
    \ == j) {\n        // then we're at the first character in the brackets, so return\
    \ false\n        return false;\n      } else if (curr == brackets[j]) {\n    \
    \    // if the current character equals the previous character\n        if (i\
    \ == 0) {\n          // then we're at the first character of the brackets string\n\
    \          // and it's equal to the previous character\n          result = true;\n\
    \        }\n        // otherwise, we're not at the first character of the brackets\n\
    \        // and the current character equals the previous character\n        //\
    \ so return false and break out of the loop\n        return false;\n      }\n\
    \    }\n  }\n  // if we got here, then all brackets had a corresponding closing\
    \ bracket\n  return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpf2ytqtzf: /tmp/tmpf2ytqtzf.cpp:49: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  int size\
    \ = brackets.size();\n  for (int i = 0; i < size; ++i) {\n    // open brackets\
    \ must be in order.\n    if (brackets[i] != '(') {\n      return false;\n    }\n\
    \    // count the number of closing brackets.\n    int closing_brackets = 0;\n\
    \    for (; i < size; ++i) {\n      if (brackets[i] == '(') ++closing_brackets;\n\
    \      if (brackets[i] == ')') ++closing_brackets;\n    }\n    // if there are\
    \ more opening brackets than closing brackets,\n    // then return false.\n  \
    \  if (closing_brackets != i) {\n      return false;\n    }\n  }\n  return true;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp7p_6jo0u: /tmp/tmp7p_6jo0u.cpp:40: int main(): Assertion `candidate((\"\
    ((()())))\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  if(brackets.size()\
    \ == 0) return false;\n  int open_bracket = brackets[0] - '0';\n  int close_bracket\
    \ = brackets[brackets.size() - 1] - '0';\n  bool all_brackets_closed = (open_bracket\
    \ == 0 && close_bracket == 0) || close_bracket == open_bracket;\n  return all_brackets_closed;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpiu_k90ec: /tmp/tmpiu_k90ec.cpp:22: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    auto opening\
    \ = brackets.find(\"(\");\n    auto closing = brackets.rfind(\")\");\n    return\
    \ (opening != closing) && (opening < brackets.size());\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpp59wvili: /tmp/tmpp59wvili.cpp:24: int main(): Assertion `candidate((\"\
    ((()())))\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    stack<char>\
    \ st;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i]\
    \ == '(')\n            st.push('(');\n        else if (brackets[i] == '[' || brackets[i]\
    \ == '{' || brackets[i] == '(')\n            st.push(brackets[i]);\n        else\
    \ if (brackets[i] == ')' && st.top() == '(')\n            st.pop();\n        else\
    \ if (brackets[i] == ']' && st.top() == '[')\n            st.pop();\n        else\
    \ if (brackets[i] == '}' && st.top() == '{')\n            st.pop();\n    }\n \
    \   return (st.top() == '(');\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzg0rskcn.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpzg0rskcn.cpp:14:5: error: \u2018stack\u2019 was not declared in this\
    \ scope; did you mean \u2018std::stack\u2019?\n   14 |     stack<char> st;\n \
    \     |     ^~~~~\n      |     std::stack\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/stack:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:89,\n\
    \                 from /tmp/tmpzg0rskcn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_stack.h:99:11:\
    \ note: \u2018std::stack\u2019 declared here\n   99 |     class stack\n      |\
    \           ^~~~~\n/tmp/tmpzg0rskcn.cpp:14:11: error: expected primary-expression\
    \ before \u2018char\u2019\n   14 |     stack<char> st;\n      |           ^~~~\n\
    /tmp/tmpzg0rskcn.cpp:17:13: error: \u2018st\u2019 was not declared in this scope;\
    \ did you mean \u2018std\u2019?\n   17 |             st.push('(');\n      |  \
    \           ^~\n      |             std\n/tmp/tmpzg0rskcn.cpp:19:13: error: \u2018\
    st\u2019 was not declared in this scope; did you mean \u2018std\u2019?\n   19\
    \ |             st.push(brackets[i]);\n      |             ^~\n      |       \
    \      std\n/tmp/tmpzg0rskcn.cpp:20:40: error: \u2018st\u2019 was not declared\
    \ in this scope; did you mean \u2018std\u2019?\n   20 |         else if (brackets[i]\
    \ == ')' && st.top() == '(')\n      |                                        ^~\n\
    \      |                                        std\n/tmp/tmpzg0rskcn.cpp:27:13:\
    \ error: \u2018st\u2019 was not declared in this scope; did you mean \u2018std\u2019\
    ?\n   27 |     return (st.top() == '(');\n      |             ^~\n      |    \
    \         std\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  int cnt\
    \ = 0;\n  bool flag = false;\n  for (auto it = brackets.begin(); it != brackets.end();\
    \ it++) {\n    if (*it == '(') {\n      cnt++;\n      if (cnt == 1) {\n      \
    \  flag = true;\n      } else {\n        cnt = 0;\n      }\n    }\n    if (*it\
    \ == ')') {\n      cnt--;\n      if (cnt == 0) {\n        flag = true;\n     \
    \ }\n    }\n    if (cnt == 0) {\n      return false;\n    }\n  }\n  return flag;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpateio9ml: /tmp/tmpateio9ml.cpp:39: int main(): Assertion `candidate((\"\
    ()\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
