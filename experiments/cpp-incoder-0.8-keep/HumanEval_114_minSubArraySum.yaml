name: HumanEval_114_minSubArraySum
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
  \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
  // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\n\
  long minSubArraySum(std::vector<long> nums) {\n"
tests: "}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
  \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3})))\
  \ == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) ==\
  \ (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
  \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1,\
  \ -2, -3, 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1,\
  \ -2, -3, 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11,\
  \ 13, 8, 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32,\
  \ -1, 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) ==\
  \ (-10));\n    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
  \ -1}))) == (-1));\n}\n"
completions: ["    // Your code goes here\n    std::vector<long> sub;\n    int n =\
    \ nums.size();\n    long ans = 0;\n    for (int i = 0; i < n; i++) {\n       \
    \ long min = INT_MAX;\n        int pos = -1;\n        for (int j = 0; j < n; j++)\
    \ {\n            if (i != j) {\n                long t = nums[j] + nums[i];\n\
    \                if (t < min) {\n                    min = t;\n              \
    \      pos = j;\n                }\n            }\n        }\n        if (pos\
    \ != -1) {\n            sub.push_back(nums[pos]);\n            ans += nums[pos];\n\
    \        }\n    }\n    return ans;", "    // Initialize result to INT_MIN.\n \
    \   long result = INT_MIN;\n\n    // Iterate through array from end to start.\n\
    \    for (int i = nums.size() - 1; i >= 0; --i) {\n        // Initialize sum to\
    \ 0.\n        long sum = 0;\n\n        // Iterate through array from start to\
    \ the current element.\n        for (long j = nums.size() - 1; j >= i; --j) {\n\
    \            // If current element is larger than current minimum, update minimum.\n\
    \            if (nums[j] > sum) {\n                sum = nums[j];\n          \
    \  }\n        }\n        // If sum is smaller than current result, update result.\n\
    \        if (sum < result)\n            result = sum;\n    }\n    return result;",
  "    // write your code here\n    long res = 0;\n    // write your code here\n \
    \   for (int i = 0; i < nums.size(); i++)\n    {\n        for (int j = i + 1;\
    \ j < nums.size(); j++)\n        {\n            long tempsum = nums[i] + nums[j];\n\
    \            if (tempsum < 0)\n            {\n                tempsum *= -1;\n\
    \            }\n            if (res < tempsum)\n            {\n              \
    \  res = tempsum;\n            }\n        }\n    }\n    return res;", "    long\
    \ min_sum = *std::min_element(nums.begin(), nums.end());\n    for (int i = 0;\
    \ i < nums.size(); ++i) {\n        int sum = 0;\n        for (int j = 0; j < nums.size();\
    \ ++j) {\n            if (i != j) sum += nums[j];\n        }\n        if (sum\
    \ < min_sum) min_sum = sum;\n    }\n    return min_sum;", "    if(nums.empty())\n\
    \        return 0;\n    long minimumSum = nums[0];\n    for(long i = 1; i < nums.size();\
    \ i++) {\n        minimumSum = std::min(minimumSum + nums[i], nums[i]);\n    }\n\
    \    return minimumSum;", "    // your code goes here\n    \n    long sum = 0;\n\
    \    long min = std::numeric_limits<long>::max();\n    long minIndex = -1;\n \
    \   for (long index = 0; index < nums.size(); index++) {\n        sum += nums[index];\n\
    \        min = std::min(min, sum);\n        if (sum < 0)\n            break;\n\
    \        if (sum == 0)\n            minIndex = index;\n    }\n    \n    return\
    \ min;", "    // code here\n    long sum=0, i=0;\n    for(i=0;i<nums.size();i++){\n\
    \        sum+=nums[i];\n    }\n    sum=sum%1000000007;\n    return sum;", "  \
    \  int n = nums.size();\n    long min_sum = INT_MAX;\n    std::vector<long> min(n);\n\
    \    for (int i = 0; i < n; ++i) {\n        min_sum = min(min_sum + nums[i], min[i]);\n\
    \    }\n    return min_sum;", "  // Write your code here\n  std::stack<long> stk;\n\
    \  long ans = std::numeric_limits<long>::max();\n  for (long x : nums) {\n   \
    \ stk.push(x);\n    while ((stk.size() > 1) && (stk.top() < stk.top())) {\n  \
    \    stk.pop();\n    }\n    if (stk.size() > 1) {\n      ans = std::min(ans, stk.top()\
    \ + stk.top());\n    }\n  }\n  return ans;", "  // write your code here\n  long\
    \ min=LONG_MAX;\n  for(auto i:nums)\n  {\n    min=std::min(min,i);\n  }\n  return\
    \ min;", "    assert(nums.size() > 0);\n    long long sum = 0;\n    long long\
    \ currSum = nums[0];\n    for (int i = 1; i < nums.size(); i++) {\n        currSum\
    \ += nums[i];\n        sum += currSum;\n    }\n    return sum;", "  int size =\
    \ nums.size();\n  long long sum = INT_MIN;\n  for (int i = 0; i < size - 1; i++)\
    \ {\n    sum = std::min(sum, nums[i] + nums[i + 1]);\n  }\n  return sum;", " \
    \   long ans = INT_MAX;\n    long sum = 0;\n    for (auto i : nums) {\n      \
    \  sum += i;\n        if (sum < ans) {\n            ans = sum;\n        }\n  \
    \  }\n    return ans;", "    // Write your code here\n    long min = INT_MAX;\n\
    \    long sum = 0;\n    for(auto i:nums)\n        sum += i;\n    for(auto i:nums)\n\
    \        min = std::min(min, sum-i);\n    return min;", "    int start = 0;\n\
    \    int end = nums.size() - 1;\n    // initialize maxSum as INT_MIN\n    long\
    \ maxSum = std::numeric_limits<long>::min();\n    while (start < end) {\n    \
    \    maxSum = std::max(maxSum, nums[start] + nums[end]);\n        // subtract\
    \ maxSum from nums[end] as we reach the end of array\n        if (nums[end] -\
    \ maxSum <= 0) {\n            end = end - 1;\n        } else {\n            ++end;\n\
    \        }\n        // subtract maxSum from nums[start] as we reach the start\
    \ of array\n        if (nums[start] - maxSum < 0) {\n            start = start\
    \ + 1;\n        } else {\n            ++start;\n        }\n    }\n    return maxSum;",
  "    long l = 0;\n    long a = nums[0];\n    long b = nums[0];\n    long sum = 0;\n\
    \    for (long i : nums) {\n        sum += i;\n        if (l == 0) l = i;\n  \
    \      else if (sum < 0) l = i;\n        else if (sum > 0) b = i;\n    }\n   \
    \ return a < b ? a : b;", "    std::sort(nums.begin(), nums.end());\n    std::reverse(nums.begin(),\
    \ nums.end());\n    long sum = nums[0];\n    for (int i = 1; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < nums[0]) {\n            return\
    \ sum;\n        }\n    }\n    return sum;", "    long result = nums.front();\n\
    \    for (long i : nums) {\n        if (result > i) {\n            result = i;\n\
    \        }\n    }\n    return result;", "  assert(nums.size() > 0);\n  long sum\
    \ = 0;\n  for (int i = 0; i < nums.size(); i++) {\n    sum += nums[i];\n  }\n\
    \  std::cout << sum << \"\\n\";\n  long min = sum;\n  for (int i = nums.size()\
    \ - 1; i >= 0; i--) {\n    sum += nums[i];\n    if (sum < min) {\n      min =\
    \ sum;\n    }\n  }\n  return min;", "    long min_sum = 0;\n    for (long i =\
    \ 0; i < nums.size(); i++) {\n        min_sum = std::min(min_sum, nums[i]);\n\
    \    }\n    return min_sum;", "    // code here\n    long ans = 0;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        ans = std::min(ans, (nums[i] + minSubArraySum(nums.begin()\
    \ + 1, nums.begin() + i + 1)));\n    }\n    return ans;", "    // Write your code\
    \ here.\n    long sum = 0;\n    std::for_each(nums.begin(), nums.end(), [&sum](long\
    \ n) { sum += n; });\n    return sum;", "    long minSum = nums[0];\n    long\
    \ firstSum = nums[0];\n\n    for (size_t i = 1; i < nums.size(); i++) {\n    \
    \    minSum = std::min(minSum + nums[i], firstSum + nums[i]);\n        firstSum\
    \ = std::min(firstSum, nums[i]);\n    }\n    return minSum;", "    long l1=nums[0];\n\
    \    long l2=nums[0];\n    for(long i=1;i<nums.size();i++)\n    {\n        l1=max(l1,nums[i]);\n\
    \        l2=min(l2,nums[i]);\n    }\n    return l1+l2;", "    // code here\n \
    \   long ans = 0;\n    for (size_t i = 0; i < nums.size(); i++) {\n        long\
    \ sum = 0;\n        for (size_t j = i; j < nums.size(); j++) {\n            sum\
    \ += nums[j];\n        }\n        if (sum > 0) {\n            ans = min(ans, sum);\n\
    \        }\n    }\n    return ans;", "        long minimumSum = std::numeric_limits<long>::max();\n\
    \        long startSum = std::numeric_limits<long>::max();\n        for(long i\
    \ = 0; i < nums.size(); ++i) {\n            startSum += nums[i];\n           \
    \ long diff = startSum - minimumSum;\n            while(diff > 0) {\n        \
    \        startSum -= nums[i];\n                diff -= nums[i];\n            }\n\
    \        }\n        return minimumSum;", "    if(nums.size() <= 1) return nums[0];\n\
    \    std::sort(nums.begin(), nums.end());\n    long minSoFar = nums[0];\n    for(long\
    \ i = 1; i < nums.size(); ++i) {\n        minSoFar = std::min(minSoFar + nums[i],\
    \ nums[i]);\n    }\n    return minSoFar;", "    long min = LONG_MIN;\n    long\
    \ sum = 0;\n    for (int i = 0; i < nums.size(); i++)\n        sum += nums[i];\n\
    \    for (int i = 1; i < nums.size(); i++)\n        if (sum - nums[i - 1] >= min)\n\
    \            min = sum - nums[i - 1];\n    return min;", "    long minSum = nums[0];\n\
    \    int size = nums.size();\n    for (int i = 1; i < size; i++) {\n        int\
    \ index = size - i;\n        long sum = nums[index] + minSum;\n        minSum\
    \ = std::min(sum, minSum);\n    }\n    return minSum;", "  // your code goes here\n\
    \  long ans = INT_MIN;\n  long currSum = 0;\n  for (int i = 0; i < nums.size();\
    \ i++) {\n    currSum += nums[i];\n    if (currSum < ans) {\n      ans = currSum;\n\
    \    }\n  }\n  return ans;", "  // Your code here\n  assert(nums.size() > 0);\n\
    \  std::cout << std::setprecision(1000000000);\n  long ans = 0;\n  long sum =\
    \ 0;\n  long start = 0;\n  long end = 0;\n  long minSum = nums[0];\n  for (long\
    \ i = 0; i < nums.size(); i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n\
    \      minSum = sum;\n    }\n  }\n  long mid = nums.size() / 2;\n  while (start\
    \ < mid && end < mid) {\n    if (nums[start] + nums[end] < minSum) {\n      ans\
    \ = min(ans, nums[start] + nums[end]);\n      start++;\n      end++;\n    } else\
    \ {\n      if (nums[start] < minSum) {\n        ans = min(ans, nums[start]);\n\
    \      }\n      if (nums[end] < minSum) {\n        ans = min(ans, nums[end]);\n\
    \      }\n      start++;\n      end++;\n    }\n  }\n  return ans;", "    // write\
    \ your code here\n    long mini = *std::min_element(nums.begin(),nums.end());\n\
    \    long curr = 0;\n    for(auto i:nums)\n        curr+=i;\n    if(curr<mini)\n\
    \        mini = curr;\n    return mini;", "    std::set<long> sumSet;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        sumSet.insert(sum);\n\
    \    }\n    return *std::min_element(sumSet.begin(), sumSet.end());", "    std::sort(nums.begin(),\
    \ nums.end());\n    int n = nums.size();\n    long ans = 0;\n    for (int i =\
    \ 0; i < n; i++)\n        if (i > 0 && nums[i] != nums[i - 1])\n            ans\
    \ += nums[i] - nums[i - 1];\n    return ans;", "    // Code here\n    long sum\
    \ = 0, min = INT_MAX;\n    for (long n : nums) {\n        // sum += n;\n     \
    \   sum += n;\n        min = min(sum, min);\n    }\n    return min;", "    int\
    \ n = nums.size();\n    long long ans = -99999999;\n    // If nums is empty, then\
    \ return 0\n    if (n == 0) return 0;\n    // If nums is just one element then\
    \ return it\n    if (n == 1) return nums[0];\n    long long best = 0;\n    for\
    \ (int i = 0; i < n; i++) {\n        // The current element of nums is the minimum\
    \ of the current best and current element.\n        // The current best's sum\
    \ is best and current element is nums[i]\n        best = std::min(best, best +\
    \ nums[i]);\n        // The current best is the minimum of the current best's\
    \ sum and current element\n        // The current best sum is best + nums[i]\n\
    \    }\n    // The current best is the minimum of best and current element\n \
    \   // The current best's sum is best\n    return best;", "    long long n = nums.size();\n\
    \    long long max_so_far = 0, min_so_far = INT_MAX;\n\n    for (long i = 0; i\
    \ < n; i++) {\n        min_so_far = min(min_so_far, max_so_far + nums[i]);\n \
    \       max_so_far = max(max_so_far, nums[i]);\n    }\n\n    return min_so_far;",
  "    // Your code here\n    int size = nums.size();\n    if(size == 0)\n       \
    \ return 0;\n    long ans = nums[0];\n    for(long i = 1; i < size; i++) {\n \
    \       ans = Math.min(ans, nums[i] + nums[i - size]);\n    }\n    return ans;",
  "    long ans = INT_MAX;\n    for (long i = -1; i < nums.size(); ++i) {\n      \
    \  for (long j = nums.at(i); j > 0; --j) {\n            if (i + j < 0 || nums.at(i\
    \ + j) < j) continue;\n            if (j >= nums.at(i + j) || i + j >= nums.size()\
    \ ||\n                nums.at(i + j) >= nums.at(i - j)) {\n                nums.at(i)\
    \ = j;\n                nums.at(i - j) = i;\n                ans = std::min(ans,\
    \ i - j + 1);\n                std::fill(nums.begin() + i + j + 1, nums.end(),\
    \ 0);\n            }\n        }\n    }\n    return ans;", "    long min = INT_MAX;\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        min = std::min(min, nums[i]);\n\
    \    }\n    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n    \
    \    sum += nums[i];\n        if (sum < min) {\n            min = sum;\n     \
    \   }\n    }\n    return min;", "    long long min = std::numeric_limits<long\
    \ long>::max();\n    for (auto &i : nums)\n        if (i != -1)\n            min\
    \ = std::min(min, i);\n    return min;", "    long minSum = 0;\n    long start\
    \ = 0;\n    long end = nums.size() - 1;\n    long ans = 0;\n\n    while (start\
    \ < end) {\n        ans = std::min(ans, nums[start] + nums[end]);\n        start\
    \ += 2;\n        end -= 2;\n        if (nums[start] == nums[end])\n          \
    \  start += 1;\n        else if (nums[start] < nums[end])\n            end -=\
    \ 1;\n        else\n            start += 1;\n    }\n\n    minSum = std::min(ans,\
    \ minSum);\n    return minSum;", "  std::sort(nums.begin(), nums.end());\n  long\
    \ min_sum = nums[0];\n  for (int i = 1; i < nums.size(); i++) {\n    min_sum =\
    \ std::min(min_sum + nums[i], nums[i]);\n  }\n  return min_sum;", "    long ans\
    \ = INT_MIN;\n    long long sum = 0;\n    for (long long n : nums) {\n       \
    \ if (n >= 0) {\n            sum += n;\n        } else {\n            sum -= n;\n\
    \        }\n    }\n    for (auto i : nums) {\n        ans = std::min(ans, sum\
    \ - i);\n    }\n    return ans;", "  long sum = nums[0];\n  for(long n: nums){\n\
    \    sum = min(sum + n, n);\n  }\n  return sum;", "    // Your code here\n   \
    \ long sum=0;\n    long min=INT_MAX;\n    for (int i=0; i<nums.size(); i++)\n\
    \    {\n        if (sum>=0 && sum<nums[i])\n            sum=nums[i]+sum;\n   \
    \     else if (sum>nums[i])\n        {\n            sum=sum-nums[i];\n       \
    \ }\n        min=min(min,sum);\n    }\n    return min;", "    // Complete this\
    \ function\n    // Do not remove the return statement\n    long min = std::numeric_limits<long>::max();\n\
    \    long sum = 0;\n    for (auto n: nums) {\n        sum += n;\n        if (sum\
    \ < min) {\n            min = sum;\n        }\n    }\n    return min;", "    //\
    \ Write your code here.\n    return INT_MIN;", "    // Write your code here\n\
    \    if(nums.size()==0) \n        return 0;\n    long lowsum=nums[0]+nums[0];\n\
    \    long highsum=nums[0]+nums[0];\n    for(int i=1;i<nums.size();i++){\n    \
    \    if(nums[i]<lowsum) lowsum=nums[i];\n        if(nums[i]>highsum) highsum=nums[i];\n\
    \    }\n    return lowsum;", "  // Your code here\n  assert(nums.size() != 0);\n\
    \  if (nums.size() == 1)\n    return 0;\n  long ans = nums[0];\n  for (long i\
    \ = 1; i < nums.size(); i++) {\n    long curr = nums[i];\n    long ans = std::min(ans,\
    \ curr + minSubArraySum(nums.subvector(1, i)));\n  }\n  return ans;", "    if(nums.size()\
    \ == 0) return 0;\n    long ans = nums[0];\n    for(long i = 1; i < nums.size();\
    \ i++){\n        ans = std::min(ans, nums[i] + minSubArraySum(nums.substr(0, i-1)));\n\
    \    }\n    return ans;", "    long res = 0;\n    if (nums.size() <= 1) return\
    \ res;\n    // Traverse the array from end to beginning and compute the sum\n\
    \    // of current sub array\n    for (long i = nums.size() - 1; i >= 0; --i)\
    \ {\n        long ls = nums[i];\n        long cur_sum = 0;\n        for (long\
    \ j = i; j < nums.size(); ++j) {\n            cur_sum += nums[j];\n          \
    \  if (cur_sum < ls)\n                ls = cur_sum;\n        }\n        res =\
    \ std::min(res, ls);\n    }\n    return res;", "    if (nums.size() == 0)\n  \
    \      return 0;\n    long ans = nums[0];\n    for (long i : nums) {\n       \
    \ ans = std::min(ans, i);\n    }\n    return ans;", "    long sum = 0;\n    for\
    \ (long &i : nums) {\n        sum += i;\n    }\n    return sum;", "    std::sort(nums.begin(),\
    \ nums.end());\n    long long int ans = nums[0];\n    for(int i = 1; i < nums.size();\
    \ i++){\n        if(nums[i] > nums[i - 1]){\n            ans += (nums[i] - nums[i\
    \ - 1]);\n        }\n    }\n    return ans;", "  // your code goes here\n  if\
    \ (nums.size() == 0)\n    return 0;\n  long sumOfFirstNum = nums[0];\n  long sumOfRestOfNums\
    \ = 0;\n  for (int i = 1; i < nums.size(); i++) {\n    sumOfFirstNum += nums[i];\n\
    \    sumOfRestOfNums += nums[i];\n  }\n  long minSum = sumOfFirstNum + minSubArraySum(nums.substr(1));\n\
    \  // printf(\"first element sum is %d\\n\", sumOfFirstNum);\n  // printf(\"rest\
    \ of elements sum is %d\\n\", sumOfRestOfNums);\n  return minSum;", "    long\
    \ ans = std::numeric_limits<long>::max();\n    long len = nums.size();\n    for\
    \ (long i = 0; i < len; i++) {\n        long sum = 0;\n        for (long j = i;\
    \ j < len; j++) {\n            sum += nums[j];\n            if (sum < ans)\n \
    \               ans = sum;\n        }\n    }\n    return ans;", "    long min_sum\
    \ = INT_MAX;\n    long sum = 0;\n    for (auto &num : nums) {\n        sum +=\
    \ num;\n        if (sum < min_sum) min_sum = sum;\n    }\n    return min_sum;",
  "  // your code here\n  int sum = 0;\n  for (int i=0; i<nums.size(); i++)\n    sum\
    \ += nums[i];\n  return sum;", "    long ans = nums[0]; // initialize min to first\
    \ number\n    for (long i : nums) {\n        // use min to subtract next number\
    \ from curr min\n        ans = std::min(ans, i - ans);\n    }\n    return ans;",
  "    int ans = std::numeric_limits<int>::max();\n    int N = nums.size();\n    for\
    \ (int i = 0; i < N; i++) {\n        int left = i + 1, right = N - 1, sum = 0;\n\
    \        while (left < right) {\n            sum += nums[left++];\n          \
    \  if (sum < ans) ans = sum;\n            sum -= nums[right--];\n        }\n \
    \   }\n    return ans;", "    long maxsum=0;\n    long sum=0;\n    long long temp=INT_MAX;\n\
    \    long long min=INT_MAX;\n    for(int i=0; i<nums.size(); i++) {\n        sum+=nums[i];\n\
    \        if(sum<min) {\n            min=sum;\n        }\n    }\n    for(int i=0;\
    \ i<nums.size(); i++) {\n        temp=nums[i];\n        nums[i]=sum-temp;\n  \
    \      sum+=temp;\n        if(sum<min) {\n            min=sum;\n        }\n  \
    \  }\n    for(int i=0; i<nums.size(); i++) {\n        temp=nums[i];\n        nums[i]=sum-temp;\n\
    \        sum+=temp;\n        if(sum>maxsum) {\n            maxsum=sum;\n     \
    \   }\n    }\n    return maxsum;", "    assert(nums.size()>0);\n    std::vector<long>\
    \ minSum;\n    minSum.push_back(nums.at(0));\n    // Find the minimum sum\n  \
    \  long long minSubArraySum=0;\n    long long minSumInside=nums.at(0);\n    long\
    \ long minSumInsideSum=minSumInside;\n    for(long i=1;i<nums.size();i++){\n \
    \       // find the min sum inside the new array\n        long newMinSumInsideSum\
    \ = minSumInsideSum+nums.at(i);\n        \n        if(newMinSumInsideSum<minSumInside){\n\
    \            minSumInside = newMinSumInsideSum;\n            minSumInsideSum=newMinSumInsideSum;\n\
    \        }else{\n            minSumInsideSum=newMinSumInsideSum;\n        }\n\
    \        // update the minimum sum\n        long newMinSum = minSum.at(i)+minSumInside;\n\
    \        if(newMinSum<minSum){\n            minSum = newMinSum;\n        }\n \
    \   }\n    return minSum;", "    long sumOfSubarraySum = 0;\n    long min = nums[0];\n\
    \    long max = nums[0];\n    for (long i : nums) {\n        if (i < min) {\n\
    \            min = i;\n        } else if (i > max) {\n            max = i;\n \
    \       }\n    }\n    for (long i : nums) {\n        sumOfSubarraySum = sumOfSubarraySum\
    \ + i;\n        if (sumOfSubarraySum < min) {\n            min = sumOfSubarraySum;\n\
    \        } else if (sumOfSubarraySum > max) {\n            max = sumOfSubarraySum;\n\
    \        }\n    }\n    return min;", "    auto n = nums.size();\n    if (n < 2)\
    \ {\n        return *nums.begin();\n    }\n    std::vector<long> ans(n, 0);\n\
    \    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += nums[i];\n\
    \        if (sum >= 0) {\n            ans[i] = sum;\n            sum += nums[i];\n\
    \        }\n    }\n    return *std::min_element(ans.begin(), ans.end());", " \
    \   // Write your code here\n    assert(nums.size() != 0);\n    if(nums.empty())\
    \ return 0;\n    long low = 0, high = nums.size() - 1, sum = 0;\n    while(low\
    \ < high) {\n        sum = nums[low] + nums[high];\n        low++;\n        high--;\n\
    \        if(sum < 0) sum = 0;\n        if(sum > 0) high--;\n    }\n    return\
    \ sum;", "    assert(nums.size() == std::min(nums.size(), 1000) + 1);\n    //\
    \ sort array in descending order\n    std::sort(nums.begin(), nums.end());\n \
    \   long ans = nums[0];\n    for (long i = 1; i < nums.size(); i++) {\n      \
    \  ans = min(ans, nums[i] + nums[i - 1]);\n    }\n    return ans;", "    // Your\
    \ code here\n    long minsum = std::numeric_limits<long>::max();\n    for(int\
    \ i = 0; i<nums.size(); i++){\n        if(nums[i] == -1) continue;\n        long\
    \ curSum = nums[i] + minsum;\n        minsum = curSum;\n    }\n    return minsum;",
  "    // Write your code here\n    // Write your code here\n    long minSubArraySum\
    \ = 0;\n    std::vector<long>::iterator it;\n    long max = 0;\n    for (it =\
    \ nums.begin(); it != nums.end(); ++it)\n    {\n        if (*it > max) {\n   \
    \         max = *it;\n        }\n    }\n    long temp;\n    for (it = nums.begin();\
    \ it != nums.end(); ++it)\n    {\n        if (*it <= max)\n        {\n       \
    \     temp += *it;\n        }\n    }\n    minSubArraySum = temp;\n    return minSubArraySum;",
  "  long long ans = std::numeric_limits<long long>::max();\n  for (long long i =\
    \ 0; i < nums.size(); i++) {\n    for (long long j = i + 1; j < nums.size(); j++)\
    \ {\n      long long tmp = nums[j] - nums[i];\n      if (tmp < 0) {\n        tmp\
    \ *= -1;\n      }\n      if (tmp < ans) {\n        ans = tmp;\n      }\n    }\n\
    \  }\n  return ans;", "    if(nums.size() == 0)\n        return 0;\n    long min\
    \ = std::numeric_limits<long>::max();\n    long sum = 0;\n    for(int i = 0; i\
    \ < nums.size(); i++) {\n        if(nums[i] == -1) {\n            sum += min;\n\
    \        } else {\n            sum += nums[i];\n            if(sum < min) min\
    \ = sum;\n        }\n    }\n    return sum;", "    long result = 0;\n    long\
    \ temp = 0;\n    // For each element in nums, subtract it from temp. Record the\
    \ sum of temp.\n    // If temp is negative, set result to be the negative of temp.\n\
    \    // Else if temp is positive, set result to be the sum of temp.\n    // Else\
    \ set result to the sum of temp.\n    long ans = INT_MAX;\n    for (auto &num\
    \ : nums) {\n        temp -= num;\n        if (temp < 0) {\n            result\
    \ = -temp;\n        } else {\n            result += temp;\n        }\n    }\n\
    \    // If result is negative, negate it.\n    if (result < 0) {\n        return\
    \ -result;\n    } else {\n        return result;\n    }", "    int ans = 0;\n\
    \    std::set<int> sumSet;\n    std::set<int> minSet;\n    for (long i : nums)\
    \ {\n        sumSet.insert(i);\n        minSet.insert(i);\n    }\n    for (long\
    \ i : nums) {\n        if (sumSet.find(i) == sumSet.end())\n            continue;\n\
    \        int j = sumSet.find(i) + 1;\n        for (long k = i; k <= j; k++) {\n\
    \            minSet.erase(k);\n            ans += i;\n        }\n    }\n    return\
    \ ans;", "    // Complete this function\n    long min = INT_MAX;\n    for(long\
    \ i = 0; i < nums.size(); ++i)\n    {\n        min = std::min(min, nums[i]);\n\
    \    }\n    return min;", "    long minSum = std::numeric_limits<long>::min();\n\
    \    long currentSum = 0;\n    for (long num : nums) {\n        currentSum = currentSum\
    \ + num;\n        minSum = std::min(minSum, currentSum);\n    }\n    return minSum;",
  "    long minSum = INT_MAX;\n    long currentMinSum = 0;\n    long sum = 0;\n  \
    \  for (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n       \
    \ if (sum < currentMinSum) {\n            currentMinSum = sum;\n            minSum\
    \ = currentMinSum;\n        } else if (sum > currentMinSum) {\n            currentMinSum\
    \ = sum;\n        }\n    }\n    return minSum;", "  std::vector<long> subArray(nums.size());\n\
    \  long minSum = INT_MIN;\n  for (size_t i = 1; i < nums.size(); i++) {\n    subArray[0]\
    \ = nums[i];\n    for (size_t j = 0; j < i; j++) {\n      subArray[j + 1] = subArray[j]\
    \ + nums[j];\n    }\n    minSum = min(minSum, subArray[i]);\n  }\n  return minSum;",
  "    long sum = 0;\n    std::vector<long> a(1, 0);\n    // for each element from\
    \ 1 to n-1 from array sum \n    for (int i = 1; i < nums.size(); i++) {\n    \
    \    sum += nums[i] - nums[i - 1]; // subtract the previous element from current\
    \ element to sum \n        a[i] += sum; // add that sum to sum and store in array\
    \ a \n    }\n    return a[nums.size() - 1]; // return the last element which is\
    \ sum of the last element of array", "    // Write your code here\n    long sum\
    \ = nums[0];\n    for(long i=0;i<nums.size();++i){\n        sum+=nums[i];\n  \
    \  }\n    return sum;", "\tlong ans = std::numeric_limits<long int>::max();\n\t\
    std::vector<long int> counts;\n\tstd::iota(counts.begin(), counts.end(), 0);\n\
    \twhile (counts.size() > 0) {\n\t\tlong long curr = counts[0];\n\t\tcounts[0]\
    \ = counts[1];\n\t\tcounts[1] += curr;\n\t\tfor (size_t i = 2; i < counts.size();\
    \ ++i) {\n\t\t\tcounts[i] += counts[i - 1];\n\t\t}\n\t\tif (curr < ans) {\n\t\t\
    \tans = curr;\n\t\t}\n\t\tstd::rotate(counts.begin(), counts.end() - 1, counts.end());\n\
    \t}\n\treturn ans;", "    // Write your code here.\n    long long min;\n    long\
    \ long sum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        sum = sum\
    \ + nums[i];\n        if (sum < min)\n            min = sum;\n    }\n    return\
    \ min;", "    long low  = INT_MAX, high = INT_MIN;\n    long mid;\n    for(auto\
    \ n: nums){\n        mid = low + (high-low)/2;\n        if(n <= mid){\n      \
    \      low = mid;\n        }\n        else{\n            high = mid;\n       \
    \ }\n    }\n    long min = std::max(low,high);\n    for(auto n: nums){\n     \
    \   mid = low + (high-low)/2;\n        if(n < mid){\n            low = mid;\n\
    \        }\n        else{\n            high = mid;\n        }\n    }\n    long\
    \ res = std::max(low,high);\n    return std::max(res,min);", "    assert(nums.size()\
    \ != 0);\n    long sum = nums[0];\n    for (size_t i = 1; i < nums.size(); i++)\
    \ {\n        sum += nums[i];\n    }\n    return sum;", "    // Your code here\n\
    \    long long arrSum[100001];\n    // arrSum[i] = sum of elements in nums from\
    \ 0 to i\n    for (int i = 0; i < nums.size(); i++)\n        arrSum[i] = 0;\n\n\
    \    for (int i = 0; i < (int) nums.size(); i++)\n        arrSum[nums[i]] = i\
    \ + 1;\n\n    long long min = arrSum[0];\n    long long index = 0;\n    for (int\
    \ i = 0; i < (int) nums.size(); i++)\n    {\n        if (arrSum[nums[i]] == i\
    \ + 1)\n        {\n            arrSum[nums[i]]++;\n            min = std::min(min,\
    \ arrSum[nums[i]]);\n        }\n    }\n    long long newIndex = std::distance(std::begin(arrSum),\
    \ std::max_element(std::begin(arrSum), std::end(arrSum)));\n\n    return min +\
    \ newIndex * (index + 1);", "    long sum = INT_MIN;\n    // Traverse through\
    \ all sub-arrays in the array.\n    for (auto i = 0u; i < nums.size(); ++i) {\n\
    \        sum += nums[i];\n        // We need to find the minimum of all sub-arrays\
    \ so far.\n        if (sum < INT_MIN)\n            sum = INT_MIN;\n    }\n   \
    \ return sum;", "    std::vector<long> temp(nums);\n    long min = INT_MAX;\n\
    \    long sum = 0;\n    for (std::size_t i = 0; i < temp.size(); i++) {\n    \
    \    for (std::size_t j = i; j < temp.size(); j++) {\n            sum += temp[j];\n\
    \            if (sum < min) {\n                min = sum;\n            }\n   \
    \     }\n    }\n    return min;", "    // code here\n    int m = nums.size();\n\
    \    long min = INT_MAX;\n    long sum = 0;\n    for(int i = 0; i < m; i++) {\n\
    \        sum += nums[i];\n        if(min > sum)\n            min = sum;\n    }\n\
    \    return min;", "    // Write your code here\n    if(nums.size() == 0){\n \
    \       return 0;\n    }\n    long ans = std::numeric_limits<long>::max();\n \
    \   for(long index = 0; index < nums.size(); index++){\n        if(index == 0){\n\
    \            ans = std::min(ans, nums[index]);\n        }\n        else{\n   \
    \         ans = std::min(ans, std::min(nums[index], nums[index-1]));\n       \
    \ }\n    }\n    return ans;", "    long long ans = 0;\n    for (auto i: nums)\n\
    \        ans = std::min(ans, i + nums.begin() + i);\n    return ans;", "  long\
    \ result=INT_MAX;\n  // Your code here\n  for(long i=0;i<nums.size();i++){\n \
    \   long sum=0;\n    for(long j=i;j<nums.size();j++){\n      sum+=nums[j];\n \
    \   }\n    if(sum<result){\n      result=sum;\n    }\n  }\n  return result;",
  "  // Write your code here\n    long minSum = INT_MAX;\n    for (long i = 0; i <\
    \ nums.size(); i++) {\n      minSum = std::min(minSum, nums[i]);\n    }\n    return\
    \ minSum;", "    // Sorting the vector will guarantee that sum of subarray is\
    \ minimized.\n    std::sort(nums.begin(), nums.end());\n\n    long long min =\
    \ nums[0];\n    // Looping from 1 to size of the array (number of elements)\n\
    \    // and maintaining sum on every iteration except for last\n    // iteration\
    \ where the current value is equal to first element\n    for (long long i = 1,\
    \ sum = 0; i < nums.size() && i <= nums.size(); i++) {\n        sum += nums[i];\n\
    \        if (i == nums.size() - 1) {\n            // last element of vector is\
    \ reached then break the loop\n            break;\n        }\n        // If current\
    \ element exceeds the sum then break the loop\n        if (sum > min) {\n    \
    \        break;\n        }\n        // If current element exceeds the min sum\
    \ then update min and sum\n        min = sum;\n    }\n    return min;", "    long\
    \ ans = INT_MAX;\n    int currSum = 0;\n    long maxSum = INT_MIN;\n    int maxPos\
    \ = -1;\n    for (long i = 0; i < nums.size(); i++) {\n        currSum += nums[i];\n\
    \        maxSum = std::min(maxSum, currSum);\n        // If this was the maximum\
    \ sum seen so far\n        if (maxSum == ans) {\n            maxPos = i;\n   \
    \     }\n    }\n    if (maxPos > -1) {\n        ans = maxSum;\n    }\n    return\
    \ ans;", "    if (nums.size() < 2) return 0;\n\n    // Initialize first element\
    \ as min value\n    long min = nums[0];\n\n    for (size_t i = 1; i < nums.size();\
    \ i++) {\n        long curr = nums[i];\n        // If the sum of the current and\
    \ the previous element is smaller than the\n        // current minimum\n     \
    \   if (curr + min > min) {\n            min = curr + min;\n        } else {\n\
    \            min = curr; // Else current minimum is the new minimum\n        }\n\
    \    }\n    return min;", "    // Your code goes here\n    long min_sum = LONG_MIN;\n\
    \    long sum = 0;\n    long size = nums.size();\n    for(int i = 0; i < size;\
    \ ++i){\n        sum = sum + nums[i];\n        if(sum < min_sum){\n          \
    \  min_sum = sum;\n        }\n    }\n    return min_sum;", "    long sum = 0;\n\
    \    for(auto &elem : nums){\n        sum += elem;\n    }\n    // we start from\
    \ index 1 because 0 is taken into account by 'sum'\n    for(auto index = 1; index\
    \ < nums.size(); ++index){\n        // when we reach an index which is smaller\
    \ than the previous sum, break the loop\n        if(nums[index] < sum) break;\n\
    \        // else add all numbers from index to the last sum until we reach index\
    \ which is smaller than the previous sum\n        sum += nums[index];\n    }\n\
    \    return sum;", "    std::sort(nums.begin(), nums.end());\n    long sum = 0,\
    \ currSum = nums[0];\n    for (int i = 1; i < nums.size(); i++) {\n        currSum\
    \ = currSum + nums[i];\n        if (currSum >= 0) {\n            sum += currSum;\n\
    \        }\n    }\n    return sum;", "    // Write your code here\n    \n    long\
    \ sum = 0;\n    long start = std::numeric_limits<long>::max();\n    long end =\
    \ std::numeric_limits<long>::min();\n    for (long i = 0; i < nums.size(); i++)\
    \ {\n        if (i == nums.size()-1 && nums[i] >= 0) start = nums[i];\n      \
    \  sum = std::min(sum, nums[i] + nums[i+1]);\n        end = std::max(end, nums[i+1]);\n\
    \    }\n    return sum;", "    if (nums.size() <= 0)\n        return 0;\n    std::vector<long>\
    \ min_sum;\n    min_sum.push_back(INT_MAX);\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        long cur_sum = nums[i] + min_sum.back();\n        if (cur_sum\
    \ < 0)\n            cur_sum = -cur_sum;\n        min_sum.push_back(cur_sum);\n\
    \    }\n    return min_sum.front();", "\tlong res = 0;\n\tlong min = INT_MAX;\n\
    \tfor (long i = 0; i < nums.size(); i++) {\n\t\tres = std::min(res, nums[i] +\
    \ min);\n\t\tmin = std::min(min, nums[i]);\n\t}\n\treturn res;", "    // Write\
    \ your code here\n    long ans = std::numeric_limits<long>::max();\n    for (long\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] > 0)\n            ans =\
    \ std::min(ans, 1 + nums[i]);\n    }\n    return ans;", "    assert(nums.size()\
    \ != 0);\n    long sum = 0;\n    long minSubArrSum = std::numeric_limits<long>::max();\n\
    \    \n    // for finding min sum from every subarray \n    for (long i=0; i<nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < minSubArrSum) {\n       \
    \     minSubArrSum = sum;\n        }\n    }\n    return minSubArrSum;", "    std::sort(nums.begin(),\
    \ nums.end());\n    long min_sum = nums[0];\n    for (long i = 0; i < nums.size()\
    \ - 1; ++i) {\n        long sum = nums[i] + nums[i + 1];\n        if (sum < min_sum)\
    \ min_sum = sum;\n    }\n    return min_sum;", "    long result = INT_MIN;\n \
    \   for(long num : nums){\n        result =  result + num;\n    }\n    return\
    \ result;", "    long min = LONG_MAX;\n    long max = 0;\n    long sum = 0;\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n     \
    \   if (sum < min) {\n            min = sum;\n        }\n        if (sum > max)\
    \ {\n            max = sum;\n        }\n    }\n    return min == LONG_MAX ? -max\
    \ : min;", "    long ans = nums[0];\n    for (long i = 1, x = nums[0]; i < nums.size();\
    \ i++) {\n        ans = std::min(ans + x, nums[i]);\n        x = nums[i];\n  \
    \  }\n    return ans;", "    assert(nums.size() > 0);\n    long min = nums[0];\n\
    \    long max = nums[0];\n    for (long i = 0; i < nums.size(); ++i) {\n     \
    \   min = std::min(min, nums[i]);\n        max = std::max(max, nums[i]);\n   \
    \ }\n    long sum = max;\n    for (long i = 0; i < nums.size(); ++i) {\n     \
    \   sum += nums[i] - min;\n    }\n    return sum;", "    // code here\n    long\
    \ ans = INT_MAX;\n    long currSum = 0;\n    \n    for(long i = 0; i < nums.size();\
    \ ++i)\n    {\n        currSum += nums[i];\n        if(currSum < ans)\n      \
    \      ans = currSum;\n    }\n    \n    return ans;", "  std::sort(nums.begin(),\
    \ nums.end());\n  if (nums.empty()) return 0;\n\n  auto prev = std::begin(nums);\n\
    \  auto min = std::begin(nums);\n  long ans = *std::max_element(std::begin(nums),\
    \ std::end(nums));\n  long curr = *std::min_element(std::begin(nums), std::end(nums));\n\
    \  // find minimum from subarray\n  for (int i = 1; i < nums.size(); i++) {\n\
    \    if (nums[i - 1] > nums[i]) curr = nums[i - 1];\n    prev = std::prev(std::begin(nums),\
    \ std::begin(nums) + i);\n    ans = std::min(ans, prev + curr + nums[i]);\n  }\n\
    \  return ans;", "  int n = nums.size();\n  long ans = nums[0];\n  for (int i\
    \ = 1; i < n; i++) {\n    long cur = nums[i];\n    ans = std::min(ans, cur + cur);\n\
    \  }\n  return ans;", "    // Complete this function\n    std::vector<bool> a(2,\
    \ false);\n    long ans = 0;\n    long long sum = 0;\n    for (long long i = 0;\
    \ i < nums.size(); i++)\n    {\n        sum = nums[i];\n        for(long long\
    \ j=i+1;j<nums.size();j++)\n        {\n            sum = sum + nums[j];\n    \
    \        a[sum] = true;\n            sum = sum - nums[j];\n        }\n       \
    \ if(sum != 0)\n        {\n            ans = sum;\n        }\n    }\n    return\
    \ ans;", "    // Your code goes here\n    long ans = 0;\n    for (long i = 0;\
    \ i < nums.size(); i++) {\n        long tempAns = nums[i];\n        for (long\
    \ j = i + 1; j < nums.size(); j++) {\n            tempAns += nums[j];\n      \
    \      if (tempAns < ans) {\n                ans = tempAns;\n            }\n \
    \       }\n    }\n    return ans;", "    // Complete this function\n    long minSum\
    \ = 0;\n    long i = 0;\n    long sum = 0;\n    while(i < nums.size()) {\n   \
    \     sum = sum + nums[i];\n        i++;\n        if(sum < minSum) {\n       \
    \     minSum = sum;\n        }\n    }\n    return minSum;", "  assert(nums.size()\
    \ != 0);\n  long min_sum = nums[0];\n  long sum = 0;\n  for (long i = 0; i < nums.size();\
    \ i++) {\n    sum += nums[i];\n    if (sum < min_sum) {\n      min_sum = sum;\n\
    \    }\n  }\n  return min_sum;", "    std::sort(nums.begin(), nums.end());\n \
    \   long long ans = nums[0];\n    for (long i = 1; i < nums.size(); ++i) {\n \
    \       ans += nums[i];\n        while (ans > nums[i - 1]) {\n            ans\
    \ -= nums[i - 1];\n        }\n    }\n    return ans;", "    long min = LONG_MAX;\n\
    \    long sum = 0;\n    long currSum = 0;\n    for (size_t i = 0; i < nums.size();\
    \ i++) {\n        currSum = nums[i];\n        while (i < nums.size() && nums[i]\
    \ != currSum) {\n            currSum += nums[i];\n            i++;\n        }\n\
    \        sum += currSum;\n        if (sum < min) {\n            min = sum;\n \
    \       }\n    }\n    return min;", "    // your code goes here\n    long sum\
    \ = 0;\n    for (long i : nums) {\n        sum += i;\n    }\n    return sum;",
  "    // Your code here\n    long sum = 0;\n    for(long i=0; i<nums.size(); i++){\n\
    \        sum = sum + nums[i];\n    }\n    return sum;", "    int n = nums.size();\n\
    \    long ans = std::numeric_limits<long>::min();\n    for(int i = 0; i<n; i++){\n\
    \        long min = std::numeric_limits<long>::max();\n        for(int j=i;j<n;j++){\n\
    \            min = std::min(min,nums[j]);\n        }\n        ans = std::min(ans,min);\n\
    \    }\n    return ans;", "    std::vector<long> temp(nums.size());\n    long\
    \ sum = 0;\n    for(int i = 0; i < nums.size(); i++){\n        sum+=nums[i];\n\
    \        temp[i] = nums[i];\n    }\n    long min = sum;\n    for(int i = 0; i\
    \ < nums.size(); i++){\n        sum-=temp[i];\n        if(sum<min){\n        \
    \    min = sum;\n        }\n    }\n    return min;", "    // write your code here\n\
    \    long ans = std::numeric_limits<long>::max();\n    for (auto &num: nums) {\n\
    \        ans = std::min(ans, num + num + num + num + num);\n    }\n    return\
    \ ans;", "  assert(nums.size() > 0);\n  int len = nums.size();\n  std::vector<long>\
    \ minSum;\n  minSum.resize(len);\n  long min = std::numeric_limits<long>::max();\n\
    \  for (int i = 0; i < len; i++) {\n    long currSum = 0;\n    for (int j = 0;\
    \ j < len; j++) {\n      currSum += nums[j];\n      if (currSum < min)\n     \
    \   min = currSum;\n      if (currSum > 0 && currSum < min)\n        minSum[i]\
    \ = currSum;\n    }\n  }\n  long sum = 0;\n  for (int i = 0; i < len; i++) {\n\
    \    if (minSum[i] > sum)\n      sum = minSum[i];\n  }\n  return sum;", "    //\
    \ Your code goes here\n    long sum = 0;\n    for(int i=0;i<nums.size();i++){\n\
    \        sum+=nums[i];\n    }\n    return sum;", "    int ans = nums[0];\n   \
    \ for (size_t i = 1; i < nums.size(); i++) {\n        ans += nums[i];\n    }\n\
    \    return ans;", "  long result = 0;\n  for (int i = 1; i < nums.size(); i++)\
    \ {\n    result = nums[i - 1] + result;\n  }\n  return result;", "    // code\
    \ here\n    std::vector<long> temp;\n    long long minimum=nums[0];\n    for (size_t\
    \ i=0;i<nums.size();i++)\n    {\n        if(minimum>nums[i])\n        {\n    \
    \        temp.clear();\n            minimum=nums[i];\n            temp.push_back(nums[i]);\n\
    \        }\n        else\n        {\n            temp.push_back(nums[i]);\n  \
    \      }\n    }\n    for (size_t i=0;i<temp.size()-1;i++)\n    {\n        if(minimum>temp[i]+temp[i+1])\n\
    \        {\n            minimum=(temp[i]+temp[i+1]);\n        }\n    }\n    return\
    \ minimum;", "  // write your code here\n  std::stack<long> stk; // use stack\
    \ to store the current sum\n  long minSum = std::numeric_limits<long>::max();\
    \ // initialize to max value\n  for (int i = 0; i < nums.size(); i++) {\n    //\
    \ push the current sum onto stack\n    stk.push(nums[i]);\n    while (!stk.empty())\
    \ {\n      long temp = stk.top();\n      stk.pop();\n      if (temp < minSum)\n\
    \        minSum = temp;\n      for (long j : nums) {\n        if (j >= temp)\n\
    \          stk.push(j - temp);\n      }\n    }\n  }\n  return minSum;", "    //\
    \ Write your code here\n    return -1;", "    long ans = std::numeric_limits<long\
    \ long int>::max();\n    int cur_size = nums.size();\n    int cur_max = 0;\n \
    \   for (long i = 0; i < nums.size(); i++) {\n        if (nums[i] > 0) cur_size\
    \ -= 1;\n        if (cur_size == 0) break;\n        if (nums[i] + cur_max < ans)\
    \ ans = nums[i] + cur_max;\n        if (nums[i] + cur_max > 0) cur_max = 0;\n\
    \        if (cur_size > 0) cur_max++;\n    }\n    return ans;", "    long sum\
    \ = nums[0];\n    long minimumSum = nums[0];\n    for (long i = 1; i < nums.size();\
    \ i++) {\n        sum -= nums[i];\n        if (sum < minimumSum) {\n         \
    \   minimumSum = sum;\n        }\n    }\n    return minimumSum;", "  long sum\
    \ = 0;\n  for (long i = 0; i < nums.size(); i++) {\n    sum += nums[i];\n  }\n\
    \  if (sum < 0) sum = 0;\n  long long minSum = sum;\n  for (long i = 0; i < nums.size();\
    \ i++) {\n    if (sum < 0)\n      sum = 0;\n    if (sum < minSum) {\n      sum\
    \ = 0;\n      minSum = sum;\n    }\n    sum += nums[i];\n  }\n  return minSum;",
  "    long sum = 0, min = INT_MAX;\n    long pos = 0;\n    for (long k = 0; k < nums.size();\
    \ k++) {\n        sum += nums[k];\n        if (min > sum) {\n            min =\
    \ sum;\n            pos = k;\n        }\n    }\n    return sum;", "    // Your\
    \ code goes here\n    long sum = 0;\n    long min = INT_MAX;\n    for (auto &elem\
    \ : nums) {\n        if (elem > min)\n            sum += elem - min;\n       \
    \ min = std::min(min, elem);\n    }\n    return sum;", "    std::sort(nums.begin(),\
    \ nums.end());\n    long sum = 0;\n    for (long i = 0; i < nums.size() - 1; i++)\
    \ {\n        sum += nums[i];\n        if (sum > 0) break;\n    }\n    return sum;",
  "    long long sum = 0;\n    for (long long i = 0; i < nums.size(); i++) {\n   \
    \     sum += nums[i];\n        if (sum < 0) {\n            sum = 0;\n        }\n\
    \    }\n    return sum;", "    long minSum = std::numeric_limits<long>::max();\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        long curSum = nums[i];\n\
    \        long min = std::numeric_limits<long>::max();\n        for (long j = i;\
    \ j < nums.size(); j++) {\n            curSum += nums[j];\n            min = std::min(min,\
    \ curSum);\n        }\n        minSum = std::min(minSum, min);\n    }\n    return\
    \ minSum;", "    if (nums.size() == 0) return 0;\n    std::vector<long> temp(nums.size());\n\
    \    std::partial_sum(nums.begin(), nums.end(), temp.begin());\n    long long\
    \ res = std::accumulate(temp.begin(), temp.end(), 0);\n    return res;", "\t//\
    \ Write your code here\n\tassert(nums.size()>0);\n\tlong min=nums[0];\n\tfor(long\
    \ i=0;i<nums.size();i++)\n\t{\n\t\tmin+=nums[i];\n\t}\n\treturn min;", "    //\
    \ Your code here\n    std::vector<long> v;\n    v.reserve(nums.size());\n    for\
    \ (long i : nums) v.push_back(i);\n    long ans = INT_MIN;\n    for (long i =\
    \ 0; i < v.size(); ++i) {\n        long min = v[i];\n        for (long j = i +\
    \ 1; j < v.size(); ++j) {\n            min += v[j];\n            assert(min >=\
    \ 0);\n            if (v[i] >= 0 && v[j] >= 0 && v[j] < min) {\n             \
    \   min = v[j];\n            }\n        }\n        ans = min(ans, min);\n    }\n\
    \    return ans;", "    // Write your code here\n    if (nums.empty()){\n    \
    \    return 0;\n    }\n    long min = nums[0];\n    long max_sum = nums[0];\n\
    \    for (long i : nums){\n        max_sum = std::max(max_sum, i);\n    }\n  \
    \  for (int i = 1;i < nums.size();++i){\n        if (nums[i] - nums[i-1] > 0){\n\
    \            min = std::min(nums[i] - max_sum, min);\n        }\n    }\n    return\
    \ min;", "    if(nums.size() == 0)\n        return 0;\n    long min = INT_MAX;\n\
    \    for(auto i : nums)\n        min = std::min(min, i + minSubArraySum(nums));\n\
    \    return min;", "    // write your code in C++14\n    if (nums.size() == 0)\n\
    \        return 0;\n    long sum = 0;\n    for (long n : nums) {\n        if (n\
    \ >= 0) {\n            sum += n;\n        }\n    }\n    return sum;", "    //\
    \ Write your code here.\n    long min_sum = nums.front();\n    for(long i=1; i<nums.size();\
    \ i++){\n        if(nums[i]+min_sum < nums[i])\n            min_sum = nums[i]+min_sum;\n\
    \    }\n    return min_sum;", "    // Write your code here\n    long sum = 0;\n\
    \    for(long i : nums){\n        sum = sum + i;\n    }\n    return sum;", " \
    \   std::set<long> visited;\n    long minSum = 0;\n    long n = nums.size();\n\
    \n    // first pass: find the minimum sum of any non-empty sub-array\n    for\
    \ (long i = 0; i < n; i++) {\n        if (visited.find(nums[i]) != visited.end())\
    \ {\n            continue;\n        }\n        visited.insert(nums[i]);\n    \
    \    minSum = std::min(minSum, nums[i]);\n        long curSum = nums[i] - minSum;\n\
    \        for (long j = i + 1; j < n; j++) {\n            if (visited.find(nums[j])\
    \ != visited.end()) {\n                continue;\n            }\n            visited.insert(nums[j]);\n\
    \            minSum = std::min(minSum, nums[j] - curSum);\n        }\n    }\n\n\
    \    return minSum;", "    long minSum = std::numeric_limits<long int>::max();\n\
    \    long start = 0;\n    long end = nums.size() - 1;\n    while (start < end)\
    \ {\n        if (nums[start] + nums[end] < minSum) {\n            minSum = nums[start]\
    \ + nums[end];\n        }\n        start += 1;\n        end -= 1;\n    }\n   \
    \ return minSum;", "  long ans = nums[0];\n  for (size_t i = 1; i < nums.size();\
    \ ++i) {\n    ans = std::min(ans + nums[i], nums[i]);\n  }\n  return ans;", '    //
    Complete this function', "  std::stack<long> stk;\n  long ans = 0;\n  long sum\
    \ = nums[0];\n  for (int i = 0; i < nums.size(); i++)\n    sum += nums[i];\n \
    \ stk.push(sum);\n  while (!stk.empty()) {\n    sum = stk.top();\n    stk.pop();\n\
    \    for (int i = 0; i < nums.size(); i++) {\n      if (sum - nums[i] > 0) \n\
    \        stk.push(sum - nums[i]);\n    }\n    if (stk.top() > ans) ans = stk.top();\n\
    \  }\n  return ans;", "    long res = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        // O(n) time and O(1) space\n        for (long j = i + 1; j\
    \ < nums.size(); j++) {\n            long tmp = nums[i] + nums[j];\n         \
    \   // O(1) time and O(1) space\n            if (tmp < res) {\n              \
    \  res = tmp;\n            }\n        }\n    }\n    return res;", "    long sum\
    \ = 0;\n    long minSum = std::numeric_limits<long>::max();\n    for (long i =\
    \ 0; i < nums.size(); i++)\n    {\n        sum += nums[i];\n        if (sum <\
    \ minSum)\n        {\n            minSum = sum;\n        }\n    }\n    return\
    \ minSum;", "    //using std libray array and vector\n    long min = 0, sum =\
    \ 0;\n    //iterating over array and saving current sum into min\n    for (auto\
    \ &e : nums) {\n        sum += e;\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;", "    // Write your code here\n   \
    \ if(nums.empty()) {\n        return 0;\n    }\n    \n    long min_sum = 0;\n\
    \    for(long i=0; i<nums.size(); i++){\n        if(min_sum == 0 && i > 0){\n\
    \            auto prev = nums[i - 1];\n            min_sum += prev;\n        }\n\
    \        if(nums[i] < 0){\n            long curr = -nums[i];\n            min_sum\
    \ += curr;\n        } else {\n            long curr = nums[i];\n            min_sum\
    \ += curr;\n        }\n    }\n    return min_sum;", "    if(nums.empty())\n  \
    \      return 0;\n    long ans = INT_MIN;\n    for(long i = 0; i < nums.size();\
    \ i++)\n        ans = min(ans, nums[i] + minSubArraySum(nums.substr(i+1)));\n\
    \    return ans;", "    // O(N log(N)) using binary search\n    int low = 0, high\
    \ = nums.size() - 1;\n    while (low <= high) {\n        int mid = (low + high)\
    \ / 2;\n        int left = nums[mid];\n        int right = nums[mid + 1];\n  \
    \      if (left <= right) {\n            return left + right + minSubArraySum(nums.subvector(1,\
    \ mid + 1));\n        } else {\n            if (left > right)\n              \
    \  return right;\n            else\n                low = mid + 1;\n        }\n\
    \    }\n    return nums.back();", "    if(nums.empty())\n        return 0;\n \
    \   long n = nums.size();\n    // This stores min{a[0],a[1],...,a[n-1]}\n    long\
    \ min = nums[0];\n    for(long i = 1; i < n; i++){\n        if(nums[i] < min)\n\
    \            min = nums[i];\n    }\n    // This stores sum{a[0],a[1],...,a[n-1]}\n\
    \    long sum = 0;\n    for(long i = 1; i < n; i++){\n        sum += nums[i];\n\
    \        if(sum < min)\n            min = sum;\n    }\n    return min;", "  //\
    \ Write your code here\n  std::vector<std::list<long>> numsArray;\n  long sum;\n\
    \  long minSum = std::numeric_limits<long>::max();\n  for (long i : nums) {\n\
    \    sum += i;\n    if (numsArray.find(sum) == numsArray.end()) {\n      numsArray.emplace_back(i);\n\
    \    } else {\n      numsArray[sum].push_back(i);\n    }\n    if (sum < minSum)\
    \ {\n      minSum = sum;\n    }\n  }\n  // Return the minimum sum\n  return minSum;",
  "    assert(nums.size() != 0);\n    int len = nums.size();\n    // We are going\
    \ to use the binary search and find the sum\n    // We will maintain two arrays,\
    \ one with sum at the end\n    // and other with index at the end\n    // After\
    \ searching the sum at the end, we will return the index\n    // and continue\
    \ our search with the other array from there\n    std::vector<int> sums(len),\
    \ indexes(len), low = 0, high = len - 1;\n    long ans = nums[0];\n    for (int\
    \ i = 0; i < len; i++) {\n        // search in the sums array\n        long sum\
    \ = sums[i];\n        int idx = indexes[i];\n        int mid = low + (high - low)\
    \ / 2;\n        if (sum > nums[mid])\n            high = mid - 1;\n        else\
    \ if (sum < nums[mid])\n            low = idx + 1;\n        else\n           \
    \ low = idx;\n        sums[idx] = sum;\n        indexes[idx] = idx;\n    }\n\n\
    \    while (low != high) {\n        long sum = sums[low];\n        int idx = indexes[low];\n\
    \        int mid = low + (high - low) / 2;\n        if (sum < nums[mid])\n   \
    \         high = mid - 1;\n        else if (sum > nums[mid])\n            low\
    \ = idx + 1;\n        else\n            low = idx;\n        sums[idx] = sum;\n\
    \        indexes[idx] = idx;\n    }\n    long cur = sums[low];\n    int curIdx\
    \ = indexes[low];\n    for (int i = 1; i < len; i++) {\n        long sum = sums[curIdx];\n\
    \        int idx = indexes[curIdx];\n        int mid = curIdx + (curIdx - cur)\
    \ / 2;\n        if (sum < nums[mid])\n            cur = mid;\n        else if\
    \ (sum > nums[mid])\n            curIdx = idx + 1;\n        else\n           \
    \ curIdx = idx;\n        sums[idx] = sum;\n        indexes[idx] = idx;\n    }\n\
    \    return cur;", "    long result=INT_MIN;\n    std::vector<long> numsSubArray(nums.size());\n\
    \    for(long i=0; i<nums.size(); i++)\n    {\n        numsSubArray[i]=nums[i];\
    \ \n    }\n    for(int i=nums.size()-1;i>0;i--)\n    {\n        for(int j=i+1;j<nums.size();j++)\n\
    \        {\n            if(numsSubArray[i]+numsSubArray[j]<result)\n         \
    \       result=numsSubArray[i]+numsSubArray[j];\n        }\n    }\n    return\
    \ result;", "    // Write your code here\n    int n = nums.size();\n    long long\
    \ int min = LONG_MAX;\n    for(int i = 0; i < (int) nums.size(); i++)\n    {\n\
    \        for(int j = i; j < n; j++)\n        {\n            if(nums[j] < nums[i])\n\
    \            {\n                long long int temp = nums[j];\n              \
    \  nums[j] = nums[i];\n                nums[i] = temp;\n            }\n      \
    \  }\n        long long int curr = nums[i];\n        min = curr < min ? curr :\
    \ min;\n    }\n    return min;", "    // Your code here\n    long min_so_far =\
    \ nums[0];\n    for(size_t i = 1 ; i < nums.size() ; i++) {\n        if(nums[i]\
    \ < 0)\n            return nums[0];\n        if(min_so_far + nums[i] < min_so_far)\n\
    \            min_so_far = min_so_far + nums[i];\n    }\n    return min_so_far;",
  "    long long min = INT_MAX;\n    long long max_sum = INT_MAX;\n\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        long long curr_sum = nums[i];\n    \
    \    if (curr_sum > max_sum) {\n            max_sum = curr_sum;\n        } else\
    \ if (curr_sum < min) {\n            min = curr_sum;\n        }\n    }\n    return\
    \ min;", "  std::vector<long> v;\n  std::vector<long> sums;\n  std::vector<bool>\
    \ visited(nums.size(), false);\n  std::map<long, long> minsum;\n  for (long i\
    \ = 0; i < nums.size(); ++i) {\n    if (!visited[i]) {\n      sums.push_back(0);\n\
    \      minsum.insert(std::pair<long, long>(nums[i], 0));\n      v.push_back(nums[i]);\n\
    \    }\n  }\n  for (size_t i = 0; i < v.size() - 1; ++i) {\n    while (sums[i]\
    \ < minsum[v[i]] + v[i + 1]) {\n      sums[i]++;\n      minsum[v[i]] += v[i +\
    \ 1];\n    }\n  }\n  return minsum.begin()->second;", "    // Your code here\n\
    \    assert(nums.size() > 0);\n    long ans = 0, currMin = nums[0];\n    for (size_t\
    \ i = 1; i < nums.size(); i++) {\n        if (currMin > nums[i]) {\n         \
    \   currMin = nums[i];\n        }\n        ans = min(ans, currMin + nums[i]);\n\
    \    }\n    return ans;", "    assert(nums.size() > 0);\n    long ans = std::numeric_limits<long>::max();\n\
    \    std::vector<long> dp;\n    dp.push_back(0);\n    dp.push_back(1);\n    long\
    \ start = 0;\n    for (long i = 1; i < nums.size(); i++) {\n        if (nums[i]\
    \ > 0)\n            ans = std::min(ans, dp[i] + nums[i]);\n        dp.push_back(dp[i]\
    \ + nums[i]);\n        if (dp[i] < ans)\n            start = i;\n    }\n    return\
    \ ans;", "    std::sort(nums.begin(), nums.end());\n\n    long long minSum = nums[0];\n\
    \    for (int i = 1; i < nums.size(); i++) {\n        long long curSum = nums[i]\
    \ + nums[i - 1];\n        minSum = std::min(minSum, curSum);\n    }\n\n    return\
    \ minSum;", "\tassert(nums.size() > 0);\n\tlong ans = nums[0];\n\tfor (size_t\
    \ i = 1; i < nums.size(); i++) {\n\t\tans = std::min(ans, nums[i] + minSubArraySum(nums.subvector(i)));\n\
    \t}\n\treturn ans;", "    long ans = std::numeric_limits<long>::max();\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        long sum = 0;\n        for (long\
    \ j = 0; j < nums.size(); j++) {\n            if (nums[j] == nums[i])\n      \
    \          sum += j;\n        }\n        if (sum < ans)\n            ans = sum;\n\
    \    }\n    return ans;", "  assert(nums.size() > 0);\n  long ans = nums[0];\n\
    \  for (long i = 1; i < nums.size(); i++) {\n    long cur = nums[i] + nums[i -\
    \ 1];\n    ans = std::min(ans, cur);\n  }\n  return ans;", "    int n = nums.size();\n\
    \    long minSum = std::numeric_limits<long>::max();\n    int minSumIndex = 0;\n\
    \    for (int i = 1; i < n; i++) {\n        minSum = std::min(minSum, nums[i]\
    \ + nums[i - 1]);\n        if (minSum < 0) {\n            minSum = std::numeric_limits<long>::max();\n\
    \            minSumIndex = 0;\n        }\n        minSumIndex++;\n    }\n    return\
    \ minSum;", "  long result = INT_MIN;\n  long sub_array_sum = 0;\n  for (std::size_t\
    \ i = 0; i < nums.size(); i++) {\n    for (std::size_t j = i + 1; j < nums.size();\
    \ j++) {\n      sub_array_sum += nums[j];\n      if (sub_array_sum < 0) sub_array_sum\
    \ = 0;\n      if (sub_array_sum == 0) continue;\n      if (result > sub_array_sum)\
    \ result = sub_array_sum;\n    }\n  }\n  return result;", "    // your code here\n\
    \    long sum = 0;\n    int size = nums.size();\n    for (int i = 0; i < size\
    \ - 1; i++) {\n        for (int j = i + 1; j < size; j++) {\n            sum +=\
    \ nums[j];\n        }\n    }\n    return sum;", "    long min = INT_MIN;\n   \
    \ long sum = 0;\n\n    for (int i = 0; i < nums.size(); i++) {\n        // For\
    \ every element in the sub-array, add it to the sum\n        sum += nums[i];\n\
    \n        // If sum is less than min\n        if (sum < min) {\n            //\
    \ Update min and sum\n            min = sum;\n        }\n    }\n\n    return min;",
  "    long min = std::numeric_limits<long>::max();\n    long curr_sum = 0;\n    for\
    \ (long i : nums) {\n        curr_sum += i;\n        if (curr_sum < min) {\n \
    \           min = curr_sum;\n        }\n    }\n    return min;", "\tstd::vector<long>\
    \ subArray;\n\tsubArray.resize(nums.size());\n\tfor(long i = 0; i < nums.size();\
    \ ++i)\n\t\tsubArray[i] = nums[i];\n\tlong min = std::numeric_limits<long>::max();\n\
    \tlong sum = 0;\n\tfor(int i = 0; i < nums.size(); ++i) {\n\t\tsum += subArray[i];\n\
    \t\tif(sum < min)\n\t\t\tmin = sum;\n\t\tsubArray[i] = 0;\n\t}\n\treturn min;",
  "    // code here\n    long sum = 0;\n    long min = std::numeric_limits<long>::max();\n\
    \    for (auto &n : nums) {\n        sum += n;\n        if (sum < min) {\n   \
    \         min = sum;\n        }\n    }\n    return min;", "    // Write your code\
    \ here\n    long min = std::numeric_limits<long>::max();\n    for (long i = 0;\
    \ i < nums.size(); i++)\n    {\n        long sum = 0;\n        for(long j=i; j<nums.size();\
    \ j++)\n        {\n            sum+=nums[j];\n            if(sum<min)\n      \
    \      {\n                min = sum;\n            }\n        }\n    }\n    return\
    \ min;", "    std::stack<int> stack_nums;\n    long long min_sub_array = 0;\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        stack_nums.push(nums[i]);\n\
    \        if (stack_nums.size() >= 2) {\n            int curr_sum = stack_nums.top()\
    \ + stack_nums.top();\n            stack_nums.pop();\n            int next_sum\
    \ = stack_nums.top() + stack_nums.top();\n            stack_nums.pop();\n    \
    \        min_sub_array = min(min_sub_array, next_sum - curr_sum);\n        }\n\
    \    }\n    return min_sub_array;", "    long min_sum = LONG_MAX;\n    int n =\
    \ nums.size();\n    for(int i = 0; i < n; i++)\n    {\n        long sub_sum =\
    \ 0;\n        for(int j = i; j < n; j++)\n            sub_sum += nums[j];\n  \
    \      if(min_sum < sub_sum)\n            min_sum = sub_sum;\n    }\n    return\
    \ min_sum;", "    // Your code here\n    if(nums.empty()) return 0;\n    long\
    \ ans = nums[0];\n    for(long i = 0; i < nums.size(); i++) {\n        ans = min(ans,\
    \ i + nums[i]);\n    }\n    return ans;", "    assert(nums.size() != 0);\n   \
    \ long minSum = *std::min_element(nums.begin(), nums.end());\n    for (int i =\
    \ 0; i < nums.size(); i++) {\n        minSum -= nums[i];\n        if (minSum <\
    \ 0) {\n            break;\n        }\n    }\n    return minSum;", "    \n   \
    \ long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum +=\
    \ nums[i];\n    }\n    long min_sum = sum;\n    long min_subArraySum = sum;\n\
    \    \n    for (long i = nums.size() - 1; i >= 0; i--) {\n        sum += nums[i];\n\
    \        if (sum < min_subArraySum) {\n            min_subArraySum = sum;\n  \
    \      }\n    }\n    \n    return min_subArraySum;", "    long ans = 0;\n    for\
    \ (long &i : nums) ans += i;\n    std::sort(nums.begin(), nums.end());\n    for\
    \ (long i = nums.size() - 1; i >= 0; i--) {\n        for (long j = i + 1; j <\
    \ nums.size(); j++)\n            ans += nums[j] - nums[i];\n    }\n    return\
    \ ans;", "    long min = std::numeric_limits<long>::max();\n    for (int i = 0;\
    \ i < nums.size(); i++) {\n        long sum = std::accumulate(nums.begin(), nums.begin()\
    \ + i, 0);\n        if (sum < min)\n            min = sum;\n    }\n    return\
    \ min;", "    // Write your code here\n    long sum = std::numeric_limits<long>::min();\n\
    \    long i = 0;\n    for(; i < nums.size(); i++) {\n        if(nums[i] != 0)\
    \ {\n            sum += nums[i];\n        }\n    }\n    return sum;", "    //\
    \ Your code here\n    long long res = 0;\n    for(long long i = 0; i < nums.size();\
    \ i++)\n    {\n        res += nums[i];\n    }\n    return res;", "    std::vector<long>\
    \ vec;\n    for (long &x: nums) vec.push_back(x);\n    \n    std::sort(vec.begin(),\
    \ vec.end());\n\n    long res = 0;\n    for (long &x: vec) res += x;\n\n    return\
    \ res;", "  // Write your code here\n  long ans = INT_MIN;\n  for (size_t i =\
    \ 0; i < nums.size(); ++i) {\n    ans = std::min(ans, nums[i]);\n  }\n  return\
    \ ans;", "    // code here\n    long minSum = 0;\n    long long largestSum = nums[0];\n\
    \    long long sumOfMin = nums[0];\n\n    for (int i = 1; i < nums.size(); i++)\
    \ {\n        largestSum = std::max(largestSum, nums[i]);\n        sumOfMin +=\
    \ nums[i];\n        if (sumOfMin <= minSum) {\n            minSum = sumOfMin;\n\
    \        }\n    }\n\n    return minSum;", "    int min = INT_MAX;\n    int sum\
    \ = INT_MAX;\n    for (auto i : nums) {\n        sum += i;\n        if (sum <\
    \ min) {\n            min = sum;\n        }\n    }\n    return min;", "  int n\
    \ = nums.size();\n  if (n < 2) return 0;\n  long ans = 0;\n  for (int i = 1; i\
    \ < n; i++)\n    ans += nums[i - 1];\n  for (int i = 0; i < n; i++) {\n    ans\
    \ += min(nums[i], ans);\n  }\n  return ans;", "    // Code here\n    std::vector<long>\
    \ nums_copy(nums);\n    // std::reverse(std::begin(nums), std::end(nums));\n \
    \   long min = 0, sum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n    \
    \    for (int j = i + 1; j < nums.size(); j++) {\n            sum += nums_copy[i];\n\
    \            std::swap(nums_copy[j], nums_copy[i]);\n        }\n        min =\
    \ std::min(sum, min);\n    }\n    return min;", "    if(nums.size() ==0)\n   \
    \     return 0;\n    long ans = nums[0];\n    long temp = nums[0];\n    for(long\
    \ i = 0; i < nums.size(); i++)\n    {\n        temp = ans + nums[i];\n       \
    \ ans = temp;\n    }\n    return ans;", "    if (nums.empty())\n        return\
    \ 0;\n\n    long long int sum = 0;\n    long long int k = nums[0];\n    for (long\
    \ long int x : nums)\n        if (x > k)\n            sum += x - k;\n        else\n\
    \            sum -= x - k;\n\n    long long int lt = INT_MAX;\n    for (long long\
    \ int x : nums)\n        if (x < k) {\n            sum += k - x;\n           \
    \ k = x;\n        }\n        else k -= x;\n\n    if (k != 0)\n        sum += k\
    \ - l;\n    return sum;", "    // Write your code here\n    long ans=0,l=nums.size(),s=0;\n\
    \    int i,j;\n    for(i=0;i<l;i++)\n    {\n        for(j=i+1;j<l;j++)\n     \
    \   {\n            ans = min(ans,nums[i]+nums[j]);\n        }\n    }\n    return\
    \ ans;", "    long ans = 0;\n    long prev_sum = std::numeric_limits<long>::max();\n\
    \    long curr_sum = std::numeric_limits<long>::max();\n    for (long num : nums)\
    \ {\n        if (curr_sum - prev_sum < num) {\n            curr_sum = prev_sum\
    \ + num;\n        } else {\n            ans = std::min(ans, curr_sum);\n     \
    \       prev_sum = curr_sum;\n            curr_sum = num;\n        }\n    }\n\
    \    return ans;", '  // code here', "    // Code here\n    long min = std::numeric_limits<long>::min();\n\
    \    long sum = 0;\n    for (long i : nums) {\n        sum += i;\n        if (sum\
    \ < min) {\n            min = sum;\n        }\n    }\n    return min;", "    //\
    \ Write your code here\n    int sum = 0;\n    for(int i=0;i<nums.size();i++){\n\
    \        sum += nums[i];\n    }\n    return sum;", "    long min_sum = INT_MAX;\n\
    \    std::vector<long> sub_arr;\n\n    for (long i = 0; i < nums.size(); i++)\
    \ {\n        sub_arr.push_back(nums[i]);\n        min_sum = std::min(min_sum,\
    \ sub_arr.back());\n    }\n    return min_sum;"]
stop_tokens:
- "\n}"
