name: HumanEval_31_is_prime
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given number\
  \ is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>> is_prime(101)\n\
  // True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n\
  // True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nbool is_prime(long\
  \ n) {\n"
tests: "}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
  \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
  \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
  \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
  \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
  \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
  \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
  \ == (false));\n}\n"
completions: ["    if (n <= 1)\n        return false;\n    long test = 2;\n    while\
    \ (test <= sqrt(n))\n        if (n % test == 0)\n            return false;\n \
    \       test++;\n    return true;", "    if (n <= 1) return false;\n    long div\
    \ = sqrt(n) - 1;\n    if (div == 0) return true;\n    for (long i = 2; i * i <=\
    \ n; ++i) {\n        if (n % i == 0) return false;\n    }\n    return true;",
  "    if (n <= 1) {\n        return false;\n    }\n    // n is odd\n    if (n % 2\
    \ == 0) {\n        return false;\n    }\n    long m = 3;\n    long p = 3;\n  \
    \  while (p <= n) {\n        if (n % p == 0) {\n            return false;\n  \
    \      }\n        p += m;\n        m += 2;\n    }\n    return true;", "    if\
    \ (n == 2 || n == 3)\n        return true;\n    if (n == 1)\n        return false;\n\
    \    if (n % 2 == 0 || n % 3 == 0)\n        return false;\n    long num_four =\
    \ (n * 6) % 4;\n    for (int i = 1; i <= num_four; i += 4)\n        if (n % i\
    \ == 0 || n % (i + 2) == 0)\n            return false;\n    return true;", " \
    \   // Corner case\n    if (n==1 || n==0)\n        return true;\n    \n    //\
    \ Get all the factors of 'n'\n    vector<long> v(n+1);\n    for (long i=2; i<=n;\
    \ i++)\n        if (n%i == 0)\n            v.push_back(i);\n    \n    // If all\
    \ the factors are '1', return 'false'\n    if (v.size()==1)\n        return false;\n\
    \    \n    // If 'n' is greater than or equal to 3, return 'false'\n    if (n\
    \ > 3)\n        return false;\n    \n    // All the factors of 'n' are '2' or\
    \ greater, so the\n    // number is prime if the size of the vector is greater\
    \ than\n    // or equal to two\n    return (v.size()>= 2);", "    if (n == 1)\
    \ {\n        return true;\n    }\n    for (int i = 2; i <= sqrt(n); i++) {\n \
    \       if (n % i == 0) {\n            return false;\n        }\n    }\n    return\
    \ true;", "  if (n == 2) return true;\n  if (n == 1) return false;\n  if (n <=\
    \ 1) return false;\n  int i;\n  if (n % 2 == 0) return false;\n  for(i = 3; i*i\
    \ <= n; i += 2)\n    if(n % i == 0) return false;\n  return true;", "    // Write\
    \ your solution here\n    if(n==1)return false;\n    if(n==2)return true;\n  \
    \  if(n==3)return true;\n    if(n%2==0 || n%3==0 || n%5==0 || n%7==0)return false;\n\
    \    for(long i=5;i*i<=n;i+=2){\n        if(n%i==0 || n%(i+2)==0)return false;\n\
    \    }\n    return true;", "  // Write your code here.\n  // n = 0, 1 or 2\n \
    \ if ((n == 2 || n == 1) && n > 1)\n    return true;\n  if (n > 3)\n    return\
    \ false;\n  for (long i = 5; i * i <= n; i += 6)\n    if (n % i == 0)\n      return\
    \ false;\n  return true;", "    if (n <= 1)\n        return false;\n    else if\
    \ (n <= 3)\n        return true;\n    else if (n % 2 == 0 || n % 3 == 0)\n   \
    \     return false;\n    else if (n % 5 == 0 || n % 7 == 0)\n        return false;\n\
    \    else if (n % 11 == 0)\n        return false;\n    else\n        return true;",
  "    if (n == 0) return false;\n    // Use a sieve of Eratosthenes for primes.\n\
    \    const int N = (int) (sqrt(sqrt(n)));\n    vector<bool> sieve(N + 1);\n  \
    \  for (int p = 2; p <= N; p++) {\n        // Ignore 0 and 1.\n        if (sieve[p])\n\
    \            continue;\n        // Skip over multiples of smaller primes.\n  \
    \      for (int i = 3; i * i <= p; i += 2)\n            if (p % i == 0)\n    \
    \            break;\n        // If i is larger than sqrt(n), then n is not a prime.\n\
    \        if (i > sqrt(n))\n            return false;\n        // Mark the multiples\
    \ of i as not prime.\n        for (int j = i * i; j < N; j += i)\n           \
    \ sieve[j] = false;\n    }\n    // All numbers in the range [3,n] are prime.\n\
    \    return (n == 3);", "  // Only need to test for 1 and itself to take care\
    \ of the odd numbers,\n  // which do not have an easy Miller-Rabin test for primality\n\
    \  if (n == 1) return false;\n  if (n == 2 || n == 3) return true;\n  // If we\
    \ got here, we're not prime\n  // Test for divisibility by all primes less than\
    \ or equal to sqrt(n)\n  // inclusive\n  for (long i = 4; i <= n / i; i += 2)\
    \ {\n    if (n % i == 0) return false;\n  }\n  return true;", "    // Return false\
    \ if n is less than 1.\n    if (n <= 1) return false;\n    // All even numbers\
    \ are composites.\n    if (n % 2 == 0) return false;\n    // Try dividing by primes\
    \ up to sqrt(n).\n    long a = 2, b = 3, n2;\n    while (1) {\n        if ((n\
    \ % b) == 0) return false;\n        n2 = b - a;\n        if (n2 >= n) break;\n\
    \        b += a;\n        a += 2;\n    }\n    return true;", "    // Write your\
    \ code here.\n    // Your code here\n    long max = (std::sqrt(n)+1)/2;\n    for(int\
    \ i = 2; i<= max; i++) {\n        if(n%i==0)\n            return false;\n    }\n\
    \    return true;", "  if (n == 1) return false;\n  if (n <= 2) return true;\n\
    \  for (long i = 3; i <= n / i; i += i)\n    if (n % i == 0) return false;\n \
    \ return true;", "    if (n == 1) return false;\n    long d = sqrt(n);\n    long\
    \ r = 2;\n    while (r < d) {\n        if (n % r == 0) {\n            return false;\n\
    \        }\n        r <<= 1;\n    }\n    return true;", "  // Use only odd numbers\
    \ for primality test\n  if (n % 2 == 0)\n    return false;\n  // All even numbers\
    \ are composite\n  if (n <= 3)\n    return true;\n  // Test for divisibility by\
    \ 2 and 3\n  // If remainder is 0 then n is composite\n  // If remainder is 1\
    \ then n is not prime\n  int rem = n % 6;\n  if (rem == 0)\n    return false;\n\
    \  rem = n % 7;\n  if (rem == 0)\n    return false;\n  // All odd numbers are\
    \ composite\n  return true;", "    if (n < 2) return false;\n    if (n == 2) return\
    \ true;\n    // Skip even numbers.\n    for (long i = 2; i <= n / i; ++i) {\n\
    \        if (n % i == 0) return false;\n    }\n    return true;", "    if (n <=\
    \ 1)\n        return false;\n    if (n == 2)\n        return true;\n    if (n\
    \ % 2 == 0)\n        return false;\n    for (int i = 3; i * i <= n; i += 2)\n\
    \        if (n % i == 0)\n            return false;\n    return true;", "  if\
    \ (n < 2)\n    return false;\n  if (n == 2 || n == 3) {\n    return true;\n  }\n\
    \  for (long i = 5; i <= n / i; i++) {\n    if (n % i == 0)\n      return false;\n\
    \  }\n  return true;", "    if (n <= 1) {\n        return false;\n    }\n    if\
    \ (n % 2 == 0) {\n        return false;\n    }\n    for (long m = 2; m <= sqrt(n);\
    \ m += 2) {\n        if (n % m == 0) {\n            return false;\n        }\n\
    \    }\n    return true;", "    long limit = sqrt(n);\n    for (long i = 2; i\
    \ <= limit; i++) {\n        if (n % i == 0) {\n            return false;\n   \
    \     }\n    }\n    return true;", "  if (n <= 1) return false;\n  for (int i\
    \ = 2; i <= n / i; ++i) {\n    if (n % i == 0) return false;\n  }\n  return true;",
  "  // Write your code here\n  assert(!(n==0));\n  if(n <= 1) return false;\n  long\
    \ sq = sqrt(n);\n  if(sq == 1) return false;\n  long nm = n/sq;\n  for(long i\
    \ = 2; i <= sq; ++i)\n    if(n % i == 0) return false;\n  if(nm == n) return true;\n\
    \  return false;", "\t// Check for trivial cases\n\tif (n < 2) return false;\n\
    \tif (n == 2) return true;\n\t// Check if n is prime\n\tlong s = sqrt(n) + 1;\n\
    \tfor (int i = 3; i <= s; i += 2)\n\t\tif (n % i == 0) return false;\n\treturn\
    \ true;", "  int count;\n  if (n <= 1)\n    return false;\n  for (count = 2; count\
    \ < n; count++) {\n    if (n % count == 0) {\n      return false;\n    }\n  }\n\
    \  return true;", "    if(n <= 1)\n        return false;\n    if(n <= 3)\n   \
    \     return true;\n    // Check only odd numbers.\n    for(long i = 2; i < n/2;\
    \ ++i) {\n        if(n%i == 0)\n            return false;\n    }\n    return true;",
  "\t// Write your code here.\n\tassert(n < LONG_MAX && n >= 1);\n\tlong m = n;\n\t\
    for (long i = 2; i <= m / i; i++) {\n\t\tif (n % i == 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;", "    if (n == 2)\n        return true;\n    if (n\
    \ % 2 == 0)\n        return false;\n    int k = 3;\n    for (int i = 3; i * k\
    \ <= n; i += 2)\n        if (n % i == 0)\n            return false;\n    return\
    \ true;", "  if (n < 2)\n    return false;\n  if (n == 2)\n    return true;\n\
    \  if (n % 2 == 0)\n    return false;\n  int sqrt_n = sqrt(n);\n  long limit =\
    \ sqrt_n * 2;\n  long max_check = sqrt_n;\n  for (long check = 2; check < limit;\
    \ check += 2)\n    if (n % check == 0)\n      return false;\n  return true;",
  "\tvector<bool> v(n+1, true);\n\tlong a = 2, b = 3;\n\twhile (a < n) {\n\t\tfor\
    \ (long i = 0; i <= n; i+=b) {\n\t\t\tif (a%b == 0) {\n\t\t\t\tv[i] = false;\n\
    \t\t\t}\n\t\t\telse {\n\t\t\t\tlong m = (a*b) / b;\n\t\t\t\tv[i] = true;\n\t\t\
    \t\tfor (long j = m+1; j<=n; j+=b)\n\t\t\t\t\tif (j%b == 0) {\n\t\t\t\t\t\tv[j]\
    \ = false;\n\t\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tb += a;\n\t\ta +=\
    \ 1;\n\t}\n\treturn v[n];", "    if (n <= 1) return false;\n    // Set is_prime\
    \ to false for numbers that are less than two.\n    bool is_prime = false;\n \
    \   // Test only the even numbers up to sqrt(n).\n    for (int i = 2; i < sqrt(n);\
    \ i += 2)\n        if (n % i == 0)\n            is_prime = false;\n    // Test\
    \ all odd numbers up to sqrt(n).\n    for (int i = 3; i * i <= n; i += 2)\n  \
    \      if (n % i == 0)\n            is_prime = true;\n    return is_prime;", " \
    \   if (n <= 2) return false;\n    if (n % 2 == 0 || n == 2) return false;\n \
    \   for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0 || n == i) return\
    \ false;\n    return true;", "    if (n < 2)\n        return false;\n    // We\
    \ check only odd numbers here.\n    // The number 2 is the only even prime.\n\
    \    if (n % 2 == 0)\n        return false;\n    // All other numbers are either\
    \ 1 or 3.\n    for (long i = 5; i <= n; i += 2)\n        if (n % i == 0)\n   \
    \         return false;\n    return true;", "    if (n < 2)\n        return false;\n\
    \    if (n <= 3 && n != 2)\n        return true;\n    long counter = 2;\n    while\
    \ (counter < n) {\n        if (n % counter == 0)\n            return false;\n\
    \        counter++;\n    }\n    return true;", "    if (n < 2) return false;\n\
    \    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long sqr\
    \ = sqrt(n);\n    for (int i = 3; i <= sqr; i += 2) {\n        if (n % i == 0)\
    \ {\n            return false;\n        }\n    }\n    return true;", "    int\
    \ i = 2;\n    while (i <= sqrt(n)) {\n        if (n % i == 0) {\n            return\
    \ false;\n        }\n        i++;\n    }\n    return true;", "\tif (n <= 1)\n\t\
    \treturn false;\n\tlong m = sqrt(n);\n\tlong limit = 1;\n\tfor (long i = 2; i\
    \ <= m; i++) {\n\t\tlong flag = 0;\n\t\tfor (long j = 2; j <= i; j++) {\n\t\t\t\
    if (i % j == 0) {\n\t\t\t\tflag = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (flag\
    \ == 1)\n\t\t\tlimit++;\n\t}\n\tif (n < limit * limit)\n\t\treturn false;\n\t\
    else\n\t\treturn true;", "\tlong i = 2;\n\t// If n is 2, then only return true\
    \ if the number is not prime.\n\tif (n == 2)\n\t\treturn !((n % 2) == 0);\n\t\n\
    \t// If n is 1, then only return true if n is not prime.\n\tif (n == 1)\n\t\t\
    return ((n%2)==0);\n\t\n\twhile(i <= sqrt(n))\n\t{\n\t\tif((n % i) == 0)\n\t\t\
    \treturn false;\n\t\ti++;\n\t}\n\treturn true;", "\t// if n is prime then return\
    \ true, otherwise return false\n\tif (n == 1 || n == 2)\n\t\treturn true;\n\t\
    for (int i = 3; i <= sqrt(n); i += 2)\n\t\tif (n % i == 0)\n\t\t\treturn false;\n\
    \treturn true;", "    if (n < 2 || n%2 == 0) return false;\n    int i = 3;\n \
    \   while (i <= sqrt(n)) {\n        if (n%i == 0) return false;\n        i +=\
    \ 2;\n    }\n    return true;", "  if (n == 1)\n    return false;\n  long d =\
    \ 3;\n  long q = n - 1;\n  while (q > 0) {\n    long r = n%d;\n    if (r == 0)\n\
    \      return false;\n    d += 2;\n    q--;\n  }\n  return true;", "    long i=2;\n\
    \    while(i<=sqrt(n))\n        if(n%i==0)\n            return false;\n      \
    \  i++;\n    return true;", "    if (n < 2) return false;\n    if (n == 2) return\
    \ true;\n    // Sieve of Eratosthenes -- http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n\
    \    long i = 2;\n    // We need to check only up to the sqrt(n) number\n    for\
    \ (long x = sqrt(n), xx = 2; x * x <= n; xx = xx + x, x = x / 2) {\n        if\
    \ (n % x == 0) return false;\n    }\n    return true;", "\tif (n == 2) return\
    \ true;\n\tif (n % 2 == 0) return false;\n\tfor (int i = 3; i < n; i+=2) {\n\t\
    \tif (n % i == 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;", "    if\
    \ (n<2)return false;\n    long m = (long) sqrt(n);\n    if (m>2)return false;\n\
    \    if (n%2==0)return false;\n    for (long i=3; i<=m; i+=2){\n        if (n%i==0)return\
    \ false;\n    }\n    return true;", "    assert(n >= 2 && n <= 2);\n    int a\
    \ = 3, b = 2, c = 2;\n    long p = n;\n    while ((p & 1) == 0) {\n        p >>=\
    \ 1;\n        ++a;\n    }\n    while (a < n / 2) {\n        if (p % a == 0) {\n\
    \            p /= a;\n            ++b;\n        }\n        ++a;\n    }\n    while\
    \ (p > 1) {\n        if (p % b == 0) {\n            p /= b;\n            ++c;\n\
    \        }\n        --b;\n    }\n    return (c == 1);", "    if (n <= 1) return\
    \ false;\n    int i = 4;\n    while (i < n) i = i * 3 + 1;\n    if (n <= 3) return\
    \ true;\n    for (long i = 1; i <= n; i++) {\n        if (n % i == 0) return false;\n\
    \    }\n    return true;", "  if (n <= 1)\n    return false;\n  if (n == 2)\n\
    \    return true;\n  int count = 0;\n  long square = sqrt(n);\n  for (int i =\
    \ 2; i <= square; i++)\n    if (n % i == 0) {\n      count++;\n      if (count\
    \ == 2)\n        return true;\n    }\n  return false;", "  if (n <= 1)\n    return\
    \ false;\n  // check if n is divisible by 2 or 3\n  if (n & 1)\n    return false;\n\
    \  int counter = 2;\n  while (counter < n / 3) {\n    if (n % counter == 0)\n\
    \      return false;\n    counter += 2;\n  }\n  return true;", "    if (n <= 1)\
    \ return false;\n    long sqr = sqrt(n);\n    for (long i = 1; i <= sqr; i++)\
    \ {\n        if (n % i == 0) return false;\n    }\n    return true;", "    if\
    \ (n <= 1) {\n        return false;\n    }\n    long max = (long) sqrt(n);\n \
    \   long i;\n    for (i = 2; i <= max; ++i) {\n        if (n % i == 0) {\n   \
    \         return false;\n        }\n    }\n    return true;", "  int i = 2;\n\
    \  for (; i <= n/i; i++)\n    if ((n % i) == 0)\n      return false;\n  return\
    \ true;", "  // Check if n is prime\n  if (n == 2) return true;\n  // Check if\
    \ n is divisible by 2, 3 or 5\n  if (n % 2 == 0) return (n % 3 == 0 || n % 5 ==\
    \ 0);\n  // Check if the number is divisible by 3\n  if (n % 3 == 0) return true;\n\
    \  // Check if n is divisible by 5\n  if (n % 5 == 0) return true;\n\n  // If\
    \ n is divisible by 2, 3 or 5, then it is not prime\n  return false;", "    if\
    \ (n == 0 || n == 1)\n        return true;\n    if (n % 2 == 0) {\n        return\
    \ false;\n    }\n    long m = n / 2;\n    long b = 1;\n    long r = 2;\n    while\
    \ (r < m) {\n        if (n % r == 0) {\n            b = 1;\n            break;\n\
    \        }\n        r += b;\n        b++;\n    }\n    if (r != m) {\n        return\
    \ false;\n    }\n    while (b < 64) {\n        if (n % b == 0) {\n           \
    \ b = 2;\n            break;\n        }\n        b += 2;\n    }\n    if (b > 64)\n\
    \        return false;\n    return true;", "    long max = (long long) sqrt(n);\n\
    \    for(long i = 2; i < max; i++) {\n        if(n % i == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;", "    assert(n >= 2);\n    long\
    \ i, limit = sqrt(n);\n    if (limit < 2) return false;\n    if (n <= 1) return\
    \ false;\n    for (i = 2; i <= limit; ++i)\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    return true;", "    // Base case 1: If n\
    \ is 1, return True.\n    if (n <= 1)\n        return true;\n\n    // Base case\
    \ 2: If n is  prime, return True.\n    if (n <= 3)\n        return false;\n\n\
    \    // Test each number from 3 to sqrt(n).\n    // If n is divisible by any number\
    \ between 3 and sqrt(n),\n    // then n is prime.\n    for (int i = 3; i * i <=\
    \ n; i += 2) {\n        if (n % i == 0)\n            return false;\n    }\n\n\
    \    // If n is divisible by 2, then n is prime.\n    if (n % 2 == 0)\n      \
    \  return true;\n\n    // If n is divisible by 3, then n is prime.\n    if (n\
    \ % 3 == 0)\n        return true;\n\n    // If n is divisible by 5, then n is\
    \ prime.\n    if (n % 5 == 0)\n        return true;\n\n    // If n is divisible\
    \ by 7, then n is prime.\n    if (n % 7 == 0)\n        return true;\n\n    //\
    \ If n is divisible by 11, then n is prime.\n    if (n % 11 == 0)\n        return\
    \ true;\n\n    // If n is divisible by 13, then n is prime.\n    if (n % 13 ==\
    \ 0)\n        return true;\n\n    // If n is divisible by 17, then n is prime.\n\
    \    if (n % 17 == 0)\n        return true;\n\n    // If n is divisible by 19,\
    \ then n is prime.\n    if (n % 19 == 0)\n        return true;\n\n    // If n\
    \ is divisible by by 111, then n is prime.\n    if (n % 111 == 0)\n        return\
    \ true;\n\n    // If n is divisible by 131, then n is prime.\n    if (n % 131\
    \ == 0)\n        return true;\n\n    // If n is divisible by 137, then n is prime.\n\
    \    if (n % 137 == 0)\n        return true;\n\n    // If n is divisible by 139,\
    \ then n is prime.\n    if (n % 139 == 0)\n        return true;\n\n    // If n\
    \ is divisible by 149, then n is prime.\n    if (n % 149 == 0)\n        return\
    \ true;\n\n    // If n is divisible by 151, then n is prime.\n    if (n % 151\
    \ == 0)\n        return true;\n\n    // If n is divisible by 157, then n is prime.\n\
    \    if (n % 157 == 0)\n        return true;\n\n    // If n is divisible by 163,\
    \ then n is prime.\n    if (n % 163 == 0)\n        return true;\n\n    // If n\
    \ is divisible by 171, then n is prime.\n    if (n % 171 == 0)\n        return\
    \ true;\n\n    // If n is divisible by 177, then n is prime.\n    if (n % 177\
    \ == 0)\n        return true;\n\n    // If n is divisible by 183, then n is prime.\n",
  "  // Only check the factors of 2, 3, 5, and 7.\n  if (n < 3) return n < 5;\n  if\
    \ (n < 7) return n % 2 == 0 || n % 3 == 0;\n  // Check all the odd composites\
    \ up to and including n.\n  for (long i = 5; i * i <= n; i += 6) {\n    if (n\
    \ % i == 0) return false;\n  }\n  return true;", "\tif (n < 2)\n\t\treturn false;\n\
    \tif (n == 2)\n\t\treturn true;\n\t// If n = 3 or 5, then it can't be prime.\n\
    \tbool isDivisible = false;\n\tlong limit = sqrt(n);\n\tfor (int i = 2; i <= limit;\
    \ i++)\n\t\tif (n % i == 0)\n\t\t\tisDivisible = true;\n\treturn !isDivisible;",
  "    // base cases\n    if (n <= 1) return false;\n    if (n == 2) return true;\n\
    \n    // Check if n is divisible by 3\n    if (n % 3 == 0) return false;\n\n \
    \   // Check if n is divisible by 2\n    if (n % 2 == 0) return true;\n\n    //\
    \ Find the highest factor of n\n    // Start by seeing if the number is divisible\
    \ by any numbers up to 10\n    // We can say this a prime because any number up\
    \ to 10 will divide n\n    // If we find any number greater than 10 then we know\
    \ it's not prime\n    for (int i = 4; i <= 9; i++) {\n        if (n % i == 0)\
    \ {\n            return false;\n        }\n    }\n\n    // If we get here, then\
    \ n is not prime\n    return true;", "\t// Base Case\n\tif (n < 2) return false;\n\
    \t// One is not a prime\n\tif (n == 1) return false;\n\t// If even, no primes\n\
    \tif (n % 2 == 0) return false;\n\t// Find number of odd divisors up to n\n\t\
    long m = ((long) sqrt(n) + 1);\n\tfor (int i = 3; i <= m; i += 2) {\n\t\tif (n\
    \ % i == 0) {\n\t\t\treturn false; // Not prime\n\t\t}\n\t}\n\treturn true;",
  "    if (n < 2)\n        return false;\n    for (int i = 2; i <= n; ++i) {\n   \
    \     if (n % i == 0)\n            return false;\n    }\n    return true;", " \
    \   if (n <= 1)\n        return false;\n    else if (n <= 3)\n        return true;\n\
    \    else {\n        long d = 2;\n        long r = n - 1;\n        while (r >\
    \ 0) {\n            if (n % d == 0)\n                return false;\n         \
    \   d = d << 1;\n            r = r - 1;\n        }\n        return true;\n   \
    \ }", "    assert(n > 1);\n    // The number must be odd.\n    // return n & 1\
    \ ==0;\n    // return n > 3 && n & 3==0;\n    return ((n & 1) != 0);", "\tif (n\
    \ == 1) return false;\n\tif (n < 2 || n > 61) return false;\n\t// Use sieve of\
    \ Eratosthenes.\n\tbool prime[1000] = {};\n\tprime[0] = true;\n\tfor (long i =\
    \ 1; i <= n; i++)\n\t\tif (prime[i])\n\t\t\tfor (long j = i * i; j <= n; j +=\
    \ i)\n\t\t\t\tprime[j] = false;\n\treturn prime[n];", "    // First we check if\
    \ the number is prime\n    if (n == 2) return true;\n    if (n%2 == 0) return\
    \ false;\n    // Now we try to find any factor of p * p > n\n    for (long d =\
    \ 2*n; d*d <= n; d += 2)\n        if (n%d == 0) return false;\n    return true;",
  "    // Return false if n is 0 (not a prime number)\n    if (n == 0)\n        return\
    \ false;\n\n    // Write the body of the function.\n    // Use a sieve of Eratosthenes\
    \ to determine if a number n is prime.\n    // The sieve will be an array of bools\
    \ that is one bit per number.\n    // If i is divisible by 2, then the corresponding\
    \ bit in the array will be false.\n    // If i is divisible by 3, then the corresponding\
    \ bit in the array will be false.\n    // If i is divisible by 5, then the corresponding\
    \ bit in the array will be false.\n    // ...\n    // If i is divisible by i,\
    \ then the corresponding bit in the array will be false.\n    // When we have\
    \ determined that the number n is prime, we can safely return true;\n    // Otherwise,\
    \ we will need to check divisibility by all numbers from 2 to the square root\
    \ of n.\n    bool primes[] = { 0 };\n    long n = n;\n    for (int i = 1; i <=\
    \ sqrt(n); i++) {\n        primes[n / i] = true;\n    }\n    // If n is prime,\
    \ then its primeness is already known.\n    // So we don't need to check any numbers.\n\
    \    if (primes[0])\n        return true;\n\n    // We now need to check if n\
    \ is divisible by any number from 2 to the square root of n.\n    // If we find\
    \ any such number, then n is prime and we can return true;\n    for (int i = 1;\
    \ i <= sqrt(n); i++) {\n        if (primes[i])\n            return true;\n   \
    \ }\n    // If we get here, then we couldn't find any divisor greater than the\
    \ square root of n.\n    // We know that n is not prime, so the return value is\
    \ false.\n    return false;", "    // write your code here\n    long int primes\
    \ = 0;\n    for(int i=1; i<n; i++){\n        if(n%i == 0){\n            primes++;\n\
    \        }\n    }\n    return (primes==0);", "\tint j;\n\tassert(n != 0);\n\t\
    if (n < 2)\n\t\treturn false;\n\tfor (j = 2;  j <= n / 2;  j++) {\n\t\tif (n %\
    \ j == 0)\n\t\t\treturn false;\n\t}\n\treturn true;", "\tlong i = 2;\n\tbool prime\
    \ = true;\n\tif (n <= 1) {\n\t\treturn false;\n\t}\n\twhile (i <= sqrt(n)) {\n\
    \t\tif (n % i == 0) {\n\t\t\tprime = false;\n\t\t}\n\t\ti++;\n\t}\n\treturn prime;",
  "  // Assume that the number is divisible by 2 or 3.\n  int a = is_prime(n / 2);\n\
    \  int b = is_prime(n / 3);\n  if (a && b) return true;\n  if (a || b) return\
    \ false;\n  // If n is equal to 2 or 3, we would like to find any odd factor\n\
    \  // that is less or equal to n. Since any odd factor will have\n  // a smaller\
    \ or equal than n, we only need to find factors that\n  // are less than or equal\
    \ to n.\n  long limit = 1;\n  while (limit < n) {\n    if (n % limit == 0) return\
    \ false;\n    limit++;\n  }\n  return true;", "    // Return true if n is prime\
    \ and false otherwise.\n    if (n <= 1) return false;\n    // Check if n is even\
    \ or odd.\n    if (n % 2 == 0 || n == 2) return false;\n    // Check factors up\
    \ to sqrt(n).\n    long limit = (long)sqrt(n);\n    for (long i = 3; i <= limit;\
    \ i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;",
  "    if (n == 1) return false;\n    long i = 2;\n    while (i <= sqrt(n)) {\n  \
    \      if (n % i == 0) return false;\n        ++i;\n    }\n    return true;",
  "    if (n <= 1)\n        return false;\n    if (n <= 3)\n        return true;\n\
    \    if (n % 2 == 0 || n % 3 == 0)\n        return false;\n\n    long m = (n +\
    \ 1) >> 1;\n    for (int i = 3; i * i <= n; i += 2)\n        if (m % i == 0 ||\
    \ n % (i + 2) == 0)\n            return false;\n    return true;", "  if(n ==\
    \ 2)\n    return true;\n  if (n%2 == 0 || n%3 == 0)\n    return false;\n  // If\
    \ n is smaller than 3 then only need to check odd numbers\n  for(int i=5; i*i\
    \ <= n; i += 6) {\n    if(n % i == 0 || n/i == i)\n      return false;\n  }\n\
    \  return true;", "    int sqrtN = sqrt(n);\n    for (int i = 2; i < sqrtN; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;", "    // Write your code here\n    for(int i=2;i*i<=n;i++)\n\
    \    {\n        if(n%i==0)\n        {\n            return false;\n        }\n\
    \    }\n    return true;", "   if (n <= 1) return false;\n   long n_sqr = n*n;\
    \ // n^2\n   for (int i = 0; i*i < n_sqr; i++) {\n      if (n%i == 0)\n      \
    \   return false;\n   }\n   return true;", "    if (n < 2)\n        return false;\n\
    \n    // All even numbers have an obvious divisor, so only check the odd numbers\
    \ for primality\n    for (long k = 1; k <= (n >> 1); k++) {\n        if (n % k\
    \ == 0) {\n            return false;\n        }\n    }\n    return true;", " \
    \  if (n == 1)\n      return false;\n   // Use Sieve of Eratosthenes method to\
    \ compute prime numbers. \n   // It can guarantee O(sqrt(n)) \n   long m = sqrt(n+1);\n\
    \   std::vector<long> primes(m+1, 0);\n   primes[0] = 1;\n   for (int i = 2; i\
    \ <= m; ++i) {\n      if (primes[i] != 0)\n         continue;\n      for (int\
    \ j = i*i; j <= n; j += i) {\n         primes[j] = 1;\n      }\n   }\n   for (int\
    \ i = 2; i <= n; ++i) {\n      if (primes[i] == 0)\n         return false;\n \
    \  }\n   return true;", "  // We want to start our search at sqrt(n).\n  // Primality\
    \ testing relies on the fact that we\n  // know that we are at least as big as\
    \ sqrt(n).\n  // So we only have to test up to sqrt(n) candidates.\n  // As soon\
    \ as we find a factor > sqrt(n) we know it's prime.\n  // If we found a factor\
    \ less than sqrt(n), then it probably\n  // isn't prime and we can immediately\
    \ return false.\n  long factor = 1;\n  long test = sqrt(n);\n  while (test <=\
    \ n) {\n    // Check if the current number is divisible by any number\n    //\
    \ from 2 to sqrt(n), inclusive.\n    if (n % test == 0) {\n      return false;\n\
    \    }\n    // If n is not divisible by any number from\n    // 2 to sqrt(n),\
    \ then n is prime.\n    factor++;\n    test = sqrt(n);\n  }\n  // If we reached\
    \ here, then we checked out every candidate,\n  // and found that the number is\
    \ not prime.\n  // Therefore, it is prime.\n  return true;", "    if (n <= 1)\n\
    \        return false;\n    long count = 2;\n    for (long i = 2; i <= sqrt(n);\
    \ ++i) {\n        while (n % i == 0)\n            ++count;\n        if (count\
    \ == 2)\n            return true;\n    }\n    return false;", "    // check for\
    \ factors of 2 or less\n    if (n < 2) return false;\n    long f = 2;\n    while\
    \ (f * f <= n) f += 2;\n    // if we've found a factor of 2 by now then the number\
    \ is prime\n    if (f == 2) return true;\n    // check if we've reached the upper\
    \ limit of sqrt(n)\n    long sqrt_n = sqrt(n);\n    if (f > sqrt_n) {\n      \
    \  // check whether n is prime\n        for (long i = f; i <= sqrt_n; i++) if\
    \ (n % i == 0) return false;\n    }\n    return true;", "    long a = sqrt(n);\n\
    \    for(long b = 2; b < a; b++) {\n        if(n%b == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;", "  for (long i = 2; i < n; i++)\
    \ {\n    // If a number is evenly divided by another number, it is not prime.\n\
    \    // >>> is_prime(5)\n    // False\n    // >>> is_prime(17)\n    // True\n\
    \    if (n % i == 0)\n      return false;\n  }\n  return true;", "\t// Only need\
    \ to consider odd numbers.\n\tif (n % 2 == 0)\n\t\treturn false;\n\n\t// Trial\
    \ division yields no useful result, so we try all possible\n\t// divisors except\
    \ two.\n\tfor (int i = 3; i <= sqrt(n); i += 2)\n\t\tif (n % i == 0)\n\t\t\treturn\
    \ false;\n\n\t// If we get here, we've found a prime number.\n\treturn true;",
  "  int i = 2;\n  while (i < n / i) {\n    if (n % i == 0) {\n      return false;\n\
    \    }\n    i++;\n  }\n  return true;", "\tif (n <= 1) return false;\n\tlong m\
    \ = sqrt(n), f;\n\tif (m == 1) return false;\n\tif (n % 2 == 0) return n == 2;\n\
    \tif (n % 3 == 0) return n == 3;\n\tf = 5;\n\twhile (f <= m) f *= 5;\n\tfor (int\
    \ i = 3; f <= n; i += 2) {\n\t\tif (n % i == 0) return false;\n\t\tif (n % (i\
    \ + 2) == 0) return false;\n\t\tint s = n / i;\n\t\tif (s == i || s * (i + 2)\
    \ == n) return true;\n\t}\n\treturn false;", "  // Use Sieve of Eratosthenes to\
    \ check for divisibility by 2, 3, 5, 7, 11, 13...\n  // Use a set so we don't\
    \ have to check even numbers.\n  // Use a vector so we don't have to resize or\
    \ reallocate the array.\n  const int N = 1000;\n  vector<int> v(N, 2);\n  for\
    \ (int i = 2; i <= sqrt(n); i += 2) {\n    // If i is prime, then all numbers\
    \ from 2 to sqrt(n) must be divisible by i.\n    if (v[i] == 1) {\n      for (long\
    \ j = i*i; j <= n; j += i) {\n        v[j] = 1;\n      }\n    }\n  }\n  // Reverse\
    \ the array, since we checked the odd numbers first above.\n  for (int i = v.size()\
    \ - 1; i >= 0; --i) {\n    if (v[i] == 1) {\n      // Sieve of Eratosthenes returns\
    \ true if all numbers in the array are factors of n.\n      return true;\n   \
    \ }\n  }\n  return false;", "    if(n <= 2)\n        return false;\n    if(n %\
    \ 2 == 0)\n        return false;\n    if(n%3 == 0)\n        return false;\n  \
    \  long a = sqrt(n);\n    long b = a+1;\n    long c = 2; long d = 2; long e =\
    \ 1;\n    while(b <= a) {\n        long m = (b+e)*((b+e)*((b+e)-1)/(b-d));\n \
    \       if(m == n && (m>n))\n            return true;\n        if(m > n)\n   \
    \         e = d-c;\n        else\n            d = c;\n        c++;\n    }\n  \
    \  return false;", "\tif (n <= 1)\n\t\treturn false;\n\n\tlong count = 0;\n\t\
    long max_val = sqrt(n);\n\n\twhile (max_val > 1) {\n\t\tlong i = max_val;\n\t\t\
    while (i * i <= n)\n\t\t\ti++;\n\n\t\tif (count < i - 1)\n\t\t\tcount++;\n\n\t\
    \tif (count >= i)\n\t\t\tbreak;\n\n\t\tmax_val = i;\n\t}\n\n\tif (count <= 1)\n\
    \t\treturn true;\n\n\tfor (long i = 2; i * i <= n; i++)\n\t\tif (n % i == 0)\n\
    \t\t\treturn false;\n\n\treturn true;", "    if (n == 1) return false;\n    if\
    \ (n <= 3) return true;\n    if (n % 2 == 0) return false;\n    for (long i =\
    \ 3; i * i <= n; i += 2) {\n        if (n % i == 0) return false;\n    }\n   \
    \ return true;", "    assert(n >= 2);\n    int f = 0;\n    int x = 3;\n    while\
    \ ((f < n) && (x < (int) sqrt(n))) {\n        if (n % x == 0) {\n            f\
    \ = f + 1;\n        }\n        x = x + 1;\n    }\n    return ((f == n) && (n !=\
    \ 1));", "    // base case\n    if (n < 2) return false;\n    // check if number\
    \ is even\n    if (n % 2 == 0) return false;\n    // check if number is odd\n\
    \    if (n & 1) return false;\n    \n    // check if number is divisible by any\
    \ prime less than or equal to n\n    for (long m = 2; m * m <= n; m++)\n     \
    \   if (n % m == 0) return false;\n    return true;", "    assert (n>0);\n   \
    \ if (n==1 || n==3) {\n        return true;\n    }\n    for (long i=2;i<=sqrt(n);i+=2)\
    \ {\n        if (n%i == 0) {\n            return false;\n        }\n    }\n  \
    \  return true;", "  if (n == 2) {\n    return true;\n  } else if (n % 2 == 0)\
    \ {\n    return false;\n  } else {\n    long i = 3, t;\n    while (i * i <= n)\
    \ {\n      t = i * i;\n      if (t > n) {\n        return true;\n      } else\
    \ if (t % n == 0) {\n        return false;\n      }\n      i += 1;\n    }\n  \
    \  return true;\n  }", "    int count = 0;\n    bool found = false;\n    for (long\
    \ i = 0; i <= n; i += 2) {\n        if ((n % i) == 0) {\n            found = true;\n\
    \            break;\n        }\n        count++;\n    }\n    return count == 2;",
  "  assert(n > 1);\n  if (n == 2) return true;\n  if (n % 2 == 0) return false;\n\
    \  long x = 3;\n  while (x < n/2) {\n    if (n % x == 0) return false;\n    x\
    \ += 2;\n  }\n  return true;", "    for (int i = 2; i * i <= n; i++) {\n     \
    \   if (n % i == 0) {\n            return false;\n        }\n    }\n    return\
    \ true;", "  if (n <= 1) return false;\n  if (n == 2) return true;\n  if (n %\
    \ 2 == 0 || n <= 3) return false;\n  long m = (long) sqrt(n);\n  for (long i =\
    \ 3; i <= m; i += 2) {\n    if (n % i == 0 || n % (i + 2) == 0) return false;\n\
    \  }\n  return true;", "    if (n <= 1) return false;\n    long d = n - 1;\n \
    \   for (long i = 2; i * i <= n; ++i)\n        if (n % i == 0)\n            return\
    \ false;\n    return true;", "    if (n == 1 || n == 2) return false;\n    if\
    \ (n % 2 == 0) return n == 2; \n    long square = n;\n    for (long i = 4; i <=\
    \ sqrt(n); i += 2) {\n        if (n % i == 0) return false;\n        square /=\
    \ i;\n    }\n    return true;", "    // Initialization\n    if (n <= 1) return\
    \ false;\n    // Find number of factors.\n    // If n has only 1 factor, then\
    \ n is not prime.\n    if (n == 2) return false;\n    long f = sqrt(n);\n    long\
    \ s = 0;\n    long p = 0;\n    while ((f * f < n) && (n % f == 0)) {\n       \
    \ ++s;\n        p = f;\n        f *= f;\n    }\n    // Return true if n is prime.\n\
    \    return ((n == p) && (s > 1));", "  if (n <= 1) {\n    return false;\n  }\n\
    \  if (n % 2 == 0) {\n    return false;\n  }\n  for (long i = 3; i <= n / i; i\
    \ += 2) {\n    if (n % i == 0) {\n      return false;\n    }\n  }\n  return true;",
  "  // Initialize all the numbers in the interval [2, sqrt(n)]\n  // using the prime\
    \ numbers algorithm.\n  std::vector< int > primes;\n  for (long i = 2; i <= std::sqrt(n);\
    \ i++) {\n    if (n % i == 0) {\n      return false;\n    }\n  }\n\n  std::vector<\
    \ int >::iterator it = primes.begin();\n  for (long i = 2; i <= n; i++) {\n  \
    \  if (n % i == 0) {\n      if (it == primes.end()) {\n        primes.push_back(i);\n\
    \      } else {\n        return false;\n      }\n    }\n  }\n\n  // If n is composite,\
    \ return false.\n  return it == primes.end();", "  int sqrt_n = sqrt(n);\n  for\
    \ (int i = 2; i <= sqrt_n; ++i)\n  {\n    if (n % i == 0)\n    {\n      return\
    \ false;\n    }\n  }\n  return true;", "    if (n == 1)\n        return false;\n\
    \    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    long d = sqrt(n);\n    for (long i = 3; i <= d; i += 2)\n        if (n %\
    \ i == 0)\n            return false;\n    return true;", "    long j = 0;\n  \
    \  long k = 2;\n    while (k < n){\n        if (n % k == 0) {\n            return\
    \ false;\n        }\n        j = k;\n        k = k+2;\n    }\n    return true;",
  "    // Your code here!\n    if (n == 1)\n        return false;\n    if (n == 2)\n\
    \        return true;\n    if (n % 2 == 0)\n        return false;\n    long m\
    \ = sqrt(n);\n    for (long i = 2; i <= m; i++) {\n        if (n % i == 0) {\n\
    \            return false;\n        }\n    }\n    return true;", "  int flag =\
    \ 0, i=2, m=3;\n  while (i<n) {\n    flag = flag*m;\n    m+=i;\n    i=i*3+2;\n\
    \  }\n  if (flag == 1) return true;\n  return false;", "    // Start off as False.\n\
    \    bool prime = false;\n\n    // If n is 2 or less, it is prime.\n    if (n\
    \ <= 2) {\n        prime = true;\n    }\n    // If n divides evenly into 3, n\
    \ is prime.\n    else if (n % 2 == 0 || n % 3 == 0) {\n        prime = true;\n\
    \    }\n    // If n is odd, n divides evenly into two and n is prime.\n    else\
    \ if (n % 2 == 1) {\n        prime = true;\n    }\n    // Otherwise, loop over\
    \ all odd divisors of n.\n    else {\n        // While n is odd.\n        while\
    \ (n % 2 == 1) {\n            n = n / 2;\n            // If n is odd and does\
    \ not divide evenly into three, n is prime.\n            if (n % 3 == 0) {\n \
    \               prime = true;\n                break;\n            }\n       \
    \ }\n    }\n\n    // Return true if prime, and false otherwise.\n    return prime;",
  "\tif (n < 2L || n % 2 == 0) {\n\t\treturn false;\n\t}\n\tlong s = 3L;\n\twhile\
    \ (s < n) s += 2L;\n\tfor (long m = 3L; m < n; m += 2L) {\n\t\tif (n % m == 0L)\
    \ return false;\n\t\tlong long i = 3L;\n\t\twhile (i * i <= m) i += 2L;\n\t\t\
    if (i == m) return true;\n\t}\n\treturn false;", "  if (n == 1)\n    return false;\n\
    \  for (long d = 2; d * d <= n; d++) {\n    if (n % d == 0)\n      return false;\n\
    \  }\n  return true;", "    if (n == 1) {\n        return false;\n    }\n\n  \
    \  for (int i = 3; i * i <= n; i += 2) {\n        if (n % i == 0) {\n        \
    \    return false;\n        }\n    }\n\n    return true;", "    assert(n > 2);\n\
    \    bool prime = false;\n    for (int i = 3; !prime && (i * i <= n); ++i) {\n\
    \        if (n % i == 0) {\n            prime = true;\n        }\n    }\n    return\
    \ prime;", "    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n\
    \            return false;\n        }\n    }\n    return true;", "    if (n ==\
    \ 1) return false;\n    long k = 2;\n    while (!is_prime(k) && k <= n) k++;\n\
    \    return k > n;", "    if(n == 2) return false;\n    if(n == 3) return true;\n\
    \    long m = n;\n    while(m > 2) {\n        if(n % m == 0) {\n            return\
    \ false;\n        }\n        m--;\n    }\n    return true;", "    if (n == 1)\
    \ return false;\n    // if n <= 1, then n is prime.\n    if (n <= 2) return true;\n\
    \    // if n = 2, then n is not prime.\n    if (n == 2) return false;\n    //\
    \ if n = 2, then n is prime.\n    if (n == 2) return true;\n    // n is not prime.\n\
    \    // if n \u2212 1 divides evenly into 3, then n is not prime.\n    bool not_prime\
    \ = true;\n    for (long d = 2; d * d <= n; d++){\n        if (n % d == 0){\n\
    \            not_prime = false;\n            break;\n        }\n    }\n    return\
    \ not_prime;", "  // Base case 1: if n is even and greater than 2, then it can\n\
    \  // never be prime, thus return false.\n  if (n <= 1) {\n    return false;\n\
    \  }\n\n  // Base case 2: if n is even, then it can only be prime\n  // if its\
    \ divider is greater than 2.\n  if (n % 2 == 0) {\n    return false;\n  }\n\n\
    \  // Loop through the numbers up to the square root of the number.\n  // If n\
    \ is prime, then any even number can be tested as divisibly\n  // by any odd number.\
    \ For example, if n is 20, then 10 (the square\n  // root of 20) is an odd number,\
    \ since it is the only even number less\n  // than 20.\n  for (int i = 3; i <=\
    \ sqrt(n); i += 2) {\n    if (n % i == 0) {\n      return false;\n    }\n  }\n\
    \  return true;", "\tif (n == 1) return false;\n\tif (n == 2 || n == 3) return\
    \ true;\n\tif (n % 2 == 0 || n % 3 == 0) return false;\n\tlong n_sqr = sqrt(n);\n\
    \tfor (long i = 3; i <= n_sqr; i+=2) {\n\t\tif (n % i == 0 || n % (i+2) == 0)\
    \ return false;\n\t}\n\treturn true;", "    if (n <= 1)\n        return false;\n\
    \    if (n <= 3)\n        return true;\n    long sq = sqrt(n);\n    for (long\
    \ i = 1; i <= sq; i++)\n        if (n % i == 0)\n            return false;\n \
    \   return true;", "    // If n is 1 or more, then it is prime.\n    if (n <=\
    \ 1) return false;\n    \n    // Sieve of Eratosthenes is enough for finding a\
    \ prime number.\n    std::vector<bool> isPrime(n + 1, true);\n    for (int i =\
    \ 2; i <= n; i++) {\n        if (isPrime[i]) {\n            for (int j = i * i;\
    \ j < n; j += i)\n                isPrime[j] = false;\n        }\n    }\n    \n\
    \    return isPrime[n];", "    // Check that the number is a positive integer.\n\
    \    if (n <= 0)\n        return false;\n\n    // Check if n is prime by sieving\
    \ through all odd numbers up to n.\n    long num_factors = 0;\n    for (long x\
    \ = 2; x <= n; x++)\n        if (n % x == 0)\n            num_factors += 1;\n\n\
    \    if (num_factors == 2)\n        return true;\n    else\n        return false;",
  "  // A prime number (p \u2261 2) is called a composite number, and the\n  // only\
    \ prime number (2 \u2261 1) is called a prime number.\n  if (n == 2) {\n    return\
    \ true;\n  }\n  // If we already found a prime number\n  if (n % 2 == 0) {\n \
    \   return false;\n  }\n  // Check only odd numbers except 2\n  for (long i =\
    \ 3; i <= sqrt(n); i += 2) {\n    if (n % i == 0) {\n      return false;\n   \
    \ }\n  }\n  return true;", "    if (n == 1) return false;\n    for (long i = 2;\
    \ i <= n; i++) if (n % i == 0) return false;\n    return true;", "  if (n <= 2)\
    \ return false;\n  // We only need to check up to sqrt(n).\n  for (long i = 2;\
    \ i <= n / i; i++) {\n    if (n % i == 0) return false;\n  }\n  return true;",
  "    long sqrt_n = (long)sqrt((double)n);\n    long max_check = (long)sqrt(sqrt_n\
    \ + 1);\n    // return false if n is greater than sqrt(n+1)\n    if (n <= max_check)\
    \ {\n        return false;\n    }\n    // return true if n is prime\n    for (long\
    \ i = 3; i < max_check; i += 2) {\n        if (n % i == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;", "    if (n == 2) return true;\n\
    \    if (n % 2 == 0) return false;\n    if (n < 3 || n % 3 == 0) return false;\n\
    \n    long limit = sqrt(n);\n    for (long i = 5; i <= limit; i += 6) {\n    \
    \    if (n % i == 0) return false;\n    }\n    return true;", "    if (n < 2)\n\
    \        return false;\n    if (n == 2)\n        return true;\n    if (n % 2 ==\
    \ 0)\n        return false;\n    for (int i = 3; i <= sqrt(n); i += 2)\n     \
    \   if (n % i == 0)\n            return false;\n    return true;", "  // Initializing\
    \ the flag\n  bool flag = true;\n  // Finding out if n is prime\n  if (n==2) return\
    \ true;\n  // Checking if n is odd\n  if (n % 2 == 0) return false;\n  // Finding\
    \ the mid value\n  long m = (n+1)/2;\n  // Checking if mid value is prime\n  for\
    \ (long i=3; i<=m; i++){\n    if (n % i == 0){\n      flag = false;\n    }\n \
    \ }\n  return flag;", "  long i, flag = 2;\n  // Check base cases: even and prime\
    \ number.\n  if (n <= 1)\n    return false;\n  if (n == 2)\n    return true;\n\
    \  // Check all the numbers in the range.\n  for (i = 2; i <= n / 2; ++i)\n  \
    \  if (n % i == 0)\n      return false;\n  return true;", "    if (n <= 1) return\
    \ false;\n    long count = (long) sqrt(n);\n    long factor = 2;\n    long limit\
    \ = n - 1;\n    for (long i = 2; i <= limit; i++) {\n        if (n % i == 0) {\n\
    \            count--;\n            if (count == 0) return false;\n        }\n\
    \        if (count == 0 && i == factor) factor++;\n    }\n    return true;", "\t\
    if (n == 1) return false;\n\tfor (long i = 2; i * i <= n; i++)\n\t\tif (n % i\
    \ == 0) return false;\n\treturn true;", "    if (n <= 1) return false;\n    for\
    \ (int i = 2; i*i <= n; i++) {\n        if (n%i==0) return false;\n    }\n   \
    \ return true;", "  if (n == 0) return false;\n  // Only odd numbers have an efficient\
    \ primality test.\n  // For a number to be prime it must have a smaller factor.\n\
    \  // We can quickly tell if an n is prime by checking if n is a factor of\n \
    \ // the square root of its (only even) factors.\n  assert(n > 1);\n  int limit\
    \ = (int) sqrt(n);\n  for (int i = 3; i <= limit; i += 2) {\n    if (n % i ==\
    \ 0) return false;\n  }\n  return true;", "    long div = 2;\n    long limit =\
    \ (long)sqrt((double)n) + 1;\n\n    for (int i = 2; i <= limit; i++) {\n     \
    \   long check = (long)sqrt(n) / i;\n        long div2 = check / 2;\n        if\
    \ (n == check) {\n            return true;\n        }\n        if (n < check)\
    \ {\n            div = div2;\n        }\n        else if (div * div > n) {\n \
    \           break;\n        }\n    }\n    return false;", "    // Check whether\
    \ n is prime using a sieve.\n    long sieve[static_cast<long>(LARGE_MAX)];\n \
    \   for(long i = 0; i <= LARGE_MAX; sieve[i] = static_cast<long>(i))\n       \
    \ for(long j = 2; i * j <= n; j++) sieve[i * j] = 1;\n    for(long i = 1; i <=\
    \ n; i++)\n        if(sieve[i]) return 0;\n    return 1;", "\tif (n <= 1) return\
    \ false;\n\tlong sqt = sqrt(n);\n\tfor (long i = 3; i <= sqt; ++i)\n\t{\n\t\t\
    if (n % i == 0)\n\t\t\treturn false;\n\t}\n\treturn true;", "\tif(n == 1) return\
    \ false;\n\tfor(long i = 2; i <= n / 2; i++) {\n\t\tif(n%i == 0) return false;\n\
    \t}\n\treturn true;", "    if(n <= 1)\n        return false;\n    long s = sqrt(n)\
    \ + 1;\n    for(long d = 2; d <= s; d++)\n        if((n % d) == 0)\n         \
    \   return false;\n    return true;", "    long x = sqrt(n);\n    long y = n /\
    \ x;\n\n    if(n == 2)\n        return true;\n    if(n == 3)\n        return true;\n\
    \    if(n == 1)\n        return false;\n\n    if(x == 1)\n        return false;\n\
    \n    if(y % 2 == 0)\n        return false;\n\n    long m = (x + 1) >> 1;\n  \
    \  for(int i = 3; i <= m; i += 2)\n        if(n % i == 0)\n            return\
    \ false;\n\n    return true;", "    long k = 2;\n    while (k * k <= n && n %\
    \ k == 0) {\n        ++k;\n    }\n    return k * k <= n;", "    if (n <= 1)\n\
    \        return false;\n    long limit = sqrt(n);\n    long d = 2;\n    for (long\
    \ i = 2; i < limit; i++) {\n        if (n % i == 0) {\n            return false;\n\
    \        }\n        while (d % 2 == 0) {\n            d += 2;\n        }\n   \
    \ }\n    return true;", "    assert(n >= 2 && n <= 30);\n    if (n < 3) return\
    \ n == 2;\n    if (n < 5) return n == 3;\n    if (n % 2 == 0) return n == 5 ||\
    \ n == 7;\n    if (n % 3 == 0) return n == 6  || n == 8  || n == 9  || n == 11;\n\
    \    if (n % 5 == 0) return n == 12 || n == 15;\n    int sqrt_n = sqrt(n);\n \
    \   if (n % 7 == 0) return n == sqrt_n || n == sqrt_n + 4 || n == sqrt_n - 4;\n\
    \    if (n % 3 == 0) return false;\n    return true;", "    if (n <= 1) return\
    \ false;\n    long m = n;\n    for (int i = 2; i * i <= m; i++)\n        if (m\
    \ % i == 0)\n            return false;\n    return true;", "  if (n <= 1) return\
    \ false;\n  long i = 2; \n  while (i < n && n % i == 0) ++i;\n  return i % 2 ==\
    \ 0;", "    if (n <= 1)\n        return false;\n    if (n <= 3 && prime_table.find(n)\
    \ != prime_table.end())\n        return true;\n    for (long i = 3; i < n; i +=\
    \ 2)\n        if (n % i == 0)\n            return false;\n    return true;", " \
    \ if (n<=1)\n    return false;\n  for (int i=2; i<=sqrt(n); i++)\n    if ((n%i)==0)\n\
    \      return false;\n  return true;", "   if ( n <= 1) {\n      return false;\n\
    \   }\n   if ( n == 2) {\n      return true;\n   }\n   if ( n % 2 == 0) {\n  \
    \    return false;\n   }\n   long i = 3;\n   while (i <= sqrt(n)) {\n      if\
    \ (n % i == 0) {\n         return false;\n      }\n      i += 2;\n   }\n   return\
    \ true;", "    // First we must find out if it's prime\n    if (n <= 1) return\
    \ false;\n    long d = sqrt(n) + 1;\n    bool f = false;\n    for (long x = 2;\
    \ x < d; ++x) {\n        if (n % x == 0) {\n            f = true;\n          \
    \  break;\n        }\n    }\n    return f;", "\tif (n == 1)\n\t\treturn false;\n\
    \telse if (n == 2)\n\t\treturn true;\n\telse {\n\t\tlong m = sqrt(n);\n\t\tif\
    \ (m == 1)\n\t\t\treturn true;\n\t\telse {\n\t\t\tlong i;\n\t\t\tint count = 2;\n\
    \t\t\tfor (i = 2; i <= m; i++) {\n\t\t\t\tif (n % i == 0)\n\t\t\t\t\tbreak;\n\t\
    \t\t\tcount++;\n\t\t\t}\n\t\t\tif (i == m)\n\t\t\t\treturn false;\n\t\t\telse\n\
    \t\t\t\treturn (count < 5);\n\t\t}\n\t}", "    // Base case.\n    if (n == 2)\
    \ return false;\n    if (n <= 1) return false;\n\n    // Check factors up to sqrt(n).\n\
    \    for (long i = 2; i < sqrt(n); ++i) {\n        if (n % i == 0) return false;\n\
    \    }\n\n    // Check factors up to sqrt(n).\n    for (long i = sqrt(n); i *\
    \ i <= n; i = i * i) {\n        if (n % i == 0) return false;\n    }\n\n    return\
    \ true;", "    long i=2,m; \n    while(i<n) \n    {\n        while(!((m%i)==0))\n\
    \        {\n            m+=i;\n        }\n        if((m%i)==0)\n        {\n  \
    \          return false;\n        }\n        i++;\n    }\n    return true;", " \
    \   if(n==1) return false;\n    long i = 2;\n    while(i <= n/i)\n    {\n    \
    \    if(n%i==0) return false;\n        i++;\n    }\n    return true;", "    if(n<2)\n\
    \        return false;\n    if(n%2==0)\n        return false;\n    long i=3;\n\
    \    while(i*i<=n)\n    {\n        if(n%i==0)\n            return false;\n   \
    \     ++i;\n    }\n    return true;", "    if (n == 2) return true;\n    if (n\
    \ % 2 == 0) return false;\n    if (n == 0 || n % 3 == 0) return false;\n    if\
    \ (n <= 1) return false;\n    for (int i = 3; i <= (long)sqrt(n); i += 2)\n  \
    \      if (n % i == 0) return false;\n    return true;", "    if (n == 2) {\n\
    \        return true;\n    }\n    else if (n == 1 || n % 2 == 0) {\n        return\
    \ false;\n    }\n\n    for (long i = 3; i * i <= n; i += 2) {\n        if (n %\
    \ i == 0) {\n            return false;\n        }\n    }\n    return true;", " \
    \ if (n<2)\n    return false;\n  for (long i=2;i<=n/2;i++)\n    if (n%i==0)\n\
    \      return false;\n  return true;", "\tif (n <= 1)\n\t\treturn false;\n\tlong\
    \ limit = (long)sqrt(n);\n\tfor (long i = 0; i*i <= limit; ++i) {\n\t\tif (n %\
    \ i == 0)\n\t\t\treturn false;\n\t}\n\treturn true;", "    if (n <= 1) return\
    \ false;\n    // Check all odd numbers up to the square root of n.\n    long max\
    \ = (long)sqrt(n);\n    for (long m = 2; m <= max; ++m) {\n        if (n % m ==\
    \ 0) return false;\n    }\n    return true;", "    // Trial division with sieve.\n\
    \    static const long primes[] = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113,\
    \ 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199,\
    \ 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293,\
    \ 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397,\
    \ 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491,\
    \ 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601,\
    \ 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701,\
    \ 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821,\
    \ 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929,\
    \ 937, 941, 947, 953, 967, 971, 977, 983, 991, 997};\n    int i;\n    for (i =\
    \ 2; i <= n / i; i++) {\n        if (n % i == 0) {\n            return false;\n\
    \        }\n    }\n    return true;", "    long sqrt_n = sqrt(n);\n    for (int\
    \ i = 2; i <= sqrt_n; i++) {\n        if (n % i == 0) {\n            return false;\n\
    \        }\n    }\n    return true;", "\tif (n == 1) return false;\n\tbool isPrime\
    \ = true;\n\t// Check odd numbers starting from 2.\n\tif (n & 1)\n\t\tisPrime\
    \ = false;\n\t// Check even numbers starting from 3.\n\tfor (long x = 2; x * x\
    \ <= n; x++) {\n\t\tif ((n % x) == 0) {\n\t\t\tisPrime = false;\n\t\t\tbreak;\n\
    \t\t}\n\t}\n\t// Return true if n is prime or false otherwise.\n\treturn isPrime;",
  "\tif (n == 1)\n\t\treturn false;\n\tif (n % 2 == 0)\n\t\treturn true;\n\tint k\
    \ = 3;\n\twhile (k <= n / 2) {\n\t\tif (n % k == 0)\n\t\t\treturn false;\n\t\t\
    k+=2;\n\t}\n\treturn true;", "  if (n < 2) return false;\n  if (n == 2) return\
    \ true;\n  if (n % 2 == 0) return false;\n  if (n % 3 == 0) return false;\n  long\
    \ limit = (long long)(sqrt(n) + 1);\n  for (long i = 4; i <= limit; i++) {\n \
    \   if (n % i == 0) return false;\n  }\n  return true;", "    if (n <= 1) return\
    \ false;\n    if (n == 2 || n == 3) return true;\n    if (n % 2 == 0 || n % 3\
    \ == 0) return false;\n    long f = 5; // 5 is a prime\n    // Fermat's little\
    \ theorem\n    long a = 6; // 6 is the prime\n    while (a < n) {\n        if\
    \ (n % a == 0) return false;\n        a = a + 6;\n    }\n    while (n > a) {\n\
    \        if (n % a == 0) return false;\n        a = a + 6;\n        n = n / 6;\n\
    \    }\n    return true;", "    if (n == 1) return false;\n    long limit = sqrt(n)\
    \ - 1;\n    for (int i = 2; i <= limit; i++)\n        if (n % i == 0)\n      \
    \      return false;\n    return true;", "    long r = n;\n    while (r % 2 ==\
    \ 0) {\n        r /= 2;\n    }\n\n    for (long i = 3; i * i <= n; i += 2) {\n\
    \        if (r % i == 0) {\n            return false;\n        }\n    }\n    return\
    \ true;", "  if (n <= 1) return false;\n  long s = sqrt(n);\n  for (long i = 2;\
    \ i <= s; i++) {\n    if (n % i == 0) return false;\n  }\n  return true;", " \
    \   for(long i = 2; i * i <= n; ++i) {\n        if(n % i == 0)\n            return\
    \ false;\n    }\n    return true;", "    for(int i = 2; i*i <= n; i++)\n    {\n\
    \        long long int mod = (long long) sqrt(n);\n        int rem = n % mod;\n\
    \        if(rem == 0)\n        {\n            return false;\n        }\n     \
    \   if(rem != 1)\n        {\n            return true;\n        }\n    }\n    return\
    \ false;", "    if (n <= 3) {\n        return true;\n    }\n    if (n == 2) {\n\
    \        return true;\n    }\n    if (n % 2 == 0) {\n        return false;\n \
    \   }\n    long sqr_div = 3;\n    while (sqr_div <= n) {\n        if (n % sqr_div\
    \ == 0) {\n            return false;\n        }\n        sqr_div += 2;\n    }\n\
    \    return true;", "    if(n<2) return false;\n    long r = n;\n    long d;\n\
    \    while ((d = r / 2) != 1) {\n        if(r % (2 * d) == 0) return false;\n\
    \        r = d;\n    }\n    return true;", "    int flag=1;\n    for(int i=2;i<n;i++)\
    \ {\n        if( ((n/i)%1)==0) {\n            flag=0;\n            break;\n  \
    \      }\n    }\n    if(flag==1) {\n        return true;\n    } else {\n     \
    \   return false;\n    }", "    // Write your code here.\n    if (n==1)return\
    \ false;\n    if (n%2==0)return false;\n    long i=3;\n    while(i*i<=n){\n  \
    \      if(n%i==0)return false;\n        i=i*3+1;\n    }\n    return true;", " \
    \   if (n < 2)\n        return false;\n    if (n == 2)\n        return true;\n\
    \    if (n % 2 == 0)\n        return false;\n    for (long i = 3; i * i <= n;\
    \ i += 2) {\n        if (n % i == 0)\n            return false;\n    }\n    return\
    \ true;", "  if (n==1)\n    return false;\n  if (n<2)\n    return true;\n  long\
    \ i = n;\n  bool flag=true;\n  while(i%2==0){\n    i=i/2;\n    flag=false;\n \
    \ }\n  while(i>1){\n    if(n%i==0){\n      n=n/i;\n      flag=false;\n    }\n\
    \    i=i/2;\n  }\n  return flag;", "  if (n < 2)\n    return false;\n  long r\
    \ = sqrt(n);\n  for (long i = 2; i * i <= n; i++)\n    if (n % i == 0)\n     \
    \ return false;\n  return true;", "    if (n == 2) return true;\n    else if (n\
    \ % 2 == 0) return false;\n    else return is_prime(3 * n + 1) / 3 == 1;", " \
    \   int i;\n    for (i = 2; i <= n / i; i++) {\n        if (n % i == 0) {\n  \
    \          return false;\n        }\n    }\n    return true;", "    if (n == 1)\
    \ return false;\n    for (long i = 2; i <= n / 2; i++) {\n        if (n % i ==\
    \ 0) return false;\n    }\n    return true;", "    if (n == 1) return false;\n\
    \    for (int i = 2; i * i <= n; ++i)\n        if (n % i == 0) return false;\n\
    \    return true;", "\t// Use Euler Totient Theorem to find primes less than n\
    \ <= 2^31.\n\tlong n_mod_2 = n % 2;\n\tlong n_mod_3 = n % 3;\n\tlong n_mod_5 =\
    \ n % 5;\n\tlong n_mod_7 = n % 7;\n\tlong n_mod_11 = n % 11;\n\tlong n_mod_13\
    \ = n % 13;\n\n\t// Check if n is prime. Check if n is divisible by 2 or 3.\n\t\
    if ((n == 2 || n == 3) && n_mod_2 == 0) {\n\t\treturn true;\n\t}\n\n\t// Check\
    \ if n is prime. Check if n is divisible by 3, 5.\n\tif ((n == 3 || n == 5 ||\
    \ n == 7 || n == 11) && n_mod_3 == 0 && n_mod_5 == 0) {\n\t\treturn true;\n\t\
    }\n\n\t// Check if n is prime. Check if n is divisible by 5, 7.\n\tif ((n == 5\
    \ || n == 7 || n == 11) && n_mod_5 == 0 && n_mod_7 == 0) {\n\t\treturn true;\n\
    \t}\n\n\t// Check if n is prime. Check if n is divisible by 7, 11.\n\tif ((n ==\
    \ 7 || n == 11) && n_mod_7 == 0 && n_mod_11 == 0) {\n\t\treturn true;\n\t}\n\n\
    \t// Check if n is prime. Check if n is divisible by 11, 13.\n\tif ((n == 11 ||\
    \ n == 13) && n_mod_11 == 0 && n_mod_13 == 0) {\n\t\treturn true;\n\t}\n\n\t//\
    \ If n is not prime, return false.\n\treturn false;", "  long i;\n  // Check for\
    \ non-prime numbers (even numbers only).\n  if (n <= 1)\n    return false;\n \
    \ // Check if n is prime.\n  for (i = 2; i <= (n / 2); ++i)\n    if (n % i ==\
    \ 0)\n      return false;\n  // Check if n is perfect square (i.e., no prime factors\
    \ other than 2 are possible).\n  if (n == n / 2)\n    return true;\n  // If not,\
    \ then it's not a prime.\n  return false;", "    long i,j;\n    assert(n > 1);\n\
    \    if (n == 2) {\n        return true;\n    }\n    if (n == 1) {\n        return\
    \ false;\n    }\n    i = 2;\n    j = (long) sqrt(n);\n    while (i*i <= j) {\n\
    \        if (n % i == 0) {\n            return false;\n        }\n        i +=\
    \ 1;\n    }\n    return true;", "    // base case\n    if (n <= 1)\n        return\
    \ false;\n    // Check odd and even\n    if (n % 2 == 1 || n % 3 == 0)\n     \
    \   return false;\n    // Check primes other than 2 and 3\n    for (long i = 5;\
    \ i * i <= n; i += 6)\n        if (n % i == 0 || n % (i + 2) == 0)\n         \
    \   return false;\n    return true;", "    assert(n > 1 && n < 1000);\n    long\
    \ k = 3;\n    long q = n - 1;\n\n    for (; q & 1; ++k) {\n        q = q / 2;\n\
    \    }\n\n    for (; q >= 2; --k) {\n        if (n % q == 0) {\n            return\
    \ false;\n        }\n        q = q / 2;\n    }\n\n    return true;", "\tif(n<2)\n\
    \t\treturn false;\n\tif( (n&(n-1) )==0)\n\t\treturn n>=2;\n\t\n\tlong m = sqrt(n);\n\
    \t\n\tlong a = 6; \n\tlong b = ((2*m+2) << 1) + 1;\n\t\n\twhile( ((b+1)>>1)>m\
    \ )\n\t{\n\t\tlong c = (((b+2)<<1) + 1);\n\t\tlong m = ((b+2)<<1) + 2;\n\t\t\n\
    \t\twhile(m<=b)\n\t\t{\n\t\t\tif((m*m)==n)\n\t\t\t\treturn true;\n\t\t\tm+=2;\n\
    \t\t}\n\t\ta = b;\n\t\tb = c;\n\t}\n\t\n\tif( n>m )\n\t\treturn false;\n\t\n\t\
    a = 6; \n\tb = ((2*m+2) << 1) + 1;\n\t\n\twhile( ((b+1)>>1)>m )\n\t{\n\t\tlong\
    \ c = (((b+2)<<1) + 1);\n\t\tlong m = ((b+2)<<1) + 2;\n\t\t\n\t\twhile(m<=b)\n\
    \t\t{\n\t\t\tif((m*m)==n)\n\t\t\t\treturn false;\n\t\t\tm+=2;\n\t\t}\n\t\ta =\
    \ b;\n\t\tb = c;\n\t}\n\t\n\treturn false;", "  if (n <= 1) return false;\n  if\
    \ (n % 2 == 0) return false;\n  if (n % 3 == 0) return false;\n  if (n % 5 ==\
    \ 0) return false;\n  for (int i = 5; ; i += 6) {\n    if (n % i == 0) return\
    \ false;\n    if (n % (i + 2) == 0) return false;\n  }\n  return true;", "   \
    \ long x = sqrt(n);\n    for (int i = 2; i < x; ++i)\n    {\n        if (n % i\
    \ == 0)\n            return false;\n    }\n    return true;", "    if (n == 1)\
    \ return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n\
    \n    for (int i = 3; i < n; i += 2)\n        if (n % i == 0) return false;\n\
    \    return true;", "    if(n==2) return true;\n    \n    long sq = n/2;\n   \
    \ \n    for(long i=3; i<=sq; i+=2) if(n % i == 0) return false;\n    \n    return\
    \ n != 1;", "    int k;\n    if(n==1)\n        return false;\n    for(int i=2;i*i<n;i++)\n\
    \        if(n%i==0)\n            return false;\n    for(int i=3;i*i<=n;i+=2)\n\
    \        if(n%i==0)\n            return false;\n    for(k=n/2;k>=2;k--)\n    \
    \    if(n%k==0)\n            return false;\n    return true;", "    for (int i\
    \ = 2; i <= sqrt(n); i++) {\n        if (n % i == 0)\n            return false;\n\
    \    }\n    return true;", "  if (n <= 1) return false;\n  long root = (long)\
    \ sqrt((double) n);\n  for (long i = 2; i <= root; i++) {\n    if (n % i == 0)\
    \ return false;\n  }\n  return true;", "    assert(n >= 2);\n    // if n is prime,\
    \ then only factors less than n are prime.\n    // if n is not prime, then no\
    \ other factor is prime.\n    if (n <= 1) return false;\n    // only odd numbers\
    \ greater than 1 are prime.\n    if (n % 2 == 0) return false;\n    // if n is\
    \ prime (evenly), then each even number greater than 2\n    // is also prime.\n\
    \    if (n <= 3) return true;\n    // if n is prime (evenly), then each odd number\
    \ greater than 1\n    // is also prime.\n    for (long k = 3; k <= (long int)\
    \ sqrt(n); k+=2) {\n        if (n % k == 0) return false;\n    }\n    return true;",
  "  int k = 3;\n  int j = (n-1)/k;\n  int f = false;\n  for (int i = 2; i <= j; ++i)\
    \ {\n    if (n % i == 0) {\n      f = true;\n      break;\n    }\n  }\n  return\
    \ f;", "    if (n <= 1) return false;\n    // If n is even, then (n-1)/2 is odd\
    \ and even\n    // and so forth.\n    // If n is odd, then (n-1)/2 is even and\
    \ so forth.\n    // If n is 0 or 1, then n is not prime\n    if (n <= 2) return\
    \ true;\n    // Loop until n <= sqrt(n)\n    for (long i = 2; i <= n; ++i)\n \
    \       if (n % i == 0) return false;\n    return true;"]
stop_tokens:
- "\n}"
