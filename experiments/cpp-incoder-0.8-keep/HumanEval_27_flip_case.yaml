name: HumanEval_27_flip_case
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
  \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
  // 'hELLO'\nstd::string flip_case(std::string string) {\n"
tests: "}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
  \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
  These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
  \ ENDS\"));\n}\n"
completions: ["    for (int i = 0; i < string.length(); i++) {\n        if (string[i]\
    \ >= 'a' && string[i] <= 'z') {\n            string[i] = string[i] - 32;\n   \
    \     } else if (string[i] >= 'A' && string[i] <= 'Z') {\n            string[i]\
    \ = string[i] + 32;\n        }\n    }\n    return string;", "    for(int i=0;i<string.length();\
    \ i++)\n    {\n        string =  string[i] >= 'a' && string[i] <= 'z'? string[i]\
    \ - 32 : string[i];\n    }\n    return string;", "    std::string str = \"\";\n\
    \    for (char &c: string)\n    {\n        if(isupper(c))\n            c = tolower(c);\n\
    \        else\n            c = toupper(c);\n        str += c;\n    }\n    return\
    \ str;", "    // Initialize output string\n    std::string output{};\n    // Iterate\
    \ through all characters\n    for (char ch : string) {\n        // If the character\
    \ is uppercase (capital letter)\n        if (isupper(ch)) {\n            // Set\
    \ the output string to output + the uppercase character\n            output =\
    \ output + tolower(ch);\n        } else {\n            // Set the output string\
    \ to output + the uppercase character\n            output = output + toupper(ch);\n\
    \        }\n    }\n    // Return output string\n    return output;", "    std::map<char,\
    \ char> mapping;\n    for (size_t i = 0; i < string.length(); ++i) {\n       \
    \ mapping[string[i]] = toupper(string[i]);\n    }\n\n    for (auto i = mapping.begin();\
    \ i != mapping.end(); ++i) {\n        mapping[i->second] = tolower(i->second);\n\
    \    }\n\n    std::string ret(\"\");\n    for (auto i = mapping.begin(); i !=\
    \ mapping.end(); ++i) {\n        ret += i->second;\n    }\n\n    return ret;",
  "    std::string s(string);\n    for (auto c : s) {\n        if (c >= 'A' && c <=\
    \ 'Z') c += 32;\n        else if (c >= 'a' && c <= 'z') c -= 32;\n    }\n    return\
    \ s;", "    for (int i = 0; i < string.length(); i++) {\n        if (string[i]\
    \ >= 'a' && string[i] <= 'z') {\n            string[i] = string[i] - 32;\n   \
    \     }\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            string[i]\
    \ = string[i] + 32;\n        }\n    }\n    return string;", "    std::string out;\n\
    \    for(size_t i = 0; i < string.size(); i++) {\n        char c = string[i];\n\
    \        if('A' <= c && c <= 'Z') {\n            out += (char)((c ^ 32));\n  \
    \      }\n        else if('a' <= c && c <= 'z') {\n            out += (char)((c\
    \ ^ 97));\n        }\n        else {\n            out += c;\n        }\n    }\n\
    \    return out;", "  string temp;\n  for (int i = 0; i < string.length(); i++)\
    \ {\n    if (string[i] < 'A' || string[i] > 'Z') {\n      temp = temp + string[i];\n\
    \    } else {\n      temp = temp + string[i] - 'A' + 'a';\n    }\n  }\n  return\
    \ temp;", "    string outstr(string);\n    for (size_t i = 0; i < outstr.size();\
    \ i++) {\n        char c = outstr[i];\n        if ('A' <= c && c <= 'Z')\n   \
    \         outstr[i] = outstr[i] + 'a' - 'A';\n        if ('a' <= c && c <= 'z')\n\
    \            outstr[i] = outstr[i] + 'A' - 'a';\n    }\n    return std::string(outstr);",
  "    // Transform lowercase letters to uppercase and vice versa\n    std::transform(string.cbegin(),\
    \ string.cend(), string.begin(),\n                   [](char letter) {\n     \
    \                  return (letter >= 'a' && letter <= 'z') ? letter - ('a' - 'A')\
    \ : letter;\n                   });\n    // Transform uppercase letters to lowercase\
    \ and vice versa\n    std::transform(string.cbegin(), string.cend(), string.begin(),\n\
    \                   [](char letter) {\n                       return (letter >=\
    \ 'A' && letter <= 'Z') ? letter - (('A' - 'a' + 1)) : letter;\n             \
    \      });\n    return string;", "  for (int i = 0; i < string.length(); i++)\
    \ {\n    if (string[i] >= 'a' && string[i] <= 'z') {\n      string[i] -= 32;\n\
    \    } else if (string[i] >= 'A' && string[i] <= 'Z') {\n      string[i] += 32;\n\
    \    }\n  }\n  return string;", "  for (int i = 0; i < string.size(); ++i) {\n\
    \    if (string[i] >= 'a' && string[i] <= 'z') {\n      string[i] = string[i]\
    \ + 'A' - 'a';\n    }\n    if (string[i] >= 'A' && string[i] <= 'Z') {\n     \
    \ string[i] = string[i] + 'a' - 'A';\n    }\n  }\n  return string;", "   std::string\
    \ flipped = \"\";\n   for (char ch : string) {\n      if (std::toupper(ch) ==\
    \ ch)\n         flipped += std::tolower(ch);\n      else\n         flipped +=\
    \ std::toupper(ch);\n   }\n   return flipped;", "    std::string out(string.size());\n\
    \    for(int i=0; i<string.size(); i++)\n        if(string[i] >= 'a' && string[i]\
    \ <= 'z')\n            out[i] = string[i] - 32;\n        else\n            out[i]\
    \ = string[i];\n    return out;", '  // Code here ', "  for (auto &c : string)\n\
    \    if (c >= 'a' && c <= 'z')\n      c -= 32;\n    else if (c >= 'A' && c <=\
    \ 'Z')\n      c += 32;\n  return string;", "    for (auto &c : string) {\n   \
    \     if ('A' <= c && c <= 'Z') {\n            string += 'a' - 'A';\n        }\n\
    \        else if (c <= 'Z') {\n            string += 'A' - 'a';\n        }\n \
    \       else if (c <= 'z') {\n            string += 'a' - 'A';\n        }\n  \
    \      else if (c >= 'a') {\n            string += 'A' - 'a';\n        }\n   \
    \ }\n    return string;", "    for (int i = 0; i < string.length(); i++) {\n \
    \       if (string[i] == 'a')\n            string[i] = 'A';\n        else if (string[i]\
    \ == 'b')\n            string[i] = 'B';\n        else if (string[i] == 'c')\n\
    \            string[i] = 'C';\n        else if (string[i] == 'd')\n          \
    \  string[i] = 'D';\n        else if (string[i] == 'e')\n            string[i]\
    \ = 'E';\n        else if (string[i] == 'f')\n            string[i] = 'F';\n \
    \       else if (string[i] == 'g')\n            string[i] = 'G';\n        else\
    \ if (string[i] == 'h')\n            string[i] = 'H';\n        else if (string[i]\
    \ == 'i')\n            string[i] = 'I';\n        else if (string[i] == 'j')\n\
    \            string[i] = 'J';\n        else if (string[i] == 'k')\n          \
    \  string[i] = 'K';\n        else if (string[i] == 'l')\n            string[i]\
    \ = 'L';\n        else if (string[i] == 'm')\n            string[i] = 'M';\n \
    \       else if (string[i] == 'n')\n            string[i] = 'N';\n        else\
    \ if (string[i] == 'o')\n            string[i] = 'O';\n        else if (string[i]\
    \ == 'p')\n            string[i] = 'P';\n        else if (string[i] == 'q')\n\
    \            string[i] = 'Q';\n        else if (string[i] == 'r')\n          \
    \  string[i] = 'R';\n        else if (string[i] == 's')\n            string[i]\
    \ = 'S';\n        else if (string[i] == 't')\n            string[i] = 'T';\n \
    \       else if (string[i] == 'u')\n            string[i] = 'U';\n        else\
    \ if (string[i] == 'v')\n            string[i] = 'V';\n        else if (string[i]\
    \ == 'w')\n            string[i] = 'W';\n        else if (string[i] == 'x')\n\
    \            string[i] = 'X';\n        else if (string[i] == 'y')\n          \
    \  string[i] = 'Y';\n        else if (string[i] == 'z')\n            string[i]\
    \ = 'Z';\n        else\n            string[i] = string[i];\n    }\n    return\
    \ string;", "\tstring result = string;\n\tfor (size_t i = 0; i < result.size();\
    \ i++) {\n\t\tif (result[i] >= 'A' && result[i] <= 'Z') {\n\t\t\tresult[i] = result[i]\
    \ - 32;\n\t\t}\n\t\telse if (result[i] >= 'a' && result[i] <= 'z') {\n\t\t\tresult[i]\
    \ = result[i] + 32;\n\t\t}\n\t}\n\treturn result;", "  string out = \"\";\n  for\
    \ (int i = 0; i < string.size(); i++)\n    out += std::toupper(string[i]) + string[i];\n\
    \  return out;", "    // Write your code here.\n    string temp = string;\n  \
    \  for(int i =0;i<string.length();i++){\n        if(string[i] == 'A'){\n     \
    \       string[i] = 'a';\n        }\n        else if (string[i] == 'a'){\n   \
    \         string[i] = 'A';\n        }\n        else if (string[i] == 'B'){\n \
    \           string[i] = 'b';\n        }\n        else if (string[i] == 'b'){\n\
    \            string[i] = 'B';\n        }\n        else if (string[i] == 'C'){\n\
    \            string[i] = 'c';\n        }\n        else if (string[i] == 'c'){\n\
    \            string[i] = 'C';\n        }\n        else if (string[i] == 'D'){\n\
    \            string[i] = 'd';\n        }\n        else if (string[i] == 'd'){\n\
    \            string[i] = 'D';\n        }\n        else if (string[i] == 'E'){\n\
    \            string[i] = 'e';\n        }\n        else if (string[i] == 'e'){\n\
    \            string[i] = 'E';\n        }\n        else if (string[i] == 'F'){\n\
    \            string[i] = 'f';\n        }\n        else if (string[i] == 'f'){\n\
    \            string[i] = 'F';\n        }\n        else if (string[i] == 'G'){\n\
    \            string[i] = 'g';\n        }\n        else if (string[i] == 'g'){\n\
    \            string[i] = 'G';\n        }\n        else if (string[i] == 'H'){\n\
    \            string[i] = 'h';\n        }\n        else if (string[i] == 'h'){\n\
    \            string[i] = 'H';\n        }\n        else if (string[i] == 'I'){\n\
    \            string[i] = 'i';\n        }\n        else if (string[i] == 'i'){\n\
    \            string[i] = 'I';\n        }\n        else if (string[i] == 'J'){\n\
    \            string[i] = 'j';\n        }\n        else if (string[i] == 'j'){\n\
    \            string[i] = 'J';\n        }\n        else if (string[i] == 'K'){\n\
    \            string[i] = 'k';\n        }\n        else if (string[i] == 'k'){\n\
    \            string[i] = 'K';\n        }\n        else if (string[i] == 'L'){\n\
    \            string[i] = 'l';\n        }\n        else if (string[i] == 'l'){\n\
    \            string[i] = 'L';\n        }\n        else if (string[i] == 'M'){\n\
    \            string[i] = 'm';\n        }\n        else if (string[i] == 'm'){\n\
    \            string[i] = 'M';\n        }\n        else if (string[i] == 'N'){\n\
    \            string[i] = 'n';\n        }\n        else if (string[i] == 'n'){\n\
    \            string[i] = 'N';\n        }\n        else if (string[i] == 'O'){\n\
    \            string[i] = 'o';\n        }\n        else if (string[i] == '", " \
    \ int len = string.length();\n  if (len == 0) {\n    return \"\";\n  }\n  std::string\
    \ new_str = string(len - 1); // Copy all but the last char.\n  for (int i = 0;\
    \ i < len - 1; i++) {\n    new_str[i] = string[i] ^ (string[i] >= 'A' ? 0xFF :\
    \ 0x60);\n  }\n  new_str[len - 1] = string[len - 1] ^ (string[len - 1] >= 'A'\
    \ ? 0xFF : 0x60);\n  return new_str;", "    for(auto c: string) {\n        switch(c)\
    \ {\n        case 'a':\n        case 'b':\n        case 'c':\n        case 'd':\n\
    \        case 'e':\n        case 'f':\n        case 'g':\n        case 'h':\n\
    \        case 'i':\n        case 'j':\n        case 'k':\n        case 'l':\n\
    \        case 'm':\n        case 'n':\n        case 'o':\n        case 'p':\n\
    \        case 'q':\n        case 'r':\n        case 's':\n        case 't':\n\
    \        case 'u':\n        case 'v':\n        case 'w':\n        case 'x':\n\
    \        case 'y':\n        case 'z':\n            string += 'A';\n          \
    \  break;\n        case 'A':\n        case 'B':\n        case 'C':\n        case\
    \ 'D':\n        case 'E':\n        case 'F':\n        case 'G':\n        case\
    \ 'H':\n        case 'I':\n        case 'J':\n        case 'K':\n        case\
    \ 'L':\n        case 'M':\n        case 'N':\n        case 'O':\n        case\
    \ 'P':\n        case 'Q':\n        case 'R':\n        case 'S':\n        case\
    \ 'T':\n        case 'U':\n        case 'V':\n        case 'W':\n        case\
    \ 'X':\n        case 'Y':\n        case 'Z':\n            string += 'b';\n   \
    \         break;\n        case 'b':\n        case 'B':\n        case 'C':\n  \
    \      case 'D':\n        case 'E':\n        case 'F':\n        case 'G':\n  \
    \      case 'H':\n        case 'I':\n        case 'J':\n        case 'K':\n  \
    \      case 'L':\n        case 'M':\n        case 'N':\n        case 'O':\n  \
    \      case 'P':\n        case 'Q':\n        case 'R':\n        case 'S':\n  \
    \      case 'T':\n        case 'U':\n        case 'V':\n        case 'W':\n  \
    \      case 'X':\n        case 'Y':\n        case 'Z':\n            string +=\
    \ 'A';\n            break;\n        default:\n            string = string;\n \
    \       }\n    }\n    return string;", "  for (int i = 0; i < (int)string.size();\
    \ i++) {\n    if (string[i] == string::toupper(string[i])) {\n      string[i]\
    \ = string::tolower(string[i]);\n    }\n    if (string[i] == string::tolower(string[i]))\
    \ {\n      string[i] = string::toupper(string[i]);\n    }\n  }\n  return string;",
  "  // Iterate over every character of the given string.\n  for (int i = 0; i < string.length();\
    \ i++) {\n    // Determine whether the character is lowercase or not.\n    char\
    \ c = string[i];\n    // If the character is not lowercase, flip it else leave\
    \ the character.\n    if (c >= 'a' && c <= 'z') c = toupper(c);\n    // Otherwise,\
    \ flip the character.\n    string[i] = c;\n  }\n  return string;", "  for (auto\
    \ &character : string) {\n    if (character == 'a')\n      character = 'A';\n\
    \    else if (character == 'A')\n      character = 'a';\n  }\n  return string;",
  "  // Initialize result to the empty string.\n  std::string result;\n  // Iterate\
    \ over all characters in string.\n  for (auto character : string) {\n    // If\
    \ the character is lowercase and not already uppercase,\n    // append an uppercase\
    \ letter.\n    if (character < 'a' || character > 'z') result += toupper(character);\n\
    \    // Otherwise, append the lowercase letter.\n    else\n      result += character;\n\
    \  }\n  // Return result.\n  return result;", "    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            string[i]\
    \ -= 32;\n        } else if (string[i] >= 'A' && string[i] <= 'Z') {\n       \
    \     string[i] += 32;\n        }\n    }\n    return string;", "    for (auto\
    \ &c : string) {\n        auto upperCaseCase = std::toupper(c);\n        if (upperCaseCase\
    \ == c) upperCaseCase = std::tolower(c);\n        c = upperCaseCase;\n    }\n\
    \    return string;", "    std::transform(string.begin(), string.end(), string.begin(),\
    \ [](char c){return c == ' ' ? c : c ^ 0x20;});\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), [](char c){return c == ' ' ? '_' : c ^ 0x20;});\n\
    \    return string;", "  string str1(string);\n  for (int i = 0; str1.size();\
    \ i++) {\n    char c = str1[i];\n    if (c >= 'a' && c <= 'z') {\n      str1[i]\
    \ = c + 32;\n    } else if (c >= 'A' && c <= 'Z') {\n      str1[i] = c + 32;\n\
    \    }\n  }\n  return str1;", "    \n    int length = string.length();\n    \n\
    \    std::string new_string = \"\";\n    \n    for(int i = 0; i < length; i++)\
    \ {\n        \n        if(string[i] >= 'a' && string[i] <= 'z') {\n          \
    \  \n            new_string += string[i];\n            \n        }\n        \n\
    \        else if(string[i] >= 'A' && string[i] <= 'Z') {\n            \n     \
    \       new_string += string[i];\n            \n        }\n        \n        else\
    \ {\n            \n            new_string += string[i].toupper();\n          \
    \  \n        }\n        \n    }\n    \n    return new_string;\n    ", "  std::string\
    \ new_string;\n  for (int i = 0; i < string.size(); ++i) {\n    char c = string[i];\n\
    \    if (c == 'a') {\n      c = 'A';\n    } else if (c == 'A') {\n      c = 'a';\n\
    \    }\n    new_string.push_back(c);\n  }\n  return new_string;", "    std::string\
    \ lowercase_string = string;\n    std::transform(lowercase_string.begin(), lowercase_string.end(),\
    \ lowercase_string.begin(), ::tolower);\n    std::transform(lowercase_string.begin(),\
    \ lowercase_string.end(), lowercase_string.begin(), ::toupper);\n    return lowercase_string;",
  "    for (std::string::size_type i = 0; i < string.length(); i++) {\n        char\
    \ c = string[i];\n        if (std::isupper(c)) {\n            string[i] = tolower(c);\n\
    \        }\n    }\n    return string;", "    std::string result;\n    for (int\
    \ i = 0; i < string.size(); i++) {\n        result += string[i] >= 'A' && string[i]\
    \ <= 'Z' ? 'A' + (string[i] - 'A') + 1 :\n            string[i] >= 'a' && string[i]\
    \ <= 'z' ? 'a' + (string[i] - 'a') + 1 :\n            string[i];\n    }\n    return\
    \ result;", "  string res(string.begin(), string.end());\n  for (auto &c : res)\
    \ {\n    if (c >= 'A' && c <= 'Z') {\n      c ^= ('A' - 'a');\n      c ^= ('A'\
    \ - 'a');\n    }\n    if (c >= 'a' && c <= 'z') {\n      c ^= ('a' - 'A');\n \
    \     c ^= ('a' - 'A');\n    }\n  }\n  return res;", "    string s = \"\";\n \
    \   for (auto itr = string.begin(); itr != string.end(); itr++) {\n        if\
    \ (*itr >= 'a' && *itr <= 'z') {\n            *itr += 32;\n        }\n       \
    \ else if (*itr >= 'A' && *itr <= 'Z') {\n            *itr -= 32;\n        }\n\
    \        else {\n            s += *itr;\n        }\n    }\n    return s;", " \
    \   std::map<char, char> table_map;\n    for (auto &c : string)\n        table_map[c]\
    \ = toupper(c);\n    for (auto &c : string)\n        table_map[tolower(c)] = c;\n\
    \    string result;\n    for (auto &c : string)\n        result += table_map[c];\n\
    \    return result;", "    string s(string);\n    for (int i = 0; i < s.length();\
    \ i++) {\n        if (s[i] >= 'a' && s[i] <= 'z')\n            s[i] = s[i] - 32;\n\
    \        else if (s[i] >= 'A' && s[i] <= 'Z')\n            s[i] = s[i] + 32;\n\
    \    }\n    return s;", "    for (auto &c: string)\n        c = c >= 'a' && c\
    \ <= 'z' ? 'A' + c - 'a' : c >= 'A' && c <= 'Z' ? 'a' + c - 'A' : c;\n    return\
    \ string;", "  assert(string);\n  std::string result = string;\n  for (auto &c\
    \ : result) {\n    if (c >= 'a' && c <= 'z') {\n      c = toupper(c);\n    }\n\
    \    if (c >= 'A' && c <= 'Z') {\n      c = tolower(c);\n    }\n  }\n  return\
    \ result;", "  string s;\n  for (int i = 0; i < string.size(); ++i) {\n    s +=\
    \ (islower(string[i]) ? toupper(string[i]) : string[i]);\n  }\n  return s;", " \
    \ for (auto &c : string) {\n    if (c >= 'a' && c <= 'z') c ^= 32;\n    if (c\
    \ >= 'A' && c <= 'Z') c ^= 32;\n  }\n  return string;", "  std::string newString\
    \ = \"\";\n  for (int i = 0; i < string.length(); i++) {\n    if (string[i] >=\
    \ 'a' && string[i] <= 'z') {\n      newString += string[i] + string[i] + 'A';\n\
    \    } else if (string[i] >= 'A' && string[i] <= 'Z') {\n      newString += string[i]\
    \ + string[i] + 'a';\n    } else {\n      newString += string[i];\n    }\n  }\n\
    \  return newString;", "    std::for_each(string.begin(), string.end(), [](char\
    \ &c){\n        switch(c){\n            case 'a':\n                c = 'A';\n\
    \                break;\n            case 'b':\n                c = 'B';\n   \
    \             break;\n            case 'c':\n                c = 'C';\n      \
    \          break;\n            case 'd':\n                c = 'D';\n         \
    \       break;\n            case 'e':\n                c = 'E';\n            \
    \    break;\n            case 'f':\n                c = 'F';\n               \
    \ break;\n            case 'g':\n                c = 'G';\n                break;\n\
    \            case 'h':\n                c = 'H';\n                break;\n   \
    \         case 'i':\n                c = 'I';\n                break;\n      \
    \      case 'j':\n                c = 'J';\n                break;\n         \
    \   case 'k':\n                c = 'K';\n                break;\n            case\
    \ 'l':\n                c = 'L';\n                break;\n            case 'm':\n\
    \                c = 'M';\n                break;\n            case 'n':\n   \
    \             c = 'N';\n                break;\n            case 'o':\n      \
    \          c = 'O';\n                break;\n            case 'p':\n         \
    \       c = 'P';\n                break;\n            case 'q':\n            \
    \    c = 'Q';\n                break;\n            case 'r':\n               \
    \ c = 'R';\n                break;\n            case 's':\n                c =\
    \ 'S';\n                break;\n            case 't':\n                c = 'T';\n\
    \                break;\n            case 'u':\n                c = 'U';\n   \
    \             break;\n            case 'v':\n                c = 'V';\n      \
    \          break;\n            case 'w':\n                c = 'W';\n         \
    \       break;\n            case 'x':\n                c = 'X';\n            \
    \    break;\n            case 'y':\n                c = 'Y';\n               \
    \ break;\n            case 'z':\n                c = 'Z';\n                break;\n\
    \        }\n    });\n    return string;", "    string result=\"\";\n    for (size_t\
    \ i=0; i < string.length(); i++) {\n        if (string[i]>='a' && string[i]<='z'){\n\
    \            result += string[i]-'a' + 'A';\n        }else if (string[i]>='A'\
    \ && string[i]<='Z'){\n            result += string[i]-'A' + 'a';\n        }else\
    \ {\n            result += string[i];\n        }\n    }\n    return result;",
  "    for (auto &c: string) {\n        switch (c) {\n        case 'A':\n        case\
    \ 'a':\n            string.replace(c, 'a');\n            string.replace(c, 'A');\n\
    \            break;\n        case 'B':\n        case 'b':\n            string.replace(c,\
    \ 'b');\n            string.replace(c, 'B');\n            break;\n        default:\n\
    \            break;\n        }\n    }\n    return string;", "  std::replace(string.begin(),\
    \ string.end(), ' ', 'A');\n  std::transform(string.begin(), string.end(), string.begin(),\
    \ ::toupper);\n  std::transform(string.begin(), string.end(), string.begin(),\
    \ ::tolower);\n  return string;", "  for (auto &c : string)\n    if (c == 'a'\
    \ || c == 'b' || c == 'c' || c == 'd' || c == 'e' || c == 'f' || c == 'g' || c\
    \ == 'h' || c == 'i' || c == 'j' || c == 'k' || c == 'l' || c == 'm' || c == 'n'\
    \ || c == 'o' || c == 'p' || c == 'q' || c == 'r' || c == 's' || c == 't' || c\
    \ == 'u' || c == 'v' || c == 'w' || c == 'x' || c == 'y' || c == 'z')\n      c\
    \ = c ^ 32;\n  return string;", "    for (auto &c : string)\n    {\n        if\
    \ (c == tolower(c))\n        {\n            c = toupper(c);\n        }\n     \
    \   else\n        {\n            c = tolower(c);\n        }\n    }\n    return\
    \ string;", "  std::replace(string\n                .begin(), string\n       \
    \         .end(), string\n                .begin(),\n                [](char c)\
    \ -> char {\n                  return ::toupper(c);\n                });\n  std::reverse(string\n\
    \                .begin(), string\n                .end(),\n                [](char\
    \ c) -> char {\n                  return ::tolower(c);\n                });\n\
    \  return string;", "  for (size_t i = 0; i < string.length(); ++i) {\n    string[i]\
    \ = toupper(string[i]);\n    string[i+1] = tolower(string[i+1]);\n  }\n  return\
    \ string;", "  assert(!string.empty());\n  std::string result = string;\n  for\
    \ (int i = 0; i <= string.length() - 1; ++i) {\n    if (string[i] >= 'a' && string[i]\
    \ <= 'z') {\n      result[string.length() - i - 1] = string[string.length() -\
    \ i - 1] + string[i];\n    }\n    else if (string[i] >= 'A' && string[i] <= 'Z')\
    \ {\n      result[string.length() - i - 1] = string[string.length() - i - 1] +\
    \ string[i];\n    }\n    else if (string[i] >= '0' && string[i] <= '9') {\n  \
    \    result[string.length() - i - 1] = string[string.length() - i - 1] + string[i];\n\
    \    }\n  }\n  return result;", "    std::string result = string;\n    for (std::size_t\
    \ i = 0; i < result.size(); ++i) {\n        switch (result[i]) {\n        case\
    \ 'a':\n            result[i] = 'A';\n            break;\n        case 'b':\n\
    \            result[i] = 'B';\n            break;\n        case 'c':\n       \
    \     result[i] = 'C';\n            break;\n        case 'd':\n            result[i]\
    \ = 'D';\n            break;\n        case 'e':\n            result[i] = 'E';\n\
    \            break;\n        case 'f':\n            result[i] = 'F';\n       \
    \     break;\n        case 'g':\n            result[i] = 'G';\n            break;\n\
    \        case 'h':\n            result[i] = 'H';\n            break;\n       \
    \ case 'i':\n            result[i] = 'I';\n            break;\n        case 'j':\n\
    \            result[i] = 'J';\n            break;\n        case 'k':\n       \
    \     result[i] = 'K';\n            break;\n        case 'l':\n            result[i]\
    \ = 'L';\n            break;\n        case 'm':\n            result[i] = 'M';\n\
    \            break;\n        case 'n':\n            result[i] = 'N';\n       \
    \     break;\n        case 'o':\n            result[i] = 'O';\n            break;\n\
    \        case 'p':\n            result[i] = 'P';\n            break;\n       \
    \ case 'q':\n            result[i] = 'Q';\n            break;\n        case 'r':\n\
    \            result[i] = 'R';\n            break;\n        case 's':\n       \
    \     result[i] = 'S';\n            break;\n        case 't':\n            result[i]\
    \ = 'T';\n            break;\n        case 'u':\n            result[i] = 'U';\n\
    \            break;\n        case 'v':\n            result[i] = 'V';\n       \
    \     break;\n        case 'w':\n            result[i] = 'W';\n            break;\n\
    \        case 'x':\n            result[i] = 'X';\n            break;\n       \
    \ case 'y':\n            result[i] = 'Y';\n            break;\n        case 'z':\n\
    \            result[i] = 'Z';\n            break;\n        }\n    }\n    return\
    \ result;", "  // Create string with 0 size.\n  std::string temp(string.size());\n\
    \n  for (int i = 0; i < string.size(); i++) {\n    // Convert the character to\
    \ upper case and append it to string.\n    temp[i] = toupper(string[i]);\n  }\n\
    \n  return temp;", "  string new_string = \"\";\n  for (int i = 0; i < string.length();\
    \ i++) {\n    char current_char = string[i];\n    char next_char = string[i+1];\n\
    \    new_string += (current_char == next_char) ? (current_char - 32) : current_char;\n\
    \  }\n  return new_string;", "    std::string s = string;\n    for (size_t i =\
    \ 0; i < s.length(); ++i) {\n        s[i] = toupper(s[i]);\n    }\n    return\
    \ s;", "\tstd::string result=\"\";\n\tfor(auto &c:string)\n\t\tresult+=toupper(c)^tolower(c);\n\
    \treturn result;", "  for (int i = 0; i < string.length(); i++) {\n    char c\
    \ = string[i];\n    if (std::islower(c)) {\n      string[i] = std::toupper(c);\n\
    \    } else if (std::isupper(c)) {\n      string[i] = std::tolower(c);\n    }\n\
    \  }\n  return string;", "  std::string newString;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    if (string[i] >= 'a' && string[i] <= 'z')\n      newString.append(tolower(string[i]));\n\
    \    else if (string[i] >= 'A' && string[i] <= 'Z')\n      newString.append(toupper(string[i]));\n\
    \    else\n      newString.append(string[i]);\n  }\n  return newString;", "  \
    \  std::string res = \"\";\n    int len = string.length();\n    for (int i = 0;\
    \ i < len; i++) {\n        if (string[i] == string[i].toupper()) {\n         \
    \   res += string[i].tolower();\n        } else {\n            res += string[i].toupper();\n\
    \        }\n    }\n    return res;", "    std::string output;\n    for (int i\
    \ = 0; i < string.size(); i++) {\n        output[i] = tolower(string[i]);\n  \
    \  }\n    return output;", "  int len = string.length();\n  for (int i = 0; i\
    \ < len; i++) {\n    if (string[i] == string::toupper(string[i])) {\n      string[i]\
    \ = string::tolower(string[i]);\n    }\n  }\n  return string;", "  std::map<char,\
    \ char> char_map;\n  for (char &c : string)\n    char_map[c] = toupper(c);\n \
    \ string result(string.begin(), string.end());\n  for (char &c : string)\n   \
    \ c = char_map[c];\n  return result;", "  string output = string;\n  for (char\
    \ c : output)\n    if (('A' <= c && c <= 'Z') || (c <= 'a' && c >= 'z'))\n   \
    \   c = toupper(c);\n  output = output;\n  for (char c : output)\n    if (('Z'\
    \ <= c && c <= 'a') || (c <= 'z' && c >= 'a'))\n      c = tolower(c);\n  return\
    \ output;", "    for(std::string::iterator it = string.begin(); it != string.end();\
    \ ++it) {\n        if(*it >= 'a' && *it <= 'z') {\n            *it = (*it)+'A'-('a'-'A');\n\
    \        }\n        else if(*it >= 'A' && *it <= 'Z') {\n            *it = (*it)+'a'-('A'-'a');\n\
    \        }\n        else if(*it >= '0' && *it <= '9') {\n            *it = (*it)+'0'-('0'-'0');\n\
    \        }\n        else {\n            *it = (*it)+((*it)>=97 ? *it - 'A'+'a'\
    \ : *it - 'a'+26);\n        }\n    }\n    return string;", "  string new_string;\n\
    \  for(int i = 0; i < string.size(); i++){\n    if(string[i] >= 'a' && string[i]\
    \ <= 'z'){\n      new_string += string[i];\n    }\n    else{\n      new_string\
    \ += toupper((int)string[i]);\n    }\n  }\n  return new_string;", "    std::transform(\n\
    \        string.begin(), string.end(),\n        string.begin(), ::toupper\n  \
    \  );\n    return std::string(\n        string.begin(), string.end()\n    );",
  "    for (auto& c : string) c = toupper(c);\n    return string;", "  for (int i\
    \ = 0; i < string.length(); i++) {\n    char c = string[i];\n    if (islower(c))\
    \ {\n      string[i] = toupper(c);\n    } else {\n      string[i] = tolower(c);\n\
    \    }\n  }\n  return string;", "    std::transform(string.begin(), string.end(),\
    \ string.begin(), ::toupper);\n    std::transform(string.begin(), string.end(),\
    \ string.begin(), ::tolower);\n    return string;", "    for (std::string::size_type\
    \ i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i]\
    \ <= 'z') {\n            string[i] = string[i] - 32;\n        }\n        if (string[i]\
    \ >= 'A' && string[i] <= 'Z') {\n            string[i] = string[i] + 32;\n   \
    \     }\n    }\n    return string;", "    for (std::string::iterator i = string.begin();\
    \ i != string.end(); i++) {\n        if (*i == ' ' || *i == '\\t' || *i == '\\\
    n' || *i == '\\r') {\n            continue;\n        }\n        if (*i == 'a'\
    \ && *(i + 1) == 'A' && *(i + 2) == 'a') {\n            *i = toupper(*i);\n  \
    \          i += 2;\n            continue;\n        }\n        if (*i == 'A' &&\
    \ *(i + 1) == 'a' && *(i + 2) == 'A') {\n            *i = tolower(*i);\n     \
    \       i += 2;\n            continue;\n        }\n        continue;\n    }\n\
    \    return string;", "  for (int i = 0; i < string.length(); i++) {\n    if (string[i]\
    \ == 'a') {\n      string[i] = 'A';\n    } else if (string[i] == 'A') {\n    \
    \  string[i] = 'a';\n    }\n  }\n  return string;", "  std::map<char, char> new_map;\n\
    \  for (char c : string) {\n    new_map.emplace(c, toupper(c));\n  }\n  std::string\
    \ result = \"\";\n  for (char c : string) {\n    result += new_map.at(c);\n  }\n\
    \  return result;", "    string output = \"\";\n    for(auto c : string)\n   \
    \ {\n        if(c < 'A' || c > 'Z')\n        {\n            output += toupper((unsigned\
    \ char)c);\n        }\n        else\n        {\n            output += tolower((unsigned\
    \ char)c);\n        }\n    }\n    return output;", "    for(int i=0; i<string.length();\
    \ i++) {\n        if(string[i] >= 'a' && string[i] <= 'z')\n            string[i]\
    \ = string[i] - 32;\n        else if(string[i] >= 'A' && string[i] <= 'Z')\n \
    \           string[i] = string[i] + 32;\n    }\n    return string;", "    for\
    \ (auto& c : string)\n        c = toupper(c);\n    return string;", "    for (char\
    \ c : string)\n        if ('A' <= c && c <= 'Z') \n            string += (char)\
    \ (c + 32 - (c | 32));\n        else \n            string += c;\n    return string;",
  "  // Write your code here.\n  string flipped = \"\";\n  for (int i = 0; i < string.length();\
    \ i++) {\n    char c = string[i];\n    if (string[i] == string::toupper(c)) {\n\
    \      flipped += string[i];\n      flipped += string::tolower(string[i]);\n \
    \   } else {\n      flipped += string[i];\n    }\n  }\n  return flipped;", " \
    \ for (auto &c : string) {\n    if (std::toupper(c) == c) c = std::tolower(c);\n\
    \  }\n  return string;", "    std::string res;\n    int len = string.length();\n\
    \    for (int i = 0; i < len; ++i) {\n        char c = string[i];\n        if\
    \ ('a' <= c && c <= 'z') {\n            res += toupper(c);\n        } else if\
    \ (c == 'A') {\n            res += 'a';\n        } else if (c == 'B') {\n    \
    \        res += 'b';\n        } else if (c == 'C') {\n            res += 'c';\n\
    \        } else if (c == 'D') {\n            res += 'd';\n        } else if (c\
    \ == 'E') {\n            res += 'e';\n        } else if (c == 'F') {\n       \
    \     res += 'f';\n        } else if (c == 'G') {\n            res += 'g';\n \
    \       } else if (c == 'H') {\n            res += 'h';\n        } else if (c\
    \ == 'I') {\n            res += 'i';\n        } else if (c == 'J') {\n       \
    \     res += 'j';\n        } else if (c == 'K') {\n            res += 'k';\n \
    \       } else if (c == 'L') {\n            res += 'l';\n        } else if (c\
    \ == 'M') {\n            res += 'm';\n        } else if (c == 'N') {\n       \
    \     res += 'n';\n        } else if (c == 'O') {\n            res += 'o';\n \
    \       } else if (c == 'P') {\n            res += 'p';\n        } else if (c\
    \ == 'Q') {\n            res += 'q';\n        } else if (c == 'R') {\n       \
    \     res += 'r';\n        } else if (c == 'S') {\n            res += 's';\n \
    \       } else if (c == 'T') {\n            res += 't';\n        } else if (c\
    \ == 'U') {\n            res += 'u';\n        } else if (c == 'V') {\n       \
    \     res += 'v';\n        } else if (c == 'W') {\n            res += 'w';\n \
    \       } else if (c == 'X') {\n            res += 'x';\n        } else if (c\
    \ == 'Y') {\n            res += 'y';\n        } else if (c == 'Z') {\n       \
    \     res += 'z';\n        } else {\n            res += c;\n        }\n    }\n\
    \    return res;", "    // Iterate through all the characters in the string.\n\
    \    for (int i = 0; i < string.length(); i++) {\n        // If the character\
    \ is an uppercase character, flip it to lowercase.\n        if (string[i] >= 'A'\
    \ && string[i] <= 'Z') {\n            string[i] = string[i] - 32;\n        }\n\
    \        // If the character is an lowercase character, flip it to uppercase.\n\
    \        else if (string[i] >= 'a' && string[i] <= 'z') {\n            string[i]\
    \ = string[i] + 32;\n        }\n    }\n    return string;", "  int size = string.size();\n\
    \  std::string result;\n  for (int i = 0; i < size; i++) {\n    if (isupper(string[i]))\
    \ {\n      result += tolower(string[i]);\n    } else {\n      result += string[i];\n\
    \    }\n  }\n  return result;", "  std::transform(string.length(), string.begin(),\
    \ string.begin(), ::toupper);\n  std::transform(string.length(), string.begin(),\
    \ string.begin(), ::tolower);\n  return string;", "    std::string result = string;\n\
    \    for (auto c : string)\n    {\n        if (c >= 'A' && c <= 'Z')\n       \
    \ {\n            result += static_cast<char>('a'-static_cast<int>(c));\n     \
    \   }\n        else if (c >= 'a' && c <= 'z')\n        {\n            result +=\
    \ static_cast<char>('A'-static_cast<int>(c));\n        }\n        else\n     \
    \   {\n            result += c;\n        }\n    }\n    return result;", "  std::transform(string.begin(),\
    \ string.end(), string.begin(), ::toupper);\n  std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n  return string;", "  for (auto i\
    \ : string) {\n    if (i != 'a'&&i != 'A'&&i != 'e'&&i != 'E'&&i != 'i'&&i !=\
    \ 'I'&&i != 'o'&&i != 'O'&&i != 'u'&&i != 'U')\n    {\n        char tmp = i;\n\
    \        i = tolower(i);\n        string += tmp;\n    }\n  }\n  return string;",
  "  for (size_t i = 0; i < string.length(); i++) {\n    const char c = string[i];\n\
    \    if (toupper(c) == c)\n      string[i] = tolower(c);\n    else if (tolower(c)\
    \ == c)\n      string[i] = toupper(c);\n  }\n  return string;", "  string temp;\n\
    \  for (int i = 0; i < string.size(); ++i) {\n    if (string[i] >= 'a' && string[i]\
    \ <= 'z') {\n      temp += string[i];\n    } else {\n      temp += string[i] +\
    \ 32 - (string[i] >= 'A' && string[i] <= 'Z');\n    }\n  }\n  return temp;", " \
    \   string str1(string);\n    int len = str1.length();\n    for(int i = 0; i <\
    \ len; i++) {\n        if(str1[i] >= 'a' && str1[i] <= 'z')\n            str1[i]\
    \ += 32;\n    }\n    return str1;", "  std::transform(string.begin(), string.end(),\
    \ string.begin(), ::toupper);\n  std::transform(string.begin(), string.end(),\
    \ string.begin(), ::tolower);\n  return string;", "    assert(string.size() >\
    \ 0);\n    std::string new_string = \"\";\n    for (char &character : string)\
    \ {\n        switch (character) {\n            case 'a':\n                new_string\
    \ += 'A';\n                break;\n            case 'b':\n                new_string\
    \ += 'B';\n                break;\n            case 'c':\n                new_string\
    \ += 'C';\n                break;\n            case 'd':\n                new_string\
    \ += 'D';\n                break;\n            case 'e':\n                new_string\
    \ += 'E';\n                break;\n            case 'f':\n                new_string\
    \ += 'F';\n                break;\n            case 'g':\n                new_string\
    \ += 'G';\n                break;\n            case 'h':\n                new_string\
    \ += 'H';\n                break;\n            case 'i':\n                new_string\
    \ += 'I';\n                break;\n            case 'j':\n                new_string\
    \ += 'J';\n                break;\n            case 'k':\n                new_string\
    \ += 'K';\n                break;\n            case 'l':\n                new_string\
    \ += 'L';\n                break;\n            case 'm':\n                new_string\
    \ += 'M';\n                break;\n            case 'n':\n                new_string\
    \ += 'N';\n                break;\n            case 'o':\n                new_string\
    \ += 'O';\n                break;\n            case 'p':\n                new_string\
    \ += 'P';\n                break;\n            case 'q':\n                new_string\
    \ += 'Q';\n                break;\n            case 'r':\n                new_string\
    \ += 'R';\n                break;\n            case 's':\n                new_string\
    \ += 'S';\n                break;\n            case 't':\n                new_string\
    \ += 'T';\n                break;\n            case 'u':\n                new_string\
    \ += 'U';\n                break;\n            case 'v':\n                new_string\
    \ += 'V';\n                break;\n            case 'w':\n                new_string\
    \ += 'W';\n                break;\n            case 'x':\n                new_string\
    \ += 'X';\n                break;\n            case 'y':\n                new_string\
    \ += 'Y';\n                break;\n            case 'z':\n                new_string\
    \ += 'Z';\n                break;\n            default:\n                new_string\
    \ += character;\n        }\n    }\n    return new_string;", "    std::string result;\n\
    \    for(char &c : string)\n        c = tolower(c);\n    return string.isalpha()\
    \ ? result : string.swapcase();", "  for (int i = 0; i < string.length(); i++)\
    \ {\n    char c = string[i];\n    if (c >= 'a' && c <= 'z') {\n      string[i]\
    \ = c ^ 'A';\n    } else if (c >= 'A' && c <= 'Z') {\n      string[i] = c ^ 'a';\n\
    \    }\n  }\n  return string;", "  // Return an empty string if there are no characters.\n\
    \  if (string.size() == 0)\n    return \"\";\n  // Flip each character in the\
    \ string from lowercase to uppercase.\n  for (int i = 0; i < string.size(); ++i)\
    \ {\n    string[i] = string[i] ^ 32;\n  }\n  return string;", "    string new_string\
    \ = \"\";\n    for (auto &c : string) {\n        if (c == 'a') {\n           \
    \ c = 'A';\n        } else if (c == 'b') {\n            c = 'B';\n        } else\
    \ if (c == 'c') {\n            c = 'C';\n        } else if (c == 'd') {\n    \
    \        c = 'D';\n        } else if (c == 'e') {\n            c = 'E';\n    \
    \    } else if (c == 'f') {\n            c = 'F';\n        } else if (c == 'g')\
    \ {\n            c = 'G';\n        } else if (c == 'h') {\n            c = 'H';\n\
    \        } else if (c == 'i') {\n            c = 'I';\n        } else if (c ==\
    \ 'j') {\n            c = 'J';\n        } else if (c == 'k') {\n            c\
    \ = 'K';\n        } else if (c == 'l') {\n            c = 'L';\n        } else\
    \ if (c == 'm') {\n            c = 'M';\n        } else if (c == 'n') {\n    \
    \        c = 'N';\n        } else if (c == 'o') {\n            c = 'O';\n    \
    \    } else if (c == 'p') {\n            c = 'P';\n        } else if (c == 'q')\
    \ {\n            c = 'Q';\n        } else if (c == 'r') {\n            c = 'R';\n\
    \        } else if (c == 's') {\n            c = 'S';\n        } else if (c ==\
    \ 't') {\n            c = 'T';\n        } else if (c == 'u') {\n            c\
    \ = 'U';\n        } else if (c == 'v') {\n            c = 'V';\n        } else\
    \ if (c == 'w') {\n            c = 'W';\n        } else if (c == 'x') {\n    \
    \        c = 'X';\n        } else if (c == 'y') {\n            c = 'Y';\n    \
    \    } else if (c == 'z') {\n            c = 'Z';\n        } else if (c == 'A')\
    \ {\n            c = 'a';\n        } else if (c == 'B') {\n            c = 'b';\n\
    \        } else if (c == 'C') {\n            c = 'c';\n        } else if (c ==\
    \ 'D') {\n            c = 'd';\n        } else if (c == 'E') {\n            c\
    \ = 'e';\n        } else if (c == 'F') {\n            c = 'f';\n        } else\
    \ if (c == 'G') {\n            c = 'g';\n        } else if (c == 'H') {\n    \
    \        c = 'h';\n        } else if (c == 'I') {\n            c = 'i';\n    \
    \    } else if (c == 'J') {\n            c = 'j';\n        } else if (c == 'K')\
    \ {\n            c = 'k';\n        } else if (c == 'L') {\n            c = 'l';\n\
    \        } else if (c == 'M') {\n            c = 'm';\n        } else if (c ==\
    \ 'N') {\n            c = 'n';\n        } else if (c == 'O') {\n            c\
    \ = 'o';\n        } else if (c == 'P') {\n            c = 'p';\n        } else\
    \ if (c == 'Q') {\n            c = 'q';\n        } else if (c == 'R') {\n    \
    \        c = 'r';\n        } else if (c == 'S') {\n            c = 's';\n    \
    \    } else if (c == 'T') {", "    assert(string.size() > 0);\n    std::string\
    \ out = string;\n    for (unsigned int i = 0; i < out.size(); i++) {\n       \
    \ out[i] = toupper(out[i]);\n        out[i] = tolower(out[i]);\n    }\n    return\
    \ out;", "    for (size_t i = 0; i < string.length(); ++i) {\n        if (string[i]\
    \ >= 'A' && string[i] <= 'Z') {\n            string[i] = string[i] + 32;\n   \
    \     }\n        else if (string[i] >= 'a' && string[i] <= 'z') {\n          \
    \  string[i] = string[i] - 32;\n        }\n    }\n    return string;", "  for\
    \ (char &c : string) {\n    if (c >= 'a' && c <= 'z') {\n      c ^= ('a' - 'A');\n\
    \    } else if (c >= 'A' && c <= 'Z') {\n      c ^= ('A' - 'a');\n    }\n  }\n\
    \  return string;", "    string rep(string.size(), 'a');\n    rep.erase(std::transform(rep.begin(),\
    \ rep.end(), rep.begin(),\n                             [](char c) {return (c\
    \ >= 'a' && c <= 'z') ? c - 32 : c;}));\n    rep.erase(std::transform(rep.begin(),\
    \ rep.end(), rep.begin(),\n                             [](char c) {return (c\
    \ >= 'A' && c <= 'Z') ? c + 32 : c;}));\n    return rep;", "    for (auto &c :\
    \ string)\n        if (std::toupper(c) != std::tolower(c))\n            string\
    \ += (c + std::toupper(c));\n    return string;", "  for (int i = 0; i < string.length();\
    \ i++) {\n    if (string[i] >= 'a' && string[i] <= 'z')\n      string[i] = string[i]\
    \ - 32;\n    if (string[i] >= 'A' && string[i] <= 'Z')\n      string[i] = string[i]\
    \ + 32;\n  }\n  return string;", "  int flag = 0;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    if (string[i] >= 'a' && string[i] <= 'z') {\n      flag++;\n   \
    \   string[i] = string[i] - 32;\n    } else if (string[i] >= 'A' && string[i]\
    \ <= 'Z') {\n      flag++;\n      string[i] = string[i] + 32;\n    } else {\n\
    \      flag = 0;\n    }\n  }\n  return string;", "  string t = string;\n  for\
    \ (int i = 0; i < t.length(); i++) {\n    if (t.at(i) == 'a' || t.at(i) == 'e'\
    \ || t.at(i) == 'i' || t.at(i) == 'o' || t.at(i) == 'u' || t.at(i) == 'Y' || t.at(i)\
    \ == 'y') {\n      t.at(i) = t.at(i) + 32;\n    }\n    if (t.at(i) == 'b' || t.at(i)\
    \ == 'd' || t.at(i) == 'f' || t.at(i) == 'g' || t.at(i) == 'h' || t.at(i) == 'j'\
    \ || t.at(i) == 'k' || t.at(i) == 'l' || t.at(i) == 'm' || t.at(i) == 'p' || t.at(i)\
    \ == 'q' || t.at(i) == 'r' || t.at(i) == 's' || t.at(i) == 't' || t.at(i) == 'v'\
    \ || t.at(i) == 'w' || t.at(i) == 'x' || t.at(i) == 'z') {\n      t.at(i) = t.at(i)\
    \ - 32;\n    }\n  }\n  return t;", "  string output = string;\n  for (int i =\
    \ 0; i < output.length(); i++) {\n    if (islower(output[i])) {\n      output[i]\
    \ = toupper(output[i]);\n    }\n    if (isupper(output[i])) {\n      output[i]\
    \ = tolower(output[i]);\n    }\n  }\n  return output;", "    string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] == string::toupper(s[i]))\
    \ {\n            s[i] = string::tolower(s[i]);\n        }\n        if (s[i] ==\
    \ string::tolower(s[i])) {\n            s[i] = string::toupper(s[i]);\n      \
    \  }\n    }\n    return s;", "    for(auto &it: string) if(std::islower(it)) it\
    \ = std::toupper(it);\n    return string;", "    for (auto c: string) {\n    \
    \    c = (c >= 'a' && c <= 'z') ? c - 32 : c;\n        c = (c >= 'A' && c <= 'Z')\
    \ ? c + 32 : c;\n    }\n    return string;", "    for (std::size_t i = 0; i <\
    \ string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n\
    \            string[i] = static_cast<char>(string[i] + 32);\n        } else if\
    \ (string[i] >= 'a' && string[i] <= 'z') {\n            string[i] = static_cast<char>(string[i]\
    \ - 32);\n        }\n    }\n    return string;", "    string new_string;\n   \
    \ for (auto & ch : string) {\n        if (('A' <= ch && ch <= 'Z')) ch ^= 'a';\
    \ // Uppercase A -> a\n        if (('a' <= ch && ch <= 'z')) ch ^= 'A'; // Lowercase\
    \ a -> A\n        new_string.push_back(ch);\n    }\n    return new_string;", " \
    \ assert(!string.empty());\n  string t = string;\n  std::transform(t.begin(),\
    \ t.end(), t.begin(), ::toupper);\n  std::transform(t.begin(), t.end(), t.begin(),\
    \ ::tolower);\n  return t;", "    for(size_t i = 0; i < string.length(); i++)\
    \ {\n        if(isupper(string[i])) string[i] = tolower(string[i]);\n        else\
    \ string[i] = toupper(string[i]);\n    }\n    return string;", "    for (char\
    \ &i : string) {\n        i = tolower(i);\n    }\n    return string;", "    for\
    \ (auto ch : string) {\n        string += (ch >= 'a' && ch <= 'z') ? ch-'a' +\
    \ 'A' : ch-'A' + 'a';\n    }\n    return string;", "    std::string res = string;\n\
    \    for (auto &letter : string) {\n        if (letter >= 'a' && letter <= 'z')\n\
    \            letter = letter ^ ('A' - 'a');\n        else if (letter >= 'A' &&\
    \ letter <= 'Z')\n            letter = letter ^ 'a' - 'A';\n        else if (letter\
    \ == '_')\n            letter = '-';\n    }\n    return res;", "    std::string\
    \ result(string.size(), string[0]);\n    for (int i = 1; i < string.size(); ++i)\
    \ {\n        char c = string[i];\n        if ('A' <= c && c <= 'Z') {\n      \
    \      result[i] = c + 32;\n        } else {\n            result[i] = c;\n   \
    \     }\n    }\n    return result;", "    for (size_t i = 0; i < string.length();\
    \ ++i) {\n        std::string s = string(string.begin() + i, string.begin() +\
    \ i + 1);\n        string.erase(string.begin() + i, string.begin() + i + 1);\n\
    \        string += s;\n    }\n    return string;", "  for(std::string::size_type\
    \ i = 0; i < string.length(); i++) {\n    if(string[i] == tolower(string[i]))\n\
    \      string[i] = toupper(string[i]);\n  }\n  return string;", "    string out\
    \ = string;\n    std::transform(string.begin(), string.end(), out.begin(), ::toupper);\n\
    \    std::transform(out.begin(), out.end(), out.begin(), ::tolower);\n    return\
    \ out;", "  std::string ans = string;\n  for (int i = 0; i < ans.size(); i++)\
    \ {\n    char temp = ans[i];\n    ans[i] = ans[string.length() - 1 - i];\n   \
    \ ans[string.length() - 1 - i] = temp;\n  }\n  return ans;", "    for (auto c\
    \ : string)\n        c = toupper(c);\n    return string;", "    assert(!string.empty());\n\
    \    \n    std::string result(string);\n    for (auto c : string) {\n        if\
    \ ('A' <= c && c <= 'Z') {\n            result += static_cast<char>(c - 'A' +\
    \ 'a');\n        } else {\n            result += c;\n        }\n    }\n    return\
    \ result;", "    for(std::string::iterator it = string.begin(); it != string.end();\
    \ ++it) {\n        if(*it >= 'A' && *it <= 'Z') {\n            *it = (*it) - 'A'\
    \ + 'a';\n        }\n        else if(*it >= 'a' && *it <= 'z') {\n           \
    \ *it = (*it) - 'a' + 'A';\n        }\n    }\n    return string;", "    std::string\
    \ s;\n    s.reserve(string.length());\n    for (auto c : string)\n        if (toupper(c)\
    \ == c)\n            s += tolower(c);\n        else\n            s += c;\n   \
    \ return s;", "    for (auto it = string.begin(); it != string.end(); ++it)\n\
    \    {\n        if (*it >= 'a' && *it <= 'z')\n            *(it+1) = static_cast<char>(toupper((*it)));\n\
    \        else\n            *(it+1) = static_cast<char>(tolower((*it)));\n    }\n\
    \    return string;", "  string new_string;\n  for(unsigned int i = 0; i < string.size();\
    \ i++) {\n    if (string[i] == '_') {\n      new_string += string[i];\n    }\n\
    \    else if (string[i] >= 'a' && string[i] <= 'z') {\n      new_string += string[i]\
    \ - 'a' + 'A';\n    }\n    else {\n      new_string += string[i];\n    }\n  }\n\
    \  return new_string;", "    std::map<char, char> mapping;\n    for (char ch :\
    \ string) {\n        mapping[ch] = toupper(ch);\n    }\n    std::string result;\n\
    \    for (char ch : string) {\n        result.append(mapping[ch]);\n    }\n  \
    \  return result;", "    std::string result = string;\n    for (size_t i = 0;\
    \ i < result.size(); ++i) {\n        if (result[i] >= 'a' && result[i] <= 'z')\n\
    \            result[i] = toupper(result[i]);\n        else if (result[i] >= 'A'\
    \ && result[i] <= 'Z')\n            result[i] = tolower(result[i]);\n    }\n \
    \   return result;", "  string s;\n  for (char c : string)\n    s += (c >= 'a'\
    \ && c <= 'z') ? c + 32 : c;\n  return s;", "  string s = string;\n  for (auto\
    \ i : s) {\n    if (i == tolower(i)) {\n      s[i] = toupper(i);\n    }\n  }\n\
    \  return s;", "    std::string res = string;\n    for (unsigned int i = 0; i\
    \ < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z')\
    \ {\n            res += string[i] + 'a' - 'A';\n        }\n    }\n    return res;",
  "    std::string s = \"\";\n    for (auto x : string)\n        if (x != ' ')\n \
    \           s += (x >= 'A' && x <= 'Z') ? (x - 'A' + 'a') : (x == 'a' ? 'A' :\
    \ x);\n    return s;", "  // Store the string length\n  int len = string.length();\n\
    \  // Create an empty string for the result\n  std::string result = '';\n  for\
    \ (int i = 0; i < len; i++) {\n    char ch = string[i];\n    if (islower(ch))\
    \ {\n      result += toupper(ch);\n    } else {\n      result += tolower(ch);\n\
    \    }\n  }\n  return result;", "    for (auto &c : string) {\n        if (c >=\
    \ 'a' && c <= 'z')\n            c = c - 'a' + 'A';\n        if (c >= 'A' && c\
    \ <= 'Z')\n            c = c - 'A' + 'a';\n    }\n    return string;", "  // Initialization\n\
    \  string flipped_string(string);\n\n  for (int i = 0; i < string.length(); i++)\
    \ {\n    switch (string[i]) {\n      case 'a':\n      case 'b':\n      case 'c':\n\
    \      case 'd':\n      case 'e':\n      case 'f':\n      case 'g':\n      case\
    \ 'h':\n      case 'i':\n      case 'j':\n      case 'k':\n      case 'l':\n \
    \     case 'm':\n      case 'n':\n      case 'o':\n      case 'p':\n      case\
    \ 'q':\n      case 'r':\n      case 's':\n      case 't':\n      case 'u':\n \
    \     case 'v':\n      case 'w':\n      case 'x':\n      case 'y':\n      case\
    \ 'z':\n        flipped_string[i] = string[i];\n        break;\n      default:\n\
    \        flipped_string[i] = 'A' + string[i] - 1;\n    }\n  }\n\n  return flipped_string;",
  "  std::string s = string;\n  for (int i = 0; i < s.size(); i++) {\n    char c =\
    \ s[i];\n    if (c >= 'a' && c <= 'z') {\n      s[i] = c + 32;\n    } else if\
    \ (c >= 'A' && c <= 'Z') {\n      s[i] = c - 32;\n    }\n  }\n  return s;", " \
    \ string s = string;\n  for (size_t i = 0; i < s.length(); i++) {\n    if (s[i]\
    \ >= 'a' && s[i] <= 'z')\n      s[i] += ('a' - 'A');\n    else if (s[i] >= 'A'\
    \ && s[i] <= 'Z')\n      s[i] += ('A' - 'a');\n  }\n  return s;", "    string\
    \ temp(string.begin(), string.end());\n    std::transform(str.begin(), str.end(),\
    \ temp.begin(), ::toupper);\n    std::transform(temp.begin(), temp.end(), temp.begin(),\
    \ ::tolower);\n    return temp;", "    std::string outStr;\n    for(int i = 0;\
    \ i < string.length(); ++i) {\n        char c = string[i];\n        if('A' <=\
    \ c && c <= 'Z') {\n            outStr += toupper(c);\n        } else if('a' <=\
    \ c && c <= 'z') {\n            outStr += tolower(c);\n        } else {\n    \
    \        outStr += c;\n        }\n    }\n    return outStr;", "  int length =\
    \ string.length();\n  for (int i = 0; i < length; i++) {\n    char character =\
    \ string[i];\n    if (character >= 'a' && character <= 'z')\n      character =\
    \ (character - 'a') + 'A';\n    if (character >= 'A' && character <= 'Z')\n  \
    \    character = (character - 'A') + 'a';\n    string[i] = character;\n  }\n \
    \ return string;", "    for (char c : string) {\n        if (c >= 'A' && c <=\
    \ 'Z') {\n            string += c;\n        }\n        else if (c >= 'a' && c\
    \ <= 'z') {\n            string += c;\n        }\n        else if (c >= '0' &&\
    \ c <= '9') {\n            string += c;\n        }\n        else {\n         \
    \   string += toupper(c);\n        }\n    }\n    return string;", "  string lower\
    \ = string;\n  for (int i = 0, size = string.length(); i < size; ++i) {\n    if\
    \ (string[i] >= 'a' && string[i] <= 'z') {\n      lower.at(i) = string[i] - 32;\n\
    \    }\n  }\n  return lower;", "    for (auto it = string.begin(); it != string.end();\
    \ ++it)\n    {\n        if (*it == 'A') *it = 'a';\n        else if (*it == 'B')\
    \ *it = 'b';\n        else if (*it == 'C') *it = 'c';\n        else if (*it ==\
    \ 'D') *it = 'd';\n        else if (*it == 'E') *it = 'e';\n        else if (*it\
    \ == 'F') *it = 'f';\n        else if (*it == 'G') *it = 'g';\n        else if\
    \ (*it == 'H') *it = 'h';\n        else if (*it == 'I') *it = 'i';\n        else\
    \ if (*it == 'J') *it = 'j';\n        else if (*it == 'K') *it = 'k';\n      \
    \  else if (*it == 'L') *it = 'l';\n        else if (*it == 'M') *it = 'm';\n\
    \        else if (*it == 'N') *it = 'n';\n        else if (*it == 'O') *it = 'o';\n\
    \        else if (*it == 'P') *it = 'p';\n        else if (*it == 'Q') *it = 'q';\n\
    \        else if (*it == 'R') *it = 'r';\n        else if (*it == 'S') *it = 's';\n\
    \        else if (*it == 'T') *it = 't';\n        else if (*it == 'U') *it = 'u';\n\
    \        else if (*it == 'V') *it = 'v';\n        else if (*it == 'W') *it = 'w';\n\
    \        else if (*it == 'X') *it = 'x';\n        else if (*it == 'Y') *it = 'y';\n\
    \        else if (*it == 'Z') *it = 'z';\n        else if (*it == 'a') *it = 'A';\n\
    \        else if (*it == 'b') *it = 'B';\n        else if (*it == 'c') *it = 'C';\n\
    \        else if (*it == 'd') *it = 'D';\n        else if (*it == 'e') *it = 'E';\n\
    \        else if (*it == 'f') *it = 'F';\n        else if (*it == 'g') *it = 'G';\n\
    \        else if (*it == 'h') *it = 'H';\n        else if (*it == 'i') *it = 'I';\n\
    \        else if (*it == 'j') *it = 'J';\n        else if (*it == 'k') *it = 'K';\n\
    \        else if (*it == 'l') *it = 'L';\n        else if (*it == 'm') *it = 'M';\n\
    \        else if (*it == 'n') *it = 'N';\n        else if (*it == 'o') *it = 'O';\n\
    \        else if (*it == 'p') ", "  // Write your code here\n  string s = string;\n\
    \  for (int i = 0; i < s.length(); ++i) {\n    if (s[i] >= 'a' && s[i] <= 'z')\
    \ {\n      s[i] = s[i] - 32;\n    } else if (s[i] >= 'A' && s[i] <= 'Z') {\n \
    \     s[i] = s[i] + 32;\n    }\n  }\n  return s;", "  // Your code here\n  return\
    \ string;", "  for (auto &i : string)\n    if (islower(i)) i = toupper(i);\n \
    \ return string;", "  std::replace_if(string.begin(), string.end(), [](char c)\
    \ { return c == 'a'; }, [](char c) { return c != 'A'; });\n  std::replace_if(string.begin(),\
    \ string.end(), [](char c) { return c == 'A'; }, [](char c) { return c != 'a';\
    \ });\n  return string;", "    std::string result;\n    for (auto &ch : string)\
    \ {\n        switch (ch) {\n        case 'a':\n            result = 'A';\n   \
    \         break;\n        case 'b':\n            result = 'B';\n            break;\n\
    \        case 'c':\n            result = 'C';\n            break;\n        case\
    \ 'd':\n            result = 'D';\n            break;\n        case 'e':\n   \
    \         result = 'E';\n            break;\n        case 'f':\n            result\
    \ = 'F';\n            break;\n        case 'g':\n            result = 'G';\n \
    \           break;\n        case 'h':\n            result = 'H';\n           \
    \ break;\n        case 'i':\n            result = 'I';\n            break;\n \
    \       case 'j':\n            result = 'J';\n            break;\n        case\
    \ 'k':\n            result = 'K';\n            break;\n        case 'l':\n   \
    \         result = 'L';\n            break;\n        case 'm':\n            result\
    \ = 'M';\n            break;\n        case 'n':\n            result = 'N';\n \
    \           break;\n        case 'o':\n            result = 'O';\n           \
    \ break;\n        case 'p':\n            result = 'P';\n            break;\n \
    \       case 'q':\n            result = 'Q';\n            break;\n        case\
    \ 'r':\n            result = 'R';\n            break;\n        case 's':\n   \
    \         result = 'S';\n            break;\n        case 't':\n            result\
    \ = 'T';\n            break;\n        case 'u':\n            result = 'U';\n \
    \           break;\n        case 'v':\n            result = 'V';\n           \
    \ break;\n        case 'w':\n            result = 'W';\n            break;\n \
    \       case 'x':\n            result = 'X';\n            break;\n        case\
    \ 'y':\n            result = 'Y';\n            break;\n        case 'z':\n   \
    \         result = 'Z';\n            break;\n        default:\n            result\
    \ = ch;\n        }\n    }\n    return result;", "  for (int i = 0; i < string.length();\
    \ i++) {\n    if (string[i] >= 'a' && string[i] <= 'z') {\n      string[i] = string[i]\
    \ + 32;\n    } else if (string[i] >= 'A' && string[i] <= 'Z') {\n      string[i]\
    \ = string[i] - 32;\n    }\n  }\n  return string;", "  string result = string;\n\
    \  for (size_t i = 0; i < result.size(); i++) {\n    if (result[i] >= 'a' && result[i]\
    \ <= 'z') {\n      result[i] = result[i] - 32;\n    }\n  }\n  return result;",
  "    size_t len = string.length();\n    for (size_t i = 0; i < len; i++) {\n   \
    \     if (string[i] == 'a')\n            string[i] = 'A';\n        else if (string[i]\
    \ == 'A')\n            string[i] = 'a';\n    }\n    return string;", "    for\
    \ (auto &char : string) {\n        if (char >= 'a' && char <= 'z') {\n       \
    \     char &newChar = char - 'a' + 'A';\n            newChar = toupper(newChar);\n\
    \            newChar = tolower(newChar);\n            string += newChar;\n   \
    \     } else {\n            string += char;\n        }\n    }\n    return string;",
  "  string out(string.size(), ' ');\n  for (int i = 0; i < string.size(); i++)\n\
    \    out[i] = string[i] ^ ('a'-'A');\n  return out;", "  string out;\n  for (int\
    \ i = 0; i < string.size(); i++) {\n    if (string[i] >= 'a' && string[i] <= 'z')\n\
    \      out += string[i] - 'a' + 'A';\n    else if (string[i] >= 'A' && string[i]\
    \ <= 'Z')\n      out += string[i] - 'A' + 'a';\n    else\n      out += string[i];\n\
    \  }\n  return out;", "    std::string newString;\n    std::transform(string.begin(),\
    \ string.end(), newString.begin(), [](unsigned char c){\n        return isupper(c)\
    \ ? tolower(c) : toupper(c);\n    });\n    return newString;", "    // Iterate\
    \ through every character in string\n    for(auto &c : string) {\n        // If\
    \ character is uppercase\n        if(std::toupper(c) != c) {\n            // Uppercase\
    \ it\n            c = std::toupper(c);\n            // Lowercase it if it is uppercase\n\
    \            if(std::tolower(c) != c) {\n                c = std::tolower(c);\n\
    \            }\n        }\n    }\n    // Return string\n    return string;", " \
    \ for (int i = 0; i < string.length(); i++) {\n    if (string[i] >= 'a' && string[i]\
    \ <= 'z') {\n      string[i] = string[i] + 'A' - 'a';\n    }\n    if (string[i]\
    \ >= 'A' && string[i] <= 'Z') {\n      string[i] = string[i] + 'a' - 'A';\n  \
    \  }\n  }\n  return string;", "    for (auto &c : string) {\n        if (::islower(c))\
    \ {\n            c = ::toupper(c);\n        } else if (::isupper(c)) {\n     \
    \       c = ::tolower(c);\n        }\n    }\n    return string;", "  for (int\
    \ i = 0; i < string.length(); i++) {\n    if (string[i] >= 'a' && string[i] <=\
    \ 'z') {\n      string[i] = string[i] - 32;\n    } else if (string[i] >= 'A' &&\
    \ string[i] <= 'Z') {\n      string[i] = string[i] + 32;\n    }\n  }\n  return\
    \ string;", "    // your code goes here\n    // Complete the flip case function\
    \ here.\n    \n    return string;", "  for (int i = 0; i < string.length(); i++)\
    \ {\n    if (string[i] >= 'a' && string[i] <= 'z') {\n      string[i] = string[i]\
    \ + 32;\n    }\n    else if (string[i] >= 'A' && string[i] <= 'Z') {\n      string[i]\
    \ = string[i] - 32;\n    }\n  }\n  return string;", "    std::string s = string;\n\
    \    for (std::string::iterator it = s.begin(); it < s.end(); it++) {\n      \
    \  if (*it == std::tolower(*it)) {\n            *it = std::toupper(*it);\n   \
    \     }\n        if (*it == std::toupper(*it)) {\n            *it = std::tolower(*it);\n\
    \        }\n    }\n    return s;", "    std::string result;\n    int pos = 0;\n\
    \    while (pos < string.length()) {\n        char ch = string[pos];\n       \
    \ if (islower(ch)) {\n            result += toupper(ch);\n            pos++;\n\
    \        } else {\n            result += ch;\n            pos++;\n        }\n\
    \    }\n    return result;", "    for (std::size_t i = 0; i < string.size(); ++i)\
    \ {\n        if (islower(string[i]) && string[i] != toupper(string[i])) {\n  \
    \          string[i] = toupper(string[i]);\n        }\n        else if (string[i]\
    \ != tolower(string[i])) {\n            string[i] = tolower(string[i]);\n    \
    \    }\n    }\n    return string;", "    std::string flipped_string(string.size(),\
    \ '\\0');\n    for (size_t i = 0; i < string.size(); ++i) {\n        if (string[i]\
    \ >= 'a' && string[i] <= 'z')\n            flipped_string[i] = toupper(string[i]);\n\
    \        else if (string[i] >= 'A' && string[i] <= 'Z')\n            flipped_string[i]\
    \ = tolower(string[i]);\n    }\n    return flipped_string;", "  for (size_t i\
    \ = 0; i < string.length(); ++i) {\n    if (string[i] >= 'a' && string[i] <= 'z')\
    \ {\n      string[i] = string[i] - 32;\n    } else if (string[i] >= 'A' && string[i]\
    \ <= 'Z') {\n      string[i] = string[i] + 32;\n    }\n  }\n  return string;",
  "    std::string newstring;\n    for (size_t i = 0; i < string.size(); i++) {\n\
    \        if (string[i] >= 'a' && string[i] <= 'z') {\n            newstring +=\
    \ string[i] - 'a' + 'A';\n        } else {\n            newstring += string[i];\n\
    \        }\n    }\n    return newstring;", "    // Write your code here.\n   \
    \ int size = 0;\n    for(int i = 0; i < string.length(); i++){\n        if(string[i]\
    \ >= 'A' && string[i] <= 'Z'){\n            string[i] = 'A' + string[i] - 'A';\n\
    \            string[size] = string[i] - 'A' + 'a';\n            size++;\n    \
    \    }\n    }\n    string += string[size - 1];\n    return string;", "  for (int\
    \ i = 0; i < string.length(); i++) {\n    if ((string[i] >= 'a' && string[i] <=\
    \ 'z') || (string[i] >= 'A' && string[i] <= 'Z')) {\n      string[i] = toupper(string[i]);\n\
    \    }\n  }\n  return string;", "  std::swap(string[0], string[0]);\n  std::swap(string[1],\
    \ string[1]);\n  return string;", "  // Check for empty string\n  if(string.empty()){\n\
    \    return string;\n  }\n  // Iterate over each character of the string\n  for(auto\
    \ &c : string){\n    // If c is a lowercase letter, convert it to uppercase\n\
    \    if(islower(c)){\n      c = toupper(c);\n    }\n    // If c is an uppercase\
    \ letter, convert it to lowercase\n    if(isupper(c)){\n      c = tolower(c);\n\
    \    }\n  }\n  // Return flipped string\n  return string;", "    std::string res\
    \ = \"\";\n    char ch;\n    for (int i = 0; i < string.length(); i++) {\n   \
    \     ch = string[i];\n        if (isupper(ch))\n            res += tolower(ch);\n\
    \        else\n            res += ch;\n    }\n    return res;", "  for (size_t\
    \ i = 0; i < string.length(); ++i) {\n    if (string[i] >= 'A' && string[i] <=\
    \ 'Z') {\n      string[i] = string[i] - 32;\n    }\n    else if (string[i] >=\
    \ 'a' && string[i] <= 'z') {\n      string[i] = string[i] + 32;\n    }\n  }\n\
    \  return string;", "    std::string result=\"\";\n    for(const char &c:string)\
    \ {\n        if(std::isupper(c))\n            result += std::tolower(c);\n   \
    \     else result += std::toupper(c);\n    }\n    return result;", "  string flip\
    \ = string;\n  for (int i = 0; i < flip.size(); i++) {\n    if (flip[i] >= 'a'\
    \ && flip[i] <= 'z') {\n      flip[i] = flip[i] + 'A' - 'a';\n    } else if (flip[i]\
    \ >= 'A' && flip[i] <= 'Z') {\n      flip[i] = flip[i] + 'a' - 'A';\n    }\n \
    \ }\n  return flip;", "    for (auto c : string) {\n        if (('A' <= c && c\
    \ <= 'Z')) c += 'a' - 'A';\n        else if (('a' <= c && c <= 'z')) c += 'A'\
    \ - 'a';\n    }\n    return string;", "    size_t i, j, k;\n    for (k = 0, i\
    \ = 0; i < string.length(); i++) {\n        j = (int)string[i];\n        if (j\
    \ >= 'a' && j <= 'z')\n            string[k++] = string[i];\n        else if (j\
    \ >= 'A' && j <= 'Z')\n            string[k++] = string[i];\n        else\n  \
    \          string[k++] = toupper((int)string[i]);\n    }\n    return string;",
  "  for (size_t i = 0; i < string.length(); i++) {\n    if (string[i] >= 'a' && string[i]\
    \ <= 'z') {\n      string[i] = string[i] - 32;\n    }\n    else if (string[i]\
    \ >= 'A' && string[i] <= 'Z') {\n      string[i] = string[i] + 32;\n    }\n  }\n\
    \  return string;", "    for (auto &c : string) {\n        if (c >= 'A' && c <=\
    \ 'Z') {\n            c += 'a' - 'A';\n        }\n        else if (c >= 'a' &&\
    \ c <= 'z') {\n            c += 'A' - 'a';\n        }\n    }\n    return string;",
  "  for (int i = 0; i < string.length(); i++) {\n    if (string[i] >= 'a' && string[i]\
    \ <= 'z') {\n      string[i] = string[i] - 32;\n    }\n    if (string[i] >= 'A'\
    \ && string[i] <= 'Z') {\n      string[i] = string[i] + 32;\n    }\n  }\n  return\
    \ string;", "  string lower(string);\n  for (int i = 0; i < string.length(); i++)\
    \ {\n    char ch = string[i];\n    if (ch >= 'a' && ch <= 'z') {\n      string[i]\
    \ = ch - 'a' + 'A';\n    }\n  }\n  return lower;", "  std::string new_string =\
    \ \"\";\n  for (auto character : string) {\n    if (character == 'a' || character\
    \ == 'A') {\n      new_string += 'A';\n    } else if (character == 'b' || character\
    \ == 'B') {\n      new_string += 'B';\n    } else if (character == 'c' || character\
    \ == 'C') {\n      new_string += 'C';\n    } else if (character == 'd' || character\
    \ == 'D') {\n      new_string += 'D';\n    } else if (character == 'e' || character\
    \ == 'E') {\n      new_string += 'E';\n    } else if (character == 'f' || character\
    \ == 'F') {\n      new_string += 'F';\n    } else if (character == 'g' || character\
    \ == 'G') {\n      new_string += 'G';\n    } else if (character == 'h' || character\
    \ == 'H') {\n      new_string += 'H';\n    } else if (character == 'i' || character\
    \ == 'I') {\n      new_string += 'I';\n    } else if (character == 'j' || character\
    \ == 'J') {\n      new_string += 'J';\n    } else if (character == 'k' || character\
    \ == 'K') {\n      new_string += 'K';\n    } else if (character == 'l' || character\
    \ == 'L') {\n      new_string += 'L';\n    } else if (character == 'm' || character\
    \ == 'M') {\n      new_string += 'M';\n    } else if (character == 'n' || character\
    \ == 'N') {\n      new_string += 'N';\n    } else if (character == 'o' || character\
    \ == 'O') {\n      new_string += 'O';\n    } else if (character == 'p' || character\
    \ == 'P') {\n      new_string += 'P';\n    } else if (character == 'q' || character\
    \ == 'Q') {\n      new_string += 'Q';\n    } else if (character == 'r' || character\
    \ == 'R') {\n      new_string += 'R';\n    } else if (character == 's' || character\
    \ == 'S') {\n      new_string += 'S';\n    } else if (character == 't' || character\
    \ == 'T') {\n      new_string += 'T';\n    } else if (character == 'u' || character\
    \ == 'U') {\n      new_string += 'U';\n    } else if (character == 'v' || character\
    \ == 'V') {\n      new_string += 'V';\n    } else if (character == 'w' || character\
    \ == 'W') {\n      new_string += 'W';\n    } else if (character == 'x' || character\
    \ == 'X') {\n      new_string += 'X';\n    } else if (character == 'y' || character\
    \ == 'Y') {\n      new_string += 'Y';\n    } else if (character == 'z' || character\
    \ == 'Z') {\n      new_string += 'Z';\n    } else if (character == 'A' || character\
    \ == 'a') {\n      new_string += 'a';\n    } else if (character == 'B' || character\
    \ == 'b') {\n      new_string += 'b';\n    } else if (character == 'C' || character\
    \ == 'c') {\n      new_string += 'c';\n    } else if (character == 'D' || character\
    \ == '", "    std::string res;\n    for(int i=0; i<string.size(); ++i) {\n   \
    \     char c = string[i];\n        if(c>='a' && c<='z') c+=32;\n        else if(c>='A'\
    \ && c<='Z') c+=32;\n        res.push_back(c);\n    }\n    return res;", "  for\
    \ (auto i = 0; i < string.size(); i++) {\n    auto c = string[i];\n    string[i]\
    \ = c ^ ('A' ^ ('A' ^ c));\n    string[i] = c ^ ('A' ^ c);\n  }\n  return string;",
  "  std::string newString;\n  newString.reserve(string.length());\n  for (int i =\
    \ 0; i < string.length(); i++) {\n    if (string[i] >= 'a' && string[i] <= 'z')\
    \ {\n      newString.append(toupper(string[i]));\n    } else if (string[i] >=\
    \ 'A' && string[i] <= 'Z') {\n      newString.append(tolower(string[i]));\n  \
    \  }\n  }\n  return newString;", '  // Write your code here.', "    std::string\
    \ out(string);\n    std::transform(out.begin(), out.end(), out.begin(), ::toupper);\n\
    \    std::transform(out.begin(), out.end(), out.begin(), ::tolower);\n    return\
    \ out;", "    string result;\n    for (int i = 0; i < string.length(); i++) {\n\
    \        if (string[i] >= 'A' && string[i] <= 'Z') {\n            result.append((string[i]\
    \ + 'A' - 'a'));\n        } else if (string[i] >= 'a' && string[i] <= 'z') {\n\
    \            result.append((string[i] + 'a' - 'A'));\n        } else {\n     \
    \       result.push_back(string[i]);\n        }\n    }\n    return result;", " \
    \  std::string result = \"\";\n   for (char &c : string) {\n      c = toupper(c);\n\
    \      if (islower(c))\n         c = tolower(c);\n      result += c;\n   }\n \
    \  return result;", "    std::string output;\n    output.reserve(string.size());\n\
    \    for (char c : string) {\n        switch (c) {\n        case 'a':\n      \
    \      output.append(\"A\");\n            break;\n        case 'b':\n        \
    \    output.append(\"B\");\n            break;\n        case 'c':\n          \
    \  output.append(\"C\");\n            break;\n        case 'd':\n            output.append(\"\
    D\");\n            break;\n        case 'e':\n            output.append(\"E\"\
    );\n            break;\n        case 'f':\n            output.append(\"F\");\n\
    \            break;\n        case 'g':\n            output.append(\"G\");\n  \
    \          break;\n        case 'h':\n            output.append(\"H\");\n    \
    \        break;\n        case 'i':\n            output.append(\"I\");\n      \
    \      break;\n        case 'j':\n            output.append(\"J\");\n        \
    \    break;\n        case 'k':\n            output.append(\"K\");\n          \
    \  break;\n        case 'l':\n            output.append(\"L\");\n            break;\n\
    \        case 'm':\n            output.append(\"M\");\n            break;\n  \
    \      case 'n':\n            output.append(\"N\");\n            break;\n    \
    \    case 'o':\n            output.append(\"O\");\n            break;\n      \
    \  case 'p':\n            output.append(\"P\");\n            break;\n        case\
    \ 'q':\n            output.append(\"Q\");\n            break;\n        case 'r':\n\
    \            output.append(\"R\");\n            break;\n        case 's':\n  \
    \          output.append(\"S\");\n            break;\n        case 't':\n    \
    \        output.append(\"T\");\n            break;\n        case 'u':\n      \
    \      output.append(\"U\");\n            break;\n        case 'v':\n        \
    \    output.append(\"V\");\n            break;\n        case 'w':\n          \
    \  output.append(\"W\");\n            break;\n        case 'x':\n            output.append(\"\
    X\");\n            break;\n        case 'y':\n            output.append(\"Y\"\
    );\n            break;\n        case 'z':\n            output.append(\"Z\");\n\
    \            break;\n        default:\n            output.push_back(c);\n    \
    \    }\n    }\n    return output;", "    for (auto &ch : string) ch = std::toupper(ch);\n\
    \    return string;", "    for (size_t i = 0; i < string.length(); i++) {\n  \
    \      if (string[i] >= 'a' && string[i] <= 'z') {\n            string[i] = string[i]\
    \ + 'A' - 'a';\n        } else {\n            string[i] = string[i] + 'a' - 'A';\n\
    \        }\n    }\n    return string;", "  std::transform(string.begin(), string.end(),\
    \ string.begin(), ::toupper);\n  std::transform(string.begin(), string.end(),\
    \ string.begin(), ::tolower);\n  return string;", "  for (int i = 0; i < string.size();\
    \ i++) {\n    if (string[i] >= 'a' && string[i] <= 'z') {\n      string[i] ^=\
    \ 32;\n    } else if (string[i] >= 'A' && string[i] <= 'Z') {\n      string[i]\
    \ ^= 32;\n    }\n  }\n  return string;", "    for (auto c: string) {\n       \
    \ if (c == char('a'))\n            string.replace(c, char('A'));\n        else\
    \ if (c == char('A'))\n            string.replace(c, char('a'));\n        else\
    \ if (c == char('0'))\n            string.replace(c, char('9'));\n        else\
    \ if (c == char('9'))\n            string.replace(c, char('0'));\n        else\
    \ if (c == char('z'))\n            string.replace(c, char('Z'));\n        else\
    \ if (c == char('Z'))\n            string.replace(c, char('z'));\n        else\
    \ if (c == char(' '))\n            string.replace(c, char(''));\n        else\
    \ if (c == char('\\t'))\n            string.replace(c, char(''));\n    }\n   \
    \ return string;", "    for(auto &character : string)\n        if(character >=\
    \ 'A' && character <= 'Z')\n            character = (character - 'A') + 'a';\n\
    \        else\n            character = (character - 'a') + 'A';\n\n    return\
    \ string;", "  string flipped_string;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    if (string[i] >= 'a' && string[i] <= 'z') {\n      flipped_string\
    \ += string[i] - 'a' + 'A';\n    } else if (string[i] >= 'A' && string[i] <= 'Z')\
    \ {\n      flipped_string += string[i] - 'A' + 'a';\n    } else {\n      flipped_string\
    \ += string[i];\n    }\n  }\n  return flipped_string;"]
stop_tokens:
- "\n}"
