name: HumanEval_101_words_string
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::istringstream ss(s);\n    std::string item;\n    std::vector<std::string>\
    \ words;\n    while (std::getline(ss, item, '\\n')) {\n        words.push_back(item);\n\
    \    }\n    return words;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7oqfoctv.cpp: In function 'int main()':\n/tmp/tmp7oqfoctv.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7oqfoctv.cpp:2:\n/tmp/tmp7oqfoctv.cpp:19:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmp7oqfoctv.cpp:19:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmp7oqfoctv.cpp:19:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmp7oqfoctv.cpp:19:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp7oqfoctv.cpp:19:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp7oqfoctv.cpp:19:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp7oqfoctv.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> res;\n  std::string delimiter = \",\";\n  std::istringstream\
    \ iss(s);\n  for (std::string line; std::getline(iss, line, delimiter); ) {\n\
    \    std::string word;\n    std::istringstream line_iss(line);\n    std::string\
    \ line_word;\n    while (std::getline(line_iss, line_word, delimiter)) {\n   \
    \   word += line_word + ' ';\n    }\n    res.push_back(word);\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg0jbgsnp.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmpg0jbgsnp.cpp:12:59: error: no matching\
    \ function for call to 'getline(std::istringstream&, std::string&, std::string&)'\n\
    \   for (std::string line; std::getline(iss, line, delimiter); ) {\n         \
    \                                                  ^\n/tmp/tmpg0jbgsnp.cpp:12:59:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/string:53:0,\n\
    \                 from /usr/include/c++/4.8.2/bitset:47,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n             \
    \    from /tmp/tmpg0jbgsnp.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:1068:5:\
    \ note: template<class _CharT, class _Traits, class _Alloc> std::basic_istream<_CharT,\
    \ _Traits>& std::getline(std::basic_istream<_CharT, _Traits>&, std::basic_string<_CharT,\
    \ _Traits, _Alloc>&, _CharT)\n     getline(basic_istream<_CharT, _Traits>& __in,\n\
    \     ^\n/usr/include/c++/4.8.2/bits/basic_string.tcc:1068:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpg0jbgsnp.cpp:12:59: note: \
    \  deduced conflicting types for parameter '_CharT' ('char' and 'std::basic_string<char>')\n\
    \   for (std::string line; std::getline(iss, line, delimiter); ) {\n         \
    \                                                  ^\nIn file included from /usr/include/c++/4.8.2/string:52:0,\n\
    \                 from /usr/include/c++/4.8.2/bitset:47,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n             \
    \    from /tmp/tmpg0jbgsnp.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.h:2793:5:\
    \ note: template<class _CharT, class _Traits, class _Alloc> std::basic_istream<_CharT,\
    \ _Traits>& std::getline(std::basic_istream<_CharT, _Traits>&, std::basic_string<_CharT,\
    \ _Traits, _Alloc>&)\n     getline(basic_istream<_CharT, _Traits>& __is,\n   \
    \  ^\n/usr/include/c++/4.8.2/bits/basic_string.h:2793:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpg0jbgsnp.cpp:12:59: note:   candidate\
    \ expects 2 arguments, 3 provided\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> words;\n  // Write your code here\n  int i = 0;\n\
    \  while (i < s.size()) {\n    if (s[i] != ',' && s[i] != ' ' && s[i] != '\\0')\
    \ {\n      words.push_back(s.substr(i, s.size()));\n      i += s.size() - 1;\n\
    \    } else {\n      i += 1;\n    }\n  }\n  return words;\n}\nint main() {\n \
    \   auto candidate = words_string;\n    assert(candidate((\"Hi, my name is John\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"John\"})));\n\
    \    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp46m4kmiz.cpp: In function 'int main()':\n/tmp/tmp46m4kmiz.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp46m4kmiz.cpp:2:\n/tmp/tmp46m4kmiz.cpp:24:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmp46m4kmiz.cpp:24:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmp46m4kmiz.cpp:24:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmp46m4kmiz.cpp:24:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp46m4kmiz.cpp:24:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp46m4kmiz.cpp:24:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp46m4kmiz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> words;\n    auto split = s.begin();\n    auto split_end\
    \ = s.end();\n    while (split != split_end) {\n        auto comma = find(split,\
    \ split_end, '\\'');\n        auto space = find(split, split_end, ' ');\n    \
    \    if (comma != space) {\n            words.push_back(std::string(split, comma));\n\
    \            split = comma + 1;\n        } else {\n            words.push_back(std::string(split,\
    \ space));\n            split = space + 1;\n        }\n    }\n    return words;\n\
    }\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo7jx3k3v.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmpo7jx3k3v.cpp:10:10: error: 'split' does\
    \ not name a type\n     auto split = s.begin();\n          ^\n/tmp/tmpo7jx3k3v.cpp:11:10:\
    \ error: 'split_end' does not name a type\n     auto split_end = s.end();\n  \
    \        ^\n/tmp/tmpo7jx3k3v.cpp:12:12: error: 'split' was not declared in this\
    \ scope\n     while (split != split_end) {\n            ^\n/tmp/tmpo7jx3k3v.cpp:12:21:\
    \ error: 'split_end' was not declared in this scope\n     while (split != split_end)\
    \ {\n                     ^\n/tmp/tmpo7jx3k3v.cpp:13:14: error: 'comma' does not\
    \ name a type\n         auto comma = find(split, split_end, '\\'');\n        \
    \      ^\n/tmp/tmpo7jx3k3v.cpp:14:14: error: 'space' does not name a type\n  \
    \       auto space = find(split, split_end, ' ');\n              ^\n/tmp/tmpo7jx3k3v.cpp:15:13:\
    \ error: 'comma' was not declared in this scope\n         if (comma != space)\
    \ {\n             ^\n/tmp/tmpo7jx3k3v.cpp:15:22: error: 'space' was not declared\
    \ in this scope\n         if (comma != space) {\n                      ^\n/tmp/tmpo7jx3k3v.cpp:\
    \ In function 'int main()':\n/tmp/tmpo7jx3k3v.cpp:26:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = words_string;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpo7jx3k3v.cpp:2:\n/tmp/tmpo7jx3k3v.cpp:27:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpo7jx3k3v.cpp:27:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpo7jx3k3v.cpp:27:110:\
    \ warning: extended"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> words;\n  split(s, std::back_inserter(words), ',');\n\
    \  return words;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmptlrowzuk.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmptlrowzuk.cpp:10:42: error: 'split' was\
    \ not declared in this scope\n   split(s, std::back_inserter(words), ',');\n \
    \                                         ^\n/tmp/tmptlrowzuk.cpp: In function\
    \ 'int main()':\n/tmp/tmptlrowzuk.cpp:14:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = words_string;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptlrowzuk.cpp:2:\n/tmp/tmptlrowzuk.cpp:15:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmptlrowzuk.cpp:15:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmptlrowzuk.cpp:15:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmptlrowzuk.cpp:15:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmptlrowzuk.cpp:15:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmptlrowzuk.cpp:15:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \tstd::vector<std::string> res;\n\tstd::istringstream iss(s);\n\tstd::string word;\n\
    \twhile (iss >> word) {\n\t\tres.push_back(word);\n\t}\n\treturn res;\n}\nint\
    \ main() {\n    auto candidate = words_string;\n    assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five, six\"\
    )) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzww6w1zb.cpp: In function 'int main()':\n/tmp/tmpzww6w1zb.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzww6w1zb.cpp:2:\n/tmp/tmpzww6w1zb.cpp:19:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpzww6w1zb.cpp:19:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpzww6w1zb.cpp:19:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpzww6w1zb.cpp:19:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpzww6w1zb.cpp:19:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpzww6w1zb.cpp:19:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpzww6w1zb.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> v;\n  std::string w;\n  auto it = s.begin();\n  while\
    \ ((it = std::find_if(it, s.end(), [](char c) { return std::isspace(c); }))\n\
    \             != s.end())\n  {\n    w = s.substr(0, it);\n    if (w.length() >\
    \ 0)\n    {\n      v.push_back(std::move(w));\n    }\n    s.erase(0, it + 1);\n\
    \  }\n  if (s.size() > 0)\n  {\n    w = s;\n    v.push_back(std::move(w));\n \
    \ }\n  return v;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp477l1z1f.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmp477l1z1f.cpp:11:8: error: 'it' does not\
    \ name a type\n   auto it = s.begin();\n        ^\n/tmp/tmp477l1z1f.cpp:12:11:\
    \ error: 'it' was not declared in this scope\n   while ((it = std::find_if(it,\
    \ s.end(), [](char c) { return std::isspace(c); }))\n           ^\n/tmp/tmp477l1z1f.cpp:12:79:\
    \ warning: lambda expressions only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n   while ((it = std::find_if(it, s.end(), [](char c) { return std::isspace(c);\
    \ }))\n                                                                      \
    \         ^\n/tmp/tmp477l1z1f.cpp:18:19: error: 'move' is not a member of 'std'\n\
    \       v.push_back(std::move(w));\n                   ^\n/tmp/tmp477l1z1f.cpp:25:17:\
    \ error: 'move' is not a member of 'std'\n     v.push_back(std::move(w));\n  \
    \               ^\n/tmp/tmp477l1z1f.cpp: In function 'int main()':\n/tmp/tmp477l1z1f.cpp:30:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp477l1z1f.cpp:2:\n/tmp/tmp477l1z1f.cpp:31:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmp477l1z1f.cpp:31:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmp477l1z1f.cpp:31:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\""
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    // write your code here\n    return std::vector<std::string>();\n}\nint main()\
    \ {\n    auto candidate = words_string;\n    assert(candidate((\"Hi, my name is\
    \ John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"})));\n    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9ecfxy80.cpp: In function 'int main()':\n/tmp/tmp9ecfxy80.cpp:13:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9ecfxy80.cpp:2:\n/tmp/tmp9ecfxy80.cpp:14:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmp9ecfxy80.cpp:14:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmp9ecfxy80.cpp:14:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmp9ecfxy80.cpp:14:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp9ecfxy80.cpp:14:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp9ecfxy80.cpp:14:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp9ecfxy80.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::istringstream stream(s);\n    std::string word;\n    std::vector<std::string>\
    \ v;\n    while (std::getline(stream, word, ',')) {\n        v.push_back(word);\n\
    \    }\n    return v;\n}\nint main() {\n    auto candidate = words_string;\n \
    \   assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7z9s0w_x.cpp: In function 'int main()':\n/tmp/tmp7z9s0w_x.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7z9s0w_x.cpp:2:\n/tmp/tmp7z9s0w_x.cpp:19:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmp7z9s0w_x.cpp:19:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmp7z9s0w_x.cpp:19:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmp7z9s0w_x.cpp:19:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp7z9s0w_x.cpp:19:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp7z9s0w_x.cpp:19:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp7z9s0w_x.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    assert(!s.empty());\n    std::vector<std::string> words;\n    std::string\
    \ currentWord;\n    for (std::string::iterator it = s.begin(); it != s.end();\
    \ ++it) {\n        switch (*it) {\n            case ',':\n                words.push_back(currentWord);\n\
    \                currentWord.clear();\n                break;\n            case\
    \ ' ':\n                words.push_back(currentWord);\n                currentWord.clear();\n\
    \                break;\n            default:\n                currentWord +=\
    \ *it;\n        }\n    }\n    words.push_back(currentWord);\n    return words;\n\
    }\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa9wz3kmk.cpp: In function 'int main()':\n/tmp/tmpa9wz3kmk.cpp:30:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa9wz3kmk.cpp:2:\n/tmp/tmpa9wz3kmk.cpp:31:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpa9wz3kmk.cpp:31:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpa9wz3kmk.cpp:31:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpa9wz3kmk.cpp:31:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpa9wz3kmk.cpp:31:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpa9wz3kmk.cpp:31:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpa9wz3kmk.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::istringstream ss(s);\n  std::string word;\n  std::vector<std::string>\
    \ ret;\n  while (std::getline(ss, word, ',')) {\n    ret.push_back(word);\n  }\n\
    \  return ret;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkr70jtbl.cpp: In function 'int main()':\n/tmp/tmpkr70jtbl.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkr70jtbl.cpp:2:\n/tmp/tmpkr70jtbl.cpp:19:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpkr70jtbl.cpp:19:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpkr70jtbl.cpp:19:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpkr70jtbl.cpp:19:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpkr70jtbl.cpp:19:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpkr70jtbl.cpp:19:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpkr70jtbl.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::string w = s.substr(0, s.size() - 1);\n    std::string rest = s.substr(s.size()\
    \ - 1);\n    std::vector<std::string> words;\n    std::replace(w.begin(), w.end(),\
    \ '.', ' ');\n    std::stringstream ss(w);\n    std::string token;\n    while\
    \ (std::getline(ss, token, ',')) {\n        words.push_back(token);\n    }\n \
    \   for (auto &i : words) {\n        std::replace(i.begin(), i.end(), '.', ' ');\n\
    \    }\n    words.push_back(rest);\n    return words;\n}\nint main() {\n    auto\
    \ candidate = words_string;\n    assert(candidate((\"Hi, my name is John\")) ==\
    \ (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"John\"})));\n\
    \    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj0m2lkf8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmpj0m2lkf8.cpp:18:16: error: ISO C++ forbids\
    \ declaration of 'i' with no type [-fpermissive]\n     for (auto &i : words) {\n\
    \                ^\n/tmp/tmpj0m2lkf8.cpp:18:20: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (auto &i : words) {\n              \
    \      ^\n/tmp/tmpj0m2lkf8.cpp:19:24: error: request for member 'begin' in 'i',\
    \ which is of non-class type 'int'\n         std::replace(i.begin(), i.end(),\
    \ '.', ' ');\n                        ^\n/tmp/tmpj0m2lkf8.cpp:19:35: error: request\
    \ for member 'end' in 'i', which is of non-class type 'int'\n         std::replace(i.begin(),\
    \ i.end(), '.', ' ');\n                                   ^\n/tmp/tmpj0m2lkf8.cpp:\
    \ In function 'int main()':\n/tmp/tmpj0m2lkf8.cpp:25:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = words_string;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj0m2lkf8.cpp:2:\n/tmp/tmpj0m2lkf8.cpp:26:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpj0m2lkf8.cpp:26:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpj0m2lkf8.cpp:26:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpj0m2l"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::string delimiters = \",\";\n    size_t pos = 0;\n    std::vector<std::string>\
    \ words;\n    while (pos != std::string::npos) {\n        size_t next = s.find(delimiters,\
    \ pos);\n        if (next == std::string::npos) {\n            words.push_back(s.substr(pos));\n\
    \            pos = std::string::npos;\n        } else {\n            words.push_back(s.substr(pos,\
    \ next - pos));\n            pos = next + 1;\n        }\n    }\n    return words;\n\
    }\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzn3wsliq.cpp: In function 'int main()':\n/tmp/tmpzn3wsliq.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzn3wsliq.cpp:2:\n/tmp/tmpzn3wsliq.cpp:26:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpzn3wsliq.cpp:26:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpzn3wsliq.cpp:26:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpzn3wsliq.cpp:26:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpzn3wsliq.cpp:26:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpzn3wsliq.cpp:26:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpzn3wsliq.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  // Write your code here\n  \n  return std::vector<std::string>();\n}\nint main()\
    \ {\n    auto candidate = words_string;\n    assert(candidate((\"Hi, my name is\
    \ John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"})));\n    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp16ir3c0g.cpp: In function 'int main()':\n/tmp/tmp16ir3c0g.cpp:14:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp16ir3c0g.cpp:2:\n/tmp/tmp16ir3c0g.cpp:15:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmp16ir3c0g.cpp:15:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmp16ir3c0g.cpp:15:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmp16ir3c0g.cpp:15:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp16ir3c0g.cpp:15:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp16ir3c0g.cpp:15:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp16ir3c0g.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> words;\n    std::string temp;\n    size_t pos =\
    \ 0;\n    size_t count = 0;\n    // Split string into words using space and commas\n\
    \    do {\n        temp = s.substr(pos, s.find_first_not_of(\" ,\", pos) - pos);\n\
    \        pos = s.find_first_of(\" ,\", pos);\n        if (pos != std::string::npos)\
    \ {\n            words[count++] = temp;\n        }\n    } while (pos != std::string::npos);\n\
    \    return words;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpftlim_qo.cpp: In function 'int main()':\n/tmp/tmpftlim_qo.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpftlim_qo.cpp:2:\n/tmp/tmpftlim_qo.cpp:25:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpftlim_qo.cpp:25:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpftlim_qo.cpp:25:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpftlim_qo.cpp:25:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpftlim_qo.cpp:25:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpftlim_qo.cpp:25:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpftlim_qo.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> tokens;\n\n  if (s.empty()) {\n    return tokens;\n\
    \  }\n\n  std::string::size_type pos = 0, end;\n  while (end < s.size() && s[end]\
    \ != '\\0') {\n    ++end;\n  }\n\n  while (pos < end) {\n    tokens.push_back(s.substr(pos,\
    \ end - pos));\n    pos = end + 1;\n    while (end < s.size() && s[end] != ' ')\
    \ {\n      ++end;\n    }\n\n    if (s[end] == ',' || s[end] == '\\0') {\n    \
    \  ++end;\n    } else {\n      break;\n    }\n  }\n\n  return tokens;\n}\nint\
    \ main() {\n    auto candidate = words_string;\n    assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five, six\"\
    )) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbw15bm79.cpp: In function 'int main()':\n/tmp/tmpbw15bm79.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbw15bm79.cpp:2:\n/tmp/tmpbw15bm79.cpp:38:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpbw15bm79.cpp:38:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpbw15bm79.cpp:38:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpbw15bm79.cpp:38:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpbw15bm79.cpp:38:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbw15bm79.cpp:38:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbw15bm79.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    size_t i;\n    std::vector<std::string> tokens;\n    for (i = 0; i <= s.size();\
    \ i++)\n    {\n        if (s.at(i) == ',' || s.at(i) == ' ')\n        {\n    \
    \        if (i > 0)\n            {\n                tokens.push_back(str.substr(0,\
    \ i));\n                str.erase(0, i + 1);\n            }\n        }\n    }\n\
    \    tokens.push_back(str);\n    return tokens;\n}\nint main() {\n    auto candidate\
    \ = words_string;\n    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcd0cr0yu.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmpcd0cr0yu.cpp:17:34: error: 'str' was\
    \ not declared in this scope\n                 tokens.push_back(str.substr(0,\
    \ i));\n                                  ^\n/tmp/tmpcd0cr0yu.cpp:22:22: error:\
    \ 'str' was not declared in this scope\n     tokens.push_back(str);\n        \
    \              ^\n/tmp/tmpcd0cr0yu.cpp: In function 'int main()':\n/tmp/tmpcd0cr0yu.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcd0cr0yu.cpp:2:\n/tmp/tmpcd0cr0yu.cpp:27:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpcd0cr0yu.cpp:27:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpcd0cr0yu.cpp:27:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpcd0cr0yu.cpp:27:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpcd0cr0yu.cpp:27:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpcd0cr0yu.cpp:27:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vecto"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    assert(!s.empty());\n    std::vector<std::string> result;\n    std::istringstream\
    \ ss(s);\n    std::string word;\n    while (std::getline(ss, word, ',')) {\n \
    \       result.push_back(word);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = words_string;\n    assert(candidate((\"Hi, my name is John\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"John\"})));\n\
    \    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1da2t0hm.cpp: In function 'int main()':\n/tmp/tmp1da2t0hm.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1da2t0hm.cpp:2:\n/tmp/tmp1da2t0hm.cpp:20:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmp1da2t0hm.cpp:20:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmp1da2t0hm.cpp:20:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmp1da2t0hm.cpp:20:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp1da2t0hm.cpp:20:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp1da2t0hm.cpp:20:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp1da2t0hm.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> v;\n    char *arr = (char*) s.data();\n    char\
    \ *p = arr;\n    char *ptr = arr;\n    // Add an empty string to your array\n\
    \    v.push_back( \"\" );\n\n    while( *p != '\\0' ) {\n        while(*p != ','\
    \ && p < arr ){\n            *p++;\n        }\n        v.push_back(*p);\n    \
    \    p ++;\n\n        while(*p != ',' && p < arr ){\n            *p++;\n     \
    \   }\n    }\n    return v;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpakmgrm2i.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmpakmgrm2i.cpp:20:23: error: invalid user-defined\
    \ conversion from 'char' to 'const value_type& {aka const std::basic_string<char>&}'\
    \ [-fpermissive]\n         v.push_back(*p);\n                       ^\nIn file\
    \ included from /usr/include/c++/4.8.2/string:53:0,\n                 from /usr/include/c++/4.8.2/bitset:47,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpakmgrm2i.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ note: candidate is: std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>] <near match>\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5: note:\
    \   no known conversion for argument 1 from 'char' to 'const char*'\n/tmp/tmpakmgrm2i.cpp:20:23:\
    \ error: invalid conversion from 'char' to 'const char*' [-fpermissive]\n    \
    \     v.push_back(*p);\n                       ^\nIn file included from /usr/include/c++/4.8.2/string:53:0,\n\
    \                 from /usr/include/c++/4.8.2/bitset:47,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n             \
    \    from /tmp/tmpakmgrm2i.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ error:   initializing argument 1 of 'std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>]' [-fpermissive]\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/tmp/tmpakmgrm2i.cpp: In function 'int main()':\n/tmp/tmpakmgrm2i.cpp:30:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpakmgrm2"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> strings;\n  std::string word;\n  std::size_t prev_pos\
    \ = 0;\n  for (std::size_t pos = 0; pos < s.size(); ++pos) {\n    if ((s[pos]\
    \ == '\\'') || (s[pos] == '\"')) {\n      // If we're inside a quoted string,\
    \ ignore it (don't split word)\n      std::string::size_type next_pos = s.find_first_of(\"\
    \\'\\\"\", prev_pos);\n      if (next_pos == std::string::npos) {\n        word\
    \ = s.substr(prev_pos);\n        strings[strings.size()] = word;\n      }\n  \
    \    else {\n        // If we're inside a quoted string, ignore it (don't split\
    \ word)\n        word = s.substr(prev_pos, next_pos - prev_pos);\n        prev_pos\
    \ = next_pos;\n        strings[strings.size()] = word;\n      }\n    }\n    else\
    \ {\n      // If not inside a quoted string, split word\n      std::string::size_type\
    \ next_pos = s.find_first_of(\",\", pos);\n      if (next_pos == std::string::npos)\
    \ {\n        word = s.substr(pos);\n        strings[strings.size()] = word;\n\
    \      }\n      else {\n        word = s.substr(pos, next_pos - pos);\n      \
    \  pos = next_pos;\n        strings[strings.size()] = word;\n      }\n    }\n\
    \  }\n  return strings;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp82qwur2s.cpp: In function 'int main()':\n/tmp/tmp82qwur2s.cpp:44:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp82qwur2s.cpp:2:\n/tmp/tmp82qwur2s.cpp:45:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmp82qwur2s.cpp:45:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmp82qwur2s.cpp:45:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmp82qwur2s.cpp:45:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp82qwur2s.cpp:45:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp82qwur2s.cpp:45:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp82qwur2s.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> words;\n  for (std::size_t i = 0; i != s.size(); ++i)\
    \ {\n    std::string word = s.substr(i, std::string::npos);\n    if (word != \"\
    \") {\n      words.push_back(word);\n    }\n  }\n  return words;\n}\nint main()\
    \ {\n    auto candidate = words_string;\n    assert(candidate((\"Hi, my name is\
    \ John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"})));\n    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp29fl1biu.cpp: In function 'int main()':\n/tmp/tmp29fl1biu.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp29fl1biu.cpp:2:\n/tmp/tmp29fl1biu.cpp:20:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmp29fl1biu.cpp:20:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmp29fl1biu.cpp:20:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmp29fl1biu.cpp:20:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp29fl1biu.cpp:20:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp29fl1biu.cpp:20:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp29fl1biu.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::istringstream iss(s);\n    std::string word;\n    std::vector<std::string>\
    \ v;\n\n    while (std::getline(iss, word, ',')) {\n        v.push_back(word);\n\
    \    }\n\n    return v;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjocmvedi.cpp: In function 'int main()':\n/tmp/tmpjocmvedi.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjocmvedi.cpp:2:\n/tmp/tmpjocmvedi.cpp:21:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpjocmvedi.cpp:21:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpjocmvedi.cpp:21:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpjocmvedi.cpp:21:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpjocmvedi.cpp:21:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpjocmvedi.cpp:21:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpjocmvedi.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> elems;\n    std::stringstream ss(s);\n    std::string\
    \ token;\n    while (std::getline(ss, token, ',')) {\n        elems.push_back(token);\n\
    \    }\n    return elems;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnywl0gxu.cpp: In function 'int main()':\n/tmp/tmpnywl0gxu.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnywl0gxu.cpp:2:\n/tmp/tmpnywl0gxu.cpp:19:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpnywl0gxu.cpp:19:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpnywl0gxu.cpp:19:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpnywl0gxu.cpp:19:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpnywl0gxu.cpp:19:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpnywl0gxu.cpp:19:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpnywl0gxu.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  auto p = s.begin();\n  p = std::find_if(s.begin(), s.end(), [](char ch) {\n\
    \    return std::isspace(ch, std::locale());\n  });\n  auto e = s.end();\n  std::vector<std::string>\
    \ words;\n  while (p != e) {\n    words.push_back({ std::string(s, p, std::locale()),\
    \ p });\n    p = std::find_if(++p, e, [](char ch) {\n      return std::isspace(ch,\
    \ std::locale());\n    });\n  }\n  return words;\n}\nint main() {\n    auto candidate\
    \ = words_string;\n    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7dus4bed.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmp7dus4bed.cpp:9:8: error: 'p' does not\
    \ name a type\n   auto p = s.begin();\n        ^\n/tmp/tmp7dus4bed.cpp:10:3: error:\
    \ 'p' was not declared in this scope\n   p = std::find_if(s.begin(), s.end(),\
    \ [](char ch) {\n   ^\n/tmp/tmp7dus4bed.cpp:12:3: warning: lambda expressions\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n   });\n\
    \   ^\n/tmp/tmp7dus4bed.cpp:12:4: error: no matching function for call to 'find_if(std::basic_string<char>::iterator,\
    \ std::basic_string<char>::iterator, words_string(std::string)::__lambda0)'\n\
    \   });\n    ^\n/tmp/tmp7dus4bed.cpp:12:4: note: candidate is:\nIn file included\
    \ from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n\
    \                 from /tmp/tmp7dus4bed.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:4456:5:\
    \ note: template<class _IIter, class _Predicate> _IIter std::find_if(_IIter, _IIter,\
    \ _Predicate)\n     find_if(_InputIterator __first, _InputIterator __last,\n \
    \    ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:4456:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmp7dus4bed.cpp: In substitution of 'template<class\
    \ _IIter, class _Predicate> _IIter std::find_if(_IIter, _IIter, _Predicate) [with\
    \ _IIter = __gnu_cxx::__normal_iterator<char*, std::basic_string<char> >; _Predicate\
    \ = words_string(std::string)::__lambda0]':\n/tmp/tmp7dus4bed.cpp:12:4:   required\
    \ from here\n/tmp/tmp7dus4bed.cpp:12:4: error: template argument for 'template<class\
    \ _IIter, class _Predicate> _IIter std::find_if(_IIter, _IIter, _Predicate)' uses\
    \ local type 'words_string(std::string)::__lambda0'\n   });\n    ^\n/tmp/tmp7dus4bed.cpp:12:4:\
    \ error:   trying to instantiate 'template<class _IIter, class _Predicate> _IIter\
    \ std::find_if(_IIter, _IIter, _Predicate)'\n/tmp/tmp7dus4bed.cpp:13:8: error:\
    \ 'e' does not name a type\n   auto e = s.end();\n        ^\n/tmp/tmp7dus4bed.cpp:15:15:\
    \ error: 'e' was not declared in this scope\n   while (p"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::istringstream ss(s);\n    std::string word;\n    std::vector<std::string>\
    \ words;\n    while (std::getline(ss, word, ','))\n        words.push_back(word);\n\
    \    return words;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf0sy8fdd.cpp: In function 'int main()':\n/tmp/tmpf0sy8fdd.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf0sy8fdd.cpp:2:\n/tmp/tmpf0sy8fdd.cpp:18:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpf0sy8fdd.cpp:18:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpf0sy8fdd.cpp:18:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpf0sy8fdd.cpp:18:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpf0sy8fdd.cpp:18:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpf0sy8fdd.cpp:18:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpf0sy8fdd.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  \n  std::vector<std::string> words;\n  // Write your code here\n  for(int i\
    \ = 0; i<s.length(); i++) {\n    if(s[i] == ',') {\n      words.push_back(s.substr(0,i));\n\
    \      s.erase(0,i+1);\n      i--;\n    }\n  }\n  \n  return words;\n}\nint main()\
    \ {\n    auto candidate = words_string;\n    assert(candidate((\"Hi, my name is\
    \ John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"})));\n    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpef329z10.cpp: In function 'int main()':\n/tmp/tmpef329z10.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpef329z10.cpp:2:\n/tmp/tmpef329z10.cpp:24:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpef329z10.cpp:24:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpef329z10.cpp:24:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpef329z10.cpp:24:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpef329z10.cpp:24:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpef329z10.cpp:24:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpef329z10.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    assert(s.find(\", \") == std::string::npos);\n    assert(s.find(\" \") ==\
    \ std::string::npos);\n    std::vector<std::string> result;\n    size_t pos =\
    \ 0;\n    while (pos < s.size()) {\n        std::string temp = s.substr(pos, 1);\n\
    \        if (temp == \"\") {\n            result.push_back(temp);\n        }\n\
    \        pos = temp.length() + 1;\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = words_string;\n    assert(candidate((\"Hi, my name is John\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"John\"})));\n\
    \    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmphoi18a9s.cpp: In function 'int main()':\n/tmp/tmphoi18a9s.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphoi18a9s.cpp:2:\n/tmp/tmphoi18a9s.cpp:24:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmphoi18a9s.cpp:24:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmphoi18a9s.cpp:24:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmphoi18a9s.cpp:24:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphoi18a9s.cpp:24:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphoi18a9s.cpp:24:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphoi18a9s.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    size_t found = s.find_first_of(\" ,\", 0);\n    std::vector<std::string>\
    \ words{s.substr(0, found), s.substr(found + 1)};\n    return words;\n}\nint main()\
    \ {\n    auto candidate = words_string;\n    assert(candidate((\"Hi, my name is\
    \ John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"})));\n    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmprd9rwltk.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmprd9rwltk.cpp:10:30: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     std::vector<std::string> words{s.substr(0, found), s.substr(found\
    \ + 1)};\n                              ^\n/tmp/tmprd9rwltk.cpp:10:75: error:\
    \ in C++98 'words' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ words{s.substr(0, found), s.substr(found + 1)};\n                          \
    \                                                 ^\n/tmp/tmprd9rwltk.cpp: In\
    \ function 'int main()':\n/tmp/tmprd9rwltk.cpp:14:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = words_string;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprd9rwltk.cpp:2:\n/tmp/tmprd9rwltk.cpp:15:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmprd9rwltk.cpp:15:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmprd9rwltk.cpp:15:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmprd9rwltk.cpp:15:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprd9rwltk.cpp:15:110:\
    \ error: no"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::stringstream ss( s );\n    std::string word;\n    std::getline(ss, word,\
    \ ',');\n    while (ss.peek() != ' ') {\n        std::getline(ss, word, ',');\n\
    \    }\n    std::vector<std::string> result(s.begin(), s.end());\n    std::reverse(\
    \ result.begin(), result.end() );\n    return result;\n}\nint main() {\n    auto\
    \ candidate = words_string;\n    assert(candidate((\"Hi, my name is John\")) ==\
    \ (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"John\"})));\n\
    \    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp57vtoydt.cpp: In function 'int main()':\n/tmp/tmp57vtoydt.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp57vtoydt.cpp:2:\n/tmp/tmp57vtoydt.cpp:21:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmp57vtoydt.cpp:21:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmp57vtoydt.cpp:21:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmp57vtoydt.cpp:21:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp57vtoydt.cpp:21:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp57vtoydt.cpp:21:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp57vtoydt.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> elems;\n    std::string token;\n    std::istringstream\
    \ iss(s);\n\n    while (std::getline(iss, token, ','))\n        elems.push_back(token);\n\
    \    return elems;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmphz0p_x88.cpp: In function 'int main()':\n/tmp/tmphz0p_x88.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphz0p_x88.cpp:2:\n/tmp/tmphz0p_x88.cpp:19:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmphz0p_x88.cpp:19:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmphz0p_x88.cpp:19:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmphz0p_x88.cpp:19:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphz0p_x88.cpp:19:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphz0p_x88.cpp:19:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphz0p_x88.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::string delimiters(\" \");\n    std::string all_words(s);\n    std::string\
    \ words_string;\n\n    std::size_t current_position = 0;\n    std::size_t current_length\
    \ = all_words.length();\n    std::vector<std::string> word_strings;\n\n    while\
    \ (true) {\n        // Find first occurrence of delimiter.\n        std::size_t\
    \ found = all_words.find(delimiters, current_position);\n        if (found ==\
    \ std::string::npos) {\n            words_string += all_words[current_position];\n\
    \            break;\n        }\n\n        words_string += all_words.substr(current_position,\
    \ found - current_position);\n        word_strings.push_back(words_string);\n\
    \        current_position = found + delimiters.length();\n        current_length\
    \ -= found + delimiters.length();\n    }\n    return word_strings;\n}\nint main()\
    \ {\n    auto candidate = words_string;\n    assert(candidate((\"Hi, my name is\
    \ John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"})));\n    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp38wwj61r.cpp: In function 'int main()':\n/tmp/tmp38wwj61r.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp38wwj61r.cpp:2:\n/tmp/tmp38wwj61r.cpp:34:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmp38wwj61r.cpp:34:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmp38wwj61r.cpp:34:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmp38wwj61r.cpp:34:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp38wwj61r.cpp:34:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp38wwj61r.cpp:34:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp38wwj61r.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> result;\n\n  // Split s by ,\n  auto tokens = split(s,\
    \ ',');\n  // Split each token by space\n  for (auto t : tokens) {\n    result.push_back(split(t,\
    \ ''));\n  }\n\n  return result;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc_2r48wp.cpp:15:31: error: empty character constant\n     result.push_back(split(t,\
    \ ''));\n                               ^\n/tmp/tmpc_2r48wp.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmpc_2r48wp.cpp:12:8: error: 'tokens' does\
    \ not name a type\n   auto tokens = split(s, ',');\n        ^\n/tmp/tmpc_2r48wp.cpp:14:13:\
    \ error: 't' does not name a type\n   for (auto t : tokens) {\n             ^\n\
    /tmp/tmpc_2r48wp.cpp:18:3: error: expected ';' before 'return'\n   return result;\n\
    \   ^\n/tmp/tmpc_2r48wp.cpp:18:3: error: expected primary-expression before 'return'\n\
    /tmp/tmpc_2r48wp.cpp:18:3: error: expected ';' before 'return'\n/tmp/tmpc_2r48wp.cpp:18:3:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpc_2r48wp.cpp:18:3:\
    \ error: expected ')' before 'return'\n/tmp/tmpc_2r48wp.cpp: In function 'int\
    \ main()':\n/tmp/tmpc_2r48wp.cpp:21:10: error: 'candidate' does not name a type\n\
    \     auto candidate = words_string;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc_2r48wp.cpp:2:\n/tmp/tmpc_2r48wp.cpp:22:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpc_2r48wp.cpp:22:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpc_2r48wp.cpp:22:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                               "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  // Write your code here\n  std::vector<std::string> v;\n  std::string temp;\n\
    \  temp = s;\n  int counter = 0;\n  while (counter < temp.size()-1) {\n    v.push_back(temp.substr(counter,\
    \ temp.length()));\n    counter = counter + temp.length();\n  }\n  return v;\n\
    }\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0bsro9lp.cpp: In function 'int main()':\n/tmp/tmp0bsro9lp.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0bsro9lp.cpp:2:\n/tmp/tmp0bsro9lp.cpp:22:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmp0bsro9lp.cpp:22:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmp0bsro9lp.cpp:22:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmp0bsro9lp.cpp:22:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp0bsro9lp.cpp:22:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp0bsro9lp.cpp:22:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp0bsro9lp.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> v;\n    for (std::string::size_type i = 0; i < s.size();\
    \ i++) {\n        std::string word = s.substr(i, 1);\n        v.push_back(word);\n\
    \    }\n    return v;\n}\nint main() {\n    auto candidate = words_string;\n \
    \   assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2iapahbe.cpp: In function 'int main()':\n/tmp/tmp2iapahbe.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2iapahbe.cpp:2:\n/tmp/tmp2iapahbe.cpp:18:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmp2iapahbe.cpp:18:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmp2iapahbe.cpp:18:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmp2iapahbe.cpp:18:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp2iapahbe.cpp:18:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp2iapahbe.cpp:18:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2iapahbe.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::string w;\n  std::istringstream iss(s);\n  std::vector<std::string> vs;\n\
    \  while (iss.good()) {\n    is >> w;\n    if (w == \"\")\n      break;\n    vs.push_back(w);\n\
    \  }\n  return vs;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4i2yqu0h.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmp4i2yqu0h.cpp:13:5: error: 'is' was not\
    \ declared in this scope\n     is >> w;\n     ^\n/tmp/tmp4i2yqu0h.cpp: In function\
    \ 'int main()':\n/tmp/tmp4i2yqu0h.cpp:21:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = words_string;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4i2yqu0h.cpp:2:\n/tmp/tmp4i2yqu0h.cpp:22:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmp4i2yqu0h.cpp:22:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmp4i2yqu0h.cpp:22:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmp4i2yqu0h.cpp:22:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp4i2yqu0h.cpp:22:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp4i2yqu0h.cpp:22:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp4i2yqu0h.cpp:2:\n/u"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> words;\n    std::string word;\n    std::string delimiter\
    \ = \",\";\n    size_t pos = 0;\n    while ((pos = s.find(delimiter)) != std::string::npos)\
    \ {\n        word = s.substr(0, pos);\n        words.push_back(word);\n      \
    \  s = s.substr(pos + 1);\n    }\n    words.push_back(s);\n    return words;\n\
    }\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsgifpsj7.cpp: In function 'int main()':\n/tmp/tmpsgifpsj7.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsgifpsj7.cpp:2:\n/tmp/tmpsgifpsj7.cpp:23:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpsgifpsj7.cpp:23:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpsgifpsj7.cpp:23:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpsgifpsj7.cpp:23:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpsgifpsj7.cpp:23:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpsgifpsj7.cpp:23:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpsgifpsj7.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::string st;\n    std::string word;\n    std::vector<std::string> res;\n\
    \    while (std::getline(std::cin, st)) {\n        std::istringstream ss(st);\n\
    \        while (ss >> word) {\n            res.push_back(word);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmphcwhugkf.cpp: In function 'int main()':\n/tmp/tmphcwhugkf.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphcwhugkf.cpp:2:\n/tmp/tmphcwhugkf.cpp:22:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmphcwhugkf.cpp:22:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmphcwhugkf.cpp:22:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmphcwhugkf.cpp:22:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphcwhugkf.cpp:22:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphcwhugkf.cpp:22:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphcwhugkf.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    s.erase(std::remove(s.begin(), s.end(), ','), s.end());\n    s.erase(std::remove(s.begin(),\
    \ s.end(), ' '), s.end());\n\n    std::vector<std::string> words;\n    std::string\
    \ item;\n    std::istringstream ss(s);\n\n    while (std::getline(ss, item, ','))\
    \ {\n        words.push_back(item);\n    }\n\n    return words;\n}\nint main()\
    \ {\n    auto candidate = words_string;\n    assert(candidate((\"Hi, my name is\
    \ John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"})));\n    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0bjp4nbt.cpp: In function 'int main()':\n/tmp/tmp0bjp4nbt.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0bjp4nbt.cpp:2:\n/tmp/tmp0bjp4nbt.cpp:24:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmp0bjp4nbt.cpp:24:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmp0bjp4nbt.cpp:24:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmp0bjp4nbt.cpp:24:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp0bjp4nbt.cpp:24:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp0bjp4nbt.cpp:24:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp0bjp4nbt.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  // Your code goes here\n  return {};\n}\nint main() {\n    auto candidate =\
    \ words_string;\n    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp20nfp_fl.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmp20nfp_fl.cpp:10:3: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n   return {};\n   ^\n/tmp/tmp20nfp_fl.cpp: In function 'int main()':\n\
    /tmp/tmp20nfp_fl.cpp:13:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = words_string;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20nfp_fl.cpp:2:\n/tmp/tmp20nfp_fl.cpp:14:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmp20nfp_fl.cpp:14:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmp20nfp_fl.cpp:14:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmp20nfp_fl.cpp:14:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp20nfp_fl.cpp:14:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp20nfp_fl.cpp:14:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/st"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> ret;\n    size_t pos = 0, end;\n    end = s.find(',',\
    \ pos);\n    ret.push_back(s.substr(pos, end - pos));\n    pos = end;\n    end\
    \ = s.find(',', pos);\n    ret.push_back(s.substr(pos, end - pos));\n    pos =\
    \ end;\n    end = s.find(' ', pos);\n    while (end != std::string::npos) {\n\
    \        ret.push_back(s.substr(pos, end - pos));\n        pos = end;\n      \
    \  end = s.find(' ', pos);\n    }\n    if (end == std::string::npos)\n       \
    \ ret.push_back(s.substr(pos));\n    return ret;\n}\nint main() {\n    auto candidate\
    \ = words_string;\n    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmphdjy9da1.cpp: In function 'int main()':\n/tmp/tmphdjy9da1.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphdjy9da1.cpp:2:\n/tmp/tmphdjy9da1.cpp:29:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmphdjy9da1.cpp:29:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmphdjy9da1.cpp:29:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmphdjy9da1.cpp:29:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphdjy9da1.cpp:29:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphdjy9da1.cpp:29:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphdjy9da1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::string items[100];\n  std::string delimiters(\",\");\n  std::stringstream\
    \ ss(s);\n  std::string item;\n  while (std::getline(ss, item, delimiters)) {\n\
    \    items[items.size()] = item;\n  }\n  return items;\n}\nint main() {\n    auto\
    \ candidate = words_string;\n    assert(candidate((\"Hi, my name is John\")) ==\
    \ (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"John\"})));\n\
    \    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm4dj8vr6.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmpm4dj8vr6.cpp:13:43: error: no matching\
    \ function for call to 'getline(std::stringstream&, std::string&, std::string&)'\n\
    \   while (std::getline(ss, item, delimiters)) {\n                           \
    \                ^\n/tmp/tmpm4dj8vr6.cpp:13:43: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/string:53:0,\n                 from /usr/include/c++/4.8.2/bitset:47,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpm4dj8vr6.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:1068:5:\
    \ note: template<class _CharT, class _Traits, class _Alloc> std::basic_istream<_CharT,\
    \ _Traits>& std::getline(std::basic_istream<_CharT, _Traits>&, std::basic_string<_CharT,\
    \ _Traits, _Alloc>&, _CharT)\n     getline(basic_istream<_CharT, _Traits>& __in,\n\
    \     ^\n/usr/include/c++/4.8.2/bits/basic_string.tcc:1068:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpm4dj8vr6.cpp:13:43: note: \
    \  deduced conflicting types for parameter '_CharT' ('char' and 'std::basic_string<char>')\n\
    \   while (std::getline(ss, item, delimiters)) {\n                           \
    \                ^\nIn file included from /usr/include/c++/4.8.2/string:52:0,\n\
    \                 from /usr/include/c++/4.8.2/bitset:47,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n             \
    \    from /tmp/tmpm4dj8vr6.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.h:2793:5:\
    \ note: template<class _CharT, class _Traits, class _Alloc> std::basic_istream<_CharT,\
    \ _Traits>& std::getline(std::basic_istream<_CharT, _Traits>&, std::basic_string<_CharT,\
    \ _Traits, _Alloc>&)\n     getline(basic_istream<_CharT, _Traits>& __is,\n   \
    \  ^\n/usr/include/c++/4.8.2/bits/basic_string.h:2793:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpm4dj8vr6.cpp:13:43: note:   candidate\
    \ expects 2 arguments, 3 provided\n   while (std::getline(ss, item, delimiters))\
    \ {\n                     "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \tstd::vector<std::string> res;\n\tstd::istringstream iss(s);\n\tstd::string word;\n\
    \twhile(std::getline(iss, word, ',')) {\n\t\tres.push_back(word);\n\t}\n\treturn\
    \ res;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmphovlrpwn.cpp: In function 'int main()':\n/tmp/tmphovlrpwn.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphovlrpwn.cpp:2:\n/tmp/tmphovlrpwn.cpp:19:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmphovlrpwn.cpp:19:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmphovlrpwn.cpp:19:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmphovlrpwn.cpp:19:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphovlrpwn.cpp:19:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphovlrpwn.cpp:19:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphovlrpwn.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  // your code here\n}\nint main() {\n    auto candidate = words_string;\n  \
    \  assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcup_xgmb.cpp: In function 'int main()':\n/tmp/tmpcup_xgmb.cpp:12:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcup_xgmb.cpp:2:\n/tmp/tmpcup_xgmb.cpp:13:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpcup_xgmb.cpp:13:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpcup_xgmb.cpp:13:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpcup_xgmb.cpp:13:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpcup_xgmb.cpp:13:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpcup_xgmb.cpp:13:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpcup_xgmb.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> elems;\n  std::string str = s;\n  std::string delim\
    \ = \", \";\n  std::stringstream ss(str);\n  std::string item;\n  while (std::getline(ss,\
    \ item, delim)) {\n    elems.push_back(item);\n  }\n  return elems;\n}\nint main()\
    \ {\n    auto candidate = words_string;\n    assert(candidate((\"Hi, my name is\
    \ John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"})));\n    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxjqdg2x1.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmpxjqdg2x1.cpp:14:38: error: no matching\
    \ function for call to 'getline(std::stringstream&, std::string&, std::string&)'\n\
    \   while (std::getline(ss, item, delim)) {\n                                \
    \      ^\n/tmp/tmpxjqdg2x1.cpp:14:38: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/string:53:0,\n                 from /usr/include/c++/4.8.2/bitset:47,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxjqdg2x1.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:1068:5:\
    \ note: template<class _CharT, class _Traits, class _Alloc> std::basic_istream<_CharT,\
    \ _Traits>& std::getline(std::basic_istream<_CharT, _Traits>&, std::basic_string<_CharT,\
    \ _Traits, _Alloc>&, _CharT)\n     getline(basic_istream<_CharT, _Traits>& __in,\n\
    \     ^\n/usr/include/c++/4.8.2/bits/basic_string.tcc:1068:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpxjqdg2x1.cpp:14:38: note: \
    \  deduced conflicting types for parameter '_CharT' ('char' and 'std::basic_string<char>')\n\
    \   while (std::getline(ss, item, delim)) {\n                                \
    \      ^\nIn file included from /usr/include/c++/4.8.2/string:52:0,\n        \
    \         from /usr/include/c++/4.8.2/bitset:47,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxjqdg2x1.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.h:2793:5:\
    \ note: template<class _CharT, class _Traits, class _Alloc> std::basic_istream<_CharT,\
    \ _Traits>& std::getline(std::basic_istream<_CharT, _Traits>&, std::basic_string<_CharT,\
    \ _Traits, _Alloc>&)\n     getline(basic_istream<_CharT, _Traits>& __is,\n   \
    \  ^\n/usr/include/c++/4.8.2/bits/basic_string.h:2793:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpxjqdg2x1.cpp:14:38: note:   candidate\
    \ expects 2 arguments, 3 provided\n   while (std::getline(ss, item, delim)) {\n\
    \                                      ^\n/tmp/t"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> result;\n    std::istringstream ss(s);\n    std::string\
    \ word;\n    while (std::getline(ss, word, ','))\n    {\n        result.push_back(word);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm1ul0gsl.cpp: In function 'int main()':\n/tmp/tmpm1ul0gsl.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpm1ul0gsl.cpp:2:\n/tmp/tmpm1ul0gsl.cpp:20:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpm1ul0gsl.cpp:20:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpm1ul0gsl.cpp:20:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpm1ul0gsl.cpp:20:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpm1ul0gsl.cpp:20:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpm1ul0gsl.cpp:20:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpm1ul0gsl.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    // Write your code here\n    std::vector<std::string> result;\n    std::string\
    \ word = \"\";\n    std::stringstream ss(s);\n    std::string temp;\n    while\
    \ (std::getline(ss, temp, ',')) {\n        word = temp;\n        result.push_back(word);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuxbblws2.cpp: In function 'int main()':\n/tmp/tmpuxbblws2.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuxbblws2.cpp:2:\n/tmp/tmpuxbblws2.cpp:22:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpuxbblws2.cpp:22:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpuxbblws2.cpp:22:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpuxbblws2.cpp:22:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpuxbblws2.cpp:22:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpuxbblws2.cpp:22:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpuxbblws2.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> ret;\n  std::stringstream ss;\n  ss << s;\n  std::string\
    \ item;\n  while (std::getline(ss, item, ',')) {\n    ret.push_back(item);\n \
    \ }\n  return ret;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiejwcn__.cpp: In function 'int main()':\n/tmp/tmpiejwcn__.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpiejwcn__.cpp:2:\n/tmp/tmpiejwcn__.cpp:20:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpiejwcn__.cpp:20:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpiejwcn__.cpp:20:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpiejwcn__.cpp:20:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpiejwcn__.cpp:20:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpiejwcn__.cpp:20:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpiejwcn__.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> result;\n    auto words = s.begin(), end = s.end();\n\
    \    std::string word;\n    while (words != end) {\n        std::istringstream\
    \ iss(words);\n        while (iss >> word) {\n            result.push_back(word);\n\
    \            word = iss.get();\n        }\n        ++words;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmprq0_z52r.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmprq0_z52r.cpp:10:10: error: 'words' does\
    \ not name a type\n     auto words = s.begin(), end = s.end();\n          ^\n\
    /tmp/tmprq0_z52r.cpp:12:12: error: 'words' was not declared in this scope\n  \
    \   while (words != end) {\n            ^\n/tmp/tmprq0_z52r.cpp:12:21: error:\
    \ 'end' was not declared in this scope\n     while (words != end) {\n        \
    \             ^\n/tmp/tmprq0_z52r.cpp: In function 'int main()':\n/tmp/tmprq0_z52r.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprq0_z52r.cpp:2:\n/tmp/tmprq0_z52r.cpp:24:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmprq0_z52r.cpp:24:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmprq0_z52r.cpp:24:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmprq0_z52r.cpp:24:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprq0_z52r.cpp:24:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmprq0_z52r.cpp:24:110"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::istringstream iss(s);\n  std::vector<std::string> words;\n  while (std::getline(iss,\
    \ s, '|')) {\n    words.push_back(s);\n  }\n  return words;\n}\nint main() {\n\
    \    auto candidate = words_string;\n    assert(candidate((\"Hi, my name is John\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"John\"})));\n\
    \    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyiimb1tz.cpp: In function 'int main()':\n/tmp/tmpyiimb1tz.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyiimb1tz.cpp:2:\n/tmp/tmpyiimb1tz.cpp:18:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpyiimb1tz.cpp:18:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpyiimb1tz.cpp:18:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpyiimb1tz.cpp:18:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpyiimb1tz.cpp:18:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpyiimb1tz.cpp:18:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpyiimb1tz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> words;\n\n    std::stringstream ss(s);\n\n    std::string\
    \ item;\n\n    while (std::getline(ss, item, ',')) {\n        words.push_back(item);\n\
    \    }\n\n    return words;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb9pbndy7.cpp: In function 'int main()':\n/tmp/tmpb9pbndy7.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb9pbndy7.cpp:2:\n/tmp/tmpb9pbndy7.cpp:23:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpb9pbndy7.cpp:23:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpb9pbndy7.cpp:23:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpb9pbndy7.cpp:23:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpb9pbndy7.cpp:23:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpb9pbndy7.cpp:23:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpb9pbndy7.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> tokens;\n    std::istringstream ss(s);\n    std::string\
    \ token;\n    while (std::getline(ss, token, ',')) {\n        tokens.push_back(token);\n\
    \    }\n    return tokens;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiu2yr_qe.cpp: In function 'int main()':\n/tmp/tmpiu2yr_qe.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpiu2yr_qe.cpp:2:\n/tmp/tmpiu2yr_qe.cpp:19:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpiu2yr_qe.cpp:19:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpiu2yr_qe.cpp:19:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpiu2yr_qe.cpp:19:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpiu2yr_qe.cpp:19:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpiu2yr_qe.cpp:19:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpiu2yr_qe.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::string arr[] = s.split(\" \");\n  std::vector<std::string> ans(std::begin(arr),\
    \ std::end(arr));\n  return ans;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj6desy4f.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmpj6desy4f.cpp:9:25: error: 'std::string'\
    \ has no member named 'split'\n   std::string arr[] = s.split(\" \");\n      \
    \                   ^\n/tmp/tmpj6desy4f.cpp:10:32: error: 'begin' is not a member\
    \ of 'std'\n   std::vector<std::string> ans(std::begin(arr), std::end(arr));\n\
    \                                ^\n/tmp/tmpj6desy4f.cpp:10:49: error: 'end' is\
    \ not a member of 'std'\n   std::vector<std::string> ans(std::begin(arr), std::end(arr));\n\
    \                                                 ^\n/tmp/tmpj6desy4f.cpp: In\
    \ function 'int main()':\n/tmp/tmpj6desy4f.cpp:14:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = words_string;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj6desy4f.cpp:2:\n/tmp/tmpj6desy4f.cpp:15:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpj6desy4f.cpp:15:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpj6desy4f.cpp:15:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpj6desy4f.cpp:15:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpj6desy4f.cpp:15:110:\
    \ error: no matching f"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> word_vec;\n    std::string token;\n    std::istringstream\
    \ ss(s);\n    while (std::getline(ss, token, ',')) {\n        word_vec.push_back(token);\n\
    \    }\n    return word_vec;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpubauvhxl.cpp: In function 'int main()':\n/tmp/tmpubauvhxl.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpubauvhxl.cpp:2:\n/tmp/tmpubauvhxl.cpp:19:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpubauvhxl.cpp:19:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpubauvhxl.cpp:19:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpubauvhxl.cpp:19:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpubauvhxl.cpp:19:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpubauvhxl.cpp:19:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpubauvhxl.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    // your code goes here\n    auto temp = s.substr(0, s.find_first_of(\" \"\
    ));\n    std::vector<std::string> res;\n    res.push_back(temp);\n    while (temp\
    \ != \"\") {\n        temp = temp.substr(0, temp.find_first_of(\" \"));\n    \
    \    res.push_back(temp);\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = words_string;\n    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg6hun0qr.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmpg6hun0qr.cpp:10:10: error: 'temp' does\
    \ not name a type\n     auto temp = s.substr(0, s.find_first_of(\" \"));\n   \
    \       ^\n/tmp/tmpg6hun0qr.cpp:12:19: error: 'temp' was not declared in this\
    \ scope\n     res.push_back(temp);\n                   ^\n/tmp/tmpg6hun0qr.cpp:\
    \ In function 'int main()':\n/tmp/tmpg6hun0qr.cpp:20:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = words_string;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg6hun0qr.cpp:2:\n/tmp/tmpg6hun0qr.cpp:21:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpg6hun0qr.cpp:21:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpg6hun0qr.cpp:21:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpg6hun0qr.cpp:21:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpg6hun0qr.cpp:21:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpg6hun0qr.cpp:21:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/inc"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> words;\n  std::string word = \"\";\n  for (int i =\
    \ 0; i < s.length(); i++) {\n    if (s[i] == ',' || s[i] == ' ') {\n      if (word.length())\
    \ {\n        words.push_back(word);\n      }\n      word = \"\";\n    } else {\n\
    \      word += s[i];\n    }\n  }\n  if (word.length()) {\n    words.push_back(word);\n\
    \  }\n  return words;\n}\nint main() {\n    auto candidate = words_string;\n \
    \   assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy39ueozu.cpp: In function 'int main()':\n/tmp/tmpy39ueozu.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpy39ueozu.cpp:2:\n/tmp/tmpy39ueozu.cpp:28:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpy39ueozu.cpp:28:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpy39ueozu.cpp:28:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpy39ueozu.cpp:28:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpy39ueozu.cpp:28:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpy39ueozu.cpp:28:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpy39ueozu.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    // Split your string into an array of words\n    // For example, if the string\
    \ is \"Hi, my name is John\" then your array should look like below\n    // [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"]\n\n    // Split the string into array\n\
    \    std::vector<std::string> strs;\n    std::string delimiter = \",\";\n    size_t\
    \ prev = 0, pos = 0;\n    while ((pos = s.find(delimiter)) != std::string::npos)\
    \ {\n        if (prev > pos) {\n            strs.push_back(s.substr(prev, pos));\n\
    \        }\n        strs.push_back(s.substr(pos, delimiter.length()));\n     \
    \   prev = pos + delimiter.length();\n    }\n    if (prev < s.length()) {\n  \
    \      strs.push_back(s.substr(prev));\n    }\n    return strs;\n}\nint main()\
    \ {\n    auto candidate = words_string;\n    assert(candidate((\"Hi, my name is\
    \ John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"})));\n    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3ywotcb0.cpp: In function 'int main()':\n/tmp/tmp3ywotcb0.cpp:30:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3ywotcb0.cpp:2:\n/tmp/tmp3ywotcb0.cpp:31:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmp3ywotcb0.cpp:31:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmp3ywotcb0.cpp:31:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmp3ywotcb0.cpp:31:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp3ywotcb0.cpp:31:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp3ywotcb0.cpp:31:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp3ywotcb0.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> words;\n    std::istringstream iss(s);\n    std::string\
    \ word;\n    while (std::getline(iss, word, ',')) {\n        words.push_back(word);\n\
    \    }\n    return words;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9n8fus2_.cpp: In function 'int main()':\n/tmp/tmp9n8fus2_.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9n8fus2_.cpp:2:\n/tmp/tmp9n8fus2_.cpp:19:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmp9n8fus2_.cpp:19:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmp9n8fus2_.cpp:19:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmp9n8fus2_.cpp:19:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp9n8fus2_.cpp:19:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp9n8fus2_.cpp:19:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp9n8fus2_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::string delimiters(\" \");\n  std::string nums = \"0123456789\";\n  std::vector<std::string>\
    \ ret;\n  std::string token = std::string(s);\n  for (std::size_t i = 0; i !=\
    \ token.size(); ++i) {\n    if (isalpha(token[i]) || isdigit(token[i])) {\n  \
    \    std::cout << token << \" \" << std::endl;\n      ret.push_back(token);\n\
    \      token = \"\";\n    } else if (token[i] == '\\'') {\n      token = std::string(token.begin(),\
    \ token.begin() + i - 1);\n      std::cout << token << \" \" << std::endl;\n \
    \     ret.push_back(token);\n      token = std::string(token.begin() + 1, token.end());\n\
    \    } else if (token[i] == '\\\"') {\n      token = std::string(token.begin(),\
    \ token.begin() + i - 1);\n      std::cout << token << \" \" << std::endl;\n \
    \     ret.push_back(token);\n      token = std::string(token.begin() + 1, token.end());\n\
    \    } else if (token[i] == ',') {\n      token = std::string(token.begin(), token.begin()\
    \ + i - 1);\n      std::cout << token << \" \" << std::endl;\n      ret.push_back(token);\n\
    \      token = std::string(token.begin() + 1, token.end());\n    }\n  }\n  return\
    \ ret;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpukqgp8vx.cpp: In function 'int main()':\n/tmp/tmpukqgp8vx.cpp:38:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpukqgp8vx.cpp:2:\n/tmp/tmpukqgp8vx.cpp:39:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpukqgp8vx.cpp:39:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpukqgp8vx.cpp:39:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpukqgp8vx.cpp:39:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpukqgp8vx.cpp:39:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpukqgp8vx.cpp:39:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpukqgp8vx.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> v;\n  std::string word;\n  std::stringstream ss(s);\n\
    \  while (getline(ss, word, ',')) {\n    v.push_back(word);\n  }\n  return v;\n\
    }\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0xbokn14.cpp: In function 'int main()':\n/tmp/tmp0xbokn14.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0xbokn14.cpp:2:\n/tmp/tmp0xbokn14.cpp:19:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmp0xbokn14.cpp:19:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmp0xbokn14.cpp:19:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmp0xbokn14.cpp:19:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp0xbokn14.cpp:19:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp0xbokn14.cpp:19:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp0xbokn14.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  s = s.substr(0, s.size() - 1);\n  std::stringstream ss(s);\n  std::vector<std::string>\
    \ words;\n  std::string word;\n  while (std::getline(ss, word, ',')) {\n    words.push_back(word);\n\
    \  }\n  return words;\n}\nint main() {\n    auto candidate = words_string;\n \
    \   assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpslez3vea.cpp: In function 'int main()':\n/tmp/tmpslez3vea.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpslez3vea.cpp:2:\n/tmp/tmpslez3vea.cpp:20:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpslez3vea.cpp:20:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpslez3vea.cpp:20:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpslez3vea.cpp:20:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpslez3vea.cpp:20:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpslez3vea.cpp:20:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpslez3vea.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> tokens;\n    std::string delimiters = \" ,.-\";\n\
    \    size_t prev = 0;\n    while (true) {\n        size_t next = s.find(delimiters,\
    \ prev);\n        std::string token = s.substr(prev, next - prev);\n        tokens.push_back(token);\n\
    \        if (next == std::string::npos) {\n            break;\n        }\n   \
    \     prev = next + 1;\n    }\n    return tokens;\n}\nint main() {\n    auto candidate\
    \ = words_string;\n    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmphs3bz4fd.cpp: In function 'int main()':\n/tmp/tmphs3bz4fd.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphs3bz4fd.cpp:2:\n/tmp/tmphs3bz4fd.cpp:25:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmphs3bz4fd.cpp:25:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmphs3bz4fd.cpp:25:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmphs3bz4fd.cpp:25:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphs3bz4fd.cpp:25:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphs3bz4fd.cpp:25:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphs3bz4fd.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::istringstream ss(s);\n    std::string word;\n    std::vector<std::string>\
    \ v;\n    while (std::getline(ss, word, ',')) {\n        v.push_back(word);\n\
    \    }\n    return v;\n}\nint main() {\n    auto candidate = words_string;\n \
    \   assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7norlfvn.cpp: In function 'int main()':\n/tmp/tmp7norlfvn.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7norlfvn.cpp:2:\n/tmp/tmp7norlfvn.cpp:19:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmp7norlfvn.cpp:19:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmp7norlfvn.cpp:19:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmp7norlfvn.cpp:19:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp7norlfvn.cpp:19:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp7norlfvn.cpp:19:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp7norlfvn.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  // Split string by space, comma and new line.\n  // You don't need to modify\
    \ the string from now on.\n  std::vector<std::string> strs;\n  std::stringstream\
    \ ss(s);\n  std::string item;\n  while (std::getline(ss, item, ',')) {\n    strs.push_back(item);\n\
    \  }\n  return strs;\n}\nint main() {\n    auto candidate = words_string;\n  \
    \  assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwj1xxqv6.cpp: In function 'int main()':\n/tmp/tmpwj1xxqv6.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwj1xxqv6.cpp:2:\n/tmp/tmpwj1xxqv6.cpp:21:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpwj1xxqv6.cpp:21:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpwj1xxqv6.cpp:21:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpwj1xxqv6.cpp:21:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwj1xxqv6.cpp:21:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwj1xxqv6.cpp:21:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwj1xxqv6.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> words;\n    std::string temp = \"\";\n    std::string\
    \ delimiter = \",\";\n    size_t prev = 0, next = 0;\n    while (next != std::string::npos)\
    \ {\n        next = s.find_first_not_of(delimiter, prev);\n        if (next ==\
    \ std::string::npos) {\n            next = s.size();\n        }\n        temp\
    \ = s.substr(prev, next - prev);\n        words.push_back(temp);\n        prev\
    \ = next + 1;\n    }\n    temp = s.substr(prev, s.size() - prev);\n    words.push_back(temp);\n\
    \    return words;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpeczgcie3.cpp: In function 'int main()':\n/tmp/tmpeczgcie3.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpeczgcie3.cpp:2:\n/tmp/tmpeczgcie3.cpp:28:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpeczgcie3.cpp:28:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpeczgcie3.cpp:28:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpeczgcie3.cpp:28:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpeczgcie3.cpp:28:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpeczgcie3.cpp:28:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpeczgcie3.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \   std::vector<std::string> v;\n   std::string delimiters = \",\";\n   size_t\
    \ prev = 0, pos = 0;\n   std::string::size_type lastPos = 0;\n   // Get all word\
    \ positions in the given string\n   while ((pos = s.find(delimiters, prev)) !=\
    \ std::string::npos) {\n      v.push_back(s.substr(prev, pos-prev));\n      lastPos\
    \ = pos + delimiters.length();\n   }\n   // Add remaining part of the string\n\
    \   v.push_back(s.substr(lastPos));\n   return v;\n}\nint main() {\n    auto candidate\
    \ = words_string;\n    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5yb5wc5k.cpp: In function 'int main()':\n/tmp/tmp5yb5wc5k.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5yb5wc5k.cpp:2:\n/tmp/tmp5yb5wc5k.cpp:24:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmp5yb5wc5k.cpp:24:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmp5yb5wc5k.cpp:24:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmp5yb5wc5k.cpp:24:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp5yb5wc5k.cpp:24:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp5yb5wc5k.cpp:24:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp5yb5wc5k.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    // Complete the function here\n    int i = 0;\n    std::vector<std::string>\
    \ words;\n    while (i < s.length()) {\n        std::string token = \"\";\n  \
    \      if (s[i] == ',' || s[i] == ' ') {\n            while (i < s.length() &&\
    \ s[i] != '\\0') {\n                token = token + s[i];\n                i++;\n\
    \            }\n            words.push_back(token);\n            i = i + 1;\n\
    \        } else {\n            i++;\n        }\n    }\n    return words;\n}\n\
    int main() {\n    auto candidate = words_string;\n    assert(candidate((\"Hi,\
    \ my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8dyib52a.cpp: In function 'int main()':\n/tmp/tmp8dyib52a.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8dyib52a.cpp:2:\n/tmp/tmp8dyib52a.cpp:29:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmp8dyib52a.cpp:29:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmp8dyib52a.cpp:29:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmp8dyib52a.cpp:29:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8dyib52a.cpp:29:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp8dyib52a.cpp:29:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp8dyib52a.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> words;\n    // Write your code here.\n    std::string::size_type\
    \ pos = 0, end = s.length();\n    while (pos < end)\n    {\n        std::string::size_type\
    \ i = s.find_first_of(\",.;\", pos);\n        if (i == std::string::npos)\n  \
    \      {\n            i = end;\n        }\n        std::string word = s.substr(pos,\
    \ i - pos);\n        words.push_back(word);\n        pos = i + 1;\n    }\n   \
    \ return words;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6j_z6if8.cpp: In function 'int main()':\n/tmp/tmp6j_z6if8.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6j_z6if8.cpp:2:\n/tmp/tmp6j_z6if8.cpp:27:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmp6j_z6if8.cpp:27:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmp6j_z6if8.cpp:27:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmp6j_z6if8.cpp:27:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6j_z6if8.cpp:27:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6j_z6if8.cpp:27:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6j_z6if8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::istringstream ss(s);\n  std::string item;\n  std::vector<std::string>\
    \ ans;\n  while (std::getline(ss, item, ',')) {\n    ans.push_back(item);\n  }\n\
    \  return ans;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl1b97pfu.cpp: In function 'int main()':\n/tmp/tmpl1b97pfu.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl1b97pfu.cpp:2:\n/tmp/tmpl1b97pfu.cpp:19:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpl1b97pfu.cpp:19:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpl1b97pfu.cpp:19:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpl1b97pfu.cpp:19:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpl1b97pfu.cpp:19:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpl1b97pfu.cpp:19:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpl1b97pfu.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> v;\n  std::istringstream iss(s);\n  std::string word;\n\
    \  while (std::getline(iss, word, ',')) {\n    v.push_back(word);\n  }\n  return\
    \ v;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5l53rp6g.cpp: In function 'int main()':\n/tmp/tmp5l53rp6g.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5l53rp6g.cpp:2:\n/tmp/tmp5l53rp6g.cpp:19:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmp5l53rp6g.cpp:19:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmp5l53rp6g.cpp:19:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmp5l53rp6g.cpp:19:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp5l53rp6g.cpp:19:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp5l53rp6g.cpp:19:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp5l53rp6g.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> elems;\n  std::istringstream ss(s);\n  std::string\
    \ ele;\n  while (std::getline(ss, ele, ',')) {\n    elems.push_back(ele);\n  }\n\
    \  return elems;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmphnd1yrap.cpp: In function 'int main()':\n/tmp/tmphnd1yrap.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphnd1yrap.cpp:2:\n/tmp/tmphnd1yrap.cpp:19:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmphnd1yrap.cpp:19:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmphnd1yrap.cpp:19:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmphnd1yrap.cpp:19:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphnd1yrap.cpp:19:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphnd1yrap.cpp:19:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphnd1yrap.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    // Split the string based on commas.\n    std::vector<std::string> words(std::sregex_token_iterator(s.begin(),\
    \ s.end(), std::sregex(\",\"), -1), {});\n    // Remove the duplicate words\n\
    \    words.erase(std::unique(words.begin(), words.end()), words.end());\n    return\
    \ words;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi7sqwjk7.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmpi7sqwjk7.cpp:10:36: error: 'sregex_token_iterator'\
    \ is not a member of 'std'\n     std::vector<std::string> words(std::sregex_token_iterator(s.begin(),\
    \ s.end(), std::sregex(\",\"), -1), {});\n                                   \
    \ ^\n/tmp/tmpi7sqwjk7.cpp:10:83: error: 'sregex' is not a member of 'std'\n  \
    \   std::vector<std::string> words(std::sregex_token_iterator(s.begin(), s.end(),\
    \ std::sregex(\",\"), -1), {});\n                                            \
    \                                       ^\n/tmp/tmpi7sqwjk7.cpp:10:104: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     std::vector<std::string> words(std::sregex_token_iterator(s.begin(),\
    \ s.end(), std::sregex(\",\"), -1), {});\n                                   \
    \                                                                     ^\n/tmp/tmpi7sqwjk7.cpp:\
    \ In function 'int main()':\n/tmp/tmpi7sqwjk7.cpp:16:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = words_string;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpi7sqwjk7.cpp:2:\n/tmp/tmpi7sqwjk7.cpp:17:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpi7sqwjk7.cpp:17:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpi7sqwjk7.cpp:17:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> words;\n  std::istringstream iss(s);\n  std::string\
    \ word;\n  while (std::getline(iss, word, ',')){\n    words.push_back(word);\n\
    \  }\n  return words;\n}\nint main() {\n    auto candidate = words_string;\n \
    \   assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcjunpygc.cpp: In function 'int main()':\n/tmp/tmpcjunpygc.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcjunpygc.cpp:2:\n/tmp/tmpcjunpygc.cpp:19:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpcjunpygc.cpp:19:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpcjunpygc.cpp:19:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpcjunpygc.cpp:19:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpcjunpygc.cpp:19:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpcjunpygc.cpp:19:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpcjunpygc.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> result;\n  std::string split_string;\n  std::istringstream\
    \ iss(s);\n\n  while (std::getline(iss, split_string, ',')) {\n    result.push_back(split_string);\n\
    \  }\n\n  return result;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6lotjpl9.cpp: In function 'int main()':\n/tmp/tmp6lotjpl9.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6lotjpl9.cpp:2:\n/tmp/tmp6lotjpl9.cpp:21:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmp6lotjpl9.cpp:21:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmp6lotjpl9.cpp:21:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmp6lotjpl9.cpp:21:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6lotjpl9.cpp:21:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6lotjpl9.cpp:21:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6lotjpl9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  assert(s.size() > 0);\n  std::vector<std::string> words;\n  size_t pos = 0;\n\
    \  size_t prev = 0, len = s.size();\n  while (len) {\n    if (len <= 1) {\n  \
    \    // If there are 1 or less chars, return the existing word\n      words.push_back(s.substr(prev,\
    \ pos - prev));\n      prev = pos = 0;\n      len = 0;\n    } else {\n      //\
    \ If there are more chars, return a word of size 1\n      words.push_back(s.substr(prev,\
    \ len));\n      len--;\n      prev = pos = len;\n    }\n  }\n  words.push_back(s.substr(prev,\
    \ pos));\n  return words;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmprsrw01sq.cpp: In function 'int main()':\n/tmp/tmprsrw01sq.cpp:30:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprsrw01sq.cpp:2:\n/tmp/tmprsrw01sq.cpp:31:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmprsrw01sq.cpp:31:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmprsrw01sq.cpp:31:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmprsrw01sq.cpp:31:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprsrw01sq.cpp:31:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmprsrw01sq.cpp:31:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmprsrw01sq.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> results;\n    std::string temp;\n    std::istringstream\
    \ ss(s);\n    while (std::getline(ss, temp, ',')) {\n        results.push_back(temp);\n\
    \    }\n    return results;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqet4m4qu.cpp: In function 'int main()':\n/tmp/tmpqet4m4qu.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqet4m4qu.cpp:2:\n/tmp/tmpqet4m4qu.cpp:19:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpqet4m4qu.cpp:19:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpqet4m4qu.cpp:19:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpqet4m4qu.cpp:19:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpqet4m4qu.cpp:19:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpqet4m4qu.cpp:19:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpqet4m4qu.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    // Split your string with ',' into words\n    std::vector<std::string> words(split(s.begin(),\
    \ s.end(), ','));\n    // Convert strings to lowercase\n    for (auto & w : words)\
    \ w = tolower(w);\n    return words;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa6sn_u9k.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmpa6sn_u9k.cpp:10:65: error: 'split' was\
    \ not declared in this scope\n     std::vector<std::string> words(split(s.begin(),\
    \ s.end(), ','));\n                                                          \
    \       ^\n/tmp/tmpa6sn_u9k.cpp:12:17: error: ISO C++ forbids declaration of 'w'\
    \ with no type [-fpermissive]\n     for (auto & w : words) w = tolower(w);\n \
    \                ^\n/tmp/tmpa6sn_u9k.cpp:12:21: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (auto & w : words) w = tolower(w);\n\
    \                     ^\n/tmp/tmpa6sn_u9k.cpp: In function 'int main()':\n/tmp/tmpa6sn_u9k.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa6sn_u9k.cpp:2:\n/tmp/tmpa6sn_u9k.cpp:17:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpa6sn_u9k.cpp:17:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpa6sn_u9k.cpp:17:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpa6sn_u9k.cpp:17:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpa6s"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> result;\n    std::istringstream stream(s);\n   \
    \ std::string word;\n    while (std::getline(stream, word, ',')) {\n        result.push_back(word);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmps3ggb5p1.cpp: In function 'int main()':\n/tmp/tmps3ggb5p1.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmps3ggb5p1.cpp:2:\n/tmp/tmps3ggb5p1.cpp:19:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmps3ggb5p1.cpp:19:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmps3ggb5p1.cpp:19:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmps3ggb5p1.cpp:19:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmps3ggb5p1.cpp:19:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmps3ggb5p1.cpp:19:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmps3ggb5p1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> vs;\n  std::istringstream is(s);\n  std::string word;\n\
    \  while (std::getline(is, word, ',')) {\n    vs.push_back(word);\n  }\n  return\
    \ vs;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmph4opkamf.cpp: In function 'int main()':\n/tmp/tmph4opkamf.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph4opkamf.cpp:2:\n/tmp/tmph4opkamf.cpp:19:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmph4opkamf.cpp:19:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmph4opkamf.cpp:19:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmph4opkamf.cpp:19:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmph4opkamf.cpp:19:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmph4opkamf.cpp:19:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmph4opkamf.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> word_list;\n  std::istringstream iss(s);\n  std::string\
    \ word;\n\n  while(std::getline(iss, word, ',')) {\n    word_list.push_back(word);\n\
    \  }\n  return word_list;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2ci50abv.cpp: In function 'int main()':\n/tmp/tmp2ci50abv.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2ci50abv.cpp:2:\n/tmp/tmp2ci50abv.cpp:20:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmp2ci50abv.cpp:20:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmp2ci50abv.cpp:20:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmp2ci50abv.cpp:20:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp2ci50abv.cpp:20:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp2ci50abv.cpp:20:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2ci50abv.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    s.erase(std::remove_if(s.begin(), s.end(), isspace), s.end());\n    std::vector<std::string>\
    \ elems;\n    std::string word;\n    std::stringstream ss;\n    while(std::getline(std::cin,word,','))\
    \ ss.str(\"\");\n    ss << word;\n    for(std::string line; std::getline(ss, line,\
    \ ','); ) {\n        elems.push_back(line);\n    }\n    return elems;\n}\nint\
    \ main() {\n    auto candidate = words_string;\n    assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five, six\"\
    )) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpliq81gpr.cpp: In function 'int main()':\n/tmp/tmpliq81gpr.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpliq81gpr.cpp:2:\n/tmp/tmpliq81gpr.cpp:22:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpliq81gpr.cpp:22:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpliq81gpr.cpp:22:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpliq81gpr.cpp:22:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpliq81gpr.cpp:22:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpliq81gpr.cpp:22:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpliq81gpr.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> tokens;\n    std::istringstream ss(s);\n    std::string\
    \ word;\n    while (std::getline(ss, word, ','))\n        tokens.push_back(word);\n\
    \    return tokens;\n}\nint main() {\n    auto candidate = words_string;\n   \
    \ assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkssw0mgi.cpp: In function 'int main()':\n/tmp/tmpkssw0mgi.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkssw0mgi.cpp:2:\n/tmp/tmpkssw0mgi.cpp:18:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpkssw0mgi.cpp:18:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpkssw0mgi.cpp:18:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpkssw0mgi.cpp:18:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpkssw0mgi.cpp:18:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpkssw0mgi.cpp:18:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpkssw0mgi.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  // split string into words\n  std::vector<std::string> words;\n  std::string\
    \ token = s;\n  int idx = 1;\n  do {\n    idx = token.find(',', idx + 1);\n  \
    \  if (idx == std::string::npos) idx = token.size();\n    token = token.substr(0,\
    \ idx);\n    words.push_back(token);\n  } while (idx != std::string::npos);\n\n\
    \  return words;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpti11uajs.cpp: In function 'int main()':\n/tmp/tmpti11uajs.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpti11uajs.cpp:2:\n/tmp/tmpti11uajs.cpp:24:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpti11uajs.cpp:24:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpti11uajs.cpp:24:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpti11uajs.cpp:24:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpti11uajs.cpp:24:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpti11uajs.cpp:24:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpti11uajs.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  assert(s.size() > 0);\n  std::vector<std::string> words;\n  auto it = s.begin();\n\
    \  while (it != s.end()) {\n    auto next = find_if(it, [&](char c) {\n      return\
    \ !isspace(c);\n    });\n    words.push_back({ it + 1, next });\n    if (next\
    \ == s.end()) {\n      words.push_back({ it + 1, s.end() });\n      break;\n \
    \   }\n    it = next;\n  }\n  return words;\n}\nint main() {\n    auto candidate\
    \ = words_string;\n    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp89849b35.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmp89849b35.cpp:11:8: error: 'it' does not\
    \ name a type\n   auto it = s.begin();\n        ^\n/tmp/tmp89849b35.cpp:12:10:\
    \ error: 'it' was not declared in this scope\n   while (it != s.end()) {\n   \
    \       ^\n/tmp/tmp89849b35.cpp:13:10: error: 'next' does not name a type\n  \
    \   auto next = find_if(it, [&](char c) {\n          ^\n/tmp/tmp89849b35.cpp:15:6:\
    \ error: expected primary-expression before ')' token\n     });\n      ^\n/tmp/tmp89849b35.cpp:15:6:\
    \ error: expected ';' before ')' token\n/tmp/tmp89849b35.cpp:16:20: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     words.push_back({ it + 1, next });\n                    ^\n/tmp/tmp89849b35.cpp:16:31:\
    \ error: 'next' was not declared in this scope\n     words.push_back({ it + 1,\
    \ next });\n                               ^\n/tmp/tmp89849b35.cpp:16:37: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     words.push_back({ it + 1, next });\n                     \
    \                ^\n/tmp/tmp89849b35.cpp:16:37: error: no matching function for\
    \ call to 'std::vector<std::basic_string<char> >::push_back(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp89849b35.cpp:16:37: note: candidate is:\nIn file included from\
    \ /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp89849b35.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:901:7:\
    \ note: void std::vector<_Tp, _Alloc>::push_back(const value_type&) [with _Tp\
    \ = std::basic_string<char>; _Alloc = std::allocator<std::basic_string<char> >;\
    \ std::vector<_Tp, _Alloc>::value_type = std::basic_string<char>]\n       push_back(const\
    \ value_type& __x)\n       ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:901:7:\
    \ note:   no known conversion for argument 1 from '<brace-enclosed initializer\
    \ list>' to 'const value_type& {"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::string delimiter = \",\";\n  std::string word = \"\";\n  std::vector<std::string>\
    \ words;\n  int i = 0;\n  while (i < s.size()) {\n    size_t pos = s.find_first_of(delimiter,\
    \ i);\n    if (pos == std::string::npos) {\n      words.push_back(word);\n   \
    \   word = \"\";\n      ++i;\n    } else {\n      word = s.substr(i, pos - i);\n\
    \      i = pos + 1;\n    }\n  }\n  return words;\n}\nint main() {\n    auto candidate\
    \ = words_string;\n    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmphrfqsdwx.cpp: In function 'int main()':\n/tmp/tmphrfqsdwx.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphrfqsdwx.cpp:2:\n/tmp/tmphrfqsdwx.cpp:28:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmphrfqsdwx.cpp:28:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmphrfqsdwx.cpp:28:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmphrfqsdwx.cpp:28:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphrfqsdwx.cpp:28:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphrfqsdwx.cpp:28:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphrfqsdwx.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    s.erase(std::remove(s.begin(), s.end(), ','), s.end());\n    s.erase(std::remove(s.begin(),\
    \ s.end(), ' '), s.end());\n    std::vector<std::string> words;\n    std::stringstream\
    \ ss(s);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n \
    \       words.push_back(item);\n    }\n    return words;\n}\nint main() {\n  \
    \  auto candidate = words_string;\n    assert(candidate((\"Hi, my name is John\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"John\"})));\n\
    \    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8i00qj5c.cpp: In function 'int main()':\n/tmp/tmp8i00qj5c.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8i00qj5c.cpp:2:\n/tmp/tmp8i00qj5c.cpp:21:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmp8i00qj5c.cpp:21:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmp8i00qj5c.cpp:21:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmp8i00qj5c.cpp:21:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8i00qj5c.cpp:21:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp8i00qj5c.cpp:21:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp8i00qj5c.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    assert(!s.empty());\n    std::vector<std::string> res;\n    std::string token;\n\
    \    std::stringstream sstream(s);\n    while(std::getline(sstream, token, ','))\
    \ {\n        token = trim(token);\n        res.push_back(token);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5y1jgeyc.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmp5y1jgeyc.cpp:14:27: error: 'trim' was\
    \ not declared in this scope\n         token = trim(token);\n                \
    \           ^\n/tmp/tmp5y1jgeyc.cpp: In function 'int main()':\n/tmp/tmp5y1jgeyc.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5y1jgeyc.cpp:2:\n/tmp/tmp5y1jgeyc.cpp:21:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmp5y1jgeyc.cpp:21:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmp5y1jgeyc.cpp:21:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmp5y1jgeyc.cpp:21:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp5y1jgeyc.cpp:21:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp5y1jgeyc.cpp:21:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n       "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> result;\n    size_t pos;\n    while (true) {\n \
    \       pos = s.find_first_of(\",\", pos);\n        if (pos == std::string::npos)\
    \ {\n            pos = s.length();\n        }\n        result.push_back(s.substr(0,\
    \ pos));\n        s = s.substr(pos);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = words_string;\n    assert(candidate((\"Hi, my name is\
    \ John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"})));\n    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx8vnhyty.cpp: In function 'int main()':\n/tmp/tmpx8vnhyty.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpx8vnhyty.cpp:2:\n/tmp/tmpx8vnhyty.cpp:23:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpx8vnhyty.cpp:23:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpx8vnhyty.cpp:23:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpx8vnhyty.cpp:23:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpx8vnhyty.cpp:23:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpx8vnhyty.cpp:23:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpx8vnhyty.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::istringstream ss(s);\n  std::string token;\n  std::vector<std::string>\
    \ tokens;\n  while (std::getline(ss, token, ',')) {\n    tokens.push_back(token);\n\
    \  }\n  return tokens;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzxrq89hx.cpp: In function 'int main()':\n/tmp/tmpzxrq89hx.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzxrq89hx.cpp:2:\n/tmp/tmpzxrq89hx.cpp:19:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpzxrq89hx.cpp:19:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpzxrq89hx.cpp:19:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpzxrq89hx.cpp:19:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpzxrq89hx.cpp:19:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpzxrq89hx.cpp:19:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpzxrq89hx.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> elem;\n  // Write your logic here\n  for(auto it=std::sregex_token_iterator(s.begin(),s.end(),\"\
    [^,]+\",0); it!=std::sregex_token_iterator(); ++it)\n    elem.push_back(std::string(std::begin(*it),std::end(*it)));\n\
    \  return elem;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwkffy5tq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmpwkffy5tq.cpp:11:12: error: 'it' does\
    \ not name a type\n   for(auto it=std::sregex_token_iterator(s.begin(),s.end(),\"\
    [^,]+\",0); it!=std::sregex_token_iterator(); ++it)\n            ^\n/tmp/tmpwkffy5tq.cpp:11:72:\
    \ error: expected ';' before 'it'\n   for(auto it=std::sregex_token_iterator(s.begin(),s.end(),\"\
    [^,]+\",0); it!=std::sregex_token_iterator(); ++it)\n                        \
    \                                                ^\n/tmp/tmpwkffy5tq.cpp:11:72:\
    \ error: 'it' was not declared in this scope\n/tmp/tmpwkffy5tq.cpp:11:76: error:\
    \ 'sregex_token_iterator' is not a member of 'std'\n   for(auto it=std::sregex_token_iterator(s.begin(),s.end(),\"\
    [^,]+\",0); it!=std::sregex_token_iterator(); ++it)\n                        \
    \                                                    ^\n/tmp/tmpwkffy5tq.cpp:12:32:\
    \ error: 'begin' is not a member of 'std'\n     elem.push_back(std::string(std::begin(*it),std::end(*it)));\n\
    \                                ^\n/tmp/tmpwkffy5tq.cpp:12:48: error: 'end' is\
    \ not a member of 'std'\n     elem.push_back(std::string(std::begin(*it),std::end(*it)));\n\
    \                                                ^\n/tmp/tmpwkffy5tq.cpp: In function\
    \ 'int main()':\n/tmp/tmpwkffy5tq.cpp:16:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = words_string;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwkffy5tq.cpp:2:\n/tmp/tmpwkffy5tq.cpp:17:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpwkffy5tq.cpp:17:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    // your code goes here\n    std::vector<std::string> result;\n    for (char\
    \ &c : s) {\n        if (c == ',' || c == ' ') {\n            std::string temp;\n\
    \            for (char &c : s) {\n                c = c + 1;\n            }\n\
    \            result.push_back(temp);\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = words_string;\n    assert(candidate((\"Hi,\
    \ my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpccgqv8vu.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmpccgqv8vu.cpp:11:20: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n     for (char &c : s) {\n      \
    \              ^\n/tmp/tmpccgqv8vu.cpp:14:28: error: range-based 'for' loops are\
    \ not allowed in C++98 mode\n             for (char &c : s) {\n              \
    \              ^\n/tmp/tmpccgqv8vu.cpp: In function 'int main()':\n/tmp/tmpccgqv8vu.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpccgqv8vu.cpp:2:\n/tmp/tmpccgqv8vu.cpp:24:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpccgqv8vu.cpp:24:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpccgqv8vu.cpp:24:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpccgqv8vu.cpp:24:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpccgqv8vu.cpp:24:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpccgqv8vu.cpp:24:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/ve"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::string arr;\n    std::replace(s.begin(), s.end(), ',', ' ');\n    std::stringstream\
    \ ss(s);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n \
    \       arr.push_back(item);\n    }\n    std::vector<std::string> ans;\n    std::string::size_type\
    \ last = 0;\n    std::string::size_type pos = 0;\n    while (last != s.size())\
    \ {\n        last = s.find_first_of(' ', pos);\n        std::string word;\n  \
    \      if (last == std::string::npos) {\n            word = s.substr(pos);\n \
    \       } else {\n            word = s.substr(pos, last - pos);\n        }\n \
    \       ans.push_back(word);\n        pos = last + 1;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1jln5lzj.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmp1jln5lzj.cpp:14:27: error: no matching\
    \ function for call to 'std::basic_string<char>::push_back(std::string&)'\n  \
    \       arr.push_back(item);\n                           ^\n/tmp/tmp1jln5lzj.cpp:14:27:\
    \ note: candidate is:\nIn file included from /usr/include/c++/4.8.2/string:52:0,\n\
    \                 from /usr/include/c++/4.8.2/bitset:47,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n             \
    \    from /tmp/tmp1jln5lzj.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.h:1052:7:\
    \ note: void std::basic_string<_CharT, _Traits, _Alloc>::push_back(_CharT) [with\
    \ _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]\n\
    \       push_back(_CharT __c)\n       ^\n/usr/include/c++/4.8.2/bits/basic_string.h:1052:7:\
    \ note:   no known conversion for argument 1 from 'std::string {aka std::basic_string<char>}'\
    \ to 'char'\n/tmp/tmp1jln5lzj.cpp: In function 'int main()':\n/tmp/tmp1jln5lzj.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1jln5lzj.cpp:2:\n/tmp/tmp1jln5lzj.cpp:34:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmp1jln5lzj.cpp:34:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmp1jln5lzj.cpp:34:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \        std::istringstream ss(s);\n        std::string item;\n        std::vector<std::string>\
    \ words;\n        while (std::getline(ss, item, ',')) {\n                words.append(item);\n\
    \        }\n        return words;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3dyotwev.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmp3dyotwev.cpp:13:23: error: 'class std::vector<std::basic_string<char>\
    \ >' has no member named 'append'\n                 words.append(item);\n    \
    \                   ^\n/tmp/tmp3dyotwev.cpp: In function 'int main()':\n/tmp/tmp3dyotwev.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3dyotwev.cpp:2:\n/tmp/tmp3dyotwev.cpp:19:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmp3dyotwev.cpp:19:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmp3dyotwev.cpp:19:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmp3dyotwev.cpp:19:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp3dyotwev.cpp:19:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp3dyotwev.cpp:19:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_6"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> words;\n\n    std::string token;\n    std::istringstream\
    \ iss(s);\n    while (std::getline(iss, token, ',')) {\n        words.push_back(token);\n\
    \    }\n\n    return words;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6y2g1lga.cpp: In function 'int main()':\n/tmp/tmp6y2g1lga.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6y2g1lga.cpp:2:\n/tmp/tmp6y2g1lga.cpp:21:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmp6y2g1lga.cpp:21:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmp6y2g1lga.cpp:21:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmp6y2g1lga.cpp:21:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6y2g1lga.cpp:21:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6y2g1lga.cpp:21:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6y2g1lga.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> res;\n    std::istringstream iss(s);\n    std::string\
    \ word;\n    while (std::getline(iss, word, ',')) {\n        res.push_back(word);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpco0fctiv.cpp: In function 'int main()':\n/tmp/tmpco0fctiv.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpco0fctiv.cpp:2:\n/tmp/tmpco0fctiv.cpp:19:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpco0fctiv.cpp:19:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpco0fctiv.cpp:19:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpco0fctiv.cpp:19:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpco0fctiv.cpp:19:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpco0fctiv.cpp:19:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpco0fctiv.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> elems;\n    std::istringstream iss(s);\n    std::string\
    \ token;\n    while (std::getline(iss, token, ',')) {\n        elems.push_back(token);\n\
    \    }\n    return elems;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2itho88i.cpp: In function 'int main()':\n/tmp/tmp2itho88i.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2itho88i.cpp:2:\n/tmp/tmp2itho88i.cpp:19:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmp2itho88i.cpp:19:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmp2itho88i.cpp:19:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmp2itho88i.cpp:19:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp2itho88i.cpp:19:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp2itho88i.cpp:19:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2itho88i.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> words;\n    std::stringstream ss(s);\n    std::string\
    \ word;\n    while (std::getline(ss, word, ',')) {\n        words.push_back(word);\n\
    \    }\n    return words;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjncs3dfn.cpp: In function 'int main()':\n/tmp/tmpjncs3dfn.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjncs3dfn.cpp:2:\n/tmp/tmpjncs3dfn.cpp:19:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpjncs3dfn.cpp:19:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpjncs3dfn.cpp:19:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpjncs3dfn.cpp:19:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpjncs3dfn.cpp:19:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpjncs3dfn.cpp:19:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpjncs3dfn.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> words;\n  for (auto word : s) {\n    if (word != '\
    \ ') {\n      words.push_back(word);\n    }\n  }\n  return words;\n}\nint main()\
    \ {\n    auto candidate = words_string;\n    assert(candidate((\"Hi, my name is\
    \ John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"})));\n    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfis9d37b.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmpfis9d37b.cpp:10:13: error: 'word' does\
    \ not name a type\n   for (auto word : s) {\n             ^\n/tmp/tmpfis9d37b.cpp:15:3:\
    \ error: expected ';' before 'return'\n   return words;\n   ^\n/tmp/tmpfis9d37b.cpp:15:3:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpfis9d37b.cpp:15:3:\
    \ error: expected ';' before 'return'\n/tmp/tmpfis9d37b.cpp:15:3: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpfis9d37b.cpp:15:3: error: expected\
    \ ')' before 'return'\n/tmp/tmpfis9d37b.cpp: In function 'int main()':\n/tmp/tmpfis9d37b.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfis9d37b.cpp:2:\n/tmp/tmpfis9d37b.cpp:19:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpfis9d37b.cpp:19:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpfis9d37b.cpp:19:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpfis9d37b.cpp:19:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpfis9d37b.cpp:19:110:\
    \ error: no matching function for call to"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::istringstream input(s);\n    std::vector<std::string> tokens;\n    std::string\
    \ token;\n    while (std::getline(input, token, ','))\n    {\n        tokens.push_back(token);\n\
    \    }\n    return tokens;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzbbob4jt.cpp: In function 'int main()':\n/tmp/tmpzbbob4jt.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzbbob4jt.cpp:2:\n/tmp/tmpzbbob4jt.cpp:20:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpzbbob4jt.cpp:20:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpzbbob4jt.cpp:20:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpzbbob4jt.cpp:20:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpzbbob4jt.cpp:20:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpzbbob4jt.cpp:20:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpzbbob4jt.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> words;\n  std::stringstream ss(s);\n  std::string\
    \ temp;\n  while(std::getline(ss, temp, ',')) {\n    words += temp;\n  }\n  return\
    \ words;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpoez9_63g.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmpoez9_63g.cpp:13:11: error: no match for\
    \ 'operator+=' (operand types are 'std::vector<std::basic_string<char> >' and\
    \ 'std::string {aka std::basic_string<char>}')\n     words += temp;\n        \
    \   ^\n/tmp/tmpoez9_63g.cpp: In function 'int main()':\n/tmp/tmpoez9_63g.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpoez9_63g.cpp:2:\n/tmp/tmpoez9_63g.cpp:19:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpoez9_63g.cpp:19:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpoez9_63g.cpp:19:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpoez9_63g.cpp:19:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpoez9_63g.cpp:19:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpoez9_63g.cpp:19:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 fro"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> tokens;\n    // Loop through all tokens in the string\n\
    \    for (int i = 0; i < s.length(); i++) {\n        // Check if the token is\
    \ a space, comma, or newline\n        // If it is a space, add it to the token\n\
    \        // If it is a comma, add it to the token\n        // If it is a newline,\
    \ add it to the token\n        if (s[i] == ' ' || s[i] == ',' || s[i] == '\\n')\
    \ {\n            tokens.push_back(s.substr(0, i));\n            s.erase(0, i +\
    \ 1);\n        }\n    }\n    // Add the last token\n    tokens.push_back(s);\n\
    \    return tokens;\n}\nint main() {\n    auto candidate = words_string;\n   \
    \ assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnm583s1_.cpp: In function 'int main()':\n/tmp/tmpnm583s1_.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnm583s1_.cpp:2:\n/tmp/tmpnm583s1_.cpp:27:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpnm583s1_.cpp:27:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpnm583s1_.cpp:27:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpnm583s1_.cpp:27:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpnm583s1_.cpp:27:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpnm583s1_.cpp:27:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpnm583s1_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  // Split string on spaces.\n  std::string delimiter = \", \";\n  std::vector<std::string>\
    \ tokens;\n  std::istringstream tokenStream(s);\n  while (tokenStream >> std::ws)\
    \ // Tokenize on whitespace.\n  {\n    std::string token = tokenStream.str();\n\
    \    // Ignore empty tokens\n    if (token.empty())\n      continue;\n    // Remove\
    \ delimiter characters\n    token.erase(std::remove(token.begin(), token.end(),\
    \ delimiter), token.end());\n    // Store the string in tokens array\n    tokens.push_back(token);\n\
    \  }\n  return tokens;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2fck1tad.cpp: In function 'int main()':\n/tmp/tmp2fck1tad.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2fck1tad.cpp:2:\n/tmp/tmp2fck1tad.cpp:28:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmp2fck1tad.cpp:28:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmp2fck1tad.cpp:28:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmp2fck1tad.cpp:28:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp2fck1tad.cpp:28:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp2fck1tad.cpp:28:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2fck1tad.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  // Write your code here\n  std::string result = \"\";\n  for (int i = 0; i\
    \ < s.length(); i++)\n  {\n    if (i == 0 || s.at(i) != ' ' || s.at(i) != ',')\n\
    \      result += s.at(i);\n  }\n  std::vector<std::string> words;\n  std::stringstream\
    \ ss(result);\n  while (ss.good())\n  {\n    std::string word;\n    ss >> word;\n\
    \    words.push_back(word);\n  }\n  return words;\n}\nint main() {\n    auto candidate\
    \ = words_string;\n    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcidl7hcg.cpp: In function 'int main()':\n/tmp/tmpcidl7hcg.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcidl7hcg.cpp:2:\n/tmp/tmpcidl7hcg.cpp:28:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpcidl7hcg.cpp:28:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpcidl7hcg.cpp:28:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpcidl7hcg.cpp:28:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpcidl7hcg.cpp:28:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpcidl7hcg.cpp:28:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpcidl7hcg.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::string word = \"\";\n  std::vector<std::string> words;\n  int len = s.size();\n\
    \  for (int i = 0; i < len; ++i) {\n    if (s[i] == ',' || s[i] == ' ') \n   \
    \     word.clear();\n    else {\n        word += s[i];\n        words.push_back(word);\n\
    \    }\n  }\n  return words;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkhf3cufr.cpp: In function 'int main()':\n/tmp/tmpkhf3cufr.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkhf3cufr.cpp:2:\n/tmp/tmpkhf3cufr.cpp:24:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpkhf3cufr.cpp:24:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpkhf3cufr.cpp:24:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpkhf3cufr.cpp:24:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpkhf3cufr.cpp:24:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpkhf3cufr.cpp:24:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpkhf3cufr.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \        std::string delim = \",\";\n        std::string splitBy = \"  \";\n \
    \       std::string word = \"Hello\";\n        std::string words[10];\n      \
    \  std::string word1 = \"\";\n        std::string word2 = \"\";\n        std::string\
    \ word3 = \"\";\n        std::string word4 = \"\";\n        std::string word5\
    \ = \"\";\n        std::string word6 = \"\";\n        std::string word7 = \"\"\
    ;\n        std::string word8 = \"\";\n        std::string word9 = \"\";\n    \
    \    std::istringstream ss(s);\n        std::string temp;\n        while (std::getline(ss,\
    \ temp, delim)) {\n                std::istringstream str(temp);\n           \
    \     while (std::getline(str, word, splitBy)) {\n                        if(word\
    \ == \"One\"){\n                                word1= word;\n               \
    \         } \n                        if(word == \"Two\"){\n                 \
    \               word2= word;\n                        } \n                   \
    \     if(word == \"Three\"){\n                                word3= word;\n \
    \                       } \n                        if(word == \"Four\"){\n  \
    \                              word4= word;\n                        } \n    \
    \                    if(word == \"Five\"){\n                                word5=\
    \ word;\n                        } \n                        if(word == \"Six\"\
    ){\n                                word6= word;\n                        } \n\
    \                        if(word == \"Seven\"){\n                            \
    \    word7= word;\n                        } \n                        if(word\
    \ == \"Eight\"){\n                                word8= word;\n             \
    \           } \n                        if(word == \"Nine\"){\n              \
    \                  word9= word;\n                        } \n                }\n\
    \        }\n        words[0] = word1;\n        words[1] = word2;\n        words[2]\
    \ = word3;\n        words[3] = word4;\n        words[4] = word5;\n        words[5]\
    \ = word6;\n        words[6] = word7;\n        words[7] = word8;\n        words[8]\
    \ = word9;\n        return words;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6u113z8p.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmp6u113z8p.cpp:24:44: error: no matching\
    \ function for call to 'getline(std::istringstream&, std::string&, std::string&)'\n\
    \         while (std::getline(ss, temp, delim)) {\n                          \
    \                  ^\n/tmp/tmp6u113z8p.cpp:24:44: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/string:53:0,\n                 from /usr/include/c++/4.8.2/bitset:47,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6u113z8p.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:1068:5:\
    \ note: template<class _CharT, class _Traits, class _Alloc> std::basic_istream<_CharT,\
    \ _Traits>& std::getline(std::basic_istream<_CharT, _Traits>&, std::basic_string<_CharT,\
    \ _Traits, _Alloc>&, _CharT)\n     getline(basic_istream<_CharT, _Traits>& __in,\n\
    \     ^\n/usr/include/c++/4.8.2/bits/basic_string.tcc:1068:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp6u113z8p.cpp:24:44: note: \
    \  deduced conflicting types for parameter '_CharT' ('char' and 'std::basic_string<char>')\n\
    \         while (std::getline(ss, temp, delim)) {\n                          \
    \                  ^\nIn file included from /usr/include/c++/4.8.2/string:52:0,\n\
    \                 from /usr/include/c++/4.8.2/bitset:47,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n             \
    \    from /tmp/tmp6u113z8p.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.h:2793:5:\
    \ note: template<class _CharT, class _Traits, class _Alloc> std::basic_istream<_CharT,\
    \ _Traits>& std::getline(std::basic_istream<_CharT, _Traits>&, std::basic_string<_CharT,\
    \ _Traits, _Alloc>&)\n     getline(basic_istream<_CharT, _Traits>& __is,\n   \
    \  ^\n/usr/include/c++/4.8.2/bits/basic_string.h:2793:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmp6u113z8p.cpp:24:44: note:   candidate\
    \ expects 2 arguments, 3 provided\n         while (std::getline(ss, temp, delim))\
    \ {\n               "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> result;\n  std::stringstream ss(s);\n  std::string\
    \ word;\n  while (std::getline(ss, word, ',')) {\n    result.push_back(word);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwn4zyg68.cpp: In function 'int main()':\n/tmp/tmpwn4zyg68.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwn4zyg68.cpp:2:\n/tmp/tmpwn4zyg68.cpp:19:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpwn4zyg68.cpp:19:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpwn4zyg68.cpp:19:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpwn4zyg68.cpp:19:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwn4zyg68.cpp:19:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwn4zyg68.cpp:19:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwn4zyg68.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::istringstream iss(s);\n  std::vector<std::string> words;\n  std::string\
    \ word;\n  while (std::getline(iss, word, ',')) {\n    words.push_back(word);\n\
    \  }\n  return words;\n}\nint main() {\n    auto candidate = words_string;\n \
    \   assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsxtj8mun.cpp: In function 'int main()':\n/tmp/tmpsxtj8mun.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxtj8mun.cpp:2:\n/tmp/tmpsxtj8mun.cpp:19:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpsxtj8mun.cpp:19:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpsxtj8mun.cpp:19:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpsxtj8mun.cpp:19:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpsxtj8mun.cpp:19:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpsxtj8mun.cpp:19:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpsxtj8mun.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> result;\n  std::istringstream iss(s);\n  std::string\
    \ word;\n  while (iss >> word) result.push_back(word);\n  return result;\n}\n\
    int main() {\n    auto candidate = words_string;\n    assert(candidate((\"Hi,\
    \ my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwgsdh0pu.cpp: In function 'int main()':\n/tmp/tmpwgsdh0pu.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwgsdh0pu.cpp:2:\n/tmp/tmpwgsdh0pu.cpp:17:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpwgsdh0pu.cpp:17:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpwgsdh0pu.cpp:17:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpwgsdh0pu.cpp:17:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwgsdh0pu.cpp:17:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwgsdh0pu.cpp:17:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwgsdh0pu.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  // Write your code here\n  std::istringstream ss(s);\n  std::string word;\n\
    \  std::vector<std::string> word_vector;\n  while (std::getline(ss, word, ','))\n\
    \    word_vector.push_back(word);\n  return word_vector;\n}\nint main() {\n  \
    \  auto candidate = words_string;\n    assert(candidate((\"Hi, my name is John\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"John\"})));\n\
    \    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsf_xrqxq.cpp: In function 'int main()':\n/tmp/tmpsf_xrqxq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsf_xrqxq.cpp:2:\n/tmp/tmpsf_xrqxq.cpp:19:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpsf_xrqxq.cpp:19:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpsf_xrqxq.cpp:19:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpsf_xrqxq.cpp:19:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpsf_xrqxq.cpp:19:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpsf_xrqxq.cpp:19:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpsf_xrqxq.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    assert(s == \"Hi, my name is John\");\n    // Write your code here\n    return\
    \ {};\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcpkmiqus.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmpcpkmiqus.cpp:11:5: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     return {};\n     ^\n/tmp/tmpcpkmiqus.cpp: In function 'int main()':\n\
    /tmp/tmpcpkmiqus.cpp:14:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = words_string;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcpkmiqus.cpp:2:\n/tmp/tmpcpkmiqus.cpp:15:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpcpkmiqus.cpp:15:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpcpkmiqus.cpp:15:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpcpkmiqus.cpp:15:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpcpkmiqus.cpp:15:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpcpkmiqus.cpp:15:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bit"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> result;\n  std::size_t pos = 0;\n  while (pos != std::string::npos)\
    \ {\n    pos = s.find(\",\", pos);\n    if (pos != std::string::npos) {\n    \
    \  result.push_back(s.substr(0, pos));\n      s = s.substr(pos + 1);\n    }\n\
    \    pos = s.find(\" \", pos);\n    if (pos != std::string::npos) {\n      result.push_back(s.substr(0,\
    \ pos));\n      s = s.substr(pos + 1);\n    }\n  }\n  result.push_back(s);\n \
    \ return result;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe5fit4eo.cpp: In function 'int main()':\n/tmp/tmpe5fit4eo.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpe5fit4eo.cpp:2:\n/tmp/tmpe5fit4eo.cpp:28:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpe5fit4eo.cpp:28:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpe5fit4eo.cpp:28:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpe5fit4eo.cpp:28:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpe5fit4eo.cpp:28:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpe5fit4eo.cpp:28:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpe5fit4eo.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> v;\n    std::istringstream ss(s);\n    std::string\
    \ item;\n    while (std::getline(ss, item, ';')) {\n        v.push_back(std::move(item));\n\
    \    }\n    return v;\n}\nint main() {\n    auto candidate = words_string;\n \
    \   assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd3ib7ro8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmpd3ib7ro8.cpp:13:21: error: 'move' is\
    \ not a member of 'std'\n         v.push_back(std::move(item));\n            \
    \         ^\n/tmp/tmpd3ib7ro8.cpp: In function 'int main()':\n/tmp/tmpd3ib7ro8.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpd3ib7ro8.cpp:2:\n/tmp/tmpd3ib7ro8.cpp:19:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpd3ib7ro8.cpp:19:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpd3ib7ro8.cpp:19:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpd3ib7ro8.cpp:19:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpd3ib7ro8.cpp:19:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpd3ib7ro8.cpp:19:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n          "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  assert(!s.empty());\n  std::vector<std::string> res;\n  std::string word =\
    \ \"\";\n  std::string str = \"\";\n  for (char c : s) {\n    if (!std::isspace(c))\
    \ {\n      if (word.empty()) {\n        word = c;\n        str = c;\n      } else\
    \ {\n        res.push_back(word);\n        word = c;\n        str = c;\n     \
    \ }\n    } else {\n      if (word.empty()) {\n        str += c;\n      } else\
    \ {\n        res.push_back(word);\n        word = c;\n      }\n    }\n  }\n  if\
    \ (!word.empty()) {\n    res.push_back(word);\n  }\n  return res;\n}\nint main()\
    \ {\n    auto candidate = words_string;\n    assert(candidate((\"Hi, my name is\
    \ John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"})));\n    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzhitaspt.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmpzhitaspt.cpp:13:17: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n   for (char c : s) {\n         \
    \        ^\n/tmp/tmpzhitaspt.cpp: In function 'int main()':\n/tmp/tmpzhitaspt.cpp:38:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzhitaspt.cpp:2:\n/tmp/tmpzhitaspt.cpp:39:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpzhitaspt.cpp:39:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpzhitaspt.cpp:39:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpzhitaspt.cpp:39:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpzhitaspt.cpp:39:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpzhitaspt.cpp:39:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n         "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::istringstream iss(s);\n  std::string word;\n  std::vector<std::string>\
    \ words;\n  while (iss >> word) {\n    words.push_back(word);\n  }\n  return words;\n\
    }\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmppvz_j3mo.cpp: In function 'int main()':\n/tmp/tmppvz_j3mo.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppvz_j3mo.cpp:2:\n/tmp/tmppvz_j3mo.cpp:19:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmppvz_j3mo.cpp:19:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmppvz_j3mo.cpp:19:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmppvz_j3mo.cpp:19:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmppvz_j3mo.cpp:19:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmppvz_j3mo.cpp:19:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmppvz_j3mo.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    // Write your code here\n    return { s.begin(), s.end() };\n}\nint main()\
    \ {\n    auto candidate = words_string;\n    assert(candidate((\"Hi, my name is\
    \ John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"})));\n    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmptjj905kv.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmptjj905kv.cpp:10:5: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     return { s.begin(), s.end() };\n     ^\n/tmp/tmptjj905kv.cpp:\
    \ In function 'int main()':\n/tmp/tmptjj905kv.cpp:13:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = words_string;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptjj905kv.cpp:2:\n/tmp/tmptjj905kv.cpp:14:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmptjj905kv.cpp:14:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmptjj905kv.cpp:14:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmptjj905kv.cpp:14:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmptjj905kv.cpp:14:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmptjj905kv.cpp:14:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    // Write your code here\n    std::vector<std::string> words_string;\n   \
    \ size_t pos = 0;\n    for (pos = 0; pos < s.size();) {\n        std::string word\
    \ = s.substr(pos, (pos += 2));\n        if (word.empty()) {\n            words_string.emplace_back(word);\n\
    \        }\n    }\n    return words_string;\n}\nint main() {\n    auto candidate\
    \ = words_string;\n    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpemct12dr.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmpemct12dr.cpp:15:26: error: 'class std::vector<std::basic_string<char>\
    \ >' has no member named 'emplace_back'\n             words_string.emplace_back(word);\n\
    \                          ^\n/tmp/tmpemct12dr.cpp: In function 'int main()':\n\
    /tmp/tmpemct12dr.cpp:21:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = words_string;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpemct12dr.cpp:2:\n/tmp/tmpemct12dr.cpp:22:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpemct12dr.cpp:22:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpemct12dr.cpp:22:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpemct12dr.cpp:22:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpemct12dr.cpp:22:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpemct12dr.cpp:22:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/inclu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> v;\n    std::istringstream iss(s);\n    std::string\
    \ word;\n    while (std::getline(iss, word, ',')) {\n        v.push_back(word);\n\
    \    }\n    return v;\n}\nint main() {\n    auto candidate = words_string;\n \
    \   assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmj1a40iy.cpp: In function 'int main()':\n/tmp/tmpmj1a40iy.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmj1a40iy.cpp:2:\n/tmp/tmpmj1a40iy.cpp:19:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpmj1a40iy.cpp:19:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpmj1a40iy.cpp:19:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpmj1a40iy.cpp:19:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpmj1a40iy.cpp:19:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpmj1a40iy.cpp:19:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpmj1a40iy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> words;\n    std::string word;\n    std::string delimiter\
    \ = \",\";\n    size_t pos = 0;\n    size_t endpos = 0;\n    bool flag = false;\n\
    \    while (pos < s.size()) {\n        endpos = s.find(delimiter, pos);\n    \
    \    if (endpos == std::string::npos) {\n            words.push_back(s.substr(pos,\
    \ s.size()));\n            pos = s.size();\n        } else {\n            word\
    \ = s.substr(pos, endpos - pos);\n            words.push_back(word);\n       \
    \     pos = endpos + 1;\n        }\n    }\n    if (pos != s.size()) {\n      \
    \  words.push_back(s.substr(pos));\n    }\n    return words;\n}\nint main() {\n\
    \    auto candidate = words_string;\n    assert(candidate((\"Hi, my name is John\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"John\"})));\n\
    \    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0_qvy6jx.cpp: In function 'int main()':\n/tmp/tmp0_qvy6jx.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0_qvy6jx.cpp:2:\n/tmp/tmp0_qvy6jx.cpp:33:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmp0_qvy6jx.cpp:33:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmp0_qvy6jx.cpp:33:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmp0_qvy6jx.cpp:33:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp0_qvy6jx.cpp:33:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp0_qvy6jx.cpp:33:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp0_qvy6jx.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    assert(!s.empty());\n    std::vector<std::string> words;\n    std::stringstream\
    \ ss(s);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n \
    \       words.push_back(item);\n    }\n    return words;\n}\nint main() {\n  \
    \  auto candidate = words_string;\n    assert(candidate((\"Hi, my name is John\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"John\"})));\n\
    \    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgugcg4ln.cpp: In function 'int main()':\n/tmp/tmpgugcg4ln.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgugcg4ln.cpp:2:\n/tmp/tmpgugcg4ln.cpp:20:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpgugcg4ln.cpp:20:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpgugcg4ln.cpp:20:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpgugcg4ln.cpp:20:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpgugcg4ln.cpp:20:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpgugcg4ln.cpp:20:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpgugcg4ln.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    // TODO: Write your code here\n    std::vector<std::string> arr;\n    std::string\
    \ words;\n    int start = 0;\n    while (true) {\n        std::size_t next_space\
    \ = s.find(' ', start);\n        if (next_space == std::string::npos) {\n    \
    \        words = s.substr(start);\n            arr.push_back(words);\n       \
    \     break;\n        } else {\n            words = s.substr(start, next_space);\n\
    \            arr.push_back(words);\n            start = next_space + 1;\n    \
    \    }\n    }\n    return arr;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbs577sh1.cpp: In function 'int main()':\n/tmp/tmpbs577sh1.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbs577sh1.cpp:2:\n/tmp/tmpbs577sh1.cpp:29:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpbs577sh1.cpp:29:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpbs577sh1.cpp:29:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpbs577sh1.cpp:29:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpbs577sh1.cpp:29:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbs577sh1.cpp:29:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbs577sh1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    s.erase(std::remove(s.begin(), s.end(), ','), s.end());\n    s.erase(std::remove(s.begin(),\
    \ s.end(), '.'), s.end());\n    s.erase(std::remove(s.begin(), s.end(), ' '),\
    \ s.end());\n    std::vector<std::string> result;\n    std::string word = \"\"\
    ;\n    for (std::string::iterator i = s.begin(); i != s.end(); i++) {\n      \
    \  if (*i == ',' || i == '.' || i == s.begin() || *i == ' ') {\n            if\
    \ (word.size() > 0) {\n                result.push_back(word);\n            }\n\
    \            word = \"\";\n        } else {\n            word = word + (*i);\n\
    \        }\n    }\n    if (word.size() > 0) {\n        result.push_back(word);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpohi3r2fm.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmpohi3r2fm.cpp:15:28: error: no match for\
    \ 'operator==' (operand types are 'std::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*,\
    \ std::basic_string<char> >}' and 'char')\n         if (*i == ',' || i == '.'\
    \ || i == s.begin() || *i == ' ') {\n                            ^\n/tmp/tmpohi3r2fm.cpp:15:28:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/c++allocator.h:33:0,\n\
    \                 from /usr/include/c++/4.8.2/bits/allocator.h:46,\n         \
    \        from /usr/include/c++/4.8.2/ext/alloc_traits.h:38,\n                \
    \ from /usr/include/c++/4.8.2/bits/stl_construct.h:61,\n                 from\
    \ /usr/include/c++/4.8.2/bits/stl_tempbuf.h:60,\n                 from /usr/include/c++/4.8.2/bits/stl_algo.h:62,\n\
    \                 from /usr/include/c++/4.8.2/algorithm:62,\n                \
    \ from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n        \
    \         from /tmp/tmpohi3r2fm.cpp:2:\n/usr/include/c++/4.8.2/ext/new_allocator.h:139:5:\
    \ note: template<class _Tp> bool __gnu_cxx::operator==(const __gnu_cxx::new_allocator<_Tp>&,\
    \ const __gnu_cxx::new_allocator<_Tp>&)\n     operator==(const new_allocator<_Tp>&,\
    \ const new_allocator<_Tp>&)\n     ^\n/usr/include/c++/4.8.2/ext/new_allocator.h:139:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpohi3r2fm.cpp:15:31:\
    \ note:   'std::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*,\
    \ std::basic_string<char> >}' is not derived from 'const __gnu_cxx::new_allocator<_Tp>'\n\
    \         if (*i == ',' || i == '.' || i == s.begin() || *i == ' ') {\n      \
    \                         ^\nIn file included from /usr/include/c++/4.8.2/bits/stl_algobase.h:67:0,\n\
    \                 from /usr/include/c++/4.8.2/algorithm:61,\n                \
    \ from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n        \
    \         from /tmp/tmpohi3r2fm.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_iterator.h:811:5:\
    \ note: template"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> words;\n  std::string word = \"\";\n  // Split string\
    \ into words\n  for (char c : s) {\n    if (c == '\\'') {\n      // If last char\
    \ is ' ', split word\n      if (word.length() > 0) {\n        words.push_back(word);\n\
    \        word = \"\";\n      }\n      // If last char is not ' ', add to word\n\
    \    } else {\n      word += c;\n    }\n  }\n  // If last word is blank\n  if\
    \ (word.length() > 0) {\n    words.push_back(word);\n  }\n  // Return all words\n\
    \  return words;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv35l6ve_.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmpv35l6ve_.cpp:12:17: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n   for (char c : s) {\n         \
    \        ^\n/tmp/tmpv35l6ve_.cpp: In function 'int main()':\n/tmp/tmpv35l6ve_.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv35l6ve_.cpp:2:\n/tmp/tmpv35l6ve_.cpp:33:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpv35l6ve_.cpp:33:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpv35l6ve_.cpp:33:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpv35l6ve_.cpp:33:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpv35l6ve_.cpp:33:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpv35l6ve_.cpp:33:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n         "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::string s_trim(s.c_str());\n    s_trim.erase(std::find_if(s_trim.begin(),\
    \ s_trim.end(), ::isspace), s_trim.end());\n    std::istringstream ss(s_trim);\n\
    \    std::vector<std::string> words;\n    std::string word;\n    while (std::getline(ss,\
    \ word, ',')) {\n        words.push_back(word);\n    }\n    return words;\n}\n\
    int main() {\n    auto candidate = words_string;\n    assert(candidate((\"Hi,\
    \ my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcqjy1pbz.cpp: In function 'int main()':\n/tmp/tmpcqjy1pbz.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcqjy1pbz.cpp:2:\n/tmp/tmpcqjy1pbz.cpp:21:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpcqjy1pbz.cpp:21:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpcqjy1pbz.cpp:21:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpcqjy1pbz.cpp:21:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpcqjy1pbz.cpp:21:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpcqjy1pbz.cpp:21:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpcqjy1pbz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> res;\n    std::vector<std::string> temp;\n    std::stringstream\
    \ ss;\n    ss << s;\n    std::string token;\n    while (getline(ss, token, ','))\
    \ {\n        temp.push_back(token);\n    }\n    res.clear();\n    for (int i =\
    \ 0; i < temp.size(); i++) {\n        res.push_back(temp[i]);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp01vksor3.cpp: In function 'int main()':\n/tmp/tmp01vksor3.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp01vksor3.cpp:2:\n/tmp/tmp01vksor3.cpp:25:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmp01vksor3.cpp:25:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmp01vksor3.cpp:25:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmp01vksor3.cpp:25:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp01vksor3.cpp:25:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp01vksor3.cpp:25:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp01vksor3.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> vec;\n    // Your code goes here\n    return vec;\n\
    }\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpovih_z0u.cpp: In function 'int main()':\n/tmp/tmpovih_z0u.cpp:14:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpovih_z0u.cpp:2:\n/tmp/tmpovih_z0u.cpp:15:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpovih_z0u.cpp:15:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpovih_z0u.cpp:15:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpovih_z0u.cpp:15:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpovih_z0u.cpp:15:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpovih_z0u.cpp:15:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpovih_z0u.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::stringstream ss(s);\n  std::string word;\n  std::vector<std::string> words;\n\
    \  while (std::getline(ss, word, ',')) {\n    words.push_back(word);\n  }\n  return\
    \ words;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp752e6od2.cpp: In function 'int main()':\n/tmp/tmp752e6od2.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp752e6od2.cpp:2:\n/tmp/tmp752e6od2.cpp:19:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmp752e6od2.cpp:19:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmp752e6od2.cpp:19:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmp752e6od2.cpp:19:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp752e6od2.cpp:19:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp752e6od2.cpp:19:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp752e6od2.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> result;\n  std::size_t n = s.size();\n  std::vector<char>\
    \ v;\n\n  for (std::size_t i = 0; i < n; i++) {\n    char ch = s[i];\n    if (ch\
    \ == ' ' || ch == ',' || ch == ')') continue;\n    v.push_back(ch);\n  }\n  std::reverse(v.begin(),\
    \ v.end());\n\n  for (std::size_t i = 0; i < v.size(); i++) {\n    if (v.at(i)\
    \ == ',' || v.at(i) == ')') {\n      auto result = std::accumulate(result.begin(),\
    \ result.end(), std::vector<std::string>());\n      result.emplace_back(v.begin()\
    \ + i, v.end());\n      v.clear();\n    } else {\n      result.push_back(v.at(i));\n\
    \      v.at(i) = 0;\n    }\n  }\n\n  return result;\n}\nint main() {\n    auto\
    \ candidate = words_string;\n    assert(candidate((\"Hi, my name is John\")) ==\
    \ (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"John\"})));\n\
    \    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjz26e145.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmpjz26e145.cpp:22:12: error: 'result' does\
    \ not name a type\n       auto result = std::accumulate(result.begin(), result.end(),\
    \ std::vector<std::string>());\n            ^\n/tmp/tmpjz26e145.cpp:23:14: error:\
    \ 'class std::vector<std::basic_string<char> >' has no member named 'emplace_back'\n\
    \       result.emplace_back(v.begin() + i, v.end());\n              ^\n/tmp/tmpjz26e145.cpp:26:31:\
    \ error: invalid user-defined conversion from 'char' to 'const value_type& {aka\
    \ const std::basic_string<char>&}' [-fpermissive]\n       result.push_back(v.at(i));\n\
    \                               ^\nIn file included from /usr/include/c++/4.8.2/string:53:0,\n\
    \                 from /usr/include/c++/4.8.2/bitset:47,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n             \
    \    from /tmp/tmpjz26e145.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ note: candidate is: std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>] <near match>\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5: note:\
    \   no known conversion for argument 1 from 'char' to 'const char*'\n/tmp/tmpjz26e145.cpp:26:31:\
    \ error: invalid conversion from 'char' to 'const char*' [-fpermissive]\n    \
    \   result.push_back(v.at(i));\n                               ^\nIn file included\
    \ from /usr/include/c++/4.8.2/string:53:0,\n                 from /usr/include/c++/4.8.2/bitset:47,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjz26e145.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ error:   initializing argument 1 of 'std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>]' [-fpermissive]\n    "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> words;\n  std::string temp;\n  int i = 0;\n  int begin\
    \ = 0;\n  int end = 0;\n  while (i < s.size()) {\n    end = s.find(\" \", begin);\n\
    \    if (end == std::string::npos) {\n      end = s.size();\n    }\n    temp =\
    \ s.substr(begin, end - begin);\n    words.push_back(temp);\n    begin = end +\
    \ 1;\n    i++;\n  }\n  return words;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjosf9s66.cpp: In function 'int main()':\n/tmp/tmpjosf9s66.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjosf9s66.cpp:2:\n/tmp/tmpjosf9s66.cpp:28:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpjosf9s66.cpp:28:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpjosf9s66.cpp:28:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpjosf9s66.cpp:28:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpjosf9s66.cpp:28:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpjosf9s66.cpp:28:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpjosf9s66.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    // Code here\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpks3bvh9o.cpp: In function 'int main()':\n/tmp/tmpks3bvh9o.cpp:12:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpks3bvh9o.cpp:2:\n/tmp/tmpks3bvh9o.cpp:13:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpks3bvh9o.cpp:13:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpks3bvh9o.cpp:13:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpks3bvh9o.cpp:13:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpks3bvh9o.cpp:13:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpks3bvh9o.cpp:13:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpks3bvh9o.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  s = s.substr(0, s.find_first_of(\",\"));\n  return std::sregex_token_iterator(s.begin(),\
    \ s.end(), \" \", -1);\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyhkst6f_.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmpyhkst6f_.cpp:10:10: error: 'sregex_token_iterator'\
    \ is not a member of 'std'\n   return std::sregex_token_iterator(s.begin(), s.end(),\
    \ \" \", -1);\n          ^\n/tmp/tmpyhkst6f_.cpp: In function 'int main()':\n\
    /tmp/tmpyhkst6f_.cpp:13:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = words_string;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyhkst6f_.cpp:2:\n/tmp/tmpyhkst6f_.cpp:14:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpyhkst6f_.cpp:14:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpyhkst6f_.cpp:14:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpyhkst6f_.cpp:14:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpyhkst6f_.cpp:14:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpyhkst6f_.cpp:14:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> vec;\n  std::istringstream iss(s);\n  std::string\
    \ item;\n  while (std::getline(iss, item, ',')) {\n    vec.push_back(item);\n\
    \  }\n  return vec;\n}\nint main() {\n    auto candidate = words_string;\n   \
    \ assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq3mb28km.cpp: In function 'int main()':\n/tmp/tmpq3mb28km.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpq3mb28km.cpp:2:\n/tmp/tmpq3mb28km.cpp:19:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpq3mb28km.cpp:19:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpq3mb28km.cpp:19:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpq3mb28km.cpp:19:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpq3mb28km.cpp:19:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpq3mb28km.cpp:19:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpq3mb28km.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> res;\n    size_t pos;\n    pos = s.find(',');\n\
    \    if (pos == std::string::npos) {\n        pos = s.find(' ');\n    }\n    if\
    \ (pos != std::string::npos) {\n        while (pos != std::string::npos && pos\
    \ < s.size()) {\n            res.emplace_back(s.substr(0, pos));\n           \
    \ s = s.substr(pos + 1);\n            pos = s.find(',');\n            if (pos\
    \ == std::string::npos) {\n                pos = s.find(' ');\n            }\n\
    \        }\n        res.emplace_back(s);\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = words_string;\n    assert(candidate((\"Hi, my name is\
    \ John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"})));\n    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi9dw43jc.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmpi9dw43jc.cpp:17:17: error: 'class std::vector<std::basic_string<char>\
    \ >' has no member named 'emplace_back'\n             res.emplace_back(s.substr(0,\
    \ pos));\n                 ^\n/tmp/tmpi9dw43jc.cpp:24:13: error: 'class std::vector<std::basic_string<char>\
    \ >' has no member named 'emplace_back'\n         res.emplace_back(s);\n     \
    \        ^\n/tmp/tmpi9dw43jc.cpp: In function 'int main()':\n/tmp/tmpi9dw43jc.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpi9dw43jc.cpp:2:\n/tmp/tmpi9dw43jc.cpp:30:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpi9dw43jc.cpp:30:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpi9dw43jc.cpp:30:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpi9dw43jc.cpp:30:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpi9dw43jc.cpp:30:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpi9dw43jc.cpp:30:110:\
    \ note: candid"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> result;\n\n  for (auto word_iter = s.cbegin(); word_iter\
    \ != s.cend(); ++word_iter) {\n    if (isspace(*word_iter)) {\n      result.emplace_back(*word_iter);\n\
    \      ++word_iter;\n      while (word_iter != s.cend() && !isspace(*word_iter))\
    \ {\n        ++word_iter;\n      }\n      continue;\n    }\n    result.emplace_back(*word_iter);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp82ne7kju.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmp82ne7kju.cpp:11:13: error: 'word_iter'\
    \ does not name a type\n   for (auto word_iter = s.cbegin(); word_iter != s.cend();\
    \ ++word_iter) {\n             ^\n/tmp/tmp82ne7kju.cpp:11:37: error: expected\
    \ ';' before 'word_iter'\n   for (auto word_iter = s.cbegin(); word_iter != s.cend();\
    \ ++word_iter) {\n                                     ^\n/tmp/tmp82ne7kju.cpp:11:37:\
    \ error: 'word_iter' was not declared in this scope\n/tmp/tmp82ne7kju.cpp:11:52:\
    \ error: 'std::string' has no member named 'cend'\n   for (auto word_iter = s.cbegin();\
    \ word_iter != s.cend(); ++word_iter) {\n                                    \
    \                ^\n/tmp/tmp82ne7kju.cpp:13:14: error: 'class std::vector<std::basic_string<char>\
    \ >' has no member named 'emplace_back'\n       result.emplace_back(*word_iter);\n\
    \              ^\n/tmp/tmp82ne7kju.cpp:15:29: error: 'std::string' has no member\
    \ named 'cend'\n       while (word_iter != s.cend() && !isspace(*word_iter)) {\n\
    \                             ^\n/tmp/tmp82ne7kju.cpp:20:12: error: 'class std::vector<std::basic_string<char>\
    \ >' has no member named 'emplace_back'\n     result.emplace_back(*word_iter);\n\
    \            ^\n/tmp/tmp82ne7kju.cpp: In function 'int main()':\n/tmp/tmp82ne7kju.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp82ne7kju.cpp:2:\n/tmp/tmp82ne7kju.cpp:26:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmp82ne7kju.cpp:26:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> vec;\n  if (s == \"\") return vec;\n  std::istringstream\
    \ ss(s);\n  std::string item;\n  while (std::getline(ss, item, ',')) {\n    vec.push_back(item);\n\
    \  }\n  return vec;\n}\nint main() {\n    auto candidate = words_string;\n   \
    \ assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxccita_c.cpp: In function 'int main()':\n/tmp/tmpxccita_c.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxccita_c.cpp:2:\n/tmp/tmpxccita_c.cpp:20:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpxccita_c.cpp:20:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpxccita_c.cpp:20:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpxccita_c.cpp:20:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpxccita_c.cpp:20:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpxccita_c.cpp:20:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpxccita_c.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    auto vec = std::vector<std::string>{};\n    auto split = s.begin();\n   \
    \ while (true) {\n        auto first = split;\n        split += std::find(split,\
    \ s.end(), ',');\n        split += std::find(split, s.end(), ' ');\n        vec.push_back(std::string(first,\
    \ split - first));\n        if (split == s.end()) {\n            break;\n    \
    \    }\n    }\n    return vec;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp350k9c19.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmp350k9c19.cpp:9:10: error: 'vec' does\
    \ not name a type\n     auto vec = std::vector<std::string>{};\n          ^\n\
    /tmp/tmp350k9c19.cpp:10:10: error: 'split' does not name a type\n     auto split\
    \ = s.begin();\n          ^\n/tmp/tmp350k9c19.cpp:12:14: error: 'first' does not\
    \ name a type\n         auto first = split;\n              ^\n/tmp/tmp350k9c19.cpp:13:9:\
    \ error: 'split' was not declared in this scope\n         split += std::find(split,\
    \ s.end(), ',');\n         ^\n/tmp/tmp350k9c19.cpp:15:9: error: 'vec' was not\
    \ declared in this scope\n         vec.push_back(std::string(first, split - first));\n\
    \         ^\n/tmp/tmp350k9c19.cpp:15:35: error: 'first' was not declared in this\
    \ scope\n         vec.push_back(std::string(first, split - first));\n        \
    \                           ^\n/tmp/tmp350k9c19.cpp:20:12: error: 'vec' was not\
    \ declared in this scope\n     return vec;\n            ^\n/tmp/tmp350k9c19.cpp:\
    \ In function 'int main()':\n/tmp/tmp350k9c19.cpp:23:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = words_string;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp350k9c19.cpp:2:\n/tmp/tmp350k9c19.cpp:24:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmp350k9c19.cpp:24:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmp350k9c19.cpp:24:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candida"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> str_vec(s.begin(), s.end());\n    for (size_t i\
    \ = 0; i < str_vec.size(); ++i) {\n        str_vec[i] = str_vec[i].to_string();\n\
    \    }\n    return str_vec;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw6gffzrt.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmpw6gffzrt.cpp:11:33: error: 'class std::basic_string<char>'\
    \ has no member named 'to_string'\n         str_vec[i] = str_vec[i].to_string();\n\
    \                                 ^\n/tmp/tmpw6gffzrt.cpp: In function 'int main()':\n\
    /tmp/tmpw6gffzrt.cpp:16:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = words_string;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpw6gffzrt.cpp:2:\n/tmp/tmpw6gffzrt.cpp:17:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpw6gffzrt.cpp:17:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpw6gffzrt.cpp:17:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpw6gffzrt.cpp:17:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpw6gffzrt.cpp:17:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpw6gffzrt.cpp:17:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    // Your code here\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0zfudgkg.cpp: In function 'int main()':\n/tmp/tmp0zfudgkg.cpp:12:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0zfudgkg.cpp:2:\n/tmp/tmp0zfudgkg.cpp:13:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmp0zfudgkg.cpp:13:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmp0zfudgkg.cpp:13:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmp0zfudgkg.cpp:13:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp0zfudgkg.cpp:13:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp0zfudgkg.cpp:13:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp0zfudgkg.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \   std::vector<std::string> words;\n   std::stringstream ss;\n   ss << s;\n \
    \  std::string token;\n   while (std::getline(ss, token, ',')) {\n       words\
    \ += token;\n   }\n   return words;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuh7ddla1.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmpuh7ddla1.cpp:14:14: error: no match for\
    \ 'operator+=' (operand types are 'std::vector<std::basic_string<char> >' and\
    \ 'std::string {aka std::basic_string<char>}')\n        words += token;\n    \
    \          ^\n/tmp/tmpuh7ddla1.cpp: In function 'int main()':\n/tmp/tmpuh7ddla1.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuh7ddla1.cpp:2:\n/tmp/tmpuh7ddla1.cpp:20:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpuh7ddla1.cpp:20:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpuh7ddla1.cpp:20:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpuh7ddla1.cpp:20:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpuh7ddla1.cpp:20:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpuh7ddla1.cpp:20:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n             "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    auto words = split(s, is_any_of(\" ,\"));\n    std::vector<std::string> result;\n\
    \    for (auto& word : words) {\n        result.push_back(word);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmi7d4agw.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmpmi7d4agw.cpp:9:10: error: 'words' does\
    \ not name a type\n     auto words = split(s, is_any_of(\" ,\"));\n          ^\n\
    /tmp/tmpmi7d4agw.cpp:11:16: error: ISO C++ forbids declaration of 'word' with\
    \ no type [-fpermissive]\n     for (auto& word : words) {\n                ^\n\
    /tmp/tmpmi7d4agw.cpp:11:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (auto& word : words) {\n                       ^\n/tmp/tmpmi7d4agw.cpp:11:23:\
    \ error: 'words' was not declared in this scope\n/tmp/tmpmi7d4agw.cpp:12:30: error:\
    \ invalid user-defined conversion from 'int' to 'const value_type& {aka const\
    \ std::basic_string<char>&}' [-fpermissive]\n         result.push_back(word);\n\
    \                              ^\nIn file included from /usr/include/c++/4.8.2/string:53:0,\n\
    \                 from /usr/include/c++/4.8.2/bitset:47,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n             \
    \    from /tmp/tmpmi7d4agw.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ note: candidate is: std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>] <near match>\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5: note:\
    \   no known conversion for argument 1 from 'int' to 'const char*'\n/tmp/tmpmi7d4agw.cpp:12:30:\
    \ error: invalid conversion from 'int' to 'const char*' [-fpermissive]\n     \
    \    result.push_back(word);\n                              ^\nIn file included\
    \ from /usr/include/c++/4.8.2/string:53:0,\n                 from /usr/include/c++/4.8.2/bitset:47,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmi7d4agw.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ error:   initializing argument 1 of 'std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _Char"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> result;\n    std::string temp;\n    // Iterate over\
    \ string to get each word\n    for (int i = 0; i < s.length(); i++) {\n      \
    \  if (s[i] == ',' || s[i] == ' ') {\n            // If there is a comma at the\
    \ end of word or space then store the current word.\n            if (temp.length()\
    \ > 0) {\n                result.push_back(temp);\n                temp.clear();\n\
    \            }\n        } else if (s[i] == '\\n') {\n            // If there is\
    \ a newline at the end of word then store the last word.\n            if (temp.length()\
    \ > 0) {\n                result.push_back(temp);\n                temp.clear();\n\
    \            }\n        } else {\n            // If not spaces or commas then\
    \ add word to the current word\n            temp.push_back(s[i]);\n        }\n\
    \    }\n    // If there is a last word then store it\n    if (temp.length() >\
    \ 0) {\n        result.push_back(temp);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = words_string;\n    assert(candidate((\"Hi, my name is\
    \ John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"})));\n    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfoq7n_9w.cpp: In function 'int main()':\n/tmp/tmpfoq7n_9w.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfoq7n_9w.cpp:2:\n/tmp/tmpfoq7n_9w.cpp:38:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpfoq7n_9w.cpp:38:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpfoq7n_9w.cpp:38:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpfoq7n_9w.cpp:38:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpfoq7n_9w.cpp:38:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpfoq7n_9w.cpp:38:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpfoq7n_9w.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> result;\n    auto p = std::sregex_token_iterator(s.begin(),\
    \ s.end(), \",\", -1);\n    auto r = std::sregex_token_iterator();\n    for (\
    \ ; p != r; ++p)\n    {\n        result.push_back(std::string(std::begin(*p),\
    \ std::end(*p)));\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = words_string;\n    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpctcb3zgn.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmpctcb3zgn.cpp:10:10: error: 'p' does not\
    \ name a type\n     auto p = std::sregex_token_iterator(s.begin(), s.end(), \"\
    ,\", -1);\n          ^\n/tmp/tmpctcb3zgn.cpp:11:10: error: 'r' does not name a\
    \ type\n     auto r = std::sregex_token_iterator();\n          ^\n/tmp/tmpctcb3zgn.cpp:12:13:\
    \ error: 'p' was not declared in this scope\n     for ( ; p != r; ++p)\n     \
    \        ^\n/tmp/tmpctcb3zgn.cpp:12:18: error: 'r' was not declared in this scope\n\
    \     for ( ; p != r; ++p)\n                  ^\n/tmp/tmpctcb3zgn.cpp:14:38: error:\
    \ 'begin' is not a member of 'std'\n         result.push_back(std::string(std::begin(*p),\
    \ std::end(*p)));\n                                      ^\n/tmp/tmpctcb3zgn.cpp:14:54:\
    \ error: 'end' is not a member of 'std'\n         result.push_back(std::string(std::begin(*p),\
    \ std::end(*p)));\n                                                      ^\n/tmp/tmpctcb3zgn.cpp:\
    \ In function 'int main()':\n/tmp/tmpctcb3zgn.cpp:19:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = words_string;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpctcb3zgn.cpp:2:\n/tmp/tmpctcb3zgn.cpp:20:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpctcb3zgn.cpp:20:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpctcb3zgn.cpp:20:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is Joh"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  // Write your code here\n  return std::vector<std::string>();\n}\nint main()\
    \ {\n    auto candidate = words_string;\n    assert(candidate((\"Hi, my name is\
    \ John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"})));\n    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk9wjb4ws.cpp: In function 'int main()':\n/tmp/tmpk9wjb4ws.cpp:13:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk9wjb4ws.cpp:2:\n/tmp/tmpk9wjb4ws.cpp:14:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpk9wjb4ws.cpp:14:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpk9wjb4ws.cpp:14:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpk9wjb4ws.cpp:14:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpk9wjb4ws.cpp:14:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpk9wjb4ws.cpp:14:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpk9wjb4ws.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    auto words = s.substr(0, s.find_first_of(\" \")).split(\n        \",\", [](char\
    \ c) {return std::tolower(c); });\n    words.erase(std::remove(words.begin(),\
    \ words.end(), \"\"), words.end());\n    return words;\n}\nint main() {\n    auto\
    \ candidate = words_string;\n    assert(candidate((\"Hi, my name is John\")) ==\
    \ (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"John\"})));\n\
    \    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp12q0vxxo.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmp12q0vxxo.cpp:9:10: error: 'words' does\
    \ not name a type\n     auto words = s.substr(0, s.find_first_of(\" \")).split(\n\
    \          ^\n/tmp/tmp12q0vxxo.cpp:10:51: error: expected primary-expression before\
    \ ')' token\n         \",\", [](char c) {return std::tolower(c); });\n       \
    \                                            ^\n/tmp/tmp12q0vxxo.cpp:10:51: error:\
    \ expected ';' before ')' token\n/tmp/tmp12q0vxxo.cpp:11:5: error: 'words' was\
    \ not declared in this scope\n     words.erase(std::remove(words.begin(), words.end(),\
    \ \"\"), words.end());\n     ^\n/tmp/tmp12q0vxxo.cpp: In function 'int main()':\n\
    /tmp/tmp12q0vxxo.cpp:15:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = words_string;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp12q0vxxo.cpp:2:\n/tmp/tmp12q0vxxo.cpp:16:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmp12q0vxxo.cpp:16:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmp12q0vxxo.cpp:16:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmp12q0vxxo.cpp:16:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by defau"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::stringstream ss(s);\n  std::string token;\n  std::vector<std::string>\
    \ words;\n\n  while (std::getline(ss, token, ',')) {\n    words.push_back(token);\n\
    \  }\n  while (std::getline(ss, token, ' ')) {\n    words.push_back(token);\n\
    \  }\n  return words;\n}\nint main() {\n    auto candidate = words_string;\n \
    \   assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpccuxe4nu.cpp: In function 'int main()':\n/tmp/tmpccuxe4nu.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpccuxe4nu.cpp:2:\n/tmp/tmpccuxe4nu.cpp:23:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpccuxe4nu.cpp:23:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpccuxe4nu.cpp:23:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpccuxe4nu.cpp:23:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpccuxe4nu.cpp:23:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpccuxe4nu.cpp:23:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpccuxe4nu.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> words;\n    std::string word;\n    std::stringstream\
    \ iss(s);\n    while (std::getline(iss, word, ',')) {\n        words.push_back(word);\n\
    \    }\n    return words;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmbmkl6rt.cpp: In function 'int main()':\n/tmp/tmpmbmkl6rt.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmbmkl6rt.cpp:2:\n/tmp/tmpmbmkl6rt.cpp:19:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpmbmkl6rt.cpp:19:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpmbmkl6rt.cpp:19:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpmbmkl6rt.cpp:19:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpmbmkl6rt.cpp:19:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpmbmkl6rt.cpp:19:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpmbmkl6rt.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::string result;\n  std::stringstream ss;\n  ss << s;\n  std::getline(ss,\
    \ result, ',');\n  std::getline(ss, result, ',');\n  std::getline(ss, result,\
    \ ',');\n  std::getline(ss, result, ',');\n  std::getline(ss, result, ',');\n\
    \  std::getline(ss, result, ',');\n  std::getline(ss, result, ',');\n  std::getline(ss,\
    \ result, ',');\n  std::getline(ss, result, ',');\n  return std::vector<std::string>{result,\
    \ result, result, result, result, result, result, result};\n}\nint main() {\n\
    \    auto candidate = words_string;\n    assert(candidate((\"Hi, my name is John\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"John\"})));\n\
    \    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw0vmd1ts.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmpw0vmd1ts.cpp:21:15: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n   return std::vector<std::string>{result, result, result, result,\
    \ result, result, result, result};\n               ^\n/tmp/tmpw0vmd1ts.cpp:21:97:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n   return std::vector<std::string>{result,\
    \ result, result, result, result, result, result, result};\n                 \
    \                                                                            \
    \    ^\n/tmp/tmpw0vmd1ts.cpp:21:97: note: candidates are:\nIn file included from\
    \ /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpw0vmd1ts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpw0vmd1ts.cpp:21:97:\
    \ note:   cannot convert 'result' (type 'std::string {aka std::basic_string<char>}')\
    \ to type 'const allocator_type& {aka const std::allocator<std::basic_string<char>\
    \ >&}'\n   return std::vector<std::string>{result, result, result, result, result,\
    \ result, result, result};\n                                                 \
    \                                                ^\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpw0vmd1ts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:310:7:\
    \ note: std::vector<"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> result;\n  std::istringstream is(s);\n  std::string\
    \ item;\n  while (std::getline(is, item, ',')) {\n    result.push_back(item);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzs21ghn3.cpp: In function 'int main()':\n/tmp/tmpzs21ghn3.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzs21ghn3.cpp:2:\n/tmp/tmpzs21ghn3.cpp:19:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpzs21ghn3.cpp:19:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpzs21ghn3.cpp:19:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpzs21ghn3.cpp:19:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpzs21ghn3.cpp:19:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpzs21ghn3.cpp:19:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpzs21ghn3.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \tstd::vector<std::string> result;\n\tstd::istringstream stream{s};\n\tstd::string\
    \ word;\n\twhile (std::getline(stream, word, ',')) {\n\t\tresult.push_back(word);\n\
    \t}\n\treturn result;\n}\nint main() {\n    auto candidate = words_string;\n \
    \   assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmksf6n_c.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmpmksf6n_c.cpp:10:21: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n  std::istringstream stream{s};\n                     ^\n/tmp/tmpmksf6n_c.cpp:10:29:\
    \ error: in C++98 'stream' must be initialized by constructor, not by '{...}'\n\
    \  std::istringstream stream{s};\n                             ^\n/tmp/tmpmksf6n_c.cpp:\
    \ In function 'int main()':\n/tmp/tmpmksf6n_c.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = words_string;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmksf6n_c.cpp:2:\n/tmp/tmpmksf6n_c.cpp:19:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpmksf6n_c.cpp:19:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpmksf6n_c.cpp:19:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpmksf6n_c.cpp:19:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpmksf6n_c.cpp:19:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpmksf6n_c.cpp:19:110:\
    \ not"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> splitted;\n  std::size_t pos = 0, n = s.length();\n\
    \  while (pos < n) {\n    pos = s.find_first_of(\", ,\", pos);\n    if (pos !=\
    \ n)\n      splitted.push_back(s.substr(pos, n - pos));\n    pos = s.find_first_of(\"\
    , ,\", pos + 1);\n  }\n  return splitted;\n}\nint main() {\n    auto candidate\
    \ = words_string;\n    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp56xo470.cpp: In function 'int main()':\n/tmp/tmpp56xo470.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpp56xo470.cpp:2:\n/tmp/tmpp56xo470.cpp:21:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpp56xo470.cpp:21:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpp56xo470.cpp:21:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpp56xo470.cpp:21:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpp56xo470.cpp:21:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpp56xo470.cpp:21:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpp56xo470.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> words;\n    std::string delimiter = \",\";\n   \
    \ std::istringstream ss(s);\n    std::string word;\n\n    while (std::getline(ss,\
    \ word, delimiter)) {\n        words.push_back(word);\n    }\n\n    return words;\n\
    }\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmuqjzsr8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmpmuqjzsr8.cpp:14:44: error: no matching\
    \ function for call to 'getline(std::istringstream&, std::string&, std::string&)'\n\
    \     while (std::getline(ss, word, delimiter)) {\n                          \
    \                  ^\n/tmp/tmpmuqjzsr8.cpp:14:44: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/string:53:0,\n                 from /usr/include/c++/4.8.2/bitset:47,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmuqjzsr8.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:1068:5:\
    \ note: template<class _CharT, class _Traits, class _Alloc> std::basic_istream<_CharT,\
    \ _Traits>& std::getline(std::basic_istream<_CharT, _Traits>&, std::basic_string<_CharT,\
    \ _Traits, _Alloc>&, _CharT)\n     getline(basic_istream<_CharT, _Traits>& __in,\n\
    \     ^\n/usr/include/c++/4.8.2/bits/basic_string.tcc:1068:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpmuqjzsr8.cpp:14:44: note: \
    \  deduced conflicting types for parameter '_CharT' ('char' and 'std::basic_string<char>')\n\
    \     while (std::getline(ss, word, delimiter)) {\n                          \
    \                  ^\nIn file included from /usr/include/c++/4.8.2/string:52:0,\n\
    \                 from /usr/include/c++/4.8.2/bitset:47,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n             \
    \    from /tmp/tmpmuqjzsr8.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.h:2793:5:\
    \ note: template<class _CharT, class _Traits, class _Alloc> std::basic_istream<_CharT,\
    \ _Traits>& std::getline(std::basic_istream<_CharT, _Traits>&, std::basic_string<_CharT,\
    \ _Traits, _Alloc>&)\n     getline(basic_istream<_CharT, _Traits>& __is,\n   \
    \  ^\n/usr/include/c++/4.8.2/bits/basic_string.h:2793:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpmuqjzsr8.cpp:14:44: note:   candidate\
    \ expects 2 arguments, 3 provided\n     while (std::getline(ss, word, delimiter))\
    \ {\n               "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> elems;\n    std::istringstream ss(s);\n    std::string\
    \ elem;\n    while (std::getline(ss, elem, ';')) {\n        elems.push_back(elem);\n\
    \    }\n    return elems;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmphl48hk16.cpp: In function 'int main()':\n/tmp/tmphl48hk16.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphl48hk16.cpp:2:\n/tmp/tmphl48hk16.cpp:19:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmphl48hk16.cpp:19:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmphl48hk16.cpp:19:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmphl48hk16.cpp:19:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphl48hk16.cpp:19:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphl48hk16.cpp:19:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphl48hk16.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    assert(!s.empty());\n    std::vector<std::string> res;\n    auto itr = s.begin();\n\
    \    auto end = s.end();\n    while (itr != end) {\n        std::size_t next =\
    \ find_first_of(itr, end, '.');\n        if (next == end) {\n            res.emplace_back(itr);\n\
    \            break;\n        }\n        res.emplace_back(itr, next);\n       \
    \ ++itr;\n    }\n    return res;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxy7s1zpw.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmpxy7s1zpw.cpp:11:10: error: 'itr' does\
    \ not name a type\n     auto itr = s.begin();\n          ^\n/tmp/tmpxy7s1zpw.cpp:12:10:\
    \ error: 'end' does not name a type\n     auto end = s.end();\n          ^\n/tmp/tmpxy7s1zpw.cpp:13:12:\
    \ error: 'itr' was not declared in this scope\n     while (itr != end) {\n   \
    \         ^\n/tmp/tmpxy7s1zpw.cpp:13:19: error: 'end' was not declared in this\
    \ scope\n     while (itr != end) {\n                   ^\n/tmp/tmpxy7s1zpw.cpp:14:55:\
    \ error: 'find_first_of' was not declared in this scope\n         std::size_t\
    \ next = find_first_of(itr, end, '.');\n                                     \
    \                  ^\n/tmp/tmpxy7s1zpw.cpp:14:55: note: suggested alternative:\n\
    In file included from /usr/include/c++/4.8.2/algorithm:62:0,\n               \
    \  from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n       \
    \          from /tmp/tmpxy7s1zpw.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:4527:5:\
    \ note:   'std::find_first_of'\n     find_first_of(_InputIterator __first1, _InputIterator\
    \ __last1,\n     ^\n/tmp/tmpxy7s1zpw.cpp:16:17: error: 'class std::vector<std::basic_string<char>\
    \ >' has no member named 'emplace_back'\n             res.emplace_back(itr);\n\
    \                 ^\n/tmp/tmpxy7s1zpw.cpp:19:13: error: 'class std::vector<std::basic_string<char>\
    \ >' has no member named 'emplace_back'\n         res.emplace_back(itr, next);\n\
    \             ^\n/tmp/tmpxy7s1zpw.cpp: In function 'int main()':\n/tmp/tmpxy7s1zpw.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxy7s1zpw.cpp:2:\n/tmp/tmpxy7s1zpw.cpp:26:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                    "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  // Write your code here\n  return {};\n}\nint main() {\n    auto candidate\
    \ = words_string;\n    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzh7e1oap.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmpzh7e1oap.cpp:10:3: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n   return {};\n   ^\n/tmp/tmpzh7e1oap.cpp: In function 'int main()':\n\
    /tmp/tmpzh7e1oap.cpp:13:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = words_string;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzh7e1oap.cpp:2:\n/tmp/tmpzh7e1oap.cpp:14:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpzh7e1oap.cpp:14:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpzh7e1oap.cpp:14:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpzh7e1oap.cpp:14:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpzh7e1oap.cpp:14:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpzh7e1oap.cpp:14:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/st"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    size_t n = s.size();\n    std::vector<std::string> v;\n    for (size_t i\
    \ = 0; i < n; i++) {\n        std::string word;\n        size_t pos = s.find(i);\n\
    \        if (pos == std::string::npos) {\n            pos = n; // No more spaces,\
    \ so no more words!\n        }\n        word = s.substr(0, pos);\n        v.resize(v.size()\
    \ + 1);\n        v[i] = word;\n        s = s.substr(pos);\n    }\n    return v;\n\
    }\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa22xytv0.cpp: In function 'int main()':\n/tmp/tmpa22xytv0.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa22xytv0.cpp:2:\n/tmp/tmpa22xytv0.cpp:26:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpa22xytv0.cpp:26:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpa22xytv0.cpp:26:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpa22xytv0.cpp:26:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpa22xytv0.cpp:26:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpa22xytv0.cpp:26:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpa22xytv0.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> result;\n\n    // Write your code here\n    //\n\
    \    result.emplace_back(s.begin(), s.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = words_string;\n    assert(candidate((\"Hi, my name is\
    \ John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"})));\n    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx85v6g8y.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmpx85v6g8y.cpp:13:12: error: 'class std::vector<std::basic_string<char>\
    \ >' has no member named 'emplace_back'\n     result.emplace_back(s.begin(), s.end());\n\
    \            ^\n/tmp/tmpx85v6g8y.cpp: In function 'int main()':\n/tmp/tmpx85v6g8y.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpx85v6g8y.cpp:2:\n/tmp/tmpx85v6g8y.cpp:18:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpx85v6g8y.cpp:18:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpx85v6g8y.cpp:18:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpx85v6g8y.cpp:18:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpx85v6g8y.cpp:18:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpx85v6g8y.cpp:18:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> tokens;\n  // You can use getline to split the string\
    \ but you may want to use stringstream to read each word and push it into tokens\
    \ vector\n  std::istringstream ss(s);\n  std::string token;\n  while (std::getline(ss,\
    \ token, ',')) {\n    tokens.push_back(token);\n  }\n  return tokens;\n}\nint\
    \ main() {\n    auto candidate = words_string;\n    assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five, six\"\
    )) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi98rbbbg.cpp: In function 'int main()':\n/tmp/tmpi98rbbbg.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpi98rbbbg.cpp:2:\n/tmp/tmpi98rbbbg.cpp:20:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpi98rbbbg.cpp:20:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpi98rbbbg.cpp:20:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpi98rbbbg.cpp:20:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpi98rbbbg.cpp:20:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpi98rbbbg.cpp:20:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpi98rbbbg.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> ret;\n    auto p = s.c_str();\n    const char *first\
    \ = p, *last = nullptr;\n    while (1) {\n        auto n = strcspn(p, \", \\n\"\
    );\n        if (n == 0) break;\n        if (n) last = first + n;\n        ret.emplace_back(p,\
    \ last);\n        p += last - first;\n        first = last;\n    }\n    ret.emplace_back(p,\
    \ last);\n    return ret;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpoe_mekwg.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmpoe_mekwg.cpp:10:10: error: 'p' does not\
    \ name a type\n     auto p = s.c_str();\n          ^\n/tmp/tmpoe_mekwg.cpp:11:25:\
    \ error: 'p' was not declared in this scope\n     const char *first = p, *last\
    \ = nullptr;\n                         ^\n/tmp/tmpoe_mekwg.cpp:13:14: error: 'n'\
    \ does not name a type\n         auto n = strcspn(p, \", \\n\");\n           \
    \   ^\n/tmp/tmpoe_mekwg.cpp:14:13: error: 'n' was not declared in this scope\n\
    \         if (n == 0) break;\n             ^\n/tmp/tmpoe_mekwg.cpp:15:13: error:\
    \ 'n' was not declared in this scope\n         if (n) last = first + n;\n    \
    \         ^\n/tmp/tmpoe_mekwg.cpp:15:16: error: 'last' was not declared in this\
    \ scope\n         if (n) last = first + n;\n                ^\n/tmp/tmpoe_mekwg.cpp:16:13:\
    \ error: 'class std::vector<std::basic_string<char> >' has no member named 'emplace_back'\n\
    \         ret.emplace_back(p, last);\n             ^\n/tmp/tmpoe_mekwg.cpp:16:29:\
    \ error: 'last' was not declared in this scope\n         ret.emplace_back(p, last);\n\
    \                             ^\n/tmp/tmpoe_mekwg.cpp:20:9: error: 'class std::vector<std::basic_string<char>\
    \ >' has no member named 'emplace_back'\n     ret.emplace_back(p, last);\n   \
    \      ^\n/tmp/tmpoe_mekwg.cpp:20:25: error: 'last' was not declared in this scope\n\
    \     ret.emplace_back(p, last);\n                         ^\n/tmp/tmpoe_mekwg.cpp:\
    \ In function 'int main()':\n/tmp/tmpoe_mekwg.cpp:24:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = words_string;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpoe_mekwg.cpp:2:\n/tmp/tmpoe_mekwg.cpp:25:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpoe_mekwg.cpp:25:75:\
    \ warning: extended in"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> tokens;\n  split(tokens, s);\n  return tokens;\n}\n\
    int main() {\n    auto candidate = words_string;\n    assert(candidate((\"Hi,\
    \ my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcopdgwnk.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmpcopdgwnk.cpp:10:18: error: 'split' was\
    \ not declared in this scope\n   split(tokens, s);\n                  ^\n/tmp/tmpcopdgwnk.cpp:\
    \ In function 'int main()':\n/tmp/tmpcopdgwnk.cpp:14:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = words_string;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcopdgwnk.cpp:2:\n/tmp/tmpcopdgwnk.cpp:15:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpcopdgwnk.cpp:15:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpcopdgwnk.cpp:15:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpcopdgwnk.cpp:15:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpcopdgwnk.cpp:15:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpcopdgwnk.cpp:15:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /t"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> tokens;\n    std::string temp;\n    for (auto itr\
    \ = s.begin(); itr != s.end(); ++itr) {\n        if (itr != s.begin()) {\n   \
    \         temp = temp + \",\";\n        }\n        temp = temp + itr->c_str();\n\
    \    }\n    size_t pos = temp.find(\",\");\n    while (pos != std::string::npos)\
    \ {\n        tokens.push_back(std::string(temp.substr(0, pos)));\n        temp\
    \ = temp.substr(pos + 1);\n        pos = temp.find(\",\");\n    }\n    tokens.push_back(std::string(temp));\n\
    \    return tokens;\n}\nint main() {\n    auto candidate = words_string;\n   \
    \ assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4zr7j25k.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmp4zr7j25k.cpp:11:15: error: 'itr' does\
    \ not name a type\n     for (auto itr = s.begin(); itr != s.end(); ++itr) {\n\
    \               ^\n/tmp/tmp4zr7j25k.cpp:11:32: error: expected ';' before 'itr'\n\
    \     for (auto itr = s.begin(); itr != s.end(); ++itr) {\n                  \
    \              ^\n/tmp/tmp4zr7j25k.cpp:11:32: error: 'itr' was not declared in\
    \ this scope\n/tmp/tmp4zr7j25k.cpp: In function 'int main()':\n/tmp/tmp4zr7j25k.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4zr7j25k.cpp:2:\n/tmp/tmp4zr7j25k.cpp:28:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmp4zr7j25k.cpp:28:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmp4zr7j25k.cpp:28:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmp4zr7j25k.cpp:28:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp4zr7j25k.cpp:28:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp4zr7j25k.cpp:28:11"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> words;\n    std::istringstream ss(s);\n    std::string\
    \ word;\n    while (std::getline(ss, word, ',')) {\n        words.push_back(word);\n\
    \    }\n    return words;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv1a9bg31.cpp: In function 'int main()':\n/tmp/tmpv1a9bg31.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv1a9bg31.cpp:2:\n/tmp/tmpv1a9bg31.cpp:19:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpv1a9bg31.cpp:19:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpv1a9bg31.cpp:19:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpv1a9bg31.cpp:19:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpv1a9bg31.cpp:19:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpv1a9bg31.cpp:19:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpv1a9bg31.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> words;\n    for (auto &w: s.split(',')){\n     \
    \   w = w.trim();\n        if (w.length() >0){\n            words.push_back(w.to_string()\
    \ + \" \" + w.substr(0,w.length()-1));\n        }\n    }\n    return words;\n\
    }\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpunwsxigj.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmpunwsxigj.cpp:10:16: error: ISO C++ forbids\
    \ declaration of 'w' with no type [-fpermissive]\n     for (auto &w: s.split(',')){\n\
    \                ^\n/tmp/tmpunwsxigj.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (auto &w: s.split(',')){\n         \
    \          ^\n/tmp/tmpunwsxigj.cpp:10:21: error: 'std::string' has no member named\
    \ 'split'\n     for (auto &w: s.split(',')){\n                     ^\n/tmp/tmpunwsxigj.cpp:11:15:\
    \ error: request for member 'trim' in 'w', which is of non-class type 'int'\n\
    \         w = w.trim();\n               ^\n/tmp/tmpunwsxigj.cpp:12:15: error:\
    \ request for member 'length' in 'w', which is of non-class type 'int'\n     \
    \    if (w.length() >0){\n               ^\n/tmp/tmpunwsxigj.cpp:13:31: error:\
    \ request for member 'to_string' in 'w', which is of non-class type 'int'\n  \
    \           words.push_back(w.to_string() + \" \" + w.substr(0,w.length()-1));\n\
    \                               ^\n/tmp/tmpunwsxigj.cpp:13:53: error: request\
    \ for member 'substr' in 'w', which is of non-class type 'int'\n             words.push_back(w.to_string()\
    \ + \" \" + w.substr(0,w.length()-1));\n                                     \
    \                ^\n/tmp/tmpunwsxigj.cpp:13:64: error: request for member 'length'\
    \ in 'w', which is of non-class type 'int'\n             words.push_back(w.to_string()\
    \ + \" \" + w.substr(0,w.length()-1));\n                                     \
    \                           ^\n/tmp/tmpunwsxigj.cpp: In function 'int main()':\n\
    /tmp/tmpunwsxigj.cpp:19:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = words_string;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpunwsxigj.cpp:2:\n/tmp/tmpunwsxigj.cpp:20:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> words;\n    // Add each word in string s into words\
    \ vector\n    for (std::string w; std::getline(std::cin, w); ) {\n        // Add\
    \ w into words vector\n        words.push_back(w);\n    }\n    // Return words\n\
    \    return words;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqncw2wv6.cpp: In function 'int main()':\n/tmp/tmpqncw2wv6.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqncw2wv6.cpp:2:\n/tmp/tmpqncw2wv6.cpp:20:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpqncw2wv6.cpp:20:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpqncw2wv6.cpp:20:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpqncw2wv6.cpp:20:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpqncw2wv6.cpp:20:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpqncw2wv6.cpp:20:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpqncw2wv6.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    auto words = split(s, ' ');\n    std::vector<std::string> res(begin(words),\
    \ end(words));\n    return res;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfzlm2zsr.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmpfzlm2zsr.cpp:9:10: error: 'words' does\
    \ not name a type\n     auto words = split(s, ' ');\n          ^\n/tmp/tmpfzlm2zsr.cpp:10:40:\
    \ error: 'words' was not declared in this scope\n     std::vector<std::string>\
    \ res(begin(words), end(words));\n                                        ^\n\
    /tmp/tmpfzlm2zsr.cpp:10:45: error: 'begin' was not declared in this scope\n  \
    \   std::vector<std::string> res(begin(words), end(words));\n                \
    \                             ^\n/tmp/tmpfzlm2zsr.cpp:10:57: error: 'end' was\
    \ not declared in this scope\n     std::vector<std::string> res(begin(words),\
    \ end(words));\n                                                         ^\n/tmp/tmpfzlm2zsr.cpp:\
    \ In function 'int main()':\n/tmp/tmpfzlm2zsr.cpp:14:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = words_string;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfzlm2zsr.cpp:2:\n/tmp/tmpfzlm2zsr.cpp:15:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpfzlm2zsr.cpp:15:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpfzlm2zsr.cpp:15:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpfzlm"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> words;\n    std::string t;\n    size_t pos = 0;\n\
    \    while ((pos = s.find(\",\", pos)) != std::string::npos) {\n        t = s.substr(0,\
    \ pos);\n        words.push_back(t);\n        s = s.substr(pos + 1);\n    }\n\
    \    t = s;\n    words.push_back(t);\n    return words;\n}\nint main() {\n   \
    \ auto candidate = words_string;\n    assert(candidate((\"Hi, my name is John\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"John\"})));\n\
    \    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa28vezru.cpp: In function 'int main()':\n/tmp/tmpa28vezru.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa28vezru.cpp:2:\n/tmp/tmpa28vezru.cpp:23:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpa28vezru.cpp:23:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpa28vezru.cpp:23:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpa28vezru.cpp:23:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpa28vezru.cpp:23:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpa28vezru.cpp:23:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpa28vezru.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> words;\n    std::istringstream iss(s);\n    std::string\
    \ word;\n    while (std::getline(iss, word, ',')) {\n        words.push_back(word);\n\
    \    }\n    return words;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3hzkdso6.cpp: In function 'int main()':\n/tmp/tmp3hzkdso6.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3hzkdso6.cpp:2:\n/tmp/tmp3hzkdso6.cpp:19:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmp3hzkdso6.cpp:19:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmp3hzkdso6.cpp:19:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmp3hzkdso6.cpp:19:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp3hzkdso6.cpp:19:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp3hzkdso6.cpp:19:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp3hzkdso6.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> v;\n  std::string str = s.at(0);\n  v.push_back(str);\n\
    \  for (size_t i = 1; i < s.size(); i++) {\n    str = s.at(i);\n    if (str.size()\
    \ > 1 && str[0] == '\"' && str[str.length() - 1] == '\"') {\n      str = str.substr(1,\
    \ str.length() - 2);\n    }\n    v.push_back(str);\n  }\n  return v;\n}\nint main()\
    \ {\n    auto candidate = words_string;\n    assert(candidate((\"Hi, my name is\
    \ John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"})));\n    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3glyt3ea.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmp3glyt3ea.cpp:10:27: error: invalid conversion\
    \ from 'char' to 'const char*' [-fpermissive]\n   std::string str = s.at(0);\n\
    \                           ^\nIn file included from /usr/include/c++/4.8.2/string:53:0,\n\
    \                 from /usr/include/c++/4.8.2/bitset:47,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n             \
    \    from /tmp/tmp3glyt3ea.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ error:   initializing argument 1 of 'std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>]' [-fpermissive]\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/tmp/tmp3glyt3ea.cpp: In function 'int main()':\n/tmp/tmp3glyt3ea.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3glyt3ea.cpp:2:\n/tmp/tmp3glyt3ea.cpp:23:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmp3glyt3ea.cpp:23:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmp3glyt3ea.cpp:23:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                       "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::stringstream ss;\n  std::string item;\n  std::vector<std::string> words;\n\
    \n  while (std::getline(ss, item, ',')) {\n    words.push_back(item);\n  }\n\n\
    \  while (std::getline(ss, item, ' ')) {\n    words.push_back(item);\n  }\n\n\
    \  return words;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbl_udl59.cpp: In function 'int main()':\n/tmp/tmpbl_udl59.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbl_udl59.cpp:2:\n/tmp/tmpbl_udl59.cpp:25:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpbl_udl59.cpp:25:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpbl_udl59.cpp:25:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpbl_udl59.cpp:25:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpbl_udl59.cpp:25:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbl_udl59.cpp:25:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbl_udl59.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> result;\n    std::istringstream in(s);\n    std::string\
    \ item;\n    while (std::getline(in, item, ',')) {\n        result.push_back(item);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiai9ixg1.cpp: In function 'int main()':\n/tmp/tmpiai9ixg1.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpiai9ixg1.cpp:2:\n/tmp/tmpiai9ixg1.cpp:19:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpiai9ixg1.cpp:19:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpiai9ixg1.cpp:19:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpiai9ixg1.cpp:19:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpiai9ixg1.cpp:19:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpiai9ixg1.cpp:19:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpiai9ixg1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  // Write your code here\n  std::vector<std::string> result;\n  \n  //read all\
    \ words from the string into a vector of strings.\n  \n  \n  //split the string\
    \ by the comma\n  \n  //insert each word in the result vector.\n  \n  return result;\n\
    }\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmphvi34u90.cpp: In function 'int main()':\n/tmp/tmphvi34u90.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphvi34u90.cpp:2:\n/tmp/tmphvi34u90.cpp:23:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmphvi34u90.cpp:23:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmphvi34u90.cpp:23:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmphvi34u90.cpp:23:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphvi34u90.cpp:23:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphvi34u90.cpp:23:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphvi34u90.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> words;\n  std::istringstream stream(s);\n  std::string\
    \ word;\n  while (std::getline(stream, word, ',')) {\n    words.push_back(word);\n\
    \  }\n  return words;\n}\nint main() {\n    auto candidate = words_string;\n \
    \   assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6vs21nam.cpp: In function 'int main()':\n/tmp/tmp6vs21nam.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6vs21nam.cpp:2:\n/tmp/tmp6vs21nam.cpp:19:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmp6vs21nam.cpp:19:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmp6vs21nam.cpp:19:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmp6vs21nam.cpp:19:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6vs21nam.cpp:19:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6vs21nam.cpp:19:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6vs21nam.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> words;\n    std::istringstream iss(s);\n    std::string\
    \ word;\n    while (std::getline(iss, word, ',')) {\n        words.push_back(word);\n\
    \    }\n    return words;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbzzrema9.cpp: In function 'int main()':\n/tmp/tmpbzzrema9.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbzzrema9.cpp:2:\n/tmp/tmpbzzrema9.cpp:19:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpbzzrema9.cpp:19:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpbzzrema9.cpp:19:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpbzzrema9.cpp:19:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpbzzrema9.cpp:19:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbzzrema9.cpp:19:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbzzrema9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \        std::vector<std::string> words;\n        std::stringstream stream(s);\n\
    \        std::string word;\n        while (std::getline(stream, word, ',')) {\n\
    \                words.push_back(word);\n        }\n        return words;\n}\n\
    int main() {\n    auto candidate = words_string;\n    assert(candidate((\"Hi,\
    \ my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwwavzn1w.cpp: In function 'int main()':\n/tmp/tmpwwavzn1w.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwwavzn1w.cpp:2:\n/tmp/tmpwwavzn1w.cpp:19:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpwwavzn1w.cpp:19:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpwwavzn1w.cpp:19:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpwwavzn1w.cpp:19:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwwavzn1w.cpp:19:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwwavzn1w.cpp:19:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwwavzn1w.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::istringstream ss(s);\n    std::string word;\n    std::vector<std::string>\
    \ result;\n    while (std::getline(ss, word, ',')) {\n        result.push_back(word);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1vdzqd6a.cpp: In function 'int main()':\n/tmp/tmp1vdzqd6a.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1vdzqd6a.cpp:2:\n/tmp/tmp1vdzqd6a.cpp:19:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmp1vdzqd6a.cpp:19:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmp1vdzqd6a.cpp:19:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmp1vdzqd6a.cpp:19:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp1vdzqd6a.cpp:19:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp1vdzqd6a.cpp:19:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp1vdzqd6a.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> v;\n  std::istringstream iss(s);\n  std::string word;\n\
    \  while (std::getline(iss, word, ',') && word.length())\n    v.push_back(word);\n\
    \  return v;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkz1cplgj.cpp: In function 'int main()':\n/tmp/tmpkz1cplgj.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkz1cplgj.cpp:2:\n/tmp/tmpkz1cplgj.cpp:18:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpkz1cplgj.cpp:18:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpkz1cplgj.cpp:18:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpkz1cplgj.cpp:18:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpkz1cplgj.cpp:18:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpkz1cplgj.cpp:18:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpkz1cplgj.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    // Split the string with spaces.\n    std::vector<std::string> words;\n \
    \   std::string word;\n    std::stringstream ss;\n    ss.str(s);\n    std::string\
    \ item;\n    while (std::getline(ss, item, ',')) {\n        word = item;\n   \
    \     words.push_back(word);\n    }\n    return words;\n}\nint main() {\n    auto\
    \ candidate = words_string;\n    assert(candidate((\"Hi, my name is John\")) ==\
    \ (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"John\"})));\n\
    \    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxbn2bfzt.cpp: In function 'int main()':\n/tmp/tmpxbn2bfzt.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxbn2bfzt.cpp:2:\n/tmp/tmpxbn2bfzt.cpp:23:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpxbn2bfzt.cpp:23:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpxbn2bfzt.cpp:23:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpxbn2bfzt.cpp:23:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpxbn2bfzt.cpp:23:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpxbn2bfzt.cpp:23:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpxbn2bfzt.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> words;\n    \n    // Split by spaces or commas.\n\
    \    boost::split(words, s, boost::is_any_of(\",\"), boost::token_compress_on);\n\
    \    \n    return words;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5flhtw0y.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmp5flhtw0y.cpp:12:5: error: 'boost' has\
    \ not been declared\n     boost::split(words, s, boost::is_any_of(\",\"), boost::token_compress_on);\n\
    \     ^\n/tmp/tmp5flhtw0y.cpp:12:28: error: 'boost' has not been declared\n  \
    \   boost::split(words, s, boost::is_any_of(\",\"), boost::token_compress_on);\n\
    \                            ^\n/tmp/tmp5flhtw0y.cpp:12:51: error: 'boost' has\
    \ not been declared\n     boost::split(words, s, boost::is_any_of(\",\"), boost::token_compress_on);\n\
    \                                                   ^\n/tmp/tmp5flhtw0y.cpp: In\
    \ function 'int main()':\n/tmp/tmp5flhtw0y.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = words_string;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5flhtw0y.cpp:2:\n/tmp/tmp5flhtw0y.cpp:18:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmp5flhtw0y.cpp:18:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmp5flhtw0y.cpp:18:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmp5flhtw0y.cpp:18:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp5flhtw0y.cpp"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    auto words = s.begin(), words_end = s.end();\n    std::string word;\n   \
    \ while (words != words_end) {\n        std::cin >> word;\n        if (word !=\
    \ ',' && word != ' ') {\n            words.push_back(word);\n        }\n    }\n\
    \    return std::vector<std::string>(words.begin(), words.end());\n}\nint main()\
    \ {\n    auto candidate = words_string;\n    assert(candidate((\"Hi, my name is\
    \ John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"})));\n    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwmdf8lkg.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmpwmdf8lkg.cpp:9:10: error: 'words' does\
    \ not name a type\n     auto words = s.begin(), words_end = s.end();\n       \
    \   ^\n/tmp/tmpwmdf8lkg.cpp:11:12: error: 'words' was not declared in this scope\n\
    \     while (words != words_end) {\n            ^\n/tmp/tmpwmdf8lkg.cpp:11:21:\
    \ error: 'words_end' was not declared in this scope\n     while (words != words_end)\
    \ {\n                     ^\n/tmp/tmpwmdf8lkg.cpp:13:18: error: no match for 'operator!='\
    \ (operand types are 'std::string {aka std::basic_string<char>}' and 'char')\n\
    \         if (word != ',' && word != ' ') {\n                  ^\n/tmp/tmpwmdf8lkg.cpp:13:18:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n\
    \                 from /tmp/tmpwmdf8lkg.cpp:2:\n/usr/include/c++/4.8.2/valarray:1180:1:\
    \ note: template<class _Tp> std::_Expr<std::_BinClos<std::__not_equal_to, std::_Constant,\
    \ std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__not_equal_to, _Tp>::result_type>\
    \ std::operator!=(const _Tp&, const std::valarray<_Tp>&)\n _DEFINE_BINARY_OPERATOR(!=,\
    \ __not_equal_to)\n ^\n/usr/include/c++/4.8.2/valarray:1180:1: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpwmdf8lkg.cpp:13:21: note: \
    \  mismatched types 'const std::valarray<_Tp>' and 'char'\n         if (word !=\
    \ ',' && word != ' ') {\n                     ^\nIn file included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n\
    \                 from /tmp/tmpwmdf8lkg.cpp:2:\n/usr/include/c++/4.8.2/valarray:1180:1:\
    \ note: template<class _Tp> std::_Expr<std::_BinClos<std::__not_equal_to, std::_ValArray,\
    \ std::_Constant, _Tp, _Tp>, typename std::__fun<std::__not_equal_to, _Tp>::result_type>\
    \ std::operator!=(const std::valarray<_Tp>&, const _Tp&)\n _DEFINE_BINARY_OPERATOR(!=,\
    \ __not_equal_to)\n ^\n/usr/include/c++/4.8.2/valarray:1180:1: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpwmdf8lkg.cpp:13:21: note: \
    \  'std::string {aka std::basic_st"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  s = s.substr(0, s.size() - 1);\n  std::istringstream stream(s);\n  std::vector<std::string>\
    \ result;\n  while (stream >> std::ws) {\n    result.push_back(std::ws);\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn7atp4ww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmpn7atp4ww.cpp:13:29: error: no matching\
    \ function for call to 'std::vector<std::basic_string<char> >::push_back(<unresolved\
    \ overloaded function type>)'\n     result.push_back(std::ws);\n             \
    \                ^\n/tmp/tmpn7atp4ww.cpp:13:29: note: candidate is:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpn7atp4ww.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:901:7:\
    \ note: void std::vector<_Tp, _Alloc>::push_back(const value_type&) [with _Tp\
    \ = std::basic_string<char>; _Alloc = std::allocator<std::basic_string<char> >;\
    \ std::vector<_Tp, _Alloc>::value_type = std::basic_string<char>]\n       push_back(const\
    \ value_type& __x)\n       ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:901:7:\
    \ note:   no known conversion for argument 1 from '<unresolved overloaded function\
    \ type>' to 'const value_type& {aka const std::basic_string<char>&}'\n/tmp/tmpn7atp4ww.cpp:\
    \ In function 'int main()':\n/tmp/tmpn7atp4ww.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = words_string;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpn7atp4ww.cpp:2:\n/tmp/tmpn7atp4ww.cpp:19:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpn7atp4ww.cpp:19:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpn"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> v;\n  std::size_t i = 0;\n  while (i < s.size()) {\n\
    \    v.push_back(s.substr(i, s[i] - i));\n    i += s[i] - i;\n  }\n  return v;\n\
    }\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz4uateqe.cpp: In function 'int main()':\n/tmp/tmpz4uateqe.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz4uateqe.cpp:2:\n/tmp/tmpz4uateqe.cpp:19:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpz4uateqe.cpp:19:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpz4uateqe.cpp:19:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpz4uateqe.cpp:19:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpz4uateqe.cpp:19:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpz4uateqe.cpp:19:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpz4uateqe.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  assert(!s.empty());\n  std::vector<std::string> result;\n\n  // Initialize\
    \ a vector of strings\n  std::string token = \"\";\n  for (size_t i = 0; i < s.size();\
    \ i++) {\n    if (s.at(i) == ',' || s.at(i) == ' ')\n      token = s.substr(0,\
    \ i);\n    result.push_back(token);\n    token = \"\";\n  }\n\n  // Push the last\
    \ token\n  result.push_back(token);\n  return result;\n}\nint main() {\n    auto\
    \ candidate = words_string;\n    assert(candidate((\"Hi, my name is John\")) ==\
    \ (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"John\"})));\n\
    \    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi1cpyq6x.cpp: In function 'int main()':\n/tmp/tmpi1cpyq6x.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpi1cpyq6x.cpp:2:\n/tmp/tmpi1cpyq6x.cpp:27:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpi1cpyq6x.cpp:27:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpi1cpyq6x.cpp:27:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpi1cpyq6x.cpp:27:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpi1cpyq6x.cpp:27:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpi1cpyq6x.cpp:27:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpi1cpyq6x.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> result;\n  std::string item;\n  std::stringstream\
    \ ss;\n\n  while (std::getline(ss, item, ',')) {\n    result.push_back(item);\n\
    \  }\n\n  return result;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe8cboj0d.cpp: In function 'int main()':\n/tmp/tmpe8cboj0d.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpe8cboj0d.cpp:2:\n/tmp/tmpe8cboj0d.cpp:21:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpe8cboj0d.cpp:21:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpe8cboj0d.cpp:21:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpe8cboj0d.cpp:21:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpe8cboj0d.cpp:21:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpe8cboj0d.cpp:21:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpe8cboj0d.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> svec;\n  for (std::string line : split(s, \",\"))\n\
    \    for (std::string word : split(line, \" \"))\n      svec.push_back(word);\n\
    \  return svec;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv3p5pmom.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmpv3p5pmom.cpp:10:27: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n   for (std::string line : split(s,\
    \ \",\"))\n                           ^\n/tmp/tmpv3p5pmom.cpp:10:39: error: 'split'\
    \ was not declared in this scope\n   for (std::string line : split(s, \",\"))\n\
    \                                       ^\n/tmp/tmpv3p5pmom.cpp:11:29: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ word : split(line, \" \"))\n                             ^\n/tmp/tmpv3p5pmom.cpp:\
    \ In function 'int main()':\n/tmp/tmpv3p5pmom.cpp:16:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = words_string;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv3p5pmom.cpp:2:\n/tmp/tmpv3p5pmom.cpp:17:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpv3p5pmom.cpp:17:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpv3p5pmom.cpp:17:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpv3p5pmom.cpp:17:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpv3p5pmom.cpp:17:110:\
    \ error: no matching functi"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> result;\n    std::istringstream iss(s);\n    std::string\
    \ word;\n    while (std::getline(iss, word, ',')) {\n        result.push_back(word);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmptq8h1g5e.cpp: In function 'int main()':\n/tmp/tmptq8h1g5e.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptq8h1g5e.cpp:2:\n/tmp/tmptq8h1g5e.cpp:19:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmptq8h1g5e.cpp:19:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmptq8h1g5e.cpp:19:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmptq8h1g5e.cpp:19:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmptq8h1g5e.cpp:19:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmptq8h1g5e.cpp:19:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmptq8h1g5e.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> ans;\n  std::string word;\n  std::istringstream ss(s);\n\
    \  while (std::getline(ss, word, ',')) {\n    ans.push_back(word);\n  }\n  return\
    \ ans;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsc8al0z7.cpp: In function 'int main()':\n/tmp/tmpsc8al0z7.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsc8al0z7.cpp:2:\n/tmp/tmpsc8al0z7.cpp:19:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpsc8al0z7.cpp:19:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpsc8al0z7.cpp:19:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpsc8al0z7.cpp:19:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpsc8al0z7.cpp:19:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpsc8al0z7.cpp:19:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpsc8al0z7.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> tokens;\n  std::string temp;\n  temp = s;\n  size_t\
    \ pos = 0;\n  while (pos != std::string::npos) {\n    pos = temp.find_first_of(\"\
    \ ,\", pos);\n    tokens.push_back(temp.substr(0, pos));\n    temp = temp.substr(pos\
    \ + 1);\n    pos = temp.find_first_of(\" ,\", pos);\n  }\n  tokens.push_back(temp);\n\
    \  return tokens;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_0w4mw_f.cpp: In function 'int main()':\n/tmp/tmp_0w4mw_f.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_0w4mw_f.cpp:2:\n/tmp/tmp_0w4mw_f.cpp:24:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmp_0w4mw_f.cpp:24:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmp_0w4mw_f.cpp:24:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmp_0w4mw_f.cpp:24:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_0w4mw_f.cpp:24:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_0w4mw_f.cpp:24:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp_0w4mw_f.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::stringstream ss(s);\n    std::string word;\n    std::vector<std::string>\
    \ res;\n    while (std::getline(ss, word, ',')) {\n        res.push_back(word);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd0d2rlq5.cpp: In function 'int main()':\n/tmp/tmpd0d2rlq5.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpd0d2rlq5.cpp:2:\n/tmp/tmpd0d2rlq5.cpp:19:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpd0d2rlq5.cpp:19:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpd0d2rlq5.cpp:19:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpd0d2rlq5.cpp:19:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpd0d2rlq5.cpp:19:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpd0d2rlq5.cpp:19:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpd0d2rlq5.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> words;\n    size_t i = 0;\n    size_t cur = 0;\n\
    \    size_t len = s.length();\n    char ch;\n    while (i < len) {\n        ch\
    \ = s[i++];\n        if (ch == ',') {\n            words.push_back((std::string(cur,\
    \ i - 1)));\n            cur = i + 1;\n        }\n    }\n    words.push_back((std::string(cur,\
    \ len - 1)));\n    return words;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7xz8h7jj.cpp: In function 'int main()':\n/tmp/tmp7xz8h7jj.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7xz8h7jj.cpp:2:\n/tmp/tmp7xz8h7jj.cpp:26:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmp7xz8h7jj.cpp:26:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmp7xz8h7jj.cpp:26:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmp7xz8h7jj.cpp:26:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp7xz8h7jj.cpp:26:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp7xz8h7jj.cpp:26:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp7xz8h7jj.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> words;\n    std::string current;\n    size_t pos\
    \ = 0;\n    for (std::string::iterator itr = s.begin(); itr != s.end(); ++itr)\
    \ {\n        if (itr == s.begin()) {\n            current = *itr;\n          \
    \  words.push_back(current);\n            pos = 1;\n        } else {\n       \
    \     if (itr != s.begin()) {\n                current = *itr;\n             \
    \   words.push_back(current);\n            }\n            if (current == ',')\
    \ {\n                pos = 0;\n            }\n        }\n    }\n    return words;\n\
    }\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyg_fig5e.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmpyg_fig5e.cpp:22:25: error: no match for\
    \ 'operator==' (operand types are 'std::string {aka std::basic_string<char>}'\
    \ and 'char')\n             if (current == ',') {\n                         ^\n\
    /tmp/tmpyg_fig5e.cpp:22:25: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n\
    \                 from /tmp/tmpyg_fig5e.cpp:2:\n/usr/include/c++/4.8.2/valarray:1179:1:\
    \ note: template<class _Tp> std::_Expr<std::_BinClos<std::__equal_to, std::_Constant,\
    \ std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__equal_to, _Tp>::result_type>\
    \ std::operator==(const _Tp&, const std::valarray<_Tp>&)\n _DEFINE_BINARY_OPERATOR(==,\
    \ __equal_to)\n ^\n/usr/include/c++/4.8.2/valarray:1179:1: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpyg_fig5e.cpp:22:28: note:   mismatched\
    \ types 'const std::valarray<_Tp>' and 'char'\n             if (current == ',')\
    \ {\n                            ^\nIn file included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n\
    \                 from /tmp/tmpyg_fig5e.cpp:2:\n/usr/include/c++/4.8.2/valarray:1179:1:\
    \ note: template<class _Tp> std::_Expr<std::_BinClos<std::__equal_to, std::_ValArray,\
    \ std::_Constant, _Tp, _Tp>, typename std::__fun<std::__equal_to, _Tp>::result_type>\
    \ std::operator==(const std::valarray<_Tp>&, const _Tp&)\n _DEFINE_BINARY_OPERATOR(==,\
    \ __equal_to)\n ^\n/usr/include/c++/4.8.2/valarray:1179:1: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpyg_fig5e.cpp:22:28: note:   'std::string\
    \ {aka std::basic_string<char>}' is not derived from 'const std::valarray<_Tp>'\n\
    \             if (current == ',') {\n                            ^\nIn file included\
    \ from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n      \
    \           from /tmp/tmpyg_fig5e.cpp:2:\n/usr/include/c++/4.8.2/valarray:1179:1:\
    \ note: template<class _Tp> std::_Expr<std::_BinClos<std::__equal_to, std::_ValArray,\
    \ std::_ValArray, _Tp, _Tp>, t"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    // Write your code here\n    std::vector<std::string> ans;\n    std::string\
    \ temp;\n    for (auto & c: s) {\n        if (c==',' || c==' ') {\n          \
    \  if (ans.size()!=0)\n                ans.push_back(temp);\n            ans.push_back(std::string());\n\
    \            temp=std::string();\n        } else {\n            temp += c;\n \
    \       }\n    }\n    if (ans.size()!=0)\n        ans.push_back(temp);\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmppnrdlr_6.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmppnrdlr_6.cpp:12:17: error: ISO C++ forbids\
    \ declaration of 'c' with no type [-fpermissive]\n     for (auto & c: s) {\n \
    \                ^\n/tmp/tmppnrdlr_6.cpp:12:20: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (auto & c: s) {\n                  \
    \  ^\n/tmp/tmppnrdlr_6.cpp: In function 'int main()':\n/tmp/tmppnrdlr_6.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppnrdlr_6.cpp:2:\n/tmp/tmppnrdlr_6.cpp:28:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmppnrdlr_6.cpp:28:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmppnrdlr_6.cpp:28:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmppnrdlr_6.cpp:28:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmppnrdlr_6.cpp:28:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmppnrdlr_6.cpp:28:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> words;\n  std::istringstream stream(s);\n  std::string\
    \ word;\n  while (std::getline(stream, word, ',')) {\n    words.push_back(word);\n\
    \  }\n  return words;\n}\nint main() {\n    auto candidate = words_string;\n \
    \   assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpewwj0rwk.cpp: In function 'int main()':\n/tmp/tmpewwj0rwk.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpewwj0rwk.cpp:2:\n/tmp/tmpewwj0rwk.cpp:19:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpewwj0rwk.cpp:19:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpewwj0rwk.cpp:19:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpewwj0rwk.cpp:19:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpewwj0rwk.cpp:19:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpewwj0rwk.cpp:19:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpewwj0rwk.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> tokens;\n    size_t prev = 0;\n    for (size_t i\
    \ = 0; i < s.size(); i++) {\n        if (s[i] == ',') {\n            tokens.emplace_back(s.substr(prev,\
    \ i - prev));\n            prev = i + 1;\n        }\n    }\n    tokens.emplace_back(s.substr(prev,\
    \ s.size() - prev));\n    return tokens;\n}\nint main() {\n    auto candidate\
    \ = words_string;\n    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjztri37l.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmpjztri37l.cpp:13:20: error: 'class std::vector<std::basic_string<char>\
    \ >' has no member named 'emplace_back'\n             tokens.emplace_back(s.substr(prev,\
    \ i - prev));\n                    ^\n/tmp/tmpjztri37l.cpp:17:12: error: 'class\
    \ std::vector<std::basic_string<char> >' has no member named 'emplace_back'\n\
    \     tokens.emplace_back(s.substr(prev, s.size() - prev));\n            ^\n/tmp/tmpjztri37l.cpp:\
    \ In function 'int main()':\n/tmp/tmpjztri37l.cpp:21:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = words_string;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjztri37l.cpp:2:\n/tmp/tmpjztri37l.cpp:22:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpjztri37l.cpp:22:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpjztri37l.cpp:22:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpjztri37l.cpp:22:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpjztri37l.cpp:22:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> result;\n    std::string temp = \"\";\n    for (auto\
    \ itr = std::sregex_token_iterator(s.begin(), s.end(), \n        [](char ch) {\
    \ return std::regex_match(ch, std::regex(\"[,\\\\s]+\")); }); \n        itr !=\
    \ std::sregex_token_iterator(); ++itr) {\n        temp += *itr;\n        result.push_back(temp);\n\
    \        temp = \"\";\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = words_string;\n    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvrp7_chq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmpvrp7_chq.cpp:11:15: error: 'itr' does\
    \ not name a type\n     for (auto itr = std::sregex_token_iterator(s.begin(),\
    \ s.end(), \n               ^\n/tmp/tmpvrp7_chq.cpp:12:76: error: expected ';'\
    \ before ')' token\n         [](char ch) { return std::regex_match(ch, std::regex(\"\
    [,\\\\s]+\")); }); \n                                                        \
    \                    ^\n/tmp/tmpvrp7_chq.cpp:12:76: error: expected primary-expression\
    \ before ')' token\n/tmp/tmpvrp7_chq.cpp:12:76: error: expected ';' before ')'\
    \ token\n/tmp/tmpvrp7_chq.cpp:13:9: error: 'itr' was not declared in this scope\n\
    \         itr != std::sregex_token_iterator(); ++itr) {\n         ^\n/tmp/tmpvrp7_chq.cpp:13:16:\
    \ error: 'sregex_token_iterator' is not a member of 'std'\n         itr != std::sregex_token_iterator();\
    \ ++itr) {\n                ^\n/tmp/tmpvrp7_chq.cpp:13:51: error: expected ';'\
    \ before ')' token\n         itr != std::sregex_token_iterator(); ++itr) {\n \
    \                                                  ^\n/tmp/tmpvrp7_chq.cpp: In\
    \ function 'int main()':\n/tmp/tmpvrp7_chq.cpp:21:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = words_string;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvrp7_chq.cpp:2:\n/tmp/tmpvrp7_chq.cpp:22:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpvrp7_chq.cpp:22:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpvrp7_chq.cpp:22:110:\
    \ warning: extended i"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  // Write your code here\n  std::string result;\n  result = s.substr(0, s.find(','));\n\
    \  for(int i=0;i<result.length();i++) {\n    if(result.at(i)==',') {\n      result.erase(i);\n\
    \    }\n  }\n  for(int i=0;i<result.length();i++) {\n    if(result.at(i)==' ')\
    \ {\n      result.erase(i);\n    }\n  }\n  std::vector<std::string> words(std::sregex_token_iterator(result.begin(),\
    \ result.end(), \n      std::sregex(\" \"), std::to_string(result.length())));\n\
    \  return words;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmptryhb4a3.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmptryhb4a3.cpp:22:34: error: 'sregex_token_iterator'\
    \ is not a member of 'std'\n   std::vector<std::string> words(std::sregex_token_iterator(result.begin(),\
    \ result.end(), \n                                  ^\n/tmp/tmptryhb4a3.cpp:23:7:\
    \ error: 'sregex' is not a member of 'std'\n       std::sregex(\" \"), std::to_string(result.length())));\n\
    \       ^\n/tmp/tmptryhb4a3.cpp:23:25: error: 'to_string' is not a member of 'std'\n\
    \       std::sregex(\" \"), std::to_string(result.length())));\n             \
    \            ^\n/tmp/tmptryhb4a3.cpp: In function 'int main()':\n/tmp/tmptryhb4a3.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptryhb4a3.cpp:2:\n/tmp/tmptryhb4a3.cpp:28:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmptryhb4a3.cpp:28:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmptryhb4a3.cpp:28:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmptryhb4a3.cpp:28:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmptryhb4a3.cpp:28:110:\
    \ e"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> result;\n  std::string token;\n  std::istringstream\
    \ stream(s);\n  while(std::getline(stream, token, ' ')) {\n    result.push_back(token);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjy7gztng.cpp: In function 'int main()':\n/tmp/tmpjy7gztng.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjy7gztng.cpp:2:\n/tmp/tmpjy7gztng.cpp:19:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpjy7gztng.cpp:19:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpjy7gztng.cpp:19:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpjy7gztng.cpp:19:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpjy7gztng.cpp:19:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpjy7gztng.cpp:19:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpjy7gztng.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  // Your code goes here\n  return {};\n}\nint main() {\n    auto candidate =\
    \ words_string;\n    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu2h75hry.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmpu2h75hry.cpp:10:3: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n   return {};\n   ^\n/tmp/tmpu2h75hry.cpp: In function 'int main()':\n\
    /tmp/tmpu2h75hry.cpp:13:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = words_string;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu2h75hry.cpp:2:\n/tmp/tmpu2h75hry.cpp:14:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpu2h75hry.cpp:14:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpu2h75hry.cpp:14:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpu2h75hry.cpp:14:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpu2h75hry.cpp:14:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpu2h75hry.cpp:14:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/st"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  // Write your code here.\n  std::string word;\n  std::istringstream ss(s);\n\
    \  std::vector<std::string> vs;\n  while (std::getline(ss, word, ','))\n    vs.push_back(word);\n\
    \  return vs;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvw0l4w8q.cpp: In function 'int main()':\n/tmp/tmpvw0l4w8q.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvw0l4w8q.cpp:2:\n/tmp/tmpvw0l4w8q.cpp:19:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpvw0l4w8q.cpp:19:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpvw0l4w8q.cpp:19:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpvw0l4w8q.cpp:19:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpvw0l4w8q.cpp:19:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpvw0l4w8q.cpp:19:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpvw0l4w8q.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> word_list;\n    for (auto it : std::istringstream(s).std::istream_iterator<std::string>())\
    \ {\n        word_list.push_back(it);\n    }\n    return word_list;\n}\nint main()\
    \ {\n    auto candidate = words_string;\n    assert(candidate((\"Hi, my name is\
    \ John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"})));\n    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2vlgfqyi.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmp2vlgfqyi.cpp:10:15: error: 'it' does\
    \ not name a type\n     for (auto it : std::istringstream(s).std::istream_iterator<std::string>())\
    \ {\n               ^\n/tmp/tmp2vlgfqyi.cpp:13:5: error: expected ';' before 'return'\n\
    \     return word_list;\n     ^\n/tmp/tmp2vlgfqyi.cpp:13:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp2vlgfqyi.cpp:13:5: error: expected ';' before 'return'\n\
    /tmp/tmp2vlgfqyi.cpp:13:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp2vlgfqyi.cpp:13:5: error: expected ')' before 'return'\n/tmp/tmp2vlgfqyi.cpp:\
    \ In function 'int main()':\n/tmp/tmp2vlgfqyi.cpp:16:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = words_string;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2vlgfqyi.cpp:2:\n/tmp/tmp2vlgfqyi.cpp:17:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmp2vlgfqyi.cpp:17:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmp2vlgfqyi.cpp:17:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmp2vlgfqyi.cpp:17:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tm"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> res;\n    size_t last_comma = 0;\n    size_t last_space\
    \ = 0;\n    for (size_t i = 0; i <= s.size(); i++) {\n        if (s[i] == ',')\
    \ {\n            if (last_space == i) {\n                last_comma = i;\n   \
    \         }\n        } else {\n            assert(s[i] == ' ');\n            assert(last_space\
    \ < i);\n            if (last_comma != i) {\n                res.push_back(s.substr(last_comma,\
    \ i - last_comma));\n                last_comma = i;\n                last_space\
    \ = i;\n            }\n        }\n    }\n    res.push_back(s.substr(last_comma));\n\
    \    return res;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi8v6abv5.cpp: In function 'int main()':\n/tmp/tmpi8v6abv5.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpi8v6abv5.cpp:2:\n/tmp/tmpi8v6abv5.cpp:32:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmpi8v6abv5.cpp:32:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmpi8v6abv5.cpp:32:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmpi8v6abv5.cpp:32:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpi8v6abv5.cpp:32:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpi8v6abv5.cpp:32:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpi8v6abv5.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    auto p = s.c_str();\n    auto p1 = p;\n    auto p2 = p + s.size();\n    while\
    \ (p1 != p2) {\n        if (*p1 == '\"') {\n            auto p3 = p1 + 1;\n  \
    \          while (!(*p3 | '\"') && p3 < p2) {\n                p3++;\n       \
    \     }\n            if (*p3 == '\"') {\n                auto p4 = p3;\n     \
    \           while (*p4 != '\\'') {\n                    p4++;\n              \
    \  }\n                p2 = p3;\n            }\n        }\n        p1++;\n    }\n\
    \    std::vector<std::string> words;\n    while (p1 != p2) {\n        auto e =\
    \ p1;\n        while (*(p1 - 1) != ',' && *p1 != '\"' && *p1 != ' ') {\n     \
    \       auto e--;\n        }\n        words.emplace_back(p1, e);\n        p1++;\n\
    \    }\n    return words;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp4_u8u21.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmpp4_u8u21.cpp:9:10: error: 'p' does not\
    \ name a type\n     auto p = s.c_str();\n          ^\n/tmp/tmpp4_u8u21.cpp:10:10:\
    \ error: 'p1' does not name a type\n     auto p1 = p;\n          ^\n/tmp/tmpp4_u8u21.cpp:11:10:\
    \ error: 'p2' does not name a type\n     auto p2 = p + s.size();\n          ^\n\
    /tmp/tmpp4_u8u21.cpp:12:12: error: 'p1' was not declared in this scope\n     while\
    \ (p1 != p2) {\n            ^\n/tmp/tmpp4_u8u21.cpp:12:18: error: 'p2' was not\
    \ declared in this scope\n     while (p1 != p2) {\n                  ^\n/tmp/tmpp4_u8u21.cpp:14:18:\
    \ error: 'p3' does not name a type\n             auto p3 = p1 + 1;\n         \
    \         ^\n/tmp/tmpp4_u8u21.cpp:15:23: error: 'p3' was not declared in this\
    \ scope\n             while (!(*p3 | '\"') && p3 < p2) {\n                   \
    \    ^\n/tmp/tmpp4_u8u21.cpp:18:18: error: 'p3' was not declared in this scope\n\
    \             if (*p3 == '\"') {\n                  ^\n/tmp/tmpp4_u8u21.cpp:19:22:\
    \ error: 'p4' does not name a type\n                 auto p4 = p3;\n         \
    \             ^\n/tmp/tmpp4_u8u21.cpp:20:25: error: 'p4' was not declared in this\
    \ scope\n                 while (*p4 != '\\'') {\n                         ^\n\
    /tmp/tmpp4_u8u21.cpp:29:12: error: 'p1' was not declared in this scope\n     while\
    \ (p1 != p2) {\n            ^\n/tmp/tmpp4_u8u21.cpp:29:18: error: 'p2' was not\
    \ declared in this scope\n     while (p1 != p2) {\n                  ^\n/tmp/tmpp4_u8u21.cpp:30:14:\
    \ error: 'e' does not name a type\n         auto e = p1;\n              ^\n/tmp/tmpp4_u8u21.cpp:32:18:\
    \ error: 'e' does not name a type\n             auto e--;\n                  ^\n\
    /tmp/tmpp4_u8u21.cpp:34:15: error: 'class std::vector<std::basic_string<char>\
    \ >' has no member named 'emplace_back'\n         words.emplace_back(p1, e);\n\
    \               ^\n/tmp/tmpp4_u8u21.cpp:34:32: error: 'e' was not declared in\
    \ this scope\n         words.emplace_back(p1, e);\n                          \
    \      ^\n/tmp/tmpp4_u8u21.cpp: In function 'int main()':\n/tmp/tmpp4_u8u21.cpp:4"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> result;\n    std::istringstream iss(s);\n    std::string\
    \ word;\n    while (std::getline(iss, word, ',')) {\n        result.push_back(word);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1o925ga3.cpp: In function 'int main()':\n/tmp/tmp1o925ga3.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1o925ga3.cpp:2:\n/tmp/tmp1o925ga3.cpp:19:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmp1o925ga3.cpp:19:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmp1o925ga3.cpp:19:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmp1o925ga3.cpp:19:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp1o925ga3.cpp:19:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp1o925ga3.cpp:19:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp1o925ga3.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_Inpu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> v;\n    std::string delims(\", \\t\");\n    std::size_t\
    \ prev_pos = 0;\n    auto it = s.begin();\n    while (it != s.end()) {\n     \
    \   std::size_t pos = it.find_first_of(delims, prev_pos);\n        if (pos ==\
    \ std::string::npos) {\n            pos = s.size();\n        }\n        std::string\
    \ sub_s = s.substr(prev_pos, pos - prev_pos);\n        v.push_back(sub_s);\n \
    \       prev_pos = pos + 1;\n        it = s.begin();\n    }\n    return v;\n}\n\
    int main() {\n    auto candidate = words_string;\n    assert(candidate((\"Hi,\
    \ my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp551zgb3o.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmp551zgb3o.cpp:12:10: error: 'it' does\
    \ not name a type\n     auto it = s.begin();\n          ^\n/tmp/tmp551zgb3o.cpp:13:12:\
    \ error: 'it' was not declared in this scope\n     while (it != s.end()) {\n \
    \           ^\n/tmp/tmp551zgb3o.cpp: In function 'int main()':\n/tmp/tmp551zgb3o.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp551zgb3o.cpp:2:\n/tmp/tmp551zgb3o.cpp:27:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n                                             ^\n/tmp/tmp551zgb3o.cpp:27:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                             ^\n/tmp/tmp551zgb3o.cpp:27:110:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n                              \
    \                                                                            \
    \    ^\n/tmp/tmp551zgb3o.cpp:27:110: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp551zgb3o.cpp:27:110:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp551zgb3o.cpp:27:110:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n         "
  exit_code: 1
  status: SyntaxError
