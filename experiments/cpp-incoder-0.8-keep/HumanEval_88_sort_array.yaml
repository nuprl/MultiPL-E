name: HumanEval_88_sort_array
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
  \ integers, return a copy of the given array after sorting,\n// you will sort the\
  \ given array in ascending order if the sum( first index value, last index value)\
  \ is odd,\n// or sort it in descending order if the sum( first index value, last\
  \ index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n\
  // * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2, 4, 3,\
  \ 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6,\
  \ 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array) {\n"
tests: "}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
  \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
  \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
  \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
  \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
  \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
  \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n    assert(candidate((std::vector<long>({21,\
  \ 14, 23, 11}))) == (std::vector<long>({23, 21, 14, 11})));\n}\n"
completions: ["    auto first = [&]() {\n        return array.front();\n    };\n \
    \   auto last = [&]() {\n        return array.back();\n    };\n    auto sum =\
    \ [&]() {\n        long long sum = 0;\n        for (long long i : array) {\n \
    \           sum += i;\n        }\n        return sum;\n    };\n\n    if (sum()\
    \ % 2 == 0) {\n        std::sort(array.begin(), array.end(), [&](long long a,\
    \ long long b) { return a > b; });\n    } else {\n        std::sort(array.begin(),\
    \ array.end(), [&](long long a, long long b) { return b > a; });\n    }\n    return\
    \ array;", "    int sum = 0;\n    for (auto i : array) {\n        sum += i;\n\
    \    }\n    auto mid = sum / 2;\n    auto leftSum = sum - mid;\n    auto rightSum\
    \ = sum + mid;\n    if (leftSum == mid) {\n        std::sort(array.begin(), array.end());\n\
    \        return array;\n    } else if (rightSum == mid) {\n        std::sort(array.rbegin(),\
    \ array.rend());\n        return array;\n    }\n\n    if (leftSum < rightSum)\
    \ {\n        std::sort(array.begin(), array.end());\n        return array;\n \
    \   } else {\n        std::sort(array.rbegin(), array.rend());\n        return\
    \ array;\n    }", "    //sort array in ascending order\n    if (array.size() <\
    \ 2)\n        return array;\n    long first = array[0];\n    long last = array[array.size()-1];\n\
    \    //check sum of the first and last element\n    long sumFirst = first + last;\n\
    \    long sumLast = last + first;\n    if (sumFirst % 2 == 0) {\n        //sum\
    \ is even, sort array in descending order\n        std::reverse(array.begin(),\
    \ array.end());\n    } else {\n        //sum is odd, sort array in ascending order\n\
    \        std::sort(array.begin(), array.end());\n    }\n    return array;", " \
    \ // Your code here\n  std::sort(array.begin(), array.end(), [](const long &a,\
    \ const long &b) {\n    return a + b < 0;\n  });\n  std::reverse(array.begin(),\
    \ array.end());\n  return array;", "    assert(array.size() == 0 || array.size()\
    \ == 1 || array.size() == 2);\n    if (array.size() == 0 || array.size() == 1)\
    \ {\n        return array;\n    }\n    std::vector<long> copy{ array.begin(),\
    \ array.end() };\n    std::vector<long> result(array.size());\n    int firstSum\
    \ = copy[0]; // first index value\n    int lastSum = copy[copy.size() - 1]; //\
    \ last index value\n    int firstIndex = 0;\n    int lastIndex = 0;\n    int sum\
    \ = 0;\n    long currentSum = firstSum; // current sum value\n    bool checkSum\
    \ = false;\n    while (checkSum == false) {\n        sum = currentSum;\n     \
    \   for (int i = firstIndex; i <= lastIndex; i++) {\n            sum += copy[i];\n\
    \        }\n        if (sum % 2 == 0) {\n            checkSum = true;\n      \
    \  }\n        else {\n            checkSum = false;\n        }\n        if (sum\
    \ != lastSum) {\n            firstSum = sum;\n            firstIndex = firstSum;\n\
    \            lastSum = sum;\n            lastIndex = lastSum;\n        }\n   \
    \ }\n    for (long i = 0; i < copy.size(); i++) {\n        if (sum > copy.size())\
    \ {\n            result.push_back(copy[copy.size() - 1]);\n        }\n       \
    \ else {\n            result.push_back(copy[i]);\n        }\n    }\n    long lastIndex\
    \ = copy.size() - 1;\n    long firstIndex = result.size() - 1;\n    long lastSum\
    \ = result[lastIndex];\n    long firstSum = result[firstIndex];\n    if (firstSum\
    \ - lastSum == 1) {\n        for (int i = 0; i < copy.size(); i++) {\n       \
    \     copy[i] = result[copy.size() - 1 - i];\n        }\n        return copy;\n\
    \    }\n    if (firstSum - lastSum == -1) {\n        for (int i = 0; i < copy.size();\
    \ i++) {\n            copy[i] = result[copy.size() - 1 - i];\n        }\n    \
    \    return copy;\n    }\n    for (int i = lastIndex; i >= 0; i--) {\n       \
    \ result[i] = result[result.size() - 1 - i];\n    }\n    for (int i = firstIndex;\
    \ i >= 0; i--) {\n        result[i] = result[result.size() - 1 - i];\n    }\n\
    \    return copy;", "    // Write your code here.\n    return array;", "\tlong\
    \ sum = 0;\n\tstd::vector<long> result;\n\tfor (auto it: array) {\n\t\tsum = sum\
    \ + it;\n\t\tif (sum % 2 != 0) {\n\t\t\tresult.push_back(it);\n\t\t}\n\t}\n\t\
    return result;", "    if (array.empty()) return {};\n    long long sum = (array[0]\
    \ + array[array.size() - 1]);\n    // cout << \"sum: \" << sum << endl;\n    if\
    \ (sum % 2 == 1) {\n        return std::move(array);\n    } else {\n        std::sort(array.begin(),\
    \ array.end(), [](long long a, long long b) { return b - a; });\n        return\
    \ std::move(array);\n    }", "    int flag = 1;\n    std::vector<long> v1(array.begin(),\
    \ array.end());\n    std::vector<long> v2(array.begin(), array.end());\n    for\
    \ (int i = 0; i < v1.size(); i++) {\n        int first = v1[i];\n        int last\
    \ = v2[(v2.size() - 1) - i];\n        if (first + last == 0) {\n            v1[i]\
    \ = 0;\n            v2[i] = 0;\n        } else {\n            if (flag % 2 ==\
    \ 1) {\n                if (last > first) {\n                    v2[i] = last;\n\
    \                } else {\n                    v2[i] = first;\n              \
    \  }\n            } else {\n                if (last < first) {\n            \
    \        v1[i] = last;\n                } else {\n                    v1[i] =\
    \ first;\n                }\n            }\n        }\n    }\n    return v1;",
  "    long long sum = 0;\n    long long last_index = 0;\n    for (long long i = 1;\
    \ i < array.size(); i++) {\n        sum += array[i];\n        if (sum % 2 != 0)\
    \ {\n            last_index = i;\n        }\n    }\n    std::vector<long> res\
    \ = array;\n    res.erase(res.begin() + last_index + 1);\n    return res;", "\t\
    std::vector<long> result;\n\tlong current_sum = array[0];\n\tlong last_element\
    \ = array[array.size() - 1];\n\tlong temp_sum = 0;\n\tfor (long index = 1; index\
    \ < array.size(); index++) {\n\t\ttemp_sum += array[index];\n\t\tif (temp_sum\
    \ < current_sum) {\n\t\t\tresult.push_back(array[index]);\n\t\t\tcurrent_sum =\
    \ temp_sum;\n\t\t} else if (temp_sum > current_sum) {\n\t\t\twhile (temp_sum >\
    \ current_sum) {\n\t\t\t\tresult.push_back(last_element);\n\t\t\t\tcurrent_sum\
    \ -= last_element;\n\t\t\t}\n\t\t\tresult.push_back(array[index]);\n\t\t\tcurrent_sum\
    \ = temp_sum;\n\t\t} else {\n\t\t\twhile (temp_sum < current_sum) {\n\t\t\t\t\
    result.push_back(array[index]);\n\t\t\t\tcurrent_sum += array[index];\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn result;", "    // write your code here\n    long sum =\
    \ 0;\n    long last_index = 0;\n    for (int i = 0; i < array.size(); i++) {\n\
    \        sum += array[i];\n        last_index = i;\n    }\n    assert(sum % 2\
    \ == 0);\n    if (sum % 2 == 1) {\n        std::reverse(array.begin(), array.end());\n\
    \    }\n\n    long last_value = array[last_index];\n    long last_index_value\
    \ = array[last_index - 1];\n    for (long i = last_index; i < array.size() - 1;\
    \ i++) {\n        long value = array[i];\n        if (last_index_value + last_value\
    \ == value) {\n            if (sum % 2 == 0) {\n                std::reverse(array.begin()\
    \ + i, array.begin() + i + 1);\n            }\n        } else {\n            std::reverse(array.begin()\
    \ + i, array.begin() + i + 2);\n        }\n        last_index_value = last_value;\n\
    \        last_value = value;\n    }\n    return array;", "    std::sort(array.begin(),\
    \ array.end());\n    return array;", "    assert(array.size() != 0 && \"empty\
    \ array\");\n    std::vector<long> sorted_vec(array.size());\n    long sum = 0;\n\
    \    for (int i = 0; i < array.size(); i++) {\n        sum = array[i];\n     \
    \   for (int j = i; j < array.size(); j++) {\n            sum += array[j];\n \
    \           if (sum % 2 == 0)\n                std::swap(array[i], array[j]);\n\
    \        }\n        sorted_vec[i] = sum;\n    }\n    return sorted_vec;", "  \
    \  // write your code here\n    std::vector<long> new_array;\n    int mid = array.size()\
    \ / 2;\n    int left_sum = array[0] + array[mid];\n    int right_sum = array[mid]\
    \ + array[0];\n    if (left_sum % 2 == 1) {\n        new_array.push_back(array[0]);\n\
    \        std::swap(array[0], array[mid]);\n    }\n    if (right_sum % 2 == 1)\
    \ {\n        new_array.push_back(array[mid]);\n        std::swap(array[mid], array[0]);\n\
    \    }\n    std::vector<long> temp = sort_array(array);\n    for (int i = 1; i\
    \ < mid; i++) {\n        int left_index = i * (mid);\n        int right_index\
    \ = left_index + mid;\n        int left_sum = array[left_index] + array[left_index\
    \ + 1];\n        int right_sum = array[right_index] + array[right_index + 1];\n\
    \        if (left_sum % 2 == 1) {\n            std::swap(array[left_index], array[left_index\
    \ + 1]);\n            std::swap(array[right_index], array[right_index + 1]);\n\
    \        }\n        if (right_sum % 2 == 1) {\n            std::swap(array[left_index],\
    \ array[left_index + 1]);\n            std::swap(array[right_index], array[right_index\
    \ + 1]);\n        }\n    }\n    for (int i = 0; i < mid; i++) {\n        new_array.push_back(temp[i]);\n\
    \    }\n    for (int i = mid; i < array.size(); i++) {\n        new_array.push_back(array[i]);\n\
    \    }\n    return new_array;", "    // Write your code here\n    long sum = 0;\n\
    \    for (auto i : array) {\n        sum += i;\n    }\n    if (sum % 2 == 0) {\n\
    \        std::sort(array.begin(), array.end(), std::greater<long>());\n    } else\
    \ {\n        std::sort(array.begin(), array.end(), std::less<long>());\n    }\n\
    \    return array;", "    assert(array.size() != 0);\n    int size = array.size();\n\
    \    std::vector<long> outputArray(size);\n    for (int i = 0; i < size; i++)\
    \ {\n        long s = array[i];\n        for (int j = i - 1; j >= 0; j--) {\n\
    \            long e = array[j];\n            if (s <= e) {\n                long\
    \ temp = s;\n                s = e;\n                e = temp;\n            }\n\
    \            if (s - e > 0) break;\n        }\n        outputArray[i] = s;\n \
    \   }\n    std::sort(outputArray.begin(), outputArray.end());\n    return outputArray;",
  "    // write your code here\n    if (array.size() % 2 == 1) {\n        std::sort(array.begin(),\
    \ array.end(), [&array](int a, int b) -> bool {\n            if (a + b < 0) {\n\
    \                return false;\n            }\n            auto sum = a * b; //\
    \ Sum all the products of first and last indices.\n            auto flag = (a\
    \ * 2 + b) % 2 == 1 ? true : false;\n            return sum < array[array.size()\
    \ - 1] || sum > array[array.size() - 2];\n        });\n    } else {\n        std::sort(array.begin(),\
    \ array.end(), [&array](int a, int b) -> bool {\n            if (a + b < 0) {\n\
    \                return false;\n            }\n            auto sum = a * b; //\
    \ Sum all the products of first and last indices.\n            auto flag = (a\
    \ * 2 + b) % 2 == 0 ? true : false;\n            return sum > array[array.size()\
    \ - 1] || sum < array[array.size() - 2];\n        });\n    }\n    return array;",
  "  std::vector<long> copy = array;\n  std::sort(copy.begin(), copy.end());\n  return\
    \ copy;", "    // Your code here\n    return array;", "    std::vector<long> arr;\n\
    \    for (size_t i = 0; i < array.size(); i++) {\n        arr.push_back(array[i]);\n\
    \    }\n    std::sort(arr.begin(), arr.end());\n    // find sum of two elements\
    \ in the array and determine if it is odd or even\n    long sum = 0;\n    for\
    \ (size_t i = 0; i < array.size(); i++) {\n        sum += arr[i];\n    }\n   \
    \ if (sum & 1) {\n        // odd, sort descending\n        std::reverse(arr.begin(),\
    \ arr.end());\n    } else {\n        // even, sort ascending\n        std::reverse(arr.begin(),\
    \ arr.end());\n    }\n    return arr;", "    // Write your code here.\n    int\
    \ sum = 0;\n    for (long int x : array) {\n        sum = sum + x;\n    }\n  \
    \  for (int i = 0; i < array.size(); i++) {\n        array[i] = array[i];\n  \
    \  }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;", "    int n = array.size();\n    if (n == 0) return array;\n\n    std::vector<long>\
    \ a(n);\n    long ans = 0;\n\n    long sum = 0;\n    int pos = 0;\n    for (int\
    \ i = 0; i < n; i++) {\n        sum += array[i];\n        if (sum % 2 == 0) ans\
    \ += array[i];\n        else ans -= array[i];\n        a[pos] = array[i];\n  \
    \      pos = i + 1;\n    }\n\n    if (ans == 0) {\n        if (array[0] <= array[n\
    \ - 1]) {\n            std::swap(array[0], array[n - 1]);\n        }\n    } else\
    \ {\n        if (ans % 2 == 0) std::reverse(std::begin(a), std::end(a));\n   \
    \ }\n    return a;", "    sort(array.begin(), array.end());\n    return array;",
  "    long sum = 0;\n    for (long value : array)\n        sum += value;\n    if\
    \ (sum % 2 == 0)\n        std::sort(array.begin(), array.end(), [](long a, long\
    \ b) {\n            return a > b;\n        });\n    else\n        std::sort(array.begin(),\
    \ array.end(), [](long a, long b) {\n            return a < b;\n        });\n\
    \    return array;", "\t// write your code in here\n\tlong sum=array[0]+array[array.size()-1];\n\
    \tstd::vector<long> result;\n\tlong first=array[0];\n\tlong last=array[array.size()-1];\n\
    \tif(sum%2==1){\n\t\tresult=array;\n\t}else{\n\t\tstd::reverse(array.begin(),array.end());\n\
    \t\tresult=array;\n\t}\n\tfor(int i=0;i<result.size();i++){\n\t\tif((first+last)%2==0){\n\
    \t\t\tlong temp=result[i]+result[i+1];\n\t\t\tresult[i]=temp;\n\t\t}\n\t\tif((first+last)%2==1){\n\
    \t\t\tlong temp=result[i]+result[i-1];\n\t\t\tresult[i]=temp;\n\t\t}\n\t}\n\t\
    return result;", "    long long sum = 0; // Sum first and last element\n    for\
    \ (auto it = array.rbegin(); it != array.rend(); it++) { // Sum the rest elements\n\
    \        sum += *it;\n    }\n\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end(), [&sum](long long i1, long long i2) { return sum > i1 && sum < i2;\
    \ });\n    } else {\n        std::sort(array.rbegin(), array.rend(), [&sum](long\
    \ long i1, long long i2) { return sum > i1 && sum < i2; });\n    }\n\n    return\
    \ array;", "    int size = array.size();\n    for (int i = 0; i < size - 1; i++)\
    \ {\n        int s = array[i] - array[i + 1];\n        if (s % 2 == 0) {\n   \
    \         std::swap(array[i + 1], array[i]);\n        }\n    }\n    return array;",
  "  assert(array.size() > 0);\n  std::vector<long> new_array(array.size());\n  //\
    \ sum\n  long s = 0, k = 0;\n  for (int i = 0; i < array.size(); i++) {\n    s\
    \ += array[i];\n    if (s > 0) {\n      new_array[k] = s;\n      k++;\n    }\n\
    \  }\n  if (k != new_array.size()) {\n    // sort\n    std::sort(new_array.begin(),\
    \ new_array.end(), [](long a, long b) -> bool {\n      return a > b;\n    });\n\
    \  }\n  return new_array;", "  if (array.empty()) {\n    return array;\n  }\n\
    \  long long sum = 0;\n  for (auto i : array) {\n    sum += i;\n  }\n  if (sum\
    \ % 2) {\n    std::sort(array.begin(), array.end());\n  } else {\n    std::sort(array.rbegin(),\
    \ array.rend());\n  }\n  return array;", "    long long sum = 0;\n    for (auto\
    \ i : array) {\n        sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;", "  // Write your code here\n  std::vector<long> sortedArray;\n\
    \  int sum = 0;\n  for(long i = 0; i < array.size(); i++) {\n    sum = sum + array[i];\n\
    \    sortedArray.push_back(sum);\n  }\n  std::sort(sortedArray.begin(), sortedArray.end());\n\
    \  if(sum % 2 == 0){\n    std::reverse(sortedArray.begin(), sortedArray.end());\n\
    \  }\n  return sortedArray;", "\tauto sum = array.back() + array.front();\n\t\
    if (sum % 2 == 0) {\n\t\tstd::sort(array.begin(), array.end(), [](const long a,\
    \ const long b) {\n\t\t\treturn a > b;\n\t\t});\n\t\treturn array;\n\t} else {\n\
    \t\tstd::sort(array.rbegin(), array.rend(), [](const long a, const long b) {\n\
    \t\t\treturn a < b;\n\t\t});\n\t\treturn array;\n\t}", "    // write your code\
    \ in here\n    long last_value = 0;\n    long cur_sum = 0;\n    std::vector<long>\
    \ v;\n    for(long i = 0; i < array.size(); i++) {\n        cur_sum += array[i];\n\
    \        if(cur_sum & 1) {\n            v.push_back(array[i]);\n            last_value\
    \ = array[i];\n        } else {\n            v.push_back(last_value);\n      \
    \      v.push_back(array[i]);\n        }\n    }\n    return v;", "  long s = 0;\n\
    \  for (auto i : array)\n    s += i;\n  std::vector<long> v;\n  if (s % 2 != 0)\n\
    \    for (auto i : array)\n      v.push_back(i);\n  else\n    for (auto i : array)\n\
    \      v.push_back(i * -1);\n  return v;", "  std::sort(array.begin(), array.end());\n\
    \  return array;", "    // code here\n    if(array.size() == 0)\n        return\
    \ array;\n    if(array.size() <= 1)\n        return array;\n    long sum = 0;\n\
    \    for(int i = 0; i < array.size(); i++) {\n        sum = sum + array[i];\n\
    \    }\n    if(sum % 2 != 0)\n        std::swap(array[0], array[array.size() -\
    \ 1]);\n    for(int i = 0; i < array.size(); i++)\n        array[i] -= array[i\
    \ - 1];\n    return array;", "    assert(array.size() != 0);\n    std::vector<long>\
    \ result;\n    if (array.size() % 2 == 0) {\n        // odd, push all odd elements\
    \ to result\n        std::copy(std::next(array.begin(), array.size() / 2), array.end(),\
    \ std::back_inserter(result));\n        // sort result in descending order\n \
    \       std::sort(result.begin(), result.end(), std::greater<long>());\n    }\
    \ else {\n        // even, push all even elements to result\n        std::copy(std::next(array.begin(),\
    \ array.size() / 2 + 1), array.end(), std::back_inserter(result));\n        //\
    \ sort result in ascending order\n        std::sort(result.begin(), result.end(),\
    \ std::less<long>());\n    }\n    return result;", "    assert(array.size() >\
    \ 0);\n    assert(array.size() % 2 == 0);\n    std::vector<long> result;\n   \
    \ long sum = 0;\n    for (auto i : array) {\n        sum += i;\n        result.push_back(i);\n\
    \    }\n    if (sum % 2 == 1) {\n        for (long i = sum; i > 0; i -= 2) {\n\
    \            result.push_back(i / 2);\n        }\n    } else {\n        for (long\
    \ i = sum; i > 0; i -= 2) {\n            result.push_back(i / 2 + 1);\n      \
    \  }\n    }\n    return result;", "    long long int sum = 0;\n    for (auto i\
    \ : array) {\n        sum += i;\n    }\n    long long int t = sum / 2;\n    if\
    \ (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n        std::vector<long>\
    \ new_arr(array.size());\n        for (auto i : array) {\n            if (i <=\
    \ t) {\n                new_arr.push_back(i);\n            }\n        }\n    \
    \    return new_arr;\n    } else {\n        std::sort(array.begin(), array.end(),\
    \ [&sum, &t](long long int i, long long int j) {\n            if (i <= t) {\n\
    \                return true;\n            }\n            return false;\n    \
    \    });\n        std::vector<long> new_arr(array.size());\n        for (auto\
    \ i : array) {\n            if (i >= t) {\n                new_arr.push_back(i);\n\
    \            }\n        }\n        return new_arr;\n    }", "    // Write your\
    \ code here\n    assert(array.size() >= 2);\n    std::vector<long> res(array.begin(),\
    \ array.begin() + array.size() / 2);\n    std::vector<long> temp(array.begin()\
    \ + array.size() / 2, array.end());\n    std::sort(res.begin(), res.end(), [&temp](int\
    \ i, int j) {return temp[i] - temp[j] > 0;});\n    std::sort(res.end() - 1, res.end(),\
    \ [&temp](int i, int j) {return temp[i] - temp[j] > 0;});\n    return res;", " \
    \   int s = 0, l = 0;\n    int n = array.size();\n    for (int i = 0; i < n; i++)\
    \ {\n        s += array[i];\n        if (s > l || (s == l && array[i] % 2 != 0))\
    \ {\n            l++;\n            long temp = array[i];\n            array[i]\
    \ = array[n-1];\n            array[n-1] = temp;\n        }\n    }\n    return\
    \ array;", "    long sum = 0;\n    for (auto val : array) {\n        sum += val;\n\
    \    }\n    std::vector<long> arr;\n    for (auto val : array) {\n        arr.push_back((val\
    \ < 0) ? -val : val);\n    }\n    std::sort(arr.begin(), arr.end());\n    std::vector<long>\
    \ result;\n    for (int i = arr.size() - 1; i >= 0; i--) {\n        result.push_back(arr[i]);\n\
    \    }\n    if (sum % 2 == 0) {\n        return result;\n    } else {\n      \
    \  result.insert(result.end(), arr.begin(), arr.end());\n        return result;\n\
    \    }", "    // write your code here\n    int sum = 0;\n    for (int i = 0; i\
    \ < array.size() - 1; i++) {\n        sum += array[i];\n    }\n    if (sum % 2\
    \ != 0) {\n        std::sort(array.begin(), array.end());\n    }\n    else {\n\
    \        std::sort(array.rbegin(), array.rend());\n    }\n    return array;",
  "    long long sum = 0;\n    for (long long i = 0; i < array.size(); i++) {\n  \
    \      sum += array[i];\n    }\n    if (sum % 2 != 0) {\n        std::sort(array.begin(),\
    \ array.end(), [](long long a, long long b) {\n            return b < a;\n   \
    \     });\n    } else {\n        std::sort(array.begin(), array.end(), [](long\
    \ long a, long long b) {\n            return b > a;\n        });\n    }\n    return\
    \ array;", "    int n = array.size();\n    std::sort(array.begin(), array.end());\n\
    \    if (n % 2 != 0) {\n        return array;\n    }\n    int m = n / 2;\n   \
    \ for (int i = 0; i < m; i++) {\n        long j = i;\n        long tmp = array[i];\n\
    \        while (j > 0 && array[j - 1] > tmp) {\n            array[j] = array[j\
    \ - 1];\n            j--;\n        }\n        array[j] = tmp;\n    }\n    return\
    \ array;", "  std::sort(array.begin(), array.end());\n  return array;", "  //\
    \ write your code here\n  if (array.size() == 0)\n    return array;\n  int last_index\
    \ = array.size() - 1;\n  int first_index = 0;\n  int sum = 0;\n  for (int i =\
    \ 0; i < array.size(); i++) {\n    sum += array[i];\n    if (sum % 2 != 0) {\n\
    \      std::swap(array[last_index], array[first_index]);\n      sum -= array[last_index];\n\
    \    }\n    if (sum % 2 != 0)\n      std::swap(array[last_index], array[first_index]);\n\
    \    first_index++;\n    last_index--;\n  }\n  return array;", "    long sum =\
    \ 0;\n    for (long i : array) {\n        sum += i;\n    }\n    if (sum % 2 !=\
    \ 0) {\n        // sort in ascending order\n        for (long i : array) {\n \
    \           std::swap(array[i], array[sum - i]);\n        }\n    }\n    else {\n\
    \        // sort in descending order\n        for (long i : array) {\n       \
    \     std::swap(array[i], array[i + sum]);\n        }\n    }\n    return array;",
  "    long long temp;\n    long long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 != 0) {\n        temp\
    \ = array[array.size()-1];\n        array.pop_back();\n        array.push_back(temp);\n\
    \    }\n    long long k = 0;\n    long long i = 0;\n    long long j = 0;\n   \
    \ long long ans = 0;\n    for (long k = array.size() - 1; k > 0; k--) {\n    \
    \    for (; i < k; i++) {\n            sum = sum + array[i];\n        }\n    \
    \    for (; j < k; j++) {\n            sum = sum + array[j];\n        }\n    \
    \    if (sum % 2 != 0) {\n            temp = array[j];\n            array[j] =\
    \ array[i];\n            array[i] = temp;\n        }\n        ans = array[k];\n\
    \        sum = sum - array[k];\n    }\n    return array;", "    int first = 0;\n\
    \    int last = array.size() - 1;\n    int sum = 0;\n    while (first <= last)\
    \ {\n        sum = array[first] + array[last];\n        if (sum % 2 == 0) {\n\
    \            array.push_back(array[first]);\n            first++;\n        } else\
    \ {\n            array.push_back(array[last]);\n            last--;\n        }\n\
    \    }\n    return array;", "    // Your code here\n    std::vector<long> v;\n\
    \    long sum = 0;\n    long max = array[0];\n    for(int i = 0; i <array.size();\
    \ i++){\n        sum += array[i];\n        if (sum % 2 == 1)\n            max\
    \ = array[i];\n        v.push_back(max);\n    }\n    return v;", "    // write\
    \ your code here\n    return array;", "    // Your code here\n    std::vector<long>\
    \ new_array;\n    new_array.reserve(array.size());\n    for (int i = 0; i < array.size();\
    \ i++) {\n        if (array[i] % 2 == 1) {\n            new_array.push_back(array[i]);\n\
    \        } else {\n            int j = (array[i] - 1) / 2;\n            new_array.push_back(array[i]);\n\
    \            new_array.push_back(array[j]);\n        }\n    }\n    return new_array;",
  "    // code here\n    std::vector<long> temp;\n    long sum=0;\n    int n=array.size();\n\
    \    for(int i=0;i<n;i++){\n        sum+=array[i];\n        temp.push_back(sum);\n\
    \    }\n    std::sort(temp.begin(),temp.end());\n    std::vector<long> result(array.size());\n\
    \    for(int i=0;i<n;i++){\n        for(int j=i;j<n;j++){\n            if(temp[i]>=temp[j]){\n\
    \                result[j]=array[i];\n                break;\n            }\n\
    \        }\n    }\n    return result;", "    std::vector<long> newarray;\n   \
    \ for (size_t i = 0; i < array.size(); i++) {\n        newarray.push_back(array[i]);\n\
    \    }\n    sort(newarray.begin(), newarray.end());\n    return newarray;", " \
    \   std::sort(array.begin(), array.end(), [] (long a, long b) { return a < b;\
    \ });\n\n    std::vector<long> result;\n    int sumA = 0, sumB = 0;\n    for (long\
    \ i : array)\n    {\n        sumA += i;\n        sumB += i + 1;\n    }\n    if\
    \ (sumA % 2)\n    {\n        for (long i : array)\n        {\n            if (i\
    \ > 0)\n            {\n                result.push_back(i - 1);\n            }\n\
    \        }\n    }\n    else\n    {\n        for (long i : array)\n        {\n\
    \            if (i < sumB)\n            {\n                result.push_back(i\
    \ + 1);\n            }\n        }\n    }\n    return result;", "    int sum =\
    \ 0;\n    for (auto e : array) {\n        sum += e;\n    }\n    // sort the given\
    \ array in ascending order if the sum( first index value, last index value) is\
    \ odd,\n    // or sort it in descending order if the sum( first index value, last\
    \ index value) is even.\n    if (sum & 1) {\n        return std::sort(array.begin(),\
    \ array.end());\n    } else {\n        return std::sort(array.rbegin(), array.rend());\n\
    \    }", "    // Write your code here\n    std::vector<long> ret;\n    long first\
    \ = 0, last = array.size() - 1, cur = array[0];\n    while (first < last) {\n\
    \        while (cur + array[first] <= cur + array[last]) ++first;\n        while\
    \ (cur + array[last] >= cur + array[first]) --last;\n        ret.emplace_back(cur\
    \ + array[first]);\n        while (first < last) ++first;\n        while (last\
    \ > first) --last;\n    }\n    if (cur + array[last] >= cur + array[first]) {\n\
    \        ret.emplace_back(cur + array[last]);\n        while last > first) {\n\
    \            --last;\n            ret.emplace_back(cur + array[last]);\n     \
    \   }\n    } else {\n        ret.emplace_back(cur + array[first]);\n        while\
    \ (first < last) {\n            ++first;\n            ret.emplace_back(cur + array[first]);\n\
    \        }\n    }\n    return ret;", "    std::vector<long> copy;\n    long sum\
    \ = 0;\n    for (int i = 0; i < array.size(); i++) {\n        sum = sum + array[i];\n\
    \    }\n    long n = sum;\n    if (n % 2 == 1) {\n        std::reverse(copy.begin(),\
    \ copy.end());\n    }\n    if (sum < 0) {\n        std::reverse(&copy[0], &copy[copy.size()\
    \ - 1]);\n    }\n    return copy;", "    assert(array.size() != 0);\n    std::vector<long>\
    \ new_array(array.size());\n    long sum_first = 0, sum_last = 0, sum_sum = 0;\n\
    \    int len_array = array.size();\n\n    for (int i = 0; i < len_array; i++)\
    \ {\n        sum_first += array[i];\n    }\n    sum_last = sum_first;\n    for\
    \ (int i = len_array - 1; i >= 0; i--) {\n        sum_sum += array[i];\n     \
    \   if (sum_sum % 2 == 0) {\n            new_array[i] = sum_last;\n          \
    \  sum_last += array[i];\n        } else {\n            new_array[i] = sum_first;\n\
    \            sum_first -= array[i];\n        }\n    }\n    return new_array;",
  "    std::vector<long> result;\n    // TODO: implement the function here\n    for\
    \ (int i = 0; i < array.size(); i++) {\n        for (int j = i + 1; j < array.size();\
    \ j++) {\n            long sum = array[j] + array[i];\n            if (sum % 2\
    \ == 0) {\n                result.push_back(array[j]);\n                result.push_back(array[i]);\n\
    \                array.erase(array.begin() + j);\n                array.erase(array.begin()\
    \ + i);\n            }\n            if (sum % 2 != 0) {\n                result.push_back(array[j]);\n\
    \                result.push_back(array[i]);\n                array.erase(array.begin()\
    \ + j);\n                array.erase(array.begin() + i);\n            }\n    \
    \    }\n    }\n    return result;", "    std::vector<long> sorted_array;\n   \
    \ for (long i: array) {\n        long sum = i;\n        for (long j = 1; j < array.size();\
    \ j++) {\n            sum += array[j];\n            assert(sum >= 0);\n      \
    \  }\n        if (sum % 2 == 0) {\n            sorted_array.push_back(i);\n  \
    \      } else {\n            sorted_array.push_back(array[array.size() - i - 1]);\n\
    \        }\n    }\n    return sorted_array;", "    std::vector<long> result(array.size());\n\
    \    long sum = 0;\n    for (size_t i = 0; i < array.size(); i++) {\n        result[i]\
    \ = array[i];\n        sum += array[i];\n    }\n    if (sum % 2 != 0) {\n    \
    \    // descending sort\n        for (size_t i = 0; i < array.size(); i++) {\n\
    \            int min = i;\n            for (size_t j = i; j < array.size(); j++)\
    \ {\n                sum += array[j];\n                if (sum < array[j]) {\n\
    \                    min = j;\n                }\n            }\n            result[min]\
    \ = array[i];\n        }\n    } else {\n        // ascending sort\n        for\
    \ (size_t i = 0; i < array.size(); i++) {\n            int min = i;\n        \
    \    for (size_t j = i; j < array.size(); j++) {\n                sum += array[j];\n\
    \                if (sum < array[j]) {\n                    min = j;\n       \
    \         }\n            }\n            result[min] = array[i];\n        }\n \
    \   }\n    return result;", "    // Your code here\n    for (long i=0;i<array.size();i++)\
    \ {\n        long x=array[i];\n        long sum=0;\n        for (long j=i+1;j<array.size();j++)\
    \ {\n            sum+=array[j];\n        }\n        if (sum%2==1) {\n        \
    \    std::swap(x,array[i]);\n        }\n    }\n    return array;", "    std::vector<long>\
    \ res(array.size());\n    long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum = sum + array[i];\n        res[i] = array[i];\n    }\n \
    \   if (sum % 2 != 0) {\n        std::sort(res.begin(), res.end());\n        return\
    \ res;\n    }\n    else {\n        std::sort(res.rbegin(), res.rend());\n    \
    \    return res;\n    }", "    // write your code here\n    long sum = 0;\n  \
    \  for (int i = 0; i < array.size(); i++)\n        sum += array[i];\n    std::sort(array.begin(),\
    \ array.end());\n    if (sum % 2 == 1)\n        std::reverse(array.begin(), array.end());\n\
    \    return array;", "  // Do not write main() function.\n  // Do not read input,\
    \ instead use the arguments to the function.\n  // Do not print the output, instead\
    \ return values as specified\n  // Sort first and second index value by checking\
    \ odd/even sum\n  // If sum is odd then sort by decreasing order of second index\
    \ value\n  // If sum is even then sort by increasing order of first index value\n\
    \  std::sort(array.begin(), array.end(), [](long l, long r) {\n    return l +\
    \ r < 2 * l;\n  });\n  long long sum = 0;\n  for (long i : array) {\n    sum +=\
    \ i;\n  }\n  if (sum % 2 != 0) {\n    std::sort(array.begin(), array.end(), [](long\
    \ l, long r) {\n      return r - l;\n    });\n  } else {\n    std::sort(array.begin(),\
    \ array.end(), [](long l, long r) {\n      return l - r;\n    });\n  }\n  return\
    \ array;", "    int n = array.size();\n    if (n <= 0) return array;\n    // find\
    \ the max and min sum\n    long min = array[0];\n    long max = array[0];\n  \
    \  for (int i = 0; i < n; i++)\n    {\n        if (array[i] < min) min = array[i];\n\
    \        if (array[i] > max) max = array[i];\n    }\n    int m = n + 1;\n    if\
    \ (max % 2 != 0)\n        m++;\n    if (min == max) return array;\n    std::vector<long>\
    \ res(m);\n    long curSum = 0;\n    int pos = 0;\n    bool flag = false;\n  \
    \  for (int i = 0; i < n; i++)\n    {\n        curSum += array[i];\n        res[pos++]\
    \ = curSum;\n        if (curSum > max) flag = true;\n        if (curSum < min)\
    \ flag = false;\n    }\n    if (flag) std::swap(res[0], res[m-1]);\n    std::vector<long>\
    \ res2(pos);\n    int j = 0;\n    for (int i = 0; i < pos; i++)\n        res2[i]\
    \ = array[j++];\n    return res2;", "    std::vector<long> result;\n    long total\
    \ = 0, currSum = 0;\n    for (int i = 1; i < array.size(); i++) {\n        total\
    \ += array[i];\n    }\n\n    for (int i = 0; i < array.size(); i++) {\n      \
    \  currSum = total - array[i - 1];\n        if (currSum % 2 == 1) {\n        \
    \    result.push_back(array[i]);\n        } else {\n            result.push_back(array[i\
    \ - 1]);\n        }\n        total = currSum;\n    }\n    return result;", " \
    \   if (array.empty())\n        return array;\n\n    std::vector<long> res;\n\
    \    res.push_back(array[0]);\n    long sum = 0;\n    for (long i : array)\n \
    \       sum += i;\n    if (sum % 2 == 1)\n        std::sort(res.begin() + 1, res.end());\n\
    \    else\n        std::sort(res.begin(), res.end());\n    return res;", "   \
    \ // Your code here\n    if(array.size() == 0){\n        return array;\n    }\n\
    \    long sum = array[0];\n    long temp = 0;\n    for (long i = 1; i < array.size();\
    \ i++){\n        temp = sum;\n        sum += array[i];\n        if(sum%2 == 1){\n\
    \            std::vector<long> newArray(array);\n            newArray[i] = temp;\n\
    \            return newArray;\n        }\n    }\n    return array;", "    std::vector<long>\
    \ result;\n    long sum = 0;\n    for (long x : array)\n        sum += x;\n\n\
    \    long halfSum = sum / 2;\n    if (sum % 2 == 1)\n        halfSum++;\n    for\
    \ (long x : array) {\n        result.push_back(x);\n        result.push_back(x\
    \ - halfSum);\n    }\n    std::sort(result.begin(), result.end());\n    return\
    \ result;", "  std::sort(array.begin(), array.end());\n  return array;", "   \
    \ int n = array.size();\n    assert(n % 2 == 0);\n    int sum = 0;\n    for (int\
    \ i = 0; i < n; i++)\n    {\n        sum += array[i];\n    }\n    if (sum % 2\
    \ == 0)\n    {\n        std::sort(array.begin(), array.end());\n        return\
    \ array;\n    }\n    else\n    {\n        std::sort(array.rbegin(), array.rend());\n\
    \        return array;\n    }", "    // your code goes here\n    std::sort(array.begin(),\
    \ array.end());\n    for (long i : array) {\n        if (i % 2 != 0) {\n     \
    \       long temp = array[array.size() - 1];\n            array.pop_back();\n\
    \            array.push_back(temp);\n        }\n    }\n    return array;", " \
    \   // Your code here\n    long long sum = 0;\n    for (long long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    bool result = false;\n    if (sum\
    \ % 2 != 0) {\n        result = true;\n    }\n    long long size = 0;\n    for\
    \ (int i = 0; i < array.size(); i++) {\n        size += array[i];\n    }\n   \
    \ std::sort(array.begin(), array.begin() + size);\n    if (result) {\n       \
    \ return array;\n    } else {\n        std::reverse(array.begin(), array.end());\n\
    \        return array;\n    }", "    int n = array.size();\n    std::vector<long>\
    \ ans;\n    long sum = 0;\n    long first = 1;\n    long last = 0;\n    // Calculate\
    \ the sum of all numbers in the array.\n    for (long i = 0; i < n; i++) {\n \
    \       sum += array[i];\n    }\n    // If sum is even, sort it in ascending order.\n\
    \    if (sum % 2 == 0) {\n        for (long i = 0; i < n; i++) {\n           \
    \ sum += array[i];\n            if (sum % 2 == 1) {\n                last = i;\n\
    \                break;\n            }\n        }\n        for (long i = first;\
    \ i <= last; i++) {\n            ans.push_back(array[i]);\n        }\n    } else\
    \ {\n        // Sum must be odd, so sort it in descending order.\n        for\
    \ (long i = first; i <= last; i++) {\n            sum += array[i];\n         \
    \   if (sum % 2 == 0) {\n                last = i;\n                break;\n \
    \           }\n        }\n        for (long i = first; i <= last; i++) {\n   \
    \         ans.push_back(array[i]);\n        }\n    }\n    return ans;", "\tstd::vector<long>\
    \ arr(array);\n\tlong sum = arr[0] + arr[arr.size()-1];\n\tif(sum % 2 == 0) {\n\
    \t\tsort(arr.begin(), arr.end());\n\t\treturn arr;\n\t} else {\n\t\treverse(arr.begin(),\
    \ arr.end());\n\t\treturn arr;\n\t}", "\tassert(array.size() >= 1);\n\tstd::vector<long>\
    \ retval;\n\t// sort\n\tauto it1 = array.begin();\n\tauto it2 = array.end();\n\
    \tlong currsum = 0;\n\tif (it2 > it1){\n\t\tstd::iter_swap(it1, it2);\n\t\tit1\
    \ += 1;\n\t\tit2 -= 1;\n\t}\n\twhile (it1 != it2) {\n\t\tlong add = *it1++;\n\t\
    \tcurrsum += add;\n\t\tretval.push_back(currsum);\n\t\tcurrsum -= add;\n\t}\n\t\
    // sort\n\tauto it1 = retval.begin();\n\tauto it2 = retval.end();\n\tlong currsum\
    \ = 0;\n\tif (it2 > it1){\n\t\tstd::iter_swap(it1, it2);\n\t\tit1 += 1;\n\t\t\
    it2 -= 1;\n\t}\n\twhile (it1 != it2) {\n\t\tlong add = *it1++;\n\t\tcurrsum +=\
    \ add;\n\t\tretval.push_back(currsum);\n\t\tcurrsum -= add;\n\t}\n\treturn retval;",
  "    // Your code goes here\n    long long sum=0;\n    for(int i=0;i<array.size();i++)\n\
    \    {\n        sum+=array[i];\n    }\n    if(sum%2==0)\n    {\n        sort(array.begin(),array.end());\n\
    \    }\n    else\n    {\n        std::reverse(array.begin(),array.end());\n  \
    \  }\n    return array;", "    // Your code here\n    long s = 0;\n    int n =\
    \ array.size();\n    long max_num = 0;\n    long min_num = 0;\n    long sum =\
    \ 0;\n    for (long i = 0; i < n; i++) {\n        sum = array[i] + s[i];\n   \
    \     if (sum % 2 != 0) {\n            std::swap(array[i], array[i]);\n      \
    \  }\n        sum += array[i];\n        if (sum > max_num) {\n            max_num\
    \ = sum;\n        } else if (sum < min_num) {\n            min_num = sum;\n  \
    \      }\n    }\n    std::vector<long> sorted_array;\n    for (int i = 0; i <\
    \ n; i++) {\n        if (array[i] >= min_num && array[i] <= max_num) {\n     \
    \       sorted_array.push_back(array[i]);\n        }\n    }\n    return sorted_array;",
  "    // Your code here\n    int temp = 0;\n    std::vector<long> new_array;\n  \
    \  for (int i = 0; i < array.size() - 1; i++) {\n        temp += array[i];\n \
    \       if (temp % 2 == 1)\n            new_array.push_back(temp);\n        else\
    \ {\n            new_array.push_back(-temp);\n        }\n    }\n    return new_array;",
  "\tint sum = (array[0] + array[array.size() - 1]);\n\tint evenSum = 0;\n\tint oddSum\
    \ = 0;\n\tint count = 0;\n\tint position = 0;\n\tstd::vector<long> result;\n\t\
    std::vector<long> temp;\n\twhile (true) {\n\t\tcount++;\n\t\tif (count > array.size())\
    \ {\n\t\t\tbreak;\n\t\t}\n\t\tif (sum % 2 == 0) {\n\t\t\tevenSum += array[count];\n\
    \t\t} else {\n\t\t\toddSum += array[count];\n\t\t}\n\t\tposition++;\n\t\tif (position\
    \ == array.size()) {\n\t\t\tresult.push_back(evenSum);\n\t\t\tresult.push_back(oddSum);\n\
    \t\t\tresult.push_back(array[count]);\n\t\t\tposition = 0;\n\t\t\toddSum = 0;\n\
    \t\t\tevenSum = 0;\n\t\t\tcount = 0;\n\t\t}\n\t}\n\treturn result;", "    std::vector<long>\
    \ res(array.begin(), array.end());\n    long s = 0;\n    for (long &val : res)\
    \ s += val;\n    std::vector<long> reverse;\n    for (long &val : res)\n     \
    \   reverse.push_back(val);\n    reverse.push_back(s);\n    sort(reverse.begin(),\
    \ reverse.end());\n    std::reverse(array.begin(), array.end());\n    std::reverse(array.begin(),\
    \ array.end());\n    return std::move(res);", "    long long sum = accumulate(array.begin(),\
    \ array.end(), 0ll);\n    if (sum % 2 == 0)\n        std::sort(array.begin(),\
    \ array.end());\n    else\n        std::sort(array.rbegin(), array.rend());\n\
    \    return array;", "    // your code here\n    long sum = 0;\n    for (auto\
    \ i: array) {\n        sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end(), [](long i1, long i2) -> bool {\n            return i1 > i2;\n \
    \       });\n    }\n    else {\n        std::sort(array.begin(), array.end(),\
    \ [](long i1, long i2) -> bool {\n            return i1 < i2;\n        });\n \
    \   }\n    return array;", "    // Your code goes here\n    long long total =\
    \ 0;\n    for (long i : array) {\n        total += i;\n    }\n    long long sum\
    \ = 0;\n    for (long i : array) {\n        sum += i;\n    }\n    if (total %\
    \ 2 == 0) {\n        for (long i : array) {\n            if (sum - i >= 0) {\n\
    \                auto index = array.begin() + i;\n                auto j = array.begin()\
    \ + i;\n                std::iter_swap(index, j);\n            }\n        }\n\
    \    } else {\n        for (long i : array) {\n            if (sum + i < 0) {\n\
    \                auto index = array.begin() + i;\n                auto j = array.begin()\
    \ + i;\n                std::iter_swap(index, j);\n            }\n        }\n\
    \    }\n    return array;", "    std::vector<long> ans;\n    long sum=0;\n   \
    \ long max=0;\n    long min=array[0];\n    for (long i : array)\n    {\n     \
    \   sum+=i;\n        if(sum>max) max=sum;\n        if(sum<min) min=sum;\n    }\n\
    \n    if(sum%2==0)\n    {\n        std::vector<long> res(array.size());\n    \
    \    for (int i=0; i<array.size(); i++)\n        {\n            res[i] = array[i]\
    \ - min;\n        }\n        std::sort(res.begin(), res.end());\n        for (auto\
    \ i : res)\n        {\n            ans.push_back(i);\n        }\n    }\n    else\n\
    \    {\n        std::vector<long> res(array.size());\n        for (int i=0; i<array.size();\
    \ i++)\n        {\n            res[i] = array[i] - max;\n        }\n        std::sort(res.begin(),\
    \ res.end());\n        for (auto i : res)\n        {\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;", "    long long res = 0;\n    for (long long\
    \ i : array)\n        res += i;\n    long long div = static_cast<long long>(sqrt(res));\n\
    \    while (div > 0) {\n        for (long long i : array)\n            div -=\
    \ (i % div == 0 ? div : (i % div));\n        for (long long i : array)\n     \
    \       while (i && i % div == 0)\n                i /= div;\n        array.erase(std::unique(array.begin(),\
    \ array.end(), [](long long n1, long long n2) { return n1 < n2; }), array.end());\n\
    \    }\n    return array;", "    int n = array.size();\n    // If the sum of first\
    \ two element is odd, then sort the array in ascending order,\n    // otherwise,\
    \ sort the array in descending order.\n    if (n % 2 == 1) {\n        std::vector<long>\
    \ result;\n        for (int i = 0; i < n / 2; i++) {\n            result.emplace_back(array[i]);\n\
    \        }\n        std::sort(result.begin(), result.end());\n        return result;\n\
    \    } else {\n        std::vector<long> result;\n        for (int i = 0; i <\
    \ n / 2; i++) {\n            result.emplace_back(array[n - 1 - i]);\n        }\n\
    \        std::sort(result.begin(), result.end());\n        return result;\n  \
    \  }", "    long s = 0;\n    for (const auto &e : array) {\n        s += e;\n\
    \    }\n    std::vector<long> ans;\n    std::sort(array.begin(), array.end(),\
    \ [](long a, long b){return a<b;});\n    if (s % 2 == 0) {\n        std::reverse(array.begin(),\
    \ array.end());\n    }\n    ans.insert(ans.end(), array.begin(), array.end());\n\
    \    return ans;", "    // write your code in C/C++17 (if your compiler is GCC)\n\
    \    // auto sum = array.size();\n    auto sum = array.size() + array[0];\n  \
    \  auto temp;\n    auto i = 0;\n    auto j = 0;\n    long tempSum = 0;\n    std::vector<long>\
    \ newArray;\n    long maxTemp = array[0];\n    long minTemp = array[0];\n    //\
    \ newArray.push_back(array[0]);\n    while (i + 1 < array.size()) {\n        if\
    \ (sum % 2 == 0) {\n            if (array[i] > array[i + 1]) {\n             \
    \   temp = array[i];\n                array[i] = array[i + 1];\n             \
    \   array[i + 1] = temp;\n            }\n            sum += array[i + 1];\n  \
    \          temp = array[i + 1];\n            array[i + 1] = array[i];\n      \
    \      array[i] = temp;\n        }\n        else {\n            if (array[i] <\
    \ array[i + 1]) {\n                temp = array[i];\n                array[i]\
    \ = array[i + 1];\n                array[i + 1] = temp;\n            }\n     \
    \       sum += array[i + 1];\n            temp = array[i + 1];\n            array[i\
    \ + 1] = array[i];\n            array[i] = temp;\n        }\n        i++;\n  \
    \  }\n    if (sum % 2 != 0) {\n        if (array[i] > array[i + 1]) {\n      \
    \      temp = array[i];\n            array[i] = array[i + 1];\n            array[i\
    \ + 1] = temp;\n        }\n        sum += array[i + 1];\n        temp = array[i\
    \ + 1];\n        array[i + 1] = array[i];\n        array[i] = temp;\n    }\n \
    \   newArray.push_back(array[i]);\n    while (j < array.size() - 1) {\n      \
    \  if (array[j] > maxTemp) {\n            maxTemp = array[j];\n        }\n   \
    \     if (array[j] < minTemp) {\n            minTemp = array[j];\n        }\n\
    \        temp = array[j];\n        array[j] = array[j + 1];\n        array[j +\
    \ 1] = temp;\n        j++;\n    }\n    // newArray.push_back(array[j]);\n    newArray.push_back(array[j]);\n\
    \    long left = maxTemp - minTemp;\n    int left1 = 0;\n    int left2 = 0;\n\
    \    while (j - 1 >= 0) {\n        if (array[j] < minTemp) {\n            minTemp\
    \ = array[j];\n        }\n        if (array[j] > maxTemp) {\n            maxTemp\
    \ = array[j];\n        }\n        left1 = minTemp - maxTemp;\n        temp = array[j];\n\
    \        array[j] = array[j + 1];\n        array[j + 1] = temp;\n        j--;\n\
    \    }\n    while (j + 1 < array.size()) {\n        if (array[j] > maxTemp) {\n\
    \            maxTemp = array[j];\n        }\n        if (array[j] < minTemp) {\n\
    \            minTemp = array[j];\n        }\n        left2 = maxTemp - minTemp",
  "  int size = array.size();\n  std::sort(array.begin(), array.end(), [](const long\
    \ & a, const long & b) {\n    return a - b;\n  });\n  if (array[size - 1] + array[size]\
    \ % 2 != 0) {\n    std::sort(array.begin(), array.end(), [](const long & a, const\
    \ long & b) {\n      return b - a;\n    });\n  }\n  return array;", "    // write\
    \ your code in C++11\n    int sum = 0;\n    for (int i = array.size() - 1; i >=\
    \ 0; i--) {\n        sum += array[i];\n    }\n\n    if (sum % 2 == 1) {\n    \
    \    return std::move(array);\n    }\n    std::reverse(array.begin(), array.end());\n\
    \    return array;", "    // write your code in here\n    int odd = 0, even =\
    \ 0;\n    long sum = 0;\n    std::vector<long> sorted;\n    for (long i = 0; i\
    \ < array.size(); i++) {\n        sum += array[i];\n        if (sum % 2 == 0)\
    \ {\n            even++;\n            sorted.push_back(array[i]);\n        } else\
    \ {\n            odd++;\n            sorted.rbegin()->push(array[i]);\n      \
    \  }\n    }\n    if (odd == 0) {\n        return sorted;\n    }\n    if (even\
    \ == 0) {\n        return sorted;\n    }\n    if (sum > 0) {\n        sorted.push_back(sum);\n\
    \    }\n    long largest = sorted.rbegin()->back();\n    for (long i : sorted)\
    \ {\n        if (i > largest) {\n            largest = i;\n        }\n    }\n\
    \    sorted.resize(sorted.size() - 1);\n    sorted.push_back(largest);\n    return\
    \ sorted;", "  long sum = 0;\n  for (auto const &i : array) {\n    sum += i;\n\
    \  }\n  auto start = std::begin(array);\n  auto end = std::end(array);\n  if (sum\
    \ % 2 == 1) {\n    std::sort(std::begin(array), std::end(array), [](const auto\
    \ &i, const auto &j) {\n      return i > j;\n    });\n  } else {\n    std::sort(std::begin(array),\
    \ std::end(array), [](const auto &i, const auto &j) {\n      return i < j;\n \
    \   });\n  }\n  return std::vector<long>(start, std::end(array));", "    long\
    \ sum = 0;\n    long first = 0;\n    long last = array.size() - 1;\n    while\
    \ (first <= last) {\n        sum = array[first] + array[last];\n        if (sum\
    \ % 2 != 0)\n            std::swap(array[first], array[last]);\n        first++;\n\
    \        last--;\n    }\n    return array;", "    // Your code here\n    long\
    \ sum = 0;\n    long long sumOfFirst = 0;\n    long long sumOfLast = 0;\n\n  \
    \  for (long i = 0; i < array.size(); i++) {\n        sum += array[i];\n     \
    \   sumOfFirst += array[i];\n        sumOfLast += array[i];\n    }\n\n    if (sumOfFirst\
    \ % 2 != 0) {\n        std::swap(sumOfFirst, sumOfLast);\n    }\n\n    if (sumOfLast\
    \ % 2 != 0) {\n        std::swap(sumOfFirst, sumOfLast);\n    }\n\n    std::vector<long>\
    \ res(array.size());\n\n    for (long i = 0; i < array.size(); i++) {\n      \
    \  long temp = array[i];\n        res[i] = temp;\n    }\n\n    long long maxIndex\
    \ = sumOfLast - sumOfFirst;\n    long long minIndex = sumOfFirst - sumOfLast;\n\
    \n    long long index = 0;\n    long long temp = 0;\n\n    for (long i = 1; i\
    \ < res.size(); i++) {\n        temp = res[i] - res[i - 1];\n        if (temp\
    \ > 0) {\n            index = 0;\n        }\n        if (temp < 0) {\n       \
    \     index = 1;\n        }\n        if (index == 0) {\n            res[i] = res[i\
    \ - 1];\n        }\n        if (index == 1) {\n            res[i] = res[i - 1];\n\
    \        }\n\n    }\n\n    long long index2 = 0;\n    long long temp2 = 0;\n\n\
    \    for (long i = 1; i < res.size(); i++) {\n        temp2 = res[i] - res[i -\
    \ 1];\n        if (temp2 > 0) {\n            index2 = 0;\n        }\n        if\
    \ (temp2 < 0) {\n            index2 = 1;\n        }\n        if (index2 == 0)\
    \ {\n            res[i] = res[i - 1];\n        }\n        if (index2 == 1) {\n\
    \            res[i] = res[i - 1];\n        }\n\n    }\n\n    for (long i = 1;\
    \ i < res.size(); i++) {\n        res[i] = res[i - 1];\n    }\n\n    return res;",
  "  // write your code here\n  long long sum = 0;\n  for (int i = 0; i < array.size();\
    \ i++) {\n    sum += array[i];\n  }\n  long long flag = 0;\n  if (sum % 2 != 0)\
    \ {\n    flag = 1;\n    sum = -sum;\n  }\n  std::vector<long> res;\n  for (int\
    \ i = 0; i < array.size(); i++) {\n    long long curSum = sum - array[i];\n  \
    \  if (flag == 1) {\n      res.push_back(curSum);\n    } else {\n      res.push_back(-curSum);\n\
    \    }\n  }\n  return res;", "  std::vector<long> ans;\n  long sum = std::accumulate(array.cbegin(),\
    \ array.cend(), 0);\n  if (sum % 2 == 0) {\n    ans.assign(array.begin(), array.end());\n\
    \    std::sort(ans.begin(), ans.end());\n  } else {\n    std::reverse(array.begin(),\
    \ array.end());\n    ans.assign(array.begin(), array.end());\n    std::sort(ans.begin(),\
    \ ans.end());\n  }\n  return ans;", "    // Your code goes here\n    std::sort(array.begin(),\
    \ array.end());\n    long long n = array.size();\n    long long sum1 = 0, sum2\
    \ = 0;\n    for (long long i = 0; i < n - 1; i++) {\n        sum1 += array[i];\n\
    \        sum2 += array[i + 1];\n        if (sum1 % 2 == 0 && sum2 % 2 == 0) {\n\
    \            array.insert(array.begin() + i, array[i - 1]);\n        }\n    }\n\
    \    return array;", "    for (long i = 0; i < array.size(); i++) {\n        int\
    \ sum = 0;\n        int min = i;\n        for (int j = i + 1; j < array.size();\
    \ j++) {\n            sum += array[j];\n            if (sum < array[j]) {\n  \
    \              min = j;\n            }\n        }\n\n        if (sum % 2 == 0\
    \ && sum < array[min]) {\n            std::swap(array[i], array[min]);\n     \
    \   }\n    }\n\n    return array;", "    // code here\n    long long sum = 0;\n\
    \    long long max_sum = 0;\n    for (int i = 0; i < array.size(); i++) {\n  \
    \      sum += array[i];\n        if (sum > max_sum) {\n            max_sum = sum;\n\
    \        }\n    }\n    if (max_sum % 2 != 0) {\n        max_sum = max_sum + max_sum\
    \ % 2;\n    }\n    std::vector<long> result;\n    for (int i = 0; i < array.size();\
    \ i++) {\n        long long value = array[i];\n        long long pos = value -\
    \ max_sum;\n        while (pos >= 0) {\n            result.push_back(value);\n\
    \            pos = pos - max_sum;\n        }\n    }\n    return result;", "\t\
    long long sum = 0;\n\tstd::vector<long> arr;\n\tfor (long i = 0; i < array.size();\
    \ i++) {\n\t\tsum += array[i];\n\t\tarr.push_back(array[i]);\n\t}\n\tif (sum %\
    \ 2 == 0) {\n\t\tstd::sort(arr.begin(), arr.end());\n\t} else {\n\t\tstd::sort(arr.rbegin(),\
    \ arr.rend());\n\t}\n\treturn arr;", "    std::vector<long> res(array.size());\n\
    \    // Sort the array in ascending order\n    std::sort(array.begin(), array.end());\n\
    \    // Find first and last index of sorted array\n    long mid = array.size()\
    \ / 2;\n    long left = array[mid];\n    long right = array[mid + 1];\n    if\
    \ (right > left) {\n        if (right % 2 == 1) {\n            return sort_array(array);\n\
    \        } else {\n            while (right > left) {\n                res[mid\
    \ + 1]++;\n                right -= 2;\n            }\n            while (right\
    \ > left) {\n                res[mid - 1]++;\n                right -= 2;\n  \
    \          }\n        }\n    }\n    return res;", "    // Write your code here\n\
    \    long long sum = array.back() + array[array.size()-1];\n    if (sum % 2 ==\
    \ 0) {\n        std::sort(array.begin(),array.end());\n    } else {\n        std::sort(array.rbegin(),array.rend());\n\
    \    }\n    return array;", "    // code here\n    long sum = 0;\n    for (auto\
    \ &i : array)\n        sum += i;\n    if (sum % 2 == 1)\n        std::sort(array.begin(),\
    \ array.end());\n    else\n        std::sort(array.rbegin(), array.rend());\n\
    \    return array;", "    long long sum = 0;\n    for (long long i : array) {\n\
    \        sum += i;\n    }\n    if (sum % 2 != 0) {\n        std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n    } else {\n        std::sort(array.begin(),\
    \ array.end(), std::less<long>());\n    }\n    return array;", "    std::vector<long>\
    \ res(array.size());\n    std::iota(begin(res), end(res), 0);\n    std::sort(begin(res),\
    \ end(res), [] (const long& i1, const long& i2) {\n        return ((i1%2) == (i2%2));\n\
    \    });\n    return res;", "    // Write your code here\n    int n = array.size();\n\
    \    long sum = 0;\n    int mid;\n    for(int i=0;i<n;i++)\n    {\n        sum\
    \ = sum + array[i];\n    }\n    if(sum%2 == 0)\n    {\n        std::sort(array.begin(),array.end());\n\
    \    }\n    else\n    {\n        std::sort(array.begin(),array.end(), std::greater<int>());\n\
    \    }\n    std::vector<long> results;\n    for(int i=0;i<n;i++)\n    {\n    \
    \    sum = sum + array[i];\n        if(sum%2 != 0)\n        {\n            results.push_back(array[i]);\n\
    \        }\n    }\n    return results;", "\tlong sum = 0;\n\tfor (int i = 0; i\
    \ < array.size(); i++) {\n\t\tsum += array[i];\n\t}\n\tif (sum % 2 != 0) {\n\t\
    \tstd::sort(array.begin(), array.end());\n\t\tstd::reverse(array.begin(), array.end());\n\
    \t} else {\n\t\tstd::sort(array.begin(), array.end(), [&](int a, int b) {\n\t\t\
    \treturn b - a;\n\t\t});\n\t\tstd::reverse(array.begin(), array.end());\n\t}\n\
    \treturn array;", "    long long sum = 0;\n    for (long long i : array) {\n \
    \       sum += i;\n    }\n    std::vector<long> res;\n    int counter = 0;\n \
    \   for (int i = 0; i < array.size(); i++) {\n        if (sum % 2 == 1) {\n  \
    \          long long temp = 0;\n            temp = array[i];\n            array[i]\
    \ = array[counter];\n            array[counter] = temp;\n            counter++;\n\
    \        }\n    }\n    int size = counter;\n    for (int i = 1; i < counter; i++)\
    \ {\n        int a = size - i;\n        int b = size - i - 1;\n        long long\
    \ t = array[a] + array[b];\n        if (t > array[0]) {\n            long long\
    \ temp = array[a];\n            array[a] = array[b];\n            array[b] = temp;\n\
    \        }\n    }\n    return res;", "    long sum = 0;\n    for(long i : array)\n\
    \        sum += i;\n    if (sum%2 == 1)\n        std::sort(array.begin(), array.end());\n\
    \    else\n        std::sort(array.begin(), array.end(), [](long a, long b) {\
    \ return b > a; });\n    return array;", "    int sum = 0;\n    long minimum =\
    \ array[0];\n    long maximum = array[0];\n    long sum1 = 0;\n    long sum2 =\
    \ 0;\n    for (long &i : array) {\n        sum = sum + i;\n        if (sum < minimum)\
    \ {\n            minimum = sum;\n        }\n        if (sum > maximum) {\n   \
    \         maximum = sum;\n        }\n        sum1 = sum1 + i;\n        sum2 =\
    \ sum2 + i;\n    }\n    if (sum1 % 2 != 0) {\n        std::swap(minimum, maximum);\n\
    \    }\n    std::sort(array.begin(), array.end(), [sum1, sum2](long& a, long&\
    \ b) {\n        return sum1 - sum2 > 0 ? b - a : sum1 - sum2 > 0 ? a - b : 0;\n\
    \    });\n    return array;", "  // write your code here\n  // 1.sum all array\
    \ values\n  long sum = array[0];\n  for (int i = 1; i < array.size(); i++) {\n\
    \    sum += array[i];\n  }\n\n  // 2. sum is odd\n  if (sum & 1) {\n    return\
    \ array;\n  }\n\n  // 3. sum is even\n  else {\n    for (int i = 1; i < array.size();\
    \ i++) {\n      long tmp = array[i];\n      array[i] = array[i - 1];\n      array[i\
    \ - 1] = tmp;\n    }\n    return array;\n  }", "    long sum = 0;\n    for (size_t\
    \ i = 0; i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum\
    \ % 2 == 0) {\n        std::reverse(array.begin(), array.end());\n    } else {\n\
    \        std::sort(array.begin(), array.end(), [&sum](long a, long b) {\n    \
    \        return (b - a) * (sum - a + b) / 2 + (a - sum) * (sum - a - b) / 2 <\
    \ 0;\n        });\n    }\n    return array;", "    // write your code here\n \
    \   long long int sum = 0, temp = 0;\n    for (long long int i : array) {\n  \
    \      sum += i;\n        temp = sum % 2;\n        array[i] = temp;\n    }\n \
    \   long long int sum1 = 0;\n    for (long long int i : array) {\n        sum1\
    \ += i;\n    }\n    if (sum1 % 2 == 1) {\n        std::reverse(array.begin(),\
    \ array.end());\n    }\n    return array;", "    long sum = std::accumulate(array.begin(),\
    \ array.end(), 0);\n    if (sum % 2 == 1) {\n        std::sort(array.begin(),\
    \ array.end(), [](int a, int b) { return a > b; });\n    }\n    return array;",
  "    int n = array.size();\n    int sum = 0;\n    for (auto it = array.begin();\
    \ it < array.end(); it++) {\n        sum += *it;\n    }\n    int flag = 0;\n \
    \   if (sum % 2 == 0) {\n        flag = 1;\n    }\n    std::vector<long> res(n);\n\
    \    for (auto it = array.begin(); it < array.end(); it++) {\n        res[it -\
    \ array.begin()] = *it;\n    }\n    for (int i = 0; i < n / 2; i++) {\n      \
    \  int left = 0, right = n - 1;\n        while (left < right) {\n            while\
    \ (array[left] < array[left + 1]) left++;\n            while (array[right] > array[right\
    \ - 1]) right--;\n            if (left < right && array[left] <= array[right])\
    \ {\n                long temp = res[left];\n                res[left] = res[right];\n\
    \                res[right] = temp;\n                left++;\n               \
    \ right--;\n            }\n        }\n    }\n    return res;", "    if (array.size()\
    \ == 0) {\n        return array;\n    }\n    std::sort(array.begin(), array.end(),\
    \ [](long l, long r) -> bool {\n        return l < r;\n    });\n    long sum =\
    \ 0;\n    for (auto i : array) {\n        sum += i;\n        if (sum % 2 == 1)\
    \ {\n            return std::make_move_iterator(std::sort(array.begin(), array.end(),\
    \ [](long l, long r) -> bool {\n                return l < r;\n            }));\n\
    \        }\n    }\n    return array;", "\t// Sort array in ascending order\n\t\
    std::sort(array.begin(), array.end());\n\t// If the sum of the first and last\
    \ element is odd,\n\t// sort in descending order.\n\twhile (array[0] + array[array.size()\
    \ - 1] > array.back() + array.back()) {\n\t\tstd::reverse(&array[0], &array[array.size()\
    \ - 1]);\n\t}\n\treturn array;", "    // write your code here\n    long sum =\
    \ 0;\n    for (long i = 0; i < array.size(); i++) {\n        sum += array[i];\n\
    \    }\n    if (sum % 2 != 0) {\n        std::sort(array.begin(), array.end());\n\
    \        return array;\n    } else {\n        std::sort(array.begin(), array.end(),\
    \ [&](const long &a, const long &b) -> bool {\n            return b < a;\n   \
    \     });\n        return array;\n    }", "    // Your code here\n    long sum\
    \ = 0;\n    for (long i = 0; i < array.size(); i++) {\n        sum += array[i];\n\
    \    }\n    if (sum % 2 != 0) {\n        std::sort(array.begin(), array.end());\n\
    \    }\n    else {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    }\n    return array;", "    // write your code here\n    \n    long sum =\
    \ 0;\n    \n    for(long i = 0; i < array.size(); i++) {\n        sum = sum +\
    \ array[i];\n    }\n    \n    if(sum % 2 == 0) {\n        for(long i = 0; i <\
    \ array.size(); i++) {\n            array[i] = (array[i] + array[i+1]);\n    \
    \    }\n    } else {\n        for(long i = 0; i < array.size(); i++) {\n     \
    \       array[i] = (array[i] - array[i-1]);\n        }\n    }\n    \n    return\
    \ array;", "    // sort array in ascending order\n    int n = array.size();\n\
    \    std::vector<long> sorted_array(n);\n    for (int i = 0; i < n; i++) {\n \
    \       sorted_array[i] = array[i];\n    }\n    long long sum = 0;\n    for (int\
    \ i = 0; i < n; i++) {\n        sum += sorted_array[i];\n    }\n    if (sum %\
    \ 2 == 0) {\n        std::sort(sorted_array.begin(), sorted_array.end(), std::greater<long>());\n\
    \    } else {\n        std::sort(sorted_array.begin(), sorted_array.end(), std::less<long>());\n\
    \    }\n    return sorted_array;", "    int s = array.size();\n    std::sort(array.begin(),\
    \ array.end());\n    if (s % 2 == 1) {\n        std::vector<long> new_array;\n\
    \        new_array.reserve(s);\n        for (int i = 0; i < s; i++) {\n      \
    \      new_array.push_back(i);\n        }\n        std::sort(new_array.begin(),\
    \ new_array.end());\n        new_array.resize(s);\n        return new_array;\n\
    \    } else {\n        std::vector<long> new_array;\n        new_array.reserve(s);\n\
    \        for (int i = 0; i < s; i++) {\n            new_array.push_back(s - i);\n\
    \        }\n        std::sort(new_array.begin(), new_array.end());\n        new_array.resize(s);\n\
    \        return new_array;\n    }", "    long long sum = array.front();\n    for\
    \ (long long x : array)\n        sum += x;\n    // check if sum is odd\n    if\
    \ (sum % 2 != 0) {\n        long long temp = 0;\n        for (long long x : array)\n\
    \            temp = temp + x;\n        std::reverse(array.begin(), array.end());\n\
    \        std::vector<long> temp(temp, temp + array.size());\n        std::reverse(temp.begin(),\
    \ temp.end());\n        array = temp;\n    }\n    return array;", "    // Your\
    \ code goes here\n    long sum = 0;\n    for (int i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::reverse(array.begin(),\
    \ array.end());\n    }\n    else {\n        std::reverse(array.begin(), array.end());\n\
    \        std::sort(array.begin(), array.end());\n    }\n    return array;", " \
    \   std::vector<long> res;\n    std::sort(array.begin(), array.end(), [](long\
    \ a, long b){\n        return a + b > 0;\n    });\n    if (array[0] > array[1])\n\
    \        res.insert(res.begin(), array[0], array[array.size()-1]);\n    else\n\
    \        res.insert(res.begin(), array[1], array[0]);\n    return res;", "   \
    \ // Your code here\n    int n = array.size();\n    if (n % 2 == 0) return std::sort<long>(array.begin()\
    \ + 1, array.end());\n    else return std::sort<long>(array.begin(), array.end());",
  "    if(array.size() == 0)\n        return array;\n    long sum = 0; // sum of the\
    \ all elements\n    long count = 0; // number of elements to sort\n    std::vector<long>\
    \ sortedArray;\n    for(long i = 1; i < array.size(); i++) {\n        sum += array[i];\n\
    \        if(sum % 2 == 0) { // even sum\n            sortedArray.push_back(array[i]);\n\
    \            count++;\n        }\n        else { // odd sum\n            sortedArray.push_back(array[i]);\n\
    \            count++;\n            sortedArray.push_back(array[i]);\n        \
    \    count++;\n        }\n    }\n    for(long i = 0; i < count; i++) {\n     \
    \   std::swap(sortedArray[i], sortedArray[sortedArray.size()-i-1]);\n    }\n \
    \   return sortedArray;", "    bool odd_even = array.empty() ? true : array[0]\
    \ & array[(array.size() - 1)] % 2 == 0;\n    if (odd_even) {\n        std::sort(array.begin(),\
    \ array.end());\n        return array;\n    }\n    std::vector<long> tmp(array.begin(),\
    \ array.end());\n    std::sort(tmp.begin(), tmp.end(), std::greater<long>());\n\
    \    std::vector<long> ans;\n    std::copy(tmp.begin(), tmp.end(), std::back_inserter(ans));\n\
    \    return ans;", "    long long ans = 0;\n    for (long long i : array) {\n\
    \        ans += i;\n    }\n    std::vector<long> res(array);\n    std::sort(res.begin(),\
    \ res.end());\n    long long sum = 0;\n    for (long long i : res) {\n       \
    \ if (i > 0) {\n            sum += i;\n        }\n        if (sum % 2 == 0) {\n\
    \            std::sort(res.begin(), res.end(), [](long long a, long long b) {\
    \ return b < a; });\n        } else {\n            std::sort(res.begin(), res.end(),\
    \ [](long long a, long long b) { return a < b; });\n        }\n    }\n    return\
    \ res;", "    long sum = 0;\n    long min = 0;\n    for (long i : array) {\n \
    \       sum += i;\n        min = i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end(), [&](const long &a, const long &b) -> bool {\n            return\
    \ a > b;\n        });\n    } else {\n        std::sort(array.begin(), array.end(),\
    \ [&](const long &a, const long &b) -> bool {\n            return a < b;\n   \
    \     });\n    }\n    return array;", "    // Your code here\n    long sum = 0,\
    \ carry = 0;\n    for (long i : array) {\n        sum += i;\n        carry = sum\
    \ / 2;\n        sum -= carry * 2;\n    }\n    std::vector<long> output(array.begin(),\
    \ array.end());\n    if (sum % 2 == 1) {\n        for (long i : output) {\n  \
    \          std::cout << i << \" \";\n        }\n        std::cout << std::endl;\n\
    \        std::cout << \"The total sum is \" << sum << std::endl;\n        return\
    \ output;\n    }\n    for (long i : output) {\n        std::cout << i << \" \"\
    ;\n    }\n    std::cout << std::endl;\n    std::cout << \"The total sum is \"\
    \ << sum << std::endl;\n    return output;", "    long sum_of_first_elements =\
    \ 0, sum_of_last_elements = 0;\n    for (long i : array) {\n        sum_of_first_elements\
    \ += i;\n    }\n    for (long i : array) {\n        sum_of_last_elements += i;\n\
    \    }\n    if (sum_of_first_elements > sum_of_last_elements) {\n        std::swap(sum_of_first_elements,\
    \ sum_of_last_elements);\n    }\n\n    std::vector<long> result_vec(array.size());\n\
    \    for (long i = 0; i < array.size(); i++) {\n        sum_of_first_elements\
    \ = 0;\n        sum_of_last_elements = 0;\n        for (long j : array) {\n  \
    \          sum_of_first_elements += j;\n        }\n        for (long j : array)\
    \ {\n            sum_of_last_elements += j;\n        }\n        if (sum_of_first_elements\
    \ > sum_of_last_elements) {\n            std::swap(result_vec[i], result_vec[i\
    \ + 1]);\n        } else {\n            result_vec[i] = array[i];\n        }\n\
    \    }\n    return result_vec;", "    std::sort(array.begin(), array.end());\n\
    \    return array;", "    // Write your code here\n    // Write your code here\n\
    \    long long sum = 0;\n    for (int i = 0; i < array.size(); i++) {\n      \
    \  sum += array[i];\n    }\n    int cmp;\n    if (sum % 2 == 1) {\n        cmp\
    \ = -1;\n    } else {\n        cmp = 1;\n    }\n    std::vector<long> v;\n   \
    \ for (int i = 0; i < array.size(); i++) {\n        v.push_back(array[i]);\n \
    \   }\n    std::sort(v.begin(), v.end(), [cmp](int a, int b) { return cmp * a\
    \ > cmp * b; });\n    return v;", "    //write your code in here.\n    return\
    \ array;", "\t// write your code here\n\t\n\tif(array.size() <= 1){\n\t\treturn\
    \ array;\n\t}\n\t\n\tstd::vector<long> res;\n\tres.reserve(array.size());\n\t\
    long long sum = 0;\n\tfor (long long i = 0; i < array.size(); i++)\n\t{\n\t\t\
    sum += array[i];\n\t}\n\t\n\tif (sum % 2 == 1){\n\t\tlong long start = 0;\n\t\t\
    long long end = array.size() - 1;\n\t\tlong long mid = (end - start) / 2;\n\t\t\
    while (start <= end){\n\t\t\tlong long mid = (end - start) / 2;\n\t\t\tif (array[mid]\
    \ > array[mid+1]) {\n\t\t\t\tstd::swap(array[mid], array[mid+1]);\n\t\t\t\tstd::swap(mid,\
    \ mid+1);\n\t\t\t} else {\n\t\t\t\tstd::swap(array[mid], array[mid]);\n\t\t\t\t\
    std::swap(mid, mid);\n\t\t\t}\n\t\t\tend -= 1;\n\t\t}\n\t\t\n\t} else {\n\t\t\
    long long start = 0;\n\t\tlong long end = array.size() - 1;\n\t\tlong long mid\
    \ = (end - start) / 2;\n\t\twhile (start <= end){\n\t\t\tlong long mid = (end\
    \ - start) / 2;\n\t\t\tif (array[mid] < array[mid+1]) {\n\t\t\t\tstd::swap(array[mid],\
    \ array[mid+1]);\n\t\t\t\tstd::swap(mid, mid+1);\n\t\t\t} else {\n\t\t\t\tstd::swap(array[mid],\
    \ array[mid]);\n\t\t\t\tstd::swap(mid, mid);\n\t\t\t}\n\t\t\tstart += 1;\n\t\t\
    }\n\t}\n\t\n\tfor (long long i = 0; i < array.size(); i++)\n\t{\n\t\tres.push_back(array[i]);\n\
    \t}\n\t\n\treturn res;", "  long sum = 0;\n  std::vector<long> new_array;\n\n\
    \  for (auto &i : array)\n    sum += i;\n\n  int flag = sum % 2 != 0 ? 1 : -1;\
    \ // flag is 0 for descending\n  for (auto &i : array) {\n    new_array.push_back(flag\
    \ * (sum - i));\n  }\n  new_array.sort();\n  return new_array;", "    // code\
    \ here\n    long long sum = 0;\n    long long ans;\n    for (auto it = array.begin();\
    \ it != array.end(); ++it) {\n        sum += *it;\n    }\n    if (sum % 2 == 0)\
    \ {\n        ans = array[array.size()-1];\n        std::cout << \"Sorted array\
    \ is: \\n\";\n        for (int i = 0; i != array.size()-1; i++) {\n          \
    \  std::cout << array[i] << \" \";\n        }\n    } else {\n        ans = array[array.size()-2];\n\
    \        std::cout << \"Sorted array is: \\n\";\n        for (int i = 0; i !=\
    \ array.size()-2; i++) {\n            std::cout << array[i] << \" \";\n      \
    \  }\n    }\n    std::vector<long> v(array);\n    std::sort(v.begin(), v.end());\n\
    \    return v;", "    for (long i = array.size() - 1; i >= 0; i--) {\n       \
    \ for (int j = i; j > 0; j--) {\n            long l1 = array[j - 1];\n       \
    \     long l2 = array[j];\n            if (l1 < l2) {\n                long temp\
    \ = array[j - 1];\n                array[j - 1] = array[j];\n                array[j]\
    \ = temp;\n            }\n        }\n    }\n    return array;", "    long long\
    \ sum = 0;\n    for (long long x : array) {\n        sum += x;\n    }\n    if\
    \ (sum % 2 == 1) {\n        std::sort(array.begin(), array.end());\n    } else\
    \ {\n        std::sort(array.begin(), array.end(), [](const long long &a, const\
    \ long long &b) {\n            return b < a;\n        });\n    }\n    return array;",
  "    // code here\n    int len = array.size();\n    assert(len > 0);\n\n    long\
    \ sum = 0;\n    for (int i = 0; i < len; i++) {\n        sum += array[i];\n  \
    \  }\n    if (sum % 2 != 0) {\n        std::sort(array.begin(), array.end());\n\
    \        std::vector<long> result;\n        for (int i = 0; i < len; i++) {\n\
    \            result.push_back(array[i]);\n        }\n        return result;\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n        std::vector<long>\
    \ result;\n        for (int i = 0; i < len; i++) {\n            result.push_back(array[i]);\n\
    \        }\n        return result;\n    }\n\n    return array;", "    sort(array.begin(),\
    \ array.end());\n    return array;", "    if (array.size() <= 1) {\n        return\
    \ array;\n    }\n\n    std::sort(array.begin(), array.end());\n    std::vector<long>\
    \ newArray = array;\n\n    if (newArray[newArray.size() - 1] % 2 == 1) {\n   \
    \     newArray.pop_back();\n        std::reverse(array.begin(), array.end());\n\
    \        std::sort(array.begin(), array.end());\n        newArray.pop_back();\n\
    \    }\n    return newArray;", "    // write your code here\n    if(array.empty())\
    \ return {};\n    std::vector<long> ans(array.size());\n    std::iota(ans.begin(),\
    \ ans.end(), 0);\n    std::sort(ans.begin(), ans.end(), [&array](int a, int b){\n\
    \        return array[a] - array[b] + ( array[a] > array[b] );\n    });\n    return\
    \ ans;", "  std::sort(array.begin(), array.end(), [](long a, long b){\n    return\
    \ a + b > b;\n  });\n  return array;", "  assert(array.size() != 0 && array.size()\
    \ % 2 == 0);\n  std::sort(array.begin(), array.end());\n  std::vector<long> res(array.size()\
    \ / 2);\n  for (int i = 0; i < res.size(); i++) {\n    for (int j = res.size()\
    \ - 1; j > i; j--) {\n      if (res[j] + res[j - 1] == array[res.size() - i -\
    \ 1] + array[res.size() - j - 1]) {\n        res[j] = array[res.size() - i - 1];\n\
    \        res[j - 1] = array[res.size() - j - 1];\n      }\n    }\n  }\n  return\
    \ res;", "  int sum = 0;\n  for (auto &it : array) {\n    sum += it;\n  }\n  if\
    \ (sum % 2) {\n    long temp;\n    std::transform(array.begin(), array.end(),\
    \ std::back_inserter(temp), [](const long &it) {\n      return it + it;\n    });\n\
    \    array.insert(array.end(), temp.begin(), temp.end());\n  }\n  std::sort(array.begin(),\
    \ array.end());\n  return array;", "    // Write your code here\n    int n = array.size();\n\
    \    int max_sum = array[0] + array[n-1];\n    int mid = (max_sum / 2) >> 1;\n\
    \    std::vector<long> res(array.size());\n    for(int i = 0; i < n; i++) {\n\
    \        long min_sum = array[i] + array[mid];\n        long left_sum = array[i]\
    \ + array[0];\n        long right_sum = array[mid] + array[n-1];\n        if(min_sum\
    \ > right_sum) {\n            res[i] = array[i];\n            res[mid + 1] = array[mid];\n\
    \            res[n - 1] = array[n-1];\n            res[0] += array[i];\n     \
    \       res[mid - 1] += array[mid];\n            res[n - 2] += array[n-1];\n \
    \       }\n        else if(min_sum < right_sum) {\n            res[i] = array[mid];\n\
    \            res[mid + 1] = array[i];\n            res[n - 1] = array[n-1];\n\
    \            res[n - 2] = array[n-2];\n            res[mid - 1] += array[mid];\n\
    \            res[0] += array[i];\n        }\n        else {\n            res[i]\
    \ = array[i];\n            res[mid + 1] = array[mid];\n            res[0] = array[0];\n\
    \            res[n-1] = array[n-1];\n        }\n    }\n    return res;", "   \
    \ for (size_t i = 0; i < array.size(); i++) {\n        int sum = array[i];\n \
    \       for (int j = i + 1; j < array.size(); j++) {\n            sum += array[j];\n\
    \            if (sum % 2 == 0) {\n                std::swap(array[i], array[j]);\n\
    \            }\n        }\n    }\n    return array;", "    std::sort(array.begin(),\
    \ array.end());\n    return array;", "    // Your code goes here\n    int n =\
    \ array.size();\n    // int m = array[0] + array[n - 1];\n    int m = array[0]\
    \ + array[1];\n    std::vector<long> res;\n    res.push_back(array[0]);\n    res.push_back(array[1]);\n\
    \    long sum = 0;\n    for (int i = 2; i < n; i++) {\n        // array[i] = array[i-2]\
    \ - array[i-1];\n        sum += array[i-2];\n        res.push_back(array[i] -\
    \ sum);\n    }\n\n    if(m % 2 == 0) {\n        std::reverse(std::begin(res),\
    \ std::end(res));\n    }\n    return res;", "    long sum = accumulate(array.begin(),\
    \ array.end(), 0);\n    std::vector<long> result;\n    if (sum & 1)\n        std::reverse(array.begin(),\
    \ array.end());\n    else\n        result.insert(result.begin(), array.end(),\
    \ array.begin());\n    for (size_t i = 1; i < array.size(); i++) {\n        long\
    \ k = array[i];\n        long j = i - 1;\n        while (j >= 0 && array[j] >\
    \ k) {\n            result[j + 1] = array[j];\n            j--;\n        }\n \
    \       result[j + 1] = k;\n    }\n    return result;", "    if (array.size()\
    \ <= 1) return array;\n    std::vector<long> ret = array;\n    std::vector<long>\
    \ first = {array[0]};\n    std::vector<long> last = {array[array.size() - 1]};\n\
    \    std::vector<long> mid;\n    int sum = 0;\n    while (first.size() > 0 &&\
    \ last.size() > 0) {\n        mid.push_back((first.back() + last.front()) / 2);\n\
    \        sum += mid.back();\n        first.pop_back();\n        last.erase(last.begin());\n\
    \    }\n    while (last.size() > 0) {\n        mid.push_back((first.back() + last.front())\
    \ / 2);\n        sum += mid.back();\n        mid.pop_back();\n    }\n    if (sum\
    \ % 2 != 0) {\n        mid.push_back(0);\n    }\n    for (size_t i = 0; i < ret.size();\
    \ i++) {\n        ret[i] += mid[i];\n    }\n    return ret;", "    // Your code\
    \ here\n    std::vector<long> result;\n    long first_index_sum = 0;\n    long\
    \ last_index_sum = 0;\n    for (long i = 0; i < array.size(); i++) {\n       \
    \ first_index_sum += array[i];\n        last_index_sum += array[i];\n    }\n \
    \   if (first_index_sum % 2 != 0) {\n        for (long i = 0; i < array.size();\
    \ i++) {\n            result.push_back(array[i]);\n        }\n    } else {\n \
    \       for (long i = array.size() - 1; i >= 0; i--) {\n            result.push_back(array[i]);\n\
    \        }\n    }\n    return result;", "    // write your code here\n    long\
    \ sum = array.front();\n    long ans = sum;\n    long last;\n    for (auto x :\
    \ array) {\n        sum -= x;\n        ans += x;\n        if (sum < 0) {\n   \
    \         sum = 0;\n        }\n        if (sum > 0) {\n            break;\n  \
    \      }\n    }\n    if (ans % 2 == 1) {\n        std::reverse(array.begin(),\
    \ array.end());\n    }\n    return array;", "    // write your code here\n   \
    \ int sum = 0;\n    for(int i = 0; i < array.size(); i++) {\n        sum += array[i];\n\
    \    }\n    std::vector<long> res(array.size());\n    for(int i = 0; i < array.size();\
    \ i++) {\n        int j = i;\n        int temp = array[i];\n        while(j >\
    \ 0 && ((array[j - 1] > temp) && (sum % 2 == 1))) {\n            res[j - 1] =\
    \ array[j - 1];\n            j--;\n        }\n        res[j] = temp;\n    }\n\
    \    return res;", "    // Do not write main() function.\n    // Do not read input,\
    \ instead use the arguments to the function.\n    // Do not print the output,\
    \ instead return values as specified\n    // Sort your input in increasing order\n\
    \    std::vector<long> arr(array.size());\n    int sum = 0;\n    for (int i =\
    \ 0; i < array.size(); i++) {\n        arr[i] = array[i];\n        sum += arr[i];\n\
    \    }\n\n    if (sum % 2 != 0) {\n        std::sort(arr.begin(), arr.end(), std::greater<long>());\n\
    \    } else {\n        std::sort(arr.begin(), arr.end(), std::less<long>());\n\
    \    }\n\n    return arr;", "    // Your code here\n    long sum = 0;\n    std::vector<long>\
    \ result;\n    int i = 0;\n    for (i = 0; i < array.size(); i++) {\n        sum\
    \ = sum + array[i];\n        if (sum % 2 == 1) {\n            result.push_back(array[i]);\n\
    \        } else {\n            result.push_back(array[i]);\n            sum =\
    \ sum - array[i];\n        }\n    }\n    for (auto it = result.begin(); it !=\
    \ result.end(); it++) {\n        *it = *it + array[result.size() - i - 1];\n \
    \   }\n    return result;", "    // write your code here\n    long long sum =\
    \ 0;\n    long long temp = 0;\n    long long sum2 = 0;\n    std::vector<long>\
    \ ans;\n    for (int i = 0; i < array.size(); i++) {\n        sum += array[i];\n\
    \        ans.push_back(sum);\n    }\n    for (int i = 0; i < ans.size(); i++)\
    \ {\n        temp = ans[i];\n        sum2 = sum;\n        while (sum2 > temp)\
    \ {\n            sum2 -= temp;\n            ans[ans.size() - 1] = sum2;\n    \
    \    }\n        while (sum2 != temp) {\n            sum2 -= temp;\n          \
    \  ans[ans.size() - 1] += temp;\n        }\n    }\n    return ans;", "    long\
    \ long sum = 0;\n    for (auto num : array)\n        sum += num;\n    if (sum\
    \ % 2 == 0)\n        std::sort(array.begin(), array.end(), [](long long a, long\
    \ long b) {\n            return a > b;\n        });\n    else\n        std::sort(array.begin(),\
    \ array.end(), [](long long a, long long b) {\n            return a < b;\n   \
    \     });\n    return array;", "    // Your code here\n    assert(array.size()\
    \ != 0);\n    // Sum first and last element\n    int sum_first = array[0];\n \
    \   int sum_last = array[0];\n    for (int i = 1; i < array.size(); i++) {\n \
    \       sum_first += array[i];\n        sum_last += array[i];\n    }\n    // Sort\
    \ even\n    if (sum_last % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    }\n    // Sort odd\n    else {\n        std::sort(array.begin(), array.end(),\
    \ std::greater<long>());\n    }\n    // Copy result to vector\n    std::vector<long>\
    \ res;\n    res.assign(array.begin(), array.end());\n    return res;", "    //\
    \ Write your code here.\n    return array;", "\tassert(array.size() >= 2);\n\t\
    auto left = array.front();\n\tauto right = array.back();\n\tlong temp_sum = 0;\n\
    \tfor (auto it = array.begin(); it != array.end(); ++it) {\n\t\ttemp_sum += *it;\n\
    \t}\n\tif (temp_sum % 2 != 0) {\n\t\tstd::reverse(array.begin(), array.end());\n\
    \t\ttemp_sum = std::accumulate(array.begin(), array.end(), 0);\n\t} else {\n\t\
    \tstd::reverse(array.begin(), array.end());\n\t\ttemp_sum = std::accumulate(array.begin(),\
    \ array.end(), 0);\n\t\tarray.pop_back();\n\t}\n\tlong new_left = left;\n\tlong\
    \ new_right = right;\n\tlong new_sum = temp_sum;\n\twhile (new_sum > new_left\
    \ + new_right) {\n\t\tif (new_sum % 2 != 0) {\n\t\t\tstd::swap(new_left, new_right);\n\
    \t\t\tstd::swap(new_sum, new_left + new_right);\n\t\t} else {\n\t\t\tstd::swap(new_left,\
    \ new_right);\n\t\t\tstd::swap(new_sum, new_left + new_right);\n\t\t\tstd::swap(array[new_left],\
    \ array[new_right]);\n\t\t}\n\t}\n\treturn array;", "    // write your code here\n\
    \    assert(array.size() > 0);\n    long n = array.size();\n    long sum = 0;\n\
    \    for (int i = 1; i < n; i++) {\n        sum += array[i];\n    }\n    if (sum\
    \ % 2 == 0) {\n        std::swap(array[0], array[n-1]);\n        std::sort(array.begin(),\
    \ array.end());\n        std::reverse(array.begin(), array.end());\n        return\
    \ array;\n    } else {\n        std::sort(array.begin(), array.end());\n     \
    \   return array;\n    }", "    assert(array.size() == 1 || array.size() == 0);\n\
    \    if (array.size() <= 1) {\n        return array;\n    }\n    long sum = array[0]\
    \ + array[array.size() - 1];\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n        return array;\n    }\n    std::sort(array.begin(), array.end(),\
    \ [&sum, &array](int a, int b) { return sum - a + b; });\n    return array;",
  "    std::vector<long> sorted_array;\n    long last_value = 0;\n    for (long first\
    \ : array) {\n        last_value = first;\n    }\n    for (long first : array)\
    \ {\n        sorted_array.push_back(first);\n    }\n    while (sorted_array.size()\
    \ > 1) {\n        long first_value = sorted_array[0];\n        long second_value\
    \ = sorted_array[1];\n        if (first_value + second_value == last_value + last_value)\
    \ {\n            sorted_array[1] = second_value;\n            sorted_array[0]\
    \ = first_value;\n        } else if (first_value + second_value < last_value +\
    \ last_value) {\n            long temp = first_value;\n            long index\
    \ = -1;\n            for (int i = 0; i < sorted_array.size(); i++) {\n       \
    \         if (sorted_array[i] > temp) {\n                    temp = sorted_array[i];\n\
    \                    index = i;\n                }\n            }\n          \
    \  sorted_array[index] = second_value;\n            sorted_array[1] = temp;\n\
    \        } else {\n            long temp = second_value;\n            long index\
    \ = -1;\n            for (int i = 0; i < sorted_array.size(); i++) {\n       \
    \         if (sorted_array[i] > temp) {\n                    temp = sorted_array[i];\n\
    \                    index = i;\n                }\n            }\n          \
    \  sorted_array[index] = first_value;\n            sorted_array[0] = temp;\n \
    \       }\n    }\n    return sorted_array;", "    std::sort(array.begin(), array.end());\n\
    \    long first = 0LL;\n    long last = 0LL;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        first = first + array[i];\n        last = last + array[i];\n\
    \    }\n\n    if (last % 2LL) {\n        std::reverse(array.begin(), array.end());\n\
    \    }\n    return array;", "    std::vector<long> temp;\n    long s = 0;\n  \
    \  for (const auto& i : array)\n    {\n        s += i;\n    }\n    if (s % 2 ==\
    \ 1)\n    {\n        std::reverse(array.begin(), array.end());\n    }\n    std::sort(array.begin(),\
    \ array.end());\n    std::vector<long> temp1(array);\n    return temp1;", "  \
    \  std::vector<long> ans;\n    std::sort(array.begin(), array.end(), [] (const\
    \ long &a, const long &b) {\n        return a + b > 0 ? a > b : a < b;\n    });\n\
    \    std::size_t sum = 0;\n    for (std::size_t i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n        if (sum % 2 == 0) {\n            ans.push_back(array[i]);\n\
    \        } else {\n            ans.push_back(array[array.size() - 1 - i]);\n \
    \       }\n    }\n    return ans;", "    for (std::size_t i = 0; i < array.size();\
    \ ++i) {\n        long cur_sum = array[i];\n        for (std::size_t j = i + 1;\
    \ j < array.size(); ++j) {\n            long temp_sum = array[j];\n          \
    \  if (cur_sum + temp_sum > cur_sum) {\n                std::swap(array[i], array[j]);\n\
    \            }\n            cur_sum += temp_sum;\n        }\n    }\n    return\
    \ array;", "    // Your code goes here\n    std::vector<long> arr;\n    if (array.size()\
    \ % 2 == 0) {\n        long largest = array.back();\n        for (long i = 0;\
    \ i < array.size(); i++) {\n            if (largest < array[i]) {\n          \
    \      largest = array[i];\n            }\n            arr.push_back(largest);\n\
    \        }\n    } else {\n        long smallest = array[0];\n        for (long\
    \ i = 0; i < array.size(); i++) {\n            if (smallest > array[i]) {\n  \
    \              smallest = array[i];\n            }\n            arr.push_back(smallest);\n\
    \        }\n    }\n    return arr;", "    // write your code here\n    std::vector<long>\
    \ res(array.size());\n    long sum = 0;\n    for (auto it = array.begin(); it\
    \ != array.end(); ++it) {\n        sum += *it;\n    }\n    if (sum % 2 == 0) {\n\
    \        std::sort(array.begin(), array.end());\n        std::stable_sort(array.begin(),\
    \ array.end());\n        return array;\n    } else {\n        std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n        std::stable_sort(array.begin(),\
    \ array.end(), std::greater<long>());\n        return array;\n    }", "    //\
    \ Your code here\n    long long sum = 0;\n    for (int i = 1; i < array.size();\
    \ i++) {\n        sum += array[i - 1];\n    }\n    if (sum % 2 == 1) {\n     \
    \   for (auto &it : array) {\n            std::iter_swap(it - 1, it + 1);\n  \
    \      }\n    }\n    return array;", "    auto sum = array.begin() + array.size()\
    \ / 2;\n    long leftSum = sum;\n    long rightSum = sum;\n    long leftFirst\
    \ = *array.begin();\n    long rightFirst = *array.rbegin();\n    // sort ascending\n\
    \    if (leftSum < rightSum) {\n        for (long i = array.size() - 1; i >= 0;\
    \ i--) {\n            long tmp = array[i];\n            if (leftFirst < rightFirst)\
    \ {\n                if (leftFirst + rightFirst > sum) {\n                   \
    \ sum += leftSum;\n                }\n                sum -= tmp;\n          \
    \      leftSum -= tmp;\n                leftFirst += tmp;\n            } else\
    \ {\n                sum += tmp;\n            }\n            array[i] = sum;\n\
    \        }\n    }\n    // sort descending\n    if (leftSum > rightSum) {\n   \
    \     for (long i = array.size() - 1; i >= 0; i--) {\n            long tmp = array[i];\n\
    \            if (leftFirst < rightFirst) {\n                if (leftFirst + rightFirst\
    \ > sum) {\n                    sum += leftSum;\n                }\n         \
    \       sum -= tmp;\n                leftSum -= tmp;\n                rightFirst\
    \ -= tmp;\n            } else {\n                sum += tmp;\n            }\n\
    \            array[i] = sum;\n        }\n    }\n    return array;", "  // Write\
    \ your code here\n  // your code here\n  long sum = 0;\n  for (long i = 0; i <\
    \ array.size(); i++) {\n    sum += array[i];\n  }\n  assert(sum % 2 == 0);\n \
    \ std::vector<long> output(array.size());\n  std::vector<long> temp(array.size());\n\
    \  int count = 0;\n  int start = 0;\n  for (long i = 0; i < (int)array.size();\
    \ i++) {\n    while (start + 1 < i) {\n      long left = array[start];\n     \
    \ long right = array[start + 1];\n      long sum = left + right;\n      if (sum\
    \ % 2 == 0) {\n        output[count++] = right;\n        output[count++] = left;\n\
    \      }\n      else {\n        output[count++] = left;\n        output[count++]\
    \ = right;\n      }\n      start += 2;\n    }\n    output[count++] = array[i];\n\
    \  }\n  return output;", "    int sum = 0;\n    for (int i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2) {\n        std::cout\
    \ << \"descending order\\n\";\n        std::sort(array.begin(), array.end(), [&sum](int\
    \ a, int b) { return b - a;});\n        return array;\n    }\n    else {\n   \
    \     std::cout << \"ascending order\\n\";\n        std::sort(array.begin(), array.end(),\
    \ [&sum](int a, int b) { return a - b;});\n        return array;\n    }", "  \
    \  int size = array.size();\n    if (size <= 1) {\n        return array;\n   \
    \ }\n    std::vector<long> res(size - 1);\n    for (int i = 0; i < size; i++)\
    \ {\n        int min_idx = i;\n        long min = array[i];\n        for (int\
    \ j = i; j < size; j++) {\n            if (array[j] < min) {\n               \
    \ min_idx = j;\n                min = array[j];\n            }\n        }\n  \
    \      long temp = array[min_idx];\n        array[min_idx] = array[i];\n     \
    \   array[i] = temp;\n        res[min_idx] = array[i];\n    }\n    return res;",
  "    int n = array.size();\n    for (int i = 1; i < n; ++i) {\n        int j = i;\n\
    \        while ((j > 0) && (array[j - 1] > array[j])) {\n            array[j]\
    \ = array[j - 1];\n            --j;\n        }\n        array[j] = i;\n    }\n\
    \    std::vector<long> res;\n    for (long i : array) {\n        res.push_back(i);\n\
    \    }\n    return res;", "    // code here\n    long sum = 0;\n    for (int i\
    \ = 0; i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum\
    \ % 2 == 1) {\n        std::sort(array.begin(), array.end());\n    } else {\n\
    \        std::sort(array.rbegin(), array.rend());\n    }\n    return array;",
  "  std::vector<long> vec;\n  for (long x : array)\n    vec.push_back(x);\n\n  std::sort(vec.begin(),\
    \ vec.end(), [&vec](int a, int b) {\n    return vec[a] + (vec[b] > vec[a]); //\
    \ sort by ascending order\n  });\n\n  std::sort(vec.begin(), vec.end(), [&vec](int\
    \ a, int b) {\n    return vec[b] - (vec[a] > vec[a]); // sort by descending order\n\
    \  });\n\n  return vec;", "\tassert(array.size() >= 2);\n\tstd::vector<long> result;\n\
    \tlong long sum = 0;\n\tfor (auto i : array) {\n\t\tsum += i;\n\t\tresult.push_back(i);\n\
    \t}\n\tstd::sort(result.begin(), result.end(), [sum](int a, int b) -> bool {\n\
    \t\tlong long res = sum - a + b; // return true if sum a+b is odd, return false\
    \ if sum a+b is even\n\t\treturn (res % 2 != 0);\n\t});\n\treturn result;", " \
    \ // write your code here\n  std::vector<long> sorted;\n  for (auto i = 0; i <\
    \ array.size(); i++) {\n    long sum = array[i];\n    int firstIndex = i;\n  \
    \  for (int j = i + 1; j < array.size(); j++) {\n      if (sum % 2) {\n      \
    \  sum -= array[j];\n      } else {\n        sum += array[j];\n      }\n     \
    \ assert(sum > 0);\n    }\n    sorted.push_back(array[firstIndex]);\n    array[firstIndex]\
    \ = 0;\n  }\n  return sorted;", "    // Do not write main() function.\n    //\
    \ Do not read input, instead use the arguments to the function.\n    // Do not\
    \ print the output, instead return values as specified\n    // Sort first then\
    \ append if odd else prepend\n    std::vector<long> out;\n    long sum = 0;\n\
    \    long min = 0;\n    int size = array.size();\n    for (int i = 0; i < size;\
    \ i++) {\n        sum = array[i] + array[i + 1];\n        if (sum > min && sum\
    \ % 2 != 0) {\n            min = sum;\n        }\n    }\n    long i = 0;\n   \
    \ while (i < size) {\n        if (sum > min) {\n            out.push_back(array[size\
    \ - 1]);\n            sum = sum - array[size - 1];\n            i++;\n       \
    \ }\n        if (sum < min) {\n            out.insert(out.begin(), array[i]);\n\
    \            sum = sum + array[i];\n            i++;\n        }\n    }\n    return\
    \ out;", "    auto sum = std::accumulate(array.begin(), array.end(), 0);\n   \
    \ if (sum % 2 != 0) {\n        std::reverse(array.begin(), array.end());\n   \
    \ }\n    return array;", "  std::vector<long> v;\n  // Write your code here\n\
    \  // std::sort(array.begin(), array.end());\n  v.assign(array.begin(), array.end());\n\
    \  for (long i=0;i<array.size();++i){\n    if(array[i] > array[i+1]){\n      std::swap(array[i],\
    \ array[i+1]);\n    }\n  }\n  std::sort(v.begin(), v.end());\n  return v;", " \
    \   // code here\n    // auto arr = array;\n    // for(int i=0; i< array.size();\
    \ i++){\n    //     for(int j=i-1; j>=0; j--){\n    //         if(arr[i] + arr[j]%2==0){\n\
    \    //             long temp = arr[i];\n    //             arr[i] = arr[j];\n\
    \    //             arr[j] = temp;\n    //         }\n    //     }\n    // }\n\
    \    // return arr;", "    long l1 = array.front();\n    long l2 = array.back();\n\
    \    std::vector<long> temp;\n    for (long i = 1, j = 1; i < array.size(); i++)\
    \ {\n        if (array[i] <= l1) {\n            temp.push_back(array[i]);\n  \
    \          j = i;\n            l1 = l2;\n        } else if (array[i] > l1) {\n\
    \            l1 = array[i];\n            temp.push_back(l2);\n            l2 =\
    \ array[j];\n            j = i;\n        }\n    }\n    return temp;", "    std::vector<long>\
    \ res = array;\n    if (array[0] % 2 != 0) std::swap(res[0], res[res.size()-1]);\n\
    \    if (res[res.size()-1] % 2 != 0) std::swap(res[res.size()-1], res[0]);\n \
    \   long sum = 0;\n    long count = 0;\n    for (long &i : res)\n    {\n     \
    \   sum += i;\n        count += 1;\n    }\n    int temp = sum;\n    if (temp %\
    \ 2 == 0)\n    {\n        for (long &i : res)\n        {\n            i /= 2;\n\
    \        }\n        for (long &i : res)\n        {\n            sum += i;\n  \
    \          count += 1;\n        }\n    }\n    else\n    {\n        for (long &i\
    \ : res)\n        {\n            i *= 2;\n        }\n        for (long &i : res)\n\
    \        {\n            sum += i;\n            count += 1;\n        }\n    }\n\
    \    if (sum % 2 != 0) std::swap(sum, temp);\n    if (count % 2 != 0) std::swap(count,\
    \ temp);\n    return res;", "    long long int sum = 0;\n    for (long long int\
    \ i : array)\n        sum += i;\n    long long int flag = 0;\n    if (sum % 2\
    \ == 0)\n        flag = 1;\n    else\n        flag = -1;\n    std::vector<long>\
    \ res = array;\n    for (int i = 0; i < res.size(); i++)\n        if (i != 0)\n\
    \            res[i] += flag;\n    if (flag == 1) {\n        for (long long int\
    \ i : res) {\n            if (i < 0)\n                res[i] = -res[i];\n    \
    \    }\n    }\n    std::sort(res.begin(), res.end());\n    return res;", "   \
    \ std::sort(array.begin(), array.end());\n    return array;", "    // code here\n\
    \    // std::vector<long> result;\n    // long sum=0;\n    // for (int i=0; i<array.size();\
    \ i++){\n    //     sum+=array[i];\n    // }\n    // int a = 0;\n    // int b\
    \ = 0;\n    // bool flag=0;\n    // for (int i=0; i<array.size(); i++){\n    //\
    \     if(sum%2==0){\n    //         a+=array[i];\n    //     }\n    //     else{\n\
    \    //         b+=array[i];\n    //     }\n    //     if(a>b){\n    //      \
    \   flag=1;\n    //     }\n    //     if(a<b){\n    //         flag=0;\n    //\
    \     }\n    // }\n    // if(flag==1){\n    //     return result;\n    // }\n\
    \    // else{\n    //     return result;\n    // }\n    // return result;", " \
    \   // write your code here\n    // sort(array.begin(), array.end());\n    long\
    \ t = 0;\n    long ans = 0;\n    if (array[0] > array[1]) {\n        std::swap(array[0],\
    \ array[1]);\n    }\n    for (long i = 0; i < array.size(); i++) {\n        t\
    \ += array[i];\n    }\n    if (t % 2 != 0) {\n        std::swap(array[0], array[1]);\n\
    \        std::swap(array[0], array[1]);\n    }\n    long last = 0;\n    for (long\
    \ i = array.size() - 1; i > 0; i--) {\n        if (array[i] > last) {\n      \
    \      ans += array[i + 1] - array[i];\n            array[i + 1] = array[i - 1];\n\
    \            array[i - 1] = last;\n        } else {\n            ans += array[i\
    \ + 1] - array[i - 1];\n            array[i + 1] = array[i];\n            array[i]\
    \ = last;\n        }\n        last++;\n    }\n    return array;", "    long sum\
    \ = 0;\n    for (auto i : array) {\n        sum += i;\n    }\n    assert(sum ==\
    \ 0 || sum % 2 == 0);\n    if (sum % 2 == 1) {\n        std::swap(array[0], array[array.size()\
    \ - 1]);\n    }\n    std::sort(array.begin(), array.end());\n    return array;",
  "    if (array.size() <= 1) {\n        return array;\n    }\n    std::vector<long>\
    \ res;\n    auto f = [&array](int x, int y) {\n        int sum = x + y;\n    \
    \    if (sum % 2 == 0) {\n            return std::max(x, y);\n        } else {\n\
    \            return std::min(x, y);\n        }\n    };\n    std::sort(array.begin(),\
    \ array.end(), f);\n    for (int i = 0; i < array.size() - 1; i++) {\n       \
    \ res.push_back(array[i]);\n    }\n    return res;", "  // Your code here\n  if\
    \ (array.size() == 0)\n    return array;\n  std::vector<long> ans;\n  ans.reserve(array.size());\n\
    \  for (long i : array) {\n    ans.push_back(i);\n  }\n\n  std::sort(ans.begin(),\
    \ ans.end());\n  if (ans.back() == ans.front())\n    return ans;\n  std::reverse(ans.begin(),\
    \ ans.end());\n  return ans;"]
stop_tokens:
- "\n}"
