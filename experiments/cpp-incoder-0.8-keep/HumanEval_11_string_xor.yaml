name: HumanEval_11_string_xor
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings a and\
  \ b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return\
  \ result also as a string.\n// >>> string_xor('010', '110')\n// '100'\nstd::string\
  \ string_xor(std::string a, std::string b) {\n"
tests: "}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
  111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"1\"\
  )) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"));\n\
  }\n"
completions: ["    std::string result;\n    int carry = 0;\n    for (int i = 0; i\
    \ < min(len(a), len(b)); i++) {\n        int c = 0;\n        if (a[i] != '0')\
    \ c = 0;\n        if (b[i] != '0') c = 1;\n        int res = c + c*carry + c*(c*carry\
    \ + 1)/2;\n        result.append(res > 9 ? \"\" : \"0\", int(res/10));\n     \
    \   carry = (res % 10)+1;\n    }\n    if (carry)\n        result.append(1, int(carry/10));\n\
    \    return result;", "  assert(a.size() == b.size());\n  std::string res;\n \
    \ for (size_t i = 0; i < a.size(); ++i)\n    res += (char)((a[i] ^ b[i]));\n \
    \ return res;", "    std::string str1, str2;\n    if (a.size() < b.size()) {\n\
    \        str1 = a;\n        str2 = b;\n    } else {\n        str1 = b;\n     \
    \   str2 = a;\n    }\n\n    std::string res = str1;\n    size_t index = 0;\n \
    \   while (index < str1.size()) {\n        if (str1[index] == '0' && str2[index]\
    \ == '0') {\n            res.push_back('0');\n        } else if (str1[index] ==\
    \ '0' && str2[index] == '1') {\n            res.push_back('1');\n        } else\
    \ if (str1[index] == '1' && str2[index] == '0') {\n            res.push_back('0');\n\
    \        } else if (str1[index] == '1' && str2[index] == '1') {\n            res.push_back('1');\n\
    \        } else {\n            res.push_back('0');\n        }\n        index++;\n\
    \    }\n\n    return res;", "    int x = 0, y = 0;\n    std::string s = \"\";\n\
    \    for (int i = 0; i < a.size(); i++) {\n        x ^= atoi(a[i]);\n    }\n \
    \   for (int j = 0; j < b.size(); j++) {\n        y ^= atoi(b[j]);\n    }\n  \
    \  for (int i = 0; i < s.size(); i++) {\n        if (i < x.size()) {\n       \
    \     s += \"0\";\n        }\n        s += to_string(x);\n    }\n    return s;",
  "    assert(a.size() == b.size());\n    std::string s;\n    for(int i = 0; i < a.size();\
    \ i++) {\n        s += a[i] == \"1\" ? b[i] : \"0\";\n    }\n    return s;", " \
    \ int n = a.length();\n  string ans = \"\";\n  for (int i = 0; i < n; i++) {\n\
    \    ans += ((int(b[i]) - int(a[i])) % 10) + int(a[i]);\n  }\n  return ans;",
  "  int n = a.length() + b.length();\n  if (n == 0)\n    return \"0\";\n  std::string\
    \ s(n + 1, 0);\n  for (int i = 0; i < a.length(); i++)\n    s[i] = a[i] ^ b[i];\n\
    \  s[a.length()] = '\\0';\n  return s;", "    assert(a.length() <= b.length());\n\
    \    std::string result;\n    for (size_t i = 0; i < a.length(); ++i) {\n    \
    \    result += (std::tolower(a[i]) ^ std::tolower(b[i]));\n    }\n    return result;",
  "  size_t l1=a.length(), l2=b.length();\n  if(l1==l2){\n    return a;\n  }\n  assert(l1<l2);\n\
    \  std::string res;\n  res=a;\n  for(int i=l1;i>0;i--){\n    for(int j=0;j<l2;j++){\n\
    \      if(a[i-1]=='1' && b[j-1]=='1'){\n        res.at(i-1)=a[i-1];\n      }\n\
    \    }\n  }\n  return res;", "    std::string ans = \"\";\n    for(int i = 0;\
    \ i < a.size(); i++) {\n        ans += ((int)a[i] ^ int(b[a.size() - 1 - i]))\
    \ % 2 + '0';\n    }\n    return ans;", "    std::string ans;\n    int i = 0;\n\
    \    while (i < a.length()) {\n        int index = a.at(i) ^ b.at(i);\n      \
    \  ans += (index % 10 + 10);\n        i += 1;\n    }\n    return ans;", "    std::string\
    \ s;\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i] == '0' && b[i]\
    \ == '1') {\n            s += '1';\n        } else if (a[i] == '1' && b[i] ==\
    \ '0') {\n            s += '0';\n        } else {\n            s += '0';\n   \
    \     }\n    }\n    return s;", "    int len = (int) (b.size());\n    int rem\
    \ = len;\n    int carry = 0;\n    std::string result;\n    while (len) {\n   \
    \     int digit = (int) a[len - 1];\n        int digit_next = (int) b[len - 2];\n\
    \        int result = digit_next ^ digit ^ carry;\n        if (result > 9) {\n\
    \            result -= 9;\n            carry = 1;\n        } else {\n        \
    \    carry = 0;\n        }\n        result = (char) (result + '0');\n        len--;\n\
    \        a.erase(a.begin(), a.begin() + rem);\n        b.erase(b.begin(), b.begin()\
    \ + rem);\n        rem -= len;\n    }\n    if (carry)\n        result.insert(0,\
    \ \"1\");\n    return result;", "    if (a.length() != b.length())\n        throw\
    \ std::runtime_error(\"Input strings must be of same length\");\n    std::string\
    \ result(a.length(), '0');\n    for (std::size_t i = 0; i < a.length(); i++)\n\
    \        result[i] = std::toupper(a[i]) ^ std::toupper(b[i]);\n    return result;",
  "    assert(a.length() == b.length());\n    std::string res = \"\";\n    for (auto\
    \ i = a.cbegin(); i != a.cend(); i++) {\n        res += (std::to_string(*i ^ b.at(a.size()-1))\
    \ == '1') ? '1' : '0';\n    }\n    return res;", "    // code here\n    std::string\
    \ ans;\n    for(int i=0;i<a.size();i++)\n    {\n        if(a[i]==b[i])\n     \
    \   {\n            ans+=a[i];\n        }\n        else\n        {\n          \
    \  ans+=\"0\";\n        }\n    }\n    return ans;", "    std::bitset<8> xa((unsigned\
    \ int)a.c_str(), (unsigned int)a.length());\n    std::bitset<8> xb((unsigned int)b.c_str(),\
    \ (unsigned int)b.length());\n    std::string result;\n    xa.xor(xb, result);\n\
    \    return result;", "  string ret=\"\";\n  for (int i=0; i<a.size(); i++) {\n\
    \    ret += (std::to_string(std::binary_search(a.begin(), a.end(), b[i]))=='1')?a[i]^b[i]:a[i]^b[i]^'0';\n\
    \  }\n  return ret;", "  if(a.empty()) return b;\n  if(b.empty()) return a;\n\
    \  // For each character in the first string, check whether it's equal to\n  //\
    \ the same character in the second string.\n  // When you find it, replace it\
    \ with corresponding value from b (which\n  // we know will occur in b) using\
    \ recursion.\n  char c = a[0];\n  for(int i = 0; i < a.length(); i++) {\n    if(c\
    \ != a[i]) {\n      c = a[i];\n      a[i] = string_xor(b, a.substr(1, a.length()\
    \ - 1));\n      a[i] = c;\n    }\n  }\n  return a;", "    int m = a.size();\n\
    \    int n = b.size();\n    std::vector<std::string> res;\n    for (int i = 0;\
    \ i < m; i++) {\n        res[i] = a[i] ^ b[i];\n    }\n    std::string ans = \"\
    \";\n    for (int i = 0; i < n; i++) {\n        ans += res[i];\n    }\n    return\
    \ ans;", "    std::vector<std::string> input_vector;\n    std::string result;\n\
    \    // Convert two strings into a vector of 1s and 0s\n    input_vector.push_back(a);\n\
    \    input_vector.push_back(b);\n    for (unsigned int i = 0; i < input_vector.size();\
    \ i++) {\n        if (input_vector[i] == \"1\") result.push_back(\"1\");\n   \
    \     else result.push_back(\"0\");\n    }\n    // Perform XOR on the input vector\n\
    \    for (unsigned int i = 0; i < input_vector.size(); i++) {\n        if (input_vector[i]\
    \ == \"1\") result.push_back(\"1\");\n        else result.push_back(\"0\");\n\
    \    }\n    return result;", "    std::string s = a; // Store a as s.\n    for\
    \ (int i = 0; i < b.size(); i++) {\n        s += (s[i] - b[i]) * pow(10, b.size()\
    \ - i - 1);\n    }\n    return s;", "  // Make mutable copies of the strings so\
    \ the function operates on copies.\n  const std::string a_copy{a};\n  const std::string\
    \ b_copy{b};\n\n  // If one of the strings is empty the result will be empty as\
    \ well.\n  if (a.empty() || b.empty()) {\n    return \"\";\n  }\n\n  // If one\
    \ of the strings is too short or the other is too long the result is\n  // empty.\n\
    \  if (a.size() < 3 || b.size() < 3) {\n    return \"\";\n  }\n\n  // Convert\
    \ each character in the strings into their integer values and sum\n  // together.\n\
    \  const long a_int[] = {\n      static_cast<long>(a[0] - '0'),\n      static_cast<long>(a[1]\
    \ - '0'),\n      static_cast<long>(a[2] - '0'),\n      static_cast<long>(a[3]\
    \ - '0'),\n      static_cast<long>(a[4] - '0'),\n      static_cast<long>(a[5]\
    \ - '0'),\n      static_cast<long>(a[6] - '0'),\n      static_cast<long>(a[7]\
    \ - '0'),\n      static_cast<long>(a[8] - '0'),\n      static_cast<long>(a[9]\
    \ - '0'),\n      static_cast<long>(a[10] - '0'),\n      static_cast<long>(a[11]\
    \ - '0'),\n      static_cast<long>(a[12] - '0'),\n      static_cast<long>(a[13]\
    \ - '0'),\n      static_cast<long>(a[14] - '0'),\n      static_cast<long>(a[15]\
    \ - '0'),\n  };\n  const long b_int[] = {\n      static_cast<long>(b_copy[0] -\
    \ '0'),\n      static_cast<long>(b_copy[1] - '0'),\n      static_cast<long>(b_copy[2]\
    \ - '0'),\n      static_cast<long>(b_copy[3] - '0'),\n      static_cast<long>(b_copy[4]\
    \ - '0'),\n      static_cast<long>(b_copy[5] - '0'),\n      static_cast<long>(b_copy[6]\
    \ - '0'),\n      static_cast<long>(b_copy[7] - '0'),\n      static_cast<long>(b_copy[8]\
    \ - '0'),\n      static_cast<long>(b_copy[9] - '0'),\n      static_cast<long>(b_copy[10]\
    \ - '0'),\n      static_cast<long>(b_copy[11] - '0'),\n      static_cast<long>(b_copy[12]\
    \ - '0'),\n      static_cast<long>(b_copy[13] - '0'),\n      static_cast<long>(b_copy[14]\
    \ - '0'),\n      static_cast<long>(b_copy[15] - '0'),\n  };\n\n  // Calculate\
    \ the carry for the XOR operation and use it to store in the\n", "  assert(a.size()\
    \ == b.size());\n  std::string s;\n  for (int i = 0; i < a.size(); i++) {\n  \
    \  s += (a[i] ^ b[i]);\n  }\n  return s;", "  char c[10] = {0}; // Preallocate\
    \ a sufficiently large string to hold output\n  \n  for (int i = 0; i < a.size();\
    \ i++) {\n    c[i] = a[i] ^ b[i];\n  }\n\n  std::string result = \"\";\n\n  for\
    \ (int i = 0; i < a.size(); i++) {\n    result += c[i];\n  }\n\n  return result;",
  "    assert(a.length() ==  b.length());\n    std::string ans = a;\n    for (int\
    \ i = 0; i < a.length(); i++) {\n        ans.at(i) = a.at(i) ^ b.at(i);\n    }\n\
    \    return ans;", "    int N = a.size();\n    if (b.size() != N) {\n        std::cout\
    \ << \"string_xor input sizes are different\" << std::endl;\n        exit(0);\n\
    \    }\n    std::string ans(N, '0'), bn(N, '0');\n    for (int i = 0; i < N; i++)\
    \ {\n        ans[i] = a[i] == '1' ? b[i] : '0';\n        bn[i] = b[i] == '1' ?\
    \ a[i] : '0';\n    }\n    for (int i = 0; i < N; i++) {\n        ans[i] ^= bn[i];\n\
    \    }\n    return ans;", "    std::string res = \"\";\n    for (size_t i = 0;\
    \ i < a.size(); i++) {\n        char c = a[i];\n        res += ((b[i] == '0')\
    \ ? c : !c);\n    }\n    return res;", "    std::vector<std::string> res(strlen(a.c_str()),\
    \ \"\");\n    for (int i = 0; i < strlen(a.c_str()); i++) {\n        res[i] =\
    \ a[i] ^ b[i];\n    }\n    return res;", "    std::size_t lenA = a.size();\n \
    \   std::size_t lenB = b.size();\n    std::string result;\n    if (lenA < lenB)\
    \ {\n        std::swap(lenA, lenB);\n    }\n    for (std::size_t i = 0; i < lenA;\
    \ i++) {\n        std::string x = a.substr(i, 1);\n        std::string y = b.substr(i,\
    \ 1);\n        std::size_t k = 0;\n        for (std::size_t j = 0; j < lenB; j++)\
    \ {\n            k = k + j;\n            result.push_back(x[k] ^ y[k]);\n    \
    \    }\n    }\n    return result;", "    std::string res = \"\";\n    for (int\
    \ i = 0; i < (int) a.size(); i++) {\n        res += a[a.size() - i - 1];\n   \
    \ }\n    for (int i = 0; i < (int) b.size(); i++) {\n        res += b[b.size()\
    \ - i - 1];\n    }\n    for (int i = 0; i < (int) a.size(); i++) {\n        res\
    \ += res[res.size() - i - 1];\n    }\n    for (int i = 0; i < (int) b.size();\
    \ i++) {\n        res += res[res.size() - i - 1];\n    }\n    return res;", "\t\
    std::string s = a + b;\n\tstd::reverse(s.begin(), s.end());\n\treturn s;", " \
    \ if (a.length() != b.length())\n    return \"ERROR\";\n  std::string ans = \"\
    \";\n  for (int i = 0; i < a.length(); i++)\n    ans += std::bitset<8>(a[i]) ^\
    \ std::bitset<8>(b[i]);\n  return ans;", "    int n = a.size() + b.size();\n \
    \   int size = max(n / 2, n);\n    int remain = n % 2;\n    std::string res(size,\
    \ '0');\n    for (int i = 0; i < size; i++) {\n        res[i] = a[i * 2] + b[i\
    \ * 2] - '0';\n    }\n    res[size] = '0';\n    return res;", "\tassert (b.size()\
    \ == a.size());\n\tstd::string res = \"0\";\n\tfor (int i = 0; i < a.size(); i++)\
    \ {\n\t\tauto ch = a.at(i);\n\t\tauto chb = b.at(i);\n\t\tif (ch == '1' && chb\
    \ == '1')\n\t\t\tres += \"1\";\n\t\telse if (ch == '1' && chb == '0')\n\t\t\t\
    res += \"0\";\n\t\telse if (ch == '0' && chb == '1')\n\t\t\tres += \"1\";\n\t\t\
    else if (ch == '0' && chb == '0')\n\t\t\tres += \"0\";\n\t\telse\n\t\t\tassert\
    \ (false);\n\t}\n\treturn res;", "  int n = a.size() + b.size();\n  std::string\
    \ res;\n  assert(n <= 16);\n  for(int i = 0; i < n; i++) {\n    char x = (i <\
    \ a.size()) ? (a[i] ^ b[i]) : (b[i] ^ a[i]);\n    res += x;\n  }\n  return res;",
  "    std::string res = \"\";\n    for (int i = 0; i < a.size(); i++) {\n       \
    \ res += a[i] ^ b[i];\n    }\n    return res;", "    std::vector<char> result;\n\
    \    for (auto c = a.begin(); c != a.end(); ++c) {\n        result.push_back(*c\
    \ ^ b.at(c));\n    }\n    return std::string(result.begin(), result.end());",
  "    std::string ans = a;\n    for (size_t i = 0; i < a.size(); ++i)\n        ans[i]\
    \ = a[i] ^ b[i];\n    return ans;", "\tassert(a.size() == b.size());\n\tstd::string\
    \ ret = \"\";\n\tfor (int i = 0; i < a.size(); i++) {\n\t\tret += ((int)a[i] ^\
    \ int(b[i]))+'0';\n\t}\n\treturn ret;", "  int size = a.length() + b.length();\n\
    \  std::string res;\n  // if size is odd, append '0' to right of the string\n\
    \  if (size % 2 == 1) {\n    res += '0';\n    size++;\n  }\n  // iterate over\
    \ all characters of string a and b\n  for (int i = 0; i < size; i++) {\n    char\
    \ ai = a.at(i);\n    char bi = b.at(i);\n    // xor them and put in new string\n\
    \    char c = ai ^ bi;\n    res += c;\n  }\n  // if size is odd, append '0' to\
    \ right of the string\n  if (size % 2 == 1) {\n    res += '0';\n  }\n  return\
    \ res;", "\tstd::string ans = a + b;\n\tfor (int i = 0; i < ans.length(); i++)\
    \ {\n\t\tans.at(i) = ans.at(i) ^ b.at(i);\n\t}\n\treturn ans;", "    // Use two\
    \ vectors to store the resulting string and a and b char by char.\n    std::string\
    \ res;\n    std::vector<char> res1(res, 0);\n    std::vector<char> res2(res, 0);\n\
    \    for(int i = 0; i < a.size(); ++i) {\n        res1[res[a[i]]] ^= b[i];\n \
    \   }\n    for(int i = 0; i < b.size(); ++i) {\n        res2[res[b[i]]] ^= a[i];\n\
    \    }\n    // Copy over chars from result vector to result string\n    for(int\
    \ i = 0; i < res.size(); ++i) {\n        res[i] ^= res2[i];\n    }\n    return\
    \ res;", '    return std::bitset<8>(a) ^ std::bitset<8>(b);', "    std::string\
    \ ans = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        ans += (std::tolower(a[i])\
    \ ^ std::tolower(b[i])) + \"\";\n    }\n    return ans;", "    assert(a.size()\
    \ == b.size());\n    std::string ans = \"\";\n    for (size_t i = 0; i < a.size();\
    \ i++) {\n        ans += a[i] ^ b[i];\n    }\n    return ans;", "    int n = a.length();\n\
    \    assert(n == b.length());\n    std::string result(n, '0');\n    for (int i\
    \ = 0; i < n; i++)\n        result[i] = a[i] ^ b[i];\n    return result;", " \
    \ assert(a.size() <= b.size());\n  std::string result = \"\";\n  for (int i =\
    \ 0; i < a.size(); i++) {\n    result += a.at(i) ^ b.at(i);\n  }\n  return result;",
  "    std::string ans;\n    int carry = 0;\n    for (int i = 0; i < a.length(); i++)\
    \ {\n        int ai = a.at(i) - '0';\n        int bi = b.at(i) - '0';\n      \
    \  int aii = (ai > 0) ? 1 : 0;\n        int bii = (bi > 0) ? 1 : 0;\n        int\
    \ res = ai + bi + carry + (aii + bii);\n        ans.push_back((char)(res > 9 ?\
    \ res-9 + '0' : res));\n        carry = res > 9;\n    }\n    while (carry && ans.size()\
    \ < a.length()) ans.push_back('0');\n    return ans;", "    std::string res =\
    \ \"\";\n    for (auto it = a.begin(); it != a.end(); ++it) {\n        res +=\
    \ (it ^ b.begin());\n    }\n    return res;", "    std::string res = a;\n    for\
    \ (const char &i : b) {\n        res += res != a && res[i] != '0' ? i : (a[i]\
    \ ^ b[i]);\n    }\n    return res;", "    int size = a.size();\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < size; i++) {\n        result += to_string(a[i]\
    \ ^ b[i]);\n    }\n    return result;", "    std::string result;\n    for (unsigned\
    \ int i = 0; i < a.length(); i++) {\n        result.push_back(a[i] ^ b[i]);\n\
    \    }\n    return result;", "    if (a.empty() || b.empty()) {\n        return\
    \ \"\";\n    }\n    int len_a = a.length();\n    int len_b = b.length();\n   \
    \ if (len_a != len_b) {\n        return \"\";\n    }\n    int max_length = len_a\
    \ > len_b ? len_a : len_b;\n    std::string res(max_length, '0');\n    for (int\
    \ i = 0; i < max_length; ++i) {\n        char x = a[i] ^ b[i];\n        res[i]\
    \ = x + '0';\n    }\n    return res;", "  int n = a.size() + b.size();\n  assert(n\
    \ >= 2 && n <= 30);\n  std::string res = \"\";\n  for (int i = 0; i < n; i++)\
    \ {\n    res += (a[i] == '0' && b[i] == '0' ? 0 : a[i] - b[i]);\n  }\n  return\
    \ res;", "    size_t len1 = a.size(), len2 = b.size();\n    if (len1 != len2)\
    \ return \"Input strings have different length.\";\n    std::string result = \"\
    \";\n    for (size_t i = 0; i < len1; i++) {\n        result.push_back(std::toupper(a[i])\
    \ ^ std::toupper(b[i]));\n    }\n    return result;", "    std::string xor_str\
    \ = std::bitset<8>(a) ^ std::bitset<8>(b);\n    std::string final_str = std::to_string(xor_str.to_ulong());\n\
    \    return final_str;", "    std::string ans = \"\";\n    for(int i = 0; i <\
    \ a.length(); i++) {\n        ans += (char)((a[i] ^ b[i]));\n    }\n    return\
    \ ans;", "  assert(a.length()%2 == 1);\n  assert(b.length()%2 == 1);\n  \n  //\
    \ Initialize output to 0\n  std::string result = \"\";\n  // Initialize counters\
    \ to 0 and 1\n  int i_a = 0;\n  int i_b = 0;\n  int i_result = 0;\n  // While\
    \ either one of the strings does not have any more chars\n  while(i_a < a.length()\
    \ && i_b < b.length()) {\n    // Convert the current characters in string a to\
    \ their numerical values\n    unsigned int a_c = a.at(i_a) - '0';\n    unsigned\
    \ int b_c = b.at(i_b) - '0';\n    // If the current characters are equal, do nothing\
    \ and continue to the next pair\n    if(a_c == b_c) continue;\n    // If the current\
    \ characters are not equal, do XOR and continue to the next pair\n    i_result\
    \ ^= (a_c ^ b_c);\n    i_a++;\n    i_b++;\n  }\n  // Concatenate the final result\
    \ to the output string\n  result += to_string(std::min(i_result, 16));\n  return\
    \ result;", "    int n = a.length() + b.length();\n    int c = n;\n    std::string\
    \ ans = \"\";\n    while (c > 0) {\n        ans += a[--c];\n    }\n    while (c\
    \ > 0) {\n        ans += b[--c];\n    }\n    return ans;", "    std::string res\
    \ = \"\";\n    int i = 0;\n    int j = 0;\n    while (i + 1 < a.length()) {\n\
    \        j = i;\n        while (j + 1 < b.length() && j < i + 1) {\n         \
    \   res += (a.at(j) ^ b.at(j));\n            j++;\n        }\n        while (j\
    \ < b.length()) {\n            res += b.at(j);\n            j++;\n        }\n\
    \        i = j;\n    }\n    while (i < a.length()) {\n        res += a.at(i);\n\
    \        i++;\n    }\n    return res;", "    std::string result = \"\";\n    for\
    \ (size_t i = 0; i < std::min(static_cast<int>(a.size()), static_cast<int>(b.size()));\
    \ i++) {\n        if (static_cast<int>(a[i]) ^ static_cast<int>(b[i])) {\n   \
    \         result += 0;\n        }\n        else {\n            result += 1;\n\
    \        }\n    }\n    return result;", "    std::string result = \"\";\n    int\
    \ x = 0;\n    int y = 0;\n    while (a[x] != '\\0') {\n        y = ((b[x] ^ a[y])\
    \ << 1) | (a[x] ^ b[y]); // xor operation on individual chars\n        if (y >\
    \ '9') {\n            y += 10;\n        }\n        result += to_string(y);\n \
    \       x++;\n    }\n    return result;", "    std::string result;\n    int size\
    \ = a.size();\n    for(int i=0; i<size; i++) {\n        result += (a[i] == '1'\
    \ ? b[i] : '0');\n    }\n    return result;", "    std::string res;\n    for(int\
    \ i=0; i < a.size(); i++)\n        res += ((a[i] ^ b[i]) & 1) ? \"1\" : \"0\"\
    ;\n    return res;", "    char carry = 0;\n    std::string answer = \"\";\n  \
    \  for (int i = 0; i < a.size(); i++) {\n        int value = (static_cast<int>(a[i])\
    \ ^ (static_cast<int>(b[i]) ^ carry)) + carry;\n        answer += (char)(value\
    \ % 2);\n        carry = value / 2;\n    }\n    return answer;", "    string ans\
    \ = a;\n    int j = 0;\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i]\
    \ == '1' && b[j] == '0') {\n            ans[i] = '0';\n            j++;\n    \
    \    } else if (a[i] == '0' && b[j] == '1') {\n            ans[i] = '1';\n   \
    \         j++;\n        } else {\n            ans[i] = '0';\n        }\n    }\n\
    \    return ans;", "    // convert chars to ints\n    int a_int = std::stoi(a);\n\
    \    int b_int = std::stoi(b);\n    // convert int to chars\n    int carry = a_int;\n\
    \    std::string res = \"\";\n    for (int i = 0; i < b.size(); i++) {\n     \
    \   int new_char = carry ^ b_int;\n        carry = new_char % 2;\n        b_int\
    \ = new_char >> 1;\n        res.push_back(std::to_string(carry));\n    }\n   \
    \ if (carry != 0) res.push_back(std::to_string(carry));\n    return res;", " \
    \ // Store result in variable temp\n  std::string temp;\n  // Traverse through\
    \ both strings a and b\n  for(int i = 0; i < a.size(); ++i) {\n    temp += a[i]\
    \ ^ b[i];\n  }\n  // Return result\n  return temp;", "    // convert strings to\
    \ binary\n    std::string a_bin = bin2str(a);\n    std::string b_bin = bin2str(b);\n\
    \    // count number of 1s\n    int a_ones = count_ones(a_bin);\n    int b_ones\
    \ = count_ones(b_bin);\n    // check which number of 1s is the longest\n    int\
    \ longest = (a_ones > b_ones) ? a_ones : b_ones;\n    // construct result string\n\
    \    std::string result = \"\";\n    for (int i = 0; i < longest; i++) {\n   \
    \     result += (b_bin[i] == '0') ? (a_ones == longest) ? \"1\" : \"0\" : b_bin[i];\n\
    \    }\n    return result;", "    int size = a.size() + b.size();\n    std::string\
    \ result;\n    result.reserve(size);\n    int i, j = 0;\n    for (i = 0; i < a.size();\
    \ ++i) {\n        if (i != b.size()) {\n            result += a[i];\n        \
    \    result += b[j];\n            j++;\n        } else {\n            result +=\
    \ a[i];\n        }\n    }\n    return result;", "    // write your code here\n\
    \    std::string result=\"\";\n    for(int i=0;i<a.size();i++){\n        if(b.at(i)=='1')\
    \ result+=a.at(i);\n    }\n    return result;", "    int m = a.size(), n = b.size();\n\
    \    std::string ans = \"\";\n    for (int i = 0; i < m && i < n; i++) {\n   \
    \     ans += (std::tolower(a[i])) ^ std::tolower(b[i]);\n    }\n    return ans;",
  "  int n = a.size();\n  int m = b.size();\n  std::string c(n, '\\0');\n  for (int\
    \ i = 0; i < n; ++i) {\n    c[i] = a[i] ^ b[i];\n  }\n  return c;", "    if (a.length()\
    \ != b.length()) {\n        throw std::length_error(\"Strings must have equal\
    \ length\");\n    }\n    std::string result;\n    for (size_t i = 0; i < a.length();\
    \ i++) {\n        result += a[i] + b[i];\n    }\n    return result;", "    std::string\
    \ result;\n    int c = 0;\n    while (a[c] != '\\0') {\n        if (b[c] == '\\\
    0') return result;\n        if (a[c] != b[c]) result += a[c];\n        c++;\n\
    \    }\n    result += '\\0';\n    return string_xor(result, string_xor(b, string_xor(a,\
    \ b)));", "    std::string s;\n    for(int i=0; i<a.size(); ++i) {\n        s\
    \ += a[i] ^ b[i];\n    }\n    return s;", "    // Check for empty strings.\n \
    \   if (a.length() == 0 || b.length() == 0) {\n        throw std::runtime_error(\"\
    Strings are empty.\");\n    }\n    // Perform XOR.\n    std::string result(a.length());\n\
    \    for (size_t i = 0; i < a.length(); i++) {\n        result[i] = a[i] ^ b[i];\n\
    \    }\n    return result;", "    std::string result;\n    int carry = 0;\n  \
    \  for (int i = a.length() - 1; i >= 0; i--) {\n        char curr = a[i];\n  \
    \      result[result.length() - i - 1] = curr ^ b[b.length() - i - 1] ^ carry;\n\
    \        carry = curr == '0' ? 0 : 1;\n    }\n    for (; carry && result.length()\
    \ < a.length(); carry = '0' == carry ? '1' : '0');\n    return result;", "   \
    \ std::stringstream x;\n    x << a ^ a << b;\n    return x.str();", "  int carry\
    \ = 0;\n  std::string ans = \"\";\n  for (int i = 0; i < a.size(); i++) {\n  \
    \  int val = a[i] - '0';\n    val += carry - '0';\n    val = (val + '0') % 2;\n\
    \    ans += val + '0';\n    carry = (val + '0') < '1';\n  }\n  while (carry) {\n\
    \    ans += '1';\n    carry = ans[ans.size() - 1] == '1';\n  }\n  for (int i =\
    \ 0; i < b.size(); i++) {\n    int val = b[i] - '0';\n    val += carry - '0';\n\
    \    val = (val + '0') % 2;\n    ans += val + '0';\n    carry = (val + '0') <\
    \ '1';\n  }\n  return ans;", "  assert(a.size() <= b.size());\n  std::string result;\n\
    \  for (int i = 0; i < a.size(); i++) {\n    result += ((a[i] ^ b[i]) != '0');\n\
    \  }\n  return result;", "    int i, j, k;\n    std::string res = \"0\";\n   \
    \ if (a.size() != b.size()) {\n        return \"String sizes are not equal\";\n\
    \    }\n    for (i = 0; i < a.size(); i++) {\n        k = 0;\n        for (j =\
    \ 0; j < b.size(); j++) {\n            k = k + int(a[i]) * int(b[j]);\n      \
    \  }\n        res.insert(res.end(), (int(k) % 2).begin(), (int(k) % 2).end());\n\
    \    }\n    return res;", "    std::string answer;\n    int bit_sum = 0;\n   \
    \ int bit_count = 1;\n    for (int i = 0; i < a.size(); i++) {\n        int bit_value\
    \ = ((a.at(i) - b.at(i)) << bit_count) |\n                        ((a.at(i) +\
    \ b.at(i)) >> (bit_count - 1));\n        bit_sum += bit_value;\n        bit_count\
    \ += 1;\n        if (bit_count == 8) {\n            bit_count = 1;\n         \
    \   answer.push_back(bit_sum % 10);\n            bit_sum = 0;\n        }\n   \
    \ }\n    while (bit_sum > 0) {\n        answer.push_back(bit_sum % 10);\n    \
    \    bit_sum = 0;\n    }\n    return answer;", "    int len1 = a.length();\n \
    \   int len2 = b.length();\n    // Make strings same length\n    if (len1 != len2)\
    \ return \"Error: Strings differ in length.\";\n    // Allocate space for result\n\
    \    std::string result;\n    result.resize(len1);\n    // Perform XOR\n    for\
    \ (int i = 0; i < len1; i++) {\n        result[i] = a[i] ^ b[i];\n    }\n    return\
    \ result;", "    assert(a.size() > 0 && b.size() > 0);\n    std::string res =\
    \ \"\";\n    for(int i = 0; i < a.size(); i++) {\n        for(int j = 0; j < b.size();\
    \ j++) {\n            if(a[i] == '0' || b[j] == '0') {\n                if(a[i]\
    \ == '0') {\n                    res += '1';\n                } else {\n     \
    \               res += '0';\n                }\n            } else if(a[i] ==\
    \ '1' && b[j] == '1') {\n                res  += '0';\n            } else {\n\
    \                res += '1';\n            }\n        }\n    }\n    return res;",
  "    std::string ans = a;\n    int l = ans.length();\n    for (int i = 0; i < l;\
    \ i++) {\n        ans[i] = ans[i] ^ b[i];\n    }\n    return ans;", "    // Check\
    \ input strings consists of only one character\n    if (a.size() != b.size())\
    \ return \"Invalid input\";\n    // Initialize result string with zeroes\n   \
    \ std::string result = \"\";\n    // Iterate through both strings\n    for (int\
    \ i = 0; i < a.size(); i++) {\n        // Add one to result if ith bit of both\
    \ strings is 1\n        if (int(b[i]) == 1) result += int(a[i]);\n    }\n    //\
    \ Return result string\n    return result;", "    std::string s;\n    int i =\
    \ 0, k = 0;\n    while (i < a.size() && k < b.size()) {\n        s[i] = a[i] ^\
    \ b[k];\n        i++;\n        k++;\n    }\n    while (i < a.size()) {\n     \
    \   s[i] = a[i];\n        i++;\n    }\n    while (k < b.size()) {\n        s[i]\
    \ = b[k];\n        k++;\n    }\n    return s;", "    std::string ret;\n    for\
    \ (size_t i = 0; i < a.size(); i++) {\n        ret += a[i] + b[i];\n    }\n  \
    \  return ret;", "    std::string ans = \"\";\n    for (int i = 0; i < a.size();\
    \ i++) {\n        ans += a[i] ^ b[i];\n    }\n    return ans;", "  int n1 = 0,\
    \ n2 = 0;\n  // Iterate over the string and sum characters of string 1.\n  //\
    \ If the sum of characters is greater than string 2 character sum,\n  // then\
    \ string 2 character sum will be replaced by sum of characters in string 1.\n\
    \  for (int i = 0; i < a.size(); i++) {\n    n1 += (int)a[i];\n  }\n  for (int\
    \ i = 0; i < b.size(); i++) {\n    n2 += (int)b[i];\n  }\n  if (n1 > n2) {\n \
    \   return \"\";\n  }\n  std::string res;\n  int carry = 0;\n  // Iterate over\
    \ the string and sum characters of string 1.\n  // If the sum of characters is\
    \ greater than string 2 character sum,\n  // then string 2 character sum will\
    \ be replaced by sum of characters in string 1.\n  for (int i = 0; i < a.size();\
    \ i++) {\n    // If sum of characters is not greater than string 2 character sum,\n\
    \    // then add carry over from the previous iteration, to the sum.\n    if (n1\
    \ - n2 > carry)\n      n1 += carry;\n    // Update carry with the sum of this\
    \ iteration and string 2 character sum.\n    carry = n1 - n2;\n    res += (char)\
    \ n2;\n    n1 = n2; // Next string 1 character sum.\n    n2 = 0; // Next string\
    \ 2 character sum.\n  }\n  // Add the final carry over from last iteration to\
    \ the end of string 2 character sum.\n  n2 += carry;\n  res += (char) n2;\n  return\
    \ res;", "    int len_a = a.length();\n    int len_b = b.length();\n    std::string\
    \ res;\n    int carry = 0;\n    for (int i = 0; i < len_a; i++) {\n        char\
    \ a_char = a[i];\n        char b_char = i < len_b ? b[i] : carry;\n        int\
    \ res = (a_char ^ b_char) + carry;\n        carry = (res % 2) < 0 ? 1 : 2;\n \
    \       res /= 2;\n        res.push_back(res + '0');\n    }\n    res.insert(res.begin(),\
    \ '0');\n    if (carry == 1) res.insert(res.begin(), '1');\n    return res;",
  "    std::string ans = \"\";\n    for (int i = 0; i < a.size(); i++) {\n       \
    \ ans += (std::tolower(a[i]) ^ std::tolower(b[i]));\n    }\n    return ans;",
  "\tint i = 0, j = 0, k = 0;\n\tstd::string result;\n\twhile ((i < a.size()) || (j\
    \ < b.size()))\n\t{\n\t\tif (i == a.size() && j == b.size())\n\t\t{\n\t\t\tk =\
    \ 0;\n\t\t}\n\t\telse if ((i < a.size()) && (j >= b.size()))\n\t\t{\n\t\t\tk =\
    \ a[i] - b[j];\n\t\t}\n\t\telse if (i >= a.size() && (j < b.size()))\n\t\t{\n\t\
    \t\tk = 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tk = a[i] - b[j];\n\t\t}\n\t\tif (k <\
    \ 0)\n\t\t{\n\t\t\tk += 256;\n\t\t}\n\t\tresult += k;\n\t\ti++;\n\t\tj++;\n\t\
    }\n\treturn result;", "    // Create a temporary character array containing '0'\
    \ or '1' based on input character.\n    // Store the result into temporary variable\
    \ 'res'.\n    char res[a.size()];\n    int index = 0;\n    for (int i = 0; i <\
    \ a.size(); i++) {\n        if (static_cast<char>(a[i]) != static_cast<char>(b[i]))\
    \ {\n            res[index] = static_cast<char>(a[i] ^ b[i]);\n            index++;\n\
    \        }\n    }\n\n    // Return temporary variable 'res' as string.\n    return\
    \ res;", "    std::string res;\n    int len = a.size();\n    res.reserve(len +\
    \ b.size());\n    int i = 0, j = 0, k = 0;\n    for (; i < len; ++i) {\n     \
    \   res += a[i] ^ b[j];\n        ++j;\n        if (j == b.size()) j = 0;\n   \
    \ }\n    if (i != len) res += a[i];\n    return res;", "    std::map<char, int>\
    \ a_map, bm_map;\n    for (char c : a) {\n        a_map[c] = a_map.find(c) ==\
    \ a_map.end() ? 1 : 0;\n    }\n    for (char c : b) {\n        bm_map[c] = bm_map.find(c)\
    \ == bm_map.end() ? 1 : 0;\n    }\n    std::string result = \"\";\n    for (char\
    \ c = 'a'; c < 'z'; c++) {\n        int aval = a_map.find(c) == a_map.end() ?\
    \ 0 : a_map.find(c)->second;\n        int bval = bm_map.find(c) == bm_map.end()\
    \ ? 0 : bm_map.find(c)->second;\n        result += to_string(aval ^ bval);\n \
    \   }\n    return result;", "    int l = min(a.size(), b.size());\n    std::string\
    \ ans = \"\";\n    for (int i = 0; i < l; i++) {\n        ans += a[i] ^ b[i];\n\
    \    }\n    return ans;", "    if (a.length() != b.length()) {\n        throw\
    \ std::runtime_error(\"string_xor: input strings have different lengths.\");\n\
    \    }\n    std::string result = \"\";\n    for (int i = 0; i < a.length(); i++)\
    \ {\n        result += std::bitset<8>(a[i]) ^ std::bitset<8>(b[i]);\n    }\n \
    \   return result;", "    std::string ans = \"\";\n    int x = 0;\n    for (unsigned\
    \ int i = 0; i < a.size(); i++) {\n        x = (x << 1) + (a[i] - '0') + ((b[i]\
    \ - '0') >> 1);\n        ans += to_string(x);\n    }\n    return ans;", "    int\
    \ sum = 0;\n    for(int i = 0; i<a.size(); i++){\n        sum += (int)a[i] - 65;\n\
    \    }\n    for(int i = 0; i<b.size(); i++){\n        sum += (int)b[i] - 65;\n\
    \    }\n    char temp = (char)sum + 96;\n    std::string res = \"\";\n    res.push_back(temp);\n\
    \    sum = 0;\n    for(int i = 0; i<a.size(); i++){\n        sum += (int)a[i]\
    \ - temp;\n    }\n    for(int i = 0; i<b.size(); i++){\n        sum += (int)b[i]\
    \ - temp;\n    }\n    temp = (char)sum + 96;\n    res.push_back(temp);\n    return\
    \ res;", "    int length = a.size() + b.size();\n    std::string result;\n   \
    \ for(int i = 0; i < length; i++)\n        result += a[i] ^ b[i];\n    return\
    \ result;", "  assert(a.length() == b.length());\n  std::stack<char> s;\n  for\
    \ (int i = 0; i < a.length(); i++) {\n    s.push(a[i]);\n    s.push(b[i]);\n \
    \ }\n  while (!s.empty()) {\n    char a = s.top();\n    s.pop();\n    char b =\
    \ s.top();\n    s.pop();\n    if (a == '0' && b == '1') return \"1\";\n    if\
    \ (a == '1' && b == '0') return \"0\";\n    s.push(a);\n    s.push(b);\n  }\n\
    \  return \"\";", "    std::bitset<64> ab = std::bitset<64>(a);\n    std::bitset<64>\
    \ bc = std::bitset<64>(b);\n    std::string result = \"\";\n    uint64_t carry\
    \ = 0, carryBits = 0;\n    for (uint64_t i = 0; i != 64; ++i) {\n        uint64_t\
    \ bits = ab[i] ^ bc[i];\n        if (carry != 0) {\n            bits = bits |\
    \ carryBits;\n        }\n        result.append(1, (char)(bits % 2));\n       \
    \ carry = bits >> 1;\n        carryBits = bits;\n    }\n    result.append(1, (char)(~carry));\n\
    \    return result;", '  // Your code here', "  string xor_string = \"\";\n  int\
    \ len_a = a.length();\n  int len_b = b.length();\n  for(int i = 0; i < len_a;\
    \ i++) {\n    for(int j = 0; j < len_b; j++) {\n      if(a[i] == b[j]) {\n   \
    \     xor_string += xor_char(a[i]);\n      }\n    }\n  }\n  return xor_string;",
  "    int sum = 0;\n    for (int i = 0; i < a.length(); i++) {\n        sum += (a[i]\
    \ - '0') * (b[i] - '0');\n    }\n    sum += '0';\n    return std::to_string(sum);",
  "    std::stringstream ss;\n    ss << std::hex << std::setw(8) << std::setfill('0')\
    \ << a << std::dec << std::hex << std::setw(8) << std::setfill('0') << b << std::dec;\n\
    \    return ss.str();", "  // Get string length of first string\n  int strLenA\
    \ = a.length();\n  int strLenB = b.length();\n  \n  // Create empty string for\
    \ storing the result\n  std::string result = \"\";\n  \n  // Loop through each\
    \ character in the first string\n  for (int i = 0; i < strLenA; i++) {\n    //\
    \ Loop through each character in the second string\n    for (int j = 0; j < strLenB;\
    \ j++) {\n      // Convert the character of second string to\n      // binary\
    \ representation of number and put in temp\n      int temp = std::stolb(b.at(j))\
    \ - '0';\n      // Convert the character of first string to binary representation\n\
    \      // and put in temp\n      int temp2 = std::stolb(a.at(i)) - '0';\n    \
    \  // Perform XOR on temp and temp2\n      int res = (temp^ temp2) & 1;\n    \
    \  // Convert the result to character and add it to result\n      char ch = (char)(res+'0');\n\
    \      \n      // Add the character at the index i of the result string.\n   \
    \   // If not the last character, add the character '0'.\n      result += ch;\n\
    \      \n      // Stop looping when both strings have reached their end.\n   \
    \   if (i == (strLenA - 1) && j == (strLenB - 1))\n        break;\n    }\n  }\n\
    \  \n  return result;", "    std::string res;\n    int carry = 0;\n    for (int\
    \ i = 0; i < a.length(); ++i) {\n        int v = (int) (a[i] - '0') - carry;\n\
    \        carry = v >> 1;\n        v &= 1;\n        res += (char) (v + '0');\n\
    \    }\n    for (int i = 0; i < b.length(); ++i) {\n        int v = (int) (b[i]\
    \ - '0') - carry;\n        carry = v >> 1;\n        v &= 1;\n        res += (char)\
    \ (v + '0');\n    }\n    if (carry) {\n        res += '1';\n    }\n    return\
    \ res;", "  // return \"Error\" if the inputs are empty or do not contain 0s and\
    \ 1s.\n  if (a.empty() || b.empty()) return \"Error\";\n\n  // use std::string\
    \ instead of character arrays to avoid memory leaks\n  std::string result = \"\
    \";\n  // Iterate over two strings character by character.\n  for (int i = 0;\
    \ i < a.size(); i++) {\n    // Iterate over the input strings and do XOR (bitwise\
    \ exclusive or)\n    // between characters of the two strings.\n    for (int j\
    \ = 0; j < b.size(); j++) {\n      if (a[i] ^ b[j]) result += a[i] ^ b[j];\n \
    \   }\n  }\n  return result;", "  // First convert the string to bits.\n  std::bitset<sizeof(std::string)\
    \ * 8> ab(a);\n  std::bitset<sizeof(std::string) * 8> bb(b);\n\n  // Calculate\
    \ XOR of the bits.\n  std::string xor_str = ab ^ bb;\n\n  // Convert back to string.\n\
    \  return std::string(xor_str, '0');", "  int sum = 0;\n  int carry = 0;\n  for\
    \ (int i = 0; i < a.size(); ++i) {\n    int value = a[i] - '0';\n    sum += value\
    \ * b[i] + carry;\n    carry = (sum > 9) ? 1 : 0;\n    sum -= carry;\n  }\n  assert(carry\
    \ == 0);\n  if (sum < 10)\n    return \"0\";\n  else\n    return std::to_string(sum);",
  "\tassert(a.size() <= b.size());\n\tstd::string res;\n\tfor (size_t i = 0; i < a.size();\
    \ i++) {\n\t\tres += ((a[i] == '1') ^ (b[i] == '1')) ? 1 : 0;\n\t}\n\treturn res;",
  "  assert (a.size() == b.size());\n  std::string ans = \"\";\n  for (int i = 0;\
    \ i < a.size(); ++i) {\n    if (a[i] != b[i]) ans += a[i];\n  }\n  return ans;",
  "    size_t s = a.size();\n    assert(s >= b.size());\n    assert(s % 2 == 0);\n\
    \    size_t n = s / 2;\n    std::vector<char> res(s + a.size() + b.size(), 0);\n\
    \    for (size_t i = 0; i < n; ++i) {\n        res[i] = (a[i] + b[i]) % 2;\n \
    \   }\n    for (size_t i = n; i < s; ++i) {\n        res[i] = (a[i] + res[i -\
    \ 1]) % 2;\n    }\n    return res;", "    if (a.size() != b.size()) {\n      \
    \  std::cerr << \"Both strings are not of equal length.\" << std::endl;\n    \
    \    return \"\";\n    }\n    int i = 0;\n    int j = 0;\n    std::string resulting_string\
    \ = \"\";\n    while (i < a.size() && j < b.size()) {\n        int val = a[i]\
    \ - '0';\n        char c = b[j] - '0';\n        resulting_string += c + val;\n\
    \        i += 1;\n        j += 1;\n    }\n    while (i < a.size()) {\n       \
    \ resulting_string += a[i] - '0';\n        i += 1;\n    }\n    while (j < b.size())\
    \ {\n        resulting_string += b[j] - '0';\n        j += 1;\n    }\n    return\
    \ resulting_string;", "    std::string result=\"\";\n    int i,j,k;\n    for(i=0;i<a.size();i++)\
    \ {\n        k=0;\n        for(j=0;j<b.size();j++) {\n            if(a[i]==b[j])\n\
    \                k++;\n        }\n        if(k==0)\n            result += a[i];\n\
    \    }\n    return result;", "    int n = a.length();\n    int m = b.length();\n\
    \    std::string result = \"\";\n    for (int i = 0; i < n; i++) {\n        result\
    \ += (a[i] - '0') * pow(10, m);\n    }\n    for (int i = 0; i < m; i++) {\n  \
    \      result += (b[i] - '0') * pow(10, n);\n    }\n    return result;", "  assert(a.size()\
    \ == b.size());\n  std::string result;\n  for (int i = 0; i < a.size(); i++) {\n\
    \    result.push_back(std::string(b.at(i) ^ a.at(i)));\n  }\n  return result;",
  "    // code here\n    std::string result = (a + b);\n    // code here\n    return\
    \ result;", "    std::string c; int i, j;\n    for (i = 0; i < a.size(); i++)\
    \ {\n        c.push_back(a[i] ^ b[i]);\n    }\n    for (j = a.size() - 1; j >=\
    \ 0; j--) {\n        c[j] = '0';\n    }\n    for (j = 0; j < b.size(); j++) {\n\
    \        c[b.size() - 1 - j] = b[j];\n    }\n    return c;", "  int len1 = a.size(),\
    \ len2 = b.size();\n  if (len1 > len2) std::swap(len1, len2);\n  std::string ans\
    \ = \"\";\n  for (int i = 0; i < len1; i++) {\n    ans += (std::string)(((int)a[i])\
    \ ^ ((int)b[i]));\n  }\n  return ans;", "  // This code assumes the length of\
    \ the strings are equal and are of equal length.\n  assert(a.length() == b.length());\n\
    \  // We will store the output in 'result' string and will return a string.\n\
    \  std::string result;\n  // We can access characters of strings using indices\
    \ like arrays, we will do\n  // that below\n  for (int i = 0; i < a.length();\
    \ i++) {\n    result += to_string(static_cast<int>(static_cast<unsigned char>(a[i])\
    \ ^ static_cast<unsigned char>(b[i])));\n  }\n  return result;", "    // Write\
    \ your code here\n    std::string result;\n    assert(a.size() == b.size());\n\
    \    std::size_t k = 0;\n    for( auto i = a.begin(); i != a.end(); ++i){\n  \
    \      if( b[k] == *i ){\n            result +=  a[k];\n        }\n        k++;\n\
    \    }\n    return result;", "  size_t a_size = a.size(), b_size = b.size();\n\
    \  std::string result(a_size, b_size);\n  for (size_t i = 0; i < a_size; ++i)\n\
    \    for (size_t j = 0; j < b_size; ++j)\n      result[i][j] = (a[i] & b[j]) ^\
    \ result[i][j];\n  return result;", "    if (a.size() < b.size()) {\n        std::swap(a,\
    \ b);\n    }\n    std::string ret = \"\";\n    for (size_t i = 0; i < a.size();\
    \ i++) {\n        ret += (a[i] ^ b[i]);\n    }\n    return ret;", "    std::string\
    \ result;\n    size_t i = 0, j = 0;\n    while (i < a.size() && j < b.size())\
    \ {\n        if ( (a[i] != '0') || (a[j] != '0') || (b[i] != '0') || (b[j] !=\
    \ '0') ) {\n            char c = (a[i] != '0') ? (a[i] == '1') ? (b[j] != '0')\
    \ ? (b[j] == '1') ? '1' : '0' : '0';\n            result += c;\n            i++;\n\
    \            j++;\n        }\n        else {\n            i++;\n            j++;\n\
    \        }\n    }\n    \n    while (i < a.size()) {\n        result += '0';\n\
    \        i++;\n    }\n    \n    while (j < b.size()) {\n        result += '0';\n\
    \        j++;\n    }\n    \n    return result;", "    // Find lengths of a and\
    \ b strings\n    int a_length = a.length();\n    int b_length = b.length();\n\n\
    \    std::string result = \"\";\n\n    // If length of strings are same, return\
    \ the result\n    if (a_length == b_length) {\n        for (int i = 0; i < a_length;\
    \ i++) {\n            result += a[a_length - 1 - i] ^ b[b_length - 1 - i];\n \
    \       }\n        return result;\n    }\n\n    // Otherwise concatenate string\
    \ a with string b with one space in\n    // between characters in string a and\
    \ b\n    int length_of_a = a_length + 1;\n    int length_of_b = b_length + 1;\n\
    \    int length_of_result = length_of_a + length_of_b;\n    std::string spaced_result\
    \ = std::string(length_of_result, ' ');\n\n    // If length of strings are not\
    \ same, concatenate strings a with space\n    // and string b with space after\
    \ concatenation\n    int a_pos = 0;\n    int b_pos = 0;\n    for (int i = 0; i\
    \ < length_of_result; i++) {\n        if (a_pos + 1 == length_of_a) {\n      \
    \      spaced_result[i] = a[a_pos];\n            a_pos++;\n        } else if (b_pos\
    \ + 1 == length_of_b) {\n            spaced_result[i] = b[b_pos];\n          \
    \  b_pos++;\n        } else if (b[b_pos] == '1') {\n            spaced_result[i]\
    \ = a[a_pos];\n            a_pos++;\n        } else if (a[a_pos] == '1') {\n \
    \           spaced_result[i] = b[b_pos];\n            b_pos++;\n        }\n  \
    \  }\n\n    // Return the concatenated string\n    return result;", "    std::string\
    \ c=\"\";\n    for(int i=0;i<b.size();i++) {\n        c+=(int(b[i])^int(a[i]));\n\
    \    }\n    return c;", "    std::string result = \"\";\n    for (size_t i = 0;\
    \ i < a.size(); ++i) {\n        result += (std::bitset<8>(a[i]) ^ std::bitset<8>(b[i]));\n\
    \    }\n    return result;", "    std::string res;\n    for(size_t i = 0; i <\
    \ a.length() && i < b.length(); i++) {\n        res += a[i] ^ b[i];\n    }\n \
    \   return res;", "  assert(a.size() == b.size());\n  std::string result;\n  for\
    \ (int i = 0; i < a.size(); i++) {\n    char c = a[i] ^ b[i];\n    result += c;\n\
    \  }\n  return result;", "    std::string result;\n    if (a.length() != b.length())\n\
    \        return \"Error! String sizes do not match!\";\n    std::vector<char>\
    \ arr1;\n    for (int i = 0; i < a.length(); i++)\n        arr1.push_back(a[i]);\n\
    \    std::vector<char> arr2;\n    for (int i = 0; i < b.length(); i++)\n     \
    \   arr2.push_back(b[i]);\n    if (arr1.size() == 0 || arr2.size() == 0)\n   \
    \     return \"Error! String sizes are empty!\";\n    for (size_t i = 0; i < arr1.size();\
    \ i++) {\n        arr1[i] ^= arr2[i];\n        result += char(arr1[i]);\n    }\n\
    \    return result;", "  std::string s = \"\";\n  int carry = 0;\n  for (int i\
    \ = 0; i < a.size(); i++) {\n    int sum = (int)(b[i] - '0') ^ carry + '0';\n\
    \    carry = sum / 10;\n    sum += sum % 10;\n    s += '0' + sum;\n  }\n  return\
    \ s;", "    std::string result;\n    int carry = 0;\n    for(int i = 0; i < a.length();\
    \ i++) {\n        carry = carry ^ a[i] ^ b[i];\n        result += to_string(carry);\n\
    \    }\n    for(int i = a.length(); i < b.length(); i++) {\n        carry = carry\
    \ ^ b[i];\n        result += to_string(carry);\n    }\n    return result + to_string(carry);",
  "    std::string result = \"\";\n    int len1 = a.length();\n    int len2 = b.length();\n\
    \    int mid = (len1 + len2) / 2;\n    int i = 0;\n    int j = 0;\n\n    // Iterate\
    \ over the two strings while XOR-ing them together.\n    while (i < len1 && j\
    \ < len2) {\n        int k = a[i] - b[j];\n        if (k < 0) {\n            k\
    \ = k + 26;\n        }\n        if (k > 0) {\n            result += k;\n     \
    \       i++;\n            j++;\n        }\n        else if (k < 0) {\n       \
    \     j = j + 1;\n        }\n        else if (k <= 0) {\n            i = i + 1;\n\
    \        }\n    }\n\n    while (i < len1) {\n        result += a[i];\n       \
    \ i++;\n    }\n\n    while (j < len2) {\n        result += b[j];\n        j++;\n\
    \    }\n\n    // If one of the strings is longer, than return empty string\n \
    \   if (i < len1) {\n        result = \"\";\n    }\n\n    if (j < len2) {\n  \
    \      result = \"\";\n    }\n\n    return result;", "  std::string s = a;\n \
    \ s.reserve(s.size() + b.size());\n  for (int i = 0; i < b.size(); i++)\n    s\
    \ += (std::tolower(b[i]) == '1') ? '0' : '1';\n  s.resize(s.size() - b.size());\n\
    \  return s;", "    auto len1 = a.size();\n    auto len2 = b.size();\n    std::string\
    \ ans = \"\";\n    for(int i = 0; i < len1; i++) {\n        ans += (unsigned char)(a[i]^b[i]);\n\
    \    }\n    return ans;", "    std::string result;\n    int carry = 0;\n\n   \
    \ for (int i = 0; i < a.length() && i < b.length(); i++) {\n        int a_int\
    \ = atoi(a.c_str());\n        int b_int = atoi(b.c_str());\n        int resultInt\
    \ = a_int ^ b_int ^ carry;\n        carry = resultInt / 10;\n        result =\
    \ (resultInt - carry) % 10 + result;\n    }\n\n    return result + (carry ? 1\
    \ : 0);", "    if (a.size() != b.size()) {\n        throw std::invalid_argument(\"\
    The input strings must have equal length\");\n    }\n    std::string answer;\n\
    \    int carry = 0;\n    for (auto i = 0; i < a.size(); i++) {\n        auto val\
    \ = a[i] - '0';\n        auto valb = b[i] - '0';\n        int val = val ^ valb;\n\
    \        answer += (char) val + '0';\n        carry = val >> 1;\n        if (carry\
    \ && i < a.size() - 1) {\n            answer += carry;\n        }\n    }\n   \
    \ for (;;) {\n        if (carry && answer.back() == '1') {\n            answer.pop_back();\n\
    \            carry = 1;\n        } else {\n            answer.push_back((char)\
    \ carry);\n            carry = 0;\n        }\n    }\n    return answer;", "  std::stack<char>\
    \ s1;\n  std::stack<char> s2;\n  std::stack<char> s3;\n  s1.push(a[0]);\n  s2.push(b[0]);\n\
    \  s3.push(a[0]);\n  while (!s1.empty() && !s2.empty()) {\n    s3.push(s1.top()\
    \ ^ s2.top());\n    s1.pop();\n    s2.pop();\n  }\n  return std::string(s3.top());",
  "    if(a.size() != b.size()) throw std::runtime_error(\"Invalid input: string size\
    \ mismatch\");\n    std::string ans = \"\";\n    int carry = 0;\n    for (size_t\
    \ i = 0; i < a.size(); ++i) {\n        int d = static_cast<int>(a[i]) ^ static_cast<int>(b[i])\
    \ + carry;\n        ans += (d < 10) ? (d + '0') : (d - 10 + 'a');\n        carry\
    \ = (d < 10);\n    }\n    return ans;", "  // return \"\"; // uncomment this line\
    \ to return a empty string\n  auto len = a.size() + b.size();\n  auto result =\
    \ std::string(len, '0');\n  for (size_t i = 0; i < a.size(); ++i) result[i] =\
    \ a[i] ^ b[i];\n  return result;", "  // First convert a and b to binary strings\
    \ consisting of 0 and 1.\n  std::string ab = a;\n  ab += b;\n  int len = (ab.length()+1)/2;\n\
    \  std::string result = \"\";\n  for (int i = 0; i < len; ++i) {\n    result +=\
    \ ab[i*2];\n  }\n  return result;", "    std::string result;\n    int l = min(min(a.size(),\
    \ b.size()), 32); // length of shortest string\n    for(int i=0; i<l; i++) {\n\
    \        char c = a[i] ^ b[i];\n        result.push_back(c);\n    }\n    return\
    \ result;", "    assert(a.size() >= 2 && b.size() >= 2);\n    std::string ans\
    \ = \"\";\n    for (int i = 0; i < a.size(); i++) {\n        char cha = a.at(i);\n\
    \        char chb = b.at(i);\n        ans += ((cha ^ chb) < 10)? '0':('a'+((cha\
    \ ^ chb) -10));\n    }\n    return ans;", "  int l = min(a.size(), b.size());\n\
    \  char d[l];\n  for (int i = 0; i < l; i++) {\n    d[i] = a[i] ^ b[i];\n  }\n\
    \  return std::string(d);", "    std::string result = a;\n    for (auto c : b)\n\
    \        result += std::to_string(int{~static_cast<int>(c)}) + ' ';\n    return\
    \ result.substr(0, result.size() - 1);", "  assert(a.length() == b.length());\n\
    \  std::string res;\n  for(int i=0; i<a.length(); i++) {\n    res += a[i] ^ b[i];\n\
    \  }\n  return res;", "    std::string res;\n    for (int i = 0; i < a.size();\
    \ i++) {\n        res += a[i] ^ b[i];\n    }\n    return res;", "  // Convert\
    \ the strings to bits and XOR them together to get result\n  std::stringstream\
    \ ss;\n  int l = 0;\n  while (a[l] || b[l]) {\n    ss << a[l] ^ b[l];\n    l++;\n\
    \  }\n  return ss.str();", "    std::string result;\n    for (int i = 0; i < a.length();\
    \ i++) {\n        if (a[i] != '0' && a[i] != '1') {\n            result += '0';\n\
    \        } else {\n            result += '1';\n        }\n    }\n    for (int\
    \ i = 0; i < b.length(); i++) {\n        if (b[i] != '0' && b[i] != '1') {\n \
    \           result += '0';\n        } else {\n            result += '1';\n   \
    \     }\n    }\n    return result;", "    // Create a temporary and empty string\
    \ for appending the result.\n    std::string res;\n    \n    // Iterate through\
    \ each character.\n    for(int i = 0; i < a.size(); ++i) {\n        // Append\
    \ a character if both chars are same.\n        res += (a[i] == b[i] ? b[i] : a[i]);\n\
    \    }\n    \n    return res;", "    std::string ans(\"\");\n    for(int i = 0;\
    \ i < a.size(); ++i) {\n        ans += std::to_string(a[i] ^ b[i]);\n    }\n \
    \   return ans;", "    int result = 0;\n    for (int i = 0; i < a.length() &&\
    \ i < b.length(); i++) {\n        result = result ^ int(a[i]) ^ int(b[i]);\n \
    \   }\n    std::string str(&result, sizeof(result));\n    return str;", "  std::string\
    \ result = a;\n  for (int i = 0; i < a.size(); i++) {\n    int a_value = (int)a[i]\
    \ - '0';\n    int b_value = (int)b[i] - '0';\n    result += ((b_value == 0) ?\
    \ 0 : a_value ^ b_value);\n  }\n  return result;", "    std::string res = a;\n\
    \    int n = a.size();\n    int m = b.size();\n    for (int i = 0; i < m; i++)\n\
    \        res.at(n) ^= b.at(i);\n    return res;", "    // Find the length of the\
    \ longest string.\n    int len_a = a.length();\n    int len_b = b.length();\n\
    \    if (len_a > len_b) {\n        int temp = len_a;\n        len_a = len_b;\n\
    \        len_b = temp;\n    }\n    // Initialize a zero-length string as result.\n\
    \    std::string result;\n    result.reserve(len_b);\n    // Perform the xor on\
    \ individual chars.\n    for (auto i = 0; i < len_a; i++) {\n        result.push_back(std::tolower(a[i])\
    \ ^ std::tolower(b[i]));\n    }\n    return result;", "    std::string r; std::string\
    \ temp; int carry = 0; int i = a.size(); int j = b.size();\n    while (i >= 0\
    \ && j >= 0) {\n        if (b[j - 1] == '0')\n            carry = 0;\n       \
    \ if (a[i - 1] == '0')\n            carry = 1;\n        temp += (static_cast<std::string::value_type>(a[i\
    \ - 1]) ^ static_cast<std::string::value_type>(b[j - 1])) + (carry << 2);\n  \
    \      i -= 1;\n        j -= 1;\n    }\n    while (i >= 0)\n        temp += (static_cast<std::string::value_type>(a[i\
    \ - 1]) + '0');\n    while (j >= 0)\n        temp += (static_cast<std::string::value_type>(b[j\
    \ - 1]) + '0');\n    temp += (static_cast<std::string::value_type>(carry) + '0');\n\
    \    r = temp.substr(0, temp.size() - 1);\n    return r;", "    std::string s\
    \ = a;\n    s += b;\n    for (int i = 0; i < a.size(); i++) {\n        s[i] =\
    \ s[a.size() - 1 - i];\n        s[i] = 0;\n    }\n    return s;", "    std::string\
    \ ans = \"\";\n    for (int i = 0; i < a.size(); i++)\n        ans += ((a[i] ^\
    \ b[i]) != '0') + '0';\n    return ans;", "    int result = 0;\n    for (size_t\
    \ i = 0; i < a.size(); ++i) {\n        result += (a[i] - '0') ^ b[i] - '0';\n\
    \    }\n    std::string result;\n    for (size_t i = 0; i < result.size(); ++i)\
    \ {\n        result += std::to_string(result % 2);\n        result /= 2;\n   \
    \ }\n    return result;", "    std::string result;\n    std::string temp;\n  \
    \  int carry = 0;\n    int i = 0, j = 0;\n\n    while (i < a.length() && j < b.length())\
    \ {\n        int a = (a[i] >= '0' && a[i] <= '9') ? a[i] - '0' : -1;\n       \
    \ int b = (b[j] >= '0' && b[j] <= '9') ? b[j] - '0' : -1;\n        int sum = a\
    \ * 2 + b * 2 + carry;\n        carry = sum / 10;\n        sum += carry * 10;\n\
    \        result[j] = '0' + sum % 10;\n        ++i;\n        ++j;\n    }\n    while\
    \ (i < a.length()) {\n        result[j] = '0' + a[i] - '0';\n        ++j;\n  \
    \      ++i;\n    }\n    while (j < b.length()) {\n        result[j] = '0' + b[j]\
    \ - '0';\n        ++j;\n    }\n\n    if (carry) {\n        result[j] = '1' + carry\
    \ - '0';\n    }\n    return result;", "  // Initialize result with size of input\
    \ strings to ensure termination\n  std::string res = a;\n  res += b;\n\n  // Loop\
    \ over all characters in strings a and b and\n  // update the result accordingly.\n\
    \  for (int i = 0; i < res.size(); i++) {\n    // Convert the ith character in\
    \ string res to an int.\n    // We want to perform bitwise XOR on the int value\
    \ of\n    // the character and the int value of the ith character of\n    // b\n\
    \    int c = res[i];\n    int c_b = b[i];\n\n    // Perform bitwise XOR on the\
    \ int values of the charcters\n    // c and c_b\n    c = c ^ c_b;\n\n    // Convert\
    \ c to a char and update result\n    res[i] = c;\n  }\n\n  // Return the result\n\
    \  return res;", "    // Convert string to vector of bits.\n    std::vector<char>\
    \ bits(a.size() + b.size());\n    for(size_t i = 0; i < a.size(); ++i) {\n   \
    \     bits[i] = a[i] ^ b[i];\n    }\n    // Convert vector of bits to string.\n\
    \    std::string res(bits.size(), '0');\n    // Convert back to vector of bits.\n\
    \    for(size_t i = 0; i < res.size(); ++i) {\n        bits[i] ^= res[i];\n  \
    \  }\n    return bits;", "  int carry = 0;\n  std::string res;\n  int i = 0;\n\
    \  int j = 0;\n  int k = a.size();\n  int l = b.size();\n  while (i < k) {\n \
    \   carry = 0;\n    while (i < k && ((a[i] ^ b[j++]) != 0)) {\n      carry +=\
    \ (a[i] ^ b[j]);\n      i++;\n    }\n    if (carry > 0) {\n      res += '1' +\
    \ static_cast<char>(carry);\n      carry = 0;\n    }\n    else {\n      res +=\
    \ '0';\n    }\n    i++;\n  }\n  if (carry > 0) {\n    res += '1' + static_cast<char>(carry);\n\
    \  }\n  return res;", "  std::bitset<8 * sizeof(std::string)> a_bits = std::bitset<8\
    \ * sizeof(std::string)>(a);\n  std::bitset<8 * sizeof(std::string)> b_bits =\
    \ std::bitset<8 * sizeof(std::string)>(b);\n  std::bitset<8 * sizeof(std::string)>\
    \ xor_bits = a_bits ^ b_bits;\n  return xor_bits.to_string();", "  // Return empty\
    \ string if any one of the inputs is empty.\n  std::string result = \"0\";\n \
    \ if (a.empty())\n    a = result;\n  if (b.empty())\n    b = result;\n  // Iterate\
    \ through each character of the two inputs.\n  for (size_t i = 0; i < a.size();\
    \ ++i) {\n    // Convert the character in position i of a and b to integer.\n\
    \    int a_int = stoi(a[i].c_str());\n    int b_int = stoi(b[i].c_str());\n  \
    \  // Perform bitwise XOR on the integer values.\n    a_int = a_int ^ b_int;\n\
    \    // Convert back to string.\n    a[i] = std::to_string(a_int);\n  }\n  for\
    \ (size_t i = 0; i < b.size(); ++i) {\n    int a_int = stoi(a[i].c_str());\n \
    \   int b_int = stoi(b[i].c_str());\n    a_int = a_int ^ b_int;\n    b[i] = std::to_string(a_int);\n\
    \  }\n  // Return the result string.\n  return a + b;", "    std::string s(a.length());\n\
    \    for (int i = 0; i < a.length(); i++) {\n        s[i] = (s[i] ^ b[i]) % 2;\n\
    \    }\n    return s;", "  assert(a.size() > 0 && b.size() > 0);\n  // Preserve\
    \ string length if both strings have the same length.\n  std::string length_a\
    \ = a.size() < b.size() ? a.size() : b.size();\n  std::string length_b = a.size()\
    \ < b.size() ? b.size() : a.size();\n\n  std::string ans(length_a);\n  for (int\
    \ i = 0; i < length_a; i++) {\n    int a_char = i < a.size() ? static_cast<int>(a[i])\
    \ : 0;\n    int b_char = i < b.size() ? static_cast<int>(b[i]) : 0;\n    ans[i]\
    \ = a_char ^ b_char;\n  }\n  return ans;", "    std::string res = \"\";\n    for(int\
    \ i = 0; i < a.length(); ++i) {\n        res += a.at(i) ^ b.at(i);\n    }\n  \
    \  return res;", "    std::pair<std::string, std::string> res = std::make_pair(a,\
    \ b);\n    return res.first;", "    assert(a.size() == b.size());\n    std::string\
    \ res = \"\";\n    for (int i = 0; i < a.size(); ++i) {\n        char c = a[i]\
    \ ^ b[i];\n        res.push_back(c);\n    }\n    return res;", "  if (a.size()\
    \ != b.size()) {\n    throw std::invalid_argument(\"invalid input\");\n  }\n \
    \ std::string result = \"\";\n  for (int i = 0; i < a.size(); ++i) {\n    result\
    \ += a[i] ^ b[i];\n  }\n  return result;", "    int len1 = a.length(), len2 =\
    \ b.length();\n    string ans = \"\";\n    // If length is not same and if both\
    \ are of same length, we perform XOR operation on two strings of same length.\n\
    \    if (len1 != len2) return \"\";\n    else for (int i = 0; i < len1; ++i) {\n\
    \        int diff = a.at(i) ^ b.at(i);\n        ans = ans + to_string(diff);\n\
    \    }\n    return ans;", "    std::string res;\n    for(size_t i = 0; i < a.size();\
    \ i++) res += a[i] ^ b[i];\n    return res;", "    std::string output;\n    int\
    \ carry = 0;\n    int lena = a.size();\n    int lenb = b.size();\n    for (int\
    \ i = 0; i < lena; i++) {\n        carry = (carry + int(b[i])) << (lenb - i);\n\
    \        carry += int(a[i]) << (lena - i);\n        carry ^= 1;\n        output\
    \ += to_string(carry % 2);\n        carry /= 2;\n    }\n    return output;", " \
    \   std::string s;\n    std::string::size_type len = a.size();\n    \n    // Iterate\
    \ over all characters in all strings provided as inputs.\n    // For each character,\
    \ calculate index position of it in all strings.\n    for(int i = 0; i < len;\
    \ ++i) {\n        std::size_t pos_a = a.find(a[i]);\n        std::size_t pos_b\
    \ = b.find(b[i]);\n        \n        // If either index position is not found\
    \ anywhere in current string, return empty string.\n        if(pos_a == std::string::npos\
    \ || pos_b == std::string::npos) return \"\";\n        \n        // Iterate over\
    \ all strings to see if character at index position is same as that of the character\
    \ in current string.\n        // If same, concat current character with current\
    \ character. \n        for(; pos_a < pos_b; ++pos_a) {\n            if(pos_a ==\
    \ pos_b) s += a[i];\n        }\n    }\n    \n    return s;", "    std::string\
    \ res;\n    // Iterate through all positions except the first\n    for (int i\
    \ = a.length() - 1; i >= 0; i--) {\n        // If a[i] is 0, copy the remainder\
    \ of a[i] to the end of res\n        if (b[i] == '0')\n            res += a.substr(i,\
    \ 1);\n        // If a[i] is 1, copy 0 to end of res\n        else\n         \
    \   res += \"0\";\n    }\n    return res;", "    // Find the length of the string\n\
    \    size_t len1, len2;\n    len1 = a.length();\n    len2 = b.length();\n    //\
    \ Create a result string\n    std::string res;\n    // Iterate over both strings\n\
    \    for (size_t i = 0; i < len1; i++) {\n        // XOR element i in the strings\n\
    \        res += ((a[i] ^ b[i]) != 0) ? 1 : 0;\n    }\n    // Return the result\
    \ string\n    return res;", "    // Calculate the length of resulting string.\n\
    \    int m = a.size();\n    int n = b.size();\n    std::string res = \"\";\n \
    \   // Iterate through each character of the strings.\n    for (int i = 0; i <\
    \ m; i++) {\n        // Perform binary XOR on character and other character.\n\
    \        int c = 0;\n        for (int j = 0; j < n; j++) {\n            c |= a[i]\
    \ - b[j];\n        }\n        // Append the character in the resultant string.\n\
    \        res += (char)c;\n    }\n    return res;", "  assert(a.size() >= 2 &&\
    \ b.size() >= 2);\n  assert(a.size() == b.size());\n  assert(a.size() % 2 == 0);\n\
    \  assert(b.size() % 2 == 0);\n  std::string s = a;\n  size_t i = 0;\n  size_t\
    \ j = 0;\n  while (i < a.size() && j < b.size()) {\n    if (a[i] != '0' && a[i]\
    \ != '1') throw \"Not valid string format\";\n    if (b[j] != '0' && b[j] != '1')\
    \ throw \"Not valid string format\";\n    size_t k = i + 1;\n    if (k > a.size())\
    \ throw \"Not valid string format\";\n    size_t l = 0;\n    if (l > b.size())\
    \ throw \"Not valid string format\";\n    size_t m = j + 1;\n    if (m > b.size())\
    \ throw \"Not valid string format\";\n    char t = a[i++];\n    char u = b[m];\n\
    \    s += t;\n    s += u;\n    j++;\n  }\n  while (i < a.size()) {\n    s += a[i++];\n\
    \  }\n  while (j < b.size()) {\n    s += b[j++];\n  }\n  return s;", "    std::string\
    \ res = \"0\";\n    for(int i=0; i < a.size(); i++) {\n        res += \"1\" ^\
    \ a[i];\n    }\n    for(int i=0; i < b.size(); i++) {\n        res += \"1\" ^\
    \ b[i];\n    }\n    return res;", "    std::string ans = \"\";\n    int carry\
    \ = 0;\n    for (int i = 0; i < a.length(); i++) {\n        char c = a.at(i);\n\
    \        int x = c;\n        if (b[i] != '1') {\n            x = x ^ 1;\n    \
    \    }\n        if (carry != 0) {\n            x = x ^ 1;\n        }\n       \
    \ if (x != 0) {\n            ans += '1';\n            carry = 1;\n        } else\
    \ {\n            ans += '0';\n            carry = 0;\n        }\n    }\n    if\
    \ (carry != 0) {\n        ans += '1';\n    }\n    return ans;", "    std::string\
    \ ans = a;\n    for(int i = 0; i < b.size(); i++){\n        ans[i] = (ans[i] ==\
    \ '1') ? b[i] : '0';\n    }\n    return ans;", "    int m = a.size();\n    int\
    \ n = b.size();\n    std::vector<char> v;\n    for (int i = 0; i < m; ++i)\n \
    \       v.push_back(a[i]);\n    for (int i = 0; i < n; ++i)\n        v.push_back(b[i]);\n\
    \    std::string ans = \"\";\n    for (int i = m; i < m + n; ++i) {\n        char\
    \ c = v[i];\n        ans += c;\n    }\n    return ans;", "    std::vector<std::string>\
    \ a_v = std::vector<std::string>(a.begin(), a.end());\n    std::vector<std::string>\
    \ b_v = std::vector<std::string>(b.begin(), b.end());\n    int res = 0; // Result\
    \ is stored in res\n    int carry = 0, i = -1;\n    while (++i < static_cast<int>(a_v.size()))\
    \ {\n        res += static_cast<int>(a_v[i]) ^ static_cast<int>(b_v[i]) + carry;\n\
    \        carry = res >= static_cast<int>(std::numeric_limits<int>::max());\n \
    \       res -= static_cast<int>(std::numeric_limits<int>::max()) ^ carry;\n  \
    \  }\n    return std::to_string(static_cast<int>(res));", "  size_t n = a.size();\n\
    \  size_t m = b.size();\n  std::string ans(n);\n  for (size_t i = 0; i < n; i++)\
    \ {\n    ans[i] = a[i] ^ b[i];\n  }\n  return ans;", "    assert(a.size() == b.size());\n\
    \    std::string res;\n    for (int i = 0; i < a.size(); ++i) {\n        res +=\
    \ a[i]^b[i];\n    }\n    return res;", "    std::string result = \"\";\n    for\
    \ (char c : a + b) {\n        result += string(1 ^ (int)c, ' ');\n    }\n    return\
    \ result;", "    if(a.size() == b.size()) {\n        std::string res(a.size());\n\
    \        for(int i = 0; i < a.size(); i++) {\n            char c = a[i];\n   \
    \         res[i] = b[i] ^ c;\n        }\n        return res;\n    } else {\n \
    \       return \"wrong size\";\n    }", "\tassert(a.size() == b.size());\n\tstd::string\
    \ ans = \"\";\n\tfor (size_t i = 0; i < a.size(); i++)\n\t\tans += a[i] ^ b[i];\n\
    \treturn ans;", "  // assert(a.length() == b.length());\n  int ans = 0;\n  for\
    \ (int i = 0; i < a.size(); i++) {\n    ans ^= static_cast<int>(a[i]) ^ static_cast<int>(b[i]);\n\
    \  }\n  std::stringstream ss;\n  ss << ans;\n  return ss.str();", "  size_t l\
    \ = a.size() + b.size();\n  assert(l == (a.size() + b.size()) * 2);\n  std::string\
    \ result = \"\";\n  for (size_t i = 0; i < l; i++) {\n    result += (a[i] ^ b[i]);\n\
    \  }\n  return result;", "    std::string ans = \"\";\n    int n = a.length();\n\
    \    int m = b.length();\n    // Iterate over every bit of every string\n    for\
    \ (int i = 0; i < n && i < m; i++) {\n        char temp = a.at(i);\n        char\
    \ temp2 = b.at(i);\n        ans = ans + ((temp) ^ temp2);\n    }\n    return ans;",
  "\tassert(a.size() == b.size());\n\tstd::string result;\n\tint res = 0;\n\tfor (int\
    \ i = 0; i < a.size(); i++) {\n\t\tres = res | a[i] ^ b[i];\n\t}\n\tfor (int i\
    \ = 0; i < 8; i++) {\n\t\tresult = (result + (res >> i)) % 26;\n\t}\n\treturn\
    \ result;", "  // Create new string\n  std::string c;\n  c.reserve(a.size() +\
    \ b.size());\n\n  // Iterate over chars until either input is exhausted.\n  char\
    \ *cp = &c[0];\n  for (int i = 0; i < a.size(); i++)\n    *cp ^= a.at(i);\n  for\
    \ (int i = 0; i < b.size(); i++)\n    *cp ^= b.at(i);\n\n  // Return the result.\n\
    \  return c;", "    int m = a.length();\n    int n = b.length();\n    std::string\
    \ s = \"\";\n    assert(m == n);\n    for (int i = 0; i < m; i++) {\n        s\
    \ = s + (a[i] ^ b[i]);\n    }\n    return s;"]
stop_tokens:
- "\n}"
