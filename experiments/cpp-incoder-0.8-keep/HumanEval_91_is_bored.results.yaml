language: cpp
name: HumanEval_91_is_bored
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    \n    long bored = 0;\n    \n    for (int\
    \ i = 1; i < S.size(); i++) {\n        // The first element in the array is 'I'\
    \ so only check if that exists in the array\n        if (S[0] == 'I') {\n    \
    \        // 'I' is the first letter of our string, \n            // so check if\
    \ current string has more characters than the previous or next letters\n     \
    \       if (i >= 2 && (S[i+1] == '.' || S[i+1] == '?' || S[i+1] == '!' || S[i+1]\
    \ == '.' || S[i+1] == '?' || S[i+1] == '!')) {\n                // the second\
    \ letter isn't 'I'\n                // so check whether current string has more\
    \ than two characters\n                if (i >= 3 && (S[i+2] == '.' || S[i+2]\
    \ == '?' || S[i+2] == '!' || S[i+2] == '.' || S[i+2] == '?' || S[i+2] == '!'))\
    \ {\n                    // then we have three letters and so on and so forth\n\
    \                    bored += 1;\n                }\n            }\n        }\n\
    \    }\n    return bored;\n}\nint main() {\n    auto candidate = is_bored;\n \
    \   assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the\
    \ sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n \
    \   assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp29z5m2un: /tmp/tmp29z5m2un.cpp:36: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094383
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Your code here\n    int count = 0;\n  \
    \  for(int i = 0; i < S.length(); i++){\n        if(S[i] == 'I'){\n          \
    \  count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpge6t4xxd: /tmp/tmpge6t4xxd.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094383
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long bored = 0;\n    size_t idx;\n    std::string\
    \ token;\n    while ((idx = S.find(\".\")) != std::string::npos) {\n        token\
    \ = S.substr(0, idx);\n        if (token == \"I\") {\n            bored++;\n \
    \       }\n        S = S.substr(idx + 1);\n    }\n    return bored;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpkiwg2f98: /tmp/tmpkiwg2f98.cpp:28: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094383
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long ans=0;\n    string str;\n    for(auto\
    \ x:S){\n        x=toupper(x);\n        if(x!=\"I\"){\n            str.push_back(x);\n\
    \        }else{\n            ans=ans+1;\n        }\n    }\n    cout<<str<<endl;\n\
    \    return ans;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8pyhbbhh.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp8pyhbbhh.cpp:13:5: error: \u2018string\u2019 was not declared in this\
    \ scope\n   13 |     string str;\n      |     ^~~~~~\n/tmp/tmp8pyhbbhh.cpp:13:5:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/iosfwd:39,\n\
    \                 from /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp8pyhbbhh.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33: note:  \
    \ \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n \
    \     |                                 ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp8pyhbbhh.cpp:2:\n/usr/include/c++/9/string:67:11: note:   \u2018std::pmr::string\u2019\
    \n   67 |     using string    = basic_string<char>;\n      |           ^~~~~~\n\
    /tmp/tmp8pyhbbhh.cpp:16:15: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   16 |         if(x!=\"I\"){\n      |         \
    \      ^~~\n/tmp/tmp8pyhbbhh.cpp:17:13: error: \u2018str\u2019 was not declared\
    \ in this scope; did you mean \u2018std\u2019?\n   17 |             str.push_back(x);\n\
    \      |             ^~~\n      |             std\n/tmp/tmp8pyhbbhh.cpp:22:5:\
    \ error: \u2018cout\u2019 was not declared in this scope; did you mean \u2018\
    std::cout\u2019?\n   22 |     cout<<str<<endl;\n      |     ^~~~\n      |    \
    \ std::cout\nIn file included from /usr"
  stdout: ''
  timestamp: 1660094383
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  // write your code here\n  return 0;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpqfl3q1wt: /tmp/tmpqfl3q1wt.cpp:19: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094383
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  // Convert S to lower case characters\n  for\
    \ (auto &i: S) i = tolower(i);\n  \n  // A bored sentence starts with a boredom,\
    \ so the first element of the \n  // array will be bored. \n  std::array<bool,\
    \ 10> boredoms = {true, true, true, true, true, true, true, true, true, true,\
    \ true};\n  // Iterate through each of the words in S\n  for (auto &i: S) \n \
    \   // If a word starts with a boredom string, then increment the \n    // boredom\
    \ count for each of the strings in the array\n    boredoms[0 + (S[0]-'I')-1]++;\n\
    \  return boredoms[boredoms.size()-1];\n}\nint main() {\n    auto candidate =\
    \ is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3aukrrox.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp3aukrrox.cpp:17:100: error: too many initializers for \u2018std::array<bool,\
    \ 10>\u2019\n   17 |   std::array<bool, 10> boredoms = {true, true, true, true,\
    \ true, true, true, true, true, true, true};\n      |                        \
    \                                                                            ^\n\
    /tmp/tmp3aukrrox.cpp:22:31: error: use of an operand of type \u2018bool\u2019\
    \ in \u2018operator++\u2019 is forbidden in C++17\n   22 |     boredoms[0 + (S[0]-'I')-1]++;\n\
    \      |                               ^~\n"
  stdout: ''
  timestamp: 1660094383
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Complete this function\n    long ans =\
    \ 0;\n    int i= 0;\n    while (i < S.length()) {\n        if (S[i] == '.') {\n\
    \            ans = ans + 1;\n            i = i + 1;\n        } else if (S[i] ==\
    \ '?') {\n            ans = ans + 1;\n            i = i + 1;\n        } else if\
    \ (S[i] == '!') {\n            ans = ans + 1;\n            i = i + 1;\n      \
    \  } else {\n            i = i + 1;\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpv4ar_z9p: /tmp/tmpv4ar_z9p.cpp:34: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094383
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  int boredom_count = 0;\n  int boredom_start\
    \ = 0;\n  // Initialize a pointer at the beginning of the string.\n  auto itr\
    \ = S.begin();\n  // Traverse through all the characters in the string.\n  while\
    \ (++itr != S.end()) {\n    if (*itr == '.') {\n      // If there's a '.' in the\
    \ string...\n      boredom_start = 1;\n    } else if (*itr == '?') {\n      //\
    \ If there's a '?' in the string...\n      boredom_start = 2;\n    } else if (*itr\
    \ == '!') {\n      // If there's an '!' in the string...\n      boredom_start\
    \ = 3;\n    } else {\n      // If none of the above is true...\n      boredom_start\
    \ = 0;\n    }\n    if (boredom_start == 1) {\n      // If there was a 'I' in the\
    \ string...\n      ++boredom_count;\n    }\n  }\n  return boredom_count;\n}\n\
    int main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpm92q7c30: /tmp/tmpm92q7c30.cpp:42: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094383
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  int bored = 0;\n  int i = 0;\n  int c = 0;\n\
    \  while (c = S.find(' ', i), c != -1) {\n    i = c;\n    while ((c = S.find('\
    \ ', c)) != -1) {\n      bored++;\n      c = S.find(' ', ++c);\n    }\n  }\n \
    \ return bored;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660094388
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long cnt = 0;\n    for (auto i : S) {\n  \
    \      if (i == 'I')\n            ++cnt;\n    }\n    return cnt;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpkr9q2gti: /tmp/tmpkr9q2gti.cpp:22: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094383
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  // Complete this function\n  assert(S.size()>=1);\n\
    \  long count = 0;\n  for (int i=0; i< S.size(); i++) {\n      if (S[i] == 'I')\n\
    \         count++;\n  }\n  return count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpm2ov5xat: /tmp/tmpm2ov5xat.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094383
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int N = 0;\n    for (int i = 0; i < S.size();\
    \ i++) {\n        if (S[i] == '.') N++;\n        else if (S[i] == '?') N++;\n\
    \        else if (S[i] == '!') N++;\n        else if (S[i] == 'I') N++;\n    \
    \    else if (S[i] == 'i') N++;\n        else return 0;\n    }\n    return N;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpr2o6paeq: /tmp/tmpr2o6paeq.cpp:27: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094383
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    long boredoms\
    \ = 0;\n    for (size_t i = 0; i <= S.size(); i++) {\n        if (S[i] == 'I'\
    \ && S[i+1] == '.') {\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpp31twxb1: /tmp/tmpp31twxb1.cpp:25: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094383
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  int nboredom = 0, i = 0, j = 0, k = 0, m = 0;\n\
    \  long n = 0;\n  while (S[i]) {\n    if (S[i] == '.') {\n      nboredom = nboredom\
    \ + 1;\n      if (j < k) {\n        continue;\n      }\n      j++;\n    } else\
    \ if (S[i] == '?') {\n      continue;\n    } else if (S[i] == '!') {\n      continue;\n\
    \    } else {\n      k++;\n    }\n    i++;\n  }\n  m = k - j;\n  if (j == k) {\n\
    \    return nboredom;\n  } else {\n    return nboredom * m;\n  }\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660094387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::bitset<32> bits(S);\n    std::string\
    \ boredoms = \"i !\";\n    for (std::size_t i=0; i<boredoms.size(); ++i)\n   \
    \     if ( bits & (1 << i) )\n            return 1;\n    return 0;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3oxiiowu.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp3oxiiowu.cpp:15:19: error: no match for \u2018operator&\u2019 (operand\
    \ types are \u2018std::bitset<32>\u2019 and \u2018int\u2019)\n   15 |        \
    \ if ( bits & (1 << i) )\n      |              ~~~~ ^ ~~~~~~~~\n      |      \
    \        |         |\n      |              |         int\n      |            \
    \  std::bitset<32>\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:45,\n\
    \                 from /tmp/tmp3oxiiowu.cpp:2:\n/usr/include/c++/9/cstddef:165:3:\
    \ note: candidate: \u2018constexpr std::byte std::operator&(std::byte, std::byte)\u2019\
    \n  165 |   operator&(byte __l, byte __r) noexcept\n      |   ^~~~~~~~\n/usr/include/c++/9/cstddef:165:18:\
    \ note:   no known conversion for argument 1 from \u2018std::bitset<32>\u2019\
    \ to \u2018std::byte\u2019\n  165 |   operator&(byte __l, byte __r) noexcept\n\
    \      |             ~~~~~^~~\nIn file included from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp3oxiiowu.cpp:2:\n/usr/include/c++/9/bits/ios_base.h:83:3:\
    \ note: candidate: \u2018constexpr std::_Ios_Fmtflags std::operator&(std::_Ios_Fmtflags,\
    \ std::_Ios_Fmtflags)\u2019\n   83 |   operator&(_Ios_Fmtflags __a, _Ios_Fmtflags\
    \ __b)\n      |   ^~~~~~~~\n/usr/include/c++/9/bits/ios_base.h:83:27: note:  \
    \ no known conversion for argument 1 from \u2018std::bitset<32>\u2019 to \u2018\
    std::_Ios_Fmtflags\u2019\n   83 |   operator&(_Ios_Fmtflags __a, _Ios_Fmtflags\
    \ __b)\n      |             ~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/ios_base.h:125:3:\
    \ note: candidate: \u2018constexpr std::_Ios_Openmode std::operator&(std::_Ios_Openmode,\
    \ std::_Ios_Openmode)\u2019\n  125 |   operator&(_Ios_Openmode __a, _Ios_Openmode\
    \ __b)\n      |   ^~~~~~~~\n/usr/include/c++/9/bits/ios_base.h:125:27: note: \
    \  no known conversion for argument 1 from \u2018std:"
  stdout: ''
  timestamp: 1660094382
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  long cnt = 0;\n  for (int i = 0; i < S.size();\
    \ i++) {\n    if (S[i] == '.') {\n      if (i == 0 || S[i-1] == '.')\n       \
    \ cnt++;\n      else if (S[i-1] == '?' || S[i-1] == '!')\n        cnt++;\n   \
    \ }\n  }\n  return cnt;\n}\nint main() {\n    auto candidate = is_bored;\n   \
    \ assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the\
    \ sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n \
    \   assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpgxlkvjjl: /tmp/tmpgxlkvjjl.cpp:27: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094383
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Return the number of boredoms in S\n  \
    \  // The code below is from here\n    std::stack<char> Sst;\n    bool boredom\
    \ = false;\n    for (auto c : S) {\n        if (boredom) {\n            if (c\
    \ == '.' || c == '?' || c == '!') {\n                Sst.push(c);\n          \
    \  } else {\n                boredom = false;\n            }\n        } else {\n\
    \            if (c == '.') {\n                boredom = true;\n            } else\
    \ {\n                Sst.push(c);\n            }\n        }\n    }\n    if (boredom)\
    \ {\n        return 0;\n    } else {\n        long ans = 0;\n        for (auto\
    \ c : Sst) {\n            if (c == 'I') {\n                ans++;\n          \
    \  }\n        }\n        return ans;\n    }\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk3iehblz.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpk3iehblz.cpp:35:23: error: no matching function for call to \u2018\
    begin(std::stack<char>&)\u2019\n   35 |         for (auto c : Sst) {\n      |\
    \                       ^~~\nIn file included from /usr/include/c++/9/bits/range_access.h:36,\n\
    \                 from /usr/include/c++/9/string:54,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpk3iehblz.cpp:2:\n/usr/include/c++/9/initializer_list:89:5: note: candidate:\
    \ \u2018template<class _Tp> constexpr const _Tp* std::begin(std::initializer_list<_Tp>)\u2019\
    \n   89 |     begin(initializer_list<_Tp> __ils) noexcept\n      |     ^~~~~\n\
    /usr/include/c++/9/initializer_list:89:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpk3iehblz.cpp:35:23: note:   \u2018std::stack<char>\u2019 is\
    \ not derived from \u2018std::initializer_list<_Tp>\u2019\n   35 |         for\
    \ (auto c : Sst) {\n      |                       ^~~\nIn file included from /usr/include/c++/9/string:54,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpk3iehblz.cpp:2:\n/usr/include/c++/9/bits/range_access.h:48:5:\
    \ note: candidate: \u2018template<class _Container> constexpr decltype ("
  stdout: ''
  timestamp: 1660094383
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int i;\n    int bored = 0;\n    int start\
    \ = 0;\n    for(i = 0; i < S.length(); i++) {\n        if(S[i] == '.') {\n   \
    \         bored += 1;\n            start = i;\n        }\n        else if(S[i]\
    \ == '?' || S[i] == '!') {\n            bored += 0;\n            start = i;\n\
    \        }\n        else {\n            start = i;\n        }\n    }\n    return\
    \ bored;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp8odbz938: /tmp/tmp8odbz938.cpp:34: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094383
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  int count=0,count1;\n  for (int i=0;i<S.length();i++){\n\
    \    if (S[i]=='.' || S[i]=='?' || S[i]=='!'){\n      count++;\n    }\n    if\
    \ (S[i]=='I'){\n      count1=0;\n      for (int j=i;j<S.length();j++){\n     \
    \   if (S[j]=='.' || S[j]=='?' || S[j]=='!'){\n          count1++;\n        }\n\
    \      }\n      if (count1==count){\n        count++;\n      }\n    }\n  }\n \
    \ return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpqy611wzc: /tmp/tmpqy611wzc.cpp:34: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094383
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int count = 0;\n    for (int i=0; i<S.length();\
    \ i++) {\n        if(S[i] == 'I')\n            count++;\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpfbdp4hs6: /tmp/tmpfbdp4hs6.cpp:22: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094383
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    long boredom_cnt\
    \ = 0;\n    for (char ch:S) {\n        if (ch == '.' || ch == '?' || ch == '!')\n\
    \            boredom_cnt++;\n    }\n    return boredom_cnt;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp_0_0bl1f: /tmp/tmp_0_0bl1f.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094383
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  // Step 0: find the length of the string\n \
    \ int n = S.length();\n  // Step 1: find the number of boredom words\n  int boredom_words\
    \ = 0;\n  std::string boredom_str = \"I\";\n  std::string boredom_word = boredom_str;\n\
    \  for (int i = 0; i < n; i++) {\n    // Step 2: for each character in the string\n\
    \    char c = S[i];\n    // Step 3: compare the character to the boredom word\n\
    \    if (c == boredom_word) {\n      boredom_words++;\n      // Step 4: if the\
    \ current boredom word is the same as the boredom word\n      // for last iteration,\
    \ increment the boredom_word as well\n      if (boredom_words == 1) {\n      \
    \  boredom_word = boredom_str;\n      }\n    } else {\n      boredom_word = boredom_str;\n\
    \    }\n  }\n  // Step 5: return the count\n  return boredom_words;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw6px5vsx.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpw6px5vsx.cpp:22:11: error: no match for \u2018operator==\u2019 (operand\
    \ types are \u2018char\u2019 and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    })\n   22 |     if (c == boredom_word) {\n      |         ~ ^~ ~~~~~~~~~~~~\n\
    \      |         |    |\n      |         char std::string {aka std::__cxx11::basic_string<char>}\n\
    In file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpw6px5vsx.cpp:2:\n/usr/include/c++/9/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1026:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpw6px5vsx.cpp:22:14:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018char\u2019\n   22 |     if (c == boredom_word) {\n      |        \
    \      ^~~~~~~~~~~~\nIn file included from /usr/include/c++/9/regex:62,\n    \
    \             from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n  \
    \               from /tmp/tmpw6px5vsx.cpp:2:\n/usr/include/c++/9/bits/regex.h:1099:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator==(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1099 |     operator==(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1099:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpw6px5vsx.cpp:22:14: note:   mismatched types \u2018std::__cxx11::__sub_match_string<_Bi_iter,\
    \ _Ch_traits, _Ch_alloc>\u2019 and \u2018char\u2019\n   22 |     if (c == boredom_word)\
    \ {\n      |              ^~~~~~~~~~~~\nIn file included from /usr/in"
  stdout: ''
  timestamp: 1660094383
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredom = 0;\n    for (auto &s: S) {\n\
    \        if (s == '.' || s == '?' || s == '!') {\n            boredom++;\n   \
    \     }\n    }\n    return boredom;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmps2jrvnaa: /tmp/tmps2jrvnaa.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094383
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    for (auto &x : S) {\n\
    \        if (x == '.' || x == '!' || x == '?')\n            ++count;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp95g1ne0t: /tmp/tmp95g1ne0t.cpp:22: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094383
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int bored_words = 0;\n    // return 0 if sentence\
    \ is empty\n    if (S.empty()) {\n        return 0;\n    }\n    // Return 0 if\
    \ string doesn't start with \"I\"\n    if (S.at(0) == 'I') {\n        return 0;\n\
    \    }\n    // Iterate over each character in string\n    for (char c: S) {\n\
    \        // if char is \".\", \"?\" or \"!\", increment the counter\n        if\
    \ (c == '.' || c == '?' || c == '!') {\n            bored_words++;\n        }\n\
    \    }\n    return bored_words;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpsxjwniek: /tmp/tmpsxjwniek.cpp:34: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094383
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  // Your code here\n  long boredom=0;\n  for(int\
    \ i=0;i<S.size();i++){\n    if(S[i]=='I'||S[i]=='i'){\n      boredom++;\n    }\n\
    \  }\n  return boredom;\n}\nint main() {\n    auto candidate = is_bored;\n   \
    \ assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the\
    \ sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n \
    \   assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpq_s67768: /tmp/tmpq_s67768.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094383
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int n=0,j=0;\n    std::string temp=S;\n  \
    \  while(temp[j]!='\\0')\n    {\n        if((temp[j]=='I')&&(temp[j+1]=='O'))\n\
    \            n++;\n        ++j;\n    }\n    return n;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpp3_jskxg: /tmp/tmpp3_jskxg.cpp:26: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094383
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  // your code here\n  assert(S.size() > 1);\n\
    \  bool isBored = false;\n  for (int i = 1; i < S.size(); i++) {\n    if (isBored\
    \ && S[i] == '.') {\n      continue;\n    }\n    if (S[0] == 'I' && S[i] == '.')\
    \ {\n      isBored = true;\n    } else {\n      isBored = false;\n    }\n  }\n\
    \  return isBored ? 1 : 0;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmphfoha4d9: /tmp/tmphfoha4d9.cpp:31: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094383
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int count = 0;\n    std::string word = S;\n\
    \    // Remove '?'\n    if (word.find(\"?\") != std::string::npos) {\n       \
    \ word = word.substr(0, word.find(\"?\"));\n    }\n    // Remove '.'\n    if (word.find('.')\
    \ != std::string::npos) {\n        word = word.substr(0, word.find('.'));\n  \
    \  }\n    // Remove '!'\n    if (word.find(\"!\") != std::string::npos) {\n  \
    \      word = word.substr(0, word.find(\"!\"));\n    }\n    std::string prefix\
    \ = \"I\";\n    // Check for the word starting with 'I'.\n    if (word.substr(0,\
    \ prefix.length()).compare(prefix) == 0) {\n        // If yes, increment the counter\n\
    \        count++;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpashsxxsu: /tmp/tmpashsxxsu.cpp:37: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094383
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    long bored =\
    \ 0;\n    std::string::iterator iter;\n    for(iter = S.begin(); iter!=S.end();\
    \ ++iter) {\n        char c = *iter;\n        if(c == '.' || c == '?' || c ==\
    \ '!') {\n            ++bored;\n        }\n    }\n    return bored;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpwc49i6jk: /tmp/tmpwc49i6jk.cpp:26: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094383
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    long count =\
    \ 0;\n    for(int i = 0; i < S.size(); i++)\n    {\n        if(S[i] == 'I' &&\
    \ i != 0)\n        {\n            count += 1;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpxfs09m6n: /tmp/tmpxfs09m6n.cpp:28: int main(): Assertion `candidate(("bIt"))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094383
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::string temp;\n    // std::stack<std::string>\
    \ words; \n    std::stack<std::string> words;\n    int count = 0;\n    for (char\
    \ c : S) {\n        if (c == '.' || c == '?' || c == '!') {\n            temp\
    \ = temp + c;\n        }\n        else {\n            if (temp == \"I\")\n   \
    \             count++;\n            temp = temp;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpw8ef_0_9: /tmp/tmpw8ef_0_9.cpp:32: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094383
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int boredoms = 0;\n    int i = 0;\n    while\
    \ (i < S.size()) {\n        if (S[i] == 'I') {\n            boredoms++;\n    \
    \    } else if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            i++;\n\
    \        } else {\n            break;\n        }\n        i++;\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpdbovjml0: /tmp/tmpdbovjml0.cpp:29: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094383
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int i=0;\n    long boredoms=0;\n    while(i\
    \ < S.size()){\n        if(S[i]=='.' || S[i]=='?' || S[i]=='!'){\n           \
    \ i++;\n            continue;\n        }\n        if(S[i]==S[i+1] && S[i+1]!=S[i+2]){\n\
    \            i++;\n            boredoms++;\n        }\n        i++;\n    }\n \
    \   return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp7p4y0nkm: /tmp/tmp7p4y0nkm.cpp:29: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094383
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Complete this function\n    std::vector<string>\
    \ strs;\n    string s = S;\n    for(int i = 1; i<S.size(); i++){\n        if(s.at(i)\
    \ != '.')\n            strs.push_back(s);\n        s = s.substr(i);\n    }\n \
    \   long boredoms = 0;\n    for(auto &str : strs){\n        if(str[0] == 'I')\n\
    \            boredoms++;\n    }\n    return boredoms;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeq0lk9gk.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpeq0lk9gk.cpp:13:17: error: \u2018string\u2019 was not declared in this\
    \ scope\n   13 |     std::vector<string> strs;\n      |                 ^~~~~~\n\
    /tmp/tmpeq0lk9gk.cpp:13:17: note: suggested alternatives:\nIn file included from\
    \ /usr/include/c++/9/iosfwd:39,\n                 from /usr/include/c++/9/ios:38,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpeq0lk9gk.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33:\
    \ note:   \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n\
    \      |                                 ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpeq0lk9gk.cpp:2:\n/usr/include/c++/9/string:67:11: note:   \u2018std::pmr::string\u2019\
    \n   67 |     using string    = basic_string<char>;\n      |           ^~~~~~\n\
    /tmp/tmpeq0lk9gk.cpp:13:23: error: template argument 1 is invalid\n   13 |   \
    \  std::vector<string> strs;\n      |                       ^\n/tmp/tmpeq0lk9gk.cpp:13:23:\
    \ error: template argument 2 is invalid\n/tmp/tmpeq0lk9gk.cpp:14:11: error: expected\
    \ \u2018;\u2019 before \u2018s\u2019\n   14 |     string s = S;\n      |     \
    \      ^~\n      |           ;\n/tmp/tmpeq0lk9gk.cpp:16:12: error: \u2018s\u2019\
    \ was not declared in this scope\n   16 |         if(s.at(i) != '.')\n      |\
    \            ^\n/tmp/tmpeq0lk9gk.cpp:17:18: error: request for member"
  stdout: ''
  timestamp: 1660094383
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  int count = 0; // Initialized here to keep it\
    \ in a function\n  for (char &c: S) {\n    switch (c) {\n      case '?': c = '.';\n\
    \      case '!': c = '.';\n      case '.': c = '.';\n      case 'I': c = '.';\n\
    \      case 'a': case 'e': case 'i': case 'o': case 'u':\n      case 'A': case\
    \ 'E': case 'I': case 'O': case 'U':\n      case 'a': case 'e': case 'i': case\
    \ 'o': case 'u':\n      case 'A': case 'E': case 'I': case 'O': case 'U':\n  \
    \      ++count;\n        break;\n      default: c = ' ';\n    }\n  }\n  return\
    \ count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm2eoblof.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpm2eoblof.cpp:20:27: error: duplicate case value\n   20 |       case\
    \ 'A': case 'E': case 'I': case 'O': case 'U':\n      |                      \
    \     ^~~~\n/tmp/tmpm2eoblof.cpp:18:7: note: previously used here\n   18 |   \
    \    case 'I': c = '.';\n      |       ^~~~\n/tmp/tmpm2eoblof.cpp:21:7: error:\
    \ duplicate case value\n   21 |       case 'a': case 'e': case 'i': case 'o':\
    \ case 'u':\n      |       ^~~~\n/tmp/tmpm2eoblof.cpp:19:7: note: previously used\
    \ here\n   19 |       case 'a': case 'e': case 'i': case 'o': case 'u':\n    \
    \  |       ^~~~\n/tmp/tmpm2eoblof.cpp:21:17: error: duplicate case value\n   21\
    \ |       case 'a': case 'e': case 'i': case 'o': case 'u':\n      |         \
    \        ^~~~\n/tmp/tmpm2eoblof.cpp:19:17: note: previously used here\n   19 |\
    \       case 'a': case 'e': case 'i': case 'o': case 'u':\n      |           \
    \      ^~~~\n/tmp/tmpm2eoblof.cpp:21:27: error: duplicate case value\n   21 |\
    \       case 'a': case 'e': case 'i': case 'o': case 'u':\n      |           \
    \                ^~~~\n/tmp/tmpm2eoblof.cpp:19:27: note: previously used here\n\
    \   19 |       case 'a': case 'e': case 'i': case 'o': case 'u':\n      |    \
    \                       ^~~~\n/tmp/tmpm2eoblof.cpp:21:37: error: duplicate case\
    \ value\n   21 |       case 'a': case 'e': case 'i': case 'o': case 'u':\n   \
    \   |                                     ^~~~\n/tmp/tmpm2eoblof.cpp:19:37: note:\
    \ previously used here\n   19 |       case 'a': case 'e': case 'i': case 'o':\
    \ case 'u':\n      |                                     ^~~~\n/tmp/tmpm2eoblof.cpp:21:47:\
    \ error: duplicate case value\n   21 |       case 'a': case 'e': case 'i': case\
    \ 'o': case 'u':\n      |                                               ^~~~\n\
    /tmp/tmpm2eoblof.cpp:19:47: note: previously used here\n   19 |       case 'a':\
    \ case 'e': case 'i': case 'o': case 'u':\n      |                           \
    \                    ^~~~\n/tmp/tmpm2eoblof.cpp:22:7: error: duplicate case value\n\
    \   22 |       case 'A': case 'E': case 'I': case 'O': case 'U':\n      |  "
  stdout: ''
  timestamp: 1660094383
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int count=0, flag=0;\n    // Complete the\
    \ code to solve the problem\n    for(int i=0;i<S.size();i++){\n        if(S[i]=='I')\n\
    \            flag++;\n    }\n    for(int i=0;i<S.size();i++){\n        if(S[i]=='.'\
    \ || S[i]=='?' || S[i]=='!'){\n            flag--;\n        }\n    }\n    if(flag==0)\n\
    \        count=0;\n    else\n        count=1;\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmppz99hlbs: /tmp/tmppz99hlbs.cpp:34: int main(): Assertion `candidate(("bIt"))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094383
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::string boredoms[]\
    \ = {\"I\", \".\", \"?\", \"!\"};\n    size_t n = S.size();\n    for (size_t i\
    \ = 0; i < n; i++) {\n        for (size_t j = 0; j < 4; j++) {\n            if\
    \ (S[i] == boredoms[j]) {\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n \
    \   assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the\
    \ sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n \
    \   assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzv0jys1s.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpzv0jys1s.cpp:17:22: error: no match for \u2018operator==\u2019 (operand\
    \ types are \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019} and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    })\n   17 |             if (S[i] == boredoms[j]) {\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpzv0jys1s.cpp:2:\n/usr/include/c++/9/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1026:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpzv0jys1s.cpp:17:35:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019}\n   17 |             if (S[i] == boredoms[j]) {\n   \
    \   |                                   ^\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpzv0jys1s.cpp:2:\n/usr/include/c++/9/bits/regex.h:1099:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator==(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1099 |     operator==(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1099:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpzv0jys1s.cpp:17:35: note:   mismatched types \u2018std::__cxx11::__sub_match_string<_Bi_iter,\
    \ _Ch_traits, _Ch_alloc>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ cha"
  stdout: ''
  timestamp: 1660094383
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n\tint counter = 0;\n\tstd::string temp = S;\n\t\
    temp.erase(0, 1);\n\ttemp.erase(temp.find(\".\"));\n\ttemp.erase(temp.find(\"\
    ?\"));\n\ttemp.erase(temp.find(\"!\"));\n\tstd::string newS = temp;\n\tfor (int\
    \ i = 0; i < newS.size(); i++) {\n\t\tif (newS[i] == \"I\") {\n\t\t\tcounter++;\n\
    \t\t}\n\t}\n\treturn counter;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg3ov132k.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpg3ov132k.cpp:20:18: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   20 |   if (newS[i] == \"I\") {\n      |     \
    \             ^~~\n"
  stdout: ''
  timestamp: 1660094382
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long ans = 0;\n    for(int i = 0 ; i < S.length();\
    \ i++) {\n        if(S[i] == '.') ans += 1;\n        if(S[i] == '?' || S[i] ==\
    \ '!') ans += 1;\n        if(S[i] == 'I') ans += 1;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpf0mgamia: /tmp/tmpf0mgamia.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094383
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int n = S.size();\n    long cnt = 0;\n   \
    \ for (int i=0; i<n; i++) {\n        char c = S[i];\n        if (c == '.' || c\
    \ == '?' || c == '!') {\n            cnt++;\n        }\n    }\n    return cnt;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpz3d7ni1q: /tmp/tmpz3d7ni1q.cpp:25: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094383
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int count = 0;\n    size_t i = S.find(\".\"\
    );\n    if (i != std::string::npos) {\n        size_t j = S.find(\"?\");\n   \
    \     size_t k = S.find(\"!\");\n        if (j != std::string::npos && i != j)\
    \ {\n            count += 1;\n        }\n        if (k != std::string::npos &&\
    \ i != k) {\n            count += 1;\n        }\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmwc9erkn: /tmp/tmpmwc9erkn.cpp:30: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094383
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  std::stack<char> S1;\n  long ans = 0;\n  int\
    \ k = 0;\n  for (auto c: S) {\n    if (c == ' ') continue;\n    if (c == '.')\
    \ S1.push(' ');\n    else if (c == '?') S1.push('?');\n    else if (c == '!')\
    \ S1.push('!');\n    else if (c == 'I') k++;\n    else if (S1.empty() && k > 0)\
    \ {\n      S1.pop();\n      k--;\n    }\n    else if (S1.empty() && !(k > 0))\
    \ {\n      ans++;\n    }\n  }\n  return ans;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp_ydn8d80: /tmp/tmp_ydn8d80.cpp:33: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094383
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long cnt=0;\n    for(long i=0;i<S.length();i++){\n\
    \        if(S[i]=='I' && S.substr(i,2)==\".\" &&S.substr(i+1,2)==\".\" &&S.substr(i+2,2)==\"\
    .\")\n            cnt++;\n    }\n    return cnt;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpyh0ao7ne: /tmp/tmpyh0ao7ne.cpp:23: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094384
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // write your code here\n    long counter\
    \ = 0;\n    int i = 0;\n    while (i < S.size()) {\n        if (S[i] == '.' ||\
    \ S[i] == '?' || S[i] == '!') {\n            while (i < S.size() && S[i] != '.'\
    \ && S[i] != '?' && S[i] != '!') {\n                i++;\n            }\n    \
    \        if (i == S.size() || S[i] != '.' && S[i] != '?' && S[i] != '!') {\n \
    \               break;\n            }\n        }\n        if (S[i] == 'I') {\n\
    \            i++;\n            counter++;\n        }\n        i++;\n    }\n  \
    \  return counter;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp46o3qxxy: /tmp/tmp46o3qxxy.cpp:35: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094383
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms=0;\n    // Your code goes here\n\
    \    \n    return 0;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmplv1rxidb: /tmp/tmplv1rxidb.cpp:21: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094384
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  long answer = 0;\n  for (int i = 0; i < S.size();\
    \ i++) {\n    if (S[i] == '.' || S[i] == '?' || S[i] == '!')\n      answer++;\n\
    \  }\n  return answer;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp8wgpkmog: /tmp/tmp8wgpkmog.cpp:22: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094386
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int boredoms = 0;\n    int size = S.size();\n\
    \    int i = 0;\n\n    while(i < size) {\n        char x = S[i];\n        if(x\
    \ == '.' || x == '?' || x == '!')\n            boredoms++;\n        else\n   \
    \         i++;\n    }\n\n    return boredoms;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660094390
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int counter = 0;\n    // This loop iterates\
    \ through the sentence S, \n    // and checks the value of the word 'I' in the\
    \ sentence S using 'find' method\n    for (auto &i : S) {\n        std::cout <<\
    \ \"i=\" << i << std::endl;\n        if (i.find(\"I\") != std::string::npos) {\n\
    \            counter++;\n        }\n    }\n    std::cout << \"counter=\" << counter\
    \ << std::endl;\n    return counter;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp107jinyi.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp107jinyi.cpp:17:15: error: request for member \u2018find\u2019 in \u2018\
    i\u2019, which is of non-class type \u2018char\u2019\n   17 |         if (i.find(\"\
    I\") != std::string::npos) {\n      |               ^~~~\n"
  stdout: ''
  timestamp: 1660094385
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int n = S.size();\n    int boredoms = 0;\n\
    \    for(int i = 0; i < n; i++) {\n        if(S[i] == 'i') {\n            for(int\
    \ j = i; j < (i+1); j++) {\n                if(S[j] == '.' || S[j] == '?' || S[j]\
    \ == '!') {\n                    boredoms++;\n                    break;\n   \
    \             }\n            }\n        }\n    }\n    return boredoms;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpf6df9ccg: /tmp/tmpf6df9ccg.cpp:30: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094386
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  int count = 0;\n  for (int i = 0; i < S.size();\
    \ i++) {\n    if (S[i] == 'I')\n      count += 1;\n  }\n  return count;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp41yn7vvl: /tmp/tmp41yn7vvl.cpp:22: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094386
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    int flag=0;\n\
    \    int arr[n+1];\n    for(int i=0;i<S.size();i++){\n        if(S[i]=='I')\n\
    \            flag++;\n    }\n    if(flag==0){\n        return 0;\n    }\n    for(int\
    \ i=0;i<S.size();i++){\n        if(S[i]=='I')\n            arr[n]=0;\n       \
    \ if(S[i]=='O')\n            arr[n]++;\n        if(S[i]=='!')\n            arr[n]++;\n\
    \    }\n    for(int i=0;i<arr.size();i++){\n        if(arr[i]<=0)\n          \
    \  continue;\n        else if(arr[i]==0)\n            return 0;\n        else\
    \ if(arr[i]==1)\n            return 1;\n    }\n    return 1;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu6y53avp.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpu6y53avp.cpp:14:13: error: \u2018n\u2019 was not declared in this scope\n\
    \   14 |     int arr[n+1];\n      |             ^\n/tmp/tmpu6y53avp.cpp:24:13:\
    \ error: \u2018arr\u2019 was not declared in this scope\n   24 |             arr[n]=0;\n\
    \      |             ^~~\n/tmp/tmpu6y53avp.cpp:26:13: error: \u2018arr\u2019 was\
    \ not declared in this scope\n   26 |             arr[n]++;\n      |         \
    \    ^~~\n/tmp/tmpu6y53avp.cpp:28:13: error: \u2018arr\u2019 was not declared\
    \ in this scope\n   28 |             arr[n]++;\n      |             ^~~\n/tmp/tmpu6y53avp.cpp:30:19:\
    \ error: \u2018arr\u2019 was not declared in this scope\n   30 |     for(int i=0;i<arr.size();i++){\n\
    \      |                   ^~~\n"
  stdout: ''
  timestamp: 1660094385
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count=0,i;\n    for(i=0;i<S.size();i++){\n\
    \        if(S[i]=='I' && S.substr(0,i+1)==\"I\"){\n            count++;\n    \
    \        if(i<S.size()-1){\n                if((S[i+1]=='.') || (S[i+1]=='?')\
    \ || (S[i+1]=='!')){\n                    count++;\n                }\n      \
    \      }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpi77oz81g: /tmp/tmpi77oz81g.cpp:28: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094386
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n        long count = 0;\n        // Write your\
    \ code here\n        for(long i = 0; i < S.size(); i++){\n                if(S[i]\
    \ == '.' || S[i] == '!' || S[i] == '?')\n                        count++;\n  \
    \      }\n        return count;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp6fhat4x_: /tmp/tmp6fhat4x_.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094385
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int count = 0; // initialize count of boredoms\
    \ to 0\n    std::string boredom = \"I\";\n    for(int i=0;i<S.size();i++) {\n\
    \        if(boredom == S[i]) {\n            count++;\n            boredom = \"\
    I\";\n        }\n        else {\n            boredom = \".\";\n        }\n   \
    \ }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8n5g5f2d.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp8n5g5f2d.cpp:15:20: error: no match for \u2018operator==\u2019 (operand\
    \ types are \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } and \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019})\n   15 |         if(boredom == S[i]) {\nIn file included\
    \ from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp8n5g5f2d.cpp:2:\n/usr/include/c++/9/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1026:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp8n5g5f2d.cpp:15:26:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   15\
    \ |         if(boredom == S[i]) {\n      |                          ^\nIn file\
    \ included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp8n5g5f2d.cpp:2:\n/usr/include/c++/9/bits/regex.h:1099:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator==(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1099 |     operator==(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1099:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp8n5g5f2d.cpp:15:26: note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019}\n   15 |         if(boredom == S[i]) {\n      | "
  stdout: ''
  timestamp: 1660094385
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n        long count = 0;\n        auto i = S.begin();\n\
    \        for(; i!= S.end(); ++i)\n            if((*i == 'I' || *i == '.' || *i\
    \ == '?' || *i == '!') && *(i+1) == 'I')\n                ++count;\n        return\
    \ count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp2hz7srph: /tmp/tmp2hz7srph.cpp:23: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094386
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long ans = 0;\n    // We must define what\
    \ is a boredom.\n    // 'boredom' is defined as a sentence that starts with 'I'.\n\
    \    for (auto &x : S) {\n        if (x != '.' && x != '?' && x != '!') {\n  \
    \          ans++;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp_13msw3y: /tmp/tmp_13msw3y.cpp:24: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094385
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    assert(S.size() > 1);\n    int count = 0;\n\
    \    for (int i=0; i<S.size(); i++) {\n        if (S[i] == 'I' || S[i] == '!'\
    \ || S[i] == '.')\n            count++;\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpybjd_mfx: /tmp/tmpybjd_mfx.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094385
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::vector<std::string> str_split;\n    str_split.push_back(S);\n\
    \    size_t str_split_len = str_split.size();\n    for (size_t i = 0; i < str_split_len;\
    \ i++) {\n        if (str_split[i][0] == 'I')\n            return 1;\n    }\n\
    \    return 0;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmptqao1mad: /tmp/tmptqao1mad.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094386
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Your code here\n    int count=0;\n    string\
    \ str1=S.substr(0, S.find('.'));\n    string str2=S.substr(S.find('.')+1);\n \
    \   if(str1 == \"I\" && str2 ==\".\"){\n        count=1;\n    }\n    \n    return\
    \ count;\n    \n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbj8d208n.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpbj8d208n.cpp:14:5: error: \u2018string\u2019 was not declared in this\
    \ scope\n   14 |     string str1=S.substr(0, S.find('.'));\n      |     ^~~~~~\n\
    /tmp/tmpbj8d208n.cpp:14:5: note: suggested alternatives:\nIn file included from\
    \ /usr/include/c++/9/iosfwd:39,\n                 from /usr/include/c++/9/ios:38,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpbj8d208n.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33:\
    \ note:   \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n\
    \      |                                 ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpbj8d208n.cpp:2:\n/usr/include/c++/9/string:67:11: note:   \u2018std::pmr::string\u2019\
    \n   67 |     using string    = basic_string<char>;\n      |           ^~~~~~\n\
    /tmp/tmpbj8d208n.cpp:15:11: error: expected \u2018;\u2019 before \u2018str2\u2019\
    \n   15 |     string str2=S.substr(S.find('.')+1);\n      |           ^~~~~\n\
    \      |           ;\n/tmp/tmpbj8d208n.cpp:16:8: error: \u2018str1\u2019 was not\
    \ declared in this scope\n   16 |     if(str1 == \"I\" && str2 ==\".\"){\n   \
    \   |        ^~~~\n/tmp/tmpbj8d208n.cpp:16:23: error: \u2018str2\u2019 was not\
    \ declared in this scope\n   16 |     if(str1 == \"I\" && str2 ==\".\"){\n   \
    \   |                       ^~~~\n"
  stdout: ''
  timestamp: 1660094385
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::vector<std::vector<std::string>> a;\n\
    \    for(auto &i : a) {\n        std::string temp = S;\n        while(true) {\n\
    \            auto pos = temp.find(\"I\", 1);\n            if(pos == std::string::npos)\
    \ {\n                temp = temp + \".\";\n                a.push_back({temp});\n\
    \                break;\n            }\n            else {\n                temp\
    \ = temp.substr(0, pos);\n                a.push_back({temp});\n            }\n\
    \        }\n    }\n    // Count the number of boredoms.\n    long ans = 0;\n \
    \   for(auto &i : a) {\n        if(std::find(std::begin(i), std::end(i), \"!\"\
    ) != std::end(i))\n            ++ans;\n        else if(std::find(std::begin(i),\
    \ std::end(i), \"?\") != std::end(i))\n            ++ans;\n        else if(std::find(std::begin(i),\
    \ std::end(i), \".\") != std::end(i))\n            ++ans;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpf7g5_3kf: /tmp/tmpf7g5_3kf.cpp:44: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094386
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::string temp;\n    long sum = 0;\n   \
    \ std::istringstream iss(S);\n    std::string word;\n    while (std::getline(iss,\
    \ word, '.')) {\n        if (word == \"I\") {\n            sum += 1;\n       \
    \ }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpuxh55a5q: /tmp/tmpuxh55a5q.cpp:27: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094385
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  // Your code goes here\n  \n  // long boredoms\
    \ = 0;\n  // // You code goes here\n  // for (auto it = S.begin(); it != S.end();\
    \ it++) {\n  //   if (*it == '.' || *it == '?' || *it == '!') {\n  //     boredoms++;\n\
    \  //   }\n  // }\n  \n  // return boredoms;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpcrg6aui_: /tmp/tmpcrg6aui_.cpp:26: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094386
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms=0;\n    size_t pos=0;\n    while(pos\
    \ < S.size()) {\n        pos = S.find(\". \", pos);\n        if(pos != std::string::npos)\
    \ boredoms += 1;\n        pos = S.find(\"? \", pos);\n        if(pos != std::string::npos)\
    \ boredoms += 1;\n        pos = S.find(\"! \", pos);\n        if(pos != std::string::npos)\
    \ boredoms += 1;\n        pos += 2;\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660094391
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long B = 0;\n    std::string tmp;\n    std::string::size_type\
    \ pos;\n    pos = S.find(\"I\");\n    if (pos != std::string::npos) {\n      \
    \  tmp = S.substr(pos + 1);\n        if (tmp == \"bore\" || tmp == \"bored\")\
    \ {\n            B++;\n        }\n    }\n    return B;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmprv614dsb: /tmp/tmprv614dsb.cpp:28: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094386
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n\tstd::vector<std::string> strs = split(S, \"\
    .!?\");\n\tint bored = 0;\n\tfor (std::string str: strs) {\n\t\tif (str.at(0)\
    \ == 'I') {\n\t\t\tbored++;\n\t\t}\n\t}\n\treturn bored;\n}\nint main() {\n  \
    \  auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp39vk0jr2.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp39vk0jr2.cpp:12:34: error: \u2018split\u2019 was not declared in this\
    \ scope\n   12 |  std::vector<std::string> strs = split(S, \".!?\");\n      |\
    \                                  ^~~~~\n"
  stdout: ''
  timestamp: 1660094385
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n\tint boredom = 0;\n\tfor (int i = 0; i < S.length();\
    \ i++) {\n\t\tif (S[i] == 'i') {\n\t\t\tboredom += 1;\n\t\t}\n\t}\n\treturn boredom;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpyazp3s8k: /tmp/tmpyazp3s8k.cpp:24: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094385
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::stack<std::string> s1;\n    std::string\
    \ s1=\"\";\n    bool flag=false;\n    for(int i=0;i<S.size();i++) {\n        if(S[i]=='?')\
    \ {\n            flag=true;\n        }\n        else if(S[i]=='!') {\n       \
    \     flag=false;\n        }\n        else {\n            if(flag==true) {\n \
    \               s1.push(S[i]);\n            }\n            else {\n          \
    \      if(s1==S[i]) {\n                    s1.push(S[i]);\n                }\n\
    \            }\n        }\n    }\n    if(s1.size()==0) {\n        return 0;\n\
    \    }\n    else {\n        for(int i=0;i<s1.size();i++) {\n            if(s1[i]==\"\
    I\") {\n                return 1;\n            }\n        }\n        return 0;\n\
    \    }\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3bzw_1nh.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp3bzw_1nh.cpp:13:17: error: conflicting declaration \u2018std::string\
    \ s1\u2019\n   13 |     std::string s1=\"\";\n      |                 ^~\n/tmp/tmp3bzw_1nh.cpp:12:29:\
    \ note: previous declaration as \u2018std::stack<std::__cxx11::basic_string<char>\
    \ > s1\u2019\n   12 |     std::stack<std::string> s1;\n      |               \
    \              ^~\n/tmp/tmp3bzw_1nh.cpp:24:29: error: no matching function for\
    \ call to \u2018std::stack<std::__cxx11::basic_string<char> >::push(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   24 |                 s1.push(S[i]);\n      | \
    \                            ^\nIn file included from /usr/include/c++/9/stack:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:89,\n\
    \                 from /tmp/tmp3bzw_1nh.cpp:2:\n/usr/include/c++/9/bits/stl_stack.h:233:7:\
    \ note: candidate: \u2018void std::stack<_Tp, _Sequence>::push(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Sequence = std::deque<std::__cxx11::basic_string<char>,\
    \ std::allocator<std::__cxx11::basic_string<char> > >; std::stack<_Tp, _Sequence>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n  233 |       push(const value_type&\
    \ __x)\n      |       ^~~~\n/usr/include/c++/9/bits/stl_stack.h:233:30: note:\
    \   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n  233 |       push(const\
    \ value_type& __x)\n      |            ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_stack.h:238:7:\
    \ note: candidate: \u2018void std::stack<_Tp, _Sequence>::push(std::stack<_Tp,\
    \ _Sequence>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Sequence\
    \ = std::deque<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>\
    \ > >; std::stack<_Tp, _Sequence>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n  238 |       push(value_type&& __x)\n      |       ^~~~\n/usr/includ"
  stdout: ''
  timestamp: 1660094385
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int boredoms = 0;\n    for (int i = 0; i <\
    \ S.size(); i++)\n        if (S[i] == 'I')\n            boredoms++;\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpr564oayt: /tmp/tmpr564oayt.cpp:21: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094386
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long ans = 0;\n    for (char ch : S) {\n \
    \       if (ch == '.')\n            ans++;\n        else if (ch == '?')\n    \
    \        ans++;\n        else if (ch == '!')\n            ans++;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmproeztto2: /tmp/tmproeztto2.cpp:26: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094386
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::vector<std::string> words;\n    std::istringstream\
    \ iss(S);\n    std::string token;\n    while (std::getline(iss, token, ' ')) {\n\
    \        words.push_back(token);\n    }\n    std::sort(words.begin(), words.end());\n\
    \    long boredoms = 0;\n    for (auto const &word : words) {\n        if (word\
    \ == \"I\" || word == \"i\") {\n            boredoms += 1;\n        }\n    }\n\
    \    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp0_1otu8p: /tmp/tmp0_1otu8p.cpp:34: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094386
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int i=0,j;\n    long ans=0;\n    while(i<S.size()){\n\
    \        // i increases while we find a '.'\n        // j increases while we find\
    \ a space\n        // j increases by one if we find a '?'\n        // j increases\
    \ by one if we find a '!'\n        if(i<S.size() && (S[i]=='.' || S[i]==' ' ||\
    \ S[i]=='?' || S[i]=='!')){\n            j=i;\n            while(j<S.size()){\n\
    \                if(S[j]=='.' || S[j]==' ' || S[j]=='?' || S[j]=='!'){\n     \
    \               j++;\n                    break;\n                }\n        \
    \        j++;\n            }\n            // If we reached end of string, we know\
    \ that there is a boredom\n            if(i==S.size()-1 && S[i]=='?'){\n     \
    \           ans++;\n                i=j;\n            }\n            // If we\
    \ reached end of string, we know that there isn't a boredom\n            if(i==S.size()-1\
    \ && S[i]=='!'){\n                ans++;\n            }\n        }\n        i++;\n\
    \    }\n    // Since we started at the end of the string, we know that there isn't\
    \ a boredom\n    return ans;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpo6h2br0p: /tmp/tmpo6h2br0p.cpp:46: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094386
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    assert(S != \"\" && S.size() > 0 && S[0] ==\
    \ 'I');\n    // TODO: Write your code here\n    int counter = 0;\n    for(int\
    \ i = 0; i < S.size()-1; ++i){\n        if(S[i] == '.' || S[i] == '?' || S[i]\
    \ == '!'){\n            counter++;\n        }\n    }\n    return counter;\n}\n\
    int main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp5eayr5g_: /tmp/tmp5eayr5g_.cpp:12: long int is_bored(std::string): Assertion
    `S != "" && S.size() > 0 && S[0] == ''I'''' failed.

    '
  stdout: ''
  timestamp: 1660094385
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Complete this function\n    long boredom=0;\n\
    \    for(auto word:S){\n        if(word==\"I\"){\n            boredom++;\n   \
    \     }\n    }\n    return boredom;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvjx3ry79.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpvjx3ry79.cpp:15:18: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   15 |         if(word==\"I\"){\n      |      \
    \            ^~~\n"
  stdout: ''
  timestamp: 1660094385
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int count = 0;\n    for(int i=0;i<S.size();i++){\n\
    \        if(S.at(i)==\"I\"){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvvj8_u4_.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpvvj8_u4_.cpp:14:21: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   14 |         if(S.at(i)==\"I\"){\n      |   \
    \                  ^~~\n"
  stdout: ''
  timestamp: 1660094385
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long cnt=0;\n    long flag=0;\n    for(int\
    \ i=0;i<S.length();i++){\n        if(S[i]==\"I\"){\n            cnt=cnt+1;\n \
    \           if((i==0) && (S[i+1]==\".\")){\n                flag=1;\n        \
    \    }\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzioy_bg7.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpzioy_bg7.cpp:15:18: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   15 |         if(S[i]==\"I\"){\n      |      \
    \            ^~~\n/tmp/tmpzioy_bg7.cpp:17:35: error: ISO C++ forbids comparison\
    \ between pointer and integer [-fpermissive]\n   17 |             if((i==0) &&\
    \ (S[i+1]==\".\")){\n      |                                   ^~~\n"
  stdout: ''
  timestamp: 1660094385
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    string temp1, temp2;\n    size_t count = 0;\n\
    \    for (size_t i = 0; i < S.size(); ++i) {\n        if (S[i] != '.') continue;\n\
    \        temp2 = S;\n        temp2 = temp2.substr(0, i);\n        if (temp2 ==\
    \ \"I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppmpz13uz.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmppmpz13uz.cpp:12:5: error: \u2018string\u2019 was not declared in this\
    \ scope\n   12 |     string temp1, temp2;\n      |     ^~~~~~\n/tmp/tmppmpz13uz.cpp:12:5:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/iosfwd:39,\n\
    \                 from /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmppmpz13uz.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33: note:  \
    \ \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n \
    \     |                                 ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmppmpz13uz.cpp:2:\n/usr/include/c++/9/string:67:11: note:   \u2018std::pmr::string\u2019\
    \n   67 |     using string    = basic_string<char>;\n      |           ^~~~~~\n\
    /tmp/tmppmpz13uz.cpp:16:9: error: \u2018temp2\u2019 was not declared in this scope\n\
    \   16 |         temp2 = S;\n      |         ^~~~~\n"
  stdout: ''
  timestamp: 1660094385
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    long bored =\
    \ 0;\n    int i = 0;\n    while(i < S.size()){\n        if(S[i] == \".\" || S[i]\
    \ == \"?\" || S[i] == \"!\"){\n            bored++;\n        }\n        i++;\n\
    \    }\n    return bored;\n}\nint main() {\n    auto candidate = is_bored;\n \
    \   assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the\
    \ sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n \
    \   assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl8gp72qo.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpl8gp72qo.cpp:16:20: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   16 |         if(S[i] == \".\" || S[i] == \"?\"\
    \ || S[i] == \"!\"){\n      |                    ^~~\n/tmp/tmpl8gp72qo.cpp:16:35:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   16 |         if(S[i] == \".\" || S[i] == \"?\" || S[i] == \"!\"){\n      |\
    \                                   ^~~\n/tmp/tmpl8gp72qo.cpp:16:50: error: ISO\
    \ C++ forbids comparison between pointer and integer [-fpermissive]\n   16 | \
    \        if(S[i] == \".\" || S[i] == \"?\" || S[i] == \"!\"){\n      |       \
    \                                           ^~~\n"
  stdout: ''
  timestamp: 1660094385
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    \n    // Return the number of boredom sentences\
    \ in S.\n    // The function returns zero if S is empty or consists of only spaces\n\
    \    // or words that do not start with \"I\".\n    if (S.empty() || S[0] == 'I'\
    \ || S[0] == '.' || S[0] == '?' || S[0] == '!') {\n        return 0;\n    }\n\
    \    else {\n        char c = S[0];\n        int n = 0;\n        for (int i =\
    \ 1; i < S.size(); i++) {\n            if (c == '.') {\n                if (S[i]\
    \ == '.') {\n                    n++;\n                }\n            }\n    \
    \        else if (c == '?' || c == '!') {\n                if (S[i] == '?' ||\
    \ S[i] == '!') {\n                    n++;\n                }\n            }\n\
    \            else {\n                if (S[i] == c) {\n                    n++;\n\
    \                }\n            }\n            c = S[i];\n        }\n        return\
    \ n;\n    }\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnhop9rj8: /tmp/tmpnhop9rj8.cpp:45: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094386
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long n = 0;\n    for(int i = 0;i < S.size();i++)\
    \ {\n        if(S[i] == 'I') {\n            for(int j = i;j < S.size();j++) {\n\
    \                if(S[j] == '.' || S[j] == '?' || S[j] == '!') {\n           \
    \         if(S[j] == '.') {\n                        n = n - 1;\n            \
    \        }\n                    else {\n                        n = n + 1;\n \
    \                   }\n                    break;\n                }\n       \
    \     }\n            break;\n        }\n    }\n    return n;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpche5hnfx: /tmp/tmpche5hnfx.cpp:34: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094386
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int count = 0;\n    for (int i = 0; i < S.length();\
    \ i++) {\n        if (S[i] == 'i') {\n            count += 1;\n        }\n   \
    \ }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpktao7vuo: /tmp/tmpktao7vuo.cpp:24: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094386
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int boredom = 0;\n    std::string delimiters\
    \ = {\".\", \"?\", \"!\"};\n    std::string temp_str = S;\n    std::string word_str\
    \ = \"\";\n    std::string::iterator it;\n    // Remove the delimiter from the\
    \ beginning of the string.\n    size_t pos = 0;\n    while ((pos = temp_str.find(delimiters[0],\
    \ pos)) != std::string::npos) {\n        temp_str.replace(pos, 1, \"\");\n   \
    \     pos += 1;\n    }\n    while (temp_str.size()) {\n        it = temp_str.begin();\n\
    \        bool found = false;\n        while (it != temp_str.end()) {\n       \
    \     if (*it == ' ') {\n                // If space found, ignore this space\
    \ in the string.\n                it++;\n                continue;\n         \
    \   }\n            word_str += *it;\n            if (word_str == \"I\") {\n  \
    \              found = true;\n                ++boredom;\n                break;\n\
    \            }\n            it++;\n        }\n        // Add the word to the temp\
    \ string to be processed.\n        temp_str = word_str;\n        // Remove the\
    \ word from the beginning of the string.\n        pos = 0;\n        while ((pos\
    \ = temp_str.find(delimiters[0], pos)) != std::string::npos) {\n            temp_str.replace(pos,\
    \ 1, \"\");\n            pos += 1;\n        }\n    }\n    return boredom;\n}\n\
    int main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp75nu_tew.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp75nu_tew.cpp:13:44: error: could not convert \u2018{\".\", \"?\", \"\
    !\"}\u2019 from \u2018<brace-enclosed initializer list>\u2019 to \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019}\n   13 |     std::string\
    \ delimiters = {\".\", \"?\", \"!\"};\n      |                               \
    \             ^\n      |                                            |\n      |\
    \                                            <brace-enclosed initializer list>\n"
  stdout: ''
  timestamp: 1660094386
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int boredoms = 0;\n    // Declare a vector\
    \ to store all words from string S\n    std::vector<std::string> words;\n    //\
    \ For each word in the string\n    std::string w = S;\n    // Use a loop to iterate\
    \ through all the words in the string\n    while (w) {\n        // If current\
    \ word starts with 'I', increment the boredoms counter\n        if (w.find(\"\
    I\") == 0)\n            boredoms++;\n        // Remove the word from the string\n\
    \        w = w.substr(1);\n    }\n    // Return the boredoms counter\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp74ngcft.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpp74ngcft.cpp:18:12: error: could not convert \u2018w\u2019 from \u2018\
    std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019} to \u2018\
    bool\u2019\n   18 |     while (w) {\n      |            ^\n      |           \
    \ |\n      |            std::string {aka std::__cxx11::basic_string<char>}\n"
  stdout: ''
  timestamp: 1660094386
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    long boredoms\
    \ = 0;\n    for (int i = 0; i < (int)S.size(); i++)\n    {\n        if (S[i] ==\
    \ '.' || S[i] == '?' || S[i] == '!')\n        {\n            boredoms++;\n   \
    \     }\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpu3hf77h_: /tmp/tmpu3hf77h_.cpp:26: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094386
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  long i=0,count=0;\n  while(S[i]!='.' && S[i]!='?'\
    \ && S[i]!='!'){\n    if(S[i]=='I'){\n      count++;\n      i++;\n    }\n    else{\n\
    \      i++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp6downjt7: /tmp/tmp6downjt7.cpp:26: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094386
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  int i = 0;\n  int b = 0;\n  assert(S.size()\
    \ > 0);\n  std::string temp = S;\n  std::swap(temp[0], temp[temp.length() - 1]);\n\
    \  temp.erase(temp.begin(), temp.begin() + 1);\n  std::reverse(temp.begin(), temp.end());\n\
    \  for (auto it = temp.begin(); it != temp.end(); it++) {\n    if (*it == \"I\"\
    ) {\n      b = 1;\n      break;\n    }\n  }\n  if (b == 0) {\n    return 0;\n\
    \  }\n  std::string temp2;\n  std::string::iterator it = temp.begin();\n  while\
    \ (it != temp.end()) {\n    temp2 = *it;\n    it = temp.begin();\n    for (auto\
    \ it2 = temp.begin(); it2 != temp.end(); it2++) {\n      if (*it2 != '.') {\n\
    \        continue;\n      }\n      if (temp2 == temp2) {\n        b++;\n     \
    \ }\n    }\n  }\n  return b;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1cacpfjr.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp1cacpfjr.cpp:20:16: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   20 |     if (*it == \"I\") {\n      |       \
    \         ^~~\n"
  stdout: ''
  timestamp: 1660094386
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Your code here\n    int boredoms = 1;\n\
    \    // loop over each word\n    int count = 0;\n    for (auto it = S.begin();\
    \ it != S.end(); ++it) {\n        if (*it == '.') {\n            count++;\n  \
    \      }\n        // check if it begins with 'I'\n        else if (*it == 'I')\
    \ {\n            count++;\n        }\n        // check if it ends with '!'\n \
    \       else if (*it == '!') {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp68qqvsj8: /tmp/tmp68qqvsj8.cpp:34: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094386
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int boredom_count = 0;\n    int len = S.length();\n\
    \    // use indexOf method from String class\n    for (int i = 0; i < len; i++)\
    \ {\n        if ((S.charAt(i) == 'I') && (S.charAt(i + 1) != '.')) \n        \
    \    boredom_count++;\n    }\n    return boredom_count;\n}\nint main() {\n   \
    \ auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm__bbyxn.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpm__bbyxn.cpp:16:16: error: \u2018std::string\u2019 {aka \u2018class\
    \ std::__cxx11::basic_string<char>\u2019} has no member named \u2018charAt\u2019\
    \n   16 |         if ((S.charAt(i) == 'I') && (S.charAt(i + 1) != '.'))\n    \
    \  |                ^~~~~~\n/tmp/tmpm__bbyxn.cpp:16:40: error: \u2018std::string\u2019\
    \ {aka \u2018class std::__cxx11::basic_string<char>\u2019} has no member named\
    \ \u2018charAt\u2019\n   16 |         if ((S.charAt(i) == 'I') && (S.charAt(i\
    \ + 1) != '.'))\n      |                                        ^~~~~~\n"
  stdout: ''
  timestamp: 1660094386
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long cnt = 0;\n    for(size_t i = 0; i < S.size();\
    \ i++)\n    {\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!')\n      \
    \  {\n            cnt += 1;\n        }\n    }\n    return cnt;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpgaj0zfjy: /tmp/tmpgaj0zfjy.cpp:25: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094386
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int n = S.size();\n    int boredom_count =\
    \ 0;\n    for (int i = 0; i < n; i++) {\n        if (S[i] == '.') {\n        \
    \    while (S[i + 1] == ' ' && S[i + 2] != '.')\n                i++;\n      \
    \      if (S[i] == '.')\n                boredom_count++;\n            while (S[i\
    \ + 1] != ' ' || S[i + 2] != '.')\n                i++;\n        } else if (S[i]\
    \ == '?') {\n            while (S[i + 1] == ' ' && S[i + 2] != '.' || S[i + 2]\
    \ != ' ')\n                i++;\n            if (S[i] == '?')\n              \
    \  boredom_count++;\n            while (S[i + 1] != ' ' || S[i + 2] != '.' ||\
    \ S[i + 2] != ' ')\n                i++;\n        } else if (S[i] == '!') {\n\
    \            while (S[i + 1] == ' ' && S[i + 2] != '.' || S[i + 2] != ' ')\n \
    \               i++;\n            if (S[i] == '!')\n                boredom_count++;\n\
    \            while (S[i + 1] != ' ' || S[i + 2] != '.' || S[i + 2] != ' ')\n \
    \               i++;\n        }\n    }\n    return boredom_count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660094385
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long c=0;\n    for(char ch:S){\n        if(\
    \ ch == 'I'){\n            ++c;\n        }\n    }\n    return c;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmayashz7: /tmp/tmpmayashz7.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094387
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    int count=0,i;\n\
    \    for(i=0;i<S.size();i++)\n    {\n        if (S[i]=='.' || S[i]=='?' || S[i]=='!')\n\
    \            count++;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpn948qxvt: /tmp/tmpn948qxvt.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094388
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long result = 0;\n    for (int i = 0; i <\
    \ S.size(); i++) {\n        if (S[i] == 'I') {\n            result += 1;\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpdlmsclqx: /tmp/tmpdlmsclqx.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094388
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int count = 0;\n    for(int i=0;i<S.size();i++){\n\
    \        if(S[i]=='I' || S[i]=='i' || S[i]=='.'){\n            count++;\n    \
    \    }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp32oy__6t: /tmp/tmp32oy__6t.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094387
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long counter = 0;\n    std::cin >> S;\n  \
    \  // return number of boredoms\n    for (size_t i = 0; i < S.size(); i++) {\n\
    \        char word = S[i];\n        if (word == 'I')\n            counter++;\n\
    \    }\n    return counter;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660094392
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int sum = 0;\n    int i;\n    for (i = 0;\
    \ S[i] != \".\" && S[i] != \"!\" && S[i] != \"?\" && S[i] != \"I\"; i++)\n   \
    \     ;\n    for (char &c : S) if (c == '.') c = '?';\n    else for (c = S[i];\
    \ c != '!' && c != '?' && c != 'I'; c = S[i]) if (c == '.') c = '?';\n    for\
    \ (i = 0; S[i] != '.' && S[i] != '!' && S[i] != '?' && S[i] != 'I'; i++)\n   \
    \     if (S[i] == '.') S[i] = '?';\n    std::string t = S;\n    S = t;\n    for\
    \ (i = 0; S[i] != '.' && S[i] != '!' && S[i] != '?' && S[i] != 'I'; i++)\n   \
    \     ;\n    for (i = 0; i < S.size(); i++)\n        sum += (i % 2 == 0) ? 1 :\
    \ -1;\n    return sum;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkjh86tj8.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpkjh86tj8.cpp:14:25: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   14 |     for (i = 0; S[i] != \".\" && S[i] !=\
    \ \"!\" && S[i] != \"?\" && S[i] != \"I\"; i++)\n      |                     \
    \    ^~~\n/tmp/tmpkjh86tj8.cpp:14:40: error: ISO C++ forbids comparison between\
    \ pointer and integer [-fpermissive]\n   14 |     for (i = 0; S[i] != \".\" &&\
    \ S[i] != \"!\" && S[i] != \"?\" && S[i] != \"I\"; i++)\n      |             \
    \                           ^~~\n/tmp/tmpkjh86tj8.cpp:14:55: error: ISO C++ forbids\
    \ comparison between pointer and integer [-fpermissive]\n   14 |     for (i =\
    \ 0; S[i] != \".\" && S[i] != \"!\" && S[i] != \"?\" && S[i] != \"I\"; i++)\n\
    \      |                                                       ^~~\n/tmp/tmpkjh86tj8.cpp:14:70:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   14 |     for (i = 0; S[i] != \".\" && S[i] != \"!\" && S[i] != \"?\" && S[i]\
    \ != \"I\"; i++)\n      |                                                    \
    \                  ^~~\n"
  stdout: ''
  timestamp: 1660094387
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  // Write your code here\n  return 0;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpsla6wldf: /tmp/tmpsla6wldf.cpp:19: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094388
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    // Write your code\
    \ here\n    std::string word;\n    for (size_t i = 0; i < S.length(); i++) {\n\
    \        if (S[i] == '.') {\n            word = S.substr(i + 1, S.length() - i);\n\
    \            assert(word.length() > 0);\n            if (word == \"I\") {\n  \
    \              boredoms++;\n            }\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp5cbyvy75: /tmp/tmp5cbyvy75.cpp:30: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094388
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  std::regex e(\"^I\");\n  int count = 0;\n  std::for_each(S.cbegin(),\
    \ S.cend(), [&](char c) {\n    if (std::regex_match(&c, e)) {\n      count++;\n\
    \    }\n  });\n  return count;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpuqpq1_ro: /tmp/tmpuqpq1_ro.cpp:25: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094390
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n        long ans = 0;\n        int flag = 1;\n\
    \        for(int i = 0; S[i] != '\\0'; i++){\n                if(S[i] == 'I'){\n\
    \                        flag = 0;\n                        for(int j = i; j >\
    \ 0 ; j--){\n                                if(S[j] == 'I'){\n              \
    \                          flag = 1;\n                                       \
    \ break;\n                                }\n                        }\n     \
    \                   if(flag){\n                                ans += 1;\n   \
    \                     }\n                }\n        }\n        return ans;\n}\n\
    int main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp2c7tscpw: /tmp/tmp2c7tscpw.cpp:35: int main(): Assertion `candidate(("bIt"))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094388
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::pair<int, int> P;\n    bool ans = false;\n\
    \    // Check for each character in the string\n    for (auto c = S.cbegin();\
    \ c != S.cend(); ++c) {\n        if (*c != '.') {\n            ans = false;\n\
    \        }\n        if ((*c == ' ') || (*c == '.')) {\n            P.pb.push_back((*c));\n\
    \            ans = true;\n        }\n        // If there's a question mark mark\
    \ at the end of the sentence, set the ans\n        // flag to true so we don't\
    \ add the current character to the boredom\n        if ((*c == '?') || (*c ==\
    \ '!')) {\n            ans = true;\n        }\n    }\n    // Count the number\
    \ of \"I\"s in the sentence\n    int I = P.first;\n    // Check if it's a boredom\n\
    \    if (ans == true && (I == 0 || I == 1 && P.pb[0] == 'I')) {\n        return\
    \ 1;\n    } else {\n        return 0;\n    }\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0srsp76l.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp0srsp76l.cpp:20:15: error: \u2018struct std::pair<int, int>\u2019 has\
    \ no member named \u2018pb\u2019\n   20 |             P.pb.push_back((*c));\n\
    \      |               ^~\n/tmp/tmp0srsp76l.cpp:32:47: error: \u2018struct std::pair<int,\
    \ int>\u2019 has no member named \u2018pb\u2019\n   32 |     if (ans == true &&\
    \ (I == 0 || I == 1 && P.pb[0] == 'I')) {\n      |                           \
    \                    ^~\n/tmp/tmp0srsp76l.cpp:37:1: warning: control reaches end\
    \ of non-void function [-Wreturn-type]\n   37 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660094388
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int boredoms = 0;\n    // Write your code\
    \ here.\n    if (S.find(\"I\")!=std::string::npos)\n        boredoms = 1;\n  \
    \  return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpffhkfelg: /tmp/tmpffhkfelg.cpp:21: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094388
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  int i;\n  int a=0;\n  for (i=0;i<S.size();i++){\n\
    \    if(S[i]==\".\")\n    {\n      if(S[i+1]==\".\"){\n        if(S[i+2]==\".\"\
    ){\n          a++;\n        }\n        else{\n          a--;\n        }\n    \
    \  }\n      else{\n        a++;\n      }\n    }\n    if(S[i]==\"?\")\n    {\n\
    \      if(S[i+1]==\"?\"){\n        if(S[i+2]==\"?\"){\n          a++;\n      \
    \  }\n        else{\n          a--;\n        }\n      }\n      else{\n       \
    \ a++;\n      }\n    }\n    if(S[i]==\"!\")\n    {\n      if(S[i+1]==\"!\"){\n\
    \        if(S[i+2]==\"!\"){\n          a++;\n        }\n        else{\n      \
    \    a--;\n        }\n      }\n      else{\n        a++;\n      }\n    }\n  }\n\
    \  return a;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpamyuz94r.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpamyuz94r.cpp:15:14: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   15 |     if(S[i]==\".\")\n      |           \
    \   ^~~\n/tmp/tmpamyuz94r.cpp:17:18: error: ISO C++ forbids comparison between\
    \ pointer and integer [-fpermissive]\n   17 |       if(S[i+1]==\".\"){\n     \
    \ |                  ^~~\n/tmp/tmpamyuz94r.cpp:18:20: error: ISO C++ forbids comparison\
    \ between pointer and integer [-fpermissive]\n   18 |         if(S[i+2]==\".\"\
    ){\n      |                    ^~~\n/tmp/tmpamyuz94r.cpp:29:14: error: ISO C++\
    \ forbids comparison between pointer and integer [-fpermissive]\n   29 |     if(S[i]==\"\
    ?\")\n      |              ^~~\n/tmp/tmpamyuz94r.cpp:31:18: error: ISO C++ forbids\
    \ comparison between pointer and integer [-fpermissive]\n   31 |       if(S[i+1]==\"\
    ?\"){\n      |                  ^~~\n/tmp/tmpamyuz94r.cpp:32:20: error: ISO C++\
    \ forbids comparison between pointer and integer [-fpermissive]\n   32 |     \
    \    if(S[i+2]==\"?\"){\n      |                    ^~~\n/tmp/tmpamyuz94r.cpp:43:14:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   43 |     if(S[i]==\"!\")\n      |              ^~~\n/tmp/tmpamyuz94r.cpp:45:18:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   45 |       if(S[i+1]==\"!\"){\n      |                  ^~~\n/tmp/tmpamyuz94r.cpp:46:20:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   46 |         if(S[i+2]==\"!\"){\n      |                    ^~~\n"
  stdout: ''
  timestamp: 1660094387
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    for(int i = 0; i < S.size();\
    \ i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!')\n            count++;\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n \
    \   assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the\
    \ sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n \
    \   assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmprc6miy3t: /tmp/tmprc6miy3t.cpp:22: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094388
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  int n = S.size();\n  long boredoms = 0;\n  for\
    \ (int i = 1; i < n; i++) {\n    if (S[i-1] == '?' || S[i-1] == '!') {\n     \
    \ boredoms +=1;\n    } else {\n      boredoms += 0;\n    }\n  }\n  return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp4bap07vu: /tmp/tmp4bap07vu.cpp:27: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094388
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int i,j,k,n,m,flag,flag1,flag2,count=0;\n\
    \    int boredom_count=0;\n    for(i=0;i<S.size();i++)\n    {\n        if((S[i]\
    \ == '.' || S[i] == '?' || S[i] == '!'))\n        {\n            flag=0;\n   \
    \         flag1=0;\n            flag2=0;\n            for(j=i;j<S.size();j++)\n\
    \            {\n                if(S[j] == '.')\n                    flag1=1;\n\
    \                if(S[j] == '?')\n                    flag2=1;\n             \
    \   if(S[j] == '!')\n                    flag2=1;\n                if(flag==0\
    \ && flag1==0 && flag2==1)\n                {\n                    flag=1;\n \
    \               }\n                if(flag==1 && flag1==0 && flag2==1)\n     \
    \           {\n                    flag=2;\n                }\n              \
    \  if(flag==2 && flag1==0 && flag2==1)\n                {\n                  \
    \  flag=3;\n                }\n                if(flag==3 && flag1==0 && flag2==1)\n\
    \                {\n                    flag=4;\n                }\n         \
    \   }\n            if(flag==0)\n            {\n                count+=1;\n   \
    \         }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp1j_rydka: /tmp/tmp1j_rydka.cpp:58: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094388
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  if(S.size() <= 2){\n    return -1;\n  }\n  if(S.at(0).at(0)\
    \ == '.' || S.at(0).at(0) == '?' || S.at(0).at(0) == '!'){\n    return -1;\n \
    \ }\n  long count = 0;\n  for(int i = 1; i < S.size(); i++){\n    if(S.at(i).at(0)\
    \ == '.' || S.at(i).at(0) == '?' || S.at(i).at(0) == '!'){\n      count++;\n \
    \   }\n  }\n  return count;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx7_fk9pr.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpx7_fk9pr.cpp:15:14: error: request for member \u2018at\u2019 in \u2018\
    S.std::__cxx11::basic_string<char>::at(0)\u2019, which is of non-class type \u2018\
    __gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018\
    char\u2019}\n   15 |   if(S.at(0).at(0) == '.' || S.at(0).at(0) == '?' || S.at(0).at(0)\
    \ == '!'){\n      |              ^~\n/tmp/tmpx7_fk9pr.cpp:15:38: error: request\
    \ for member \u2018at\u2019 in \u2018S.std::__cxx11::basic_string<char>::at(0)\u2019\
    , which is of non-class type \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019}\n   15 |   if(S.at(0).at(0) ==\
    \ '.' || S.at(0).at(0) == '?' || S.at(0).at(0) == '!'){\n      |             \
    \                         ^~\n/tmp/tmpx7_fk9pr.cpp:15:62: error: request for member\
    \ \u2018at\u2019 in \u2018S.std::__cxx11::basic_string<char>::at(0)\u2019, which\
    \ is of non-class type \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019}\n   15 |   if(S.at(0).at(0) == '.' || S.at(0).at(0) ==\
    \ '?' || S.at(0).at(0) == '!'){\n      |                                     \
    \                         ^~\n/tmp/tmpx7_fk9pr.cpp:20:16: error: request for member\
    \ \u2018at\u2019 in \u2018S.std::__cxx11::basic_string<char>::at(((std::__cxx11::basic_string<char>::size_type)i))\u2019\
    , which is of non-class type \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019}\n   20 |     if(S.at(i).at(0)\
    \ == '.' || S.at(i).at(0) == '?' || S.at(i).at(0) == '!'){\n      |          \
    \      ^~\n/tmp/tmpx7_fk9pr.cpp:20:40: error: request for member \u2018at\u2019\
    \ in \u2018S.std::__cxx11::basic_string<char>::at(((std::__cxx11::basic_string<char>::size_type)i))\u2019\
    , which is of non-class type \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019}\n   20 |     if(S.at(i).at(0)\
    \ == '.' || S.at(i).at(0) == '?' || S.at(i).at(0) == '!'){\n      |          \
    \                              ^~\n/tmp/tmpx7_fk9pr.cpp:20:64: error: request\
    \ for member \u2018at\u2019 in \u2018S.std::__cxx11"
  stdout: ''
  timestamp: 1660094388
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Complete this function\n    return 0;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpdi7__6jl: /tmp/tmpdi7__6jl.cpp:19: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094388
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    for (int i = 0; i\
    \ < S.size(); i++) {\n        if (S[i] == 'I' && i != 0) {\n            boredoms\
    \ ++;\n        }\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpxeoqz9gk: /tmp/tmpxeoqz9gk.cpp:25: int main(): Assertion `candidate(("bIt"))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094388
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int count = 0;\n    // Write your code here\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmptothmus5: /tmp/tmptothmus5.cpp:17: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094388
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  int count = 0;\n  if(S.empty()){\n    return\
    \ 0;\n  }\n\n  bool startsWithI = true;\n  if(S[0] == 'I'){\n    startsWithI =\
    \ false;\n  }\n  \n  int lengthOfS = S.length();\n  \n  for(int i = 1; i < lengthOfS;\
    \ i++){\n    if(S[i] == '.' || S[i] == '?' || S[i] == '!'){\n      count++;\n\
    \    }\n    if(S[i] == S[0]){ // boredom\n      if(startsWithI && S[i-1] == 'I'){\
    \ // starts with I\n        continue;\n      }\n      if(S[i-1] == 'I'){ // starts\
    \ with I\n        startsWithI = false;\n      }\n    }\n  }\n  return count;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpbcp5gcwi: /tmp/tmpbcp5gcwi.cpp:42: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094388
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n\tint boredoms = 0;\n\tint last = 0;\n\tfor(char\
    \ &c : S){\n\t\tif(c != '.' && c != '?' && c != '!') {\n\t\t\tboredoms++;\n\t\t\
    }\n\t\telse{\n\t\t\tlast = c;\n\t\t}\n\t}\n\tfor(int i = last;  i < S.length();\
    \ i++){\n\t\tif(S[i] != '.' && S[i] != '?' && S[i] != '!') {\n\t\t\tboredoms++;\n\
    \t\t}\n\t}\n\treturn boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp75r7fnil: /tmp/tmp75r7fnil.cpp:31: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094388
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    assert(S.size() > 0);\n    int cnt = 0, cnt1\
    \ = 0, cnt2 = 0;\n    for (int i = 0; i < S.size(); i++) {\n        if (S[i] !=\
    \ \".\" && S[i] != \"?\" && S[i] != \"!\") {\n            cnt++;\n           \
    \ if (S[i] == 'I') cnt1++;\n        }\n        if (S[i] == '.') cnt++;\n     \
    \   if (S[i] == '?') cnt++;\n        if (S[i] == '!') cnt++;\n        if (S[i]\
    \ == 'I') cnt2++;\n    }\n    if (cnt > 0) return 0;\n    if (cnt1 == cnt) return\
    \ 1;\n    if (cnt2 == cnt) return 1;\n    return 1;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcqzfygo4.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpcqzfygo4.cpp:15:21: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   15 |         if (S[i] != \".\" && S[i] != \"\
    ?\" && S[i] != \"!\") {\n      |                     ^~~\n/tmp/tmpcqzfygo4.cpp:15:36:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   15 |         if (S[i] != \".\" && S[i] != \"?\" && S[i] != \"!\") {\n    \
    \  |                                    ^~~\n/tmp/tmpcqzfygo4.cpp:15:51: error:\
    \ ISO C++ forbids comparison between pointer and integer [-fpermissive]\n   15\
    \ |         if (S[i] != \".\" && S[i] != \"?\" && S[i] != \"!\") {\n      |  \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1660094388
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    if(S.size() == 0)\n        return 0;\n   \
    \ char boredom[100];\n    memset(boredom, '\\0', sizeof(boredom));\n    boredom[0]\
    \ = 'I';\n    bool bFound = false;\n    std::string currentWord = \"\";\n    \n\
    \    // Loop through each word in the string\n    for(int i = 1; i < S.size();\
    \ i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!') {\n          \
    \  // If found, add it to currentWord, \n            // then clear the boredom\
    \ variable\n            if(S[i] == '.') {\n                currentWord += \".\"\
    ;\n                memset(boredom, '\\0', sizeof(boredom));\n            }\n \
    \           else if(S[i] == '?') {\n                currentWord += \"?\";\n  \
    \              memset(boredom, '\\0', sizeof(boredom));\n            }\n     \
    \       else if(S[i] == '!') {\n                currentWord += \"!\";\n      \
    \          memset(boredom, '\\0', sizeof(boredom));\n            }\n         \
    \   else {\n                currentWord += S[i];\n                bFound = true;\n\
    \            }\n        }\n        else {\n            // If not found, add currentWord\
    \ to boredom\n            currentWord += S[i];\n            bFound = true;\n \
    \       }\n    }\n    \n    // If the currentWord is the boredom word, then increment\
    \ the count\n    if(bFound && currentWord == boredom) {\n        return 1;\n \
    \   }\n    \n    return 0;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpvkakprrq: /tmp/tmpvkakprrq.cpp:60: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094388
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int cnt = 0;\n    std::bitset<32> bs;\n  \
    \  for (auto c: S) {\n        std::bitset<32> sbit = std::bitset<32>(c);\n   \
    \     bs |= sbit;\n        if (sbit == 'I') {\n            cnt++;\n        }\n\
    \    }\n    return cnt;\n}\nint main() {\n    auto candidate = is_bored;\n   \
    \ assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the\
    \ sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n \
    \   assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpvm4k632i: /tmp/tmpvm4k632i.cpp:26: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094388
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  int count = 0;\n  int i = 0, j = 0;\n  // Loop\
    \ through each character in S\n  while (S[i] != '.') {\n    // Check for boredom\
    \ sentences starts with 'I', and ends with '.'\n    if (S[i] == 'I') {\n     \
    \ while (j < S.size() && S[j] != 'I') {\n        j++;\n      }\n      // If it\
    \ ends with '.', increment boredom count\n      if (j < S.size() && S[j] == '.')\
    \ {\n        count++;\n      }\n    }\n    i++;\n  }\n  return count;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660094388
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  int counter = 0;\n  for (auto &i : S) {\n  \
    \  switch (i) {\n      case 'I':\n        counter++;\n        break;\n      case\
    \ '?':\n      case '!':\n        counter++;\n        break;\n      default:\n\
    \        break;\n    }\n  }\n  return counter;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpkquimi7b: /tmp/tmpkquimi7b.cpp:31: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094388
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    long bored =\
    \ 0;\n    for(int i=0;i<S.size();i++){\n        if(S[i]=='I'){\n            bored++;\n\
    \        }\n    }\n    return bored;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpswcw2tf2: /tmp/tmpswcw2tf2.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    int boredCount=0;\n\
    \    for(int i=0;i<S.size();i++)\n    {\n        if(S[i]==\"I\")\n        {\n\
    \            boredCount++;\n        }\n    }\n    return boredCount;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmper35znc9.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmper35znc9.cpp:16:18: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   16 |         if(S[i]==\"I\")\n      |       \
    \           ^~~\n"
  stdout: ''
  timestamp: 1660094388
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  int b=0;\n  for (int i = 0; i < S.length();\
    \ i++) {\n    if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n      b++;\n \
    \   }\n  }\n  return b;\n}\nint main() {\n    auto candidate = is_bored;\n   \
    \ assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the\
    \ sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n \
    \   assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp1jkr3w9g: /tmp/tmp1jkr3w9g.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094389
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  // Your code here\n  long boredoms = 0;\n  for\
    \ (int i=0;i<S.length();i++) {\n    if (S[i]=='I') {\n      boredoms++;\n    }\n\
    \  }\n  return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n  \
    \  assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the\
    \ sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n \
    \   assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpc2uwxhrl: /tmp/tmpc2uwxhrl.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  // Complete this function\n  std::set<std::string>\
    \ boredom;\n  std::map<std::string,long> voc;\n  for (char ch:S){\n    if (ch\
    \ == '.'){\n      boredom.insert(S.substr(0,1));\n      S.erase(0, 1);\n    }\n\
    \    else if (ch == '?'){\n      boredom.insert(S.substr(0,2));\n      S.erase(0,\
    \ 2);\n    }\n    else if (ch == '!'){\n      boredom.insert(S.substr(0,3));\n\
    \      S.erase(0, 3);\n    }\n    else {\n      voc[S];\n    }\n  }\n  for (std::map<std::string,long>::iterator\
    \ itr=voc.begin(); itr!=voc.end(); ++itr) {\n    long ans = 0;\n    if (itr->second.count(boredom)\
    \ == 1) {\n      ans = 1;\n    }\n    cout<<ans;\n  }\n  \n}\nint main() {\n \
    \   auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu232y4h4.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpu232y4h4.cpp:34:21: error: request for member \u2018count\u2019 in\
    \ \u2018itr.std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>,\
    \ long int> >::operator->()->std::pair<const std::__cxx11::basic_string<char>,\
    \ long int>::second\u2019, which is of non-class type \u2018long int\u2019\n \
    \  34 |     if (itr->second.count(boredom) == 1) {\n      |                  \
    \   ^~~~~\n/tmp/tmpu232y4h4.cpp:37:5: error: \u2018cout\u2019 was not declared\
    \ in this scope; did you mean \u2018std::cout\u2019?\n   37 |     cout<<ans;\n\
    \      |     ^~~~\n      |     std::cout\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:75,\n\
    \                 from /tmp/tmpu232y4h4.cpp:2:\n/usr/include/c++/9/iostream:61:18:\
    \ note: \u2018std::cout\u2019 declared here\n   61 |   extern ostream cout;  ///\
    \ Linked to standard output\n      |                  ^~~~\n/tmp/tmpu232y4h4.cpp:40:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   40 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660094388
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Complete this function\n    // Don't forget\
    \ to include \"bits/stdc++.h\"\n    std::string boredom(S.begin(), S.end());\n\
    \    if (boredom.find(\"I\") != std::string::npos)\n        return 1;\n    return\
    \ 0;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpk2l65euc: /tmp/tmpk2l65euc.cpp:22: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n\tint count = 0;\n\tstd::set<std::string> st;\n\
    \tfor (char &c : S){\n\t\tif(c == '.' || c == '!' || c == '?')\n\t\t\tst.insert(c);\n\
    \t}\n\tfor (std::set<std::string>::iterator it = st.begin(); it != st.end(); ++it){\n\
    \t\tif(*it == \"I\")\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqlyuwz7o.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpqlyuwz7o.cpp:16:15: error: no matching function for call to \u2018\
    std::set<std::__cxx11::basic_string<char> >::insert(char&)\u2019\n   16 |    st.insert(c);\n\
    \      |               ^\nIn file included from /usr/include/c++/9/set:61,\n \
    \                from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:87,\n\
    \                 from /tmp/tmpqlyuwz7o.cpp:2:\n/usr/include/c++/9/bits/stl_set.h:509:7:\
    \ note: candidate: \u2018std::pair<typename std::_Rb_tree<_Key, _Key, std::_Identity<_Tp>,\
    \ _Compare, typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_Key>::other>::const_iterator,\
    \ bool> std::set<_Key, _Compare, _Alloc>::insert(const value_type&) [with _Key\
    \ = std::__cxx11::basic_string<char>; _Compare = std::less<std::__cxx11::basic_string<char>\
    \ >; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; typename std::_Rb_tree<_Key,\
    \ _Key, std::_Identity<_Tp>, _Compare, typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_Key>::other>::const_iterator\
    \ = std::_Rb_tree_const_iterator<std::__cxx11::basic_string<char> >; std::set<_Key,\
    \ _Compare, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\n  509\
    \ |       insert(const value_type& __x)\n      |       ^~~~~~\n/usr/include/c++/9/bits/stl_set.h:509:32:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \  509 |       insert(const value_type& __x)\n      |              ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_set.h:518:7: note: candidate: \u2018std::pair<typename\
    \ std::_Rb_tree<_Key, _Key, std::_Identity<_Tp>, _Compare, typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_Key>::other>::const_iterator,\
    \ bool> std::set<_Key, _Compare, _Alloc>::insert(std::set<_Key, _Compare, _Alloc>::value_type&&)\
    \ [with _Key = std::__cxx11::basic_string<char>; _Compare = std::less<std::__cxx11::basic_string<char>\
    \ >; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; typename std::_Rb_tree<_Key,\
    \ _Key, std::_Identity<_Tp>, _Compare, "
  stdout: ''
  timestamp: 1660094388
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  assert(S.size() >= 2);\n  long res = 0;\n  for\
    \ (char &ele : S) {\n    if (ele == '.')\n      ++res;\n    if (ele == '?' ||\
    \ ele == '!')\n      ++res;\n  }\n  return res;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp028h3n89: /tmp/tmp028h3n89.cpp:25: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094389
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    for(int i=0;i<S.length();i++)\
    \ {\n        if(S[i] == 'I') {\n            boredoms = boredoms + 1;\n       \
    \ }\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpeapjduyf: /tmp/tmpeapjduyf.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094388
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long ans = 0;\n    for (int i = 1; i < S.length();\
    \ i++) {\n        if (S.substr(0, i) == \"I\")\n            ans++;\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpcbruqqu4: /tmp/tmpcbruqqu4.cpp:22: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094389
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    for(int i = 0;i < S.length();i++){\n\
    \        if(S[i] == '.' || S[i] == '!' || S[i] == '?'){\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp3e_6yu5x: /tmp/tmp3e_6yu5x.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094389
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Your code here\n    long counter = 0;\n\
    \    \n    int start = 0;\n    for(int i = 0;i < S.size(); i++)\n    {\n     \
    \   if(S[i] == 'I' && S[i + 1] == '.')\n        {\n            start = 1;\n  \
    \      }\n        else if(S[i] == '.' && (S[i + 1] == '?' || S[i + 1] == '!' ||\
    \ S[i + 1] == '.'))\n        {\n            counter++;\n            start = 1;\n\
    \        }\n        \n        if(start == 1)\n        {\n            break;\n\
    \        }\n    }\n    \n    return counter;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpxcrmz693: /tmp/tmpxcrmz693.cpp:40: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094389
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int count = 0;\n    std::istringstream iss(S);\n\
    \    std::string token;\n    while(std::getline(iss, token, ' ')){\n        if(token\
    \ == \"I\"){\n            count++;\n        }\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpvacyrod5: /tmp/tmpvacyrod5.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094389
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::vector<long> v;\n    long k = 0;\n  \
    \  for (auto &c: S) \n        if (c == '.' || c == '?' || c == '!') {\n      \
    \      v.push_back(k++);\n        }\n    return v.size();\n}\nint main() {\n \
    \   auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpevl1dw87: /tmp/tmpevl1dw87.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094389
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int boredom = 0;\n    for(int i = 0; i < S.size();\
    \ i++){\n        if(S[i] == 'I'){\n            boredom++;\n        }\n    }\n\
    \    return boredom;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp8rvdrw6q: /tmp/tmp8rvdrw6q.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredom_count = 0;\n    int counter =\
    \ 0;\n    // We will count every boredom sentence\n    for(int i=0; i<S.size();\
    \ i++) {\n        // For each word\n        while(counter < i) {\n           \
    \ // We are reading the words from the beginning\n            counter = 0;\n \
    \           S[i] = S[i][0];\n        }\n        if(S[i] == '.' || S[i] == '?'\
    \ || S[i] == '!') {\n            boredom_count++;\n        }\n        counter++;\n\
    \    }\n    return boredom_count;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfzdec4kk.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpfzdec4kk.cpp:20:26: error: invalid types \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type {aka char}[int]\u2019 for array subscript\n   20 |       \
    \      S[i] = S[i][0];\n      |                          ^\n"
  stdout: ''
  timestamp: 1660094389
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int boredoms = 0;\n    int i = 0;\n    int\
    \ len = S.size();\n    bool flag = true;\n    while(i < len) {\n        if(S[i]\
    \ == 'I') {\n            boredoms += 1;\n            flag = true;\n        }\n\
    \        if(flag) {\n            flag = S[i + 1] == '.';\n        }\n        i\
    \ += 1;\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpxfh0tvku: /tmp/tmpxfh0tvku.cpp:31: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094390
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long ans = 0;\n    assert(S.size() > 0);\n\
    \    for(int i = 0; i < (S.size() - 1); i++){\n        if(S.at(i) == 'I' && S.at(i\
    \ + 1) == 'i'){\n            ans += 1;\n        }\n        if(S.at(i) == 'i' &&\
    \ S.at(i - 1) == 'I'){\n            ans += 1;\n        }\n        if(S.at(i) ==\
    \ 'I' && S.at(i - 1) == 'i' && S.at(i - 2) == 'i'){\n            ans += 1;\n \
    \       }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::at: __n (which is 18446744073709551615) >= this->size() (which\
    \ is 16)\n"
  stdout: ''
  timestamp: 1660094390
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  long nboredom = 0, lenS = S.length();\n  for\
    \ (int i = 1; i < lenS; i++) {\n    if (S[0] == 'I') {\n      nboredom++;\n  \
    \  }\n    if (S[i] == '.') {\n      nboredom++;\n    }\n    if (S[i] == '?') {\n\
    \      nboredom++;\n    }\n    if (S[i] == '!') {\n      nboredom++;\n    }\n\
    \  }\n  return nboredom;\n}\nint main() {\n    auto candidate = is_bored;\n  \
    \  assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the\
    \ sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n \
    \   assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpt82u2u5l: /tmp/tmpt82u2u5l.cpp:32: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094390
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  int count = 0;\n  for (int i = 0; i < S.size();\
    \ i++) {\n    if (S[i] == 'I' && S[i + 1] == '.')\n      count++;\n    else if\
    \ (S[i] == '.' || S[i] == '?' || S[i] == '!')\n      count = 0;\n  }\n  return\
    \ count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp240gq765: /tmp/tmp240gq765.cpp:25: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094390
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n        long ans = 0;\n        std::string boredoms[2]\
    \ = {\".\", \"?\"};\n        std::string boredoms_string = \".?\";\n        int\
    \ len = S.length();\n        for(int i = 0; i < len; i++) {\n                std::string\
    \ curr_word = S.substr(i, 1);\n                if(curr_word.find(boredoms_string)\
    \ == 0) {\n                        ans += 1;\n                }\n        }\n \
    \       return ans;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmps7ulvdst: /tmp/tmps7ulvdst.cpp:28: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094390
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long ans = 0;\n    int len = 0;\n    for(auto\
    \ x: S) {\n        if(x == '.') len++;\n        else if(x == '!') len++;\n   \
    \     else if(x == '?') len++;\n        if(len == 1) {\n            if(x == 'I')\
    \ ans++;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp3pgzxijl: /tmp/tmp3pgzxijl.cpp:28: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094390
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    long n = S.size();\n\
    \    long cnt=0;\n    for(int i=0;i<n;i++){\n        if(S[i]=='I'&&S[i-1]!='.'){\n\
    \            cnt++;\n        }\n    }\n    return cnt;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnpf6ucuu: /tmp/tmpnpf6ucuu.cpp:25: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n        std::string boredom = \"I love this weather\"\
    ;\n        std::set<char> boredoms;\n        std::istringstream iss(S);\n    \
    \    std::string word;\n        int count = 0;\n        for (std::string line;\
    \ std::getline(iss, line); ) {\n                std::istringstream split_line(line);\n\
    \                std::set<char> unique_words;\n                while (split_line\
    \ >> word)\n                        unique_words.insert(word);\n             \
    \   if (unique_words.find(boredom) != unique_words.end())\n                  \
    \      count++;\n        }\n        return count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqzt8kzyc.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpqzt8kzyc.cpp:21:49: error: no matching function for call to \u2018\
    std::set<char>::insert(std::string&)\u2019\n   21 |                         unique_words.insert(word);\n\
    \      |                                                 ^\nIn file included from\
    \ /usr/include/c++/9/set:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:87,\n\
    \                 from /tmp/tmpqzt8kzyc.cpp:2:\n/usr/include/c++/9/bits/stl_set.h:509:7:\
    \ note: candidate: \u2018std::pair<typename std::_Rb_tree<_Key, _Key, std::_Identity<_Tp>,\
    \ _Compare, typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_Key>::other>::const_iterator,\
    \ bool> std::set<_Key, _Compare, _Alloc>::insert(const value_type&) [with _Key\
    \ = char; _Compare = std::less<char>; _Alloc = std::allocator<char>; typename\
    \ std::_Rb_tree<_Key, _Key, std::_Identity<_Tp>, _Compare, typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_Key>::other>::const_iterator\
    \ = std::_Rb_tree_const_iterator<char>; std::set<_Key, _Compare, _Alloc>::value_type\
    \ = char]\u2019\n  509 |       insert(const value_type& __x)\n      |       ^~~~~~\n\
    /usr/include/c++/9/bits/stl_set.h:509:32: note:   no known conversion for argument\
    \ 1 from \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018const value_type&\u2019 {aka \u2018const char&\u2019}\n  509 |    \
    \   insert(const value_type& __x)\n      |              ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_set.h:518:7: note: candidate: \u2018std::pair<typename\
    \ std::_Rb_tree<_Key, _Key, std::_Identity<_Tp>, _Compare, typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_Key>::other>::const_iterator,\
    \ bool> std::set<_Key, _Compare, _Alloc>::insert(std::set<_Key, _Compare, _Alloc>::value_type&&)\
    \ [with _Key = char; _Compare = std::less<char>; _Alloc = std::allocator<char>;\
    \ typename std::_Rb_tree<_Key, _Key, std::_Identity<_Tp>, _Compare, typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_Key>::other>::const_iterator\
    \ = std::_Rb_tree_const_iterator<char>; std::set<_Key, _Compare, _Alloc>::value_"
  stdout: ''
  timestamp: 1660094390
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int count = 0;\n    for(int i = 0; i < S.length();\
    \ i++) {\n        if(S.at(i) == 'I') {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpt0h4para: /tmp/tmpt0h4para.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094391
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int N = 0;\n    for (int i = 0; i <= S.size()-1;\
    \ i++) {\n        char letter = S[i];\n        if (letter == '.' || letter ==\
    \ '?' || letter == '!') {\n            N += 1;\n        }\n    }\n    return N;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpdvdnudsv: /tmp/tmpdvdnudsv.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094391
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  // Write your code here\n  long result=0;\n\
    \  for(int i=0;i<S.size();i++)\n  {\n      if(S[i]=='.')\n      {\n        if(S[i-1]=='I'&&S[i+1]=='o')\n\
    \        {\n            result++;\n        }\n      }\n      else if(S[i]=='?')\n\
    \      {\n        if(S[i-1]=='i'&&S[i+1]=='!')\n        {\n            result++;\n\
    \        }\n      }\n      else if(S[i]=='!')\n      {\n        if(S[i-1]=='i'&&S[i+1]=='o')\n\
    \        {\n            result++;\n        }\n      }\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpjqvizu5z: /tmp/tmpjqvizu5z.cpp:44: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // ++p\n    for(int i = 0;i < S.size();i++)\
    \ {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            int\
    \ j = 0;\n            while(S[i+(j++)] != ' ') {\n            }\n            while(S[i+j]\
    \ != ' ') {\n                j++;\n            }\n            while(j < S.size())\
    \ {\n                j++;\n                if(S[i+j] == ' ') {\n             \
    \       i++;\n                    break;\n                }\n            }\n \
    \       }\n    }\n    // --p\n    return i;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpslg46y8g.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpslg46y8g.cpp:31:12: error: \u2018i\u2019 was not declared in this scope\n\
    \   31 |     return i;\n      |            ^\n"
  stdout: ''
  timestamp: 1660094390
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int count = 0;\n    std::string word;\n  \
    \  for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.' || S[i] == '?'\
    \ || S[i] == '!')\n            count++;\n        else\n            word = S[i];\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n \
    \   assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the\
    \ sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n \
    \   assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmply5cfg2h: /tmp/tmply5cfg2h.cpp:25: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094391
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long res = 0;\n    for(auto &e : S)\n    {\n\
    \        if((e == '.') || (e == '?') || (e == '!')) {\n            return 1;\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp1ph3fgul: /tmp/tmp1ph3fgul.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094391
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    size_t i, j;\n   \
    \ i = S.find('!');\n    j = S.find('?');\n    if (i >= 0)\n        boredoms +=\
    \ 1;\n    if (j >= 0)\n        boredoms += 1;\n    if (i > 0 && j > 0)\n     \
    \   boredoms += 1;\n    for (i = S.find('.'); i < S.size(); i++)\n        if (S[i]\
    \ == '.')\n            boredoms += 1;\n    for (i = S.find(' '), j = S.find('!');\
    \ i < S.size(); i++)\n        if (i == j)\n            boredoms += 1;\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpbqn55kvn: /tmp/tmpbqn55kvn.cpp:32: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094391
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  int num_boredoms = 0;\n  int index = 0, start\
    \ = 0, end = 0;\n  while (index < S.size()) {\n    // If the current character\
    \ is a space or an '\\'\n    if (S[index] == ' ' || S[index] == '.' || S[index]\
    \ == '?' || S[index] == '!') {\n      // Check if the previous character was a\
    \ '\\'\n      if (S[index - 1] == '\\\\') {\n        // If yes, move to the next\
    \ character and skip over the current one\n        index++;\n      } else {\n\
    \        // Otherwise, check to see if it's the beginning of the next sentence\n\
    \        if (S[index + 1] == '.' || S[index + 1] == '?' || S[index + 1] == '!')\
    \ {\n          end = index;\n          num_boredoms++;\n        }\n        index++;\n\
    \      }\n    } else {\n      // Otherwise, check if it's the beginning of the\
    \ next word\n      if (S[index] == 'I') {\n        start = index;\n        index++;\n\
    \      }\n      index++;\n    }\n  }\n  return num_boredoms;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpksy0aqfo: /tmp/tmpksy0aqfo.cpp:46: int main(): Assertion `candidate(("I
    feel good today. I will be productive. will kill It")) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660094391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Get the size of the string S\n    int size\
    \ = S.size();\n    // Initialize an array that holds the number of boredoms in\
    \ the string S\n    long boredom[size];\n    // Fill boredom array with zeros\n\
    \    for(int i = 0; i < size; i++) {\n        boredom[i] = 0;\n    }\n    // Loop\
    \ through S array and add ones to the boredoms array if the\n    // string S[i]\
    \ starts with I\n    for(int i = 0; i < size; i++) {\n        if(S[i] == \"I\"\
    ) {\n            boredom[i]++;\n        }\n    }\n    // Return the number of\
    \ boredoms in the string\n    return boredom[size - 1];\n}\nint main() {\n   \
    \ auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbjat3hcb.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpbjat3hcb.cpp:23:20: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   23 |         if(S[i] == \"I\") {\n      |   \
    \                 ^~~\n"
  stdout: ''
  timestamp: 1660094390
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    // long l = 0;\n\
    \    int count = 0;\n    int len = 0;\n    for (int i = 0; i < S.length(); i++)\
    \ {\n        if (S[i] == '.') {\n            count++;\n        }\n        if (S[i]\
    \ == '?') {\n            count++;\n        }\n        if (S[i] == '!') {\n   \
    \         count++;\n        }\n        if (S[i] == 'I') {\n            count++;\n\
    \        }\n    }\n    // l++;\n    return count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzfqvenai: /tmp/tmpzfqvenai.cpp:36: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094391
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long ans = 0;\n    for(int i=0; i<S.length();\
    \ i++) {\n        if(S[i]=='.' || S[i]=='.' || S[i]=='.') ans += 1;\n        if(S[i]=='?'\
    \ || S[i]=='!' || S[i]=='!') ans += 1;\n        if(S[i]=='.') ans += 1;\n    \
    \    if(S[i]=='.' || S[i]=='!' || S[i]=='?') ans += 1;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpskbbdyjk: /tmp/tmpskbbdyjk.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Complete this function\n    string boredom\
    \ = S;\n    int cnt = 0;\n    int i = 0;\n    while (cnt < boredom.size() && boredom[i]\
    \ != '.' && boredom[i] != '?' && boredom[i] != '!') {\n        if (boredom[i]\
    \ == 'I')\n            cnt++;\n        i++;\n    }\n    return cnt;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsjcylq0s.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpsjcylq0s.cpp:13:5: error: \u2018string\u2019 was not declared in this\
    \ scope\n   13 |     string boredom = S;\n      |     ^~~~~~\n/tmp/tmpsjcylq0s.cpp:13:5:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/iosfwd:39,\n\
    \                 from /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpsjcylq0s.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33: note:  \
    \ \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n \
    \     |                                 ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpsjcylq0s.cpp:2:\n/usr/include/c++/9/string:67:11: note:   \u2018std::pmr::string\u2019\
    \n   67 |     using string    = basic_string<char>;\n      |           ^~~~~~\n\
    /tmp/tmpsjcylq0s.cpp:16:18: error: \u2018boredom\u2019 was not declared in this\
    \ scope\n   16 |     while (cnt < boredom.size() && boredom[i] != '.' && boredom[i]\
    \ != '?' && boredom[i] != '!') {\n      |                  ^~~~~~~\n"
  stdout: ''
  timestamp: 1660094390
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    int i = 0;\n    int\
    \ j = 0;\n    while (i < S.size()) {\n        if (S[i] == '.') {\n           \
    \ i++;\n        }\n        else if (S[i] == '?') {\n            i++;\n       \
    \ }\n        else if (S[i] == '!') {\n            i++;\n        }\n        else\
    \ if (S[i] == 'I') {\n            i++;\n            if (j > i) {\n           \
    \     boredoms += 1;\n            }\n            i++;\n            j = 0;\n  \
    \      }\n        else {\n            j = i;\n        }\n        i++;\n    }\n\
    \    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp5eztrl09: /tmp/tmp5eztrl09.cpp:44: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  // Write your code here.\n  std::sort(S.begin(),\
    \ S.end());\n  std::string temp=\"\";\n  bool first=true;\n  long c=0;\n  for\
    \ (int i = 0; i < S.length(); i++)\n  {\n    if(S[i]=='I')\n    {\n      temp=temp+S[i];\n\
    \      if(temp==\"I\".c_str())\n      {\n        if(first==true)\n        {\n\
    \          first=false;\n          c++;\n        }\n        else\n        {\n\
    \          c++;\n        }\n      }\n      else\n      {\n        temp=\"\";\n\
    \      }\n    }\n  }\n  return c;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpykdigy2a.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpykdigy2a.cpp:22:20: error: request for member \u2018c_str\u2019 in\
    \ \u2018\"I\"\u2019, which is of non-class type \u2018const char [2]\u2019\n \
    \  22 |       if(temp==\"I\".c_str())\n      |                    ^~~~~\n"
  stdout: ''
  timestamp: 1660094390
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  int count = 0;\n  \n  for (int i = 0; i < S.length();\
    \ i++) {\n    char c = S[i];\n    if (c == '.' || c == '?' || c == '!') {\n  \
    \    count++;\n    }\n  }\n  \n  return count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpg1abzt8z: /tmp/tmpg1abzt8z.cpp:26: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094391
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmph8kprnwn: /tmp/tmph8kprnwn.cpp:16: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094391
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    // Your code here\n \
    \   return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpuqpm0qvw: /tmp/tmpuqpm0qvw.cpp:20: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094391
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n\t// Complete this function\n\tint count = 0;\n\
    \tstd::istringstream ss(S);\n\tstd::string str;\n\twhile (ss >> str){\n\t\tif(str[0]=='I'){\n\
    \t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpa9tnzy5k: /tmp/tmpa9tnzy5k.cpp:26: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094391
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  int boredom_count = 0;\n  for (int i = 0; i\
    \ < S.size(); i++) {\n    if (S[i] == 'I') {\n      if (i != 0) {\n        boredom_count++;\n\
    \      }\n    }\n  }\n  return boredom_count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp6jead0c6: /tmp/tmp6jead0c6.cpp:27: int main(): Assertion `candidate(("bIt"))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094391
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  int n=0;\n  \n  // Write your code here\n  std::cout<<\"\
    Hello\"<<std::endl;\n  return n;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmptztx8_0v: /tmp/tmptztx8_0v.cpp:22: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: 'Hello

    Hello

    Hello

    '
  timestamp: 1660094391
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long long count = 0;\n    for (auto &i : S)\
    \ {\n        if (i == ' ') continue;\n        if (i == '.' || i == '?' || i ==\
    \ '!') {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpi65odc3v: /tmp/tmpi65odc3v.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::map<std::string,int> m;\n    for(int\
    \ i=0;i<S.length();i++){\n        if(S[i]=='I' && S[i-1]=='.'){\n            ++m[S[i-1]];\n\
    \        }\n    }\n    return m.size();\n}\nint main() {\n    auto candidate =\
    \ is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq76hvxo8.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpq76hvxo8.cpp:15:16: error: no match for \u2018operator[]\u2019 (operand\
    \ types are \u2018std::map<std::__cxx11::basic_string<char>, int>\u2019 and \u2018\
    __gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018\
    char\u2019})\n   15 |             ++m[S[i-1]];\n      |                ^\nIn file\
    \ included from /usr/include/c++/9/map:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmpq76hvxo8.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:490:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type& std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::operator[](const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc =\
    \ std::allocator<std::pair<const std::__cxx11::basic_string<char>, int> >; std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::mapped_type = int; std::map<_Key, _Tp, _Compare, _Alloc>::key_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n  490 |       operator[](const key_type&\
    \ __k)\n      |       ^~~~~~~~\n/usr/include/c++/9/bits/stl_map.h:490:34: note:\
    \   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n  490 |       operator[](const\
    \ key_type& __k)\n      |                  ~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_map.h:510:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type& std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::operator[](std::map<_Key, _Tp, _Compare, _Alloc>::key_type&&)\
    \ [with _Key = std::__cxx11::basic_string<char>; _Tp = int; _Compare = std::less<std::__cxx11::basic_string<char>\
    \ >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>,\
    \ int> >; std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type = int; std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n\
    \  510 |       operato"
  stdout: ''
  timestamp: 1660094391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    // use string::find to\
    \ find the index of first occurence of '.' in the string\n    int found = S.find(\"\
    .\")\n    while(found != string::npos){\n        // find first occurrence of '?'\
    \ or ' ' in the string\n        found = S.find(\"?\");\n        // find first\
    \ occurrence of '!' in the string\n        found = S.find(\"!\");\n        //\
    \ if the first character is I, increment the count by 1\n        if (S.at(0) ==\
    \ 'I')\n            count++;\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf4pcigac.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpf4pcigac.cpp:15:5: error: expected \u2018,\u2019 or \u2018;\u2019 before\
    \ \u2018while\u2019\n   15 |     while(found != string::npos){\n      |     ^~~~~\n"
  stdout: ''
  timestamp: 1660094391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Complete this function\n    long boredoms\
    \ = 0;\n    // Complete this\n    std::bitset<16> bit_set(S.size());\n    for\
    \ ( auto it = S.begin(); it != S.end(); it++ ) {\n        bit_set[it - S.begin()]\
    \ ^= 1<<(it - S.begin());\n    }\n    \n    boredoms =  bit_set[0] == '1';\n \
    \   \n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdxypygq_.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpdxypygq_.cpp:17:33: error: no match for \u2018operator^=\u2019 (operand\
    \ types are \u2018std::bitset<16>::reference\u2019 and \u2018int\u2019)\n   17\
    \ |         bit_set[it - S.begin()] ^= 1<<(it - S.begin());\nIn file included\
    \ from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:45,\n               \
    \  from /tmp/tmpdxypygq_.cpp:2:\n/usr/include/c++/9/cstddef:172:3: note: candidate:\
    \ \u2018constexpr std::byte& std::operator^=(std::byte&, std::byte)\u2019\n  172\
    \ |   operator^=(byte& __l, byte __r) noexcept\n      |   ^~~~~~~~\n/usr/include/c++/9/cstddef:172:20:\
    \ note:   no known conversion for argument 1 from \u2018std::bitset<16>::reference\u2019\
    \ to \u2018std::byte&\u2019\n  172 |   operator^=(byte& __l, byte __r) noexcept\n\
    \      |              ~~~~~~^~~\nIn file included from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpdxypygq_.cpp:2:\n/usr/include/c++/9/bits/ios_base.h:107:3:\
    \ note: candidate: \u2018const std::_Ios_Fmtflags& std::operator^=(std::_Ios_Fmtflags&,\
    \ std::_Ios_Fmtflags)\u2019\n  107 |   operator^=(_Ios_Fmtflags& __a, _Ios_Fmtflags\
    \ __b)\n      |   ^~~~~~~~\n/usr/include/c++/9/bits/ios_base.h:107:29: note: \
    \  no known conversion for argument 1 from \u2018std::bitset<16>::reference\u2019\
    \ to \u2018std::_Ios_Fmtflags&\u2019\n  107 |   operator^=(_Ios_Fmtflags& __a,\
    \ _Ios_Fmtflags __b)\n      |              ~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/ios_base.h:149:3:\
    \ note: candidate: \u2018const std::_Ios_Openmode& std::operator^=(std::_Ios_Openmode&,\
    \ std::_Ios_Openmode)\u2019\n  149 |   operator^=(_Ios_Openmode& __a, _Ios_Openmode\
    \ __b)\n      |   ^~~~~~~~\n/usr/include/c++/9/bits/ios_base.h:149:29: note: \
    \  no known conversion for argument 1 from \u2018std::bitset<16>::reference\u2019\
    \ to \u2018std::_Ios_Openmode&\u2019\n  149 |  "
  stdout: ''
  timestamp: 1660094391
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long ans = 0;\n    int cnt = 0, c = 0;\n\n\
    \    for (int i = 0; i != S.size(); ++i) {\n        if ((S[i] == '.') || (S[i]\
    \ == '?') || (S[i] == '!')) {\n            ++cnt;\n        }\n        if ((S[i]\
    \ == 'I') && (S[i + 1] == '.') && (S[i + 2] == '.') && (S[i + 3] == '.')) {\n\
    \            ++cnt;\n            i += 4;\n        }\n    }\n    \n    if (cnt\
    \ > 0) {\n        ans = 1;\n    }\n    \n    return ans;\n}\nint main() {\n  \
    \  auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpndsdu263: /tmp/tmpndsdu263.cpp:34: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long nbored = 0;\n    std::string boredoms\
    \ = {\"I\",\"i\",\"!\",\"?\",\"!\"};\n    long len = S.length();\n    for (int\
    \ i = 0; i < len; i++){\n        if (boredoms.find(S[i]) != boredoms.end()) {\n\
    \            nbored++;\n        }\n    }\n    return nbored;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprklo_f6d.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmprklo_f6d.cpp:13:48: error: could not convert \u2018{\"I\", \"i\", \"\
    !\", \"?\", \"!\"}\u2019 from \u2018<brace-enclosed initializer list>\u2019 to\
    \ \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019}\n\
    \   13 |     std::string boredoms = {\"I\",\"i\",\"!\",\"?\",\"!\"};\n      |\
    \                                                ^\n      |                  \
    \                              |\n      |                                    \
    \            <brace-enclosed initializer list>\n/tmp/tmprklo_f6d.cpp:16:33: error:\
    \ no match for \u2018operator!=\u2019 (operand types are \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019} and \u2018std::__cxx11::basic_string<char>::iterator\u2019\
    \ {aka \u2018__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >\u2019})\n   16 |         if (boredoms.find(S[i]) != boredoms.end()) {\n  \
    \    |             ~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~\n      |            \
    \              |                     |\n      |                          |   \
    \                  std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >}\n      |                          std::__cxx11::basic_string<char>::size_type\
    \ {aka long unsigned int}\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmprklo_f6d.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:897:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR, class _Container>\
    \ bool __gnu_cxx::operator!=(const __gnu_cxx::__normal_iterator<_IteratorL, _Container>&,\
    \ const __gnu_cxx::__normal_iterator<_IteratorR, _Container>&)\u2019\n  897 |\
    \     operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,\n   \
    \   |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:897:5: note:   template\
    \ argument deduction/sub"
  stdout: ''
  timestamp: 1660094391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int freq_count = 0;\n    int freq = 0;\n \
    \   std::string boredom = \"I\";\n    int word_size = S.size();\n    for (int\
    \ i = 0; i < word_size; i++) {\n        if (S[i] == '.') {\n            freq_count++;\n\
    \        } else if (S[i] == '!' || S[i] == '?') {\n            freq_count++;\n\
    \        }\n    }\n    for (int i = 0; i < word_size; i++) {\n        if (S[i]\
    \ == boredom) {\n            freq++;\n        }\n    }\n    return freq;\n}\n\
    int main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz9or_ymz.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpz9or_ymz.cpp:24:18: error: no match for \u2018operator==\u2019 (operand\
    \ types are \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019} and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    })\n   24 |         if (S[i] == boredom) {\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpz9or_ymz.cpp:2:\n/usr/include/c++/9/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1026:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpz9or_ymz.cpp:24:21:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019}\n   24 |         if (S[i] == boredom) {\n      |    \
    \                 ^~~~~~~\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpz9or_ymz.cpp:2:\n/usr/include/c++/9/bits/regex.h:1099:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator==(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1099 |     operator==(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1099:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpz9or_ymz.cpp:24:21: note:   mismatched types \u2018std::__cxx11::__sub_match_string<_Bi_iter,\
    \ _Ch_traits, _Ch_alloc>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka "
  stdout: ''
  timestamp: 1660094391
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    int i = 0;\n    for(;\
    \ i < S.size(); i++) {\n        switch(S[i]) {\n            case '.':\n      \
    \      case '?':\n            case '!':\n                boredoms += 1;\n    \
    \            break;\n        }\n    }\n    return boredoms;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpoxtxssf2: /tmp/tmpoxtxssf2.cpp:28: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094391
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // code here\n    assert(S.size() != 0);\n\
    \    long cnt = 0;\n    for(char ch : S) {\n        if(ch == '.' || ch == '!'\
    \ || ch == '?') {\n            cnt++;\n        }\n    }\n    return cnt;\n}\n\
    int main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp_9ftwryk: /tmp/tmp_9ftwryk.cpp:25: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094392
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  assert(S.size() > 0);\n  // Use set to store\
    \ unique words in string\n  std::set<std::string> unique_words;\n  // Use set\
    \ to store number of boredoms in string\n  std::set<std::string> boredoms_set;\n\
    \  // Iterate through every word\n  for (std::string word : S.split(\". ? !\"\
    )) {\n    // If word is \"I\", add it to the set\n    if (word == \"I\") {\n \
    \     unique_words.insert(word);\n      // If word is a boredom, add it to the\
    \ set\n      if (boredoms_set.find(word) == boredoms_set.end()) {\n        boredoms_set.insert(word);\n\
    \      }\n    }\n  }\n  // If the set contains any number of boredoms\n  if (boredoms_set.size()\
    \ > 0) {\n    // If set contains any number of boredoms, return true\n    return\
    \ boredoms_set.size();\n  } else {\n    // If set contains no boredoms, return\
    \ false\n    return 0;\n  }\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0w5xw2gh.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp0w5xw2gh.cpp:18:29: error: \u2018std::string\u2019 {aka \u2018class\
    \ std::__cxx11::basic_string<char>\u2019} has no member named \u2018split\u2019\
    \n   18 |   for (std::string word : S.split(\". ? !\")) {\n      |           \
    \                  ^~~~~\n"
  stdout: ''
  timestamp: 1660094391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Split string by \".\", \"?\" and \"!\"\n\
    \    std::vector<std::string> tokens = split(S, \". ? !\");\n    // Initialize\
    \ boredom_count with 0 \n    long boredom_count = 0;\n    // Initialize prev_token\
    \ with an empty string\n    std::string prev_token = \"\";\n\n    // Iterate over\
    \ all the words\n    for (int i = 0; i < tokens.size(); i++) {\n        // Get\
    \ the current word from tokens list\n        std::string curr_token = tokens[i];\n\
    \n        // If the current word is boredom, increment boredom_count\n       \
    \ if (curr_token == \"I\") {\n            boredom_count++;\n        // Else, check\
    \ if the previous word is boredom\n        // If yes, increment boredom_count\n\
    \        } else {\n            // Check if current word is boredom\n         \
    \   if (curr_token == \"I\") {\n                boredom_count++;\n           \
    \ }\n\n            // If current word is not boredom, check if previous word is\
    \ boredom\n            // If yes, increment boredom_count\n            else {\n\
    \                if (prev_token == \"I\") {\n                    boredom_count++;\n\
    \                }\n\n                // If previous word is not boredom, check\
    \ if current word is boredom\n                // If yes, increment boredom_count\n\
    \                else {\n                    if (curr_token == \"I\") {\n    \
    \                    boredom_count++;\n                    }\n               \
    \ }\n            }\n        }\n        // Update prev_token with current word\n\
    \        prev_token = curr_token;\n    }\n    // return boredom_count\n    return\
    \ boredom_count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0m1xxjv1.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp0m1xxjv1.cpp:13:39: error: \u2018split\u2019 was not declared in this\
    \ scope\n   13 |     std::vector<std::string> tokens = split(S, \". ? !\");\n\
    \      |                                       ^~~~~\n"
  stdout: ''
  timestamp: 1660094391
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // TODO: Write your code here.\n    return\
    \ 0;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpjvqh8dnv: /tmp/tmpjvqh8dnv.cpp:19: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  int count = 0;\n  std::string token;\n  for\
    \ (int i = 0; i < S.size(); i++) {\n    if (S[i] == '.') {\n      token = S[i+1];\n\
    \      if (token == \"?\" || token == \"!\" || token == \"-\")\n        count\
    \ = count + 1;\n      i++;\n    } else {\n      token = S[i];\n      if (token\
    \ == \"I\")\n        count = count + 1;\n      i++;\n    }\n  }\n  return count;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpg5sk_1o0: /tmp/tmpg5sk_1o0.cpp:32: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n   assert(S.size() >= 1);\n   long count = 0;\n\
    \   long start = 0;\n   for(size_t i = 0; i < S.size(); ++i) {\n      if(S[i]\
    \ == '.') {\n         ++start;\n      }\n      else if(S[i] == '?' || S[i] ==\
    \ '!') {\n         if(start > 0) {\n            count = count + start - 1;\n \
    \        }\n         start = 0;\n      }\n      else {\n         if(start > 0)\
    \ {\n            count = count + start;\n         }\n         start = 0;\n   \
    \   }\n   }\n   return count;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp_427h3jj: /tmp/tmp_427h3jj.cpp:38: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long c = 0; // count of boredoms\n    for\
    \ (int i = 0; i < S.length(); i++)\n    {\n        if (S[i] == '.' || S[i] ==\
    \ '?' || S[i] == '!') // boredom or not?\n        {\n            ++c;\n      \
    \  }\n    }\n    return c; // return count\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp7ua95ppb: /tmp/tmp7ua95ppb.cpp:25: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long ans = 0;\n    for (char &c: S) \n   \
    \     ans +=(c == '.' || c == '?' || c == '!');\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpb8326rwp: /tmp/tmpb8326rwp.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  int count = 0;\n  std::istringstream iss(S);\n\
    \  std::string token;\n  while (std::getline(iss, token, '.') && std::getline(iss,\
    \ token, '?') && std::getline(iss, token, '!')) {\n    if (token == \"I\")\n \
    \     count++;\n  }\n  return count;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpslkewj91: /tmp/tmpslkewj91.cpp:25: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094393
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::map<int, int> count_map;\n    std::string\
    \ word;\n    int count = 0;\n    // Step 1: Count the frequency of each word in\
    \ sentence.\n    for (auto &ch: S) {\n        if(std::isspace(ch))\n         \
    \   continue;\n        switch(ch) {\n            case '.':\n            case '?':\n\
    \            case '!':\n                count_map[ch]++;\n        }\n    }\n \
    \   // Step 2: Iterate each word in the sentence.\n    for (auto &ch: S) {\n \
    \       if(std::isspace(ch))\n            continue;\n        switch(ch) {\n  \
    \          case 'I':\n            case 'a':\n            case 'e':\n         \
    \   case 'i':\n            case 'o':\n            case 'u':\n                word\
    \ = ch;\n                break;\n            default:\n                continue;\n\
    \        }\n        if (count_map.find(word) != count_map.end()) {\n         \
    \   ++count_map[word];\n        } else {\n            count_map[word] = 1;\n \
    \       }\n    }\n    return count_map.at('I');\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfio8x_56.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpfio8x_56.cpp:42:32: error: no matching function for call to \u2018\
    std::map<int, int>::find(std::string&)\u2019\n   42 |         if (count_map.find(word)\
    \ != count_map.end()) {\n      |                                ^\nIn file included\
    \ from /usr/include/c++/9/map:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmpfio8x_56.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:1168:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = int; _Tp = int; _Compare\
    \ = std::less<int>; _Alloc = std::allocator<std::pair<const int, int> >; std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const int,\
    \ int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = int]\u2019\n 1168\
    \ |       find(const key_type& __x)\n      |       ^~~~\n/usr/include/c++/9/bits/stl_map.h:1168:28:\
    \ note:   no known conversion for argument 1 from \u2018std::string\u2019 {aka\
    \ \u2018std::__cxx11::basic_string<char>\u2019} to \u2018const key_type&\u2019\
    \ {aka \u2018const int&\u2019}\n 1168 |       find(const key_type& __x)\n    \
    \  |            ~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_map.h:1174:2:\
    \ note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare,\
    \ _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x))\
    \ std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key\
    \ = int; _Tp = int; _Compare = std::less<int>; _Alloc = std::allocator<std::pair<const\
    \ int, int> >]\u2019\n 1174 |  find(const _Kt& __x) -> decltype(_M_t._M_find_tr(__x))\n\
    \      |  ^~~~\n/usr/include/c++/9/bits/stl_map.h:1174:2: note:   template argument\
    \ deduction/substitution failed:\n/usr/include/c++/9/bits/stl_map.h: In substitution\
    \ of \u2018template<class _Kt> decltype (((std::map<int, int>*)this)->std::map<int,\
    \ int>::_M_t.std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const\
    \ int, int> >, std::less<int>, std"
  stdout: ''
  timestamp: 1660094392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  long ans = 0;\n  assert(S != \"I\");\n  for\
    \ (int i = 0; S[i] != '\\0'; i++) {\n    if (S[0] == 'I') {\n      if (S[i] ==\
    \ '.' || S[i] == '?' || S[i] == '!') {\n        ans += 1;\n      }\n      S[i]\
    \ = S[i + 1];\n      S[i + 1] = '\\0';\n    }\n  }\n  return ans;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpyd5t10rp: /tmp/tmpyd5t10rp.cpp:29: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094393
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Split each sentence into words and store\
    \ them in an array.\n    std::vector<std::string> S1 = split(S, \".?!\");\n  \
    \  // Add up each element of the array.\n    // Note that you need to add the\
    \ count of 'I' in the beginning of every word.\n    long ret = 0;\n    for (int\
    \ i = 0; i < S1.size(); i++) {\n        if (S1[i][0] == 'I') {\n            ret\
    \ += 1;\n        }\n    }\n    return ret;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpusxppwmg.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpusxppwmg.cpp:13:35: error: \u2018split\u2019 was not declared in this\
    \ scope\n   13 |     std::vector<std::string> S1 = split(S, \".?!\");\n      |\
    \                                   ^~~~~\n"
  stdout: ''
  timestamp: 1660094392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // your code goes here\n    return -1;\n}\n\
    int main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpvrj_rmm8: /tmp/tmpvrj_rmm8.cpp:17: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094393
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long ans = 0;\n    for (int i = 0; S[i] !=\
    \ '\\0'; i++) {\n        if (S[i] == '.') {\n            ans += 1;\n        }\
    \ else if (S[i] == '?') {\n            ans += 1;\n        } else if (S[i] == '!')\
    \ {\n            ans += 1;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmplynndjbf: /tmp/tmplynndjbf.cpp:27: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094393
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int boredom=0;\n    for (int i=0;S[i]!='\\\
    0';i++){\n        if (S[i]=='.'){\n            boredom++;\n        }\n       \
    \ if (S[i]=='?'){\n            boredom++;\n        }\n        if (S[i]=='!'){\n\
    \            boredom++;\n        }\n    }\n    return boredom;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp2rw5o4qr: /tmp/tmp2rw5o4qr.cpp:29: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094392
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    int count = 0;\n    for\
    \ (auto x : S) {\n        if (x != '.' && x != '?' && x != '!') {\n          \
    \  count++;\n        }\n        if (count == 0) {\n            count++;\n    \
    \    }\n        if (count == 1) {\n            count++;\n        }\n        if\
    \ (count == 2) {\n            count++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphswy0cae.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmphswy0cae.cpp:13:9: error: conflicting declaration \u2018int count\u2019\
    \n   13 |     int count = 0;\n      |         ^~~~~\n/tmp/tmphswy0cae.cpp:12:10:\
    \ note: previous declaration as \u2018long int count\u2019\n   12 |     long count\
    \ = 0;\n      |          ^~~~~\n"
  stdout: ''
  timestamp: 1660094392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    assert(S.size() >= 2);\n    std::string first,\
    \ last;\n    int boredoms = 0;\n    for(int i = 1; i < S.size(); i++) {\n    \
    \    first = S.substr(0, i);\n        last = S.substr(i, S.size());\n        if\
    \ (first == \"I\" && last == \".\") {\n            boredoms++;\n        }\n  \
    \  }\n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpj07fr3ry: /tmp/tmpj07fr3ry.cpp:28: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int boredom = 0;\n    for (int i = 0; i <\
    \ S.size(); i++) {\n        if (S[i] == '.') {\n            if (S[i-1] == '?'\
    \ || S[i-1] == '!') {\n                boredom++;\n            }\n        } else\
    \ if (S[i] == 'I') {\n            if (S[i-1] == '.') {\n                boredom++;\n\
    \            }\n        }\n    }\n    return boredom;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpb6i0ti71: /tmp/tmpb6i0ti71.cpp:30: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int count = 0;\n    for(int i=0; i<S.length();\
    \ i++) {\n        if(S[i]=='I') {\n            count++;\n        }\n    }\n  \
    \  return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpualz92gq: /tmp/tmpualz92gq.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094393
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // +++your code here+++\n    long result =\
    \ 0;\n    vector<string> V;\n    string word;\n    size_t n = S.length();\n  \
    \  for (size_t i = 0; i < n; i++) {\n        word = S.substr(i, 1);\n        if\
    \ (word[0] == 'I') {\n            V.push_back(word);\n        }\n    }\n    for\
    \ (int i = 0; i <= V.size() - 1; i++) {\n        if (V[i] == \"I\") {\n      \
    \      result++;\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8nzrb3em.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp8nzrb3em.cpp:14:5: error: \u2018vector\u2019 was not declared in this\
    \ scope\n   14 |     vector<string> V;\n      |     ^~~~~~\n/tmp/tmp8nzrb3em.cpp:14:5:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8nzrb3em.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8nzrb3em.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmp8nzrb3em.cpp:14:12:\
    \ error: \u2018string\u2019 was not declared in this scope\n   14 |     vector<string>\
    \ V;\n      |            ^~~~~~\n/tmp/tmp8nzrb3em.cpp:14:12: note: suggested alternatives:\n\
    In file included from /usr/include/c++/9/iosfwd:39,\n                 from /usr/include/c++/9/ios:38,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp8nzrb3em.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33:\
    \ note:   \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n\
    \      |                                 ^~~~~~\nIn file incl"
  stdout: ''
  timestamp: 1660094392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    if (S.length() == 0)\n        return 0;\n\
    \    \n    long ans = 0, flag = 0;\n    for (char &c: S)\n        if (c == '.'\
    \ || c == '?' || c == '!')\n            flag = 1;\n        else\n            flag\
    \ = 0;\n\n    if (flag == 1)\n        return ans;\n\n    for (auto &c: S)\n  \
    \      if (c != '.' && c != '?' && c != '!')\n            ans++;\n\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpdb111shh: /tmp/tmpdb111shh.cpp:33: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094393
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Your code here\n    long cnt = 0;\n   \
    \ int i = -1;\n    while (i != S.size()) {\n        i++;\n        if (S[i] ==\
    \ \".\") {\n            if (i != S.size() - 1) {\n                if (S[i+1] ==\
    \ \"!\" || S[i+1] == \"?\") {\n                    i++;\n                }\n \
    \           }\n        }\n        if (S[i] == \"I\") {\n            cnt++;\n \
    \       }\n    }\n    return cnt;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppzlpgm01.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmppzlpgm01.cpp:17:21: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   17 |         if (S[i] == \".\") {\n      |  \
    \                   ^~~\n/tmp/tmppzlpgm01.cpp:19:31: error: ISO C++ forbids comparison\
    \ between pointer and integer [-fpermissive]\n   19 |                 if (S[i+1]\
    \ == \"!\" || S[i+1] == \"?\") {\n      |                               ^~~\n\
    /tmp/tmppzlpgm01.cpp:19:48: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   19 |                 if (S[i+1] == \"!\" || S[i+1]\
    \ == \"?\") {\n      |                                                ^~~\n/tmp/tmppzlpgm01.cpp:24:21:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   24 |         if (S[i] == \"I\") {\n      |                     ^~~\n"
  stdout: ''
  timestamp: 1660094392
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n\tlong count = 0;\n\tint index = 0;\n\tint flag\
    \ = 0;\n\twhile ((index = S.find(\"I\", index)) !=std::string::npos)\n\t{\n\t\t\
    if (S.at((index+1))==\".\")\n\t\t{\n\t\t\tflag = 0;\n\t\t}\n\t\telse if (S.at((index+1))==\"\
    !\")\n\t\t{\n\t\t\tflag = 0;\n\t\t}\n\t\telse if (S.at((index+1))==\"?\")\n\t\t\
    {\n\t\t\tflag = 1;\n\t\t}\n\t\telse {\n\t\t\tflag = 2;\n\t\t}\n\t\tindex++;\n\t\
    }\n\treturn count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1r8r2u48.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp1r8r2u48.cpp:17:24: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   17 |   if (S.at((index+1))==\".\")\n      | \
    \                       ^~~\n/tmp/tmp1r8r2u48.cpp:21:29: error: ISO C++ forbids\
    \ comparison between pointer and integer [-fpermissive]\n   21 |   else if (S.at((index+1))==\"\
    !\")\n      |                             ^~~\n/tmp/tmp1r8r2u48.cpp:25:29: error:\
    \ ISO C++ forbids comparison between pointer and integer [-fpermissive]\n   25\
    \ |   else if (S.at((index+1))==\"?\")\n      |                             ^~~\n"
  stdout: ''
  timestamp: 1660094392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  int a = 0;\n  for (int i = 0; i < S.size();\
    \ i++) {\n    if (S[i] == '.') {\n      a++;\n    } else if (S[i] == '?' || S[i]\
    \ == '!') {\n      a--;\n    } else {\n      a = 0;\n    }\n  }\n  return a;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpocno_ujj: /tmp/tmpocno_ujj.cpp:27: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    if(S == \"I\")\n        return 0;\n    \n\
    \    int counter = 1;\n    \n    for(int i = 0; i < S.size(); i++)\n        if(S[i]\
    \ == '.')\n            counter += is_bored(S.substr(0, i));\n        else if(S[i]\
    \ == '?')\n            counter += is_bored(S.substr(0, i));\n        else if(S[i]\
    \ == '!')\n            counter += is_bored(S.substr(0, i));\n    \n    return\
    \ counter;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpvw3xtcbu: /tmp/tmpvw3xtcbu.cpp:29: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094393
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // code here\n    long ans = 0;\n    long\
    \ pos = 0;\n    bool flag = false;\n    int i = 0;\n    int j = 0;\n    for(;i<S.size();i++){\n\
    \        if((S[i]=='I')&&!flag){\n            pos = i;\n            flag = true;\n\
    \        }\n        else if((S[i]=='I')&&flag){\n            flag = false;\n \
    \       }\n        else if((S[i]=='!')&&flag){\n            ans += (pos - i);\n\
    \            break;\n        }\n        else if((S[i]=='.')&&(!flag)){\n     \
    \       pos = i;\n        }\n        else if((S[i]=='?')&&(flag))\n          \
    \  break;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnjgz_a6j: /tmp/tmpnjgz_a6j.cpp:42: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094392
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::istringstream is(std::string(S).begin(),\
    \ std::string(S).end());\n    std::string word;\n    int cnt = 0;\n    while (is\
    \ >> word) {\n        if (word == \"I\") {\n            cnt += 1;\n        } else\
    \ {\n            cnt = 0;\n        }\n    }\n    return cnt;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplyaet3v8.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmplyaet3v8.cpp:12:71: error: no matching function for call to \u2018\
    std::__cxx11::basic_istringstream<char>::basic_istringstream(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator)\u2019\n   12 |     std::istringstream\
    \ is(std::string(S).begin(), std::string(S).end());\n      |                 \
    \                                                      ^\nIn file included from\
    \ /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmplyaet3v8.cpp:2:\n/usr/include/c++/9/sstream:477:7:\
    \ note: candidate: \u2018std::__cxx11::basic_istringstream<_CharT, _Traits, _Alloc>::basic_istringstream(std::__cxx11::basic_istringstream<_CharT,\
    \ _Traits, _Alloc>&&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>]\u2019\n  477 |       basic_istringstream(basic_istringstream&&\
    \ __rhs)\n      |       ^~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/sstream:477:7:\
    \ note:   candidate expects 1 argument, 2 provided\n/usr/include/c++/9/sstream:460:7:\
    \ note: candidate: \u2018std::__cxx11::basic_istringstream<_CharT, _Traits, _Alloc>::basic_istringstream(const\
    \ __string_type&, std::ios_base::openmode) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_istringstream<_CharT, _Traits,\
    \ _Alloc>::__string_type = std::__cxx11::basic_string<char>; std::ios_base::openmode\
    \ = std::_Ios_Openmode]\u2019\n  460 |       basic_istringstream(const __string_type&\
    \ __str,\n      |       ^~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/sstream:460:48:\
    \ note:   no known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>::iterator\u2019\
    \ {aka \u2018__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >\u2019} to \u2018const __string_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019\
    }\n  460 |       basic_istringstream(const __string_type& __str,\n      |    \
    \      "
  stdout: ''
  timestamp: 1660094393
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int n = 0;\n    std::string word;\n    while(S\
    \ != \"\"){\n        word = S;\n        if(S[0] == 'I'){\n            S = S.substr(1);\n\
    \            n++;\n        }\n        else{\n            S = S.substr(0, S.length()\
    \ - 1);\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmprublakqf: /tmp/tmprublakqf.cpp:29: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094393
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    long boredoms\
    \ = 0;\n    int n = S.size();\n    for(int i = 0; i < n; i++) {\n        if(S[i]\
    \ == '.' || S[i] == '?' || S[i] == '!') {\n            boredoms = 1;\n       \
    \ }\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp14s3mj6h: /tmp/tmp14s3mj6h.cpp:25: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094393
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int N = S.size();\n    long ans = 0;\n   \
    \ int i, t;\n    for (i = 0; i <= N; i++) {\n        if (S[i] == '.') {\n    \
    \        if (i == N) break;\n            else if (S[i + 1] == '.') break;\n  \
    \          else if (S[i + 1] == '?') ans += 1;\n            else if (S[i + 1]\
    \ == '!') ans += 1;\n        }\n        else if (S[i] == '?') {\n            if\
    \ (i == N) break;\n            t = S[i + 1];\n            if (t == '.') break;\n\
    \            else if (t == '!') ans += 1;\n        }\n        else if (S[i] ==\
    \ '!') {\n            if (i == N) break;\n            t = S[i + 1];\n        \
    \    if (t == '.') break;\n            else if (t == '?') ans += 1;\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = is_bored;\n   \
    \ assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the\
    \ sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n \
    \   assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpxswryhjd: /tmp/tmpxswryhjd.cpp:41: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094393
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string words\
    \ = S;\n    // TODO: Print how many boredoms are there in the string S\n    assert(S.size()\
    \ > 3);\n    for(int i=3; i<S.size(); i++) {\n        if(S[i] == '.' || S[i] ==\
    \ '?' || S[i] == '!') {\n            for(int j=0; j<words.size(); j++) {\n   \
    \             if(S[i] == words[j]) {\n                    boredoms = boredoms\
    \ + 1;\n                    words = \"\";\n                    break;\n      \
    \          }\n            }\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp4xoczxi5: /tmp/tmp4xoczxi5.cpp:32: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094393
