name: HumanEval_120_maximum
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of integers\
  \ and a positive integer k, return a sorted list \n// of length k with the maximum\
  \ k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output:\
  \ [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k = 2\n// Output: [4,\
  \ 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output:\
  \ [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n\
  // 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
  \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n"
tests: "}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
  \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
  \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
  \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
  \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
  \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
  \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
  \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
  \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
  \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
  \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
  \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
  \ (0)) == (std::vector<long>()));\n}\n"
completions: ["    if(arr.size() <= k) \n        return arr;\n    long i = 0, max_idx\
    \ = 0;\n    std::vector<long> max_arr(k, 0);\n    for(; i < k; i++) {\n      \
    \  max_idx = std::max(arr[i], max_idx);\n        max_arr[i] = max_idx;\n    }\n\
    \    std::vector<long> res(max_idx);\n    for(; i < arr.size(); i++) {\n     \
    \   res[max_arr[arr[i]]++] = arr[i];\n    }\n    return res;", "    assert(arr.size()\
    \ >= k);\n    std::vector<long> res;\n    long max_num = arr[0], max_ind = 0;\n\
    \    for (long i = 1; i < k; i++) {\n        if (arr[i] > max_num) {\n       \
    \     max_num = arr[i];\n            max_ind = i;\n        }\n    }\n    res.push_back(max_num);\n\
    \    long curr_ind = max_ind;\n    for (long i = 1; i < k; i++) {\n        long\
    \ num = arr[i];\n        long max_ind = 0;\n        for (long j = curr_ind; j\
    \ < k; j++) {\n            if (arr[j] > num) {\n                num = arr[j];\n\
    \                max_ind = j;\n            }\n        }\n        res.push_back(num);\n\
    \        curr_ind = max_ind;\n    }\n    return res;", "    // write your code\
    \ here\n    std::vector<long> v;\n    for (long i = 0; i < k; ++i) {\n       \
    \ v.push_back(arr[i]);\n    }\n\n    sort(v.begin(), v.end());\n    return v;",
  "    int n = arr.size();\n    std::vector<long> max(n);\n    long max = arr[0];\n\
    \    long i;\n    long count = 0;\n    \n    for(i = 0; i < n; i++) {\n      \
    \  if(arr[i] > max) {\n            max = arr[i];\n            count = 1;\n   \
    \     } else {\n            count++;\n        }\n        if((k - count) < 0) {\n\
    \            max = arr[i];\n            count = 1;\n        }\n    }\n    \n \
    \   return max;", "    // Your code here\n    std::vector<long> result;\n    auto\
    \ m = arr.size();\n    if(m > k) {\n        \n        return result;\n    }\n\
    \    auto n = std::min(m, k);\n    \n    result.assign(n - 1, arr[0]);\n    for(auto\
    \ i = 1; i < n; i++) {\n        auto maxi = std::max_element(arr.begin() + i,\
    \ arr.end());\n        for(auto j = i; j > 0; j--) {\n            if(arr[j-1]\
    \ < maxi) {\n                auto temp;\n                temp = arr[j-1];\n  \
    \              arr[j-1] = maxi;\n                maxi = temp;\n            }\n\
    \            arr[j] = maxi;\n        }\n        result.push_back(maxi);\n    }\n\
    \    \n    return result;", "    std::iota(arr.begin(), arr.end(), 0);\n    auto\
    \ it = std::max_element(arr.begin(), arr.end(), [&](const long &l, const long\
    \ &r){\n        return l > r;\n    });\n    std::vector<long> result;\n    for\
    \ (long i = 0; i < k; ++i) {\n        long index = it - arr.begin();\n       \
    \ result.push_back(arr[index]);\n    }\n    return result;", "    long max_size\
    \ = 0, min_size = 0, max = 0;\n    for (auto i = 0; i < k; i++) {\n        if\
    \ (max_size == 0) {\n            max_size = arr[i];\n        } else {\n      \
    \      if (arr[i] > max) {\n                max_size = arr[i];\n             \
    \   max = arr[i];\n            } else if (arr[i] == max) {\n                max_size\
    \ = max_size + (arr[i] - max);\n            } else {\n                max_size\
    \ = max_size;\n                max = arr[i];\n            }\n        }\n    }\n\
    \    for (auto i = 0; i < k; i++) {\n        if (min_size == 0) {\n          \
    \  min_size = arr[i];\n        } else {\n            if (arr[i] < min) {\n   \
    \             min_size = arr[i];\n                min = arr[i];\n            }\
    \ else if (arr[i] == min) {\n                min_size = min_size + (arr[i] - min);\n\
    \            } else {\n                min_size = min_size;\n                min\
    \ = arr[i];\n            }\n        }\n    }\n    std::vector<long> ans;\n   \
    \ for (auto i = 0; i < k; i++) {\n        ans.push_back(max);\n        if (min_size\
    \ != 0) ans.push_back(min);\n        if (max_size != 0) ans.push_back(max_size);\n\
    \    }\n    return ans;", "    long n = arr.size();\n    long m = 1;\n    std::vector<long>\
    \ res;\n    while (n-- > 0) {\n        m = std::max(m, arr[n]);\n        res.push_back(m);\n\
    \    }\n    \n    // k should be less than or equal to n \n    assert(k <= n);\n\
    \n    // sort from left to right by rearranging arr into res in ascending order\n\
    \    // while deleting duplicates\n    long pos = 0;\n    long count = 1;\n  \
    \  while (res.size() > k) {\n        long max = 0;\n        long cur = 0;\n  \
    \      while (pos < res.size()) {\n            cur = res[pos];\n            if\
    \ (count < k) {\n                if (max < cur) {\n                    max = cur;\n\
    \                }\n            }\n            ++count;\n            ++pos;\n\
    \        }\n        res.erase(res.begin() + pos);\n        res.insert(res.end(),\
    \ max + 1, res[pos]);\n    }\n    \n    return res;", "\tstd::vector<long> ans;\n\
    \tfor (long i = 0; i < arr.size() - k + 1; i++) {\n\t\tlong cur_max = arr[i];\n\
    \t\tfor (long j = i + 1; j < i + k; j++)\n\t\t\tif (arr[j] > cur_max)\n\t\t\t\t\
    cur_max = arr[j];\n\t\tans.push_back(cur_max);\n\t}\n\treturn ans;", "    // code\
    \ here\n    std::vector<long> res(arr.size());\n    long long max = 0;\n    for\
    \ (long i = 0, j = 0; i < arr.size(); i++, j++) {\n        if (j > k && max <\
    \ arr[i]) {\n            max = arr[i];\n        }\n        else if (max < arr[i])\
    \ {\n            res[i] = max;\n            max = arr[i];\n        }\n    }\n\
    \    return res;", "    if(arr.size() <= k) return arr;\n    long currMax = std::numeric_limits<long\
    \ int>::min();\n    for(long i = 0; i < k; ++i) {\n        if(currMax < arr[i])\
    \ currMax = arr[i];\n    }\n    std::vector<long> ans;\n    for(long i = 0; i\
    \ < k; ++i) {\n        if(currMax < arr[i]) ans.push_back(arr[i]);\n    }\n  \
    \  return ans;", "   std::vector<long> output(k);\n   long m = INT_MIN;\n   long\
    \ n = 0;\n   for (long i = 0; i < arr.size(); i++)\n   {\n      assert(arr[i]\
    \ < m);\n      if (arr[i] > m)\n      {\n         m = arr[i];\n      }\n   }\n\
    \   if (k == 0)\n   {\n      std::cout << \"Output: \" << m << std::endl;\n  \
    \    return {m};\n   }\n   \n   for (long i = 0; i < arr.size(); i++)\n   {\n\
    \      if (arr[i] == m)\n         output[n] = arr[i];\n      else\n      {\n \
    \        assert(arr[i] < m);\n         assert(m != 0 && output[k-1] <= arr[i]);\n\
    \         m = arr[i];\n         output[n] = arr[i];\n         n++;\n      }\n\
    \   }\n   std::cout << \"Output: \" << output.size() << std::endl;\n   return\
    \ output;", "    // code here\n    std::vector<long> max_arr;\n    std::sort(arr.begin(),\
    \ arr.end());\n    max_arr.insert(max_arr.end(), std::max_element(arr.begin(),\
    \ arr.end()) - arr.begin(), arr.end());\n    return max_arr;", "    // TODO: Write\
    \ your code here\n    long n=arr.size();\n    std::vector<long> ans;\n    for(int\
    \ i=0;i<n;i++){\n        ans.push_back(arr[i]);\n    }\n    ans.sort(std::greater<int>());\n\
    \    long m=ans.size()-k+1;\n    for(int i=k;i<n;i++){\n        ans[i]=ans[i-m];\n\
    \    }\n    return ans;", "    long res = 0;\n    for(long i = 0; i < k; i++)\
    \ {\n        res = max(res, arr[i]);\n    }\n    std::vector<long> v(k, res);\n\
    \    for (long i = 0; i < k; i++) {\n        for (long j = i + 1; j < k; j++)\
    \ {\n            if (v[j] < v[i]) {\n                v[j] = v[i];\n          \
    \  }\n        }\n    }\n    return v;", "  assert(arr.size() >= k);\n  std::vector<long>\
    \ res;\n  res.reserve(arr.size());\n  long maxi = 0;\n  for (long i = 0; i < arr.size();\
    \ i++) {\n    if (arr[i] > arr[maxi]) {\n      maxi = i;\n    }\n  }\n  for (long\
    \ i = maxi; i < arr.size(); i++) {\n    res.push_back(arr[i]);\n  }\n  return\
    \ res;", "    if(arr.size() < k){\n        assert(false);\n        return std::vector<long>();\n\
    \    }\n    long long sum = 0;\n    std::vector<long> result;\n    for(auto i:arr){\n\
    \        sum += i;\n    }\n    result.push_back(sum);\n    for(long long i = k;\
    \ i <= arr.size(); i++){\n        sum = 0;\n        for(auto i:arr){\n       \
    \     sum += i;\n        }\n        if(sum > result[k]){\n            assert(false);\n\
    \            return std::vector<long>();\n        }\n        sum += arr[i];\n\
    \        result.push_back(sum);\n    }\n    return result;", "    // Your code\
    \ here\n    assert(arr.size() <= k);\n    std::map<long,long> m;\n    for(long\
    \ i : arr)\n        m[i] = m[i] > i ? m[i] : i;\n\n    std::map<long,long>::iterator\
    \ it;\n    it = m.begin();\n    for(long i = 0; i < k; i++){\n        it = m.upper_bound(it->first);\n\
    \        long tmp = it->second;\n        m.erase(it);\n        m.insert(std::pair<long,long>(\
    \ tmp, std::min(tmp, it->first) ) );\n    }\n\n    std::vector<long> ans;\n  \
    \  for(it = m.begin(); it != m.end(); it++){\n        ans.push_back(it->second);\n\
    \    }\n    return ans;", "    long arrMax;\n    long index = 0;\n    std::vector<long>\
    \ res;\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] > arrMax)\
    \ {\n            arrMax = arr[i];\n            index = i;\n        }\n    }\n\
    \    while(index != k) {\n        res.push_back(arrMax);\n        index--;\n \
    \       for(long i = 0; i < arr.size(); i++) {\n            if(arr[i] > arrMax\
    \ && i != index) {\n                arrMax = arr[i];\n                index =\
    \ i;\n            }\n        }\n    }\n    res.push_back(arrMax);\n    return\
    \ res;", "\tassert(arr.size() >= k);\n\tstd::vector<long> res(k);\n\tlong long\
    \ res = std::numeric_limits<long long>::max();\n\tfor(auto i : arr)\n\t\tres =\
    \ std::max(res, i);\n\tstd::vector<long> arr(k);\n\tfor(auto i : arr)\n\t\ti =\
    \ std::abs(i);\n\tfor(auto i : arr)\n\t{\n\t\tstd::sort(res.begin(), res.end(),\
    \ std::greater<long>());\n\t\tstd::reverse(res.begin(), res.end());\n\t\twhile(i\
    \ < res.size() && res.at(i) <= res - i)\n\t\t\ti++;\n\t\tres.resize(i+1);\n\t\t\
    for(auto i : res)\n\t\t{\n\t\t\tif(i == res)\n\t\t\t\tres.at(i) = std::numeric_limits<long>::max();\n\
    \t\t\telse\n\t\t\t\tres.at(i) = std::max(res.at(i), i);\n\t\t}\n\t}\n\treturn\
    \ res;", "    // Your code here\n    assert(k <= arr.size());\n    std::vector<long>\
    \ ans;\n    for(int i=0;i<k;i++)\n    {\n        long maxVal = arr[i];\n     \
    \   for(int j=i+1;j<arr.size();j++)\n        {\n            if(arr[j]>maxVal)\n\
    \            {\n                maxVal = arr[j];\n            }\n        }\n \
    \       ans.push_back(maxVal);\n    }\n    return ans;", "    // Your code here\n\
    \    std::vector<long> maxList;\n    int l = arr.size();\n    for(int i = 0; i\
    \ < (k - 1) && i < l; i++){\n        for(int j = i + 1; j < l && j < (k - 1);\
    \ j++){\n            if(arr[i] > arr[j] ){\n                maxList.push_back(arr[j]);\n\
    \            }\n        }\n    }\n    return maxList;", "    auto end = [](const\
    \ auto& a, const auto& b) { return a > b; };\n    std::vector<long> res;\n   \
    \ std::sort(arr.begin(), arr.end(), end);\n    for (size_t i = 0; i < k; i++)\
    \ {\n        res.push_back(arr[i]);\n    }\n    return res;", "    int n = arr.size();\n\
    \    std::vector<long> v;\n    v.reserve(n);\n    // write your code here\n  \
    \  sort(arr.begin(),arr.end()); \n    int i=1;\n    long max_k=arr[0];\n    for(long\
    \ j=0;j<n;j++)\n    {\n        if(arr[j] > max_k)\n        {\n            i=0;\n\
    \            max_k=arr[j];\n        }\n        if(i == k-1 )\n        {\n    \
    \        v.push_back(max_k);\n            i=1;\n            max_k=arr[j];\n  \
    \      }\n        else\n        {\n            max_k=arr[j];\n            i++;\n\
    \        }\n    }\n    v.push_back(max_k);\n    \n    return v;", "    std::vector<long>\
    \ max_arr(k);\n    // Find max with 2 pointers\n    for (long i=0; i<arr.size();\
    \ i+=2){\n        std::swap(arr[i], arr[i+1])\n        if(arr[i]>max_arr[k-1]){\n\
    \            max_arr[k-1] = arr[i];\n        }\n    }\n    // Find max with 1\
    \ pointer\n    for (long i=0; i<arr.size(); i++){\n        if(arr[i]>max_arr[k-1]){\n\
    \            max_arr[k-1] = arr[i];\n        }\n    }\n    return max_arr;", " \
    \ std::vector<long> arrSort(arr.size());\n  for (size_t i = 0; i <= arr.size()\
    \ - 1; i++) {\n    arrSort[i] = arr[i];\n  }\n  sort(arrSort.begin(), arrSort.end(),\
    \ std::greater<long>());\n  arrSort.resize(k, 0);\n\n  // To keep track of current\
    \ index in arrSort\n  size_t index = 0;\n  long maxVal = arrSort[0];\n  std::vector<long>\
    \ maxList(k, 0);\n\n  // If current element in the array is greater than the current\
    \ maxVal, \n  // then update the maxVal and maxList accordingly.\n  for (size_t\
    \ i = 1; i <= arr.size() - 1; i++) {\n    if (arrSort[i] > maxVal) {\n      maxVal\
    \ = arrSort[i];\n      maxList[index] = maxVal;\n      index++;\n    }\n  }\n\
    \  return maxList;", "  long n = arr.size();\n  std::multiset<long> max_number_set(n);\n\
    \  for (size_t i = 0; i < n; ++i) {\n    max_number_set.insert(arr[i]);\n  }\n\
    \  std::vector<long> max;\n  while (max_number_set.size() > k) {\n    max.push_back(max_number_set.begin()->second);\n\
    \    max_number_set.erase(max_number_set.begin());\n  }\n  max.push_back(max_number_set.begin()->second);\n\
    \  return max;", "    std::sort(arr.begin(), arr.end()); // O(n log n)\n    return\
    \ std::vector<long>(arr.begin(), arr.begin() + k); // O(k)", "    // your code\
    \ goes here\n    std::vector<long> result;\n    long temp = 0;\n    long long\
    \ sum = 0;\n    for( int i =0;i<k; ++i){\n        sum+=arr[i];\n    }\n    for(\
    \ int i =0;i<arr.size(); ++i){\n        if( sum>=arr[i] ){\n            sum -=\
    \ arr[i];\n            temp += arr[i];\n            result.push_back(temp);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    if\
    \ (arr.size() > k) {\n        long max = arr[0];\n        for (long i = 1; i <\
    \ k; i++) {\n            if (arr[i] > max) {\n                max = arr[i];\n\
    \            }\n        }\n        for (long i = 0; i < k; i++) {\n          \
    \  if (arr[i] > max) {\n                result.push_back(max);\n             \
    \   max = arr[i];\n            }\n        }\n        result.push_back(max);\n\
    \    }\n    return result;", "    long cnt = 0;\n    std::map<long, long> mp;\n\
    \    std::vector<long> max_arr;\n    for (auto num : arr) {\n        mp[num] ++;\n\
    \        if (mp[num] > k) {\n            max_arr.clear();\n            mp[num]\
    \ = k;\n            cnt ++;\n        } else if (mp[num] > max_arr.size()) {\n\
    \            cnt ++;\n            max_arr.clear();\n            mp[num] = k;\n\
    \        }\n    }\n    return max_arr;", "    // code here\n    sort(arr.begin(),\
    \ arr.end());\n    auto n = arr.size();\n    std::vector<long> ans;\n    if (k\
    \ == 0) ans.assign(arr.begin(), arr.end());\n    else if (n < k) ans.assign(arr.begin(),\
    \ arr.begin() + k);\n    else ans.assign(arr.begin(), arr.begin() + k - 1);\n\
    \    long max_value = arr[0];\n    int start = 0;\n    for (int i = 1; i < n;\
    \ ++i) {\n        if (arr[i] > max_value) {\n            max_value = arr[i];\n\
    \            start = i;\n        }\n    }\n    for (int i = start; i < n; ++i)\
    \ {\n        if (max_value >= arr[i]) {\n            ans[i - start] = max_value;\n\
    \            max_value = arr[i];\n        }\n    }\n    return ans;", "    //\
    \ Your code here\n    long long max = 1;\n    std::vector<long> max_arr;\n   \
    \ int n = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        n = arr[i];\n\
    \        if (n == max) {\n            max_arr.push_back(n);\n        }\n     \
    \   if (arr[i] > max) {\n            max = arr[i];\n            max_arr.clear();\n\
    \        }\n    }\n    for (int i = 0; i < max_arr.size(); i++) {\n        if\
    \ (max_arr[i] == max) {\n            max_arr.push_back(i);\n        }\n    }\n\
    \    return max_arr;", "    std::vector<long> res;\n    res.reserve(k);\n    for(int\
    \ i=0; i<arr.size(); i++){\n        int j=i;\n        long max=-1000;\n      \
    \  while(j<arr.size() && arr[j]>max){\n            j++;\n        }\n        while(j<arr.size()\
    \ && arr[j]<max){\n            res[res.size()-1]=arr[j];\n            j++;\n \
    \       }\n    }\n    return res;", "    // Write your code here\n    std::vector<long>\
    \ result(arr.size());\n    long max = 0;\n    long i = 0;\n    while(i < arr.size())\
    \ {\n        if(max < arr[i]) {\n            max = arr[i];\n        }\n      \
    \  i++;\n    }\n    for(int j = 0;j < k;j++) {\n        result[j] = max;\n   \
    \ }\n    return result;", "        // code here\n        long start=0, end=arr.size()\
    \ - 1;\n        std::sort(arr.begin(), arr.end(), [&](long a, long b){return (a>b)\
    \ - (a<b);});\n        while(start<end) {\n                long mid = start +\
    \ (end - start) / 2;\n                if(!((k==0) && (arr[mid]<0)))\n        \
    \                k = k - 1;\n                if(k>0) {\n                     \
    \   if(arr[mid] > arr[mid + 1])\n                                end = mid - 1;\n\
    \                        else\n                                start = mid + 1;\n\
    \                } else if(k < 0) {\n                        if(arr[mid] < arr[mid\
    \ + 1])\n                                start = mid + 1;\n                  \
    \      else\n                                end = mid - 1;\n                }\
    \ else {\n                        break;\n                }\n        }\n     \
    \   std::reverse(arr.begin(), arr.end());\n        return arr;", "    std::vector<long>\
    \ ans;\n    int n = arr.size();\n    \n    // if k > n\n    if(k > n)\n      \
    \  return ans;\n    \n    // if k == n\n    if(k == n)\n        return ans;\n\
    \    \n    // if k == 1 and arr is empty\n    if(k == 1 && arr.empty())\n    \
    \    return ans;\n    \n    // if k is greater than or equal to 1\n    for(int\
    \ i = 1; i <= k; i++){\n        if(arr[i] > arr[0]) {\n            long maxi =\
    \ arr[0];\n            int idx = 0;\n            for(int j = 0; j < n; j++) {\n\
    \                if(arr[j] > maxi)\n                    maxi = arr[j];\n     \
    \       }\n            ans.push_back(maxi);\n            \n            for(int\
    \ j = 0; j < n; j++) {\n                if(arr[j] == maxi)\n                 \
    \   idx++;\n            }\n            \n            // remove the max element\n\
    \            for(long j = 0; j < idx; j++) {\n                arr[n - 1] = 0;\n\
    \            }\n            \n            if(n == 1) {\n                ans.push_back(arr[0]);\n\
    \            } else {\n                // recursive call\n                ans\
    \ = maximum(arr, n - 1);\n            }\n            \n        } else {\n    \
    \        ans.push_back(arr[0]);\n            // recursive call\n            ans\
    \ = maximum(arr, n - 1);\n        }\n    }\n    return ans;", "  assert(arr.size()\
    \ > 0 && k >= 1 && k <= arr.size());\n  std::priority_queue<long, std::vector<long>,\
    \ std::greater<long>> pq(arr.begin(), arr.end());\n  std::vector<long> result;\n\
    \  result.push_back(pq.top());\n  pq.pop();\n  for (auto i = k; i > 0; i--) {\n\
    \    result.push_back(pq.top());\n    pq.pop();\n  }\n  return result;", "   \
    \ // code here\n    std::vector<long> max_val;\n    for(long i=0; i<k; i++)\n\
    \    {\n        max_val.push_back(arr[i]);\n    }\n    \n    return max_val;",
  "    long long ans = 0;\n    std::vector<long> ans_list;\n    // sort the array\
    \ using merge sort\n    mergeSort(arr.begin(), arr.end());\n    // find the maximum\
    \ in arr\n    for (int i = 0; i < arr.size(); i++) {\n        ans = max(ans, arr[i]);\n\
    \        if (ans_list.size() < k) {\n            ans_list.push_back(ans);\n  \
    \      }\n    }\n    return ans_list;", "    long long retVal = 0;\n    \n   \
    \ for (int i = 0; i < k; ++i) {\n        long long cur = arr[i];\n        std::pop_heap(arr.begin(),\
    \ arr.end(), \n            [&cur](int a, int b){return (a>b?a:b)<cur;});\n   \
    \     \n        retVal += cur;\n    }\n    \n    // std::pop_heap returns the\
    \ highest element of arr after removing\n    // the top most element. \n    //\
    \ We are going to store a sorted list in retVal.\n    std::pop_heap(arr.begin(),\
    \ arr.end(), \n        [&retVal](int a, int b){return (a>b?a:b)<retVal;});\n \
    \   \n    return std::vector<long>(arr.begin(), arr.begin() + k);", "    std::vector<long>\
    \ num;\n    num.push_back(0);\n    std::vector<long> ans;\n    ans.push_back(arr[0]);\n\
    \    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i] > ans[ans.size()-1])\
    \ {\n            ans.push_back(0);\n        }\n        if(arr[i] > ans[ans.size()-1])\
    \ {\n            ans.push_back(arr[i]);\n        }\n    }\n    for(long i = 0;\
    \ i < k; i++) {\n        num.push_back(0);\n    }\n    for(long i = 0; i < ans.size();\
    \ i++) {\n        for(long j = i; j < ans.size(); j++) {\n            if(ans[j]\
    \ > ans[i]) {\n                num[ans.size()-i] = ans[j];\n            }\n  \
    \      }\n    }\n    return num;", "    auto left = std::begin(arr);\n    auto\
    \ right = std::end(arr);\n    std::vector<long> result;\n    // Initialize first\
    \ k numbers to be maximum\n    for(long i = 0; i < k; ++i)\n        std::max_element(left,\
    \ right, [](long a, long b) {return std::max(a, b);});\n    result.insert(std::begin(result),\
    \ std::begin(left), std::begin(right));\n    result.insert(std::begin(result),\
    \ std::end(arr), std::end(result));\n    // For remaining numbers, find the maximum.\n\
    \    for(auto it = std::begin(arr); it != std::end(arr); ++it) {\n        auto\
    \ max = std::max_element(left, right, [](long a, long b) {return std::max(a, b);});\n\
    \        if(max == left)\n            std::iter_swap(it++, right);\n        else\
    \ if(max == right)\n            std::iter_swap(left, it++);\n        else\n  \
    \          std::iter_swap(it, right);\n        right = it;\n    }\n    return\
    \ result;", "    std::vector<long> res;\n    res.reserve(arr.size());\n    for(long\
    \ i = 0, j = k - 1; i < k ; i++, j--)\n    {\n        if(arr[i] > arr[j])\n  \
    \      {\n            std::swap(arr[i], arr[j]);\n            std::swap(res[i],\
    \ res[j]);\n        }\n    }\n    res.resize(j + 1);\n    return res;", "    std::vector<long>\
    \ max(n, 0);\n    for(long i = 0; i < k; i++) {\n        for(long j = 0; j < n;\
    \ j++) {\n            if(arr[j] > max[j]) {\n                max[j] = arr[j];\n\
    \            }\n        }\n    }\n    return max;", "  std::vector<long> ans;\n\
    \  for (long i = 0; i < k; i++) {\n    long max_val = -100000000;\n    for (long\
    \ j = 0; j < arr.size(); j++) {\n      if (arr[j] > max_val)\n        max_val\
    \ = arr[j];\n    }\n    ans.push_back(max_val);\n  }\n  return ans;", "    std::sort(arr.begin(),\
    \ arr.end());\n    std::vector<long> max_arr(k);\n    std::fill(max_arr.begin(),\
    \ max_arr.end(), arr[0]);\n    for (long i = 0; i < k - 1; i++) {\n        if\
    \ (arr[i] > max_arr[i + 1]) {\n            max_arr[i + 1] = arr[i];\n        }\n\
    \    }\n    return max_arr;", "    long start = 0;\n    long end = arr.size();\n\
    \    long mid = -1;\n    std::vector<long> ans;\n    // First check if k is greater\
    \ then array length\n    if (k >= arr.size()) return ans;\n    if (k > 0) mid\
    \ = arr.size() / 2;\n    // Find mid number\n    while (start < end) {\n     \
    \   // If k is greater then mid\n        if (arr[start] < mid) {\n           \
    \ if (k == 1) ans.push_back(arr[start]);\n            else ans.push_back(arr[start]);\n\
    \            ++start;\n        } else if (arr[start] >= mid) {\n            if\
    \ (k == 1) ans.push_back(arr[end]);\n            else ans.push_back(arr[end]);\n\
    \            --end;\n        }\n    }\n    return ans;", "    long l = 0, r =\
    \ 0, c = 0;\n    std::vector<long> ans;\n    while (l+1 < k) {\n        c = arr[++l]\
    \ >= arr[--r];\n        if (!c) break;\n        ans.push_back(r-c-1);\n    }\n\
    \    return ans;", "    // Do not write main() function.\n    // Do not read input,\
    \ instead use the arguments to the function.\n    // Do not print the output,\
    \ instead return values as specified\n    // by problem statement.\n    std::vector<long>\
    \ ret;\n    long curr = 0;\n    long max = arr[0];\n    long sum = 0;\n    for\
    \ (int i = 0; i < k; i++) {\n        sum += arr[i];\n        if (curr < sum) {\n\
    \            max = curr - arr[i];\n        } else {\n            curr = sum;\n\
    \        }\n        ret.push_back(max);\n    }\n    return ret;", "    if(k >\
    \ arr.size()) return {};\n    std::vector<long> arr2(k);\n    long count = 0;\n\
    \    long ans = 0;\n    for(long i = 0; i < arr.size(); i++){\n        if(arr[i]\
    \ > arr2[count]){\n            arr2[count] = arr[i];\n            count++;\n \
    \           if(count == k){\n                ans = arr2;\n                return\
    \ arr2;\n            }\n        }\n    }\n    return {};", "    // Code here\n\
    \    std::vector<long> max(k);\n    long maxVal = arr[0];\n    for(size_t i =\
    \ 0; i < arr.size(); i++){\n        if(arr[i] > maxVal){\n            maxVal =\
    \ arr[i];\n            max = i;\n        }\n    }\n    for(size_t i = 0; i < k;\
    \ i++){\n        arr[max] = arr[i];\n        arr[max]++;\n        max++;\n   \
    \ }\n    return arr;", "    long long ans = 0;\n    long long temp = 0;\n    //\
    \ This for loop will loop until we get k number of elements in arr\n    for (long\
    \ long i = 0; i < k; i++) {\n        // This if condition will loop until we get\
    \ a negative or positive number\n        if (arr[i] > arr[i+1]) {\n          \
    \  temp = 0;\n        } else {\n            temp = arr[i+1];\n        }\n    \
    \    // This if condition will loop until we get a negative or positive number\n\
    \        if (temp > temp) {\n            temp = 0;\n        } else {\n       \
    \     temp = temp;\n        }\n        // This if condition will loop until we\
    \ get a negative or positive number\n        if (arr[i] > arr[i+2]) {\n      \
    \      temp = 0;\n        } else {\n            temp = arr[i+2];\n        }\n\
    \        // This if condition will loop until we get a negative or positive number\n\
    \        if (temp > temp) {\n            temp = 0;\n        } else {\n       \
    \     temp = temp;\n        }\n        // This if condition will loop until we\
    \ get a negative or positive number\n        if (arr[i] > arr[i+3]) {\n      \
    \      temp = 0;\n        } else {\n            temp = arr[i+3];\n        }\n\
    \        // This if condition will loop until we get a negative or positive number\n\
    \        if (temp > temp) {\n            temp = 0;\n        } else {\n       \
    \     temp = temp;\n        }\n        // This if condition will loop until we\
    \ get a negative or positive number\n        if (arr[i] > arr[i+4]) {\n      \
    \      temp = 0;\n        } else {\n            temp = arr[i+4];\n        }\n\
    \        // This if condition will loop until we get a negative or positive number\n\
    \        if (temp > temp) {\n            temp = 0;\n        } else {\n       \
    \     temp = temp;\n        }\n        // This if condition will loop until we\
    \ get a negative or positive number\n        if (arr[i] > arr[i+5]) {\n      \
    \      temp = 0;\n        } else {\n            temp = arr[i+5];\n        }\n\
    \        // This if condition will loop until we get a negative or positive number\n\
    \        if (temp > temp) {\n            temp = 0;\n        } else {\n       \
    \     temp = temp;\n        }\n        // This if condition will loop until we\
    \ get a negative or positive number\n        if (arr[i] > arr[i+6]) {\n      \
    \      temp = 0;\n        } else {\n            temp = arr[i+6];\n        }\n\
    \        // This if condition will loop until we get a negative or positive number\n\
    \        if (temp > temp) {\n            temp = 0;\n        } else {\n       \
    \     temp = temp;\n        }\n        // This if condition will loop until we\
    \ get a negative or positive number\n        if (arr[i] > arr[i+7]) {\n      \
    \      temp = 0;\n        } else {\n            temp = arr[i+7];\n        }\n\
    \        // This if condition will loop until we get a negative or positive number\n\
    \        if (temp > temp) {\n            temp = 0;\n        } else {\n       \
    \     temp = temp;\n        }", "    // write your code here\n    std::vector<long>\
    \ output(k);\n    long i = 0;\n    long max = arr[0];\n    for (i = 0; i < k;\
    \ ++i){\n        if (max < arr[i]){\n            max = arr[i];\n        }\n  \
    \  }\n    for (; i < k; ++i){\n        max = arr[i] > max ? arr[i] : max;\n  \
    \  }\n    for (; i < k; ++i){\n        output[i - k] = max;\n    }\n    return\
    \ output;", "    assert(arr.size() <= k);\n    auto max = [&]() {\n        auto\
    \ maxElem = -std::numeric_limits<long>::max();\n        auto maxPos = -1;\n  \
    \      for (size_t i = 0; i < arr.size(); i++) {\n            if (arr[i] > maxElem)\
    \ {\n                maxElem = arr[i];\n                maxPos = i;\n        \
    \    }\n        }\n        std::vector<long> res(maxPos, arr[maxPos]);\n     \
    \   return res;\n    }();\n    return max;", "    std::vector<long> res(k);\n\
    \    for (long i = 0; i < k; i++) {\n        std::partial_sort_copy(arr.begin(),\
    \ arr.end(), arr.begin() + i, res.begin() + i);\n    }\n    return res;", "  \
    \  assert(k <= arr.size());\n    long result = arr[0];\n    long max_element =\
    \ arr[0];\n    for (long i = 1; i < k; i++) {\n        if (arr[i] > max_element)\
    \ {\n            result = max_element;\n        }\n        else if (arr[i] < max_element)\
    \ {\n            max_element = arr[i];\n        }\n    }\n    std::vector<long>\
    \ ret;\n    ret.push_back(result);\n    return ret;", "    // your code goes here\n\
    \    if(arr.size()<k){\n        return {};\n    }\n    long min=-100000000000;\n\
    \    long max=100000000000;\n    long i=0;\n    std::vector<long> res;\n    while(i<k){\n\
    \        if(max<=min){\n            max=min;\n        }\n        if(max>=arr[i]){\n\
    \            min=arr[i];\n        }\n        ++i;\n    }\n    i=0;\n    while(i<arr.size()){\n\
    \        if(max<=min){\n            max=min;\n        }\n        if(arr[i]>max){\n\
    \            max=arr[i];\n        }\n        i++;\n    }\n    i=0;\n    while(i<k){\n\
    \        if(arr[i]<min)\n        {\n            min=arr[i];\n        }\n     \
    \   i++;\n    }\n    while(i<arr.size()){\n        long temp=arr[i];\n       \
    \ arr[i]=min;\n        min=temp;\n        i++;\n    }\n    i=0;\n    while(i<k){\n\
    \        res[i]=arr[i];\n        i++;\n    }\n    return res;", "    assert(arr.size()\
    \ == k);\n    std::vector<long> temp(k);\n    long currMax = arr[0];\n    for\
    \ (long i = 0; i < k; i++) {\n        if (arr[i] > currMax) {\n            temp[i]\
    \ = currMax;\n            currMax = arr[i];\n        }\n    }\n    for (int i\
    \ = 1; i < k; i++) {\n        if (temp[i] < temp[i - 1]) {\n            temp[i]\
    \ = temp[i - 1];\n        }\n    }\n    return temp;", "    long long sum = 0;\n\
    \    long long max = 0;\n    for (long i = 0; i < arr.size(); i++) {\n       \
    \ sum += arr[i];\n        if (sum > max) {\n            max = sum;\n        }\n\
    \    }\n    long long k = max;\n    std::vector<long> ans(k);\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        sum += arr[i];\n        if (sum >= k) {\n\
    \            k = sum;\n        }\n        ans[k - sum] = arr[i];\n    }\n    return\
    \ ans;", "    std::vector<long> result(k);\n    long max_elem = 0;\n    for (long\
    \ i = 0; i < k; i++) {\n        max_elem = arr[i];\n        for (long j = 0; j\
    \ < k; j++)\n            if (arr[j] > max_elem) {\n                max_elem =\
    \ arr[j];\n            }\n        result[i] = max_elem;\n    }\n    return result;",
  "    if (arr.size() == 0 || k <= 0) return {};\n    auto maximum = std::vector<long>(arr.size());\n\
    \    for (long i = 0; i < k; i++) {\n        maximum[i] = std::numeric_limits<long>::min();\n\
    \    }\n    auto it = std::max_element(arr.begin(), arr.end()); // O(n * log(k))\n\
    \    for (long i = 0; i < k; i++) { // O(k)\n        maximum[i] = it[i];\n   \
    \ }\n    return maximum;", "    // Write your code here.\n    sort(arr.begin(),\
    \ arr.end());\n    std::vector<long> ans;\n    long l = 0, r = arr.size() - 1;\n\
    \    long cur = arr[r];\n    for (int i = 0; i < k; i++) {\n        if (cur <\
    \ arr[l])\n            l++;\n        else if (cur > arr[r])\n            r--;\n\
    \        else\n            ans.push_back(cur);\n    }\n    return ans;", "   \
    \ long maxValue = arr[0];\n    std::vector<long> maxList;\n\n    // The first\
    \ k elements are the maximum elements\n    for (auto cur : arr) {\n        //\
    \ If the current element is not the maximum, set the current element to maximum\n\
    \        if (cur > maxValue) {\n            maxValue = cur;\n        }\n    }\n\
    \n    // Add the remaining elements to the list\n    for (auto cur : arr) {\n\
    \        // If the current element is greater than maxValue, add it to the list\n\
    \        if (cur > maxValue) {\n            std::cout << maxValue << std::endl;\n\
    \            maxList.push_back(maxValue);\n            maxValue = cur;\n     \
    \   } else {\n            // Otherwise, if the current element is the same as\
    \ the maximum, move on\n            if (cur == maxValue) {\n                continue;\n\
    \            }\n\n            // Otherwise, if the current element is not the\
    \ maximum, set the current element to maximum\n            maxValue = cur;\n \
    \       }\n    }\n\n    std::cout << maxValue << std::endl;\n    maxList.push_back(maxValue);\n\
    \    return maxList;", "        \n    \n    std::vector<long> ans;\n    \n   \
    \ // Sort the array in descending order using max_element\n    std::sort(arr.begin(),\
    \ arr.end(), std::greater<long>());\n    \n    // Find the maximum k elements\
    \ in the array\n    for(int i = 0; i< k; i++){\n        \n        // If current\
    \ element is less than or equal to current maximum, \n        // continue to next\
    \ iteration of the loop.\n        if(arr[i] <= ans[i]) continue;\n        \n \
    \       // If current element > maximum found, add the current element to \n \
    \       // the vector and move onto the next element in the array.\n        if(arr[i]\
    \ > ans[i]){\n            ans.push_back(arr[i]);\n        }\n        \n      \
    \  // If current element < maximum found, add the current element to\n       \
    \ // the vector and move onto the next element in the array. \n        // Since\
    \ we already added the element to vector ans, if element \n        // is less\
    \ than the current element it is already in the vector \n        // and we do\
    \ not need to do anything.\n        else if(arr[i] < ans[i]){\n            continue;\n\
    \        }\n        \n        // If current element == maximum element and we\
    \ reach the end of the\n        // array without finding the maximum element\n\
    \        else {\n            ans.push_back(arr[i]);\n        }\n    }\n    \n\
    \    return ans;", "    long ans = 0;\n    long max_pos = 0;\n    long cur_max\
    \ = arr[0];\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] >\
    \ cur_max) {\n            ans += k - max_pos;\n            cur_max = arr[i];\n\
    \            max_pos = i;\n        }\n    }\n    ans += k - max_pos;\n    ans\
    \ += k - max_pos + 1;\n    ans = std::min(ans, static_cast<long>(arr.size()));\n\
    \    std::vector<long> ansa;\n    for (int i = 0; i < ans; i++) {\n        ansa.push_back(cur_max);\n\
    \    }\n    return ansa;", "  std::vector<long> max_arr(k);\n  long max_num =\
    \ arr[0];\n  for (size_t i = 0; i < k; i++) {\n    if (arr[i] > max_num) {\n \
    \     max_num = arr[i];\n    }\n  }\n  long rest = max_num;\n  for (size_t i =\
    \ 0; i < arr.size(); i++) {\n    if (arr[i] == 0) {\n      continue;\n    }\n\
    \    if (rest == 0) {\n      max_arr[i] = arr[i];\n      continue;\n    }\n  \
    \  if (rest > arr[i]) {\n      max_arr[i] = rest;\n      rest = 0;\n    } else\
    \ if (rest < arr[i]) {\n      max_arr[i] = arr[i];\n      rest = rest;\n    }\n\
    \  }\n  return max_arr;", "    // Write your code here\n    std::vector<long>\
    \ result;\n    long maxElement = arr[0];\n    int i = 0;\n    for (; i < k; i++)\
    \ {\n        if (maxElement > arr[i]) {\n            maxElement = arr[i];\n  \
    \      }\n    }\n    while (i < k) {\n        result.push_back(maxElement);\n\
    \        maxElement = arr[i + 1];\n        i++;\n    }\n    return result;", " \
    \   std::vector<long> arr1(arr.begin(), arr.end());\n    std::vector<long> arr2(arr.begin(),\
    \ arr.end());\n    // int arr1size = sizeof(arr) / sizeof(arr[0]);\n    // int\
    \ arr2size = sizeof(arr2) / sizeof(arr2[0]);\n    long max1 = arr1[0];\n    long\
    \ max2 = arr2[0];\n    for (long i = 0; i < k; i++) {\n        if (arr1[i] > max1)\
    \ {\n            max1 = arr1[i];\n        }\n        if (arr2[i] > max2) {\n \
    \           max2 = arr2[i];\n        }\n    }\n    std::vector<long> result(k);\n\
    \    long i = 0;\n    for (; i < k; i++) {\n        if (arr1[i] > max2) {\n  \
    \          break;\n        }\n        result[i] = max1;\n    }\n    for (; i <\
    \ k; i++) {\n        if (arr2[i] > max2) {\n            break;\n        }\n  \
    \      result[i] = max2;\n    }\n    return result;", "    std::vector<long> ret(arr,\
    \ arr + k);\n    std::sort(ret.begin(), ret.end());\n    return ret;", "    //\
    \ Your code here\n    std::vector<long> result;\n    for(long i = 0; i < arr.size();\
    \ i++) {\n        result.push_back(std::max(arr[i], arr[i + 1]));\n    }\n   \
    \ result.push_back(arr[k - 1]);\n    result.push_back(arr[arr.size() - 1]);\n\
    \    std::sort(result.begin(), result.end());\n    result.erase(std::unique(result.begin(),\
    \ result.end()), result.end());\n    return result;", "    // Your code goes here\n\
    \    std::vector<long> v;\n    long max_so_far = arr[0];\n    long min_so_far\
    \ = arr[0];\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] >\
    \ max_so_far) {\n            max_so_far = arr[i];\n        }\n        if (arr[i]\
    \ < min_so_far) {\n            min_so_far = arr[i];\n        }\n    }\n    int\
    \ len = (int)ceil(arr.size() / (double)k);\n    for (int i = 0; i < len ; i++)\
    \ {\n        if (max_so_far < min_so_far) {\n            v.push_back(max_so_far);\n\
    \            max_so_far = arr[(len-1)-i];\n        }\n        else{\n        \
    \    v.push_back(max_so_far);\n            max_so_far = max_so_far + arr[(len-1)-i];\n\
    \        }\n    }\n    v.push_back(max_so_far);\n    return v;", "  std::sort(arr.begin(),\
    \ arr.end());\n  if (arr.size() <= k) {\n    return std::vector<long> arr;\n \
    \ }\n  std::vector<long> arrK(arr.begin(), arr.begin() + k);\n  std::sort(arrK.begin(),\
    \ arrK.end());\n  std::vector<long> arrKMax(arrK.begin(), arrK.end());\n  std::vector<long>\
    \ arrMax(k);\n  for (int i = 0; i < k; i++) {\n    arrMax[i] = std::max(arrKMax[i],\
    \ arrK[i]);\n  }\n  return arrMax;", "\tstd::vector<long> v;\n\tfor(int i=0;i<arr.size();i++){\n\
    \t\tv.push_back(arr[i]);\n\t}\n\tsort(v.begin(), v.end());\n\treturn std::partition_copy(v.begin(),\
    \ v.end(), v.begin(), v.begin(), k);", "    long long arr_size = 0;\n    for (long\
    \ long i = 0; i < arr.size(); i++) {\n        arr_size += arr[i];\n    }\n\n \
    \   std::vector <long> max_list(arr_size);\n    long long arr_sum = 0;\n    for\
    \ (long long i = 0; i < arr.size(); i++) {\n        arr_sum += arr[i];\n     \
    \   max_list[i] = arr_sum;\n    }\n\n    long long max_count = 0;\n    for (long\
    \ long i = 0; i < arr_size - k; i++) {\n        max_count = max(max_count, max_list[i]);\n\
    \    }\n\n    std::vector<long> max_list_new;\n    for (long long i = arr_size\
    \ - k; i < arr_size; i++) {\n        if (max_count > max_list[i]) {\n        \
    \    max_count = max_list[i];\n        }\n        max_list_new.push_back(max_list[i]);\n\
    \    }\n    return max_list_new;", "    assert(arr.size() <= 1000);\n    assert(k\
    \ <= arr.size());\n    std::vector<long> max_arr(k);\n    for (long i = 0; i <\
    \ k; ++i) {\n        max_arr[i] = arr[0];\n    }\n\n    for (long i = 1; i < arr.size();\
    \ ++i) {\n        long cur_max = max_arr[i - 1];\n        if (cur_max < arr[i])\
    \ {\n            max_arr[i] = arr[i];\n        }\n    }\n    return max_arr;",
  "    long count = 0;\n    int i = 0;\n    std::vector<long> num;\n    \n    while(i\
    \ < arr.size()) {\n        num.push_back(arr[i]);\n        i += 1;\n    }\n  \
    \  \n    long temp;\n    while(count < k) {\n        count = 0;\n        for(int\
    \ j = 0; j < num.size(); ++j) {\n            if((num[j] >= temp) && (num[j] !=\
    \ num[j-1])) {\n                temp = num[j];\n                num[j] = num[j-1];\n\
    \                num[j-1] = temp;\n                count++;\n            }\n \
    \       }\n    }\n    \n    return num;", "    long arr_size = arr.size();\n \
    \   assert(arr_size >= 1);\n    assert(k <= arr_size);\n    std::vector<long>\
    \ ret;\n    ret.reserve(k);\n    long max_num = arr[0], max_num2 = arr[0];\n \
    \   for (auto elem : arr) {\n        if (elem > max_num) {\n            max_num\
    \ = elem;\n        }\n        if (elem > max_num2) {\n            max_num2 = elem;\n\
    \        }\n    }\n    ret[0] = max_num;\n    for (auto elem : arr) {\n      \
    \  if (elem < max_num2) {\n            ret.push_back(elem);\n        }\n    }\n\
    \    return ret;", "    if(arr.size() == 0 || k == 0) return {};\n    std::vector<long>\
    \ res;\n    if(arr.size() <= k) res.reserve(arr.size());\n    for(long i = 1;\
    \ i < arr.size(); i++) {\n        if(arr[i-1] > arr[i])\n            std::swap(arr[i-1],\
    \ arr[i]);\n        if(res.size() >= k) break;\n    }\n    for(long i = 0; i <\
    \ k; i++) res.push_back(arr[i]);\n    return res;", "    // Write your code here\n\
    \    std::vector<long> result;\n    for(auto &item:arr){\n        if(k==result.size()){\n\
    \            result.push_back(item);\n        }\n        else if(item > result[k-1]){\n\
    \            result.push_back(item);\n        }\n        else if(item < result[k-1]){\n\
    \            result.insert(result.begin()+k-1, item);\n        }\n    }\n    return\
    \ result;", "    std::vector<long> maximum;\n    long maxArr[1001];\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        maxArr[i] = std::max(arr[i], 0);\n  \
    \  }\n    int size = arr.size();\n    int count = 1;\n    for (int i = size; i\
    \ > 0; i--) {\n        while (count != k) {\n            int pos = -1;\n     \
    \       for (int j = 0; j < i; j++) {\n                if (maxArr[j] > maxArr[pos])\
    \ {\n                    pos = j;\n                }\n            }\n        \
    \    maximum.push_back((maxArr[pos] + maxArr[i - 1]) / 2);\n            if (maxArr[pos]\
    \ > maxArr[i - 1]) {\n                count++;\n            } else {\n       \
    \         count--;\n            }\n            maxArr[i] = maxArr[i - 1];\n  \
    \      }\n        maxArr[i] = 0;\n    }\n    return maximum;", '    // code here',
  "    long n = arr.size();\n    long result = arr[0];\n    std::vector<long> maximums(k);\n\
    \    long start = 0;\n    long end = n - 1;\n    while(start < end) {\n      \
    \  while(start < end && arr[start] < result) start++;\n        while(start < end\
    \ && arr[end] > result) end--;\n        if(start >= end) {\n            maximums.push_back(arr[start]);\n\
    \            start = start + 1; end = end - 1;\n        } else {\n           \
    \ maximums.push_back(arr[start]);\n            start = start + 1; end = end -\
    \ 1;\n        }\n    }\n    return maximums;", "    // Write your code here\n\
    \    long max_so_far = 0;\n    std::vector<long> max_elem;\n    std::vector<long>\
    \ max_elem2; \n    for(long i=0; i<arr.size(); i++){\n        max_so_far = std::max(max_so_far,arr[i]);\n\
    \        if(max_so_far > arr[i]){\n            max_elem.push_back(arr[i]);\n \
    \       }\n        if(arr[i] > max_so_far){\n            max_elem2.push_back(arr[i]);\n\
    \        }\n    }\n    if(k == max_elem2.size()){\n        return max_elem2;\n\
    \    }\n    else if(k == max_elem.size()){\n        return max_elem;\n    }\n\
    \    return max_elem2;", "    std::vector<long> res(k);\n    for(long i = 0; i\
    \ < k; i++) {\n        res[i] = arr[i];\n    }\n    std::sort(res.begin(), res.end(),\
    \ [&](long a, long b){return a>b;});\n    return res;", "    int n = arr.size();\n\
    \    // if k <= 0 || n < k return []\n    if (k < 0 || n <= k) return {};\n  \
    \  // if k >n or n>k return []\n    if (n > k) return {};\n\n    // sort arr\n\
    \    std::sort(arr.begin(), arr.end());\n\n    // initialize max vector to n-1\n\
    \    std::vector<long> max(n-1);\n    // initialize index start\n    long start\
    \ = 0;\n    // initialize index end\n    long end = n-1;\n\n    // initialize\
    \ k\n    long k = k + 1;\n\n    while (start <= end) {\n        if (arr[start]\
    \ < arr[k]) {\n            // move arr[k]\n            max = std::move(max);\n\
    \            max = std::move(arr[k]);\n            k += 1;\n        } else if\
    \ (arr[start] > arr[k]) {\n            // move arr[start]\n            max = std::move(arr[k]);\n\
    \            max = std::move(max);\n            start += 1;\n        } else {\n\
    \            // move arr[start] to max\n            max = std::move(max);\n  \
    \          start = start + 1;\n        }\n    }\n\n    // return max vector\n\
    \    return max;", "    auto max_val = *std::max_element(std::begin(arr), std::end(arr));\n\
    \    std::vector<long> res;\n    auto it = std::begin(arr);\n    for (long i =\
    \ 0; i < k; i++) {\n        long cur = *std::max_element(std::begin(it), std::end(it));\n\
    \        res.push_back(cur);\n        it = std::find_if(std::begin(arr), std::end(arr),\
    \ [&](long x) {\n            return x < cur;\n        });\n    }\n    return res;",
  "    // code here\n    int n = arr.size();\n    std::vector<long> v(n);\n    long\
    \ max = v[0];\n    for (int i = 0; i < n; i++)\n    {\n        v[i] = arr[i];\n\
    \        if (max < v[i])\n            max = v[i];\n    }\n    std::vector<long>\
    \ ans;\n    for (int i = 0; i < k; i++) {\n        ans.push_back(max);\n    }\n\
    \    return ans;", "   std::vector<long> largest;\n   largest.resize(k);\n\n \
    \  int n = arr.size();\n   for (int i = 0; i<n; i++) {\n      int index = i;\n\
    \      for (int j = i+1; j<n; j++) {\n         if (arr[i] > arr[j]) {\n      \
    \      index = j;\n         }\n      }\n      if (largest[index] == INT_MAX ||\
    \ largest[index] < arr[i]) {\n         largest[index] = arr[i];\n      }\n   }\n\
    \   return largest;", "    std::vector<long> max_element(arr.begin(), arr.begin()\
    \ + k);\n    std::vector<long> max_elements(max_element.begin(), max_element.begin()\
    \ + k);\n    std::vector<long> new_max_element(max_elements);\n    \n    for (auto\
    \ it = max_element.begin(); it != max_element.end(); ++it) {\n        if (*it\
    \ > max_elements.back()) {\n            std::vector<long> tmp(new_max_element);\n\
    \            tmp.push_back(*it);\n            max_elements = tmp;\n        } else\
    \ {\n            std::vector<long> tmp(new_max_element);\n            tmp.push_back(*it);\n\
    \            tmp.push_back(max_elements.back());\n            max_elements = tmp;\n\
    \        }\n    }\n    return max_elements;", "    \n    std::vector<long> max;\n\
    \    long max_value = 0;\n    long i = 1;\n    long j = 0;\n    for (; j < arr.size()\
    \ && i - 1 < k; ++j) {\n        if (arr[j] > arr[j - 1]) {\n            max_value\
    \ = arr[j];\n            while (j < arr.size() && arr[j - 1] == max_value) {\n\
    \                ++j;\n            }\n            max.push_back(max_value);\n\
    \            i = 0;\n        } else {\n            while (j < arr.size() && arr[j]\
    \ == arr[j - 1]) {\n                ++j;\n            }\n        }\n    }\n  \
    \  return max;", "    \n    // Write your code here\n    std::vector<long> v;\
    \ \n    std::sort(arr.begin(), arr.end()); \n    std::vector<long> ans;\n    long\
    \ n = arr.size();\n    long cnt = 0;\n    for(int i=0;i<k;i++)\n    {\n      \
    \  for(int j=0;j<n-k;j++)\n        {\n            if(arr[j] > arr[j+1])\n    \
    \        {\n                std::swap(arr[j], arr[j+1]);\n            }\n    \
    \    }\n        ans.push_back(arr[j]);\n        cnt++;\n    }\n    return ans;",
  "    // write your code here\n    int N = arr.size();\n    long max_arr[N];\n  \
    \  for (int i = 0; i < N; i++) {\n        max_arr[i] = arr[i];\n    }\n    max_arr[0]\
    \ = -100000;\n    int n = k;\n    for (int i = N - 1; i >= 0; i--) {\n       \
    \ if (max_arr[i] > max_arr[i + 1]) {\n            n = i;\n        }\n    }\n \
    \   std::vector<long> ans;\n    ans.resize(n + 1);\n    long i = max_arr[0];\n\
    \    for (int j = 0; j < n; j++) {\n        ans[j] = max_arr[j];\n        while(i\
    \ != max_arr[j]) {\n            ans[j] += 1;\n            i -= 1;\n        }\n\
    \    }\n    return ans;", "    std::iota(std::begin(arr), std::end(arr), 0);\n\
    \    std::vector<long> ans;\n    long max_val = INT_MIN;\n    int pos = -1;\n\
    \    for (int i = 0; i < arr.size(); ++i) {\n        if (max_val < arr[i]) {\n\
    \            max_val = arr[i];\n            pos = i;\n        }\n    }\n    ans.push_back(arr[pos]);\n\
    \    pos--;\n    for (int i = 0; i < k - 1 && pos >= 0; ++i) {\n        ans.push_back(arr[pos--]);\n\
    \    }\n    return ans;", "    std::vector<long> ans;\n    for(long i=0; i<k;\
    \ i++) {\n        std::pop_heap(arr.begin(), arr.end(), std::greater<long>());\n\
    \        std::pop_heap(arr.begin(), arr.end(), std::greater<long>());\n      \
    \  ans.push_back(arr[k-1]);\n    }\n    return ans;", "    // write your code\
    \ here\n    std::vector<long> result;\n    std::partial_sort(arr.begin(), arr.begin()\
    \ + k, arr.end(), [&](long a, long b){ return a < b; });\n    for(auto i = k;\
    \ i-- > 0;)\n    {\n        result.emplace_back(arr[i]);\n    }\n    return result;",
  "    long ans = 0;\n    for (long i = 0; i < k; i++) {\n        if (arr[i] > arr[ans])\
    \ ans = i;\n    }\n    for (long i = 0; i < k; i++) {\n        arr[i] = arr[ans];\n\
    \    }\n    for (long i = 0; i < k; i++) {\n        arr[ans] = arr[i];\n    }\n\
    \    return arr;", "    if(arr.size() < k){\n        return {};\n    }\n    std::vector<long>\
    \ res;\n    res.reserve(k);\n    for(long i=0; i<arr.size(); ++i){\n        res.push_back(arr[i]);\n\
    \    }\n    sort(res.begin(), res.end());\n    for(long i=k; i<res.size(); ++i){\n\
    \        if(arr[i] > res[i - k]){\n            long temp = res[i];\n         \
    \   res[i] = res[i - k];\n            res[i - k] = temp;\n        }\n    }\n \
    \   return res;", "  std::vector<long> ans;\n  std::vector<long> bk;\n  for (long\
    \ i = 0; i < arr.size(); i++) {\n    if (i == 0) {\n      ans.push_back(arr[i]);\n\
    \    } else {\n      if (bk[i - 1] > arr[i]) {\n        bk.push_back(bk[i - 1]);\n\
    \      }\n      bk[i - 1] = bk[i - 1] > arr[i] ? bk[i - 1] : arr[i];\n    }\n\
    \  }\n  for (long i = 0; i < k; i++) {\n    ans.push_back(bk[i]);\n  }\n  return\
    \ ans;", "    // Write your code here\n    std::vector<long> result;\n    long\
    \ max_val = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ > max_val) {\n            result.push_back(arr[i]);\n        } else {\n    \
    \        if (result.size() == k) {\n                return result;\n         \
    \   }\n        }\n    }", "  std::vector<long> ret;\n  // Create a helper function\
    \ to sort and find the maximun k numbers in arr\n  auto helper = [&arr, &k, &ret]()\
    \ {\n    sort(arr.begin(), arr.end());\n    std::partial_sort(arr.begin(), arr.begin()\
    \ + k, arr.end(), std::greater<long>());\n    ret.reserve(k);\n    for (long i\
    \ = 0; i < k; i++) {\n      ret.push_back(arr[i]);\n    }\n  };\n  // Find the\
    \ max k numbers in arr\n  for (int i = 0; i < k; i++) {\n    helper();\n  }\n\
    \  return ret;", "    if (k == 1) {\n        return std::move(arr);\n    }\n \
    \   \n    int lo = 0;\n    int hi = arr.size() - 1;\n    int mid = lo + (hi -\
    \ lo) / 2;\n    \n    while (lo <= hi) {\n        long midVal = arr[mid];\n  \
    \      while (lo <= mid && midVal < arr[lo]) {\n            lo++;\n        }\n\
    \        while (midVal > arr[hi] && hi > mid) {\n            hi--;\n        }\n\
    \        if (lo > mid) {\n            std::swap(arr[mid], arr[hi]);\n        }\
    \ else {\n            if (lo == mid) {\n                mid++;\n            }\n\
    \            midVal = arr[mid];\n            while (lo <= mid && midVal > arr[lo])\
    \ {\n                lo++;\n            }\n            while (midVal < arr[hi]\
    \ && hi > mid) {\n                hi--;\n            }\n        }\n    }\n   \
    \ return std::move(arr);", "    std::vector<long> maxk;\n    maxk.reserve(k);\n\
    \    for (long i=0;i<arr.size();i++) {\n        bool isMax = true;\n        for\
    \ (int j=i;j<k;j++) {\n            if (arr[j]>arr[j+1]) isMax = false;\n     \
    \   }\n        if (isMax) {\n            std::swap(arr[i], arr[k-1]);\n      \
    \      maxk.push_back(arr[k-1]);\n        }\n    }\n    return maxk;", "    std::vector<long>\
    \ max_num;\n    for(long i = 0; i < arr.size(); ++i){\n        max_num.push_back(std::max(arr[i],\
    \ arr[i + 1]));\n    }\n    return max_num;", "    assert(arr.size() >= k);\n\
    \    \n    std::vector<long> result;\n    \n    result.insert(result.end(), arr.begin(),\
    \ arr.begin() + k);\n    std::partial_sort(result.begin(), result.end(), std::greater<long>());\n\
    \    \n    std::reverse(result.begin(), result.end());\n    \n    if (k == 1)\n\
    \        return result;\n    \n    result.insert(result.end(), arr.begin() + k,\
    \ arr.end());\n    std::partial_sort(result.begin() + k, result.end(), std::greater<long>());\n\
    \    \n    std::reverse(result.begin() + k, result.end());\n    \n    return result;",
  "  assert(arr.size() >= k);\n  \n  long lo, hi, mid;\n  lo = std::numeric_limits<long>::min();\n\
    \  hi = std::numeric_limits<long>::max();\n  mid = (lo + hi) / 2;\n\n  while (lo\
    \ <= hi) {\n    if (arr[mid] < mid) {\n      lo = mid + 1;\n    } else {\n   \
    \   hi = mid - 1;\n    }\n    mid = (lo + hi) / 2;\n  }\n  std::vector<long> result;\n\
    \  result.push_back(mid);\n  while (lo > mid) {\n    result.push_back(arr[lo -\
    \ 1]);\n    lo--;\n  }\n  result.push_back(arr[lo]);\n  return result;", "   \
    \ long low = arr[0];\n    long high = arr[k];\n    std::vector<long> res;\n  \
    \  for (long i = k-1; i>= 0; i--) {\n        if(low > arr[i]) {\n            high\
    \ = arr[i];\n        } else {\n            res.push_back(low);\n            res.push_back(high);\n\
    \            low = high;\n            high = arr[i];\n        }\n    }\n    res.push_back(low);\n\
    \    res.push_back(high);\n    return res;", "    // code here\n    std::vector<long>\
    \ ans;\n    for (long i = 0; i < arr.size(); i++) {\n        long maxNum = arr[i];\n\
    \        long index = i;\n        for (long j = i; j < arr.size(); j++) {\n  \
    \          if (maxNum < arr[j]) {\n                maxNum = arr[j];\n        \
    \        index = j;\n            }\n        }\n        if (maxNum < arr[index])\
    \ {\n            ans.push_back(maxNum);\n        }\n    }\n    return ans;", " \
    \   sort(arr.begin(), arr.end());\n    std::vector<long> output(k, -1000LL);\n\
    \    for (long i = 0; i != k; ++i) {\n        if (arr[i] > 0)\n            output[i]\
    \ = arr[i];\n    }\n    return output;", "    std::vector<long> result;\n    result.reserve(k);\n\
    \    \n    // sort arr in ascending order\n    sort(arr.begin(), arr.end(), [](const\
    \ long a, const long b) { return a < b; });\n    \n    // get the max value\n\
    \    long maxValue = arr[k - 1];\n    \n    // get first k elements to check if\
    \ all elements are greater\n    for (int i = 1; i < k; i++)\n        maxValue\
    \ = max(maxValue, arr[i]);\n    \n    // if max value is greater than or equal\
    \ all elements then add that \n    // element to the result list\n    while (maxValue\
    \ >= arr[0]) {\n        result.push_back(maxValue);\n        \n        // get\
    \ the max value\n        maxValue = max(maxValue, arr[0]);\n        \n       \
    \ // get the next max value\n        maxValue = max(maxValue, arr[1]);\n    }\n\
    \    \n    return result;", "   long n = arr.size();\n   assert(k <= n);\n   std::vector<long>\
    \ ans;\n   for (long i = 0; i < n; ++i) {\n     if (i != 0 && arr[i-1] > arr[i])\n\
    \         ans.push_back(-arr[i-1]);\n     ans.push_back(arr[i]);\n   }\n   return\
    \ ans;", "  assert(arr.size() >= 1);\n  assert(k <= arr.size());\n  std::vector<long>\
    \ result;\n  std::set<long> sorted_set(arr.begin(), arr.end());\n  long maxk =\
    \ std::numeric_limits<long>::max();\n  result.push_back(sorted_set.begin()->first);\n\
    \  for (long i = 1; i < k; i++) {\n    if (sorted_set.begin()->first > maxk) {\n\
    \      maxk = sorted_set.begin()->first;\n      result.push_back(maxk);\n    }\n\
    \    sorted_set.erase(sorted_set.begin());\n    if (sorted_set.size() == 0) {\n\
    \      break;\n    }\n    sorted_set.insert(sorted_set.begin()->first);\n  }\n\
    \  return result;", "    assert(arr.size() <= 1000 && arr.size() > 0 && k <= arr.size());\n\
    \    std::vector<long> ans;\n    ans.reserve(arr.size());\n    long max_val =\
    \ arr[0];\n    \n    // Traversing the array one by one\n    for (long i = 0;\
    \ i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n            ans.clear();\n\
    \            ans.resize(1);\n            ans[0] = max_val;\n            max_val\
    \ = arr[i];\n        } else if (arr[i] == max_val) {\n            ans.push_back(max_val);\n\
    \            ans.resize(ans.size() + 1);\n            max_val = arr[i];\n    \
    \    } else {\n            ans.push_back(arr[i]);\n        }\n    }\n    \n  \
    \  // The last element of the returned vector\n    ans.push_back(max_val);\n \
    \   return ans;", "    std::sort(arr.begin(), arr.end());\n    auto first = arr.begin()\
    \ + k;\n    auto last = first + k;\n    std::sort(first, last);\n    return std::vector<long>(first,\
    \ last);", "    // code here\n    std::vector<long> max;\n    for(int i = 0;i<k;i++){\n\
    \        for(int j=0;j<arr.size();j++){\n            if(arr[j]>arr[i]){\n    \
    \            max[i] = max(max[i], arr[j]);\n            }\n        }\n    }\n\
    \    return max;", "    \n    long n = arr.size();\n    \n    std::vector<long>\
    \ max_arr;\n    \n    for(long i=0;i<n;++i){\n        long current = arr[i];\n\
    \        for(long j=i;j<n;j++){\n            long next_element = arr[j];\n   \
    \         \n            if(current>next_element){\n                current = next_element;\n\
    \            }\n        }\n        \n        max_arr.push_back(current);\n   \
    \ }\n    \n    std::partial_sort(max_arr.begin(), max_arr.begin()+k, max_arr.end());\n\
    \    \n    return max_arr;", "    // Write your code here\n    long ans = 0;\n\
    \    sort(arr.begin(), arr.end());\n    if (k == 0){\n        return arr;\n  \
    \  }\n    else if (k > arr.size() ){\n        ans = arr.size(); \n    }\n    else{\n\
    \        for (long i = 0; i < arr.size(); i++){\n            if(arr[i] > arr[i\
    \ + 1])\n            {\n                ans = max(ans, arr.size() - i - 1);\n\
    \                break;\n            }\n        }\n    }\n    std::vector<long>\
    \ res;\n    res.resize(ans);\n    return res;", "    // Write your code here.\n\
    \    std::sort(arr.begin(), arr.end());\n    std::vector<long> ans(k);\n    for\
    \ (long i = 0; i != k; ++i) {\n        ans[i] = arr[i];\n    }\n    return ans;",
  "    std::vector<long> max_vec;\n    max_vec.reserve(k);\n    long max_val = arr[0];\n\
    \    for (int i = 0; i < k; i++) {\n        // check if the current element is\
    \ greater than max_val\n        if (arr[i] > max_val) {\n            max_val =\
    \ arr[i];\n        }\n    }\n    max_vec.push_back(max_val);\n    // For every\
    \ element in the array check if it is greater than max_val and append it to the\
    \ max_vec\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] > max_val)\
    \ {\n            max_vec.push_back(arr[i]);\n        }\n    }\n    return max_vec;",
  "    assert(arr.size() >= 1 && arr.size() <= 1000 && k >= 0 && k <= arr.size());\n\
    \    std::vector<long> ans;\n    long large = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] > large) {\n            ans.clear();\n          \
    \  ans.push_back(i);\n            large = arr[i];\n        } else if (arr[i] ==\
    \ large) {\n            ans.push_back(i);\n        }\n    }\n    if (ans.size()\
    \ <= k) {\n        return ans;\n    }\n    ans.erase(std::find(ans.begin(), ans.end(),\
    \ k), ans.end());\n    return ans;", "    std::vector<long> num(k);\n    for (auto\
    \ i = 0; i < k; i++) {\n        num[i] = arr[i];\n    }\n    std::sort(num.begin(),\
    \ num.end());\n    return num;", "    int n = arr.size();\n    std::vector<long>\
    \ result;\n    // Write your code here\n    for(long i=0;i<n;i++){\n        for(long\
    \ j=i;j<n;j++){\n            if(arr[i]>arr[j]){\n                long temp=arr[i];\n\
    \                arr[i]=arr[j];\n                arr[j]=temp;\n            }\n\
    \        }\n    }\n    long maxIndex=0;\n    for(long i=0;i<k;i++){\n        if(arr[i]>arr[maxIndex]){\n\
    \            maxIndex=i;\n        }\n    }\n    for(long i=maxIndex;i<n;i++){\n\
    \        result.push_back(arr[i]);\n    }\n    return result;", "    // code here\n\
    \    vector<long> vec;\n    long maxVal = -1000;\n    for (int i = 0; i < k; i++)\
    \ {\n        long currentMax = maxVal;\n        long currentVal = 0;\n       \
    \ for (int j = 0; j < arr.size(); j++) {\n            currentVal = currentVal\
    \ + arr[j];\n            if (currentVal > currentMax) {\n                currentMax\
    \ = currentVal;\n            }\n        }\n        vec.push_back(currentMax);\n\
    \    }\n    return vec;", "    std::vector<long> res;\n    long l = 0;\n    long\
    \ r = arr.size()-1;\n    long m = std::numeric_limits<long>::max();\n    while\
    \ (r - l > 1){\n        long mid = l + (r - l) / 2;\n        if(m[mid]>arr[mid]){\n\
    \            l = mid + 1;\n        }\n        else if(m[mid]<arr[mid]){\n    \
    \        r = mid - 1;\n        }\n        else{\n            res.push_back(m[mid]);\n\
    \            l = mid + 1;\n            r = mid - 1;\n        }\n    }\n    while(l<=r){\n\
    \        if(arr[l]>arr[r]){\n            long temp = arr[l];\n            arr[l]\
    \ = arr[r];\n            arr[r] = temp;\n            res.push_back(arr[mid]);\n\
    \            l++;\n            r--;\n        }\n        else if(arr[l]<arr[r]){\n\
    \            r--;\n        }\n        else{\n            l++;\n        }\n   \
    \ }\n    return res;", "    long max_sum = 0;\n    std::vector<long> max_element;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long cur = arr[i];\n   \
    \     max_sum = std::max(max_sum, cur);\n        if (max_sum == cur) {\n     \
    \       max_element.push_back(cur);\n        }\n    }\n    // sort arr\n    std::vector<long>\
    \ tmp;\n    for (long i = 0; i < max_element.size(); i++) {\n        tmp.push_back(max_element[i]);\n\
    \    }\n    std::sort(tmp.begin(), tmp.end());\n    // return max_element\n  \
    \  return tmp;", "    std::vector<long> res;\n    res.reserve(arr.size());\n \
    \   for (long i = 0; i < k; i++) {\n        long max = -1000;\n        for (auto\
    \ j : arr) {\n            if (j > max) {\n                max = j;\n         \
    \   }\n        }\n        res.push_back(max);\n    }\n    return res;", "    std::map<long,\
    \ std::vector<long> > arrMap;\n    // Create a map of element in the given array\
    \ and sort them in ascending order\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        std::vector<long> arrInts;\n        arrInts.push_back(arr[i]);\n\
    \        arrMap.insert(std::pair<long, std::vector<long> >(arr[i], arrInts));\n\
    \    }\n\n    for (auto itr = arrMap.begin(); itr != arrMap.end(); itr++) {\n\
    \        std::sort(itr->second.begin(), itr->second.end());\n    }\n\n    // Get\
    \ the maximum k elements from the map.\n    std::vector<long> ans;\n    for (auto\
    \ itr = arrMap.begin(); itr != arrMap.end(); itr++) {\n        ans.push_back(itr->first);\n\
    \        if (itr->second.size() > k) break;\n    }\n    return ans;", "    //\
    \ write your code here\n    long n = arr.size();\n    std::vector<long> result;\n\
    \    long largest = 0;\n    for (long i = 0; i < n; i++) {\n        if(largest\
    \ < arr[i])\n            largest = arr[i];\n    }\n    long index = n - 1;\n \
    \   while(index >= 0 && arr[index] < largest)\n    {\n        \n        for(long\
    \ i = index + 1; i < n; i++)\n        {\n            if(arr[i] > largest)\n  \
    \          {\n                largest = arr[i];\n                \n          \
    \  }\n        }\n        \n        if(largest == arr[index])\n        {\n    \
    \        break;\n        }\n        \n        if(largest > arr[index])\n     \
    \   {\n            result.resize(k);\n            for(long i = index; i > index\
    \ - 1; i--)\n            {\n                result[i] = result[i-1];\n       \
    \     }\n            result[index] = largest;\n            index--;\n        \
    \    \n            while(index >= 0 && arr[index] > largest)\n            {\n\
    \                \n                for(long i = index + 1; i < n; i++)\n     \
    \           {\n                    if(arr[i] > largest)\n                    {\n\
    \                        largest = arr[i];\n                        \n       \
    \             }\n                }\n                \n                if(largest\
    \ == arr[index])\n                {\n                    break;\n            \
    \    }\n                \n                if(largest > arr[index])\n         \
    \       {\n                    result.resize(k);\n                    for(long\
    \ i = index; i > index - 1; i--)\n                    {\n                    \
    \    result[i] = result[i-1];\n                    }\n                    result[index]\
    \ = largest;\n                    index--;\n                    \n           \
    \     }\n            }\n        }\n    }\n    result.erase(result.end() - k);\n\
    \    \n    for(int i = 0; i < k; i++)\n    {\n        cout << result[i] << \"\
    \ \";\n    }\n    \n    return result;", "    std::vector<long> result;\n    for\
    \ (long i = 0; i < arr.size(); i++)\n    {\n        long max = arr[i];\n     \
    \   if (max>0)\n        {\n            max = max(max,arr[i+1]);\n            max\
    \ = max(max,arr[i+2]);\n            max = max(max,arr[i+3]);\n            max\
    \ = max(max,arr[i+4]);\n            max = max(max,arr[i+5]);\n            result.push_back(max);\n\
    \        }\n    }\n\n    std::vector<long>::iterator it;\n    for (it=result.begin();it!=result.end();it++)\n\
    \    {\n        std::cout << *it << \" \";\n    }\n    std::cout << std::endl;\n\
    \    \n    \n    return std::max_element(result.begin(),result.end());", "   \
    \ // Your code goes here\n    std::vector<long> vec(k);\n    std::partial_sum(arr.begin(),\
    \ arr.end(), vec.begin());\n    std::partial_sum(vec.begin(), vec.begin()+k, vec.begin());\n\
    \    std::vector<long> result;\n    std::set_difference(vec.begin(), vec.begin()+k,\
    \ arr.begin(), arr.end(), back_inserter(result));\n    std::sort(result.begin(),\
    \ result.end(), [](long a, long b){return a<b;});\n    return result;", "    //\
    \ write your code here\n\tstd::vector<long> maxList;\n\tstd::sort(arr.begin(),arr.end());\n\
    \tstd::set<long> maxSet;\n\tfor (int i=0;i<arr.size();i++)\n\t{\n\t\tif(maxSet.find(arr[i])!=maxSet.end())\n\
    \t\t{\n\t\t\tcontinue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmaxSet.insert(arr[i]);\n\
    \t\t\tmaxList.push_back(arr[i]);\n\t\t}\n\t\tif(maxList.size()>k)\n\t\t\tmaxList.pop_back();\n\
    \t}\n\treturn maxList;", "    std::sort(arr.begin(), arr.end());\n    std::partial_sort(arr.begin(),\
    \ arr.begin() + k, arr.end());\n    std::vector<long> ret;\n    ret.reserve(k);\n\
    \    for (long i = 0; i < k; i++) {\n        ret.push_back(arr[i]);\n    }\n \
    \   return ret;", "    // Write your code here\n    if(arr.size() < k) return\
    \ {};\n    auto max_val_it = std::max_element(arr.begin(), arr.begin() + k);\n\
    \    std::vector<long> max_val(max_val_it - arr.begin(), max_val_it);\n    return\
    \ max_val;", "    std::vector<long> output(k, std::numeric_limits<long>::max());\n\
    \    for (auto val : arr) {\n        for (long i = 0; i < k; ++i) {\n        \
    \    if (output[i] < val)\n                output[i] = val;\n        }\n    }\n\
    \    return output;", "    long long sum = 0;\n    std::vector<long> result;\n\
    \    for(int i=0;i<arr.size();i++) {\n        if(sum >= arr[i]) {\n          \
    \  sum += arr[i];\n            result.push_back(arr[i]);\n            if(sum >=\
    \ k) {\n                result.push_back(sum-(k+1));\n                break;\n\
    \            }\n        }\n    }\n    return result;", "\t// Your code goes here\n\
    \tauto new_arr = {std::numeric_limits<int>::max(), 0};\n\tauto it = arr.begin();\n\
    \tint cnt = 1;\n\tfor (; cnt < k; ++cnt, ++it) {\n\t\tif (*it > new_arr[0]) {\n\
    \t\t\tnew_arr[0] = *it;\n\t\t}\n\t\tif (*it == new_arr[0]) {\n\t\t\tnew_arr[1]++;\n\
    \t\t}\n\t}\n\n\tstd::vector<long> ret;\n\tret.reserve(new_arr[1]);\n\tit = arr.begin();\n\
    \tint cnt = 0;\n\tfor (; cnt < k; ++cnt, ++it) {\n\t\tif (*it == new_arr[0]) {\n\
    \t\t\tret[cnt] = *it;\n\t\t\t++cnt;\n\t\t}\n\t}\n\n\treturn ret;", "    std::vector<long>\
    \ max_arr;\n    for(int i=0;i<arr.size();i++)\n    {\n        max_arr.push_back(arr[i]);\n\
    \    }\n    sort(max_arr.begin(), max_arr.end());\n    \n    std::vector<long>\
    \ max_arr1(max_arr.size());\n    \n    int c=0;\n    for(int i=0;i<max_arr.size();i++)\n\
    \    {\n        while(max_arr1[c]==max_arr[i])\n        {\n            c++;\n\
    \        }\n        max_arr1[c]=max_arr[i];\n    }\n    \n    for(int i=0;i<k;i++)\n\
    \    {\n        max_arr.push_back(max_arr1.at(i));\n    }\n    return max_arr;",
  "    std::vector<long> arr1(arr.begin(), arr.end());\n    long maximum = arr1[0];\n\
    \    long maximumIndex = 0;\n    for (long index = 1; index < arr.size(); index++)\
    \ {\n        if (maximum < arr1[index]) {\n            maximum = arr1[index];\n\
    \            maximumIndex = index;\n        }\n    }\n\n    if (maximumIndex ==\
    \ k) {\n        return arr;\n    } else {\n        return arr;\n    }", "\tstd::vector<long>\
    \ maximum(k + 1, 0);\n\tfor (long i = 0; i < arr.size(); i++) {\n\t\tmaximum[i]\
    \ = std::max(maximum[i], arr[i]);\n\t}\n\tstd::vector<long> res;\n\tlong size\
    \ = maximum.size();\n\tfor (long i = 1; i < size; i++) {\n\t\tres.push_back(maximum[i]);\n\
    \t}\n\treturn res;", "    long result=0;\n    long maxCount=1;\n    for(long i:arr)\n\
    \    {\n       result=max(result,i);\n       maxCount=max(maxCount,i);\n    }\n\
    \    long tempCount=maxCount;\n    for(long i:arr)\n    {\n       if(tempCount==maxCount)\n\
    \       {\n          if(result<i)\n             result=i;\n       }\n       else\n\
    \       {\n          tempCount=maxCount;\n          result=i;\n       }\n    }\n\
    \    std::vector<long> answer;\n    for(long i=0;i<k;i++)\n    {\n      answer.push_back(arr[result-tempCount]);\n\
    \    }\n    return answer;", "    long n=arr.size();\n    long arr2[k];\n    for(long\
    \ i=0;i<k;i++){\n        arr2[i]=arr[i];\n    }\n    long max=0;\n    long cur=0;\n\
    \    for(long i=0;i<n;i++){\n        if(max<arr2[i]){\n            max=arr2[i];\n\
    \            cur=i;\n        }\n    }\n    std::reverse(arr2+cur,arr2+n-1);\n\
    \    std::vector<long> res(cur,0);\n    for(long i=0;i<k;i++){\n        if(max>arr2[i]){\n\
    \            res.insert(res.begin()+i,arr2[i]);\n        }\n    }\n    return\
    \ res;", "    std::vector<long> ans;\n    \n    for (int i = 0; i < k; i++) {\n\
    \        ans.push_back(0);\n    }\n    \n    for (int i = 0; i < arr.size(); i++)\
    \ {\n        for (int j = 0; j < i; j++) {\n            if (arr[i] < arr[j]) {\n\
    \                long temp = ans[j];\n                ans[j] = arr[i];\n     \
    \           arr[i] = temp;\n                break;\n            }\n        }\n\
    \    }\n    \n    for (int i = 0; i < k; i++) {\n        ans.push_back(arr[i]);\n\
    \    }\n    \n    return ans;", "    assert(k <= arr.size());\n    std::sort(arr.begin(),\
    \ arr.end());\n    std::vector<long> ret;\n    ret.reserve(k);\n    for (auto\
    \ it = arr.begin(); it != arr.end(); it++)\n        if (it != arr.begin())\n \
    \           ret.pop_back();\n        ret.push_back(std::max(*it, *it));\n    return\
    \ ret;", "    long long max = 0;\n    std::vector<long> v;\n    for (long i =\
    \ 0; i < arr.size(); i++) {\n        long val = arr[i];\n        if (val > max)\
    \ {\n            max = val;\n        }\n    }\n    long long max2 = 0;\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        long val = arr[i];\n        if\
    \ (val >= max)\n            v.push_back(val);\n        if (val > max2) {\n   \
    \         max2 = val;\n        }\n    }\n    if (k > v.size()) {\n        std::cout\
    \ << \"k is greater than the size of array.\" << std::endl;\n        return v;\n\
    \    }\n    for (long i = 0; i < v.size(); i++) {\n        if (k == v.size())\
    \ {\n            break;\n        }\n        if (k == 1) {\n            v.push_back(v[0]);\n\
    \            break;\n        }\n        if (k == v.size() - 1) {\n           \
    \ v.push_back(max2);\n            break;\n        }\n        if (k > 1) {\n  \
    \          if (v[i] >= v[k - 1] && v[i] >= v[k - 2]) {\n                v.push_back(v[i]);\n\
    \            } else {\n                if (v[k - 1] >= v[k - 2] && v[k - 1] >=\
    \ v[k - 3]) {\n                    v.push_back(v[k - 1]);\n                } else\
    \ {\n                    if (v[k - 2] >= v[k - 3]) {\n                       \
    \ v.push_back(v[k - 2]);\n                    } else {\n                     \
    \   if (v[k - 3] >= v[k - 2]) {\n                            v.push_back(v[k -\
    \ 3]);\n                        }\n                    }\n                }\n\
    \            }\n        }\n    }\n    return v;", "    std::vector<long> result;\n\
    \    long max_ele = arr[0];\n    for (long i = 1; i < k; i++) {\n        if (arr[i]\
    \ > max_ele) {\n            max_ele = arr[i];\n        }\n    }\n    for (long\
    \ i = 0; i < k; i++) {\n        if (arr[i] == max_ele) {\n            result.push_back(arr[i]);\n\
    \        } else if (arr[i] != max_ele) {\n            result.push_back(-arr[i]);\n\
    \        }\n    }\n    return result;", "    if (k > arr.size()) {\n        throw\
    \ std::invalid_argument(\"k > arr.size()\");\n    }\n    std::vector<long> res(arr.size());\n\
    \    long maxVal = -1000000000;\n    long start = 0;\n    long end = 0;\n    for\
    \ (int i = 0; i < k; i++) {\n        end = arr.size();\n        while (end > start)\
    \ {\n            res[end] = max(arr[start], arr[end]);\n            end--;\n \
    \       }\n        start++;\n        maxVal = max(maxVal, res[end]);\n    }\n\
    \    return res;", "    std::vector<long> max_arr;\n    max_arr.resize(k);\n \
    \   for (int i = 0; i < k; i++) {\n        max_arr[i] = arr[i];\n    }\n    long\
    \ max_idx = k;\n    for (int i = 0; i < arr.size(); i++) {\n        if (max_idx\
    \ > arr.size() || max_arr[i] > arr[i]) {\n            long cur_idx = i;\n    \
    \        for (int j = i; j < k; j++) {\n                if (max_arr[j] > max_arr[cur_idx])\
    \ {\n                    cur_idx = j;\n                }\n            }\n    \
    \        max_arr[cur_idx] = max_arr[i];\n            max_idx = cur_idx;\n    \
    \    }\n    }\n    return max_arr;", "    std::vector<long> ans;\n    long index\
    \ = 1;\n    while (index <= k) {\n        if (index > arr.size()) {\n        \
    \    break;\n        }\n        if (arr[index] > arr[index - 1]) {\n         \
    \   std::swap(arr[index - 1], arr[index]);\n        }\n        index++;\n    }\n\
    \    ans.swap(arr);\n    return ans;", "        // Write your code here\n    \
    \    \n        \n        return {};\n    }\n    \n// }\nint main(){\n    ios_base::sync_with_stdio(0);\n\
    \    cin.tie(0); cout.tie(0);\n    \n    \n    \n    std::vector<long> arr = {-3,\
    \ 2, 1, 2, -1, -2, 1};\n    long k = 3;\n    \n    \n    std::vector<long> result\
    \ = maximum(arr, k);\n    for(auto i : result){\n        cout << i << \" \";\n\
    \    }", "    long long largest = arr[0], counter = 1;\n    std::vector<long>\
    \ res;\n    for(long i = 2; i < arr.size(); i++){\n        if(arr[i] > largest){\n\
    \            largest = arr[i];\n            counter = 1;\n        }\n        else\
    \ if(arr[i] == largest){\n            counter++;\n        }\n        else{\n \
    \           counter = 1;\n            largest = arr[i];\n        }\n        if(counter\
    \ == k){\n            res.push_back(largest);\n            counter = 1;\n    \
    \    }\n    }\n    return res;", "    // Your code here\n    long max_so_far =\
    \ 0, curr_max = arr[0];\n    long i = 0;\n    for (; i < k; i++) {\n        if\
    \ (arr[i] > curr_max) {\n            max_so_far = curr_max;\n            curr_max\
    \ = arr[i];\n        } else {\n            if (curr_max == arr[i]) {\n       \
    \         max_so_far = curr_max;\n                curr_max = arr[i];\n       \
    \     }\n        }\n    }\n    max_so_far = curr_max;\n    std::vector<long> ans;\n\
    \    for (int i = 0; i < k; i++) {\n        if (arr[i] == max_so_far) {\n    \
    \        ans.push_back(arr[i]);\n        }\n    }\n    return ans;", "  // Write\
    \ your code here\n  long max=0;\n  for(int i=0;i<k;i++){\n    if(arr[i]>max)\n\
    \    max=arr[i];\n  }\n  std::vector<long> arr2(k,max);\n  std::sort(arr.begin(),arr.end());\n\
    \  for(long i=0;i<k;i++){\n    if(arr[i]>arr2[i]){\n      arr2[i]=arr[i];\n  \
    \  }\n  }\n  return arr2;", "    long i = 0;\n    std::vector<long> result;\n\n\
    \    result.push_back(arr[0]);\n    for(size_t j = 1; j < arr.size(); j++) {\n\
    \        if(arr[j] > result[k - 1]) {\n            k = j;\n        }\n    }\n\
    \    for(; i < k; i++) {\n        result.push_back(arr[i]);\n    }\n    \n   \
    \ result.push_back(arr[k]);\n    \n    return result;", "    long n = arr.size();\n\
    \    std::vector<long> res;\n    for (long i = 0; i < k; i++) {\n        long\
    \ max = arr[0];\n        for (long j = 0; j < n; j++) {\n            if (max <\
    \ arr[j]) {\n                max = arr[j];\n            }\n        }\n       \
    \ res.push_back(max);\n    }\n    return res;", "  assert(arr.size() >= k);\n\
    \  std::set<long> m;\n  long maximum = arr[k - 1];\n  for (long i = 0; i < arr.size();\
    \ i++) {\n    if (m.size() < k) {\n      m.insert(arr[i]);\n      if (arr[i] >\
    \ maximum) maximum = arr[i];\n    } else {\n      long m = m.begin()->first;\n\
    \      long n = arr[i];\n      m.insert(n);\n      if (n > maximum) maximum =\
    \ n;\n      if (m.size() == k) break;\n    }\n  }\n  m.insert(maximum);\n  std::vector<long>\
    \ ans(k);\n  for (long i = 0; i < k; i++)\n    ans[i] = m.find(ans[i]) - m.begin();\n\
    \  return ans;", "    \n        \n        long max = 0;\n        for(int i=0;i<k;i++){\n\
    \            \n            if(arr[i] > max){\n                max = arr[i];\n\
    \            }\n            \n        }\n        \n        \n        std::vector<long>\
    \ ans(k);\n        ans[0] = max;\n        long tmp = 0;\n        for(int i=1;i<k;i++){\n\
    \            tmp = max;\n            if(arr[i] > max){\n                max =\
    \ arr[i];\n            }\n            \n            \n            if(arr[i] >\
    \ tmp){\n                ans[i] = tmp;\n            }\n        }\n        return\
    \ ans;\n        \n        \n        \n        \n        \n    }\n    \n    \n\n\
    //  Testcases\nvoid test1() {\n    std::cout << \"Testcase1 : \" << std::endl;\n\
    \    int arr[] = {4, -4, 4};\n    int k = 3;\n    std::vector<int> ans = maximum(arr,\
    \ k);\n    for (int i = 0; i < k; i++) {\n        std::cout << ans[i] << \" \"\
    ;\n    }\n    std::cout << std::endl;", "    // code here\n    std::vector<long>\
    \ res(k, 0);\n    for (long i : arr) {\n        res[i] += 1;\n        if (res[i]\
    \ > k) res[i] = k;\n    }\n    std::sort(res.begin(), res.end());\n    return\
    \ res;", "    // Write your code here\n    \n    return arr;", "    std::iota(arr.begin(),\
    \ arr.end(), 0);\n    \n    if (arr.size() <= k || k <= 0) {\n        return arr;\n\
    \    }\n    \n    std::vector<long> maxVec(arr.size()-k + 1, 0);\n    \n    for\
    \ (long i=0; i<arr.size()-k && i<maxVec.size(); i++) {\n        maxVec[i] = maxVec[i]\
    \ > arr[i] ? maxVec[i] : arr[i];\n    }\n    \n    for (long i=0; i<maxVec.size()\
    \ && i<k; i++) {\n        maxVec[i] = maxVec[i] > maxVec[i-1] ? maxVec[i] : maxVec[i-1];\n\
    \    }\n    \n    return maxVec;", "    // Write your code here\n    std::vector<long>\
    \ result;\n    long maxnum = arr[0];\n    long currnum = arr[0];\n    int count\
    \ = 0;\n    \n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] >\
    \ maxnum) {\n            maxnum = arr[i];\n            currnum = maxnum;\n   \
    \     }\n        if (currnum < arr[i]) {\n            currnum = arr[i];\n    \
    \    }\n        \n        if (count == k) {\n            result.push_back(maxnum);\n\
    \        }\n        \n        count++;\n    }\n\n    return result;", "    //\
    \ Your code here\n    std::vector<long> ret(k);\n    for (int i = 0; i < k; ++i)\
    \ {\n        ret[i] = -arr[0];\n        for (int j = 0; j < arr.size() - 1; ++j)\
    \ {\n            if (arr[j] > arr[j + 1]) {\n                ret[i] = max(ret[i],\
    \ arr[j]);\n            }\n        }\n    }\n    return ret;", "    long n = arr.size();\n\
    \    if (k >= n)\n        return arr;\n    long max_k = std::min(k, n);\n    long\
    \ max_val = 0;\n    for (long i = 0; i < n; i++) {\n        max_val = (max_val\
    \ < arr[i]) ? arr[i] : max_val;\n    }\n    std::vector<long> max_arr;\n    for\
    \ (long i = 0; i < max_k; i++)\n        max_arr.push_back(max_val);\n    return\
    \ max_arr;", "    std::vector<long> vec;\n    if (arr.empty())\n        return\
    \ vec;\n    auto max = std::numeric_limits<long>::max();\n    for (int i = 0;\
    \ i < k; i++) {\n        max = std::max(max, arr[i]);\n    }\n    vec.push_back(max);\n\
    \    for (auto i : arr) {\n        if (std::abs(i) < max)\n            vec.push_back(i);\n\
    \    }\n    return vec;", '    // code here', "    std::sort(arr.begin(), arr.end());\n\
    \    long n = (arr.size() == k ? arr.size() : k);\n    std::vector<long> ans;\n\
    \    for (long i = 0; i < n; ++i) {\n        ans.push_back(arr[i]);\n        if\
    \ (i == n - 1) {\n            break;\n        }\n        long j = i + 1;\n   \
    \     while (j < n && arr[j] >= arr[j + 1]) {\n            ++j;\n        }\n \
    \       ans.push_back(arr[j]);\n    }\n    return ans;", "    // write your code\
    \ here\n    assert(k<=arr.size() && k>0 && k<=INT_MAX);\n    long long ans=INT_MAX;\n\
    \    std::vector<long> maxv;\n    for(long i=0;i<arr.size();i++){\n        if(arr[i]>ans){\n\
    \            ans=arr[i];\n            maxv.resize(k);\n        }\n        if(arr[i]>ans\
    \ && i<k){\n            maxv[i]=arr[i];\n        }\n    }\n    return maxv;",
  "    std::vector<long> max_arr;\n    int n = arr.size();\n    long cur = arr[0];\n\
    \    long max_val = cur;\n\n    for (int i = 1; i < n; i++) {\n        if (arr[i]\
    \ > cur) {\n            max_val = cur;\n        }\n        cur = arr[i];\n   \
    \ }\n    max_arr.push_back(cur);\n    for (int i = 0; i < n; i++) {\n        cur\
    \ = arr[i];\n        if (cur > max_val) {\n            max_val = cur;\n      \
    \  }\n        if (max_val == cur) {\n            max_arr.push_back(cur);\n   \
    \     }\n    }\n    return max_arr;", "    long len = arr.size();\n    std::vector<long>\
    \ v;\n    for(long i = 0; i < k; i++) {\n        long max = -arr[0];\n       \
    \ for(long j = 1; j < len; j++) {\n            if(max < arr[j]) {\n          \
    \      max = arr[j];\n            }\n        }\n        v.push_back(max);\n  \
    \  }\n    return v;", "    std::sort(arr.begin(), arr.end());\n    \n    std::vector<long>\
    \ max_arr(k);\n    \n    int i = 0;\n    for (long j : arr) {\n        if (i >=\
    \ k) {\n            break;\n        }\n        max_arr[i] = std::max(j, max_arr[i]);\n\
    \        i++;\n    }\n\n    return max_arr;", "  std::vector<long> ans;\n  long\
    \ largest = arr[0];\n  long count = 0;\n  for (int i = 0; i < arr.size(); i++)\
    \ {\n    if (arr[i] > largest) {\n      ans.push_back(arr[i]);\n      largest\
    \ = arr[i];\n    }\n  }\n  while (k >= count) {\n    ans.push_back(largest);\n\
    \    largest++;\n    count++;\n  }\n  for (int i = count - 1; i >= k; i--) {\n\
    \    ans.push_back(arr[i]);\n  }\n  return ans;", "    // Write your code here\n\
    \    if (arr.size() < k) {\n        return {};\n    }\n    long min_element =\
    \ arr[0];\n    long index = 0;\n    std::vector<long> ans;\n    for (auto&& x\
    \ : arr) {\n        if (x > min_element) {\n            ans.push_back(min_element);\n\
    \            index++;\n        }\n        min_element = x;\n    }\n    return\
    \ ans;", "    // code here\n    if (k <= 0 || k > arr.size()) {\n        std::cout\
    \ << \"Invalid input!\" << std::endl;\n        return {};\n    }\n    std::vector<long>\
    \ res;\n    std::partial_sort(arr.begin(), arr.begin() + k, std::back_inserter(res));\n\
    \    return res;", "    if (k <= 0 || arr.size() == 0) return {};\n    std::partial_sort_copy(arr.begin(),\
    \ arr.begin() + k, arr.end(), arr.begin());\n    if (arr.size() == k) return arr;\n\
    \    if (arr.size() > k) k++;\n    return maximum(arr, k);", "    long start =\
    \ 0, end = 0, res = 0;\n    while (start < arr.size() && end < arr.size()) {\n\
    \        if (end - start <= k) {\n            for (long i = start; i < end; i++)\
    \ {\n                res = std::max(res, arr[i]);\n            }\n           \
    \ start = end;\n        } else {\n            for (long i = start; i < arr.size();\
    \ i++) {\n                if (arr[i] > arr[i + k]) {\n                    end\
    \ = i + 1;\n                } else {\n                    start = i;\n       \
    \             break;\n                }\n            }\n        }\n    }\n   \
    \ std::vector<long> resVec;\n    for (long i = start; i < arr.size(); i++) {\n\
    \        resVec.push_back(arr[i]);\n    }\n    return resVec;", "    assert(0\
    \ <= k && k <= arr.size());\n    std::vector<long> ans;\n    for (long i = 0;\
    \ i < k; i++) {\n        ans.push_back(arr[i]);\n    }\n    ans.push_back(k);\n\
    \    std::vector<long> ret(ans.begin(), ans.end());\n    std::sort(ret.begin(),\
    \ ret.end());\n    return ret;", "    long max = arr[0], max_index = 0;\n    for\
    \ (int i = 1; i < arr.size(); i++) {\n        if (arr[i] > max) {\n          \
    \  max = arr[i];\n            max_index = i;\n        }\n    }\n    std::vector<long>\
    \ ans(k);\n    ans[max_index] = max;\n    int cnt = 0;\n    for (int i = 1; i\
    \ < arr.size(); i++) {\n        if (arr[i] > ans[max_index]) {\n            ans[cnt++]\
    \ = arr[i];\n        }\n    }\n    return ans;", "\tassert(arr.size() <= 1000\
    \ && \"Array size should be in range\");\n\tassert(k <= arr.size() && \"Value\
    \ k should be less than array size\");\n\tstd::sort(arr.begin(), arr.end());\n\
    \tstd::partial_sort_copy(arr.begin(), arr.begin() + k, arr.end(), arr.begin());\n\
    \tstd::partial_sort_copy(arr.begin() + k, arr.end(), arr.end(), arr.begin() +\
    \ k);\n\treturn std::vector(arr);", "    std::vector<long> max_arr(k);\n    long\
    \ long max_num = 0, max_index = -1;\n    for(int i = 0; i < arr.size(); i++){\n\
    \        if(arr[i] >= 0 && arr[i] > max_num){\n            max_num = arr[i];\n\
    \            max_index = i;\n        }\n    }\n    for(int i = max_index; i< max_arr.size();\
    \ i++){\n        max_arr[i] = max_num;\n    }\n    \n    std::sort(max_arr.begin(),\
    \ max_arr.end());\n    return max_arr;", "    long long ans = 0;\n    for (long\
    \ i = 0; i < k; i++) {\n        std::nth_element(arr.begin(), arr.begin() + i,\
    \ arr.end());\n        ans = std::max(ans, arr[i]);\n    }\n    return std::vector<long>(arr.begin()\
    \ + k, arr.begin() + ans);", "    // your code goes here\n    std::vector<long>\
    \ maximumVector;\n    for(long i = 0; i < k; i++)\n    {\n        long maxElement\
    \ = arr[0];\n        for(long j = 0; j < arr.size(); j++)\n        {\n       \
    \     if(arr[j] > maxElement)\n            {\n                maxElement = arr[j];\n\
    \            }\n        }\n        maximumVector.push_back(maxElement);\n    }\n\
    \    return maximumVector;", "        long n = arr.size();\n        if (k > n)\
    \ k = n;\n        std::vector<long> maxKArr(k);\n        long currMax = arr[0],\
    \ startPos = 0;\n        long cnt = 0;\n        for(long i = 0; i < n; i++){\n\
    \            long val = arr[i];\n            long pos = 0;\n            long prevPos\
    \ = 0;\n            while (pos < k && (currMax < val || pos == 0)) {\n       \
    \         pos += 1;\n                val = arr[pos + 1];\n                pos\
    \ = 0;\n            }\n            maxKArr[cnt] = val;\n            cnt += 1;\n\
    \            currMax = maxKArr[cnt - 1];\n            startPos = i;\n        }\n\
    \        for(long i = 0; i < k; i++){\n            assert(startPos >= 0 && startPos\
    \ < n);\n            assert(maxKArr[i] <= arr[startPos + 1]);\n            assert(maxKArr[i]\
    \ <= arr[startPos]);\n        }\n        return maxKArr;\n    }\n\n    int main(){\n\
    \        std::ios::sync_with_stdio(false);\n        cin.tie(nullptr);\n      \
    \  cout.tie(nullptr);\n        // int testCases;\n        std::cin >> testCases;\n\
    \        while(testCases--){\n            std::vector<long> arr;\n           \
    \ std::vector<long> res = maximum( arr, testCases);\n            for(long i =\
    \ 0; i < res.size(); i++){\n                std::cout << res[i] << \" \";\n  \
    \          }\n            std::cout << std::endl;\n        }\n        return 0;\n\
    \    }\n\n    // #include<bits/stdc++.h>\n    // Given an array arr of integers\
    \ and a positive integer k, return a sorted list \n    // of length k with the\
    \ minimum k numbers in arr.\n    // Example 1:\n    // Input: arr = [3, -4, -5,\
    \ 2, 5], k = 2\n    // Output: [-5, -4, 2, 3]\n    // Example 2:\n    // Input:\
    \ arr = [5, 3, -4, -2, 0, 2], k = 1\n    // Output: [-2, 0, 3]\n    // Note:\n\
    \    // 1. The length of the array will be in the range of [1, 1000].\n    //\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n    //\
    \ 3. 0 <= k <= len(arr)\n    std::vector<long> minimum(std::vector<long> arr,\
    \ long k) {\n        long n = arr.size();\n        if (k > n) k = n;\n       \
    \ std::vector<long> minKArr(k);\n        long currMin = arr[0], startPos = 0;\n\
    \        long cnt = 0;\n        for(long i = 0; i < n; i++){\n            long\
    \ val = arr[i];\n            long pos = 0;\n            long prevPos = 0;\n  \
    \          while (pos < k && (currMin > val || pos == 0)) {\n                ",
  "    \n     std::vector<long> res;\n    \n    \n    long max_size = arr.size();\n\
    \    if(max_size < k){\n        return res;\n    }\n    // Create a vector with\
    \ k zeros, where each element denotes the maximum number of elements from arr\
    \ we have\n    std::vector<long> temp(max_size,0);\n    // Now the problem is\
    \ to solve the max subarray problem.\n    long cur_size = 0;\n    long max_idx\
    \ = 0;\n    while(cur_size < k){\n        if(temp[cur_size] > max_idx){\n    \
    \        max_idx = temp[cur_size];\n        }\n        cur_size ++;\n        //\
    \ If we have selected an element which is greater than max element in the array\n\
    \        // then we will update max_size to k and set temp[max_size] to max_idx\n\
    \        // This would help us get the max k elements after sorting the array\n\
    \        if(temp[max_size] > max_idx){\n            max_size = k;\n          \
    \  temp[max_size] = max_idx;\n        }\n    }\n    res.push_back(arr[max_idx]);\n\
    \    return res;", "    \n    // Your code here\n    std::vector<long> ans;\n\
    \    std::vector<long> tmp;\n    for (long i=0; i<arr.size();i++) {\n        if\
    \ (i>0) {\n            if (arr[i]>arr[i-1]) {\n                tmp.push_back(arr[i-1]);\n\
    \                ans.push_back(tmp.back());\n                tmp.pop_back();\n\
    \            }\n        }\n        tmp.push_back(arr[i]);\n        ans.push_back(tmp.back());\n\
    \        tmp.pop_back();\n    }\n    return ans;\n    ", "    std::vector<long>\
    \ arr1;\n    if (arr.size() <= k) {\n        return arr;\n    }\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        long pos = i;\n        for (int j = i;\
    \ j < arr.size(); j++) {\n            if (arr[j] < arr[pos]) {\n             \
    \   pos = j;\n            }\n        }\n        arr1.push_back(arr[pos]);\n  \
    \  }\n    return arr1;", "    // TODO\n    // 1. Write your code here\n    \n\
    \    std::sort(arr.begin(), arr.end());\n    return arr;", "  std::vector<long>\
    \ maximum;\n  if (arr.size() == 0)\n    return maximum;\n  if (arr.size() == 1)\n\
    \    return arr;\n  if (arr.size() >= k) {\n    std::vector<long> res = maximum(arr,\
    \ k);\n    maximum.reserve(res.size());\n    for (long i = 0; i < res.size();\
    \ i++)\n      maximum.push_back(std::max(arr[i], res[i]));\n    return maximum;\n\
    \  }\n  for (long i = 0; i < arr.size() - k; i++) {\n    std::vector<long> res\
    \ = maximum(arr, k);\n    maximum.reserve(res.size());\n    for (long j = 0; j\
    \ < res.size(); j++)\n      maximum.push_back(std::max(arr[i + j], res[j]));\n\
    \  }\n  long max = 0;\n  long maxIndex = 0;\n  for (long i = 0; i < maximum.size();\
    \ i++) {\n    if (maximum[i] > max) {\n      max = maximum[i];\n      maxIndex\
    \ = i;\n    }\n  }\n  std::nth_element(maximum.begin(), maximum.begin() + maxIndex,\
    \ maximum.end());\n  return maximum;", "    sort(arr.begin(), arr.end());\n  \
    \  std::vector<long> result;\n    for (int i = 0; i < k; i++) {\n        if (i\
    \ == 0) {\n            result.push_back(arr[i]);\n        } else if (arr[i] >\
    \ result[result.size() - 1]) {\n            result.push_back(arr[i]);\n      \
    \  }\n    }\n    result.push_back(arr[result.size() - 1]);\n    sort(result.begin(),\
    \ result.end());\n    return result;", "    \n    // Your code here\n    \n  \
    \  long n = (arr.size() * (arr.size() - 1)) / 2;\n    std::vector<long> arr1(n);\n\
    \    std::partial_sort_copy(arr.begin(), arr.begin() + k, arr1.begin(), arr1.end());\n\
    \    return arr1;", "    long max_so_far = arr[0];\n    std::vector<long> max_ending_here(arr.size());\n\
    \    std::vector<long> final_max_ending_here;\n\n    for (int i = 0; i < k; i++)\
    \ {\n        long curr_max = max_so_far;\n        for (auto it = max_ending_here.begin();\
    \ it != max_ending_here.end(); ++it) {\n            if (arr[i] > curr_max) {\n\
    \                curr_max = *it;\n            }\n        }\n        max_ending_here.push_back(curr_max);\n\
    \    }\n\n    for (auto it = max_ending_here.begin(); it != max_ending_here.end();\
    \ ++it) {\n        final_max_ending_here.push_back(*it);\n    }\n\n    return\
    \ final_max_ending_here;", "  std::vector<long> v;\n  for (int i = 0; i < k; i++)\
    \ {\n    v.resize(0);\n    for (int j = 0; j < arr.size(); j++) {\n      if (arr[j]\
    \ > arr[j + i]) {\n        v.resize(v.size() + 1, arr[j]);\n      } else if (arr[j]\
    \ >= v[v.size() - 1]) {\n        v.resize(v.size() + 1, arr[j]);\n      }\n  \
    \  }\n  }\n  return v;", "        long n = arr.size();\n        long cur = 0;\n\
    \        std::vector<long> ans;\n        while (cur < n) {\n                if\
    \ (cur + k <= n && arr[cur + k] > arr[cur]) {\n                        cur +=\
    \ k;\n                        ans.push_back(arr[cur]);\n                     \
    \   while (cur < n && arr[cur] > arr[cur + 1])\n                             \
    \   cur++;\n                } else {\n                        ans.push_back(arr[cur]);\n\
    \                        while (cur < n && arr[cur] < arr[cur + 1])\n        \
    \                        cur++;\n                }\n        }\n        return\
    \ ans;", "    // Your code here\n    int l = arr.size();\n    long maxElem = arr[0],\
    \ count = 1;\n    std::vector<long> maxList(l);\n    for(int i = 1; i < l; i++){\n\
    \        if(arr[i] > maxElem){\n            maxElem = arr[i];\n            count\
    \ = 1;\n        }\n        else if(arr[i] == maxElem)\n            count++;\n\
    \        if(count == k)\n            maxList.push_back(maxElem);\n    }\n    return\
    \ maxList;", "    std::vector<long> ret;\n    std::stack<long> st;\n    for(long\
    \ i = 0; i < arr.size(); ++i) {\n        if(st.empty() || st.top() < arr[i]) {\n\
    \            st.push(arr[i]);\n        }\n        else if(st.top() > arr[i]) {\n\
    \            ret.push_back(st.top());\n            st.pop();\n        }\n    \
    \    else if(st.top() == arr[i]) {\n            st.pop();\n        }\n    }\n\
    \    while(!st.empty()) {\n        ret.push_back(st.top());\n        st.pop();\n\
    \    }\n    std::reverse(ret.begin(), ret.end());\n    \n    ret.insert(ret.end(),\
    \ std::make_move_iterator(ret.begin()), std::make_move_iterator(ret.begin() +\
    \ k));\n    std::reverse(ret.begin(), ret.end());\n    return ret;", "    // Your\
    \ code here\n    std::vector<long> nums;\n    for(long i=0;i<arr.size();++i)\n\
    \    {\n        if(nums.size()==0)\n            nums.push_back(arr[i]);\n    \
    \    else if(nums.size()<=k)\n            nums.push_back(arr[i]);\n        else\n\
    \        {\n            long curMax=nums.back();\n            for(long j=0;j<k;j++)\n\
    \                if(curMax<arr[j])\n                    curMax=arr[j];\n     \
    \       nums.push_back(curMax);\n        }\n    }\n    for(long i=0;i<nums.size();++i)\n\
    \    {\n        for(long j=i+1;j<nums.size();j++)\n        {\n            if(nums[i]>nums[j])\n\
    \            {\n                long tmp=nums[i];\n                nums[i]=nums[j];\n\
    \                nums[j]=tmp;\n            }\n        }\n    }\n    return nums;",
  "    // Your code here\n    std::vector<long> max(k);\n    for(long i = 0; i < arr.size();\
    \ ++i){\n        if(max[max[0]] < arr[i]){\n            max[0] = i;\n        \
    \    max[1] = arr[i];\n        }\n        else if(max[0] < arr[i]){\n        \
    \    max[0] = i;\n        }\n        else if(max[1] > arr[i]){\n            max[1]\
    \ = arr[i];\n        }\n    }\n    return max;", "  std::sort(arr.begin(), arr.end());\n\
    \  std::vector<long> ret;\n  for (long i = 0; i < arr.size() - k + 1; i++) {\n\
    \    ret.resize(i + 1);\n    long l = arr[i];\n    for (int j = 0; j < i; j++)\
    \ {\n      if (arr[j] > l) {\n        l = arr[j];\n      }\n    }\n    ret[i]\
    \ = l;\n  }\n  return ret;", "    assert(arr.size() != 0);\n    assert(k != 0);\n\
    \    \n    long maximumValue = arr[0];\n    std::vector<long> subarray(arr.begin(),\
    \ arr.end());\n    subarray.pop_back();\n    \n    for(int i = 0; i <= k - subarray.size();\
    \ ++i) {\n        subarray.push_back(0);\n    }\n    \n    std::vector<long> ans;\n\
    \    for(long i = 0; i < subarray.size(); ++i) {\n        if(subarray[i] > maximumValue)\
    \ {\n            maximumValue = subarray[i];\n            ans.clear();\n     \
    \       for(long j = 0; j < i; ++j) {\n                ans.push_back(subarray[j]);\n\
    \            }\n        }\n        ans.push_back(maximumValue);\n    }\n    \n\
    \    return ans;", "    std::vector<long> max;\n    std::vector<long> arrSorted\
    \ = sort(arr);\n    long curMax = arrSorted[k - 1];\n    long max = arrSorted[0];\n\
    \    for (long i = 1; i < k; i++) {\n        curMax = arrSorted[i];\n        if\
    \ (curMax < max) {\n            max = curMax;\n        }\n    }\n    max.push_back(max);\n\
    \    return max;", "    long max_element = arr[0];\n    std::vector<long> max_list(arr.size());\n\
    \    for (int i = 0; i < k; i++) {\n        max_element = max(max_element, arr[i]);\n\
    \        max_list.push_back(max_element);\n    }\n    return max_list;", "   \
    \ // write your code here\n    std::map<long, long> mymap;\n    long max = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (mymap.find(arr[i]) !=\
    \ mymap.end()) {\n            mymap[arr[i]]++;\n            if (mymap[arr[i]]\
    \ > max) {\n                max = mymap[arr[i]];\n            }\n        } else\
    \ {\n            mymap[arr[i]] = 1;\n        }\n    }\n    std::vector<long> ans;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (mymap.find(arr[i]) !=\
    \ mymap.end()) {\n            if (mymap[arr[i]] == max) {\n                ans.push_back(arr[i]);\n\
    \            }\n        }\n    }\n    ans.push_back(-1);\n    return ans;"]
stop_tokens:
- "\n}"
