name: HumanEval_122_add_elements
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array of\
  \ integers arr and an integer k, return\n// the sum of the elements with at most\
  \ two digits from the first k elements of arr.\n// Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9],\
  \ k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <=\
  \ 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long> arr, long k)\
  \ {\n"
tests: "}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
  \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
  \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
  \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
  \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
  \ (1)) == (1));\n}\n"
completions: ["    long sum = 0;\n    long ans = arr[0] + arr[1];\n    for(int i =\
    \ 2; i < k; i++) {\n        sum += arr[i];\n        ans += arr[i];\n    }\n  \
    \  sum += arr[k];\n    return sum < ans ? sum : ans;", "    long s = 0;\n    long\
    \ sum = 0;\n    long sum2 = 0;\n    for (long i = 0; i < k; ++i) {\n        s\
    \ += arr[i];\n    }\n    for (long i = 1; i < k; ++i) {\n        if (arr[i] >\
    \ s) {\n            sum += arr[i];\n        } else if (arr[i] < s) {\n       \
    \     sum2 += arr[i];\n        } else {\n            sum += s;\n            sum2\
    \ += s;\n        }\n        s = arr[i];\n    }\n    if (sum2 > s) {\n        sum\
    \ += sum2;\n    } else if (sum2 < s) {\n        sum2 += sum;\n    }\n    return\
    \ sum;", "    long max_sum = arr[0] - 1;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (max_sum < arr[i] - 1) {\n            max_sum = arr[i] -\
    \ 1;\n        }\n    }\n    return max_sum;", "    // Your code here\n    \n \
    \   return sum;", "    assert(k <= arr.size());\n    long long sum = 0;\n    for\
    \ (int i = 1; i <= k; i++) {\n        sum += arr[i-1] % 10;\n    }\n    long long\
    \ ans = arr[0] + sum;\n    for (auto it=arr.begin()+1; it != arr.end(); it++)\
    \ {\n        ans -= *it % 10;\n    }\n    return ans;", "    // Your code here\n\
    \    long sum=0;\n    for(int i=0;i<k;i++){\n        sum+=arr[i];\n    }\n   \
    \ return sum;", "    // code here\n    if (arr.size() < k) {\n        return 0;\n\
    \    }\n    long sum = 0;\n    for (long i = 0; i < k; i++) {\n        sum +=\
    \ arr[i];\n    }\n    return sum;", "    // code here\n    // arr contains only\
    \ 0~99\n    // k contains only 0~99\n    long result = 0;\n    for (long i = 0;\
    \ i < k; i++) {\n        result += arr[i];\n    }\n    for (long i = k; i < arr.size();\
    \ i++) {\n        result += arr[i] - 10;\n    }\n    return result;", "    assert(arr.size()\
    \ >= k);\n    long res = 0;\n    for (size_t i = 0; i < arr.size(); i++) {\n \
    \       long cur = arr[i];\n        if (cur % 10 == 0) {\n            cur /= 10;\n\
    \            res += cur;\n        }\n        else if (cur % 10 != 0) {\n     \
    \       break;\n        }\n    }\n    for (size_t i = 0; i < arr.size() - k; i++)\
    \ {\n        if (arr[i] % 10 != 0) {\n            break;\n        }\n    }\n \
    \   return res + arr[arr.size() - k - 1];", "    long sum = 0;\n    long sum2\
    \ = 0;\n    for (long i = 0; i < k; i++) {\n        sum += arr[i];\n        sum2\
    \ += arr[i] * arr[i];\n    }\n    sum = sum % 10;\n    sum2 = sum2 % 10;\n   \
    \ return sum + sum2;", "    long ans = 0, sum = 0;\n    long max = (long) arr.size();\n\
    \    for(long i = k; i < max; i++) {\n        sum += arr[i];\n    }\n    ans +=\
    \ sum;\n    return ans;", "    long ans=0;\n    long sum=0;\n    long long sum2=0;\n\
    \    for( long i=0; i < k ; i++ ) {\n        sum += arr[i];\n        sum2 += arr[i]*arr[i];\n\
    \    }\n    for( long j=0; j < k ; j++ ) {\n        ans += (sum - sum2 + arr[j]*arr[j]*arr[j])\
    \ / arr[j];\n    }\n    return ans;", "    // code here\n    long sum = 0;\n \
    \   for(long i = k; i < arr.size(); i++)\n    {\n        sum += arr[i];\n    }\n\
    \    return sum;", "    long sum = 0;\n    for (long i = 0; i < k; i++) {\n  \
    \      if (arr[i] > 99)\n            sum += arr[i] - 100;\n        else if (arr[i]\
    \ < 10)\n            sum += arr[i];\n    }\n    return sum;", "    // write your\
    \ code here\n    long sum = 0;\n    for (int i = 0; i < k; i++) {\n        sum\
    \ += arr[i];\n    }\n    for (int i = k; i < arr.size(); i++) {\n        sum +=\
    \ arr[i] - '0';\n    }\n    return sum;", "\tassert(arr.size() >= k);\n\tstd::vector<long>\
    \ result(arr.size()-k);\n\tstd::partial_sum(arr.begin(), arr.begin() + k, result.begin());\n\
    \treturn std::accumulate(result.begin(), result.end(), 0L);", "    assert(k <=\
    \ arr.size());\n    std::partial_sum(arr.begin(), arr.begin() + k, std::back_inserter(arr));\n\
    \    return std::accumulate(arr.begin(), arr.begin() + k, 0ll);", "    long sum\
    \ = 0, sumOfTwoNumbers = 0;\n    for (int i = 0; i < k; i++) {\n        sum +=\
    \ arr[i];\n    }\n    if (sum >= 1000000000) {\n        sumOfTwoNumbers = sum\
    \ - 1000000000;\n        sum = sumOfTwoNumbers;\n    }\n    while (sumOfTwoNumbers\
    \ > 9) {\n        sumOfTwoNumbers = sumOfTwoNumbers / 10;\n        sum += sumOfTwoNumbers;\n\
    \    }\n    sum += sumOfTwoNumbers;\n    return sum;", "    // Your code here\n\
    \    long sum = 0, sum1 = 0, sum2 = 0;\n    long max_num = arr[0];\n    for (int\
    \ i = 1; i < arr.size(); i++) {\n        sum += arr[i];\n    }\n    for (int i\
    \ = 0; i < arr.size() - 1; i++) {\n        int j = i + 1;\n        while (j <\
    \ arr.size() && arr[i] < arr[j]) {\n            sum1 += arr[i];\n            sum2\
    \ += arr[j];\n            j++;\n        }\n        sum = sum1 + sum2;\n      \
    \  max_num = std::max(max_num, arr[i]);\n        if (sum >= k)\n            break;\n\
    \    }\n    return sum + max_num;", "    long sum = 0;\n    long sum2 = 0;\n \
    \   int len = arr.size();\n    long curr = 0, curr2 = 0;\n    for (int i = 0;\
    \ i < len; i++) {\n        if (curr2 < k) {\n            sum2 = curr2 + k;\n \
    \           curr2 = 0;\n        }\n        if (i < k) {\n            curr = arr[i]\
    \ - 1;\n        } else {\n            curr = arr[i];\n        }\n        sum +=\
    \ curr;\n        sum2 += sum2;\n    }\n    return sum;", "    assert(arr.size()\
    \ > 0);\n    assert(k <= arr.size());\n    long sum = 0;\n    for (long i = 0;\
    \ i < k; i++) {\n        if (i < arr.size() && arr[i] > 0)\n            sum +=\
    \ arr[i];\n    }\n    for (long i = 0; i < k; i++) {\n        if (i < arr.size()\
    \ && arr[i] > 0)\n            sum += arr[i];\n    }\n    return sum;", "    //\
    \ Your code here\n    long sum = 0;\n    for (int i = 0; i < k; i++) {\n     \
    \   sum += arr[i];\n    }\n    return sum;", "    long long result = 0;\n    //\
    \ The first k elements of arr have at most 2 digits.\n    // For each of the next\
    \ k elements, check if there are at least 3 elements of arr\n    // having at\
    \ most 2 digits.\n    // If there are more than 3 elements with at most 2 digits,\
    \ then add them.\n    for (long long i = 0; i < k; i++) {\n        if (i + 1 <\
    \ arr.size() && arr[i + 1] - arr[i] > 1) {\n            result += arr[i] - arr[i\
    \ + 1];\n            arr.erase(arr.begin() + i + 1);\n        }\n    }\n    //\
    \ If there are k elements with at most 2 digits from arr\n    // then add them\
    \ also\n    if (arr.size() > k) {\n        result += arr[k];\n    }\n    return\
    \ result;", "    int n = arr.size();\n    long sum = 0;\n    for (int i = 0; i\
    \ < k; i++) {\n        sum += arr[i];\n    }\n    for (int i = k; i < n; i++)\
    \ {\n        sum += arr[i] - arr[k - 1];\n    }\n    return sum;", "    // code\
    \ here\n    long sum = 0;\n    for(int i = 0; i < k; i++) {\n        int idx =\
    \ i;\n        while(idx > 0) {\n            assert(idx <= k);\n            sum\
    \ += arr[idx];\n            idx--;\n        }\n    }\n    return sum;", "    //\
    \ Your code here\n    long sum = 0;\n    for(auto n: arr)\n    {\n        sum\
    \ += n;\n        if(sum > 999)\n        {\n            sum -= 1000;\n        }\n\
    \        if(sum < 0)\n        {\n            sum += 1000;\n        }\n    }\n\
    \    return sum;", "  std::vector<long> arrCopy;\n  for(auto i:arr){\n    if(i>0){\n\
    \      arrCopy.push_back(i);\n    }\n  }\n  for(auto i : arrCopy){\n    if(i<=10){\n\
    \      arrCopy.push_back(i+10);\n    }\n  }\n  long sum = 0;\n  for (auto i :\
    \ arrCopy){\n    sum += i;\n  }\n  return sum;", "   if(k == 0)\n      return\
    \ arr[0];\n   long ans = 0;\n   for(long i = 0; i != k; ++i){\n      ans = arr[i]\
    \ + ans;\n   }\n   return ans;", "    std::vector<std::pair<long,long> > v;\n\
    \    long ans = 0;\n    for(auto i : arr) {\n        v.push_back(std::make_pair(i,i-k));\n\
    \    }\n    std::sort(v.begin(),v.end());\n    for(auto i = v.begin();i != v.end();\
    \ i++) {\n        if(*(i+1)->second > 2*(*i)->second) break;\n        ans += *(i+1)->first;\n\
    \        v.erase(i);\n    }\n    return ans;", "    long result = 0;\n    for\
    \ (long i = 0; i < k; ++i) {\n        result += arr[i];\n    }\n    std::sort(arr.begin(),\
    \ arr.end());\n    std::reverse(arr.begin(), arr.end());\n    for (long i = k;\
    \ i < arr.size(); ++i) {\n        result += arr[i] - arr[k];\n    }\n    return\
    \ result;", "    assert(arr.size() > 0);\n    assert(k <= arr.size());\n    long\
    \ result = 0;\n    int index = 0;\n    for( ; index < k ; ++index) {\n       \
    \ result += arr[index];\n    }\n    return result;", "    // code here\n    long\
    \ sum = 0;\n    for (int i = 0; i < k; i++) {\n        sum += arr[i];\n    }\n\
    \    for (int i = k; i < arr.size(); i++) {\n        if (arr[i] % 10 != 0) {\n\
    \            sum += arr[i];\n        }\n    }\n    return sum;", "  std::sort(arr.begin(),\
    \ arr.end());\n  long ans = 0;\n  for (long i = 0; i < k; i++) {\n    ans += arr[i];\n\
    \  }\n  for (long i = k; i < arr.size(); i++) {\n    ans += arr[i] - arr[k - 1];\n\
    \    arr.erase(arr.begin() + k);\n  }\n  return ans;", "  assert(k <= arr.size());\n\
    \  long sum = 0;\n  for (long i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n\
    \  std::sort(arr.begin(), arr.end());\n  sum -= arr[k];\n  return sum;", "   \
    \ // code here\n    // cout<<\"arr[\"<<0<<\"] = \"<<arr[0]<<endl;\n    // cout<<\"\
    arr[\"<<1<<\"] = \"<<arr[1]<<endl;\n    // cout<<\"arr[\"<<2<<\"] = \"<<arr[2]<<endl;\n\
    \    // cout<<\"arr[\"<<3<<\"] = \"<<arr[3]<<endl;\n    // cout<<\"arr[\"<<4<<\"\
    ] = \"<<arr[4]<<endl;\n    // cout<<\"arr[\"<<5<<\"] = \"<<arr[5]<<endl;\n   \
    \ // cout<<\"arr[\"<<6<<\"] = \"<<arr[6]<<endl;\n    // cout<<\"arr[\"<<7<<\"\
    ] = \"<<arr[7]<<endl;\n    // cout<<\"arr[\"<<8<<\"] = \"<<arr[8]<<endl;\n   \
    \ // cout<<\"arr[\"<<9<<\"] = \"<<arr[9]<<endl;\n    long sum = 0;\n    for(int\
    \ i = 0; i < k; i++) {\n        sum += arr[i];\n    }\n    return sum;", "   \
    \ // code here\n    int n = arr.size();\n    long sum = 0;\n    int i = 0;\n \
    \   for (; i < k; i++) {\n        sum += arr[i];\n    }\n    for (; i < n; i++)\
    \ {\n        sum -= arr[i];\n    }\n    return sum;", "    // Your code here\n\
    \    long long sum = 0;\n    long long temp = 0;\n    for (long i = 0; i < k;\
    \ i++) {\n        temp += arr[i];\n    }\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] > temp)\n            sum += arr[i] - temp;\n    \
    \    else\n            sum += temp + arr[i];\n    }\n    return sum;", "    std::priority_queue<long,\
    \ std::vector<long>, std::greater<long>> pq;\n    std::vector<long> vec;\n   \
    \ long sum = 0;\n    long n = arr.size();\n    for(int i = 0; i < n; i++) {\n\
    \        pq.push(arr[i]);\n        vec.push_back(0);\n    }\n    while(pq.size()\
    \ > 0) {\n        long value = pq.top();\n        pq.pop();\n        if (vec.size()\
    \ < k) vec.push_back(value);\n        else if ((vec.back() % 10 + value) % 10\
    \ > 0) {\n            sum += vec.back();\n            vec.push_back(value);\n\
    \        } else if (vec.back() % 10 < value % 10) {\n            vec.push_back(value);\n\
    \        } else {\n            sum += vec.back();\n            vec.push_back(value\
    \ % 10);\n        }\n    }\n    return sum;", "    // Your code goes here\n  \
    \  // sum is equal to 0\n    long sum = 0;\n    // First k elements are first\
    \ k digits of the sum\n    for (long i = 0; i < k; i++) {\n        sum += arr[i];\n\
    \    }\n    // If sum of first k digits is less than 10, then subtract them\n\
    \    if (sum < 10)\n        sum -= 10;\n    return sum;", "    // code here\n\
    \    return 0;", "    // code here\n    long s = 0;\n    long sum = 0;\n    for\
    \ (long i = 0; i < k; i++)\n    {\n        s += arr[i];\n    }\n    for (long\
    \ i = 0; i<k-1; i++)\n    {\n        sum += (arr[i] + arr[i+1])/2;\n    }\n  \
    \  return sum;", "    int sum = 0;\n    for (int i = 0; i < k; i++)\n    {\n \
    \       sum += arr[i];\n    }\n    return sum;", "  long sum = 0;\n  for (int\
    \ i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;", "    long sum\
    \ = 0;\n    for (long i = 0; i < k; i++) {\n        sum += arr[i];\n    }\n  \
    \  for (long i = k; i < arr.size(); i++) {\n        sum += arr[i] - 10;\n    }\n\
    \    return sum;", "    long ans = 0, sum = 0, n = arr.size();\n    for (int i\
    \ = 0; i < n; i++) {\n        sum += arr[i];\n        if (sum >= 10) {\n     \
    \       ans += sum - 10;\n            sum = 0;\n        }\n        if (sum > k)\
    \ {\n            ans += sum - k;\n            break;\n        }\n    }\n    return\
    \ ans;", "    long sum = 0;\n    long n = arr.size();\n    long max_len = k;\n\
    \    std::vector<long> ans;\n    std::vector<bool> visited(max_len, false);\n\
    \    for (long i = 0; i < n; i++) {\n        if (!visited[i] && arr[i] < 100000)\
    \ {\n            visited[i] = true;\n            sum += arr[i];\n            if\
    \ (max_len > 0) {\n                ans.push_back(sum);\n                max_len--;\n\
    \            }\n        }\n    }\n    return ans.empty() ? sum : ans[0];", " \
    \   \n    if (arr.size() == 0)\n        return 0;\n    if (k >= arr.size())\n\
    \        return arr[0] + arr[k];\n    \n    long ans = arr[0];\n    \n    long\
    \ sum = 0;\n    for (long i = 0; i < k; ++i)\n        sum += arr[i];\n    \n \
    \   for (long i = k; i < arr.size(); ++i) {\n        ans += sum - arr[i - k];\n\
    \        sum = sum - arr[i];\n    }\n    \n    return ans;", "    // Your code\
    \ here\n    long sum = 0;\n    std::vector<int> digits(arr.size());\n    long\
    \ sumOfDig;\n    int pos;\n\n    for (int i = 0; i < arr.size(); ++i) {\n    \
    \    // Get the digit of number arr[i]\n        pos = arr[i] / 10;\n        digits[i]\
    \ = arr[i] % 10;\n\n        // If arr[i] has more than 2 digits\n        if (digits[i]\
    \ - pos >= 2) {\n            // Add digit of arr[i] to sumOfDig\n            sumOfDig\
    \ += digits[i] - pos;\n\n            // If arr[i] has more than 2 digits then\
    \ we must add it first\n            sum += sumOfDig;\n\n            // Clear sumOfDig\
    \ and digits\n            sumOfDig = digits[i] = pos = 0;\n        }\n    }\n\n\
    \    // Add all digits except the last k, which sumOfDig is already added\n  \
    \  for (int i = arr.size() - k; i < arr.size(); ++i) {\n        sum += digits[i];\n\
    \    }\n\n    return sum;", "    long ans = 0;\n    // find the sum of the first\
    \ k elements of the array\n    for (long i = 0; i < k; i++)\n        ans += arr[i];\n\
    \    // add the rest of the elements of the array\n    for (long i = k; i < arr.size();\
    \ i++)\n        ans += arr[i];\n    return ans;", "    // Write your code here\n\
    \    // auto sum = arr[0] + arr[1] + arr[2];\n    long sum = 0;\n    for(long\
    \ i = 0; i<arr.size(); ++i){\n        if(i+1 == k){\n            sum += arr[i];\n\
    \        }\n        if(i != k && i+2 == k){\n            sum += arr[i];\n    \
    \    }\n    }\n    return sum;", "    long sum = 0;\n    long first = arr[0];\n\
    \    long rest = arr[0];\n    bool bFoundFirst = true;\n    for(long i = 1; i\
    \ < arr.size(); i++) {\n        if(arr[i] > first + 1) {\n            first++;\n\
    \            rest = arr[i];\n        } else {\n            if(first + 1 < first)\
    \ {\n                first++;\n            }\n            if(arr[i] > rest + 1)\
    \ {\n                rest = arr[i];\n            }\n        }\n    }\n    while(first\
    \ < k) {\n        sum += first;\n        bFoundFirst = true;\n        first++;\n\
    \        while(first < k && bFoundFirst) {\n            sum += first;\n      \
    \      bFoundFirst = false;\n            first++;\n        }\n    }\n    return\
    \ sum;", "  assert(k <= arr.size());\n  std::vector< std::pair<long, long> > v(arr.begin(),\
    \ arr.begin() + k);\n  // std::pair<long, long> stores two long values.\n  std::sort(v.begin(),\
    \ v.end());\n  // std::pair stores two long values.\n  long sum = 0;\n  for (std::pair<long,\
    \ long> i : v) {\n    sum += i.second;\n  }\n  return sum;", "    if(arr.size()\
    \ < k)\n        return 0;\n    long ans = 0;\n    // to find all elements with\
    \ k+1 digit\n    // and subtract elements with k-1 digit\n    for(long i = k;\
    \ i < arr.size(); i++) {\n        ans += arr[i] - arr[i-k];\n    }\n    return\
    \ ans;", "    long ans = 0;\n    for(auto i:arr){\n        ans = ans + i;\n  \
    \  }\n    ans = ans + arr[arr.size()-k];\n    return ans;", "    long sum = 0;\n\
    \    long count = 0;\n    std::vector<long> arrCopy = arr;\n    std::vector<long>::iterator\
    \ it;\n    it = std::max_element(arrCopy.begin(), arrCopy.end());\n    long maxElement\
    \ = *it;\n    arrCopy.erase(arrCopy.begin(), it);\n    for (size_t i = 0; i <\
    \ k; i++) {\n        for (size_t j = 0; j < arr.size(); j++) {\n            long\
    \ element = arr[j];\n            if (element > maxElement) {\n               \
    \ maxElement = element;\n            }\n        }\n        sum += maxElement;\n\
    \        arr.clear();\n        arr.push_back(maxElement);\n        count = 0;\n\
    \        for (size_t j = 0; j < arrCopy.size(); j++) {\n            long element\
    \ = arrCopy[j];\n            if (element > maxElement) {\n                arrCopy.erase(arrCopy.begin()\
    \ + j);\n                count++;\n            }\n        }\n        arrCopy.erase(arrCopy.begin(),\
    \ arrCopy.begin() + count);\n        maxElement = 0;\n    }\n    return sum;",
  "    long ans = 0;\n    auto first = std::begin(arr);\n    auto last = std::end(arr)\
    \ - 1;\n    long count = 0;\n    while (first != last && count < k) {\n      \
    \  ans += *first++;\n        count++;\n    }\n    while (first != last) {\n  \
    \      ans += *first++;\n        count++;\n    }\n    return ans;", "    // Your\
    \ code here\n    long sum = 0, start = 0, end = 0;\n    for (long i = 0; i < k;\
    \ i++){\n        start = arr.at(i);\n        end = arr.at(i + 1);\n        sum\
    \ += (end - start);\n    }\n    return sum;", "    long sum = 0;\n    long temp\
    \ = 0;\n    long cur = 0;\n    int count = 0;\n    for (int i = 0; i < k; i++)\
    \ {\n        cur += arr[i];\n        if (cur > 9) {\n            sum += cur /\
    \ 10;\n            temp = 0;\n            cur = 0;\n        }\n        else {\n\
    \            temp += cur;\n            sum += temp;\n        }\n        count++;\n\
    \    }\n    if (temp != 0) {\n        sum += temp;\n    }\n    return sum;", " \
    \   if (k > arr.size() || k < 1)\n        return 0;\n    long result = 0;\n  \
    \  for (long i = 0; i < k; i++)\n        result += arr[i];\n    for (long i =\
    \ k; i < arr.size(); i++)\n        result += arr[i];\n    return result;", " \
    \   // Write your code here\n    if(arr.size() <= k){\n        return 0;\n   \
    \ }\n    long sum = 0;\n    long sum2 = sum;\n    for(long i = 0; i < k; i++){\n\
    \        if(sum2 >= 10){\n            sum2 = sum2 - 10;\n            sum = sum\
    \ + sum2;\n        }\n        sum = sum + arr[i];\n        sum2 = sum + arr[i];\n\
    \    }\n    return sum;", "  // Write your code here.\n  assert(arr.size() !=\
    \ 0);\n  assert(k <= arr.size());\n  long sum = 0;\n  long max_elements = arr[0]\
    \ - 1;\n  for (auto i : arr) {\n    sum += i;\n    sum += (i >> max_elements);\n\
    \    max_elements -= 1;\n  }\n  return sum;", "    if (arr.size() <= k) {\n  \
    \      return 0;\n    }\n    std::vector<long> temp(arr.begin(), arr.begin() +\
    \ k);\n    long sum = 0;\n    long a = 0, b = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (i % 2 == 0) {\n            sum += arr[i];\n            a\
    \ = arr[i];\n        } else {\n            b = arr[i];\n            if (sum >\
    \ a + b) {\n                sum -= a + b;\n            } else if (sum < a + b)\
    \ {\n                sum += a + b;\n            }\n        }\n    }\n    return\
    \ sum;", "    // Your code here\n    std::vector<long> res(arr.size());\n    for(int\
    \ i=0; i<arr.size()-k; i++){\n        long sum=0;\n        for(int j=i; j<i+k;\
    \ j++){\n            sum += arr[j];\n        }\n        res[i] = sum;\n    }\n\
    \    return res[0];", "    long sum = 0;\n    long i = 0;\n    while (i + k <\
    \ arr.size()) {\n        sum += arr[i + k];\n        i++;\n    }\n    return sum;",
  "    // write your code here\n    std::vector<long> v;\n    v.push_back(arr[0]);\n\
    \    long sum = 0;\n    for(int i = 1 ; i < arr.size() ; i++) {\n        if(arr[i]\
    \ > v.back()) {\n            sum += v.back();\n            v.pop_back();\n   \
    \     }\n        if(arr[i] > v.back()+arr[i-1]) {\n            sum += arr[i] -\
    \ v.back();\n            v.pop_back();\n            v.push_back(arr[i]);\n   \
    \     }\n        else {\n            v.push_back(arr[i]);\n        }\n    }\n\
    \    return sum;", "    long ans = arr[0] + arr[1];\n    for (int i = 2; i < arr.size();\
    \ i++) {\n        ans += arr[i];\n        if (ans % 10 >= k) break;\n    }\n \
    \   return ans;", "    // Your code here\n    std::pair<long, long> max_elem(arr[0],\
    \ arr[0]);\n    long sum = 0;\n    for(auto i:arr) {\n        if(max_elem.second\
    \ < i) {\n            max_elem = std::make_pair(i, max_elem.second);\n       \
    \ }\n    }\n    for(auto i:arr) {\n        if(i >= k) break;\n        sum += i;\n\
    \        sum += max_elem.first;\n    }\n    return sum;", "    long sum = 0;\n\
    \    for (long i = 0; i <= arr.size()-k; i++) {\n        sum += arr[i];\n    }\n\
    \    return sum;", "    // your code goes here\n    std::map<long, long> m;\n\
    \    for (long i = 0; i < k; i++) {\n        long sum = 0;\n        for (long\
    \ j : arr) {\n            sum += j;\n        }\n        sum += arr[i];\n     \
    \   m[sum]++;\n    }\n    long sum = 0;\n    for (auto it = m.begin(); it != m.end();\
    \ it++) {\n        sum += it->first;\n    }\n    return sum;", "    if(k<1)\n\
    \        return 0;\n    \n    long sum = 0;\n    for(long i=0;i<k;i++) {\n   \
    \     sum += arr[i];\n    }\n    return sum;", "    // your code goes here\n \
    \   long sum = 0;\n    for(auto it = arr.begin();it!= arr.end();it++){\n     \
    \   if(it!= arr.begin() && it!= arr.begin() + k){\n            sum = sum + it;\n\
    \        }\n        else{\n            sum = sum + it;\n        }\n    }\n   \
    \ return sum;", "    long ans = 0;\n    // arr contains all elements greater than\
    \ or equal to k\n    for(int i = 0; i < k; i++) {\n        ans += arr[i];\n  \
    \  }\n    // Now arr contains elements less than or equal to k\n    for(int i\
    \ = k; i < arr.size(); i++) {\n        ans += arr[i];\n    }\n    return ans;",
  "        long ans = 0;\n        for (long i=0; i<k; i++) {\n                ans\
    \ += arr[i];\n        }\n        ans += k;\n        return ans;", "    long sum\
    \ = 0;\n    for (int i = 0; i < k; i++)\n        sum += arr[i];\n    for (int\
    \ i = k; i < arr.size(); i++)\n        sum += arr[i];\n    return sum;", "   \
    \ std::stack<long> stk;\n    long sum = 0;\n    for (long i = 0; i < k; i++) {\n\
    \        sum += arr[i];\n        while (stk.size() > 0 && sum < stk.top()) {\n\
    \            sum += stk.top();\n            stk.pop();\n        }\n        if\
    \ (stk.size() == 0) {\n            stk.push(arr[i]);\n        }\n    }\n    return\
    \ sum;", "  assert(arr.size() > k);\n  std::vector<long> elems;\n  for (long i\
    \ = 0; i < k; i++)\n    elems.push_back(arr[i]);\n  int size = elems.size();\n\
    \  long long sum = 0;\n  while (elems.size() > 0) {\n    int sum_size = size -\
    \ elems.size();\n    sum = sum + elems[sum_size];\n    elems.erase(elems.begin()\
    \ + sum_size);\n  }\n  return sum;", "    long sum = 0;\n    for(int i = k; i\
    \ < arr.size(); i++){\n        sum += arr[i];\n    }\n    return sum;", "    long\
    \ sum=0;\n    assert(arr.size()>0);\n    assert(k<=arr.size());\n    for(auto\
    \ i:arr){\n        assert(i>0);\n        if(i%10==0)\n            sum=sum+i;\n\
    \        else if(i%10>0)\n            sum=sum+i%10;\n        else\n          \
    \  sum=sum+i%10;\n        sum=sum+i;\n    }\n    if(k==arr.size())\n        return\
    \ sum;\n    else\n        return sum+arr[k];", "    assert(arr.size() <= 100);\n\
    \    assert(k <= arr.size());\n    long res = 0;\n    for (int i = 0; i < k; i++)\
    \ {\n        if (arr[i] % 10 == arr[i+1] % 10 && arr[i] % 10 != arr[i+1] % 10)\
    \ {\n            int tmp = arr[i];\n            arr[i] = arr[i+1];\n         \
    \   arr[i+1] = tmp;\n        }\n    }\n    for (auto &e: arr) {\n        res +=\
    \ e;\n    }\n    return res;", "    long sum = 0;\n    for (auto it=arr.begin();\
    \ it!=arr.begin()+k; ++it) {\n        sum += *it;\n    }\n    return sum;", " \
    \   long sum = 0;\n    long first = 0;\n    long second = arr[0] - 1;\n    for\
    \ (long i = 0; i <= k; i++) {\n        while (first + second > 100) {\n      \
    \      first = second;\n            second -= first;\n        }\n        while\
    \ (arr[first] + arr[second] > 100) {\n            first += 1;\n            second\
    \ += 1;\n        }\n        sum += (arr[first] + arr[second]);\n    }\n    return\
    \ sum;", "    // your code goes here\n    for(long i=0;i<k;i++)\n    {\n     \
    \   arr[i]+=arr[i+k-1];\n    }\n    return arr[0];", "    long sum=0;\n    for\
    \ (size_t i = 0; i < k; i++) {\n        sum += arr[i];\n    }\n    for (size_t\
    \ i = k; i < arr.size(); i++) {\n        sum += arr[i];\n    }\n    return sum;",
  "  // TODO: Write your code here\n  std::stack<bool> s;\n  long ans = 0;\n  for\
    \ (size_t i = 0; i < arr.size(); i++) {\n    if (s.empty() && arr[i] >= 10) {\n\
    \      s.push(false);\n    }\n    else if (s.top() && arr[i] >= 10) {\n      s.push(true);\n\
    \    }\n    else if (s.top() && !arr[i] % 10) {\n      s.push(false);\n    }\n\
    \    else if (!s.top() && !arr[i] % 10) {\n      s.push(true);\n    }\n    else\
    \ if (!s.empty() && !s.top() && arr[i] % 10 < arr[i + 1] % 10) {\n      s.push(false);\n\
    \    }\n    else if (!s.empty() && !s.top() && arr[i] % 10 > arr[i + 1] % 10)\
    \ {\n      s.push(true);\n    }\n    else if (!s.empty() && s.top() && !arr[i]\
    \ % 10 && !arr[i + 1] % 10) {\n      s.push(true);\n    }\n    else if (s.top()\
    \ && !arr[i] % 10 && !arr[i + 1] % 10 && s.top() == arr[i] % 10) {\n      s.push(false);\n\
    \    }\n    else if (s.top() && !arr[i] % 10 && !arr[i + 1] % 10 && !s.empty()\
    \ && s.top() == arr[i + 1] % 10) {\n      s.push(true);\n    }\n    else if (s.top()\
    \ && !arr[i] % 10 && !arr[i + 1] % 10 && !s.empty() && !s.top() && s.top() ==\
    \ arr[i] % 10) {\n      s.push(false);\n    }\n    else if (s.top() && !arr[i]\
    \ % 10 && !arr[i + 1] % 10 && !s.empty() && s.top() == arr[i + 1] % 10 && s.top()\
    \ == arr[i] % 10) {\n      s.push(true);\n    }\n    else {\n      s.push(true);\n\
    \    }\n    ans+= arr[i];\n  }\n  return ans;", "    \n    long sum = 0;\n   \
    \ \n    for(long i = 0; i < k; ++i){\n        sum += arr[i];\n    }\n    \n  \
    \  for(long i = k; i < arr.size(); ++i){\n        sum += arr[i] - 10;\n    }\n\
    \    \n    return sum;", "    long sum = 0;\n    int size = arr.size();\n    int\
    \ max_size = k-1;\n\n    assert(size <= max_size);\n    for (int i=0; i<size;\
    \ i++) {\n        sum += arr[i];\n        if (sum>=10) {\n            sum -= 10;\n\
    \        }\n    }\n    return sum;", "    // Your code here\n    long sum = 0;\n\
    \    for (int i = 1; i < k; ++i) {\n        sum += arr[i];\n    }\n    return\
    \ sum;", "    // code here\n    std::sort(arr.begin(),arr.end());\n    long sum=0;\n\
    \    long ans=0;\n    long cur=0;\n    for(int i=0; i<k; ++i) {\n        cur+=arr[i];\n\
    \        if(cur>9) {\n            ans+=cur%10;\n            cur/=10;\n       \
    \ }\n    }\n    return ans%10;", "    long res = 0;\n    for (long i = 0; i <\
    \ k; i++) {\n        res += arr[i];\n    }\n    if (k == arr.size()) {\n     \
    \   res = arr[k];\n    }\n    return res;", "  assert(arr.size() <= 10000);\n\
    \  assert(k <= arr.size());\n  long sum = 0;\n  long sum2 = 0;\n  for (long i\
    \ = 0; i < (long)arr.size(); i++) {\n    // cout << arr[i] << endl;\n    if (arr[i]\
    \ % 10 == 0) {\n      sum = sum + arr[i];\n    } else {\n      sum2 = sum2 + arr[i];\n\
    \    }\n  }\n  return sum2 + sum;", "    assert(arr.size() > 0);\n    assert(k\
    \ <= arr.size());\n    long ans = 0;\n    long size = arr.size();\n    long sum\
    \ = 0;\n    long sum2 = 0;\n    long left = 0;\n    long right = 0;\n    long\
    \ sum3 = 0;\n    long sum4 = 0;\n    long sum5 = 0;\n    long sum6 = 0;\n    long\
    \ sum7 = 0;\n    long sum8 = 0;\n    long sum9 = 0;\n\n    for (long i = 0; i\
    \ < size; i++) {\n        sum += arr[i];\n        sum2 += arr[i] * arr[i];\n \
    \       sum3 += arr[i] * arr[i] * arr[i];\n        sum4 += arr[i] * arr[i] * arr[i]\
    \ * arr[i];\n        sum5 += arr[i] * arr[i] * arr[i] * arr[i] * arr[i];\n   \
    \     sum6 += arr[i] * arr[i] * arr[i] * arr[i] * arr[i] * arr[i];\n        sum7\
    \ += arr[i] * arr[i] * arr[i] * arr[i] * arr[i] * arr[i] * arr[i];\n        sum8\
    \ += arr[i] * arr[i] * arr[i] * arr[i] * arr[i] * arr[i] * arr[i] * arr[i];\n\
    \        sum9 += arr[i] * arr[i] * arr[i] * arr[i] * arr[i] * arr[i] * arr[i]\
    \ * arr[i] * arr[i] * arr[i];\n    }\n    while (k >= 1) {\n        ans = sum\
    \ + sum2;\n        k = k / 10;\n        sum += sum3;\n        sum2 += sum4 * k;\n\
    \        sum3 += sum5 * k;\n        sum4 += sum6 * k;\n        sum5 += sum7 *\
    \ k;\n        sum6 += sum8 * k;\n        sum7 += sum9 * k;\n        sum8 += sum;\n\
    \n        while (sum >= k) {\n            ans = sum + sum2;\n            k = k\
    \ / 10;\n            sum += sum3;\n            sum2 += sum4 * k;\n           \
    \ sum3 += sum5 * k;\n            sum4 += sum6 * k;\n            sum5 += sum7 *\
    \ k;\n            sum6 += sum8 * k;\n            sum7 += sum9 * k;\n         \
    \   sum8 += sum;\n        }\n    }\n    return ans;", "    // code here\n    long\
    \ sum = 0;\n    int counter = 0;\n    long firstSum = 0;\n    long secondSum =\
    \ 0;\n    long thirdSum = 0;\n    // for (int i = 0; i < k; i++)\n    // {\n \
    \   // sum += arr[i];\n    // }\n    for (long &element : arr) {\n        sum\
    \ += element;\n        if (counter % 3 == 0) {\n            firstSum = sum - firstSum;\n\
    \            sum += firstSum;\n            secondSum = sum - secondSum;\n    \
    \        sum += secondSum;\n            thirdSum = sum - thirdSum;\n         \
    \   sum += thirdSum;\n        }\n        counter++;\n    }\n    return sum;",
  "    long ans = 0, n = arr.size(), i = 0;\n    for (; i < k; i++) {\n        ans\
    \ += arr[i];\n    }\n    while(i != n) {\n        ans += arr[i++];\n    }\n  \
    \  return ans;", "    long sum = 0;\n    for (long i = 0; i < k; i++) {\n    \
    \    sum += arr[i];\n    }\n    long count = 0;\n    for (long i = k; i < arr.size();\
    \ i++) {\n        if (i % 10 > 0) {\n            sum += arr[i - 10];\n       \
    \     count++;\n        }\n        sum += arr[i];\n        count++;\n    }\n \
    \   return sum;", "    int len = arr.size();\n    long ans = 0;\n    if (k >=\
    \ len) {\n        return 0;\n    }\n    for (int i = k; i < len; i++) {\n    \
    \    ans += arr[i];\n    }\n    return ans;", "    long ans = 0;\n    long x =\
    \ 0, y = 0, n = 0;\n    for (long i = 0; i < k; i++) {\n        n = 0;\n     \
    \   x = arr[i];\n        while (x > 0) {\n            y = (x % 10 + y % 10) %\
    \ 10;\n            n++;\n            x = (x / 10 + n % 10) % 10;\n        }\n\
    \        ans += arr[i];\n        if (n == 2) {\n            ans += y;\n      \
    \  }\n    }\n    return ans;", "    long sum = 0;\n    // To store the values\
    \ already added\n    std::vector<long> used;\n    long maxValue = arr[0];\n  \
    \  // To store the values which need not be added\n    std::vector<long> unadded;\n\
    \    // To store the position of elements with max sum\n    std::vector<int> maxIndex;\n\
    \    for (long i = 1; i < arr.size(); ++i) {\n        if (maxValue + arr[i] <=\
    \ maxValue) continue;\n        used.push_back(0);\n        unadded.push_back(arr[i]);\n\
    \        maxIndex.push_back(i);\n        maxValue = maxValue + arr[i];\n    }\n\
    \    long curMaxSum = 0;\n    for (int i = 1; i < arr.size(); ++i) {\n       \
    \ long tempSum = maxValue;\n        long curMaxSumWithGivenElements = 0;\n   \
    \     for (int j = 0; j < k; ++j) {\n            if (used.at(j)) {\n         \
    \       long value = arr[j];\n                tempSum = tempSum - value;\n   \
    \             curMaxSumWithGivenElements = curMaxSumWithGivenElements + value;\n\
    \            }\n        }\n        if (tempSum > 0 && curMaxSumWithGivenElements\
    \ > 0) {\n            used.push_back(0);\n            unadded.push_back(arr[i]);\n\
    \            maxIndex.push_back(i);\n            maxValue = tempSum;\n       \
    \     curMaxSum = 0;\n        } else if (tempSum < 0 && curMaxSumWithGivenElements\
    \ < 0) {\n            used.push_back(0);\n            unadded.push_back(arr[i]);\n\
    \            maxIndex.push_back(i);\n            maxValue = tempSum;\n       \
    \     curMaxSum = 0;\n        } else {\n            if (tempSum > curMaxSum) {\n\
    \                curMaxSum = tempSum;\n            }\n        }\n    }\n    //\
    \ Return the sum\n    for (long i = 0; i < unadded.size(); ++i) {\n        sum\
    \ += unadded[i];\n    }\n    return sum;", "    long ans = 0;\n    long sum =\
    \ 0;\n    for(long i = k;i >= 0;i--) {\n        sum += arr[i];\n        if((int)sum\
    \ % 10 == (sum - sum % 10) / 10)\n            ans++;\n    }\n    return ans;",
  "    // write your code here\n    long sum = 0;\n    int size = arr.size();\n  \
    \  if (size >= k) {\n        for (int i = 0; i < size; i++) {\n            sum\
    \ += arr[i];\n            if (sum < 100) {\n                sum += 100;\n    \
    \        }\n        }\n        return sum;\n    }\n    for (int i = 0; i < size;\
    \ i++) {\n        sum += arr[i];\n        if (sum < 100) {\n            sum +=\
    \ 100;\n        }\n    }\n    return sum;", "\tassert(arr.size() > 0 && k > 0\
    \ && k <= arr.size());\n\tlong ans = 0;\n\tassert(k > 0);\n\tassert(arr.size()\
    \ > 0);\n\tstd::vector<long>::iterator it;\n\tfor (it = arr.begin() + k; it !=\
    \ arr.end(); ++it) {\n\t\tassert(it != arr.begin());\n\t\tif (*it < 0) {\n\t\t\
    \tassert(it->size() > 0);\n\t\t\tans += *it * (*it) / 10;\n\t\t\tans += *it /\
    \ 10;\n\t\t}\n\t\telse {\n\t\t\tans += *it;\n\t\t}\n\t}\n\treturn ans;", "   \
    \ long sum = 0;\n    long carry = 0, sum1 = 0, sum2 = 0;\n    \n    for (int i\
    \ = 0; i < k; i++) {\n        carry += arr[i];\n        sum1 += carry / 10;\n\
    \        sum2 += carry % 10;\n        carry = sum1 / 10;\n        sum1 = sum1\
    \ % 10;\n    }\n    sum += sum2;\n    return sum;", "    // code here\n    long\
    \ sum = 0;\n    for (size_t i = 0; i < k; i++) {\n        sum += arr[i];\n   \
    \ }\n    return sum;", "    // code here\n    long sum = 0;\n    long pos = 0;\n\
    \    while (pos < k) {\n        sum += arr[pos];\n        pos += 1;\n    }\n \
    \   return sum;", "    // Your code here\n    long ans = 0, sum = 0;\n    for(int\
    \ i = 0; i < k; i++)\n        sum += arr[i];\n    for(int i = 0; i < arr.size();\
    \ i++)\n        if(sum - arr[i] <= 0)\n            ans += sum - arr[i];\n    return\
    \ ans;", "    // Your code goes here\n    // long sum = 0;\n    // for(int i=0;\
    \ i < k; ++i) {\n    //    sum += arr[i];\n    // }\n    // return sum;\n    return\
    \ std::accumulate(arr.begin(), arr.begin() + k, 0);", "    long ans = 0;\n   \
    \ long sum = 0;\n    long ans1 = 0, ans2 = 0;\n    assert(arr.size() > 0 && k\
    \ <= arr.size());\n    for (auto i : arr) {\n        ans += i;\n        sum +=\
    \ i;\n        ans1 = ans;\n        ans2 = sum;\n        ans += ans2;\n       \
    \ if (k % 2 == 0 && ans == ans1) return ans2;\n        if (k % 2 != 0 && ans ==\
    \ ans1) return ans2;\n        if (k % 2 == 0 && ans == ans2) return ans1;\n  \
    \      if (k % 2 != 0 && ans == ans2) return ans1;\n        if (k % 2 == 0 &&\
    \ ans == ans2) return ans1;\n        if (k % 2 != 0 && ans == ans2) return ans1;\n\
    \    }\n    return ans;", "    long ans = 0, sum = 0;\n    for (auto x: arr)\n\
    \        sum += x;\n    for (auto x: arr) {\n        if (sum > 9)\n          \
    \  sum += x-9 + '0';\n        else\n            sum += x;\n    }\n    for (long\
    \ i = 0; i < k; i++) {\n        long curr = sum;\n        long last = 0;\n   \
    \     for (auto x: arr)\n            if (x > curr && x > last) {\n           \
    \     last = x;\n                curr -= x;\n            }\n    }\n    return\
    \ ans;", "    // Your code goes here\n    if (arr.size() == 0 || k == 0) {\n \
    \       return 0;\n    }\n    \n    \n    std::vector<long> arr1(arr);\n    long\
    \ sum = 0;\n    long m = 1;\n    long count = 0;\n    \n    for (long i = 0; i\
    \ < k; i++) {\n        \n        while (arr1[i] % 10 == 0) {\n            sum+=arr1[i]/10;\n\
    \            arr1[i]=arr1[i]%10;\n            count++;\n        }\n        arr1[i]=arr1[i]*10;\n\
    \        \n    }\n    \n    for (long i = 0; i < arr.size(); i++) {\n        sum+=arr[i];\n\
    \    }\n    \n    return sum+count;", "    long ans = 0;\n    long sum = 0;\n\n\
    \    for (int i = 0; i < k; i++) {\n        sum += arr[i];\n    }\n\n    for (auto\
    \ val : arr) {\n        sum += val;\n        if (sum % 10 == 0) sum -= 10;\n \
    \   }\n\n    while (sum > 0) {\n        ans += sum % 10;\n        sum /= 10;\n\
    \    }\n    return ans;", "    long ans = 0;\n    int len = arr.size();\n    std::vector<long>::iterator\
    \ itr = arr.begin();\n    std::vector<long>::iterator itr2 = itr + k;\n    for\
    \ (; itr != itr2; itr++) {\n        long cur = *itr;\n        long sum = 0;\n\
    \        while (cur > 0) {\n            sum += (cur % 10);\n            cur /=\
    \ 10;\n        }\n        ans += sum;\n    }\n    return ans;", "        long\
    \ result = 0, l = 0, h = arr.size() - 1;\n        while(l <= h) {\n          \
    \  long mid = (l + h) / 2;\n            if(arr[mid] < 10) {\n                result\
    \ += arr[mid];\n                h = mid - 1;\n            }\n            else\
    \ {\n                result += 10 + arr[mid];\n                l = mid + 1;\n\
    \            }\n        }\n        return result;", "    if(k == 1) return arr[0]\
    \ + arr[1];\n    long sum = 0;\n    for(long i = 0; i < k; ++i) {\n        sum\
    \ += arr[i];\n    }\n    return sum + add_elements(arr, k - 1);", "    long long\
    \ ans = 0;\n    for (auto &elem : arr) {\n        ans += elem * (elem / 10);\n\
    \    }\n    ans *= k;\n    return ans;", "    long ans = arr[0] + arr[1];\n  \
    \  for(size_t i = 2; i < k; i++) {\n        ans += arr[i];\n    }\n    return\
    \ ans;", "    int sum = 0;\n    long sum2 = 0;\n    for (int i = 0; i < k; i++)\
    \ {\n        int elem = arr[i];\n        sum += elem;\n    }\n\n    for (int j\
    \ = k; j < arr.size(); j++) {\n        int elem = arr[j];\n        sum2 += elem;\n\
    \        if (sum2 % 10 == 0) {\n            sum += sum2;\n            sum2 = 0;\n\
    \        }\n    }\n    if (sum2 != 0) {\n        sum += sum2;\n    }\n    return\
    \ sum;", "    // Your code here\n    long sum = 0;\n    for(long i=0;i<k;i++)\n\
    \    {\n        sum = sum + arr[i];\n    }\n    return sum;", "    // code here\n\
    \    long sum = 0;\n    long long n = arr.size();\n    if(k > n || k > 100) return\
    \ 0;\n    for(long i = 0; i < k; i++) {\n        sum += arr[i];\n    }\n    \n\
    \    for(long i = 1; i < n; i++) {\n        if(arr[i] > sum) {\n            sum\
    \ += arr[i];\n        }\n    }\n    return sum;", "    if(arr.size() < k) throw\
    \ std::runtime_error(\"Invalid input length\");\n    long ans = 0, sum = 0, digit\
    \ = 0, temp_digit = 0;\n    for(int i = 0; i < k; i++){\n        temp_digit =\
    \ arr[i] - '0';\n        sum += temp_digit;\n        if(sum > 9)\n           \
    \ sum -= 10;\n        if(digit == 0){\n            digit = temp_digit;\n     \
    \   }else if(digit == temp_digit){\n            ans += digit;\n            digit\
    \ /= 10;\n        }else{\n            ans += digit * 10 + temp_digit;\n      \
    \      digit = 0;\n        }\n    }\n    if(digit != 0){\n        ans += digit\
    \ * 10;\n    }\n    return ans;", "    long sum = 0;\n    if (k >= arr.size())\n\
    \        return sum;\n\n    for (long i = 0; i < arr.size() - k; i++) {\n    \
    \    long left = arr[i];\n        long right = 0;\n        for (long j = i + k;\
    \ j < arr.size(); j++)\n            right += arr[j];\n\n        if (left > right)\
    \ {\n            sum += left;\n            sum += right;\n        } else {\n \
    \           sum += right;\n            sum += left;\n        }\n    }\n    return\
    \ sum;", "    // your code here\n    long long ans = 0;\n    long long max = 0;\n\
    \    long long sum = 0;\n    long long x = 0;\n    long long y = 0;\n    for(int\
    \ i = 0; i < k; i++)\n        sum += arr[i];\n    while(sum > 0) {\n        x\
    \ = sum % 10;\n        sum = sum / 10;\n        if(max < x - 1) {\n          \
    \  max = x - 1;\n        }\n        y = sum % 10;\n        sum = sum / 10;\n \
    \       if(max < y - 1) {\n            max = y - 1;\n        }\n        ans =\
    \ ans + max;\n    }\n    return ans;", "        long sum = 0;\n        for(int\
    \ i=0;i<k;i++){\n            sum += arr[i];\n        }\n        return sum;",
  "    long ans = 0;\n    sort(arr.begin(), arr.end());\n    for (long i = 0; i <\
    \ k; i++)\n        ans += arr[i];\n    return ans;", "    // write your code here\n\
    \    long sum = arr[0] + arr[1];\n    for(int i = 2; i < k; i++){\n        sum\
    \ += arr[i];\n    }\n    return sum;", "    assert(k <= arr.size());\n    long\
    \ sum = 0;\n    long max = 0;\n    for (long i = 1; i <= arr.size(); i++) {\n\
    \        if (max < arr[i-1])\n            max = arr[i-1];\n        if (arr[i-1]\
    \ <= max)\n            sum += arr[i-1];\n    }\n    return sum;", "    // write\
    \ your code here\n    long sum = 0;\n    if(k == 0 || arr.size() < k) return 0;\n\
    \    long start = 0;\n    long end = k;\n    while(start < arr.size() && end <\
    \ arr.size()) {\n        sum += arr[start] + arr[end];\n        start += 2;\n\
    \        end += 2;\n    }\n    return sum;", "    long sum = 0;\n    assert(k\
    \ <= arr.size());\n    for (auto i : arr) {\n        assert(i > 0);\n        assert(i\
    \ <= 9);\n        sum += i * (i + 1) >> 1;\n        if (sum > k) {\n         \
    \   sum = sum - k;\n            sum += i - k;\n        }\n    }\n    return sum;",
  "    long sum = 0;\n    std::vector<long> result;\n    for(int i=0; i<k; i++) {\n\
    \        sum += arr[i];\n        if(sum > 9) {\n            sum -= 10;\n     \
    \   } else {\n            result.push_back(sum);\n            sum = 0;\n     \
    \   }\n    }\n    for(auto i:result) {\n        sum += i;\n    }\n    return sum;",
  "    long long sum = 0;\n    long long ans = 0;\n    for(int i = 0; i< k; i++){\n\
    \        sum += arr[i];\n    }\n    ans = sum % 10;\n    for(int i = 0; i< k;\
    \ i++){\n        if(arr[i]<10){\n            ans += arr[i] - 10;\n        }\n\
    \    }\n    return ans;", "    // write your code here\n    int cnt = 0;\n   \
    \ int sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        if (i >= k)\
    \ {\n            cnt += 2;\n            sum -= arr[i - k];\n        }\n      \
    \  if (cnt >= 2) {\n            sum += arr[i];\n            cnt -= 2;\n      \
    \  }\n    }\n    return sum;", "    sort(arr.begin(), arr.end());\n    long sum\
    \ = 0;\n    long a = arr[k];\n    for (long i = 0; i < k; i++) {\n        sum\
    \ += arr[i];\n    }\n    sum -= a;\n    return sum;", "    // Write your code\
    \ here\n    // Your code here\n    return -1LL;", "  std::stack<long> sum;\n \
    \ sum.push(arr[0]);\n  long sum = arr[0];\n  for (long i = 1; i < k; i++) {\n\
    \    long elem = arr[i];\n    sum += elem;\n    while (sum >= 10) {\n      sum\
    \ -= 10;\n      sum.push(sum % 10);\n    }\n    sum.push(elem);\n  }\n  while\
    \ (!sum.empty()) {\n    sum += sum.top();\n    sum.pop();\n  }\n  return sum;",
  "    // sum of 21 + 3\n    long sum = 0;\n    // find the sum of 21 + 3\n    for\
    \ (size_t i = 0; i < k; i++) {\n        sum += arr[i];\n    }\n    return sum;",
  "    long sum = 0;\n    // Traverse in increasing order and add element if length\
    \ is less than or equal to k\n    for (long i = k; i < arr.size(); i++) {\n  \
    \      sum += arr[i];\n    }\n    return sum;", "  int sum = 0;\n  long max =\
    \ 0;\n  for (long i = 0; i < k; i++) {\n    sum += arr[i];\n    max = max(max,\
    \ arr[i]);\n  }\n  return sum + max;", "    // code here\n    long sum = 0;\n\
    \    for(long i = 0; i<arr.size(); i++) {\n        if(i >= k) {\n            sum\
    \ += arr[i];\n        }\n    }\n    return sum;", "    long sum = 0;\n    for(int\
    \ i=0;i<k;i++){\n        sum+=arr[i];\n    }\n    return sum;", "    long ans\
    \ = 0;\n    for (int i = k; i < arr.size(); i++) {\n        ans += arr[i] - '0';\n\
    \    }\n    return ans;", "    long ans=0, sum=0;\n    for( int i=0; i<k; ++i){\n\
    \        sum+=arr[i];\n        if(sum%10==1){\n            ans+=sum;\n       \
    \     sum=0;\n        }\n    }\n    if(sum!=0)\n        ans+=sum;\n    return\
    \ ans;", "    long ans = 0;\n    long sum = 0;\n    for(auto it = arr.begin()+k;\
    \ it != arr.end(); it++)\n    {\n        if(it->size()>2)\n            sum +=\
    \ *it;\n    }\n    ans = sum;\n    return ans;", "    long s = 0;\n    long sum\
    \ = 0;\n    for (int i = 0; i < k; ++i) {\n        if (i != 0) {\n           \
    \ sum += arr[i];\n        } else {\n            sum += arr[i];\n        }\n  \
    \  }\n    for (int i = k; i < arr.size(); ++i) {\n        if (i != 0) {\n    \
    \        s += arr[i] - sum;\n        } else {\n            s += arr[i];\n    \
    \    }\n    }\n    return s;", "    if(k >= arr.size()) return 0;\n    // arr[k]\
    \ % 10 is equal to k % 10, therefore k % 10 == 0\n    // arr[k] % 10 == k % 10\
    \ ? true : false => k / 10 == k % 10\n    // because if k / 10 == k % 10, then\
    \ k is equal to arr[k] % 10\n    return arr[k] / 10 + add_elements(arr, k / 10);",
  "  int len = arr.size();\n  long sum = 0;\n  for (int i = 1; i <= len; i++) {\n\
    \    if (k <= i) {\n      sum += arr[i-1];\n      k--;\n    }\n    else {\n  \
    \    sum += arr[i] - arr[i-1] + arr[i-1];\n      k -= i;\n    }\n  }\n  return\
    \ sum;", "  // Your code goes here\n  long result = 0;\n  for (int i = 0; i <\
    \ k; i++) {\n    for (int j = i + 1; j < k; j++) {\n      result += arr[i] + arr[j];\n\
    \    }\n  }\n  return result;", "    long sum = 0;\n    size_t len = arr.size();\n\
    \    assert(k <= len);\n    for (size_t i = 0; i < k; ++i)\n        sum += arr[i];\n\
    \    for (size_t i = k; i < len; ++i)\n        sum += arr[i] - 10 + arr[i-k];\n\
    \    return sum;", "    int sum = 0;\n    // We will use a stack to store all\
    \ the elements with at most two digits in front of the k'th element.\n    std::stack<long>\
    \ s;\n    for (int i = 0; i < k; i++) {\n        s.push(arr[i]);\n    }\n\n  \
    \  while (!s.empty()) {\n        sum += s.top();\n        s.pop();\n    }\n  \
    \  return sum;", "    int ans = 0;\n    int n = arr.size();\n    for (int i =\
    \ 0; i < k; i++)\n        ans += arr[i];\n    for (int i = k; i < n; i++)\n  \
    \      ans += arr[i] - arr[i-k];\n    return ans;", "  assert(arr.size() > 0);\n\
    \  assert(k <= arr.size());\n\n  // Keep summing digits while we only have 2 digits\
    \ left.\n  long result = 0;\n  for (int i = 0; i < k; ++i) {\n    result += arr[i];\n\
    \  }\n\n  // Now sum until we run out of digits.\n  for (int i = k; i < arr.size();\
    \ ++i) {\n    result += arr[i] - '0';\n  }\n\n  return result;", "    long sum\
    \ = 0;\n    long long sum1 = 0, sum2 = 0;\n    // sort the array\n    std::sort(arr.begin(),\
    \ arr.end());\n    // use 2 pointers, one for checking and one for adding.\n \
    \   long long cur = 0, sum3 = 0, sum4 = 0;\n    for (long i = 0; i < k; i++)\n\
    \    {\n        if (sum1 < cur)\n        {\n            sum3 = sum2;\n       \
    \     sum4 = sum1;\n        }\n        sum1 += arr[i];\n        sum2 += sum3;\n\
    \        sum3 += arr[i];\n        sum4 += sum4;\n        cur = sum1;\n    }\n\
    \    return sum4;", "        auto it = arr.begin();\n        std::sort(it, arr.end());\n\
    \        long long sum = 0;\n        while (it != arr.end() && it != arr.begin()\
    \ + k && it != arr.end()) {\n                sum += *it++;\n        }\n      \
    \  return sum;", "    // code here\n    long ans=0;\n    for(int i=0;i<k;i++){\n\
    \        ans += arr[i];\n    }\n    return ans;", "    long sum = 0;\n    // To\
    \ avoid overflow in mod 2 operation, we need a bignum library.\n    std::bitset<200>\
    \ bs;\n    // Loop through the first k elements in the array and add mod 2 to\n\
    \    // the sum variable. Also add the first k+1 elements in the array to the\
    \ sum variable.\n    for (long i = 0; i < k; i++) {\n        sum += arr[i];\n\
    \        bs.set(arr[i]);\n    }\n    for (long i = k; i < arr.size(); i++) {\n\
    \        sum += bs[arr[i]];\n        bs.set(arr[i]);\n    }\n    return sum;",
  "    long sum = 0;\n    long long num_sum = 0;\n    long long temp = 0;\n    assert(k\
    \ > 0);\n    assert(k == arr.size());\n    for (long i = 0; i < k; i++) {\n  \
    \      temp = arr[i];\n        num_sum += (temp / 10 + temp % 10);\n        if\
    \ (num_sum >= 10) {\n            sum += num_sum - 10;\n            num_sum = 0;\n\
    \        }\n    }\n    return sum;", "    // write your code here\n    int sum\
    \ = 0;\n    int index = k;\n    for (int i = 0; i < k; i++) {\n        index =\
    \ index / 10;\n        sum += arr[index];\n    }\n    return sum;", "    int n\
    \ = arr.size();\n    long res = 0;\n    for (int i = 0; i < n; i++) {\n      \
    \  long cur = arr[i];\n        long temp = 0;\n        for (int j = 0; j < k;\
    \ j++) {\n            temp += cur % 10;\n            cur /= 10;\n        }\n \
    \       if (temp > 0) {\n            res += temp;\n        }\n    }\n    return\
    \ res;", "    // Your code here\n    long n = arr.size();\n    long sum = 0;\n\
    \    long temp;\n    for (long i = 1; i <= n; i++) {\n        temp = sum + arr[i-1];\n\
    \        if (temp <= k) {\n            sum += temp;\n        }\n        else {\n\
    \            sum -= arr[temp-k]; \n        }\n    }\n    return sum;", "    //\
    \ Write your code here\n    long total = 0;\n    long curr = 0;\n    for (int\
    \ i = 0; i < k; i++) {\n        curr = arr[i];\n        total += curr;\n    }\n\
    \    return total;", "    // Your code goes here\n    return 0L;", "    if(arr.size()\
    \ <= k)\n        return 0;\n    long long sum = 0;\n    for(auto x: arr) {\n \
    \       sum = sum + (x % 10) + (x / 10);\n    }\n    if(sum < 100) \n        return\
    \ 0;\n    return sum;", "    if(arr.size() <= k){\n        return 0;\n    }\n\
    \    // Using divide and conquer approach\n    // We start summing up first k\
    \ elements as 0\n    long ans = 0;\n    for(long i = 0; i < k; i++){\n       \
    \ ans += arr[i];\n    }\n    \n    // Then we add the remaining elements in the\
    \ remaining k-1 elements\n    long sum = ans;\n    for(long i = 1; i < arr.size();\
    \ i++){\n        if(arr[i] < sum){\n            sum += arr[i];\n        } else\
    \ {\n            sum -= arr[i];\n        }\n    }\n    return sum;", "    // sum\
    \ of elements with two digits from arr elements \n    // sum of elements with\
    \ two digits from arr elements = sum_arr(arr) - sum_arr(arr[:k])\n    long sum\
    \ = 0;\n    for (long i = 0; i < k; i++) {\n        sum += arr[i];\n    }\n  \
    \  \n    // sum of elements with two digits from arr elements \n    // sum of\
    \ elements with two digits from arr elements = sum_arr(arr[:k])\n    long sum2\
    \ = sum - arr[k];\n    \n    // return sum of elements with two digits from arr\
    \ elements\n    return sum2 + sum2;", "    // code here\n    long sum = 0;\n \
    \   for (size_t i = 0; i < k; ++i) {\n        sum += arr[i];\n    }\n    return\
    \ sum;", "    // write your code here\n    std::sort(arr.begin(), arr.end());\n\
    \    std::nth_element(arr.begin(), arr.begin() + k - 1, arr.end());\n    return\
    \ arr[k - 1];", "    long ans = 0;\n    auto it = arr.begin();\n    while (it\
    \ != arr.begin() + k) {\n        ans += *it;\n        ++it;\n    }\n    return\
    \ ans;", "    long sum = 0;\n    for (long i = 0; i < k; i++)\n        sum +=\
    \ arr[i];\n    for (long i = k; i < arr.size(); i++)\n        sum += arr[i] -\
    \ arr[i - k];\n    return sum;", "    if(arr.size() <= k){\n        return 0;\n\
    \    }\n    long sum = 0;\n    for(size_t i = 0; i<= k; i++){\n        sum +=\
    \ arr[i];\n    }\n    return sum;", "    // Your code here\n    long sum = 0;\n\
    \    for(long i = 0;i<arr.size();i++){\n        if(arr[i]%10==0){\n          \
    \  sum += arr[i];\n            i++;\n        }else if(arr[i]%10<2){\n        \
    \    sum += arr[i] - 10*arr[i]%10;\n            i++;\n        }else{\n       \
    \     sum += arr[i];\n            i++;\n            \n        }\n    }\n    return\
    \ sum;", "    long sum = 0;\n    long ans = arr[0];\n\n    // add arr[0] and arr[1]\n\
    \    sum = sum + arr[0];\n    ans = max(ans, sum);\n\n    // add arr[2] and arr[3]\n\
    \    sum = sum + arr[2];\n    ans = max(ans, sum);\n\n    // add arr[4] and arr[5]\n\
    \    sum = sum + arr[4];\n    ans = max(ans, sum);\n\n    // add arr[6] and arr[7]\n\
    \    sum = sum + arr[6];\n    ans = max(ans, sum);\n\n    // add arr[8] and arr[9]\n\
    \    sum = sum + arr[8];\n    ans = max(ans, sum);\n\n    // add arr[10] and arr[11]\n\
    \    sum = sum + arr[10];\n    ans = max(ans, sum);\n\n    // add arr[12] and\
    \ arr[13]\n    sum = sum + arr[12];\n    ans = max(ans, sum);\n\n    // add arr[14]\
    \ and arr[15]\n    sum = sum + arr[14];\n    ans = max(ans, sum);\n\n    // add\
    \ arr[0] and arr[1]\n    sum = sum + arr[1];\n    ans = max(ans, sum);\n\n   \
    \ // add arr[2] and arr[3]\n    sum = sum + arr[3];\n    ans = max(ans, sum);\n\
    \n    // add arr[4] and arr[5]\n    sum = sum + arr[5];\n    ans = max(ans, sum);\n\
    \n    // add arr[6] and arr[7]\n    sum = sum + arr[7];\n    ans = max(ans, sum);\n\
    \n    // add arr[8] and arr[9]\n    sum = sum + arr[9];\n    ans = max(ans, sum);\n\
    \n    // add arr[10] and arr[11]\n    sum = sum + arr[11];\n    ans = max(ans,\
    \ sum);\n\n    // add arr[12] and arr[13]\n    sum = sum + arr[13];\n    ans =\
    \ max(ans, sum);\n\n    // add arr[14] and arr[15]\n    sum = sum + arr[15];\n\
    \    ans = max(ans, sum);\n\n    // add arr[0] and arr[1]\n    sum = sum + arr[1];\n\
    \    ans = max(ans, sum);\n\n    // add arr[2] and arr[3]\n    sum = sum + arr[3];\n\
    \    ans = max(ans, sum);\n\n    // add arr[4] and arr[5]\n    sum = sum + arr[5];\n\
    \    ans = max(ans, sum);\n\n    // add arr[6] and arr[7]\n    sum = sum + arr[7];\n\
    \    ans = max(", "    std::unordered_map<long, long> nums;\n    long sum = 0;\n\
    \    for (auto i : arr) {\n        nums[i] = nums[i];\n        sum += i;\n   \
    \ }\n    long sum = nums[k];\n    for (long i = k + 1; i <= arr.size(); i++) {\n\
    \        nums[i] = nums[i];\n        sum += nums[i];\n    }\n    for (long i =\
    \ 0; i < k; i++) {\n        nums[i] = nums[i];\n        sum += nums[i];\n    }\n\
    \    return sum;", "    long sum = 0;\n    for (long i = 0; i < k; i++) {\n  \
    \      sum += arr[i];\n    }\n    for (long i = k; i < arr.size(); i++) {\n  \
    \      sum -= arr[i] - arr[i - k];\n        sum += arr[i];\n    }\n    return\
    \ sum;", "  int sum = 0;\n  for (int i = k; i < arr.size(); i++) {\n    sum +=\
    \ arr[i];\n  }\n  return sum;", "    std::sort(arr.begin(), arr.end());\n    long\
    \ sum = 0;\n    for (long i = 0; i < k; i++) {\n        sum += arr[i];\n    }\n\
    \    return sum;", "    if(arr.empty())\n        return 0;\n    \n    long ans\
    \ = arr[k];\n    for(int i = k; i < arr.size(); ++i) {\n        ans += arr[i];\n\
    \    }\n    return ans;", "    // Your code here\n    long sum = 0;\n    long\
    \ pos = 0;\n    for (int i = 0; i < k; i++) {\n        pos += arr[i];\n    }\n\
    \    while(pos > 0) {\n        sum = sum + pos % 10;\n        pos = pos /10;\n\
    \    }\n    return sum;", "  int sum = 0;\n  for (int i = 0; i < k; i++) {\n \
    \   sum += arr[i];\n  }\n  int len = 0;\n  int start = 0;\n  // first element\
    \ is not included\n  for (int i = 0; i < k; i++) {\n    sum += arr[i];\n    if\
    \ (sum > 1000000000) {\n      return 0;\n    }\n    len++;\n    if (sum >= 1000000000\
    \ && sum < 1010000000) {\n      start++;\n      sum -= 1000000000;\n    }\n  }\n\
    \  int idx = len - 1;\n  for (int i = start; i < idx; i++) {\n    sum += arr[i];\n\
    \  }\n  return sum;", "    \n    // Write your code here\n    int sum = 0;\n \
    \   for (int i = 0; i < k; ++i) sum += arr[i];\n    \n    for (int i = k; i <\
    \ arr.size(); ++i) sum += arr[i] - sum % 10;\n    \n    return sum;", "    //\
    \ sum of digits from 0 to k is sum of arr[0..i]\n    long sum = 0;\n    long cnt\
    \ = 0;\n    for (long i : arr) {\n        sum += i;\n        cnt++;\n    }\n \
    \   // arr[0..k-1] are all single digit numbers, rest are double\n    // We need\
    \ to add double digit number to the sum only if there are atleast two digits before\
    \ double\n    if (k >= cnt && cnt >= 2) {\n        // if there are two digits\
    \ before, add them\n        long doubled = arr[cnt-1] + arr[cnt-2];\n        sum\
    \ = (sum + doubled) % 10;\n    }\n    // return sum of digits from 0 to k\n  \
    \  return sum;", "    std::map<long, std::vector<long> > m;\n    for(auto i :\
    \ arr) {\n        m[i] = {i, std::vector<long>{}};\n    }\n    for(auto i : arr)\
    \ {\n        for(auto j : m) {\n            if(i-j > k) continue;\n          \
    \  if(m[i - j].size() == 1) {\n                m[j].push_back(i);\n          \
    \      break;\n            }\n            else if(m[i - j].size() > 1 && m[i -\
    \ j - 1].size() == 1) {\n                m[j].push_back(i);\n                m[j].push_back(m[i\
    \ - j - 1].at(0));\n                break;\n            }\n        }\n    }\n\
    \    long ans = 0;\n    for(auto i : m) ans += i;\n    return ans;", "    // Your\
    \ code here\n    \n    long sum = 0;\n    \n    for(int i = 0; i < k; i++) {\n\
    \        sum += arr[i];\n    }\n    \n    return sum;", "    // write your code\
    \ here\n    long sum = 0;\n    \n    if(k > 0 && k <= arr.size()) {\n        std::partial_sum(arr.begin(),\
    \ arr.begin() + k, std::back_inserter(sum));\n    }\n    \n    return sum;", " \
    \   long sum = 0;\n    for (int i = 0; i < k; ++i) {\n        int index = i;\n\
    \        while (arr[index] < 10) index++;\n        sum += arr[index];\n    }\n\
    \    return sum;", "    // Your code goes here\n    long sum = 0;\n    long sum2\
    \ = 0;\n    long sum3 = 0;\n    for(int i=0; i <= arr.size()-k;i++){\n       \
    \ sum2 += arr[i];\n    }\n    for(int i=0; i <= arr.size()-k;i++){\n        sum3\
    \ += arr[i+k];\n    }\n    for(int i=0; i <= arr.size()-k;i++){\n        sum +=\
    \ arr[i+k];\n    }\n    return sum+sum2+sum3;", "    // your code goes here\n\
    \    assert(arr.size() > 0);\n    assert(k <= arr.size());\n    long sum = 0;\n\
    \    long sum1 = 0l;\n    long sum2 = 0l;\n    int size = arr.size();\n    for\
    \ (int i = 0; i < (size - k + 1); i++) {\n        sum1 = arr[i] + sum1;\n    \
    \    if (sum1 > 9) {\n            sum1 = sum1 % 10;\n        }\n    }\n    for\
    \ (int i = 0; i < k; i++) {\n        sum2 = arr[i] + sum2;\n        if (sum2 >\
    \ 9) {\n            sum2 = sum2 % 10;\n        }\n    }\n    return sum1 + sum2;",
  "    // Your code here\n    long sum = 0;\n    std::vector<long> temp;\n    std::copy_n(arr.begin(),k,std::back_inserter(temp));\n\
    \    temp.pop_back();\n    sum = std::accumulate(temp.begin(),temp.end(),0);\n\
    \    return sum;", "  // O(k)\n  std::map<long, long> m;\n  std::set<long> u;\n\
    \n  for (long i : arr) {\n    // O(1)\n    m.insert({i, m.find(i)->second + 1});\n\
    \  }\n\n  // O(k)\n  u = {std::begin(arr), std::begin(arr) + k};\n\n  // O(k log\
    \ k)\n  auto begin = std::lower_bound(u.begin(), u.end(), 0);\n  auto end = std::upper_bound(u.begin(),\
    \ u.end(), 0);\n\n  // O(k)\n  return std::accumulate(begin, end, 0);", "    std::stack<long>\
    \ st;\n    long ans = 0;\n    // initialize stack\n    for (long i = 0; i < k;\
    \ i++) {\n        st.push(arr[i]);\n    }\n    // process stack\n    while (!st.empty())\
    \ {\n        long sum = st.pop();\n        ans += sum;\n        // pop from stack\
    \ until it is smaller than sum\n        while (!st.empty() && st.top() < sum)\
    \ {\n            st.pop();\n        }\n        \n    }\n    return ans;", "  \
    \  long long s = 0;\n    long long sum = 0;\n    std::vector<long> arr2;\n   \
    \ for (long i = 0; i < k; i++) {\n        arr2.push_back(arr[i]);\n    }\n   \
    \ arr2.erase(arr2.begin(), arr2.begin() + k);\n    for (long i = 0; i < k; i++)\
    \ {\n        sum += arr2[i];\n    }\n    for (long i = 0; i < k; i++) {\n    \
    \    s += arr2[i];\n    }\n    for (long i = 0; i < k; i++) {\n        arr2.erase(arr2.begin()\
    \ + i);\n    }\n    for (long i = 0; i < k; i++) {\n        sum += arr2[i];\n\
    \    }\n    s += sum;\n    long res = 0;\n    for (int i = 0; i < k; i++) {\n\
    \        res += arr[i];\n    }\n    return res;", "\tlong ans = 0;\n\t// Store\
    \ the sum so far.\n\tfor (long i = 1; i < arr.size(); i++) {\n\t\tif (arr[i] -\
    \ arr[i - 1] <= k)\n\t\t\tans += arr[i];\n\t\telse\n\t\t\tbreak;\n\t}\n\treturn\
    \ ans;", "    long sum = 0;\n    for (long i = 0; i < k; i++) {\n        sum +=\
    \ arr[i];\n    }\n    return sum;", "    // Your code here\n    for(long i = 0;i<arr.size()\
    \ && i<k;i++)\n    {\n        if(arr[i]>9)\n        {\n            arr[i]-=9;\n\
    \            sum+=arr[i];\n        }\n    }\n    long sum = 0;\n    for(long i=0;i<k;i++)\n\
    \    {\n        if(arr[i]>9)\n        {\n            arr[i]-=9;\n            sum+=arr[i];\n\
    \        }\n    }\n    for(long i=0;i<k;i++)\n    {\n        if(arr[i]<10)\n \
    \       {\n            sum+=arr[i];\n        }\n    }\n    return sum;", "   \
    \ long sum = 0;\n    long count = 0;\n    for (long i = 0; i < k; i++) {\n   \
    \     sum += arr[i];\n        count += 1;\n    }\n    for (long j = 0; j < k;\
    \ j++) {\n        sum += arr[j];\n        count += 1;\n    }\n    if (count ==\
    \ 2) {\n        sum += arr[k];\n    }\n    return sum;", "    long ans = 0;\n\
    \    for (size_t i = 0; i + k < arr.size(); i++) {\n        ans += arr[i + k];\n\
    \    }\n    return ans;", "    long long ans = arr[0] + arr[1];\n    for (int\
    \ i = 2; i <= k; i++) {\n        ans += arr[i];\n    }\n    return ans;", "  \
    \  // code here\n    long sum = 0;\n    long n = arr.size();\n    long mod = pow(10,\
    \ n - k);\n    for (int i = 1; i <= k; i++) {\n        if (mod == arr[i]) {\n\
    \            sum += arr[i];\n        } else {\n            sum += arr[i] - mod;\n\
    \            arr[i] = 0;\n        }\n    }\n    return sum;", "    long ans =\
    \ 0, cur = arr[0], sum = 0;\n    std::vector<long>::iterator it;\n    for (it\
    \ = arr.begin() + 1; it < arr.begin() + k; ++it) {\n        sum += *it;\n    \
    \    cur += *it;\n        while (sum / 10 >= cur && sum % 10 > cur) {\n      \
    \      sum += cur % 10;\n            ans += sum;\n            sum -= cur % 10;\n\
    \            cur = cur / 10;\n        }\n    }\n    return ans;", "    \n    long\
    \ long s = 0;\n    for (int i = 0; i < k; i++) {\n        s += arr[i];\n    }\n\
    \    return s;", "    long sum = 0;\n    int count = 0;\n    for (int i = 0; i\
    \ < k; i++) {\n        if (arr[count] % 10 == 0)\n            sum += arr[count];\n\
    \        count++;\n    }\n    return sum;", "    int len = arr.size();\n    assert(k\
    \ >= 1 && k <= len);\n    long long sum = 0;\n    for (int i = 0; i < k; i++)\
    \ {\n        sum += arr[i];\n    }\n    return sum;", "    long sum = 0, sum2\
    \ = 0;\n    if (arr.size() <= 2) return 0;\n    for (int i = 0; i < k; i++)\n\
    \        sum += arr[i];\n    for (int i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > sum) sum2 = sum - arr[i];\n        else sum2 = sum + arr[i];\n   \
    \     if (sum2 >= 10) return sum2;\n        sum = sum2;\n    }\n    return sum;",
  "    long res = 0;\n    for(long i = 1; i < k; ++i)\n        res += arr[i];\n  \
    \  res += arr[k - 1];\n    return res;"]
stop_tokens:
- "\n}"
