name: HumanEval_7_filter_by_substring
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of strings\
  \ only for ones that contain given substring\n// >>> filter_by_substring([], 'a')\n\
  // []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n// ['abc',\
  \ 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
  \ strings, std::string substring) {\n"
tests: "}\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
  \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
  xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
  xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
  xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) == (std::vector<std::string>({\"\
  xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
  grunt\", \"trumpet\", \"prune\", \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"\
  grunt\", \"prune\"})));\n}\n"
completions: []
stop_tokens:
- "\n}"
