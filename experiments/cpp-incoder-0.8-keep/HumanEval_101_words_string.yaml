name: HumanEval_101_words_string
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
  \ of words separated by commas or spaces. Your task is\n// to split the string into\
  \ words and return an array of the words.\n// For example:\n// words_string(\"Hi,\
  \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
  One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"\
  five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n"
tests: "}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
  Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\",\
  \ \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five, six\"\
  )) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\", \"five\"\
  , \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
  Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
  \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\",\
  \ \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
  \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
  ahmed\", \"gamal\"})));\n}\n"
completions: ["    std::istringstream ss(s);\n    std::string item;\n    std::vector<std::string>\
    \ words;\n    while (std::getline(ss, item, '\\n')) {\n        words.push_back(item);\n\
    \    }\n    return words;", "  std::vector<std::string> res;\n  std::string delimiter\
    \ = \",\";\n  std::istringstream iss(s);\n  for (std::string line; std::getline(iss,\
    \ line, delimiter); ) {\n    std::string word;\n    std::istringstream line_iss(line);\n\
    \    std::string line_word;\n    while (std::getline(line_iss, line_word, delimiter))\
    \ {\n      word += line_word + ' ';\n    }\n    res.push_back(word);\n  }\n  return\
    \ res;", "  std::vector<std::string> words;\n  // Write your code here\n  int\
    \ i = 0;\n  while (i < s.size()) {\n    if (s[i] != ',' && s[i] != ' ' && s[i]\
    \ != '\\0') {\n      words.push_back(s.substr(i, s.size()));\n      i += s.size()\
    \ - 1;\n    } else {\n      i += 1;\n    }\n  }\n  return words;", "    std::vector<std::string>\
    \ words;\n    auto split = s.begin();\n    auto split_end = s.end();\n    while\
    \ (split != split_end) {\n        auto comma = find(split, split_end, '\\'');\n\
    \        auto space = find(split, split_end, ' ');\n        if (comma != space)\
    \ {\n            words.push_back(std::string(split, comma));\n            split\
    \ = comma + 1;\n        } else {\n            words.push_back(std::string(split,\
    \ space));\n            split = space + 1;\n        }\n    }\n    return words;",
  "  std::vector<std::string> words;\n  split(s, std::back_inserter(words), ',');\n\
    \  return words;", "\tstd::vector<std::string> res;\n\tstd::istringstream iss(s);\n\
    \tstd::string word;\n\twhile (iss >> word) {\n\t\tres.push_back(word);\n\t}\n\t\
    return res;", "  std::vector<std::string> v;\n  std::string w;\n  auto it = s.begin();\n\
    \  while ((it = std::find_if(it, s.end(), [](char c) { return std::isspace(c);\
    \ }))\n             != s.end())\n  {\n    w = s.substr(0, it);\n    if (w.length()\
    \ > 0)\n    {\n      v.push_back(std::move(w));\n    }\n    s.erase(0, it + 1);\n\
    \  }\n  if (s.size() > 0)\n  {\n    w = s;\n    v.push_back(std::move(w));\n \
    \ }\n  return v;", "    // write your code here\n    return std::vector<std::string>();",
  "    std::istringstream stream(s);\n    std::string word;\n    std::vector<std::string>\
    \ v;\n    while (std::getline(stream, word, ',')) {\n        v.push_back(word);\n\
    \    }\n    return v;", "    assert(!s.empty());\n    std::vector<std::string>\
    \ words;\n    std::string currentWord;\n    for (std::string::iterator it = s.begin();\
    \ it != s.end(); ++it) {\n        switch (*it) {\n            case ',':\n    \
    \            words.push_back(currentWord);\n                currentWord.clear();\n\
    \                break;\n            case ' ':\n                words.push_back(currentWord);\n\
    \                currentWord.clear();\n                break;\n            default:\n\
    \                currentWord += *it;\n        }\n    }\n    words.push_back(currentWord);\n\
    \    return words;", "  std::istringstream ss(s);\n  std::string word;\n  std::vector<std::string>\
    \ ret;\n  while (std::getline(ss, word, ',')) {\n    ret.push_back(word);\n  }\n\
    \  return ret;", "    std::string w = s.substr(0, s.size() - 1);\n    std::string\
    \ rest = s.substr(s.size() - 1);\n    std::vector<std::string> words;\n    std::replace(w.begin(),\
    \ w.end(), '.', ' ');\n    std::stringstream ss(w);\n    std::string token;\n\
    \    while (std::getline(ss, token, ',')) {\n        words.push_back(token);\n\
    \    }\n    for (auto &i : words) {\n        std::replace(i.begin(), i.end(),\
    \ '.', ' ');\n    }\n    words.push_back(rest);\n    return words;", "    std::string\
    \ delimiters = \",\";\n    size_t pos = 0;\n    std::vector<std::string> words;\n\
    \    while (pos != std::string::npos) {\n        size_t next = s.find(delimiters,\
    \ pos);\n        if (next == std::string::npos) {\n            words.push_back(s.substr(pos));\n\
    \            pos = std::string::npos;\n        } else {\n            words.push_back(s.substr(pos,\
    \ next - pos));\n            pos = next + 1;\n        }\n    }\n    return words;",
  "  // Write your code here\n  \n  return std::vector<std::string>();", "    std::vector<std::string>\
    \ words;\n    std::string temp;\n    size_t pos = 0;\n    size_t count = 0;\n\
    \    // Split string into words using space and commas\n    do {\n        temp\
    \ = s.substr(pos, s.find_first_not_of(\" ,\", pos) - pos);\n        pos = s.find_first_of(\"\
    \ ,\", pos);\n        if (pos != std::string::npos) {\n            words[count++]\
    \ = temp;\n        }\n    } while (pos != std::string::npos);\n    return words;",
  "  std::vector<std::string> tokens;\n\n  if (s.empty()) {\n    return tokens;\n\
    \  }\n\n  std::string::size_type pos = 0, end;\n  while (end < s.size() && s[end]\
    \ != '\\0') {\n    ++end;\n  }\n\n  while (pos < end) {\n    tokens.push_back(s.substr(pos,\
    \ end - pos));\n    pos = end + 1;\n    while (end < s.size() && s[end] != ' ')\
    \ {\n      ++end;\n    }\n\n    if (s[end] == ',' || s[end] == '\\0') {\n    \
    \  ++end;\n    } else {\n      break;\n    }\n  }\n\n  return tokens;", "    size_t\
    \ i;\n    std::vector<std::string> tokens;\n    for (i = 0; i <= s.size(); i++)\n\
    \    {\n        if (s.at(i) == ',' || s.at(i) == ' ')\n        {\n           \
    \ if (i > 0)\n            {\n                tokens.push_back(str.substr(0, i));\n\
    \                str.erase(0, i + 1);\n            }\n        }\n    }\n    tokens.push_back(str);\n\
    \    return tokens;", "    assert(!s.empty());\n    std::vector<std::string> result;\n\
    \    std::istringstream ss(s);\n    std::string word;\n    while (std::getline(ss,\
    \ word, ',')) {\n        result.push_back(word);\n    }\n    return result;",
  "    std::vector<std::string> v;\n    char *arr = (char*) s.data();\n    char *p\
    \ = arr;\n    char *ptr = arr;\n    // Add an empty string to your array\n   \
    \ v.push_back( \"\" );\n\n    while( *p != '\\0' ) {\n        while(*p != ','\
    \ && p < arr ){\n            *p++;\n        }\n        v.push_back(*p);\n    \
    \    p ++;\n\n        while(*p != ',' && p < arr ){\n            *p++;\n     \
    \   }\n    }\n    return v;", "  std::vector<std::string> strings;\n  std::string\
    \ word;\n  std::size_t prev_pos = 0;\n  for (std::size_t pos = 0; pos < s.size();\
    \ ++pos) {\n    if ((s[pos] == '\\'') || (s[pos] == '\"')) {\n      // If we're\
    \ inside a quoted string, ignore it (don't split word)\n      std::string::size_type\
    \ next_pos = s.find_first_of(\"\\'\\\"\", prev_pos);\n      if (next_pos == std::string::npos)\
    \ {\n        word = s.substr(prev_pos);\n        strings[strings.size()] = word;\n\
    \      }\n      else {\n        // If we're inside a quoted string, ignore it\
    \ (don't split word)\n        word = s.substr(prev_pos, next_pos - prev_pos);\n\
    \        prev_pos = next_pos;\n        strings[strings.size()] = word;\n     \
    \ }\n    }\n    else {\n      // If not inside a quoted string, split word\n \
    \     std::string::size_type next_pos = s.find_first_of(\",\", pos);\n      if\
    \ (next_pos == std::string::npos) {\n        word = s.substr(pos);\n        strings[strings.size()]\
    \ = word;\n      }\n      else {\n        word = s.substr(pos, next_pos - pos);\n\
    \        pos = next_pos;\n        strings[strings.size()] = word;\n      }\n \
    \   }\n  }\n  return strings;", "  std::vector<std::string> words;\n  for (std::size_t\
    \ i = 0; i != s.size(); ++i) {\n    std::string word = s.substr(i, std::string::npos);\n\
    \    if (word != \"\") {\n      words.push_back(word);\n    }\n  }\n  return words;",
  "    std::istringstream iss(s);\n    std::string word;\n    std::vector<std::string>\
    \ v;\n\n    while (std::getline(iss, word, ',')) {\n        v.push_back(word);\n\
    \    }\n\n    return v;", "    std::vector<std::string> elems;\n    std::stringstream\
    \ ss(s);\n    std::string token;\n    while (std::getline(ss, token, ',')) {\n\
    \        elems.push_back(token);\n    }\n    return elems;", "  auto p = s.begin();\n\
    \  p = std::find_if(s.begin(), s.end(), [](char ch) {\n    return std::isspace(ch,\
    \ std::locale());\n  });\n  auto e = s.end();\n  std::vector<std::string> words;\n\
    \  while (p != e) {\n    words.push_back({ std::string(s, p, std::locale()), p\
    \ });\n    p = std::find_if(++p, e, [](char ch) {\n      return std::isspace(ch,\
    \ std::locale());\n    });\n  }\n  return words;", "    std::istringstream ss(s);\n\
    \    std::string word;\n    std::vector<std::string> words;\n    while (std::getline(ss,\
    \ word, ','))\n        words.push_back(word);\n    return words;", "  \n  std::vector<std::string>\
    \ words;\n  // Write your code here\n  for(int i = 0; i<s.length(); i++) {\n \
    \   if(s[i] == ',') {\n      words.push_back(s.substr(0,i));\n      s.erase(0,i+1);\n\
    \      i--;\n    }\n  }\n  \n  return words;", "    assert(s.find(\", \") == std::string::npos);\n\
    \    assert(s.find(\" \") == std::string::npos);\n    std::vector<std::string>\
    \ result;\n    size_t pos = 0;\n    while (pos < s.size()) {\n        std::string\
    \ temp = s.substr(pos, 1);\n        if (temp == \"\") {\n            result.push_back(temp);\n\
    \        }\n        pos = temp.length() + 1;\n    }\n    return result;", "  \
    \  size_t found = s.find_first_of(\" ,\", 0);\n    std::vector<std::string> words{s.substr(0,\
    \ found), s.substr(found + 1)};\n    return words;", "    std::stringstream ss(\
    \ s );\n    std::string word;\n    std::getline(ss, word, ',');\n    while (ss.peek()\
    \ != ' ') {\n        std::getline(ss, word, ',');\n    }\n    std::vector<std::string>\
    \ result(s.begin(), s.end());\n    std::reverse( result.begin(), result.end()\
    \ );\n    return result;", "    std::vector<std::string> elems;\n    std::string\
    \ token;\n    std::istringstream iss(s);\n\n    while (std::getline(iss, token,\
    \ ','))\n        elems.push_back(token);\n    return elems;", "    std::string\
    \ delimiters(\" \");\n    std::string all_words(s);\n    std::string words_string;\n\
    \n    std::size_t current_position = 0;\n    std::size_t current_length = all_words.length();\n\
    \    std::vector<std::string> word_strings;\n\n    while (true) {\n        //\
    \ Find first occurrence of delimiter.\n        std::size_t found = all_words.find(delimiters,\
    \ current_position);\n        if (found == std::string::npos) {\n            words_string\
    \ += all_words[current_position];\n            break;\n        }\n\n        words_string\
    \ += all_words.substr(current_position, found - current_position);\n        word_strings.push_back(words_string);\n\
    \        current_position = found + delimiters.length();\n        current_length\
    \ -= found + delimiters.length();\n    }\n    return word_strings;", "  std::vector<std::string>\
    \ result;\n\n  // Split s by ,\n  auto tokens = split(s, ',');\n  // Split each\
    \ token by space\n  for (auto t : tokens) {\n    result.push_back(split(t, ''));\n\
    \  }\n\n  return result;", "  // Write your code here\n  std::vector<std::string>\
    \ v;\n  std::string temp;\n  temp = s;\n  int counter = 0;\n  while (counter <\
    \ temp.size()-1) {\n    v.push_back(temp.substr(counter, temp.length()));\n  \
    \  counter = counter + temp.length();\n  }\n  return v;", "    std::vector<std::string>\
    \ v;\n    for (std::string::size_type i = 0; i < s.size(); i++) {\n        std::string\
    \ word = s.substr(i, 1);\n        v.push_back(word);\n    }\n    return v;", " \
    \ std::string w;\n  std::istringstream iss(s);\n  std::vector<std::string> vs;\n\
    \  while (iss.good()) {\n    is >> w;\n    if (w == \"\")\n      break;\n    vs.push_back(w);\n\
    \  }\n  return vs;", "    std::vector<std::string> words;\n    std::string word;\n\
    \    std::string delimiter = \",\";\n    size_t pos = 0;\n    while ((pos = s.find(delimiter))\
    \ != std::string::npos) {\n        word = s.substr(0, pos);\n        words.push_back(word);\n\
    \        s = s.substr(pos + 1);\n    }\n    words.push_back(s);\n    return words;",
  "    std::string st;\n    std::string word;\n    std::vector<std::string> res;\n\
    \    while (std::getline(std::cin, st)) {\n        std::istringstream ss(st);\n\
    \        while (ss >> word) {\n            res.push_back(word);\n        }\n \
    \   }\n    return res;", "    s.erase(std::remove(s.begin(), s.end(), ','), s.end());\n\
    \    s.erase(std::remove(s.begin(), s.end(), ' '), s.end());\n\n    std::vector<std::string>\
    \ words;\n    std::string item;\n    std::istringstream ss(s);\n\n    while (std::getline(ss,\
    \ item, ',')) {\n        words.push_back(item);\n    }\n\n    return words;",
  "  // Your code goes here\n  return {};", "    std::vector<std::string> ret;\n \
    \   size_t pos = 0, end;\n    end = s.find(',', pos);\n    ret.push_back(s.substr(pos,\
    \ end - pos));\n    pos = end;\n    end = s.find(',', pos);\n    ret.push_back(s.substr(pos,\
    \ end - pos));\n    pos = end;\n    end = s.find(' ', pos);\n    while (end !=\
    \ std::string::npos) {\n        ret.push_back(s.substr(pos, end - pos));\n   \
    \     pos = end;\n        end = s.find(' ', pos);\n    }\n    if (end == std::string::npos)\n\
    \        ret.push_back(s.substr(pos));\n    return ret;", "  std::string items[100];\n\
    \  std::string delimiters(\",\");\n  std::stringstream ss(s);\n  std::string item;\n\
    \  while (std::getline(ss, item, delimiters)) {\n    items[items.size()] = item;\n\
    \  }\n  return items;", "\tstd::vector<std::string> res;\n\tstd::istringstream\
    \ iss(s);\n\tstd::string word;\n\twhile(std::getline(iss, word, ',')) {\n\t\t\
    res.push_back(word);\n\t}\n\treturn res;", '  // your code here', "  std::vector<std::string>\
    \ elems;\n  std::string str = s;\n  std::string delim = \", \";\n  std::stringstream\
    \ ss(str);\n  std::string item;\n  while (std::getline(ss, item, delim)) {\n \
    \   elems.push_back(item);\n  }\n  return elems;", "    std::vector<std::string>\
    \ result;\n    std::istringstream ss(s);\n    std::string word;\n    while (std::getline(ss,\
    \ word, ','))\n    {\n        result.push_back(word);\n    }\n    return result;",
  "    // Write your code here\n    std::vector<std::string> result;\n    std::string\
    \ word = \"\";\n    std::stringstream ss(s);\n    std::string temp;\n    while\
    \ (std::getline(ss, temp, ',')) {\n        word = temp;\n        result.push_back(word);\n\
    \    }\n    return result;", "  std::vector<std::string> ret;\n  std::stringstream\
    \ ss;\n  ss << s;\n  std::string item;\n  while (std::getline(ss, item, ','))\
    \ {\n    ret.push_back(item);\n  }\n  return ret;", "    std::vector<std::string>\
    \ result;\n    auto words = s.begin(), end = s.end();\n    std::string word;\n\
    \    while (words != end) {\n        std::istringstream iss(words);\n        while\
    \ (iss >> word) {\n            result.push_back(word);\n            word = iss.get();\n\
    \        }\n        ++words;\n    }\n    return result;", "  std::istringstream\
    \ iss(s);\n  std::vector<std::string> words;\n  while (std::getline(iss, s, '|'))\
    \ {\n    words.push_back(s);\n  }\n  return words;", "    std::vector<std::string>\
    \ words;\n\n    std::stringstream ss(s);\n\n    std::string item;\n\n    while\
    \ (std::getline(ss, item, ',')) {\n        words.push_back(item);\n    }\n\n \
    \   return words;", "    std::vector<std::string> tokens;\n    std::istringstream\
    \ ss(s);\n    std::string token;\n    while (std::getline(ss, token, ',')) {\n\
    \        tokens.push_back(token);\n    }\n    return tokens;", "  std::string\
    \ arr[] = s.split(\" \");\n  std::vector<std::string> ans(std::begin(arr), std::end(arr));\n\
    \  return ans;", "    std::vector<std::string> word_vec;\n    std::string token;\n\
    \    std::istringstream ss(s);\n    while (std::getline(ss, token, ',')) {\n \
    \       word_vec.push_back(token);\n    }\n    return word_vec;", "    // your\
    \ code goes here\n    auto temp = s.substr(0, s.find_first_of(\" \"));\n    std::vector<std::string>\
    \ res;\n    res.push_back(temp);\n    while (temp != \"\") {\n        temp = temp.substr(0,\
    \ temp.find_first_of(\" \"));\n        res.push_back(temp);\n    }\n    return\
    \ res;", "  std::vector<std::string> words;\n  std::string word = \"\";\n  for\
    \ (int i = 0; i < s.length(); i++) {\n    if (s[i] == ',' || s[i] == ' ') {\n\
    \      if (word.length()) {\n        words.push_back(word);\n      }\n      word\
    \ = \"\";\n    } else {\n      word += s[i];\n    }\n  }\n  if (word.length())\
    \ {\n    words.push_back(word);\n  }\n  return words;", "    // Split your string\
    \ into an array of words\n    // For example, if the string is \"Hi, my name is\
    \ John\" then your array should look like below\n    // [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\n\n    // Split the string into array\n    std::vector<std::string>\
    \ strs;\n    std::string delimiter = \",\";\n    size_t prev = 0, pos = 0;\n \
    \   while ((pos = s.find(delimiter)) != std::string::npos) {\n        if (prev\
    \ > pos) {\n            strs.push_back(s.substr(prev, pos));\n        }\n    \
    \    strs.push_back(s.substr(pos, delimiter.length()));\n        prev = pos +\
    \ delimiter.length();\n    }\n    if (prev < s.length()) {\n        strs.push_back(s.substr(prev));\n\
    \    }\n    return strs;", "    std::vector<std::string> words;\n    std::istringstream\
    \ iss(s);\n    std::string word;\n    while (std::getline(iss, word, ',')) {\n\
    \        words.push_back(word);\n    }\n    return words;", "  std::string delimiters(\"\
    \ \");\n  std::string nums = \"0123456789\";\n  std::vector<std::string> ret;\n\
    \  std::string token = std::string(s);\n  for (std::size_t i = 0; i != token.size();\
    \ ++i) {\n    if (isalpha(token[i]) || isdigit(token[i])) {\n      std::cout <<\
    \ token << \" \" << std::endl;\n      ret.push_back(token);\n      token = \"\"\
    ;\n    } else if (token[i] == '\\'') {\n      token = std::string(token.begin(),\
    \ token.begin() + i - 1);\n      std::cout << token << \" \" << std::endl;\n \
    \     ret.push_back(token);\n      token = std::string(token.begin() + 1, token.end());\n\
    \    } else if (token[i] == '\\\"') {\n      token = std::string(token.begin(),\
    \ token.begin() + i - 1);\n      std::cout << token << \" \" << std::endl;\n \
    \     ret.push_back(token);\n      token = std::string(token.begin() + 1, token.end());\n\
    \    } else if (token[i] == ',') {\n      token = std::string(token.begin(), token.begin()\
    \ + i - 1);\n      std::cout << token << \" \" << std::endl;\n      ret.push_back(token);\n\
    \      token = std::string(token.begin() + 1, token.end());\n    }\n  }\n  return\
    \ ret;", "  std::vector<std::string> v;\n  std::string word;\n  std::stringstream\
    \ ss(s);\n  while (getline(ss, word, ',')) {\n    v.push_back(word);\n  }\n  return\
    \ v;", "  s = s.substr(0, s.size() - 1);\n  std::stringstream ss(s);\n  std::vector<std::string>\
    \ words;\n  std::string word;\n  while (std::getline(ss, word, ',')) {\n    words.push_back(word);\n\
    \  }\n  return words;", "    std::vector<std::string> tokens;\n    std::string\
    \ delimiters = \" ,.-\";\n    size_t prev = 0;\n    while (true) {\n        size_t\
    \ next = s.find(delimiters, prev);\n        std::string token = s.substr(prev,\
    \ next - prev);\n        tokens.push_back(token);\n        if (next == std::string::npos)\
    \ {\n            break;\n        }\n        prev = next + 1;\n    }\n    return\
    \ tokens;", "    std::istringstream ss(s);\n    std::string word;\n    std::vector<std::string>\
    \ v;\n    while (std::getline(ss, word, ',')) {\n        v.push_back(word);\n\
    \    }\n    return v;", "  // Split string by space, comma and new line.\n  //\
    \ You don't need to modify the string from now on.\n  std::vector<std::string>\
    \ strs;\n  std::stringstream ss(s);\n  std::string item;\n  while (std::getline(ss,\
    \ item, ',')) {\n    strs.push_back(item);\n  }\n  return strs;", "    std::vector<std::string>\
    \ words;\n    std::string temp = \"\";\n    std::string delimiter = \",\";\n \
    \   size_t prev = 0, next = 0;\n    while (next != std::string::npos) {\n    \
    \    next = s.find_first_not_of(delimiter, prev);\n        if (next == std::string::npos)\
    \ {\n            next = s.size();\n        }\n        temp = s.substr(prev, next\
    \ - prev);\n        words.push_back(temp);\n        prev = next + 1;\n    }\n\
    \    temp = s.substr(prev, s.size() - prev);\n    words.push_back(temp);\n   \
    \ return words;", "   std::vector<std::string> v;\n   std::string delimiters =\
    \ \",\";\n   size_t prev = 0, pos = 0;\n   std::string::size_type lastPos = 0;\n\
    \   // Get all word positions in the given string\n   while ((pos = s.find(delimiters,\
    \ prev)) != std::string::npos) {\n      v.push_back(s.substr(prev, pos-prev));\n\
    \      lastPos = pos + delimiters.length();\n   }\n   // Add remaining part of\
    \ the string\n   v.push_back(s.substr(lastPos));\n   return v;", "    // Complete\
    \ the function here\n    int i = 0;\n    std::vector<std::string> words;\n   \
    \ while (i < s.length()) {\n        std::string token = \"\";\n        if (s[i]\
    \ == ',' || s[i] == ' ') {\n            while (i < s.length() && s[i] != '\\0')\
    \ {\n                token = token + s[i];\n                i++;\n           \
    \ }\n            words.push_back(token);\n            i = i + 1;\n        } else\
    \ {\n            i++;\n        }\n    }\n    return words;", "    std::vector<std::string>\
    \ words;\n    // Write your code here.\n    std::string::size_type pos = 0, end\
    \ = s.length();\n    while (pos < end)\n    {\n        std::string::size_type\
    \ i = s.find_first_of(\",.;\", pos);\n        if (i == std::string::npos)\n  \
    \      {\n            i = end;\n        }\n        std::string word = s.substr(pos,\
    \ i - pos);\n        words.push_back(word);\n        pos = i + 1;\n    }\n   \
    \ return words;", "  std::istringstream ss(s);\n  std::string item;\n  std::vector<std::string>\
    \ ans;\n  while (std::getline(ss, item, ',')) {\n    ans.push_back(item);\n  }\n\
    \  return ans;", "  std::vector<std::string> v;\n  std::istringstream iss(s);\n\
    \  std::string word;\n  while (std::getline(iss, word, ',')) {\n    v.push_back(word);\n\
    \  }\n  return v;", "  std::vector<std::string> elems;\n  std::istringstream ss(s);\n\
    \  std::string ele;\n  while (std::getline(ss, ele, ',')) {\n    elems.push_back(ele);\n\
    \  }\n  return elems;", "    // Split the string based on commas.\n    std::vector<std::string>\
    \ words(std::sregex_token_iterator(s.begin(), s.end(), std::sregex(\",\"), -1),\
    \ {});\n    // Remove the duplicate words\n    words.erase(std::unique(words.begin(),\
    \ words.end()), words.end());\n    return words;", "  std::vector<std::string>\
    \ words;\n  std::istringstream iss(s);\n  std::string word;\n  while (std::getline(iss,\
    \ word, ',')){\n    words.push_back(word);\n  }\n  return words;", "  std::vector<std::string>\
    \ result;\n  std::string split_string;\n  std::istringstream iss(s);\n\n  while\
    \ (std::getline(iss, split_string, ',')) {\n    result.push_back(split_string);\n\
    \  }\n\n  return result;", "  assert(s.size() > 0);\n  std::vector<std::string>\
    \ words;\n  size_t pos = 0;\n  size_t prev = 0, len = s.size();\n  while (len)\
    \ {\n    if (len <= 1) {\n      // If there are 1 or less chars, return the existing\
    \ word\n      words.push_back(s.substr(prev, pos - prev));\n      prev = pos =\
    \ 0;\n      len = 0;\n    } else {\n      // If there are more chars, return a\
    \ word of size 1\n      words.push_back(s.substr(prev, len));\n      len--;\n\
    \      prev = pos = len;\n    }\n  }\n  words.push_back(s.substr(prev, pos));\n\
    \  return words;", "    std::vector<std::string> results;\n    std::string temp;\n\
    \    std::istringstream ss(s);\n    while (std::getline(ss, temp, ',')) {\n  \
    \      results.push_back(temp);\n    }\n    return results;", "    // Split your\
    \ string with ',' into words\n    std::vector<std::string> words(split(s.begin(),\
    \ s.end(), ','));\n    // Convert strings to lowercase\n    for (auto & w : words)\
    \ w = tolower(w);\n    return words;", "    std::vector<std::string> result;\n\
    \    std::istringstream stream(s);\n    std::string word;\n    while (std::getline(stream,\
    \ word, ',')) {\n        result.push_back(word);\n    }\n    return result;",
  "  std::vector<std::string> vs;\n  std::istringstream is(s);\n  std::string word;\n\
    \  while (std::getline(is, word, ',')) {\n    vs.push_back(word);\n  }\n  return\
    \ vs;", "  std::vector<std::string> word_list;\n  std::istringstream iss(s);\n\
    \  std::string word;\n\n  while(std::getline(iss, word, ',')) {\n    word_list.push_back(word);\n\
    \  }\n  return word_list;", "    s.erase(std::remove_if(s.begin(), s.end(), isspace),\
    \ s.end());\n    std::vector<std::string> elems;\n    std::string word;\n    std::stringstream\
    \ ss;\n    while(std::getline(std::cin,word,',')) ss.str(\"\");\n    ss << word;\n\
    \    for(std::string line; std::getline(ss, line, ','); ) {\n        elems.push_back(line);\n\
    \    }\n    return elems;", "    std::vector<std::string> tokens;\n    std::istringstream\
    \ ss(s);\n    std::string word;\n    while (std::getline(ss, word, ','))\n   \
    \     tokens.push_back(word);\n    return tokens;", "  // split string into words\n\
    \  std::vector<std::string> words;\n  std::string token = s;\n  int idx = 1;\n\
    \  do {\n    idx = token.find(',', idx + 1);\n    if (idx == std::string::npos)\
    \ idx = token.size();\n    token = token.substr(0, idx);\n    words.push_back(token);\n\
    \  } while (idx != std::string::npos);\n\n  return words;", "  assert(s.size()\
    \ > 0);\n  std::vector<std::string> words;\n  auto it = s.begin();\n  while (it\
    \ != s.end()) {\n    auto next = find_if(it, [&](char c) {\n      return !isspace(c);\n\
    \    });\n    words.push_back({ it + 1, next });\n    if (next == s.end()) {\n\
    \      words.push_back({ it + 1, s.end() });\n      break;\n    }\n    it = next;\n\
    \  }\n  return words;", "  std::string delimiter = \",\";\n  std::string word\
    \ = \"\";\n  std::vector<std::string> words;\n  int i = 0;\n  while (i < s.size())\
    \ {\n    size_t pos = s.find_first_of(delimiter, i);\n    if (pos == std::string::npos)\
    \ {\n      words.push_back(word);\n      word = \"\";\n      ++i;\n    } else\
    \ {\n      word = s.substr(i, pos - i);\n      i = pos + 1;\n    }\n  }\n  return\
    \ words;", "    s.erase(std::remove(s.begin(), s.end(), ','), s.end());\n    s.erase(std::remove(s.begin(),\
    \ s.end(), ' '), s.end());\n    std::vector<std::string> words;\n    std::stringstream\
    \ ss(s);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n \
    \       words.push_back(item);\n    }\n    return words;", "    assert(!s.empty());\n\
    \    std::vector<std::string> res;\n    std::string token;\n    std::stringstream\
    \ sstream(s);\n    while(std::getline(sstream, token, ',')) {\n        token =\
    \ trim(token);\n        res.push_back(token);\n    }\n    return res;", "    std::vector<std::string>\
    \ result;\n    size_t pos;\n    while (true) {\n        pos = s.find_first_of(\"\
    ,\", pos);\n        if (pos == std::string::npos) {\n            pos = s.length();\n\
    \        }\n        result.push_back(s.substr(0, pos));\n        s = s.substr(pos);\n\
    \    }\n    return result;", "  std::istringstream ss(s);\n  std::string token;\n\
    \  std::vector<std::string> tokens;\n  while (std::getline(ss, token, ',')) {\n\
    \    tokens.push_back(token);\n  }\n  return tokens;", "  std::vector<std::string>\
    \ elem;\n  // Write your logic here\n  for(auto it=std::sregex_token_iterator(s.begin(),s.end(),\"\
    [^,]+\",0); it!=std::sregex_token_iterator(); ++it)\n    elem.push_back(std::string(std::begin(*it),std::end(*it)));\n\
    \  return elem;", "    // your code goes here\n    std::vector<std::string> result;\n\
    \    for (char &c : s) {\n        if (c == ',' || c == ' ') {\n            std::string\
    \ temp;\n            for (char &c : s) {\n                c = c + 1;\n       \
    \     }\n            result.push_back(temp);\n        }\n    }\n    return result;",
  "    std::string arr;\n    std::replace(s.begin(), s.end(), ',', ' ');\n    std::stringstream\
    \ ss(s);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n \
    \       arr.push_back(item);\n    }\n    std::vector<std::string> ans;\n    std::string::size_type\
    \ last = 0;\n    std::string::size_type pos = 0;\n    while (last != s.size())\
    \ {\n        last = s.find_first_of(' ', pos);\n        std::string word;\n  \
    \      if (last == std::string::npos) {\n            word = s.substr(pos);\n \
    \       } else {\n            word = s.substr(pos, last - pos);\n        }\n \
    \       ans.push_back(word);\n        pos = last + 1;\n    }\n    return ans;",
  "        std::istringstream ss(s);\n        std::string item;\n        std::vector<std::string>\
    \ words;\n        while (std::getline(ss, item, ',')) {\n                words.append(item);\n\
    \        }\n        return words;", "    std::vector<std::string> words;\n\n \
    \   std::string token;\n    std::istringstream iss(s);\n    while (std::getline(iss,\
    \ token, ',')) {\n        words.push_back(token);\n    }\n\n    return words;",
  "    std::vector<std::string> res;\n    std::istringstream iss(s);\n    std::string\
    \ word;\n    while (std::getline(iss, word, ',')) {\n        res.push_back(word);\n\
    \    }\n    return res;", "    std::vector<std::string> elems;\n    std::istringstream\
    \ iss(s);\n    std::string token;\n    while (std::getline(iss, token, ',')) {\n\
    \        elems.push_back(token);\n    }\n    return elems;", "    std::vector<std::string>\
    \ words;\n    std::stringstream ss(s);\n    std::string word;\n    while (std::getline(ss,\
    \ word, ',')) {\n        words.push_back(word);\n    }\n    return words;", " \
    \ std::vector<std::string> words;\n  for (auto word : s) {\n    if (word != '\
    \ ') {\n      words.push_back(word);\n    }\n  }\n  return words;", "    std::istringstream\
    \ input(s);\n    std::vector<std::string> tokens;\n    std::string token;\n  \
    \  while (std::getline(input, token, ','))\n    {\n        tokens.push_back(token);\n\
    \    }\n    return tokens;", "  std::vector<std::string> words;\n  std::stringstream\
    \ ss(s);\n  std::string temp;\n  while(std::getline(ss, temp, ',')) {\n    words\
    \ += temp;\n  }\n  return words;", "    std::vector<std::string> tokens;\n   \
    \ // Loop through all tokens in the string\n    for (int i = 0; i < s.length();\
    \ i++) {\n        // Check if the token is a space, comma, or newline\n      \
    \  // If it is a space, add it to the token\n        // If it is a comma, add\
    \ it to the token\n        // If it is a newline, add it to the token\n      \
    \  if (s[i] == ' ' || s[i] == ',' || s[i] == '\\n') {\n            tokens.push_back(s.substr(0,\
    \ i));\n            s.erase(0, i + 1);\n        }\n    }\n    // Add the last\
    \ token\n    tokens.push_back(s);\n    return tokens;", "  // Split string on\
    \ spaces.\n  std::string delimiter = \", \";\n  std::vector<std::string> tokens;\n\
    \  std::istringstream tokenStream(s);\n  while (tokenStream >> std::ws) // Tokenize\
    \ on whitespace.\n  {\n    std::string token = tokenStream.str();\n    // Ignore\
    \ empty tokens\n    if (token.empty())\n      continue;\n    // Remove delimiter\
    \ characters\n    token.erase(std::remove(token.begin(), token.end(), delimiter),\
    \ token.end());\n    // Store the string in tokens array\n    tokens.push_back(token);\n\
    \  }\n  return tokens;", "  // Write your code here\n  std::string result = \"\
    \";\n  for (int i = 0; i < s.length(); i++)\n  {\n    if (i == 0 || s.at(i) !=\
    \ ' ' || s.at(i) != ',')\n      result += s.at(i);\n  }\n  std::vector<std::string>\
    \ words;\n  std::stringstream ss(result);\n  while (ss.good())\n  {\n    std::string\
    \ word;\n    ss >> word;\n    words.push_back(word);\n  }\n  return words;", " \
    \ std::string word = \"\";\n  std::vector<std::string> words;\n  int len = s.size();\n\
    \  for (int i = 0; i < len; ++i) {\n    if (s[i] == ',' || s[i] == ' ') \n   \
    \     word.clear();\n    else {\n        word += s[i];\n        words.push_back(word);\n\
    \    }\n  }\n  return words;", "        std::string delim = \",\";\n        std::string\
    \ splitBy = \"  \";\n        std::string word = \"Hello\";\n        std::string\
    \ words[10];\n        std::string word1 = \"\";\n        std::string word2 = \"\
    \";\n        std::string word3 = \"\";\n        std::string word4 = \"\";\n  \
    \      std::string word5 = \"\";\n        std::string word6 = \"\";\n        std::string\
    \ word7 = \"\";\n        std::string word8 = \"\";\n        std::string word9\
    \ = \"\";\n        std::istringstream ss(s);\n        std::string temp;\n    \
    \    while (std::getline(ss, temp, delim)) {\n                std::istringstream\
    \ str(temp);\n                while (std::getline(str, word, splitBy)) {\n   \
    \                     if(word == \"One\"){\n                                word1=\
    \ word;\n                        } \n                        if(word == \"Two\"\
    ){\n                                word2= word;\n                        } \n\
    \                        if(word == \"Three\"){\n                            \
    \    word3= word;\n                        } \n                        if(word\
    \ == \"Four\"){\n                                word4= word;\n              \
    \          } \n                        if(word == \"Five\"){\n               \
    \                 word5= word;\n                        } \n                 \
    \       if(word == \"Six\"){\n                                word6= word;\n \
    \                       } \n                        if(word == \"Seven\"){\n \
    \                               word7= word;\n                        } \n   \
    \                     if(word == \"Eight\"){\n                               \
    \ word8= word;\n                        } \n                        if(word ==\
    \ \"Nine\"){\n                                word9= word;\n                 \
    \       } \n                }\n        }\n        words[0] = word1;\n        words[1]\
    \ = word2;\n        words[2] = word3;\n        words[3] = word4;\n        words[4]\
    \ = word5;\n        words[5] = word6;\n        words[6] = word7;\n        words[7]\
    \ = word8;\n        words[8] = word9;\n        return words;", "  std::vector<std::string>\
    \ result;\n  std::stringstream ss(s);\n  std::string word;\n  while (std::getline(ss,\
    \ word, ',')) {\n    result.push_back(word);\n  }\n  return result;", "  std::istringstream\
    \ iss(s);\n  std::vector<std::string> words;\n  std::string word;\n  while (std::getline(iss,\
    \ word, ',')) {\n    words.push_back(word);\n  }\n  return words;", "  std::vector<std::string>\
    \ result;\n  std::istringstream iss(s);\n  std::string word;\n  while (iss >>\
    \ word) result.push_back(word);\n  return result;", "  // Write your code here\n\
    \  std::istringstream ss(s);\n  std::string word;\n  std::vector<std::string>\
    \ word_vector;\n  while (std::getline(ss, word, ','))\n    word_vector.push_back(word);\n\
    \  return word_vector;", "    assert(s == \"Hi, my name is John\");\n    // Write\
    \ your code here\n    return {};", "  std::vector<std::string> result;\n  std::size_t\
    \ pos = 0;\n  while (pos != std::string::npos) {\n    pos = s.find(\",\", pos);\n\
    \    if (pos != std::string::npos) {\n      result.push_back(s.substr(0, pos));\n\
    \      s = s.substr(pos + 1);\n    }\n    pos = s.find(\" \", pos);\n    if (pos\
    \ != std::string::npos) {\n      result.push_back(s.substr(0, pos));\n      s\
    \ = s.substr(pos + 1);\n    }\n  }\n  result.push_back(s);\n  return result;",
  "    std::vector<std::string> v;\n    std::istringstream ss(s);\n    std::string\
    \ item;\n    while (std::getline(ss, item, ';')) {\n        v.push_back(std::move(item));\n\
    \    }\n    return v;", "  assert(!s.empty());\n  std::vector<std::string> res;\n\
    \  std::string word = \"\";\n  std::string str = \"\";\n  for (char c : s) {\n\
    \    if (!std::isspace(c)) {\n      if (word.empty()) {\n        word = c;\n \
    \       str = c;\n      } else {\n        res.push_back(word);\n        word =\
    \ c;\n        str = c;\n      }\n    } else {\n      if (word.empty()) {\n   \
    \     str += c;\n      } else {\n        res.push_back(word);\n        word =\
    \ c;\n      }\n    }\n  }\n  if (!word.empty()) {\n    res.push_back(word);\n\
    \  }\n  return res;", "  std::istringstream iss(s);\n  std::string word;\n  std::vector<std::string>\
    \ words;\n  while (iss >> word) {\n    words.push_back(word);\n  }\n  return words;",
  "    // Write your code here\n    return { s.begin(), s.end() };", "    // Write\
    \ your code here\n    std::vector<std::string> words_string;\n    size_t pos =\
    \ 0;\n    for (pos = 0; pos < s.size();) {\n        std::string word = s.substr(pos,\
    \ (pos += 2));\n        if (word.empty()) {\n            words_string.emplace_back(word);\n\
    \        }\n    }\n    return words_string;", "    std::vector<std::string> v;\n\
    \    std::istringstream iss(s);\n    std::string word;\n    while (std::getline(iss,\
    \ word, ',')) {\n        v.push_back(word);\n    }\n    return v;", "    std::vector<std::string>\
    \ words;\n    std::string word;\n    std::string delimiter = \",\";\n    size_t\
    \ pos = 0;\n    size_t endpos = 0;\n    bool flag = false;\n    while (pos < s.size())\
    \ {\n        endpos = s.find(delimiter, pos);\n        if (endpos == std::string::npos)\
    \ {\n            words.push_back(s.substr(pos, s.size()));\n            pos =\
    \ s.size();\n        } else {\n            word = s.substr(pos, endpos - pos);\n\
    \            words.push_back(word);\n            pos = endpos + 1;\n        }\n\
    \    }\n    if (pos != s.size()) {\n        words.push_back(s.substr(pos));\n\
    \    }\n    return words;", "    assert(!s.empty());\n    std::vector<std::string>\
    \ words;\n    std::stringstream ss(s);\n    std::string item;\n    while (std::getline(ss,\
    \ item, ',')) {\n        words.push_back(item);\n    }\n    return words;", " \
    \   // TODO: Write your code here\n    std::vector<std::string> arr;\n    std::string\
    \ words;\n    int start = 0;\n    while (true) {\n        std::size_t next_space\
    \ = s.find(' ', start);\n        if (next_space == std::string::npos) {\n    \
    \        words = s.substr(start);\n            arr.push_back(words);\n       \
    \     break;\n        } else {\n            words = s.substr(start, next_space);\n\
    \            arr.push_back(words);\n            start = next_space + 1;\n    \
    \    }\n    }\n    return arr;", "    s.erase(std::remove(s.begin(), s.end(),\
    \ ','), s.end());\n    s.erase(std::remove(s.begin(), s.end(), '.'), s.end());\n\
    \    s.erase(std::remove(s.begin(), s.end(), ' '), s.end());\n    std::vector<std::string>\
    \ result;\n    std::string word = \"\";\n    for (std::string::iterator i = s.begin();\
    \ i != s.end(); i++) {\n        if (*i == ',' || i == '.' || i == s.begin() ||\
    \ *i == ' ') {\n            if (word.size() > 0) {\n                result.push_back(word);\n\
    \            }\n            word = \"\";\n        } else {\n            word =\
    \ word + (*i);\n        }\n    }\n    if (word.size() > 0) {\n        result.push_back(word);\n\
    \    }\n    return result;", "  std::vector<std::string> words;\n  std::string\
    \ word = \"\";\n  // Split string into words\n  for (char c : s) {\n    if (c\
    \ == '\\'') {\n      // If last char is ' ', split word\n      if (word.length()\
    \ > 0) {\n        words.push_back(word);\n        word = \"\";\n      }\n    \
    \  // If last char is not ' ', add to word\n    } else {\n      word += c;\n \
    \   }\n  }\n  // If last word is blank\n  if (word.length() > 0) {\n    words.push_back(word);\n\
    \  }\n  // Return all words\n  return words;", "    std::string s_trim(s.c_str());\n\
    \    s_trim.erase(std::find_if(s_trim.begin(), s_trim.end(), ::isspace), s_trim.end());\n\
    \    std::istringstream ss(s_trim);\n    std::vector<std::string> words;\n   \
    \ std::string word;\n    while (std::getline(ss, word, ',')) {\n        words.push_back(word);\n\
    \    }\n    return words;", "    std::vector<std::string> res;\n    std::vector<std::string>\
    \ temp;\n    std::stringstream ss;\n    ss << s;\n    std::string token;\n   \
    \ while (getline(ss, token, ',')) {\n        temp.push_back(token);\n    }\n \
    \   res.clear();\n    for (int i = 0; i < temp.size(); i++) {\n        res.push_back(temp[i]);\n\
    \    }\n    return res;", "    std::vector<std::string> vec;\n    // Your code\
    \ goes here\n    return vec;", "  std::stringstream ss(s);\n  std::string word;\n\
    \  std::vector<std::string> words;\n  while (std::getline(ss, word, ',')) {\n\
    \    words.push_back(word);\n  }\n  return words;", "  std::vector<std::string>\
    \ result;\n  std::size_t n = s.size();\n  std::vector<char> v;\n\n  for (std::size_t\
    \ i = 0; i < n; i++) {\n    char ch = s[i];\n    if (ch == ' ' || ch == ',' ||\
    \ ch == ')') continue;\n    v.push_back(ch);\n  }\n  std::reverse(v.begin(), v.end());\n\
    \n  for (std::size_t i = 0; i < v.size(); i++) {\n    if (v.at(i) == ',' || v.at(i)\
    \ == ')') {\n      auto result = std::accumulate(result.begin(), result.end(),\
    \ std::vector<std::string>());\n      result.emplace_back(v.begin() + i, v.end());\n\
    \      v.clear();\n    } else {\n      result.push_back(v.at(i));\n      v.at(i)\
    \ = 0;\n    }\n  }\n\n  return result;", "  std::vector<std::string> words;\n\
    \  std::string temp;\n  int i = 0;\n  int begin = 0;\n  int end = 0;\n  while\
    \ (i < s.size()) {\n    end = s.find(\" \", begin);\n    if (end == std::string::npos)\
    \ {\n      end = s.size();\n    }\n    temp = s.substr(begin, end - begin);\n\
    \    words.push_back(temp);\n    begin = end + 1;\n    i++;\n  }\n  return words;",
  '    // Code here', "  s = s.substr(0, s.find_first_of(\",\"));\n  return std::sregex_token_iterator(s.begin(),\
    \ s.end(), \" \", -1);", "  std::vector<std::string> vec;\n  std::istringstream\
    \ iss(s);\n  std::string item;\n  while (std::getline(iss, item, ',')) {\n   \
    \ vec.push_back(item);\n  }\n  return vec;", "    std::vector<std::string> res;\n\
    \    size_t pos;\n    pos = s.find(',');\n    if (pos == std::string::npos) {\n\
    \        pos = s.find(' ');\n    }\n    if (pos != std::string::npos) {\n    \
    \    while (pos != std::string::npos && pos < s.size()) {\n            res.emplace_back(s.substr(0,\
    \ pos));\n            s = s.substr(pos + 1);\n            pos = s.find(',');\n\
    \            if (pos == std::string::npos) {\n                pos = s.find(' ');\n\
    \            }\n        }\n        res.emplace_back(s);\n    }\n    return res;",
  "  std::vector<std::string> result;\n\n  for (auto word_iter = s.cbegin(); word_iter\
    \ != s.cend(); ++word_iter) {\n    if (isspace(*word_iter)) {\n      result.emplace_back(*word_iter);\n\
    \      ++word_iter;\n      while (word_iter != s.cend() && !isspace(*word_iter))\
    \ {\n        ++word_iter;\n      }\n      continue;\n    }\n    result.emplace_back(*word_iter);\n\
    \  }\n  return result;", "  std::vector<std::string> vec;\n  if (s == \"\") return\
    \ vec;\n  std::istringstream ss(s);\n  std::string item;\n  while (std::getline(ss,\
    \ item, ',')) {\n    vec.push_back(item);\n  }\n  return vec;", "    auto vec\
    \ = std::vector<std::string>{};\n    auto split = s.begin();\n    while (true)\
    \ {\n        auto first = split;\n        split += std::find(split, s.end(), ',');\n\
    \        split += std::find(split, s.end(), ' ');\n        vec.push_back(std::string(first,\
    \ split - first));\n        if (split == s.end()) {\n            break;\n    \
    \    }\n    }\n    return vec;", "    std::vector<std::string> str_vec(s.begin(),\
    \ s.end());\n    for (size_t i = 0; i < str_vec.size(); ++i) {\n        str_vec[i]\
    \ = str_vec[i].to_string();\n    }\n    return str_vec;", '    // Your code here',
  "   std::vector<std::string> words;\n   std::stringstream ss;\n   ss << s;\n   std::string\
    \ token;\n   while (std::getline(ss, token, ',')) {\n       words += token;\n\
    \   }\n   return words;", "    auto words = split(s, is_any_of(\" ,\"));\n   \
    \ std::vector<std::string> result;\n    for (auto& word : words) {\n        result.push_back(word);\n\
    \    }\n    return result;", "    std::vector<std::string> result;\n    std::string\
    \ temp;\n    // Iterate over string to get each word\n    for (int i = 0; i <\
    \ s.length(); i++) {\n        if (s[i] == ',' || s[i] == ' ') {\n            //\
    \ If there is a comma at the end of word or space then store the current word.\n\
    \            if (temp.length() > 0) {\n                result.push_back(temp);\n\
    \                temp.clear();\n            }\n        } else if (s[i] == '\\\
    n') {\n            // If there is a newline at the end of word then store the\
    \ last word.\n            if (temp.length() > 0) {\n                result.push_back(temp);\n\
    \                temp.clear();\n            }\n        } else {\n            //\
    \ If not spaces or commas then add word to the current word\n            temp.push_back(s[i]);\n\
    \        }\n    }\n    // If there is a last word then store it\n    if (temp.length()\
    \ > 0) {\n        result.push_back(temp);\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    auto p = std::sregex_token_iterator(s.begin(), s.end(), \",\",\
    \ -1);\n    auto r = std::sregex_token_iterator();\n    for ( ; p != r; ++p)\n\
    \    {\n        result.push_back(std::string(std::begin(*p), std::end(*p)));\n\
    \    }\n    return result;", "  // Write your code here\n  return std::vector<std::string>();",
  "    auto words = s.substr(0, s.find_first_of(\" \")).split(\n        \",\", [](char\
    \ c) {return std::tolower(c); });\n    words.erase(std::remove(words.begin(),\
    \ words.end(), \"\"), words.end());\n    return words;", "  std::stringstream\
    \ ss(s);\n  std::string token;\n  std::vector<std::string> words;\n\n  while (std::getline(ss,\
    \ token, ',')) {\n    words.push_back(token);\n  }\n  while (std::getline(ss,\
    \ token, ' ')) {\n    words.push_back(token);\n  }\n  return words;", "    std::vector<std::string>\
    \ words;\n    std::string word;\n    std::stringstream iss(s);\n    while (std::getline(iss,\
    \ word, ',')) {\n        words.push_back(word);\n    }\n    return words;", " \
    \ std::string result;\n  std::stringstream ss;\n  ss << s;\n  std::getline(ss,\
    \ result, ',');\n  std::getline(ss, result, ',');\n  std::getline(ss, result,\
    \ ',');\n  std::getline(ss, result, ',');\n  std::getline(ss, result, ',');\n\
    \  std::getline(ss, result, ',');\n  std::getline(ss, result, ',');\n  std::getline(ss,\
    \ result, ',');\n  std::getline(ss, result, ',');\n  return std::vector<std::string>{result,\
    \ result, result, result, result, result, result, result};", "  std::vector<std::string>\
    \ result;\n  std::istringstream is(s);\n  std::string item;\n  while (std::getline(is,\
    \ item, ',')) {\n    result.push_back(item);\n  }\n  return result;", "\tstd::vector<std::string>\
    \ result;\n\tstd::istringstream stream{s};\n\tstd::string word;\n\twhile (std::getline(stream,\
    \ word, ',')) {\n\t\tresult.push_back(word);\n\t}\n\treturn result;", "  std::vector<std::string>\
    \ splitted;\n  std::size_t pos = 0, n = s.length();\n  while (pos < n) {\n   \
    \ pos = s.find_first_of(\", ,\", pos);\n    if (pos != n)\n      splitted.push_back(s.substr(pos,\
    \ n - pos));\n    pos = s.find_first_of(\", ,\", pos + 1);\n  }\n  return splitted;",
  "    std::vector<std::string> words;\n    std::string delimiter = \",\";\n    std::istringstream\
    \ ss(s);\n    std::string word;\n\n    while (std::getline(ss, word, delimiter))\
    \ {\n        words.push_back(word);\n    }\n\n    return words;", "    std::vector<std::string>\
    \ elems;\n    std::istringstream ss(s);\n    std::string elem;\n    while (std::getline(ss,\
    \ elem, ';')) {\n        elems.push_back(elem);\n    }\n    return elems;", " \
    \   assert(!s.empty());\n    std::vector<std::string> res;\n    auto itr = s.begin();\n\
    \    auto end = s.end();\n    while (itr != end) {\n        std::size_t next =\
    \ find_first_of(itr, end, '.');\n        if (next == end) {\n            res.emplace_back(itr);\n\
    \            break;\n        }\n        res.emplace_back(itr, next);\n       \
    \ ++itr;\n    }\n    return res;", "  // Write your code here\n  return {};",
  "    size_t n = s.size();\n    std::vector<std::string> v;\n    for (size_t i =\
    \ 0; i < n; i++) {\n        std::string word;\n        size_t pos = s.find(i);\n\
    \        if (pos == std::string::npos) {\n            pos = n; // No more spaces,\
    \ so no more words!\n        }\n        word = s.substr(0, pos);\n        v.resize(v.size()\
    \ + 1);\n        v[i] = word;\n        s = s.substr(pos);\n    }\n    return v;",
  "    std::vector<std::string> result;\n\n    // Write your code here\n    //\n \
    \   result.emplace_back(s.begin(), s.end());\n    return result;", "  std::vector<std::string>\
    \ tokens;\n  // You can use getline to split the string but you may want to use\
    \ stringstream to read each word and push it into tokens vector\n  std::istringstream\
    \ ss(s);\n  std::string token;\n  while (std::getline(ss, token, ',')) {\n   \
    \ tokens.push_back(token);\n  }\n  return tokens;", "    std::vector<std::string>\
    \ ret;\n    auto p = s.c_str();\n    const char *first = p, *last = nullptr;\n\
    \    while (1) {\n        auto n = strcspn(p, \", \\n\");\n        if (n == 0)\
    \ break;\n        if (n) last = first + n;\n        ret.emplace_back(p, last);\n\
    \        p += last - first;\n        first = last;\n    }\n    ret.emplace_back(p,\
    \ last);\n    return ret;", "  std::vector<std::string> tokens;\n  split(tokens,\
    \ s);\n  return tokens;", "    std::vector<std::string> tokens;\n    std::string\
    \ temp;\n    for (auto itr = s.begin(); itr != s.end(); ++itr) {\n        if (itr\
    \ != s.begin()) {\n            temp = temp + \",\";\n        }\n        temp =\
    \ temp + itr->c_str();\n    }\n    size_t pos = temp.find(\",\");\n    while (pos\
    \ != std::string::npos) {\n        tokens.push_back(std::string(temp.substr(0,\
    \ pos)));\n        temp = temp.substr(pos + 1);\n        pos = temp.find(\",\"\
    );\n    }\n    tokens.push_back(std::string(temp));\n    return tokens;", "  \
    \  std::vector<std::string> words;\n    std::istringstream ss(s);\n    std::string\
    \ word;\n    while (std::getline(ss, word, ',')) {\n        words.push_back(word);\n\
    \    }\n    return words;", "    std::vector<std::string> words;\n    for (auto\
    \ &w: s.split(',')){\n        w = w.trim();\n        if (w.length() >0){\n   \
    \         words.push_back(w.to_string() + \" \" + w.substr(0,w.length()-1));\n\
    \        }\n    }\n    return words;", "    std::vector<std::string> words;\n\
    \    // Add each word in string s into words vector\n    for (std::string w; std::getline(std::cin,\
    \ w); ) {\n        // Add w into words vector\n        words.push_back(w);\n \
    \   }\n    // Return words\n    return words;", "    auto words = split(s, ' ');\n\
    \    std::vector<std::string> res(begin(words), end(words));\n    return res;",
  "    std::vector<std::string> words;\n    std::string t;\n    size_t pos = 0;\n\
    \    while ((pos = s.find(\",\", pos)) != std::string::npos) {\n        t = s.substr(0,\
    \ pos);\n        words.push_back(t);\n        s = s.substr(pos + 1);\n    }\n\
    \    t = s;\n    words.push_back(t);\n    return words;", "    std::vector<std::string>\
    \ words;\n    std::istringstream iss(s);\n    std::string word;\n    while (std::getline(iss,\
    \ word, ',')) {\n        words.push_back(word);\n    }\n    return words;", " \
    \ std::vector<std::string> v;\n  std::string str = s.at(0);\n  v.push_back(str);\n\
    \  for (size_t i = 1; i < s.size(); i++) {\n    str = s.at(i);\n    if (str.size()\
    \ > 1 && str[0] == '\"' && str[str.length() - 1] == '\"') {\n      str = str.substr(1,\
    \ str.length() - 2);\n    }\n    v.push_back(str);\n  }\n  return v;", "  std::stringstream\
    \ ss;\n  std::string item;\n  std::vector<std::string> words;\n\n  while (std::getline(ss,\
    \ item, ',')) {\n    words.push_back(item);\n  }\n\n  while (std::getline(ss,\
    \ item, ' ')) {\n    words.push_back(item);\n  }\n\n  return words;", "    std::vector<std::string>\
    \ result;\n    std::istringstream in(s);\n    std::string item;\n    while (std::getline(in,\
    \ item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
  "  // Write your code here\n  std::vector<std::string> result;\n  \n  //read all\
    \ words from the string into a vector of strings.\n  \n  \n  //split the string\
    \ by the comma\n  \n  //insert each word in the result vector.\n  \n  return result;",
  "  std::vector<std::string> words;\n  std::istringstream stream(s);\n  std::string\
    \ word;\n  while (std::getline(stream, word, ',')) {\n    words.push_back(word);\n\
    \  }\n  return words;", "    std::vector<std::string> words;\n    std::istringstream\
    \ iss(s);\n    std::string word;\n    while (std::getline(iss, word, ',')) {\n\
    \        words.push_back(word);\n    }\n    return words;", "        std::vector<std::string>\
    \ words;\n        std::stringstream stream(s);\n        std::string word;\n  \
    \      while (std::getline(stream, word, ',')) {\n                words.push_back(word);\n\
    \        }\n        return words;", "    std::istringstream ss(s);\n    std::string\
    \ word;\n    std::vector<std::string> result;\n    while (std::getline(ss, word,\
    \ ',')) {\n        result.push_back(word);\n    }\n    return result;", "  std::vector<std::string>\
    \ v;\n  std::istringstream iss(s);\n  std::string word;\n  while (std::getline(iss,\
    \ word, ',') && word.length())\n    v.push_back(word);\n  return v;", "    //\
    \ Split the string with spaces.\n    std::vector<std::string> words;\n    std::string\
    \ word;\n    std::stringstream ss;\n    ss.str(s);\n    std::string item;\n  \
    \  while (std::getline(ss, item, ',')) {\n        word = item;\n        words.push_back(word);\n\
    \    }\n    return words;", "    std::vector<std::string> words;\n    \n    //\
    \ Split by spaces or commas.\n    boost::split(words, s, boost::is_any_of(\",\"\
    ), boost::token_compress_on);\n    \n    return words;", "    auto words = s.begin(),\
    \ words_end = s.end();\n    std::string word;\n    while (words != words_end)\
    \ {\n        std::cin >> word;\n        if (word != ',' && word != ' ') {\n  \
    \          words.push_back(word);\n        }\n    }\n    return std::vector<std::string>(words.begin(),\
    \ words.end());", "  s = s.substr(0, s.size() - 1);\n  std::istringstream stream(s);\n\
    \  std::vector<std::string> result;\n  while (stream >> std::ws) {\n    result.push_back(std::ws);\n\
    \  }\n  return result;", "  std::vector<std::string> v;\n  std::size_t i = 0;\n\
    \  while (i < s.size()) {\n    v.push_back(s.substr(i, s[i] - i));\n    i += s[i]\
    \ - i;\n  }\n  return v;", "  assert(!s.empty());\n  std::vector<std::string>\
    \ result;\n\n  // Initialize a vector of strings\n  std::string token = \"\";\n\
    \  for (size_t i = 0; i < s.size(); i++) {\n    if (s.at(i) == ',' || s.at(i)\
    \ == ' ')\n      token = s.substr(0, i);\n    result.push_back(token);\n    token\
    \ = \"\";\n  }\n\n  // Push the last token\n  result.push_back(token);\n  return\
    \ result;", "  std::vector<std::string> result;\n  std::string item;\n  std::stringstream\
    \ ss;\n\n  while (std::getline(ss, item, ',')) {\n    result.push_back(item);\n\
    \  }\n\n  return result;", "  std::vector<std::string> svec;\n  for (std::string\
    \ line : split(s, \",\"))\n    for (std::string word : split(line, \" \"))\n \
    \     svec.push_back(word);\n  return svec;", "    std::vector<std::string> result;\n\
    \    std::istringstream iss(s);\n    std::string word;\n    while (std::getline(iss,\
    \ word, ',')) {\n        result.push_back(word);\n    }\n    return result;",
  "  std::vector<std::string> ans;\n  std::string word;\n  std::istringstream ss(s);\n\
    \  while (std::getline(ss, word, ',')) {\n    ans.push_back(word);\n  }\n  return\
    \ ans;", "  std::vector<std::string> tokens;\n  std::string temp;\n  temp = s;\n\
    \  size_t pos = 0;\n  while (pos != std::string::npos) {\n    pos = temp.find_first_of(\"\
    \ ,\", pos);\n    tokens.push_back(temp.substr(0, pos));\n    temp = temp.substr(pos\
    \ + 1);\n    pos = temp.find_first_of(\" ,\", pos);\n  }\n  tokens.push_back(temp);\n\
    \  return tokens;", "    std::stringstream ss(s);\n    std::string word;\n   \
    \ std::vector<std::string> res;\n    while (std::getline(ss, word, ',')) {\n \
    \       res.push_back(word);\n    }\n    return res;", "    std::vector<std::string>\
    \ words;\n    size_t i = 0;\n    size_t cur = 0;\n    size_t len = s.length();\n\
    \    char ch;\n    while (i < len) {\n        ch = s[i++];\n        if (ch ==\
    \ ',') {\n            words.push_back((std::string(cur, i - 1)));\n          \
    \  cur = i + 1;\n        }\n    }\n    words.push_back((std::string(cur, len -\
    \ 1)));\n    return words;", "    std::vector<std::string> words;\n    std::string\
    \ current;\n    size_t pos = 0;\n    for (std::string::iterator itr = s.begin();\
    \ itr != s.end(); ++itr) {\n        if (itr == s.begin()) {\n            current\
    \ = *itr;\n            words.push_back(current);\n            pos = 1;\n     \
    \   } else {\n            if (itr != s.begin()) {\n                current = *itr;\n\
    \                words.push_back(current);\n            }\n            if (current\
    \ == ',') {\n                pos = 0;\n            }\n        }\n    }\n    return\
    \ words;", "    // Write your code here\n    std::vector<std::string> ans;\n \
    \   std::string temp;\n    for (auto & c: s) {\n        if (c==',' || c==' ')\
    \ {\n            if (ans.size()!=0)\n                ans.push_back(temp);\n  \
    \          ans.push_back(std::string());\n            temp=std::string();\n  \
    \      } else {\n            temp += c;\n        }\n    }\n    if (ans.size()!=0)\n\
    \        ans.push_back(temp);\n    return ans;", "  std::vector<std::string> words;\n\
    \  std::istringstream stream(s);\n  std::string word;\n  while (std::getline(stream,\
    \ word, ',')) {\n    words.push_back(word);\n  }\n  return words;", "    std::vector<std::string>\
    \ tokens;\n    size_t prev = 0;\n    for (size_t i = 0; i < s.size(); i++) {\n\
    \        if (s[i] == ',') {\n            tokens.emplace_back(s.substr(prev, i\
    \ - prev));\n            prev = i + 1;\n        }\n    }\n    tokens.emplace_back(s.substr(prev,\
    \ s.size() - prev));\n    return tokens;", "    std::vector<std::string> result;\n\
    \    std::string temp = \"\";\n    for (auto itr = std::sregex_token_iterator(s.begin(),\
    \ s.end(), \n        [](char ch) { return std::regex_match(ch, std::regex(\"[,\\\
    \\s]+\")); }); \n        itr != std::sregex_token_iterator(); ++itr) {\n     \
    \   temp += *itr;\n        result.push_back(temp);\n        temp = \"\";\n   \
    \ }\n    return result;", "  // Write your code here\n  std::string result;\n\
    \  result = s.substr(0, s.find(','));\n  for(int i=0;i<result.length();i++) {\n\
    \    if(result.at(i)==',') {\n      result.erase(i);\n    }\n  }\n  for(int i=0;i<result.length();i++)\
    \ {\n    if(result.at(i)==' ') {\n      result.erase(i);\n    }\n  }\n  std::vector<std::string>\
    \ words(std::sregex_token_iterator(result.begin(), result.end(), \n      std::sregex(\"\
    \ \"), std::to_string(result.length())));\n  return words;", "  std::vector<std::string>\
    \ result;\n  std::string token;\n  std::istringstream stream(s);\n  while(std::getline(stream,\
    \ token, ' ')) {\n    result.push_back(token);\n  }\n  return result;", "  //\
    \ Your code goes here\n  return {};", "  // Write your code here.\n  std::string\
    \ word;\n  std::istringstream ss(s);\n  std::vector<std::string> vs;\n  while\
    \ (std::getline(ss, word, ','))\n    vs.push_back(word);\n  return vs;", "   \
    \ std::vector<std::string> word_list;\n    for (auto it : std::istringstream(s).std::istream_iterator<std::string>())\
    \ {\n        word_list.push_back(it);\n    }\n    return word_list;", "    std::vector<std::string>\
    \ res;\n    size_t last_comma = 0;\n    size_t last_space = 0;\n    for (size_t\
    \ i = 0; i <= s.size(); i++) {\n        if (s[i] == ',') {\n            if (last_space\
    \ == i) {\n                last_comma = i;\n            }\n        } else {\n\
    \            assert(s[i] == ' ');\n            assert(last_space < i);\n     \
    \       if (last_comma != i) {\n                res.push_back(s.substr(last_comma,\
    \ i - last_comma));\n                last_comma = i;\n                last_space\
    \ = i;\n            }\n        }\n    }\n    res.push_back(s.substr(last_comma));\n\
    \    return res;", "    auto p = s.c_str();\n    auto p1 = p;\n    auto p2 = p\
    \ + s.size();\n    while (p1 != p2) {\n        if (*p1 == '\"') {\n          \
    \  auto p3 = p1 + 1;\n            while (!(*p3 | '\"') && p3 < p2) {\n       \
    \         p3++;\n            }\n            if (*p3 == '\"') {\n             \
    \   auto p4 = p3;\n                while (*p4 != '\\'') {\n                  \
    \  p4++;\n                }\n                p2 = p3;\n            }\n       \
    \ }\n        p1++;\n    }\n    std::vector<std::string> words;\n    while (p1\
    \ != p2) {\n        auto e = p1;\n        while (*(p1 - 1) != ',' && *p1 != '\"\
    ' && *p1 != ' ') {\n            auto e--;\n        }\n        words.emplace_back(p1,\
    \ e);\n        p1++;\n    }\n    return words;", "    std::vector<std::string>\
    \ result;\n    std::istringstream iss(s);\n    std::string word;\n    while (std::getline(iss,\
    \ word, ',')) {\n        result.push_back(word);\n    }\n    return result;",
  "    std::vector<std::string> v;\n    std::string delims(\", \\t\");\n    std::size_t\
    \ prev_pos = 0;\n    auto it = s.begin();\n    while (it != s.end()) {\n     \
    \   std::size_t pos = it.find_first_of(delims, prev_pos);\n        if (pos ==\
    \ std::string::npos) {\n            pos = s.size();\n        }\n        std::string\
    \ sub_s = s.substr(prev_pos, pos - prev_pos);\n        v.push_back(sub_s);\n \
    \       prev_pos = pos + 1;\n        it = s.begin();\n    }\n    return v;"]
stop_tokens:
- "\n}"
