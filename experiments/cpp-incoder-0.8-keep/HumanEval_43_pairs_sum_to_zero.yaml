name: HumanEval_43_pairs_sum_to_zero
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes a\
  \ list of integers as an input.\n// it returns True if there are two distinct elements\
  \ in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
  \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
  \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
  \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
  \ l) {\n"
tests: "}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
  \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2, 1})))\
  \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7}))) == (false));\n\
  \    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7}))) == (true));\n  \
  \  assert(candidate((std::vector<long>({1}))) == (false));\n    assert(candidate((std::vector<long>({-3,\
  \ 9, -1, 3, 2, 30}))) == (true));\n    assert(candidate((std::vector<long>({-3,\
  \ 9, -1, 3, 2, 31}))) == (true));\n    assert(candidate((std::vector<long>({-3,\
  \ 9, -1, 4, 2, 30}))) == (false));\n    assert(candidate((std::vector<long>({-3,\
  \ 9, -1, 4, 2, 31}))) == (false));\n}\n"
completions: ["    long long int t = 0;\n    for (auto it1 = l.begin(); it1 != l.end();\
    \ it1++) {\n        t += *it1;\n    }\n\n    for (auto it2 = l.begin(); it2 !=\
    \ l.end(); it2++) {\n        if (t < 0) {\n            t = t + it2;\n        }\
    \ else {\n            return false;\n        }\n    }\n    return true;", "\t\
    long sum = 0;\n\tfor (long i = 0; i < l.size(); i++) {\n\t\tsum += l[i];\n\t\t\
    if (sum < 0) {\n\t\t\tsum = 0;\n\t\t}\n\t}\n\treturn (l.size() == 2);", "    long\
    \ long ans = 0, sum = 0;\n    for (auto i : l) {\n        sum += i;\n    }\n \
    \   if (sum == 0)\n        return true;\n    for (auto i : l) {\n        ans +=\
    \ (i * sum) / 2;\n    }\n    return (ans == 0);", "  std::sort(l.begin(),l.end());\n\
    \  for(int i=0;i<l.size();i++){\n    if(l[i]+l[i+1]==0){\n      return true;\n\
    \    }\n  }\n  return false;", "   long sum = 0;\n   for (long x : l) sum += x;\n\
    \   return (sum == 0);", "  long long ans = 0;\n  for (int i = 0; i < l.size()\
    \ - 1; i++) {\n    long long curr = l[i] + l[i + 1];\n    if (curr <= 0) {\n \
    \     return false;\n    }\n    ans += curr;\n  }\n  return ans == 0;", "    long\
    \ long int sum = 0;\n    for(auto const& val : l) {\n        sum += val;\n   \
    \ }\n    return sum == 0;", "    long long int sum=0;\n    for(int i=0;i<l.size();i++){\n\
    \        sum+=l[i];\n    }\n    return sum==0;", "    int len = l.size();\n  \
    \  if(len < 2)\n        return true;\n    std::vector<long> a = l;\n    std::vector<long>\
    \ b(len, 0);\n    for(int i = 0; i < len - 1; i++) {\n        for(int j = i +\
    \ 1; j < len; j++) {\n            b[i] += a[j];\n            if(i != j)\n    \
    \            a[j] = 0;\n            else\n                if(b[i] != 0)\n    \
    \                return false;\n        }\n    }\n    return true;", "    std::set<long>\
    \ s1(l.begin(), l.end());\n    for (long i : l)\n        s1.erase(i);\n    return\
    \ s1.empty();", "    if (l.size() == 0) return false;\n    long long s = l.back();\n\
    \    long long k = l.front();\n    // loop through the list backwards and compare\
    \ with the current element.\n    for (long long i = l.size(); i > 1; i--) {\n\
    \        long long nextSum =\n                (i == l.size() || i < l.size() ?\
    \ l[i - 1] + l[i] : l[i - 1]);\n        if (nextSum == 0) return true;\n     \
    \   if (nextSum < s) return false;\n        s = nextSum;\n        k = l[i];\n\
    \    }\n    return false;", "\tstd::sort(l.begin(), l.end());\n\tlong long sum\
    \ = 0;\n\tfor (long i = 1; i < l.size(); ++i) {\n\t\tsum += l[i - 1];\n\t\tif\
    \ (sum == 0)\n\t\t\treturn true;\n\t}\n\treturn false;", "    std::vector<std::pair<long,\
    \ long> > v;\n    for (long i = 0; i < l.size(); i++)\n        v.push_back({l[i],\
    \ 0});\n    for (long i = 0; i < l.size(); i++)\n        for (long j = i + 1;\
    \ j < l.size(); j++)\n            if (l[i] + l[j] != 0)\n                return\
    \ false;\n    return true;", "  // your code goes here\n  long long sum = 0;\n\
    \  for (long long i = 0; i < l.size() - 1; i++) {\n    sum += l[i];\n    if (sum\
    \ > 0) {\n      long long nextSum = sum - l[i];\n      if (nextSum < 0)\n    \
    \    nextSum += l.size();\n      if (nextSum == 0)\n        return true;\n   \
    \ }\n  }\n  return false;", "    int n = 0;\n    int zero = 0;\n    for (auto\
    \ it=l.begin();it!=l.end();it++){\n        n+=*it;\n        if (n==0){\n     \
    \       zero+=*it;\n        }\n    }\n    return (n==zero);", "    long s = 0;\n\
    \    for (long i = 0; i < l.size(); ++i) {\n        s = s + l[i];\n    }\n   \
    \ int count = 0;\n    for (long i = 0; i < l.size(); ++i) {\n        count +=\
    \ l[i] == 0 ? 1 : 0;\n    }\n    return count <= 2;", "    int n = l.size();\n\
    \    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += l[i];\n\
    \    }\n    return sum == 0;", "  int n = l.size();\n  long long int sum = 0;\n\
    \  for (int i = 0; i < n; i++) {\n    sum += l[i];\n  }\n  for (int i = 0; i <\
    \ n; i++) {\n    for (int j = i; j < n; j++) {\n      if (l[i] + l[j] == 0) {\n\
    \        l.erase(l.begin() + i);\n        l.erase(l.begin() + j);\n        return\
    \ true;\n      }\n    }\n  }\n  return false;", "\tint n = l.size();\n\tlong int\
    \ sum = 0;\n\tlong int pair = 0;\n\tint i;\n\tstd::sort(l.begin(), l.end());\n\
    \tfor(i = 0; i < n - 1; i++) {\n\t\tpair += l[i];\n\t\tif(pair > 0) {\n\t\t\t\
    sum += pair;\n\t\t\tpair = 0;\n\t\t}\n\t}\n\tif(pair > 0) {\n\t\tsum += pair;\n\
    \t\tpair = 0;\n\t}\n\treturn (sum == 0);", "    long long int a = 0;\n    long\
    \ long int b = 0;\n    for (size_t i = 0; i < l.size(); i++) {\n        if (l[i]\
    \ < 0)\n            i += 1;\n        a = a + l[i];\n        b = b + l[i];\n  \
    \  }\n    return (b - a == 0);", "  // your code goes here\n  std::sort(l.begin(),\
    \ l.end());\n  int n1 = 0, n2 = 0;\n  for (int i : l) {\n    if (n1 == n2) {\n\
    \      if (i != n1) {\n        return false;\n      }\n      n1 = n1 + 1;\n  \
    \  } else {\n      if (i == n1 + n2) {\n        return true;\n      }\n      n2\
    \ = n2 + 1;\n    }\n  }\n  return false;", "    std::sort(l.begin(), l.end());\n\
    \    long long sum = 0;\n    for (long i = 0; i < l.size(); ++i) {\n        sum\
    \ += l[i];\n    }\n    if (sum < 0)\n        return false;\n    long long curr\
    \ = 0, next = 0;\n    for (size_t i = 0; i < l.size(); ++i) {\n        curr +=\
    \ l[i];\n        next = curr - next;\n        if (next == 0) {\n            return\
    \ true;\n        }\n    }\n    return false;", "    long sum = 0;\n    long long\
    \ count = 0;\n    for (auto i : l) {\n        sum += i;\n        count += 1;\n\
    \    }\n    return count == 2;", "    int n = l.size();\n    if (n <= 2) {\n \
    \       return false;\n    }\n    long k = l.back();\n    for (int i = 1; i <\
    \ n; i++) {\n        k = k + l[i];\n        if (k == 0) {\n            return\
    \ true;\n        }\n    }\n    return false;", "    // write your code here\n\
    \    int len = l.size();\n    for(int i = 0; i < len - 1; i++) {\n        for(int\
    \ j = i + 1; j < len; j++) {\n            if(l[i] + l[j] == 0) {\n           \
    \     return true;\n            }\n        }\n    }\n    return false;", "   \
    \ int n = l.size();\n    int k = 0;\n    for (int i = 0; i < n; i++) {\n     \
    \   k += l[i];\n        if (k >= 0) {\n            k -= l[i];\n            if\
    \ (k == 0) return true;\n        }\n    }\n    return false;", "    long long\
    \ int sum=0;\n    for(int i=0;i<l.size();i++) {\n        sum+=l[i];\n    }\n \
    \   \n    if(sum==0) return true;\n    return false;", "    int n = l.size();\n\
    \    std::vector<long> v(n);\n    for (long &i : v) {\n        i = l[n-1];\n \
    \   }\n    \n    long sum = 0;\n    int cnt = 0;\n    for (long &i : v) {\n  \
    \      if (i != 0) {\n            sum += i;\n            cnt++;\n        }\n \
    \   }\n\n    if (cnt == 2) {\n        return true;\n    }\n    \n    return false;",
  "    // Your code goes here!\n    long long int sum = 0;\n    for(long long int\
    \ i : l){\n        if(i != 0){\n            sum += i;\n        }\n        if(sum\
    \ == 0){\n            return true;\n        }\n        sum -= i;\n    }\n    return\
    \ false;", "    // Write your code here.\n    long long sum = 0;\n    for (long\
    \ i = 0; i < l.size(); i++) {\n        sum += l[i];\n    }\n    if (sum == 0)\n\
    \        return true;\n    return false;", "    int n = l.size();\n    int m =\
    \ 0;\n    for (int i = 0; i<n; i++) {\n        for (int j = i+1; j<n; j++) {\n\
    \            m += l[i] + l[j];\n            if (m == 0) {\n                return\
    \ true;\n            }\n        }\n    }\n    return false;", "    // write your\
    \ code here\n    ", "    int n = l.size();\n    int sum = 0;\n    for (int i =\
    \ 0; i < n; i++) {\n        sum += l[i];\n    }\n    for (int i = 0; i < n; i++)\
    \ {\n        sum += -l[i];\n    }\n    return sum == 0;", "    int sum = 0;\n\
    \    for (auto i : l) {\n        sum += i;\n    }\n    long long int count = 0;\n\
    \    for (auto i : l) {\n        count += 1;\n        if (sum == 0) {\n      \
    \      if (count == 2) {\n                return true;\n            }\n      \
    \      count = 1;\n            sum = -i;\n        } else if (sum > 0) {\n    \
    \        count += 1;\n            sum -= i;\n        }\n    }\n    return false;",
  "    if (l.size() <= 1)\n        return false;\n    long long a = 0;\n    long long\
    \ b = 0;\n    for (long long i : l) {\n        a += i;\n        b += i;\n    \
    \    if (b == 0)\n            return false;\n    }\n    return a == 0;", "   \
    \ long long a=0;\n    long long b=-1;\n    for(long long i=0;i<l.size();i++){\n\
    \        a+=l[i];\n        b+=l[i];\n        if(a>=0){\n            a=b-a;\n \
    \       }\n    }\n    if(l[0]>=0){\n        if(l[1]==0){\n            return true;\n\
    \        }\n        return false;\n    }\n    return false;", "  // Complete this\
    \ function\n  // write your code here\n  std::vector<long> a;\n  std::vector<long>\
    \ b;\n  for (auto iter1 = l.begin(); iter1 != l.end(); ++iter1)\n    if (*iter1\
    \ > *(l.end() - 1))\n      a.push_back(*iter1);\n  for (auto iter2 = l.begin();\
    \ iter2 != l.end(); ++iter2)\n    if (*iter2 > *(l.end() - 1))\n      b.push_back(*iter2);\n\
    \  bool b1 = false;\n  for (int i = 0; i < a.size(); i++) {\n    if (b.size()\
    \ == 0 || b[b.size() - 1] + a[i] != 0) {\n      b1 = false;\n      b[b.size()\
    \ - 1] = a[i];\n    } else {\n      b1 = true;\n    }\n  }\n  return b1;", " \
    \   // your code here\n    long sum = 0;\n    for (size_t i = 0; i < l.size();\
    \ i++) {\n        sum += l[i];\n    }\n    for (size_t i = 0; i < l.size(); i++)\
    \ {\n        sum -= l[i];\n        if (sum == 0)\n            return true;\n \
    \   }\n    return false;", "  for (int i = 0; i < l.size() - 1; ++i) {\n    for\
    \ (int j = i + 1; j < l.size(); ++j) {\n      if (l[i] + l[j] == 0) {\n      \
    \  return true;\n      }\n    }\n  }\n  return false;", "  for (long i = 0; i\
    \ < l.size(); i++)\n    for (long j = i + 1; j < l.size(); j++)\n      if (l[i]\
    \ + l[j] == 0)\n        return true;\n  return false;", "    long long sum = 0;\n\
    \    for (long i = 0; i < l.size(); ++i) {\n        sum += l[i];\n    }\n    if\
    \ (sum == 0) {\n        return true;\n    }\n    return false;", "  std::unordered_set<long>\
    \ hash;\n  for (long e : l)\n    hash.insert(e);\n  if (hash.size() < 2) return\
    \ true;\n  long s = 0, t = 1;\n  for (long e : l)\n    s -= e;\n  if (s > 0) return\
    \ false;\n  for (long e : l)\n    t += e;\n  if (t != 0) return false;\n  long\
    \ d = 0;\n  while (!hash.empty()) {\n    if (hash.find(d % 2) != hash.end()) break;\n\
    \    d++;\n  }\n  return s == 0 || t == 0;", "\tint N = l.size();\n\tlong sum\
    \ = 0;\n\tfor (int i = 0; i < N; ++i) {\n\t\tsum += l[i];\n\t}\n\tfor (int i =\
    \ 0; i < N; ++i) {\n\t\tsum += l[i];\n\t\tif (sum < 0) sum = 0;\n\t\tfor (int\
    \ j = i + 1; j < N; ++j) {\n\t\t\tif (sum - l[i] + l[j] == 0) {\n\t\t\t\treturn\
    \ true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;", "    int n = l.size();\n    int\
    \ m = n/2;\n    long sum = 0;\n    long zero = 0;\n    for(int i=0;i<m;i++)\n\
    \    {\n        sum += l[i];\n    }\n    if((sum-zero)==0)\n        return true;\n\
    \    else return false;", "    sort(l.begin(), l.end());\n    int zero = 0;\n\
    \    int counter = 0;\n    for (int i = 0; i < l.size(); i++) {\n        zero\
    \ += l[i];\n        if (zero >= 2) {\n            counter++;\n            zero\
    \ -= 2;\n        }\n    }\n    if (counter == 0) {\n        return true;\n   \
    \ }\n    return false;", "    long sum = 0;\n    for (long i : l) {\n        sum\
    \ += i;\n    }\n    return l.size() == 2 && l.at(l.size() - 1) == 0 && l.at(l.size()\
    \ - 2) == sum;", "    // write your code here\n    if(l.size()==1&&l[0]==0)\n\
    \        return false;\n    int n=l.size();\n    int count=0;\n    for(int i=0;i<n;i++)\n\
    \    {\n        if(l[i]==0)\n        {\n            count++;\n        }\n    \
    \    else\n        {\n            for(int j=i;j<n;j++)\n            {\n      \
    \          if(l[i]+l[j]==0)\n                {\n                    count++;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \ }\n    return count==2;", "    long long sum = 0;\n    for (long i : l) {\n\
    \        sum += i;\n    }\n    bool res = sum == 0;\n    return res;", "    //\
    \ sort the list to get the two elements that sum to zero\n    sort(l.begin(),\
    \ l.end());\n    if (l.size() > 1) {\n        // two distinct elements in the\
    \ list that sum to zero\n        long k = 0;\n        long l = 0;\n        long\
    \ s = 0;\n        // find out the smallest and largest elements in the list\n\
    \        for (long i = 0; i < l.size(); i++) {\n            l = l[i];\n      \
    \      s = k;\n            k = i;\n        }\n        // now compare the two\n\
    \        for (long i = 1; i < l.size(); i++) {\n            if (k + l == s) {\n\
    \                return true;\n            }\n            if (l[k] > l[l]) {\n\
    \                k++;\n            } else {\n                l++;\n          \
    \  }\n        }\n    }\n    return false;", "    int n = l.size();\n    long long\
    \ sum = 0;\n    int sum_index = 0;\n    for (int i = 0; i < n - 1; i++) {\n  \
    \      if (l[i] + l[i+1] != 0) {\n            sum = l[i] + l[i+1];\n         \
    \   sum_index = i;\n        }\n    }\n    \n    if (sum == 0) {\n        return\
    \ true;\n    }\n    return false;", "    // code here\n    long long num = 0;\n\
    \    bool first = true;\n    bool last = true;\n    for (long i = 0; i < l.size();\
    \ i++) {\n        num = l[i] + num;\n        if (num <= 0) {\n            if (!first)\
    \ {\n                return false;\n            }\n            if (last) {\n \
    \               return true;\n            }\n            last = true;\n      \
    \  } else {\n            if (!last) {\n                return false;\n       \
    \     }\n            if (first) {\n                first = false;\n          \
    \  }\n            num = num - l[i];\n            if (num < 0) {\n            \
    \    return false;\n            }\n            last = false;\n        }\n    }\n\
    \    return false;", "    std::vector<std::pair<long, long> > p(l.size());\n \
    \   for(size_t i = 0; i < l.size(); ++i)\n        p[i].first = l[i];\n    for(size_t\
    \ i = 0; i < l.size() - 1; ++i) {\n        for(size_t j = i + 1; j < l.size();\
    \ ++j) {\n            assert(p[i].first > p[j].first);\n            assert(p[i].second\
    \ < p[j].second);\n            if(p[i].second - p[j].second == 0)\n          \
    \      return true;\n        }\n    }\n    return false;", "    std::unordered_map<long,\
    \ long> m;\n    for(long i=0;i<l.size();++i)\n        m.insert(std::make_pair(l[i],\
    \ i));\n    for(auto it=m.begin();it!=m.end();++it) {\n        long left=it->first,\
    \ right=it->second;\n        for(long i=0;i<l.size();++i) {\n            if(l[i]<left)\
    \ continue;\n            if(l[i]>right) break;\n            long m=l[i]+left;\
    \ l[i]=m;\n            long n=l[i]+right; l[i]=n;\n            long tmp=left;\n\
    \            left=right;\n            right=tmp;\n            tmp=m;\n       \
    \     m=n;\n            n=tmp;\n            tmp=left;\n            left=right;\n\
    \            right=tmp;\n            tmp=m;\n            m=n;\n            n=tmp;\n\
    \            tmp=left;\n            left=right;\n            right=tmp;\n    \
    \        tmp=m;\n            m=n;\n            n=tmp;\n            tmp=left;\n\
    \            left=right;\n            right=tmp;\n            tmp=m;\n       \
    \     m=n;\n            n=tmp;\n            tmp=left;\n            left=right;\n\
    \            right=tmp;\n            tmp=m;\n            m=n;\n            n=tmp;\n\
    \        }\n        if(left==right) return false;\n    }\n    return true;", " \
    \ long long int sum = 0;\n  for(long long int i : l) {\n    sum = sum + i;\n \
    \ }\n  for(long long int i : l) {\n    if(i != 0) {\n      sum = sum - i;\n  \
    \    if(sum != 0) {\n        return true;\n      }\n    }\n  }\n  return false;",
  "    if (l.size() < 2) {\n        return false;\n    }\n    long s = 0;\n    for\
    \ (long i : l) {\n        s = s + i;\n    }\n    std::vector<long> vec;\n    for\
    \ (long i : l) {\n        if (i == 0) {\n            return false;\n        }\n\
    \        if (i % 2 == 1) {\n            vec.push_back(i);\n        }\n    }\n\
    \    bool result = true;\n    for (size_t i = 0; i < vec.size(); i++) {\n    \
    \    result += vec[i] == 0;\n    }\n    return result;", "    if (l.size() < 2)\
    \ return false;\n    auto first = std::find_if_not(l.begin(), l.end(), [](long\
    \ x) { return x < 0; });\n    auto last = std::find_if_not(l.begin(), l.end(),\
    \ [](long x) { return x > 0; });\n    if (first == l.end()) return false;\n  \
    \  if (last == l.end()) return true;\n    long sum = 0;\n    while (first != last)\
    \ {\n        sum += *first;\n        first++;\n    }\n    return sum == 0;", " \
    \   int n = l.size();\n    // Two zeros is possible\n    int count = 0;\n    long\
    \ ans = 0;\n    // loop through all elements in the list\n    for (int i = 0;\
    \ i < n; i++) {\n        ans += l[i];\n        count += 1;\n    }\n\n    if (count\
    \ == 1) {\n        // if there are only two distinct elements that sum to zero\n\
    \        return (ans == 0);\n    } else {\n        return false;\n    }", "  \
    \  long long sum = 0;\n    for (long i : l) {\n        sum += i;\n    }\n    if\
    \ (sum == 0) {\n        return false;\n    }\n    long long pairs = l.size() -\
    \ 1;\n    for (long i = 0; i < pairs; i++) {\n        long j = i + 1;\n      \
    \  while (j < pairs && j + 1 < pairs && l[j] == l[j + 1]) {\n            ++j;\n\
    \        }\n        if (j - i > 1) {\n            if (l[i] == 0) {\n         \
    \       return false;\n            }\n            if (l[j] == 0) {\n         \
    \       return false;\n            }\n            if (l[i] + l[j] == 0) {\n  \
    \              return false;\n            }\n        }\n    }\n    return true;",
  "    long long long sum = accumulate(l.begin(), l.end(), 0);\n    bool result =\
    \ (sum % 2 == 0) && (sum > 0);\n    return result;", "    // unordered_map stores\
    \ the pair as a key and the number as value.\n    std::unordered_map<long, long>\
    \ m;\n    // for each pair in the list.\n    for (long p : l) {\n        // if\
    \ pair is in map, then the number in the map is 1.\n        if (m.find(p) != m.end())\
    \ {\n            m[p] = 1;\n        }\n        // if pair is not in the map, add\
    \ it to the map with number 1.\n        else {\n            m[p] = 1;\n      \
    \  }\n    }\n    // for each pair in the map, check if the sum is zero\n    for\
    \ (auto it = m.begin(); it != m.end(); ++it) {\n        if (it->second == 0) {\n\
    \            return true;\n        }\n    }\n    return false;", "  int n = l.size();\n\
    \  int s = 0;\n  for (int i = 0; i < n; i++) {\n    s += l[i];\n  }\n  for (int\
    \ i = 0; i < n; i++) {\n    for (int j = i + 1; j < n; j++) {\n      if (l[i]\
    \ + l[j] == 0) {\n        return true;\n      }\n    }\n  }\n  return false;",
  "    int N = l.size();\n    long long sum = 0;\n    long long sum2 = 0, sum3 = 0;\n\
    \    for (long i = 0; i < N; i++) {\n        sum += l[i];\n        sum2 += l[i];\n\
    \        sum3 += l[i];\n    }\n    if (sum == 0 && sum2 == 0 && sum3 == 0) {\n\
    \        return false;\n    }\n    for (long i = 0; i < N; i++) {\n        if\
    \ (sum != 0 && sum2 != 0 && sum3 != 0) {\n            sum += l[i];\n         \
    \   sum2 += l[i];\n            sum3 += l[i];\n            if (sum == 0 && sum2\
    \ == 0 && sum3 == 0) {\n                return false;\n            }\n       \
    \     if (sum > 0 && sum2 == 0 && sum3 > 0) {\n                return false;\n\
    \            }\n        }\n    }\n    return true;", "    // Your code here\n\
    \    int n = l.size();\n    for (int i = 0; i < n; i++) {\n        int sum = 0;\n\
    \        for (int j = 0; j < n; j++) {\n            sum+=l[j];\n            if\
    \ (sum==0) {\n                return true;\n            }\n        }\n    }\n\
    \    return false;", "  std::sort(l.begin(), l.end());\n  auto first = l.begin();\n\
    \  auto last = std::unique(l.begin(), l.end());\n  assert(last - first == l.size());\n\
    \  if (last == l.end()) return false;\n  if (*first == 0) {\n    auto i = first;\n\
    \    ++i;\n    for (; i != last; ++i)\n      if (*i != 0)\n        return false;\n\
    \  } else {\n    ++first;\n    for (; first != last; ++first) {\n      if (*first\
    \ != 0) {\n        auto i = first;\n        ++i;\n        for (; i != last; ++i)\n\
    \          if (*i != 0)\n            return false;\n      }\n    }\n  }\n  return\
    \ true;", "    for (auto it = l.begin(); it != l.end(); it++) {\n        long\
    \ first = *it;\n        long second = 0;\n        for (auto it2 = l.begin(); it2\
    \ != l.end(); it2++) {\n            long sum = (*it) + second;\n            second\
    \ = (*it2);\n            if (sum == 0)\n                return true;\n       \
    \     if (sum != first && sum != second)\n                return false;\n    \
    \    }\n    }\n    return false;", "    int n = l.size();\n    long sum = 0;\n\
    \    for(long i = 0; i < n; i++)\n        sum += l[i];\n    if(sum == 0)\n   \
    \     return true;\n    return false;", "    std::sort(l.begin(), l.end());\n\
    \    int sum = 0;\n    int n = l.size();\n    for (int i = 0; i < n; ++i) {\n\
    \        sum += l[i];\n        if (sum > 0) {\n            return false;\n   \
    \     }\n    }\n    return true;", "    // write your code here\n    long long\
    \ n = l.size();\n    for (long long i = 0; i < n; i++) {\n        for (long long\
    \ j = i + 1; j < n; j++) {\n            if (l[i] + l[j] == 0) return true;\n \
    \       }\n    }\n    return false;", "  sort(l.begin(), l.end());\n  long long\
    \ ans = 0;\n  long long sum = 0;\n  for (size_t i = 0; i < l.size(); i++) {\n\
    \    sum += l[i];\n    if (sum == 0) {\n      ans += i;\n      sum = 0;\n    }\n\
    \  }\n  if (ans < l.size() / 2)\n    return false;\n  return true;", "    std::sort(l.begin(),\
    \ l.end());\n    long long ans = 0;\n    for(long i = 0; i < l.size(); i++) {\n\
    \        ans += l[i];\n        ans %= 100000000;\n        if(ans == 0) {\n   \
    \         return true;\n        }\n    }\n    return false;", "    long long s\
    \ = 0;\n    for (long long i = 0; i < l.size(); i++) {\n        s += l[i];\n \
    \   }\n\n    long long maxsum = (long long)0;\n\n    for (long long i = 0; i <\
    \ l.size(); i++) {\n        maxsum = std::max(maxsum, s - l[i]);\n    }\n\n  \
    \  return maxsum == 0;", "\tlong long s = 0;\n\tfor (long long i : l) {\n\t\t\
    s += i;\n\t}\n\tlong long ans = 0;\n\tfor (int i = 0; i < l.size(); i++) {\n\t\
    \tif (abs(l[i]) == s) {\n\t\t\tif (l[i] != 0) {\n\t\t\t\tans = 1;\n\t\t\t}\n\t\
    \t}\n\t}\n\treturn (ans == 0);", "\tlong int sum = 0, max = 0, min = l[0], tmp\
    \ = 0;\n\tfor (auto i : l) {\n\t\tsum += i;\n\t\tif (sum > max) {\n\t\t\tmax =\
    \ sum;\n\t\t} else if (sum < min) {\n\t\t\tmin = sum;\n\t\t}\n\t\ttmp += i;\n\t\
    }\n\tif (max != 0 && min != 0) {\n\t\tfor (auto i : l) {\n\t\t\ttmp -= i;\n\t\t\
    \tif (tmp != 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t\
    }\n\treturn false;", "  int n = l.size();\n  for (int i = 0; i < n; i++) {\n \
    \   for (int j = i + 1; j < n; j++) {\n      if (l[i] + l[j] == 0)\n        return\
    \ true;\n    }\n  }\n  return false;", "    std::sort(l.begin(), l.end());\n \
    \   int n = l.size();\n    if (n == 0) return true;\n    if (n == 1) return false;\n\
    \    long a = l[0], b = l[0], c = l[0];\n    for (int i = 1; i < n; i++) {\n \
    \       if (l[i] < 0) {\n            std::swap(a, b);\n            std::swap(c,\
    \ l[i]);\n        }\n    }\n    // now we have a = -(c+b) and c = b-a\n    if\
    \ (c < 0 || b < 0) return false;\n    if (b == 0) return true;\n    a = b + c;\n\
    \    c = b - a;\n    return (c == 0 && a);", "    // Your code here\n    long\
    \ long int sum = 0;\n    long long int n = l.size();\n    for (int i=0; i<n; i++)\
    \ {\n        sum += l[i];\n    }\n    bool flag = false;\n    for (int i=0; i<n;\
    \ i++) {\n        for (int j=i+1; j<n; j++) {\n            if (sum==0) {\n   \
    \             flag = true;\n                break;\n            }\n          \
    \  else if (sum<0) {\n                flag = false;\n                break;\n\
    \            }\n            else {\n                sum += l[j];\n           \
    \ }\n        }\n    }\n    return flag;", "  int n = (int)l.size();\n  // sort\
    \ the list by descending value\n  std::sort(l.begin(), l.end(), std::greater<long>());\n\
    \  int res = 0;\n  long long sum = 0;\n  for (int i = 0; i < n; i++) {\n    sum\
    \ += l[i];\n    if (sum != 0) {\n      for (int j = 0; j < n; j++) {\n       \
    \ if (i != j && sum + l[j] == 0) {\n          return true;\n        }\n      }\n\
    \    }\n  }\n  return false;", "    long long int n = l.size();\n    long long\
    \ int sum = 0;\n    for (long long int i = 0; i < n; i++) {\n        sum = sum\
    \ + l[i];\n    }\n    if (sum == 0) {\n        return false;\n    }\n    for (long\
    \ long int i = 1; i < n; i++) {\n        if (sum != 0) {\n            long long\
    \ int d = l[i] - l[i - 1];\n            if (d == 0) {\n                return\
    \ true;\n            }\n            if (sum + d < 0) {\n                return\
    \ false;\n            }\n            sum = sum + d;\n        }\n    }\n    return\
    \ false;", "    // Your code here\n    std::set<long> s;\n    for (auto n : l)\
    \ {\n        auto it = s.find(n);\n        if (it == s.end()) {\n            s.insert(n);\n\
    \            continue;\n        }\n        if (it->second != 0) {\n          \
    \  return false;\n        }\n        s.erase(it);\n    }\n    return true;", " \
    \ std::set<long> s(std::begin(l), std::end(l));\n  for (std::set<long>::iterator\
    \ itr = s.begin(); itr != s.end(); itr++) {\n    if (s.count(*itr) != 1) {\n \
    \     return false;\n    }\n  }\n  return true;", "    std::vector<std::pair<long,\
    \ long> > temp;\n    for (long &e : l)\n        temp.push_back(std::make_pair(e,\
    \ 0));\n\n    std::sort(temp.begin(), temp.end());\n\n    for (long &e : temp)\
    \ {\n        if (e == temp[0]) {\n            if (e != temp[1])\n            \
    \    return false;\n        } else {\n            if (e != temp[1] + temp[0])\
    \ return false;\n        }\n    }\n    return true;", "    // Write your code\
    \ here.\n    \n    return l.size() > 0 && l[0] == 0;", "    long long int n =\
    \ l.size();\n    if (n <= 1) return false;\n    long long int x = l[0], y = l[1],\
    \ sum = 0, i = 0;\n    while (i < n) {\n        sum += l[i];\n        i++;\n \
    \   }\n    while (i < n) {\n        sum += l[i];\n        if (sum == 0) return\
    \ false;\n        i++;\n    }\n    return true;", "  int n = l.size();\n  if (n\
    \ == 0) return false;\n  std::set<int> s;\n  for (long i : l) {\n    s.insert(i);\n\
    \  }\n  long sum = 0;\n  for (int i = 0; i < n; ++i) {\n    sum += l[i];\n  }\n\
    \  for (int i = 0; i < n; ++i) {\n    if (s.find(sum) != s.end()) return true;\n\
    \    sum += l[i];\n  }\n  return false;", "  long long int sum = 0;\n  for (long\
    \ long int i : l) {\n    sum += i;\n  }\n  if (sum == 0)\n    return true;\n \
    \ if (l.size() == 1)\n    return false;\n  long long int left_sum = sum - l[0];\n\
    \  if (left_sum == 0)\n    return false;\n  std::vector<std::pair<long, long>\
    \ > r;\n  for (long long int i : l) {\n    long long int right_sum = sum - i;\n\
    \    if (right_sum == 0)\n      return true;\n    long long int difference = right_sum\
    \ - left_sum;\n    if (difference == 0)\n      continue;\n    if (difference <\
    \ 0)\n      difference = - difference;\n    r.push_back(std::make_pair(i, difference));\n\
    \  }\n  assert(std::all_of(r.begin(), r.end(), [](const std::pair<long, long>\
    \ &x){return x.second == 0;}));\n  return false;", "    long s = 0;\n    for (int\
    \ i = 0; i < l.size() - 1; i++) {\n        s += l[i];\n        if (s == 0)\n \
    \           return false;\n    }\n    if (s == 0)\n        return true;\n    return\
    \ false;", "    int flag;\n    for(int i=0; i<(int)l.size(); i++){\n        flag\
    \ = 1;\n        for(int j=0; j<(int)l.size();j++){\n            if(l[i]+l[j]==0){\n\
    \                flag = 0;\n            }\n        }\n        if(flag){\n    \
    \        return false;\n        }\n    }\n    return true;", "    std::sort(l.begin(),\
    \ l.end());\n    std::pair<long, long> p1 = *std::max_element(l.begin(), l.end());\n\
    \    long p2 = p1;\n    long sum = 0;\n    for (long i = 1; i < l.size(); i++)\
    \ {\n        sum += l[i];\n        if (sum != 0) {\n            if (p2.first >\
    \ sum)\n                return false;\n            p2 = std::make_pair(sum, i);\n\
    \            sum = 0;\n        } else {\n            sum += l[i];\n        }\n\
    \    }\n    if (sum != 0) {\n        if (p2.first > sum)\n            return false;\n\
    \        p2 = std::make_pair(sum, l.size());\n    }\n    return true;", "  long\
    \ sum = 0;\n  for (long i : l) {\n    sum += i;\n    if (sum == 0) {\n      return\
    \ true;\n    }\n  }\n  return false;", "    long int sum = 0;\n    bool result\
    \ = true;\n    for (auto i: l) {\n        sum += i;\n        if (sum < 0) {\n\
    \            sum = 0;\n        }\n    }\n    for (auto i: l) {\n        sum +=\
    \ i;\n        if (sum == 0) {\n            result = false;\n            break;\n\
    \        }\n    }\n    return result;", "    // Write your code here\n    ", " \
    \ long n = l.size();\n  long dp[n + 1][n + 1];\n  dp[0][0] = 0;\n  for (long i\
    \ = 1; i <= n; i++) {\n    dp[i][0] = 1;\n  }\n  for (long i = 1; i <= n; i++)\
    \ {\n    for (long j = 1; j <= n; j++) {\n      if (i - j >= 0 && i - j < n &&\
    \ j - i < n && j - i >= 0) {\n        dp[i][j] = dp[i - 1][j] + dp[i][j - 1];\n\
    \      } else if (i - j > 0) {\n        dp[i][j] = dp[i][j - 2] > 0;\n      }\
    \ else if (j - i < 0) {\n        dp[i][j] = dp[i - 1][j] > 0;\n      }\n    }\n\
    \  }\n  return dp[1][n] > 0;", "    long long s = 0;\n    for (long long i : l)\
    \ {\n        s += i;\n    }\n    for (long long i : l) {\n        if (i != 0 &&\
    \ i != s &&\n            i != std::abs(s - i)) {\n            return false;\n\
    \        }\n    }\n    return true;", "    // sort the list\n    std::sort(l.begin(),\
    \ l.end());\n    // find two numbers that sum up to zero\n    long long int first\
    \ = l[0], second = l[1], pos = 2;\n    while (pos < l.size() && first + l[pos]\
    \ == second) {\n        first = l[pos];\n        second = l[pos + 1];\n      \
    \  pos += 2;\n    }\n    // if there are two distinct elements, then return False\n\
    \    if (pos == l.size() - 1) {\n        return false;\n    }\n    // otherwise\
    \ return True\n    return true;", "    if (l.size() == 0) {\n        return false;\n\
    \    }\n    long ans = 0;\n    bool flag = false;\n    int size = l.size();\n\
    \    std::vector<long> d(size);\n    long temp = 0;\n    long sum = 0;\n    for\
    \ (long i = 0; i < size; ++i) {\n        sum += l[i];\n        if (sum == 0) {\n\
    \            ans = i;\n            flag = true;\n        }\n        d[i] = l[i];\n\
    \    }\n    temp = sum - ans;\n    int a = 0, b = size - 1;\n    while (a < b)\
    \ {\n        long mid = (a + b) / 2;\n        if (temp < d[mid]) {\n         \
    \   a = mid + 1;\n        } else if (temp > d[mid]) {\n            b = mid - 1;\n\
    \        } else {\n            break;\n        }\n    }\n    if (a > b) {\n  \
    \      return false;\n    } else {\n        if (flag) {\n            std::vector<long>\
    \ vec;\n            long x = ans - sum;\n            for (long i = 0; i < size;\
    \ i++) {\n                vec.push_back(d[i]);\n            }\n            vec.push_back(x);\n\
    \            bool flag2 = false;\n            for (long i = 0; i < size; i++)\
    \ {\n                if (vec[i] == vec[i + 1]) {\n                    flag2 =\
    \ true;\n                    break;\n                }\n            }\n      \
    \      if (flag2) {\n                return false;\n            }\n        }\n\
    \    }\n    return true;", "    long long sum = 0;\n    for (long long i = 0;\
    \ i < l.size(); ++i) {\n        sum += l[i];\n    }\n    if (sum < 0)\n      \
    \  sum = -sum;\n    long long pairs = 0;\n    long long diff = 0;\n    for (long\
    \ long i = 0; i < l.size(); ++i) {\n        diff += l[i];\n        if (sum ==\
    \ diff)\n            pairs++;\n    }\n    if (pairs == 2)\n        return true;\n\
    \    return false;", "    long long sum = 0;\n    for (long i = 0; i < l.size();\
    \ i++) {\n        sum += l[i];\n        if (sum < 0) {\n            sum = 0;\n\
    \        }\n    }\n    if (l.size() == 0) {\n        return false;\n    }\n  \
    \  long long sum2 = 0;\n    for (long i = 0; i < l.size(); i++) {\n        sum2\
    \ += l[i];\n        if (sum2 < 0) {\n            return false;\n        }\n  \
    \  }\n    long long zeros = 0;\n    for (long i = 0; i < l.size(); i++) {\n  \
    \      zeros += l[i] - sum - sum2;\n        if (zeros == 0) {\n            return\
    \ true;\n        }\n    }\n    return false;", "    sort(l.begin(), l.end());\n\
    \    int len = l.size();\n    long sum = 0;\n    for (int i = 0; i < len; i++)\
    \ {\n        sum += l[i];\n        if (sum < 0) {\n            return false;\n\
    \        }\n        if (sum > 0) {\n            break;\n        }\n    }\n   \
    \ return true;", "    // code here\n    int n = l.size();\n    int count = 0;\n\
    \    for(int i = 0; i < n; i++){\n        for(int j = 0; j < n; j++){\n      \
    \      if(i != j){\n                if(l[i] + l[j] == 0){\n                  \
    \  count += 1;\n                    if(count == 2){\n                        return\
    \ true;\n                    }\n                }\n            }\n        }\n\
    \    }\n    return false;", "    // write your code here\n    long sum = 0;\n\
    \    long j = 0;\n    for(j=0; j<l.size(); j++)\n        sum += l[j];\n    for(j=0;\
    \ j<l.size(); j++)\n        if(sum == 0)\n            return true;\n    return\
    \ false;", "  std::sort(l.begin(), l.end());\n  int n = l.size();\n  for (int\
    \ i = 1; i < n; ++i) {\n    for (int j = 0; j < i; ++j) {\n      if (l[j] + l[i]\
    \ != 0) {\n        std::cout << l[j] << \", \" << l[i] << \"\\n\"; // print two\
    \ elements if they sum to zero.\n        return true;\n      }\n    }\n  }\n \
    \ return false;", "    auto it = l.begin();\n    auto it2 = l.begin();\n    auto\
    \ it3 = l.begin();\n    long sum = 0;\n    long sum_of_zeros = 0;\n    while (it\
    \ != l.end()) {\n        sum += *it;\n        sum_of_zeros += *it2;\n        it++;\n\
    \        it2++;\n    }\n    while (it2 != l.end()) {\n        sum += *it2;\n \
    \       sum_of_zeros += *it3;\n        it2++;\n        it3++;\n    }\n    if (sum\
    \ == 0) {\n        return true;\n    }\n    else if (sum < 0) {\n        return\
    \ false;\n    }\n    long sum_of_negatives = sum_of_zeros;\n    bool flag = true;\n\
    \    if (sum_of_negatives == 0) {\n        return true;\n    }\n    else {\n \
    \       it3 = l.end();\n        it3--;\n        while (it3 != l.begin()) {\n \
    \           sum += *it3;\n            sum_of_negatives -= *it2;\n            it2++;\n\
    \            it3--;\n        }\n        while (flag && sum_of_negatives != 0)\
    \ {\n            if (sum_of_negatives < 0) {\n                sum_of_negatives\
    \ = 0;\n                flag = false;\n            }\n            else {\n   \
    \             sum_of_negatives -= *it3;\n                it3--;\n            }\n\
    \        }\n    }\n    return flag;", "  std::sort(l.begin(), l.end());\n  long\
    \ s = 0;\n  for (int i = 0; i < l.size(); i++) {\n    s += l[i];\n    if (s ==\
    \ 0) {\n      return true;\n    }\n  }\n  return false;", "    bool result = {true};\n\
    \    long long sum = 0;\n    for(int i = 0; i< l.size(); i++)\n    {\n       \
    \ sum += l[i];\n        if(sum == 0)\n        {\n            result = false;\n\
    \        }\n    }\n    return result;", "    long long sum = 0;\n    long long\
    \ count = 0;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] > 0)\n\
    \            sum += l[i];\n        if (sum < 0) {\n            sum += i;\n   \
    \         count++;\n        }\n    }\n    return count >= 2;", "  std::unordered_map<long,\
    \ long> pairs(l.size());\n  long zero = 0;\n  for (long i : l) {\n    pairs[i]\
    \ = i;\n    zero += i;\n  }\n  long maxVal = pairs.at(0) + pairs.at(l.size() -\
    \ 1);\n  for (auto pair : pairs) {\n    if (pair.second < -maxVal) return false;\n\
    \  }\n  return true;", "    long long int sum = 0;\n    for (auto i : l) {\n \
    \       sum += i;\n    }\n\n    int left = 0, right = 0;\n    for (auto i : l)\
    \ {\n        int tmp = sum - i;\n        sum += tmp;\n        if (sum == 0) {\n\
    \            return false;\n        }\n        if (sum < 0) {\n            sum\
    \ += i;\n            left++;\n        }\n        if (sum > 0) {\n            sum\
    \ += i;\n            right++;\n        }\n    }\n\n    return left == right ||\
    \ left > right;", "    int N=l.size();\n    for(int i=0;i<N;i++)\n    {\n    \
    \    for(int j=i+1;j<N;j++)\n        {\n            if(l[i]+l[j] == 0)\n     \
    \           return true;\n        }\n    }\n    return false;", "    int n = l.size();\n\
    \    // use unordered_set to keep track of\n    // unique elements, keep track\
    \ of indexes\n    std::unordered_set<long> s;\n    std::vector<int> p;\n    int\
    \ i = 0;\n    long cur = l[0];\n    bool res = false;\n    // check for duplicates\n\
    \    if (s.size() >= n) {\n        for (size_t j = 0; j < i; j++) {\n        \
    \    if (s.find(l[j]) != s.end()) {\n                res = true;\n           \
    \     break;\n            }\n        }\n    }\n    else res = true;\n    // if\
    \ there are no duplicates, check for pairs\n    if (res == true) {\n        long\
    \ sum = 0;\n        for (size_t j = 0; j < i; j++) {\n            sum += l[j];\n\
    \        }\n        if (sum == 0) {\n            for (size_t j = 0; j < i; j++)\
    \ {\n                if (l[j] < 0) {\n                    p.push_back(j);\n  \
    \              }\n            }\n            if (p.size() >= 2) {\n          \
    \      s = std::unordered_set<long>();\n                p.clear();\n         \
    \       i = 0;\n                cur = l[i];\n                // check for duplicates\n\
    \                if (s.size() >= n) {\n                    for (size_t j = 0;\
    \ j < i; j++) {\n                        if (s.find(l[j]) != s.end()) {\n    \
    \                        res = true;\n                            break;\n   \
    \                     }\n                    }\n                }\n          \
    \      else res = true;\n                // if there are no duplicates, check\
    \ for pairs\n                if (res == true) {\n                    for (size_t\
    \ j = 0; j < i; j++) {\n                        sum += l[j];\n               \
    \     }\n                    if (sum == 0) {\n                        for (size_t\
    \ j = 0; j < i; j++) {\n                            if (l[j] < 0) {\n        \
    \                        p.push_back(j);\n                            }\n    \
    \                    }\n                        if (p.size() >= 2) {\n       \
    \                     s = std::unordered_set<long>();\n                      \
    \      p.clear();\n                            i = 0;\n                      \
    \      cur = l[i];\n                            // check for duplicates\n    \
    \                        if (s.size() >= n) {\n                              \
    \  for (size_t j = 0; j < i; j++) {\n                                    if (s.find(l[j])\
    \ != s.end()) {\n                                        res = true;\n       \
    \                                 break;\n                                   \
    \ }\n                                }\n                            }\n      \
    \                      else res = true;\n                            // if there\
    \ are no duplicates, check for pairs\n                            if (res == true)\
    \ {\n                                for (size_t j = 0; j < i; j++) {\n      \
    \                              sum += l[j];\n                                }\n\
    \                                if (sum == 0) {\n                           \
    \         for (size_t j = 0; j < i; j++) {\n                                 \
    \       if (l[j] < 0) {\n                                            p.push_back(j);\n\
    \                                        }\n                                 \
    \   }\n                                    if (p.size() >= 2) {\n            \
    \                            s = std::unordered_set<long>();\n               \
    \                         p.clear();\n                                       \
    \ i = 0;\n                                        cur = l[i];\n              \
    \                          // check for duplicates\n                         \
    \               if (s.size() >= n) {\n                                       \
    \     for (size_t j = 0; j < i; j++) {\n                                     \
    \           if (s.find(l[j]) != s.end()) {\n                                 \
    \                   res = true;\n                                            \
    \        break;\n                                                }\n         \
    \                                   }\n                                      \
    \  }\n                                        else res = true;\n             \
    \                           // if there are no ", "    long long int sum=0;\n\
    \    long long int n=l.size();\n    long long int m=0;\n    for(long long int\
    \ i=0; i<n; i++) {\n        sum = sum + l[i];\n        if (sum > 0) {\n      \
    \      m++;\n            sum = sum - l[i];\n        }\n    }\n    if (m == 2)\n\
    \        return true;\n    return false;", "    // Write your code here\n    std::sort(l.begin(),\
    \ l.end());\n    long temp=0;\n    long sum = 0;\n    for(std::vector<long>::iterator\
    \ it = l.begin();it!=l.end();it++){\n        temp = *it;\n        sum += temp;\n\
    \        if(sum == 0){\n            return true;\n        }\n    }\n    return\
    \ false;", "  if (l.size() <= 2)\n    return true;\n\n  int i, j, k;\n  long n1,\
    \ n2;\n  long count = 0;\n  for (i = 0; i < l.size(); i++) {\n    count = 1;\n\
    \    for (j = i + 1; j < l.size(); j++) {\n      n1 = l[i];\n      n2 = l[j];\n\
    \      k = 0;\n      while (k < j - i) {\n        k = k + 1;\n        if (n1 +\
    \ n2 != 0) {\n          if (n1 + n2 == 0) {\n            if (count == j) {\n \
    \             return true;\n            }\n            count--;\n          } else\
    \ if (n2 == 0) {\n            if (count == i) {\n              return true;\n\
    \            }\n            count--;\n          } else {\n            if (count\
    \ + k == j) {\n              return true;\n            }\n          }\n      \
    \  }\n      }\n    }\n  }\n  return false;", "  std::sort(l.begin(), l.end());\n\
    \  long sum = 0;\n  for (long i : l)\n    sum += i;\n  long count = 0;\n  bool\
    \ flag = false;\n  for (long i : l) {\n    if (i == 0)\n      continue;\n    count\
    \ += 1;\n    if (sum == 0)\n      flag = true;\n    if (sum < 0) {\n      if (i\
    \ == count - 1) {\n        sum = 0;\n        break;\n      }\n      if (count\
    \ > 1 && i == count - 2)\n        sum += 1;\n    }\n    sum += i;\n  }\n  return\
    \ flag;", "    long long sum = 0;\n    for (long i = 0; i < l.size(); i++) {\n\
    \        sum += l[i];\n    }\n    if (sum < 0) sum = 0;\n    long long zero =\
    \ 0;\n    for (long i = 0; i < l.size(); i++) {\n        zero += l[i];\n    }\n\
    \    return sum == zero;", "    long s = 0;\n    for (long i : l) {\n        s\
    \ += i;\n    }\n    long k = 0;\n    for (long i : l) {\n        k -= i;\n   \
    \     if (k == 0) {\n            return true;\n        }\n    }\n    return false;",
  "    long long sum = 0;\n    for (int i = 0; i < l.size(); i++) {\n        sum +=\
    \ l[i];\n    }\n    if (sum == 0)\n        return false;\n    for (int i = 0;\
    \ i < l.size(); i++) {\n        long long tmp_sum = sum;\n        sum -= l[i];\n\
    \        if (tmp_sum == 0) {\n            return true;\n        }\n    }\n   \
    \ return false;", "    long long int sum = 0;\n    long long int i = 0;\n    for\
    \ (i = 0; i < l.size(); i++)\n        sum += l[i];\n    for (i = 0; i < l.size()\
    \ - 1; i++)\n        if (sum > 0)\n            return false;\n    return true;",
  "    if (l.size() < 2) {\n        return false;\n    }\n    int ans = 0;\n    long\
    \ k = 0;\n    for (int i = 0; i < (int)l.size(); ++i) {\n        ans += l[i];\n\
    \    }\n    for (int i = 0; i < (int)l.size(); ++i) {\n        k = k - l[i];\n\
    \        if (k != 0) {\n            if (ans != 0) {\n                return false;\n\
    \            }\n            ans = k;\n        }\n    }\n    return true;", " \
    \ // Sort the vector in ascending order.\n  std::sort(l.begin(), l.end());\n\n\
    \  // Two zeros sum to zero.\n  std::vector<bool> results(l.size(), false);\n\n\
    \  // Two adjacent numbers differ by exactly one.\n  size_t count_one_diff = 1;\n\
    \n  for (size_t i = 0; i < l.size(); ++i) {\n    // If the current element of\
    \ the vector is zero.\n    if (l[i] == 0) {\n      // Return false if the previous\
    \ element of the vector is zero.\n      if (results[i - 1]) {\n        return\
    \ false;\n      }\n      results[i] = true;\n      continue;\n    }\n    // Otherwise,\
    \ loop through each adjacent element of the vector.\n    for (size_t j = i; j\
    \ < l.size(); ++j) {\n      if (l[j] == 0) {\n        // If adjacent elements\
    \ are not equal\n        if (l[i] != l[j]) {\n          // Return false if adjacent\
    \ elements are not equal.\n          return false;\n        }\n        // Otherwise,\
    \ if the current element of the vector is different from\n        // the previous\
    \ element of the vector.\n      } else if (results[j - 1]) {\n        // If previous\
    \ element of the vector is zero\n        if (l[j] != l[i]) {\n          // Return\
    \ false if the current element of the vector is not zero.\n          return false;\n\
    \        }\n        // Otherwise, count the number of distinct elements that are\n\
    \        // equal from the current element to the previous element of the vector.\n\
    \      } else {\n        // If adjacent elements are equal.\n        if (l[j]\
    \ == l[i]) {\n          // If adjacent elements are not equal to each other.\n\
    \          if (l[j] != l[i]) {\n            // Return false if the current element\
    \ of the vector is equal to the\n            // previous element of the vector.\n\
    \            return false;\n          }\n          // Otherwise, increase the\
    \ number of distinct elements that are\n          // equal.\n          count_one_diff\
    \ += 2;\n        }\n      }\n      // Finally, set the results of the current\
    \ element of the vector to true.\n      results[j] = true;\n    }\n  }\n  return\
    \ count_one_diff == 2;", "    // TODO: use a map instead?\n    for (auto e : l)\
    \ {\n        long long x = 0;\n        for (auto e : l) {\n            x += e;\n\
    \        }\n        if (x >= 0) {\n            return true;\n        }\n    }\n\
    \    return false;", "    // your code goes here\n    int N = l.size();\n    if\
    \ (N == 0)\n        return true;\n    if (N == 1)\n        return false;\n   \
    \ int sum = 0;\n    int *A = new int[N];\n    std::iota(A, A + N, 0);\n    for\
    \ (long i = 0; i < N; i++)\n        sum += A[i];\n    if (sum % 2 != 0)\n    \
    \    return false;\n    for (int i = 0; i < N; i++) {\n        if (A[i] == 0)\n\
    \            continue;\n        for (int j = i; j < N; j++)\n            if (A[j]\
    \ == 0)\n                break;\n        if (j - i + 1 == 0)\n            return\
    \ false;\n    }\n    return true;", "    int n = l.size();\n    if (n == 0 ||\
    \ n != (int)std::sqrt(n))\n        return false;\n    int m = 0;\n    int s =\
    \ n * (n + 1) / 2;\n    for (int i = 0; i < n - 1; i++) {\n        long a = l[i];\n\
    \        long b = l[i + 1];\n        if ((a * a + b * b) == 0) {\n           \
    \ m += 1;\n        } else {\n            break;\n        }\n    }\n    return\
    \ (m >= 2);", "    int pair_count = 0;\n    int sum = 0;\n    long pair;\n   \
    \ for (int i = 0; i < l.size(); i++) {\n        pair = l[i] + l[(i + 1) % l.size()];\n\
    \        sum = sum + pair;\n        if (sum == 0) {\n            pair_count++;\n\
    \            if (pair_count == 2) {\n                return true;\n          \
    \  }\n        }\n        sum -= pair;\n    }\n    return false;", "    if (l.size()\
    \ < 2) return false;\n    long long sum = 0, min;\n    min = l[0];\n    for (long\
    \ long i : l) {\n        if (i != min) return false;\n        sum += i;\n    \
    \    if (sum < min) return false;\n    }\n    return true;", "        long long\
    \ s = 0;\n        for (long long i : l) {\n                s += i;\n        }\n\
    \        if (s > 0) {\n                for (long long i = 0; i < l.size(); i++)\
    \ {\n                        s += l[i];\n                        if (s > 0)\n\
    \                                return false;\n                }\n          \
    \      return true;\n        }\n        return false;", "    int n = l.size();\n\
    \    int m = n;\n    int sum = 0;\n    for (int i = 0; i < n - 1; i++) {\n   \
    \     sum += l[i];\n        for (int j = i + 1; j < n; j++) {\n            if\
    \ (l[j] >= sum - l[i]) {\n                m = j;\n                sum = l[j];\n\
    \            }\n        }\n    }\n    return (m != n && sum == 0);", "  if (l.size()\
    \ <= 1) return false;\n  int sum = 0;\n  for (int i = 0; i < l.size(); ++i)\n\
    \    sum += l[i];\n  if (sum == 0) return false;\n  int first = -1, last = -1,\
    \ index = -1;\n  for (int i = 0; i < l.size(); ++i) {\n    long cur = l[i];\n\
    \    if (first == -1) first = i;\n    if (cur != 0 && cur - l[first] == sum &&\
    \ cur < sum) {\n      index = i;\n      last = first;\n      sum = cur;\n    }\
    \ else if (cur > sum) {\n      last = -1;\n      sum = 0;\n    }\n  }\n  if (index\
    \ >= 0) {\n    l[index] = -l[index];\n    return true;\n  }\n  return false;",
  "    // Initialize an empty set\n    std::set<long> s;\n    // Iterate through the\
    \ list checking each pair\n    for (long i = 0; i != l.size(); ++i) {\n      \
    \  for (long j = i + 1; j != l.size(); ++j) {\n            // If i and j don't\
    \ share an element, add it to the set\n            if (s.find(l[i] + l[j]) ==\
    \ s.end()) {\n                s.insert(l[i] + l[j]);\n            }\n        }\n\
    \    }\n    // If all the elements are the exact same value then return True\n\
    \    if (s.size() == 1) {\n        return true;\n    } else {\n        return\
    \ false;\n    }", "  long long ans = 0;\n  long long sum = 0;\n  for (auto e :\
    \ l) {\n    sum = sum + e;\n    if (sum == 0) {\n      ans = true;\n      break;\n\
    \    }\n  }\n  return ans;", "  long long int answer = 0;\n  // for each element\
    \ in l, calculate the sum of all the elements\n  // with that element\n  for(long\
    \ long int elem: l) {\n    answer += elem;\n  }\n  for(long long int i = 1; i\
    \ < l.size(); i++) {\n    if (l[i] - l[i-1] != 0) {\n      return false;\n   \
    \ }\n  }\n  return true;", "    int n = l.size();\n    long a = l[0], b = l[0],\
    \ c = l[0], d = l[0];\n    int k = 0;\n    for (int i = 0; i < n; i++) {\n   \
    \     b = l[i];\n        if (b - a != 0) {\n            c = a + b - k;\n     \
    \       d = c > 0 ? l[k] : l[k + 1];\n            if (l[k] > d - c && d > c -\
    \ l[k]) {\n                return false;\n            }\n            a = b;\n\
    \            k = i + 1;\n        }\n    }\n    return true;", "    int n = l.size();\n\
    \    long long sum = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j\
    \ = i + 1; j < n; j++) {\n            if (l[i] + l[j] == 0)\n                return\
    \ false;\n        }\n    }\n    return true;", "    if (l.size() < 2) {\n    \
    \    return false;\n    }\n    std::unordered_set<long> s;\n    long long a =\
    \ 0;\n    for (auto x : l) {\n        if (s.find(x) == s.end()) {\n          \
    \  s.insert(x);\n            a += x;\n        } else {\n            a -= x;\n\
    \        }\n    }\n    return a == 0;", "    int n = l.size();\n    long sum =\
    \ 0;\n    for (int i = 0; i < n; i++) {\n        sum += l[i];\n        if (sum\
    \ < 0)\n            return false;\n    }\n    for (int i = 0; i < n - 1; i++)\
    \ {\n        if (l[i] == l[i + 1] && sum > 0) {\n            return false;\n \
    \       }\n    }\n    return true;", "    // write your code here\n    auto it\
    \ = l.begin();\n    std::pair<long, long> current_pair(it++, it);\n    long difference\
    \ = *current_pair.second - *current_pair.first;\n    if (difference == 0) return\
    \ false;\n    return true; // or return current_pair.first != l.begin()", "  \
    \  long long int res = 0;\n    for (auto i : l) {\n        res += i;\n    }\n\
    \    for (int i = 1; i <= res / 2; i++) {\n        if (res % i == 0) {\n     \
    \       return false;\n        }\n    }\n    return true;", "  long long sum =\
    \ 0;\n  for (long i : l) {\n    sum += i;\n  }\n  std::unordered_set<long long>\
    \ sums(l.begin(), l.end());\n  return sums.size() == 1 &&\n         (std::find(sums.begin(),\
    \ sums.end(), sum) != sums.end()); // return if element already in the sums",
  "    int n = l.size();\n    // Two sums of zero are equal if we have equal sums\
    \ equal and different sums\n    // are different - and of equal sums are different\
    \ if we have different sums\n    // equal.\n    for (int i = 0; i < n; ++i) {\n\
    \        for (int j = i + 1; j < n; ++j) {\n            if (l[i] + l[j] == 0)\n\
    \                return true;\n            if (l[i] + l[j] != 0)\n           \
    \     return false;\n        }\n    }\n    return false;", "  std::pair<std::vector<long>,\
    \ std::vector<long>> pairs;\n  for (long i = 0; i < l.size() - 1; i++)\n    for\
    \ (long j = i + 1; j < l.size(); j++)\n      if (l[i] + l[j] == 0)\n        pairs.first\
    \ = std::vector<long> { l[i], l[j] };\n      else\n        pairs.second.push_back(l[i]);\n\
    \  return pairs.first.size() == 2 &&\n         (pairs.second[0] == 0 || pairs.second[1]\
    \ == 0);", "    if (l.size() < 2) return false;\n    auto first_element = l.begin();\n\
    \    auto second_element = l.begin() + 1;\n    auto sum = std::accumulate(first_element,\
    \ second_element, 0);\n    return sum == 0;", "  std::sort(l.begin(), l.end());\n\
    \  int n = l.size();\n  int ln = *std::max_element(l.begin(), l.end());\n  if\
    \ (ln <= 0) return false;\n  for (int i = 1; i < n; ++i) {\n    int left = l[i\
    \ - 1];\n    int right = l[i];\n    int sum = left + right;\n    if (sum == 0)\
    \ return false;\n    else l[i] = sum;\n  }\n  return true;", "    \n    // Initialize\
    \ two pointers i and j \n    long i = 0, j = 0;\n    \n    // Check two elements\
    \ if they sum to zero \n    while (i != l.size() - 1 && j != l.size() - 1 &&\n\
    \            abs(l[i] + l[j]) == 0) \n    { \n        i = i + 1; \n        j =\
    \ j + 1; \n    } \n\n    // Check if they sum to zero \n    return (i != l.size()\
    \ - 1 && j != l.size() - 1); ", "    std::map<long, long> m;\n    for (auto e\
    \ : l) {\n        m[e] = m[e] + 1 || 1;\n    }\n    return m.size() >= 2;", " \
    \   // Create a boolean array where pairs of elements with the same sum are\n\
    \    // set to True\n    std::vector<bool> bv(l.size());\n    std::iota(bv.begin(),\
    \ bv.end(), false);\n\n    // Traverse through the list to sum the elements\n\
    \    long sum = 0;\n    for (long i = 0; i < l.size(); i++) {\n        // Add\
    \ the current element to the sum\n        sum += l[i];\n        // If there is\
    \ a pair with the same sum as the current sum, set the\n        // flag to True\n\
    \        if (bv[i - 1]) {\n            bv[i] = true;\n        }\n    }\n\n   \
    \ // Check if there are two distinct elements whose sum sums to zero\n    if (bv[bv.size()\
    \ - 1]) {\n        std::cout << \"Yes\" << std::endl;\n    } else {\n        std::cout\
    \ << \"No\" << std::endl;\n    }\n\n    // Return True/False\n    return bv[bv.size()\
    \ - 1];", "    if (l.size() < 2)\n        return false;\n    long long k = 1;\n\
    \    for (long long i = 0; i < l.size(); i++) {\n        k += l[i];\n        if\
    \ (k > 0) {\n            long long j = i + 1;\n            for (long long j =\
    \ 0; j < l.size(); j++)\n                k -= l[j];\n            if (k == 0)\n\
    \                return true;\n        }\n    }\n    return false;", "\tlong long\
    \ sum = 0;\n\tlong long count = 0;\n\tfor (long i = 0; i < l.size(); i++) {\n\t\
    \tsum += l[i];\n\t\tcount++;\n\t}\n\tif (sum == 0) {\n\t\treturn count == 2;\n\
    \t} else {\n\t\treturn false;\n\t}", "  long long int s = 0, t = 0;\n  for(long\
    \ long int i : l) {\n    s += i;\n    t += i;\n  }\n  return s == 0 && t == 0;",
  "    long long total = 0;\n    long long currSum = 0;\n    for(long long i = 0;\
    \ i < l.size(); i++) {\n        total += l[i];\n        currSum += l[i];\n   \
    \     if(currSum == 0 && i != 0) {\n            return true;\n        }\n    }\n\
    \    return false;", "  for (auto it : l) {\n    for (auto jt = it; jt != 0; --jt)\
    \ {\n      if (l.count(jt) > 1) {\n        return false;\n      }\n    }\n  }\n\
    \  return true;", "    // Write your code here.\n    long sum = 0;\n    for (long\
    \ i = l.size(); i > 1; i--) {\n        sum += l.at(i-1);\n        if (sum < 0)\
    \ {\n            return false;\n        }\n        long second = l.at(i-2);\n\
    \        if (second < 0) {\n            return false;\n        }\n        if (sum\
    \ + second == 0) {\n            return true;\n        }\n    }\n    return false;",
  "    int n = l.size();\n    if (n == 0)\n        return true;\n    int m = n / 2;\n\
    \    std::vector<long> a = l[n - 1];\n    std::vector<long> b = l[m];\n    std::vector<bool>\
    \ d(m, false);\n    long curr = a[0] + b[0];\n    for (int i = 1; i <= m; i++)\
    \ {\n        curr = a[i] + b[i] - curr;\n        d[i] = (curr == 0) ? true : false;\n\
    \    }\n    for (int i = m; i < n; i++) {\n        curr = a[i] - b[i] - curr;\n\
    \        d[i] = (curr == 0) ? true : false;\n    }\n    for (int i = 0; i < m;\
    \ i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (d[i]) {\n\
    \                if (d[j]) {\n                    return false;\n            \
    \    }\n            }\n        }\n    }\n    return true;", "    long long sum\
    \ = 0, tempSum = 0, temp = 0;\n    int size = l.size();\n    for (int i = 0; i\
    \ < size; i++) {\n        temp = l[i];\n        tempSum += temp;\n        if (tempSum\
    \ == 0) {\n            sum += temp;\n            if (sum == 0) {\n           \
    \     return true;\n            } else {\n                return false;\n    \
    \        }\n        }\n    }\n    return false;", "    std::sort(l.begin(), l.end());\n\
    \    int n = l.size();\n    int curr_sum = 0;\n    for (long i = 0; i < n; ++i)\
    \ {\n        curr_sum += l[i];\n        if (curr_sum < 0)\n            return\
    \ false;\n    }\n    return (n == 1 && curr_sum == 0);", "    // your code here\n\
    \    int n = l.size();\n    int min[n];\n    for(int i = 0; i < n; i++){\n   \
    \     min[i] = INT_MAX;\n    }\n    for(int i = 0; i < n; i++){\n        for(int\
    \ j = 0; j < n; j++){\n            if(j != i && l[i] + l[j] <= min[j]){\n    \
    \            min[j] = l[i] + l[j];\n            }\n        }\n    }\n    if(min[0]\
    \ == INT_MAX){\n        return false;\n    }else{\n        return true;\n    }",
  "    // Write your code here\n    long long count = 0;\n    long long min = 0;\n\
    \    for (int i = 0; i < l.size(); i++) {\n        if(l[i] >= 0){\n          \
    \  count++;\n            if(min == 0){\n                min = l[i];\n        \
    \    }\n            else if(l[i] != min){\n                return false;\n   \
    \         }\n        }\n    }\n    if(count == 0){\n        return true;\n   \
    \ }\n    return false;", "  int n = l.size();\n  // O(2n) time and O(2n) space\n\
    \  for (int i = 0; i < n; i++) {\n    for (int j = i + 1; j < n; j++) {\n    \
    \  if (l[i] + l[j] == 0) {\n        return true;\n      }\n    }\n  }\n  return\
    \ false;", "\tlong long total = 0;\n\tfor (auto& i : l) {\n\t\ttotal += i;\n\t\
    }\n\n\tstd::sort(l.begin(), l.end());\n\n\tfor (long long i = 1; i < total; ++i)\
    \ {\n\t\tif (l[i - 1] + l[i] == 0) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn\
    \ false;", "    // Write your code here.\n    int sum = 0;\n    for (int i = 0;\
    \ i < l.size(); i++)\n        for (int j = i; j < l.size(); j++)\n           \
    \ sum += l[i] + l[j];\n    for (int i = 0; i < l.size(); i++)\n        for (int\
    \ j = i; j < l.size(); j++)\n            if (l[i] + l[j] == 0)\n             \
    \   return true;\n    return false;", "    std::sort(l.begin(), l.end());\n  \
    \  long a = l[0];\n    long b = l[1];\n    long c = l[2];\n    if (a * a + b *\
    \ b == c * c) {\n        return false;\n    }\n    else {\n        return true;\n\
    \    }", "    int n = l.size();\n    std::vector<long> v(2*n);\n    \n    // fill\
    \ v with pairs of numbers and then find the pairs that sum up to zero.\n    //\
    \ each pair is represented by a pair of indices.\n    for (int i = 0; i < n; ++i)\
    \ {\n        v[2*i] = l[i];\n        v[2*i+1] = 0;\n    }\n    std::vector<int>\
    \ ind(2*n);\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < n;\
    \ ++j) {\n            if (i != j) {\n                if (v[2*i+1] + v[2*j] ==\
    \ 0) {\n                    ind[2*i+1] = j;\n                    ind[2*j] = i;\n\
    \                }\n            }\n        }\n    }\n    \n    // return True\
    \ if there are two distinct elements in the list that sum to\n    // zero, and\
    \ False otherwise.\n    return (2*ind[0] != 0 || 2*ind[1] != n);", "    sort(l.begin(),\
    \ l.end());\n    int n = 0;\n    for (int i = 0; i < l.size(); i++) {\n      \
    \  for (int j = i + 1; j < l.size(); j++) {\n            if (l[i] + l[j] == 0)\
    \ {\n                return true;\n            }\n        }\n    }\n    return\
    \ false;", "    if (l.size() <= 1)\n        return false;\n    int i = 0, j =\
    \ 0, sum = 0;\n    int k = (l.size() - 1);\n    while (i != k) {\n        while\
    \ (j != k) {\n            if (l[i] + l[j] == 0) {\n                sum++;\n  \
    \              break;\n            }\n            j++;\n        }\n        i--;\n\
    \    }\n    return (sum == 2);", "  // Write your code here.\n  long long int\
    \ sum = 0;\n  long long int count = 0;\n  for (long long int i : l) {\n    if\
    \ (i != 0) {\n      sum += i;\n      count++;\n    }\n  }\n  if (sum != 0) {\n\
    \    return false;\n  }\n  if (count == l.size() - 1) {\n    return true;\n  }\
    \ else {\n    return false;\n  }", "    int size = l.size();\n    long sum = 0;\n\
    \    for (int i = 0; i < size; i++) {\n        sum += l[i];\n        if (sum !=\
    \ 0) {\n            long tempSum = 0;\n            for (int j = i + 1; j < size;\
    \ j++) {\n                if (l[j] > 0) tempSum += l[j];\n            }\n    \
    \        if (tempSum == sum) return true;\n        }\n    }\n    return false;",
  "    int n = l.size();\n    long max1 = 0, max2 = 0;\n    for (int i = 0; i < n;\
    \ i++) {\n        int cur_max1 = max1 + l[i];\n        int cur_max2 = max2 + l[i];\n\
    \        if (cur_max1 > cur_max2) {\n            max2 = cur_max2;\n        } else\
    \ if (cur_max1 < cur_max2) {\n            max1 = cur_max1;\n        } else {\n\
    \            return true;\n        }\n    }\n    return false;", "    long long\
    \ sum = 0;\n    std::vector<std::pair<long, long> > result;\n    for(int i = 0;\
    \ i < l.size(); i++) {\n        sum += l[i];\n        result.push_back(std::make_pair(sum,\
    \ l[i]));\n    }\n    return std::adjacent_find(result.begin(), result.end())\
    \ ==\n        result.end();", "    std::vector<std::pair<long, long>> res;\n \
    \   std::map<long, long> m;\n    for(auto i:l) {\n        if(i!=0) {\n       \
    \     long prev = m.find(i); //find previous element in m\n            assert(prev\
    \ != m.end());\n            if(prev->second==i) {\n                return false;\n\
    \            }\n            m[i] = prev->second;\n        }\n    }\n    for(auto\
    \ &i:m) {\n        if(!l.empty()) {\n            long prev=i; \n            for(auto\
    \ j:l) {\n                if(j!=0) {\n                    if(prev==j) {\n    \
    \                    return false;\n                    }\n                  \
    \  prev = j;\n                }\n            }\n        }\n    }\n    return true;",
  "  // Your code here\n  long sum = 0;\n  for (long i = 0; i != l.size(); i++) {\n\
    \    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return\
    \ true;", "    // Initialize two integers to keep track of the first and the second\n\
    \    // elements of the array. Since there may be no two distinct elements, we\n\
    \    // initialize them to INT_MAX.\n    int ifirst = INT_MAX, isecond = INT_MAX;\n\
    \    // Initialize boolean variable to True as long as there are at least two\n\
    \    // distinct elements in the list.\n    bool bFirstDistinct = true;\n\n  \
    \  for (auto element : l) {\n        // If there are two elements in the list\
    \ that sum to zero, return True\n        // immediately.\n        if ((ifirst\
    \ != INT_MAX) && (isecond != INT_MAX) &&\n            (element == ifirst + isecond))\
    \ {\n            bFirstDistinct = false;\n            break;\n        }\n\n  \
    \      // If the first element in the list is different from the first element\n\
    \        // of the second list, then we know that there will be at least two distinct\n\
    \        // elements in the list.\n        if ((ifirst != INT_MAX) && (element\
    \ != ifirst)) {\n            bFirstDistinct = false;\n            break;\n   \
    \     }\n\n        // Set the first element of the array to the current element\
    \ and the\n        // second element of the array to the current element minus\
    \ the\n        // current element.\n        ifirst = element;\n        isecond\
    \ = element - isecond;\n    }\n\n    return bFirstDistinct;", "  std::sort(l.begin(),\
    \ l.end());\n  int k = 0;\n  for (int i = 0; i < l.size() - 1; ++i) {\n    int\
    \ j;\n    for (j = i + 1; j < l.size(); ++j) {\n      if (l[i] + l[j] == 0) {\n\
    \        if (k != j) {\n          return false;\n        }\n        ++k;\n   \
    \   }\n    }\n  }\n  return k == 0;", "  // Write your code here\n    for(long\
    \ i = 1; i < l.size(); ++i)\n    {\n        int j = i;\n        while(j > 0)\n\
    \        {\n            if(l[j] - l[j - 1] != 0)\n            {\n            \
    \    return false;\n            }\n            j--;\n        }\n    }\n    return\
    \ true;", "    for (long i = 0; i < l.size() - 1; i++) {\n        for (long j\
    \ = i + 1; j < l.size(); j++) {\n            if (l[i] + l[j] == 0) {\n       \
    \         return true;\n            }\n        }\n    }\n    return false;", " \
    \ long long int s = std::accumulate(l.begin(), l.end(), 0);\n  for (long long\
    \ int i = 1; i < s; ++i) {\n    for (long long int j = i + i; j < s; ++j) {\n\
    \      if (l[i] + l[j] == 0)\n        return true;\n    }\n  }\n  return false;",
  "    if (l.size() < 2) {\n        return false;\n    }\n    long first = l[0];\n\
    \    for (long i = 1, j = l[1]; i <= j; i++, j--) {\n        if (i == j) {\n \
    \           continue;\n        }\n        if (i > j) {\n            return false;\n\
    \        }\n        if (l[i] + l[j] != 0) {\n            return false;\n     \
    \   }\n    }\n    return true;", "    // your code goes here\n    std::vector<long>\
    \ nums;\n    std::vector<bool> visited;\n    for(long i=0;i<l.size();i++) {\n\
    \        if(!visited[l[i]]) {\n            nums.push_back(l[i]);\n           \
    \ visited[l[i]] = true;\n        }\n    }\n    if(nums.size() > 1) {\n       \
    \ for(long i=0;i<nums.size();i++) {\n            for(long j=i;j<nums.size();j++)\
    \ {\n                if(nums[i] + nums[j] == 0) {\n                    return\
    \ true;\n                }\n            }\n        }\n    }\n    return false;",
  "    if (l.size() < 2) return false;\n    long a = l[0], b = l[1];\n    long c =\
    \ 0;\n    long d = 0;\n    for (long i = 2; i < l.size(); i++) {\n        if (l[i]\
    \ > a && l[i] > b) {\n            d = (c - b) + l[i];\n            c = 0;\n  \
    \          b = d;\n        }\n        else if (l[i] > a) c = c + l[i];\n     \
    \   else if (l[i] > b) d = d + l[i];\n    }\n    return d == 0;", "  long sum\
    \ = 0;\n  for (int i = 0; i < l.size(); i++) {\n    sum += l[i];\n  }\n  assert(sum\
    \ == 0);\n  bool result = 0;\n  for (int i = 0; i < l.size() - 1; i++) {\n   \
    \ int j = (i + 1) % l.size();\n    result += l[i] + l[j];\n  }\n  return result\
    \ == 0;", "    std::unordered_map<long, bool> map;\n    for (long i = 0; i < l.size();\
    \ i++) {\n        map[l[i]] = true;\n    }\n    for (long i = 0; i < l.size();\
    \ i++) {\n        if (map.find(-l[i]) != map.end()) {\n            return true;\n\
    \        }\n    }\n    return false;", "    std::sort(l.begin(),l.end());\n  \
    \  long long res = 0;\n    for (long long i = 0; i< l.size(); i++){\n       if\
    \ (i != l.size()-1) {\n       res += l[i];\n       if (res == 0) return true;\n\
    \       }\n    }\n    return false;", "    std::vector<bool> flag(l.size());\n\
    \    std::iota(flag.begin(), flag.end(), false);\n    for (long i : l) {\n   \
    \     flag[i] = true;\n    }\n    for (int i = 0; i < l.size(); ++i) {\n     \
    \   for (int j = i + 1; j < l.size(); ++j) {\n            if (flag[i] + flag[j]\
    \ == 0) {\n                return true;\n            }\n        }\n    }\n   \
    \ return false;", "    // write your code here\n    auto s = l.size();\n    for(int\
    \ i=0; i<s; i++){\n        for(int j=0; j<s; j++){\n            if(i != j){\n\
    \                if(l[i] + l[j] == 0){\n                    return true;\n   \
    \             }\n            }\n        }\n    }\n    return false;", "    std::sort(l.begin(),\
    \ l.end());\n    long long int ans = 0;\n    for (long i = 0; i < l.size(); i++)\n\
    \        ans += l[i];\n    \n    return ans == 0;", "    long long int s = 0;\n\
    \    int counter = 0;\n    for (int i : l) {\n        s = s + i;\n        counter++;\n\
    \    }\n    if (counter < 2) {\n        return false;\n    }\n    for (int i =\
    \ 0; i < counter && i < l.size(); i++) {\n        long long int sum = 0;\n   \
    \     for (int j = 0; j < l.size(); j++) {\n            if (i == j) {\n      \
    \          continue;\n            }\n            sum = sum + l[j];\n        }\n\
    \        if (s % sum == 0) {\n            return true;\n        }\n    }\n   \
    \ return false;", "  // Your code goes here\n    long sum = 0;\n    for (long\
    \ i = 0; i < l.size(); i++) {\n      sum += l[i];\n    }\n    for (long i = 0;\
    \ i < l.size(); i++) {\n      if (l[i] - sum == 0) {\n        return true;\n \
    \     }\n    }\n    return false;", "    long long int arr[2 * l.size()];\n  \
    \  std::copy(l.begin(), l.end(), arr);\n    long long int sum = 0;\n    long long\
    \ int remained = 0;\n    for (long long int i = 0; i < l.size(); i++) {\n    \
    \    remained = arr[i];\n        for (long long int j = i + 1; j < l.size(); j++)\
    \ {\n            sum += arr[j];\n            if (sum == remained) {\n        \
    \        std::cout << arr[j] << \"  \" << arr[i] << \" \" << i << \" \" << j <<\
    \ std::endl;\n                return true;\n            }\n        }\n    }\n\
    \    return false;", "    int sum = 0;\n    for (long val : l)\n        sum +=\
    \ val;\n    for (int i = 0; i < l.size() - 1; i++)\n        if (l[i] != l[i +\
    \ 1]) {\n            if (sum - l[i] != 0)\n                return false;\n   \
    \     }\n    return true;", "    long long sum = 0;\n    for (auto i : l) {\n\
    \        sum += i;\n        if (sum < 0) return false;\n    }\n    if (sum ==\
    \ 0) return false;\n    for (auto i : l) {\n        sum -= i;\n        if (sum\
    \ < 0) return false;\n    }\n    return true;", "    if (l.size() == 1)\n    \
    \    return false;\n    std::sort(l.begin(), l.end());\n    long long firstSum\
    \ = 0;\n    long long secondSum = l[0];\n    for (long long i = 0; i < l.size();\
    \ i++) {\n        firstSum += l[i];\n        secondSum += firstSum;\n        if\
    \ (secondSum == 0)\n            return true;\n    }\n    return false;", "   \
    \ // TODO: Check if there exist two distinct elements that sum zero.\n    return\
    \ false;", "  int sum = 0;\n  for (long i = 0; i < l.size(); i++)\n    sum +=\
    \ l[i];\n  for (long i = 0; i < l.size() - 1; i++) {\n    if (l[i] + l[i + 1]\
    \ == sum) {\n      return true;\n    }\n  }\n  return false;", "    long long\
    \ sum = 0;\n    long long result = 0;\n    for (auto i : l) {\n        sum +=\
    \ i;\n        if (sum == 0) {\n            result = i;\n        }\n    }\n   \
    \ return result > 0;", "  if(l.size() == 0)\n    return false;\n  long long int\
    \ sum = std::accumulate(l.begin(), l.end(), 0ll);\n  return sum == 0;", "    //\
    \ Write your code here\n    // a. Create a unordered_map (map) with values set\
    \ to 0\n    std::unordered_map<long, long> map;\n    for(long i = 0; i < l.size();\
    \ i++) {\n        if(map.find(l[i]) != map.end()) {\n            if(map[l[i]]\
    \ > 0) {\n                return false;\n            }\n        } else {\n   \
    \         map[l[i]] = 0;\n        }\n    }\n    // b. Iterate over map and check\
    \ for existence of each element of l\n    // and if both have same value greater\
    \ than 0, then return false\n    for(auto &i: map) {\n        if(i.second > 0)\
    \ {\n            return false;\n        }\n    }\n    return true;", "    if (l.size()\
    \ <= 1) {\n        return false;\n    }\n    // sort list so largest number is\
    \ on top\n    std::sort(l.begin(), l.end());\n    // make two pointers pointing\
    \ to the head of list\n    long long int lower = l[0], upper = l[0];\n    // iterate\
    \ through the list\n    for (size_t i = 1; i < l.size(); ++i) {\n        if (lower\
    \ > l[i]) {\n            upper = lower;\n            lower = l[i];\n        }\
    \ else if (upper < l[i]) {\n            lower = l[i];\n        } else {\n    \
    \        upper = l[i];\n        }\n    }\n    if (lower == 0) {\n        return\
    \ true;\n    }\n    return false;", "    int a=0, b=0;\n    for(int i=0; i<l.size()-1;\
    \ i++) {\n        if(l[i]+l[i+1]==0) {\n            a++;\n        }\n        else\
    \ if((l[i]+l[i+1]>0) & (l[i]+l[i+1]==0)) {\n            b++;\n        }\n    }\n\
    \    if(a==1) return true;\n    else if(b==1) return false;\n    else if(a>2)\
    \ return true;\n    else if(b>2) return false;\n    return false;", "    // Your\
    \ code here.\n    long sum = 0, n = l.size();\n    for (long i = 0; i < n; ++i)\
    \ {\n        sum += l[i];\n    }\n    if (sum == 0) {\n        return true;\n\
    \    }\n    return false;", "    // write your code here\n    if(l.size()==0)\n\
    \        return false;\n    int sum=0;\n    for(int i=0;i<l.size();i++)\n    {\n\
    \        sum+=l[i];\n    }\n    if(sum==0)\n    {\n        return false;\n   \
    \ }\n    for(int i=l.size();i>0;i--)\n    {\n        sum-=l[i-1];\n        if(sum==0)\n\
    \        {\n            return true;\n        }\n    }\n    return false;", " \
    \ if (l.size() == 0) return false;\n  // sort the array\n  long long int ln =\
    \ *std::max_element(l.begin(), l.end()); // largest element\n  sort(l.begin(),\
    \ l.end());\n  int left = 0;\n  int right = l.size() - 1;\n  // loop through pairs\
    \ and see if the sum is zero\n  long long int sum = 0;\n  while (left < right)\
    \ {\n    if (l[left] + l[right] == 0) {\n      sum += l[left];\n      sum += l[right];\n\
    \      left++;\n      right--;\n    } else if (l[left] + l[right] > 0) {\n   \
    \   sum += l[left];\n      left++;\n    } else {\n      sum += l[right];\n   \
    \   right--;\n    }\n  }\n  return sum == 0;", "    int t = 0;\n    int n = l.size();\n\
    \    for(int i = 0; i < n; i++) {\n        t += l[i];\n    }\n    for(int i =\
    \ 0; i < n - 1; i++) {\n        if(t < 0) {\n            return false;\n     \
    \   }\n        for(int j = i + 1; j < n; j++) {\n            if(t + l[j] > 0)\
    \ {\n                t = t + l[j];\n            }\n        }\n    }\n    return\
    \ true;", "  std::sort(l.begin(), l.end());\n  int n = l.size();\n  for (int i\
    \ = 1; i < n; ++i) {\n    int j = i;\n    while (j < n && l[j] + l[j] == i) {\n\
    \      ++j;\n    }\n    if (j - i > 1)\n      return false;\n  }\n  return true;"]
stop_tokens:
- "\n}"
