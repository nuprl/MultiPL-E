name: HumanEval_60_sum_to_n
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// sum_to_n is a function that\
  \ sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n\
  // 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n\
  // 1\nlong sum_to_n(long n) {\n"
tests: "}\nint main() {\n    auto candidate = sum_to_n;\n    assert(candidate((1))\
  \ == (1));\n    assert(candidate((6)) == (21));\n    assert(candidate((11)) == (66));\n\
  \    assert(candidate((30)) == (465));\n    assert(candidate((100)) == (5050));\n\
  }\n"
completions: ["\tlong s = 0;\n\tfor (long i = 1; i <= n; i++)\n\t\ts += i;\n\treturn\
    \ s;", "\tif (n <= 0)\n\t\treturn 0;\n\tlong max_num = std::sqrt(n);\n\tlong sum_of_n\
    \ = 0;\n\tlong i;\n\tfor (i = 1; i < max_num; i++) {\n\t\tsum_of_n += i;\n\t\t\
    if (sum_of_n > n)\n\t\t\tbreak;\n\t}\n\treturn sum_of_n;", "    // Write your\
    \ code here\n    long sum = 0;\n    while(n > 0)\n    {\n        sum = sum + n;\n\
    \        n--;\n    }\n    return sum;", "\tassert(n > 0);\n\tlong result = 0;\n\
    \tfor (long i = 1; i <= n; i++) {\n\t\tresult += i;\n\t}\n\treturn result;", " \
    \   assert(n >= 0);\n    long s = 0;\n    for (long i = 1; i <= n; ++i) {\n  \
    \      s += i;\n    }\n    return s;", "    long sum = 0;\n    for (long i = n;\
    \ i > 0; i--) {\n        sum += i;\n    }\n    return sum;", "    if(n<=1) return\
    \ 1;\n    long sum = 0;\n    for(int i=1;i<=n;i++) {\n        sum += i;\n    }\n\
    \    return sum;", "    int result = 0;\n    for (int i = 1; i <= n; ++i) {\n\
    \        result += i;\n    }\n    return result;", "    long result = 0;\n   \
    \ for (long i = 1; i < n; ++i)\n        result += i;\n    return result;", " \
    \   long sum = 1;\n    for(int i=1; i<n; i++){\n        sum *= i;\n    }\n   \
    \ return sum;", "    if (n <= 0) {\n        // handle error here\n        return\
    \ 0;\n    }\n    // Summation from 1 to n\n    // Summation from 1 to n\n    long\
    \ ans = 1;\n    while (n > 0) {\n        ans += 1;\n        n -= 1;\n    }\n \
    \   return ans;", "  long sum=0;\n  for (long i=1;i<=n;i++){\n    sum+=i;\n  }\n\
    \  return sum;", "    long result = 0;\n    for (long i = 1; i <= n; ++i)\n  \
    \      result += i;\n    return result;", "  assert(n >= 1);\n  long res = 0;\n\
    \  for(int i = 1; i <= n; i++) {\n    res += i;\n  }\n  return res;", "    long\
    \ sum = 1;\n    for (int i = 1; i <= n; i++) {\n        sum += i;\n    }\n   \
    \ return sum;", "  if (n <= 1)\n    return 1;\n  return n + sum_to_n(n - 1);",
  "    if (n == 0)\n        return 0;\n    if (n < 10)\n        return n;\n    return\
    \ n + sum_to_n(n - 10);", "    long sum = 0;\n    for (long i = 1; i <= n; i++)\
    \ {\n        sum += i;\n    }\n    return sum;", "    long sum = 0;\n    long\
    \ last_num = 1;\n    for(long i=2;i<=n;i++) {\n        sum += last_num;\n    \
    \    last_num = last_num * i;\n    }\n    return sum;", "    long sum = 0;\n \
    \   long mod = (n % 2 == 0) ? n / 2 : n - 1 ;\n    while(n > 0) {\n      sum =\
    \ sum + mod;\n      n = n - 1;\n      mod = (n % 2 == 0) ? n / 2 : n - 1 ;\n \
    \   }\n    return sum;", "    assert(n >= 1);\n    long s = 1;\n    for (int i\
    \ = 2; i <= n; i++) {\n        s *= i;\n    }\n    return s;", "    // Complete\
    \ this function\n    long sum = 0;\n    for (int i = 1; i <= n; i++) {\n     \
    \   sum += i;\n    }\n    return sum;", "  if (n<0){\n    n=-n;\n  }\n  if (n==0)\
    \ {\n    return n;\n  }\n  int temp=n;\n  long sum=0;\n  while (temp!=0){\n  \
    \  sum=sum+temp%10;\n    temp=temp/10;\n  }\n  return sum;", "    // write your\
    \ code here\n    long long int sum=0;\n    for(int i=1;i<=n;i++){\n        sum+=i;\n\
    \    }\n    return sum;", "    long ans = 1;\n    long i = 1;\n    while (i <\
    \ n) {\n        ans += i;\n        i++;\n    }\n    return ans;", "    long sum\
    \ = 0;\n    for (long i = 1; i <= n; i++)\n        sum += i;\n    return sum;",
  "    // write your code here\n    long sum = 0;\n    long limit = n;\n    while\
    \ (limit > 0) {\n        if (limit % 2 == 0) {\n            sum += limit;\n  \
    \      }\n        limit /= 2;\n    }\n    return sum;", "    long result = 0;\n\
    \    for (long i = 1; i <= n; i++) {\n        result += i;\n    }\n    return\
    \ result;", "  long sum = 0;\n  for (int i = 1; i <= n; i++) {\n    sum += i;\n\
    \  }\n  return sum;", "    if(n <= 0) return 0;\n    long result = 1;\n    for(int\
    \ i = 1; i <= n; i++) {\n        result = result * i;\n    }\n    return result;",
  "  assert (n > 0);\n  long sum = 0;\n  for (long i = 1; i <= n; ++i) {\n    sum\
    \ += i;\n  }\n  return sum;", "  assert(n > 0);\n  long sum = 0;\n  for (long\
    \ i = 1; i <= n; i++)\n    sum += i;\n  return sum;", "  assert(n >= 0);\n  long\
    \ ans = 0;\n  // Loop invariant: ans is sum of all numbers from 1 to n inclusive.\n\
    \  long sum = 1;\n  for (long i = 2; i <= n; i++) {\n    ans += sum;\n    sum\
    \ = sum * i;\n  }\n  return ans;", "  assert(n > 0);\n  return (n * (n + 1))/2;",
  "    if(n<1) return 0;\n    long s = 0;\n    for(long i = 1; i <= n; ++i) s += i;\n\
    \    return s;", "  long result = 0;\n  while (n) {\n    result += n;\n    n /=\
    \ 10;\n  }\n  return result;", "  assert(n > 0);\n  long long sum = 0;\n  for\
    \ (long long i = 1; i < n; i++) {\n    sum += i;\n  }\n  return sum;", "    assert(n\
    \ >= 0 && \"sum_to_n() should sum to positive integer\");\n    long res = 0; //\
    \ Initialize res with 0.\n    for (int i = 0; i < n; i++) {\n        res = res\
    \ + i;\n    }\n    return res;", "    if (n == 0) {\n        return 0;\n    }\n\
    \n    return n + sum_to_n(n - 1);", "    long long sum = 1;\n    for (int i =\
    \ 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;", "    long sum\
    \ = 0;\n    for (int i=1; i<=n; i++) {\n        sum += i;\n    }\n    return sum;",
  "    long long sum = 0;\n    for(long long i = 1; i<n; i++) {\n        sum += i;\n\
    \    }\n    return sum;", "    // Complete the function. Do not change the function\
    \ header, \n    // only write the code inside sum_to_n.\n    return n <= 0 ? 0\
    \ : 1 + sum_to_n(n-1);", "    long sum = 0;\n    for (long i = 1; i <= n; i++)\n\
    \        sum += i;\n    return sum;", "  assert(n > 0 && n < 1000);\n  long sum\
    \ = 0;\n  for (long i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;",
  "  assert(n > 0);\n  long prev = 0;\n  for (long i = 1; i <= n; i++) {\n    prev\
    \ = prev + i;\n  }\n  return prev;", "    long long sum = 0; \n    for (int i\
    \ = 0; i < n; i++) \n        sum += i;\n    return sum;", "    // write your code\
    \ here\n    long sum = 0;\n    for(int i=0;i<n;i++)\n    {\n        sum += i;\n\
    \    }\n    return sum;", "    long total = 0;\n    for (long i = 1; i <= n; i++)\
    \ {\n        total += i;\n    }\n    return total;", "    long result = 0;\n \
    \   for(long i = 1; i <= n; i++) {\n        result += i;\n    }\n    return result;",
  "    long sum = 0;\n    for (long i = 1; i <= n; ++i) {\n        sum += i;\n   \
    \ }\n    return sum;", "    long sum = 0;\n    for (long i = 1; i <= n; i++) {\n\
    \        sum += i;\n    }\n    return sum;", "\tlong long ans = 1LL;\n\twhile\
    \ (n > 1) {\n\t\tans *= n;\n\t\tn--;\n\t}\n\tans *= n;\n\treturn ans;", "    assert(n\
    \ >= 0);\n    long res = 0;\n    for (long i = 1; i <= n; ++i)\n        res =\
    \ res + i;\n    return res;", "    int count = 0;\n    long sum = n;\n    for\
    \ (int i = 1; i < n; i++) {\n        sum += i;\n        count += 1;\n    }\n \
    \   return sum;", '    return (n * (n+1)) / 2;', "    assert(n >= 0);\n    assert(n\
    \ <= 100);\n\n    long sum = 0;\n    for (long i = 2; i <= n; i++) {\n       \
    \ sum += i;\n    }\n    return sum;", "    if(n <= 1) return 1;\n    else return\
    \ n*(n+1)/2;", "    long sum = 0;\n    for(int i = 1; i <= n; i++)\n    {\n  \
    \      sum += i;\n    }\n    return sum;", "    long sum = 0;\n    for (long i\
    \ = 1; i <= n; i++) sum += i;\n    return sum;", "    long long sum = 0;\n   \
    \ for(long long i = 1; (i <= n); i++)\n        sum += i;\n    return sum;", "\t\
    long ans = 0;\n\tassert(n >= 0);\n\tfor (long i = 1; i <= n; i++) {\n\t\tans +=\
    \ i;\n\t}\n\treturn ans;", "  if (n == 1)\n    return n;\n  long last_sum = 0;\n\
    \  for (long i = 1; i <= n; ++i) {\n    last_sum += i;\n  }\n  return last_sum;",
  "    long long int total = 0;\n    long long int sum = 0;\n    // looping using\
    \ while loop \n    while (n > 0) {\n        // sum will be equal to sum \n   \
    \     // + n\n        sum = sum + n;\n        // n is subtracted by one \n   \
    \     n = n - 1;\n        // total will be equal to total \n        // + sum\n\
    \        total = total + sum;\n    }\n    // return total \n    return total;",
  "    long long sum=0;\n    for(int i=1;i<=n;i++)\n        sum+=i;\n    return sum;",
  "  if (n == 1)\n    return n;\n  if (n < 0)\n    return std::numeric_limits<long>::max();\n\
    \  if (n > 0)\n    return std::numeric_limits<long>::min();\n  long sum = 0;\n\
    \  for (long i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;", '    return
    n*(n+1)/2;', "    if (n == 0) return 0;\n    else return sum_to_n(n - 1) + n;",
  "  // code here\n  long sum = 0;\n  for (long i = 1;i < n;i++){\n    sum = sum +\
    \ i;\n  }\n  return sum;", "  if (n <= 0)\n    return 0;\n  long ans = n;\n  long\
    \ cur = 1;\n  while (cur <= n) {\n    ans = ans + cur;\n    cur++;\n  }\n  return\
    \ ans;", "    if (n == 1)\n        return 1;\n    if (n < 0)\n        n = -n;\n\
    \    if (n == 0)\n        return 0;\n    long sum = 0;\n    for (; n > 0; ++n)\
    \ {\n        sum += 1;\n    }\n    return sum;", "    long s = 0;\n    for (long\
    \ i = 1; i <= n; i++) s += i;\n    return s;", "    long sum = 0;\n    for (long\
    \ i = 1; i <= n; i++)\n        sum += i;\n    return sum;", "    // Initialize\
    \ result with 0.\n    // If this fails, you may have written a bug that crashes\
    \ when\n    // you try to use this function.\n    long result = 0;\n    // Iterate\
    \ from 1 to n.\n    // You can replace this loop by an algorithm that solves this\n\
    \    // problem more efficiently.\n    for (long i = 1; i <= n; i++) {\n     \
    \   result += i;\n    }\n    return result;", "    // your code goes here\n  \
    \  if (n == 1)\n        return 1;\n    return n + sum_to_n(n - 1);", "    if(n\
    \ <= 1)\n        return 1;\n    return n + sum_to_n(n-1);", "\t// Your code goes\
    \ here\n\tlong sum = 0;\n\tfor(long i = 1; i <= n; i++){\n\t\tsum += i;\n\t}\n\
    \treturn sum;", "    if (n == 1)\n        return 1;\n    if (n == 2)\n       \
    \ return 2;\n    long sum = 1;\n    for (long i = 3; i <= n; i++){\n        sum\
    \ = sum + i;\n    }\n    return sum;", "    long long sum = 0;\n    for(int i\
    \ = 1; i <= n; ++i)\n        sum += i;\n    return sum;", "    long res = 0;\n\
    \    for (long i = 1; i <= n; i++)\n        res += i;\n    return res;", "   \
    \ if ( n <= 0 )\n        return 0;\n    long sum = 0;\n    // write your code\
    \ here\n    long cur = 0;\n    long cur1 = 1;\n    long cur2 = 1;\n    long max\
    \ = (long) sqrt(n);\n    while(cur < n)\n    {\n        cur1 = cur2;\n       \
    \ cur2 = cur + cur1;\n        cur = cur2;\n        sum += cur2;\n    }\n    return\
    \ sum;", "    // your code goes here\n  assert(n>0);\n  std::bitset<64> s = 0;\n\
    \  int m = 0;\n  for(int i = 1;i<n;++i) {\n    s += i;\n    if((i+1)%m==0) {\n\
    \      m = m+1;\n    }\n  }\n  return s.to_ulong();", "  long long arr[n + 1];\n\
    \  for (long long i = 1; i <= n; i++) {\n    long long tmp = arr[i - 1];\n   \
    \ arr[i - 1] += i;\n    arr[n] = arr[i - 1];\n    return tmp;\n  }", "  assert(n\
    \ >= 1);\n  long cur = 1, prev = 0;\n  long result = 0;\n  while (cur <= n) {\n\
    \    result += cur;\n    cur = prev + cur;\n    prev = cur;\n  }\n  return result;",
  "  int i;\n  long sum = 0;\n  for (i = 1; i <= n; i++) {\n    sum += i;\n  }\n \
    \ return sum;", "  assert (n>0L);\n  long ans = n+n+1;\n  while (n > 1L) {\n \
    \   ans += n+n+1;\n    n--;\n  }\n  return ans;", "  long result = 0;\n  while\
    \ (n > 1) {\n    if (n % 2 == 0) {\n      result += n;\n    }\n    n /= 2;\n \
    \ }\n  return result;", "  long sum = 0;\n  for (long i = n; i > 0; i /= 10)\n\
    \    sum += (i * std::pow(10, i-1));\n  return sum;", "    long long int sum =\
    \ 0;\n    long long int rem;\n    while (n > 0) {\n        rem = n % 10;\n   \
    \     sum = sum * 10 + rem;\n        n = n / 10;\n    }\n    return sum;", " \
    \   if (n == 0)\n        return 0;\n    long ans = 1;\n    for (long i = 1; i\
    \ <= n; i++)\n        ans = ans * i;\n    return ans;", "    if ( n == 1)\n  \
    \      return n;\n    else if ( n == 0)\n        return 0;\n    long sum = 1;\n\
    \    for (long i = 1; i<n; i++) {\n        sum = sum*i;\n    }\n    return sum;",
  "    long sum = 0;\n    for (long i = 1; i <= n; i++)\n        sum += i;\n    return\
    \ sum;", "    // write your code here\n    long sum=0;\n    while(n>0){\n    \
    \    sum+=(n&1);\n        n>>=1;\n    }\n    return sum;", "    if (n == 1)\n\
    \        return 1;\n    if (n == 0)\n        return 0;\n    // Sum of first i\
    \ numbers is n*i\n    long sum = 0;\n    for (int i = 1; i < n; i++) {\n     \
    \   sum += i;\n    }\n    return sum;", "    long long res = 0;\n    for(long\
    \ long i = 1; ; i++)\n    {\n        res += i;\n        if(i > n) break;\n   \
    \ }\n    return res;", "    assert(n >= 1);\n    long sum = 0;\n    for (long\
    \ i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;", "    long\
    \ a = 0,\n        b = 0;\n    for(long i = 1; i < n; ++i) {\n        a = a + i;\n\
    \        b = b + i;\n    }\n    return b;", "    long sum = 0;\n    for(int i=1;\
    \ i<=n; i++){\n        sum = sum + i;\n    }\n    return sum;", "  long sum =\
    \ 0;\n  for(int i = 1; i < n; i++)\n    sum += i;\n  return sum;", "  assert(n\
    \ > 0);\n  long s = n;\n  for(; n > 1; n--)\n    s += n;\n  return s;", "  if\
    \ (n <= 0) return 0;\n  long ans = 0;\n  for (int i = 1; i <= n; i++) {\n    ans\
    \ += i;\n  }\n  return ans;", "    if (n <= 0)\n        throw std::invalid_argument(\"\
    Input number is less than 0\");\n    long sum = 0;\n    for (long i = 1; i <=\
    \ n; i++)\n        sum += i;\n    return sum;", "    assert(n >= 0);\n    if (n\
    \ == 0)\n        return 0;\n    long total = 0;\n    for (long i = 1; i <= n;\
    \ i++) {\n        total += i;\n    }\n    return total;", "  assert(n >= 1);\n\
    \  long sum = 0;\n  for(long i = 1; i<n; ++i)\n    sum += i;\n  return sum;",
  "    long sum = 1;\n    for (; n > 1; n--) {\n        sum += n;\n    }\n    return\
    \ sum;", "    if(n < 0) return 0;\n    long long sum = 0;\n    for(long i = 1;\
    \ i <= n; i++) sum += i;\n    return sum;", "  long sum = 0;\n  assert(n <= 1000000007);\n\
    \  for (long i = 2; i <= n; ++i) {\n    sum += i;\n  }\n  return sum;", "  long\
    \ sum = 0;\n  for (int i = 1; i < n; i++) {\n    sum += i;\n  }\n  return sum;",
  "    if(n == 1) return 1;\n    long res = 1;\n    for(int i = 1; i < n; i++)\n \
    \       res = res * i;\n    return res;", "    long sum = 0;\n    for(int i=1;\
    \ i<=n; i++){\n        sum+=i;\n    }\n    return sum;", "    // write your code\
    \ here\n    long sum =0;\n    for(int i=1; i<n; i++){\n        sum+=i;\n    }\n\
    \    return sum;", "  long s=0;\n  for(int i=1;i<=n;i++) {\n    s += i;\n  }\n\
    \  return s;", '    return accumulate(n, [&](int acc){return acc;});', "    long\
    \ sum = 0;\n    for (long i = 1; i <= n; i++) {\n        sum += i;\n    }\n  \
    \  return sum;", "    long sum = 0;\n    while (n > 1) {\n        sum += n;\n\
    \        n /= 2;\n    }\n    return sum;", "    long sum = 0;\n    for (int i\
    \ = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;", "    long sum\
    \ = 0;\n    for (int i = 1; i <= n; ++i)\n        sum += i;\n    return sum;",
  "  long res = 0;\n  for(int i = 1; i <= n; ++i) {\n    res = res + i;\n  }\n  return\
    \ res;", "    // write your code here\n    long res = 0;\n    while(n > 1){\n\
    \        res+=n;\n        n--;\n    }\n    return res;", "    // write your code\
    \ here\n    return n;", "    assert(n > 1);\n    long sum = 0;\n    for (long\
    \ i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;", "  int sum\
    \ = 0;\n  for (int i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;",
  "    assert(n >= 1);\n    long sum = 0;\n    for (long i = 1; i <= n; i++) {\n \
    \       sum += i;\n    }\n    return sum;", "    long sum = 0;\n    while (n)\
    \ {\n        sum += n;\n        n /= 2;\n    }\n    return sum;", "  long result\
    \ = 0;\n  for (long i = 1; i <= n; i++) {\n    result += i;\n  }\n  return result;",
  "  long res = 0;\n  assert(n >= 0);\n  for (long i = 1; i <= n; ++i) {\n    res\
    \ += i;\n  }\n  return res;", "  if (n == 0)\n    return 1;\n  if (n == 1)\n \
    \   return 2;\n  if (n == 2)\n    return 3;\n  if (n == 3)\n    return 4;\n  if\
    \ (n == 4)\n    return 5;\n  if (n == 5)\n    return 6;\n  if (n == 6)\n    return\
    \ 7;\n  if (n == 7)\n    return 8;\n  if (n == 8)\n    return 9;\n  if (n == 9)\n\
    \    return 10;\n  if (n == 10)\n    return 11;\n  if (n == 11)\n    return 12;\n\
    \  if (n == 12)\n    return 13;\n  if (n == 13)\n    return 14;\n  if (n == 14)\n\
    \    return 15;\n  if (n == 15)\n    return 16;\n  if (n == 16)\n    return 17;\n\
    \  if (n == 17)\n    return 18;\n  if (n == 18)\n    return 19;\n  if (n == 19)\n\
    \    return 20;\n  if (n == 20)\n    return 21;\n  if (n == 21)\n    return 22;\n\
    \  if (n == 22)\n    return 23;\n  if (n == 23)\n    return 24;\n  if (n == 24)\n\
    \    return 25;\n  if (n == 25)\n    return 26;\n  if (n == 26)\n    return 27;\n\
    \  if (n == 27)\n    return 28;\n  if (n == 28)\n    return 29;\n  if (n == 29)\n\
    \    return 30;\n  if (n == 30)\n    return 31;\n  if (n == 31)\n    return 32;\n\
    \  if (n == 32)\n    return 33;\n  if (n == 33)\n    return 34;\n  if (n == 34)\n\
    \    return 35;\n  if (n == 35)\n    return 36;\n  if (n == 36)\n    return 37;\n\
    \  if (n == 37)\n    return 38;\n  if (n == 38)\n    return 39;\n  if (n == 39)\n\
    \    return 40;\n  if (n == 40)\n    return 41;\n  if (n == 41)\n    return 42;\n\
    \  if (n == 42)\n    return 43;\n  if (n == 44)\n    return 45;\n  if (n == 45)\n\
    \    return 46;\n  if (n == 46)\n    return 47;\n  if (n == 47)\n    return 48;\n\
    \  if (n == 49)\n    return 50;\n  if (n == 51)\n    return 52;\n  if (n == 54)\n\
    \    return 57;\n  if (n == 56)\n    return 59;\n  if (n == 58)\n    return 61;\n\
    \  if (n == 60)\n    return 63;\n  if (n == 64)\n    return 65;\n  if (n == 66)\n\
    \    return 67;\n  if (n == 68)\n    return 71;\n  if (n == 69)\n    return 73;\n\
    \  if (n == 70)\n    return 75;\n  if (n == 72)\n    return 77;\n  if (n == 74)\n\
    \    return 79;\n  if (n == 76)\n    return 81;\n  if (n == 78)\n    return 83",
  "    if (n == 1)\n        return 1;\n    long sum_of_ones = 0;\n    long sum_of_twos\
    \ = 1;\n    long ones = 1;\n    for (long i = 2; i <= n; i++) {\n        sum_of_ones\
    \ = sum_of_ones + ones;\n        sum_of_twos = sum_of_twos * 2;\n        ones\
    \ = ones * i;\n    }\n    return sum_of_ones + sum_of_twos;", "    long ans =\
    \ n;\n    for (long i = 1; i < n; ++i) {\n        ans += i;\n    }\n    return\
    \ ans;", "  int sum=0;\n  for (int i = 1; i <= n; i++) \n    sum += i;\n  return\
    \ sum;", "    int sum = 0;\n    long x;\n    for (int i = 1; i <= n; i++) {\n\
    \        x = (long)i;\n        sum += x;\n    }\n    return sum;", "    if(n >=\
    \ 1){\n        return sum_to_n(n - 1) + n;\n    }else{\n        return n;\n  \
    \  }", "    long res = 0;\n    for (int i=1; i <= n; ++i) {\n        res+=i;\n\
    \    }\n    return res;", "\tlong sum = 0;\n\tlong one = 1;\n\tfor (long i = 1;\
    \ i < n; i++) {\n\t\tsum += one;\n\t\tone = one << 1;\n\t}\n\treturn sum;", " \
    \ // Write your code here.\n  long sum=0;\n  for(int i=1;i<=n;i++){\n    sum+=i;\n\
    \  }\n  return sum;", "    if (n == 0) return 0;\n    long sum = 0;\n    for (long\
    \ i = 1; i <= n; ++i) {\n        sum += i;\n    }\n    return sum;", "\tassert(n\
    \ > 0);\n\tlong res = 1;\n\tfor (long i = 1; i <= n; i++) {\n\t\tres += i;\n\t\
    }\n\treturn res;", "    long sum=0;\n    for(int i=1;i<=n;i++) {\n        sum+=i;\n\
    \    }\n    return sum;", "  if (n < 1) {\n    throw std::invalid_argument(\"\
    n is less than 1\");\n  }\n  if (n <= 1000) {\n    return n*(n + 1) / 2;\n  }\
    \ else {\n    return n;\n  }", "    // assert(n >= 1);\n    if (n == 1) return\
    \ 1;\n    long s = 2;\n    for (long i = 3; i <= n; i++) {\n        s += s;\n\
    \    }\n    return s;", "    std::bitset<(1 << 30)> bs(n); // convert n to bitset.\n\
    \    long long int sum = 0;\n    for (long long int bit = 1, i = bs.testset();\
    \ b; i++, b = i & -i) {\n        if (bit == bs.size()) {\n            sum += bit;\n\
    \            bit = 1;\n        }\n        bit = bit << 1;\n    }\n    return sum;",
  "  long sum = 0;\n  assert(n >= 1);\n  \n  for (long i = 1; i <= n; i++) {\n   \
    \ sum += i;\n  }\n  return sum;", "\tlong result = 0;\n\tlong limit = n;\n\twhile\
    \ (n > 0) {\n\t\tresult += n;\n\t\t--limit;\n\t\tn /= 10;\n\t}\n\treturn result;",
  "    std::bitset<100> bs(n);\n    long sum = 0;\n    for (long i = 1; i <= n; ++i)\
    \ {\n        sum += i;\n        bs.set(sum % n);\n    }\n    return sum;", " \
    \   if (n <= 0)\n        return 0;\n    long sum = 0;\n    while (n > 1) {\n \
    \       sum += n;\n        n = sum;\n    }\n    return sum;", "  assert(n >= 1);\n\
    \  long ans = 1;\n  for (int i = 1; i <= n; ++i)\n    ans += i;\n  return ans;",
  "    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += i;\n    }\n\
    \    return sum;", "    long sum = 0;\n    for (long i=1; i<=n; i++){\n      \
    \  sum += i;\n    }\n    return sum;", "    int total = 0;\n    for (int i = 0;\
    \ i < n; i++) {\n        total += i;\n    }\n    return total;", "    long ans\
    \ = 0;\n    for (long i = 1; i <= n; i++) {\n        ans += i;\n    }\n    return\
    \ ans;", "    long sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum +=\
    \ i;\n    }\n    return sum;", "    if (n == 0)\n        return 0;\n    long ans\
    \ = 1;\n    for (int i = 0; i < n; i++)\n        ans *= i;\n    return ans;",
  "  // Initialize our accumulator to 0\n  long sum = 0;\n  // Use a while loop to\
    \ traverse the numbers from 1 to n\n  while (n--) {\n    // Use an if condition\
    \ to check if n is divisible by 3\n    if (n % 3 == 0)\n    // If it is then add\
    \ the number to our sum\n      sum += n;\n    // Use an if condition to check\
    \ if n is divisible by 5\n    else if (n % 5 == 0)\n    // If it is then add the\
    \ number to our sum\n      sum += n;\n    // Use an if condition to check if n\
    \ is divisible by 15\n    else if (n % 15 == 0)\n    // If it is then add the\
    \ number to our sum\n      sum += n;\n    // Use an if condition to check if n\
    \ is divisible by 3\n    else if (n % 3 == 0)\n    // If it is then add the number\
    \ to our sum\n      sum += n;\n    // Use an if condition to check if n is divisible\
    \ by 5\n    else if (n % 5 == 0)\n    // If it is then add the number to our sum\n\
    \      sum += n;\n    // Use an if condition to check if n is divisible by 15\n\
    \    else if (n % 15 == 0)\n    // If it is then add the number to our sum\n \
    \     sum += n;\n    // Use an if condition to check if n is divisible by 3\n\
    \    else if (n % 3 == 0)\n    // If it is then add the number to our sum\n  \
    \    sum += n;\n    // Use an if condition to check if n is divisible by 5\n \
    \   else if (n % 5 == 0)\n    // If it is then add the number to our sum\n   \
    \   sum += n;\n    // Use an if condition to check if n is divisible by 15\n \
    \   else if (n % 15 == 0)\n    // If it is then add the number to our sum\n  \
    \    sum += n;\n    // Use an if condition to check if n is divisible by 3\n \
    \   else if (n % 3 == 0)\n    // If it is then add the number to our sum\n   \
    \   sum += n;\n    // Use an if condition to check if n is divisible by 5\n  \
    \  else if (n % 5 == 0)\n    // If it is then add the number to our sum\n    \
    \  sum += n;\n    // Use an if condition to check if n is divisible by 15\n  \
    \  else if (n % 15 == 0)\n    // If it is then add the number to our sum\n   \
    \   sum += n;\n  }\n  // Return the sum of the numbers from 1 to n\n  return sum;",
  "  long sum = 0;\n  for (long i = 1; i<=n; i++) \n    sum += i;\n  return sum;",
  '    // your code', "  // assert n >= 0\n  // assert n > 0\n  // let sum be 0\n\
    \  // let i be 1\n  // while i <= n\n  // sum is sum + i\n  // i increase by 1\n\
    \  long sum = 0;\n  for (long i = 2; i <= n; i++) {\n    sum += i;\n  }\n  return\
    \ sum;", "    long sum = 0;\n    for (int i = 1; i <= n; ++i)\n        sum +=\
    \ i;\n    return sum;", "    long long ans = 0;\n    for (long long i = 2; i <=\
    \ n; i++) ans += i;\n    return ans;", "\tlong sum = 0;\n\tlong k = n;\n\twhile\
    \ (k > 0) {\n\t\tsum += k;\n\t\tk--;\n\t}\n\treturn sum;", "    long sum = 1;\n\
    \    long m = n;\n    for (long i = 1; i <= n; ++i) {\n        sum += (m * i -\
    \ m);\n    }\n    return sum;", "    long ans = 0;\n    for (long i = 1; i <=\
    \ n; ++i) {\n        ans += i;\n    }\n    return ans;", "  int sum = 0;\n  assert(n\
    \ >= 0);\n  while (n--)\n    sum += n;\n  return sum;", "    assert(n >= 1);\n\
    \    return (n * (n + 1)) / 2;", "    long sum = 1;\n    while (n>0){\n      \
    \  sum++;\n        n--;\n    }\n    return sum;", "  long sum = 0;\n  for (long\
    \ i = 1; i <= n; i++) sum += i;\n  return sum;", "  long sum = 0;\n  while (n)\
    \ {\n    sum += (n % 10) + 1;\n    n /= 10;\n  }\n  return sum;", "  assert(n\
    \ > 0);\n  long result = 1;\n  for (long i = 1; i <= n; ++i) {\n    result *=\
    \ i;\n  }\n  return result;", "  if(n == 0) return 1;\n  if(n == 1) return n;\n\
    \  long res = 0;\n  for(int i = 1; i <= n; i++) {\n    res += i;\n  }\n  return\
    \ res;", "    // assert(n >= 0);\n    long sum = 0;\n    for (long i = 1; i <\
    \ n; i++) {\n        sum += i;\n    }\n    return sum;", "  // your code goes\
    \ here\n  if(n<0){\n    n=-n;\n    return sum_to_n(n);\n  }\n  return n*(n+1)/2;",
  "    long result=1;\n    while (n>1) {\n        n-=1;\n        result+=n;\n    }\n\
    \    return result;", "\tassert(n > 0);\n\tlong sum = 0;\n\tfor (long i = 1; i\
    \ <= n; i++)\n\t\tsum += i;\n\treturn sum;", "    long long int sum = 0;\n   \
    \ for(int i = 1; i < n; i++)\n        sum += i;\n    return sum;", "    // sum\
    \ of numbers from 1 to n\n    long long int sum = 0;\n    for(int i = 1; i < n;\
    \ ++i) {\n        sum += i;\n    }\n    return sum;", "  if (n < 1) {\n    long\
    \ ans = 1L;\n    return ans;\n  }\n  // We can use the formula for sum from Wikipedia\n\
    \  long long sum = 1L;\n  for (long i = 2; i <= n; i++) {\n    sum = sum + i;\n\
    \  }\n  long long ans = sum;\n  return ans;", '  return std::accumulate(std::begin(my_array),
    std::end(my_array), 0ULL, n);', "    long ans = n;\n    for (long i = 2; i <=\
    \ n; i++)\n        ans += i;\n    return ans;", "\tlong sum = 1;\n\tlong limit\
    \ = n;\n\n\tfor (long i = 2; i <= limit; i++)\n\t\tif (limit % i == 0)\n\t\t\t\
    sum += i;\n\n\treturn sum;", "  long s = 0;\n  for(int i = 1; i <= n; i++) {\n\
    \    s = s + i;\n  }\n  return s;", "  long res = 0;\n  assert(n >= 0);\n  //\
    \ Sum 1...n\n  for (long i = 1; i <= n; ++i) {\n    res += i;\n  }\n  return res;",
  "    long s = 1, sum = 0;\n    for (long i = 1; i <= n; i++)\n        sum += s;\n\
    \    cout << sum << endl;\n    return sum;", "  // sum of 1 to n\n  long sum =\
    \ 0;\n  for (long i = 1; i <= n; ++i) {\n    sum += i;\n  }\n  return sum;", " \
    \   long sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += i;\n   \
    \ }\n    return sum;", "    // write your code here\n    long sum = 0;\n    for(long\
    \ i = 1; i <= n; i++){\n        sum = sum + i;\n    }\n    return sum;", "   \
    \ long sum = 0;\n    for (long i = 1; i <= n; i++) {\n        sum += i;\n    }\n\
    \    return sum;", "    long sum = 0;\n    for (long i = 1; i <= n; i++) {\n \
    \       sum += i;\n    }\n    return sum;", "  long sum = 0;\n  assert(n > 0);\n\
    \  for (int i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;", "    long\
    \ s = 0;\n    long mod = n;\n    while(mod > 1){\n        s += mod;\n        mod\
    \ = mod >> 1;\n    }\n    return s;", "    long sum = 0;\n    for (int i = 1;\
    \ i < n; i++) {\n        sum += i;\n    }\n    return sum;", "    int count =\
    \ 0;\n    for (long i = 1; i <= n; ++i)\n        count += i;\n    return count;",
  "    if(n == 1) return 1;\n    else if(n%2 != 0) return n*(n-1)/2;\n    else return\
    \ n*(n+2)/2;", "  assert(n >= 1);\n  long ans = 0;\n  for (int i = 1; i <= n;\
    \ i++) {\n    ans += i;\n  }\n  return ans;", "    if (n == 0)\n        return\
    \ 0;\n    // This function computes sum from 1 to the given number.\n    long\
    \ sum = 0;\n    for (long i = 1; i <= n; i++)\n        sum += i;\n    return sum;",
  "    long sum = 0;\n    for (long i = 1; i <= n; i++) {\n        sum += i;\n   \
    \ }\n    return sum;", "    if(n < 2) return 1;\n    return n + sum_to_n(n - 1);",
  "    if(n <= 0) return -1;\n    long s = 1;\n    long r = n;\n    long i = 2;\n\
    \    while(r != 0){\n        r = r / i;\n        s++;\n        i++;\n    }\n \
    \   return s;", "    // code here\n    // write your code here\n    return n+1;",
  "    if(n==1)\n        return n;\n    if(n%2==0)\n        return (sum_to_n(n/2)+1);\n\
    \    else \n        return sum_to_n(n/2);", "    if(n <= 0) return 0;\n    if(n\
    \ < 10) return n;\n    long sum = 0;\n    for(long i = 2; i <= n; sum += i, i\
    \ <<= 1);\n    return sum;", "    long ans = 0;\n    for (long i = 1; i <= n;\
    \ i++) {\n        ans += i;\n    }\n    return ans;"]
stop_tokens:
- "\n}"
