name: HumanEval_15_string_sequence
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
  \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
  // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
  \ n) {\n"
tests: "}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
  \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
  \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
completions: ["    if (n <= 0)\n        return \"0\";\n    std::string ret = \"0 \"\
    ;\n    while (n != 0) {\n        ret += std::to_string(n%10) + \" \";\n      \
    \  n /= 10;\n    }\n    std::reverse(ret.begin(), ret.end());\n    return ret;",
  "    assert(n >= 0);\n    std::string s;\n    while (n > 0) {\n        s += ' '\
    \ + (n % 10);\n        n /= 10;\n    }\n    return s;", "    std::ostringstream\
    \ ss;\n    ss << n;\n    return ss.str();", "  long start = 0;\n  std::string\
    \ result = \"0\";\n  for (long i = 1;; ++i)\n    if (i >= n) result += \" \" +\
    \ i;\n    else\n      result += \" \" + std::to_string(start++);\n  return result;",
  "  std::ostringstream result;\n  result << 0;\n  for (long i = 1; i <= n; i++)\n\
    \    result << \" \" << i;\n  return result.str();", "  std::ostringstream oss;\n\
    \  oss << n;\n  return oss.str();", "  int k = 0;\n  std::stringstream ss;\n \
    \ ss << n;\n  while (!ss.eof()) {\n    ss << ' ' << k;\n    k += 1;\n  }\n  return\
    \ ss.str();", "    std::stringstream ss;\n    for (long i = 0; i < n; i++)\n \
    \       ss << (i + 1);\n    return ss.str();", "    std::string s;\n    for(long\
    \ i = 0; i < n; i++) s += std::to_string(i);\n    return s;", "    std::ostringstream\
    \ os;\n    long i;\n    os << \"[\";\n    for (i = 0; i <= n; i++) {\n       \
    \ os << i;\n        if (i < n) {\n            os << \" \";\n        }\n    }\n\
    \    os << \"]\";\n    return os.str();", "  if (n == 0) return \"0\";\n  std::stringstream\
    \ ss;\n  for (long i = 0; i < n; ++i) {\n    ss << i << \" \";\n  }\n  return\
    \ ss.str();", "  long s = 1;\n  std::string s;\n  for (int i = 1; i <= n; ++i)\
    \ {\n    s = to_string(i) + \" \" + s;\n  }\n  return s;", "    assert(n >= 0);\n\
    \    \n    std::string ret = \"\";\n    \n    if (n == 0)\n        return ret;\n\
    \    \n    for (int i = 0; i < n; ++i)\n        ret += (i < 10 ? \" 0 \" : \"\
    \ \");\n    \n    return ret;", "  if (n <= 0)\n    return \"0\";\n  std::string\
    \ ans = \"\";\n  for (long i = 0; i < n; ++i) {\n    ans += std::to_string(i);\n\
    \  }\n  return ans;", "  std::stringstream ss;\n  long i = 0;\n  while (n > 0)\
    \ {\n    ss.write(std::to_string(++i).data(), std::to_string(n).size());\n   \
    \ n -= std::to_string(n).size();\n  }\n  return ss.str();", "    std::string s(std::to_string(n));\n\
    \    size_t pos = 0;\n    while (pos < s.size()) {\n        s[pos++] = ' ';\n\
    \    }\n    return s;", "  // Initialize a vector of strings storing the numbers\
    \ from 0 to n\n  std::vector<std::string> v(n + 1);\n  for (int i = 0; i < n;\
    \ ++i) {\n    v[i] = std::to_string(i);\n  }\n  return std::accumulate(v.begin(),\
    \ v.end(), std::string(), \n    [](std::string result, std::string s) { result\
    \ += s + \" \"; return result; });", "  // Code adapted from https://stackoverflow.com/a/10458549/1001213\n\
    \  char buffer[1000];\n  for (int i = 1; i < n; ++i) {\n    // convert i's binary\
    \ representation to string and append it to buffer.\n    itoa(i, buffer, 10);\n\
    \    buffer += \" \";\n  }\n  return buffer;", "  if (n<1)\n    return \"0\";\n\
    \  std::string s = \"\";\n  for (long i = 0; i <= n; i++)\n    s+= std::to_string(i);\n\
    \  return s;", "  assert(n >= 0);\n  std::string ans = \"0\";\n  long mod = n\
    \ % 10;\n  if (mod > 0) {\n    ans += std::to_string(mod);\n    n = n / 10;\n\
    \  }\n  while (n > 0) {\n    ans += std::to_string(n % 10) + \" \";\n    n = n\
    \ / 10;\n  }\n  return ans;", "   std::string s;\n   std::iota(s.begin(), s.end(),\
    \ 0);\n   size_t len = s.length();\n   return std::string(s.begin(), s.begin()\
    \ + n);", "\tassert(n > 0);\n\tstd::string str;\n\tfor(int i = 0; i <= n; i++)\
    \ {\n\t\tstr += std::to_string(i);\n\t}\n\treturn str;", "   std::ostringstream\
    \ out;\n   assert(n);\n   for(long i = 1; i <= n; ++i)\n      out << i << \" \"\
    ;\n   return out.str();", "    std::string res;\n    for(int i = 0; i <= n; ++i)\
    \ {\n        res += std::to_string(i);\n    }\n    return res;", "    std::string\
    \ s(0, ' ');\n    for (long i = 1; i < n; i++) s += ' ' + (i - 1);\n    return\
    \ s;", "  // Base case\n  if (n <= 0) {\n    return \"0\";\n  }\n  // Build up\
    \ result\n  std::string result = \"0 \";\n  // Perform recursion, starting from\
    \ n-1\n  for (long i = n-1; i >= 1; i--) {\n    result += std::to_string(i) +\
    \ \" \";\n  }\n  // Return result\n  return result;", "  if (n < 0) return \"\
    0\";\n  std::string s;\n  while (n > 0) {\n    s.insert(s.end(), n % 10, n % 10\
    \ + 10);\n    n /= 10;\n  }\n  return s;", "  // If n is less than or equal to\
    \ 0 then print a number as 0.\n  if (n <= 0) {\n    return \"0\";\n  }\n  // If\
    \ n is greater than or equal to 10 then print a number as 10.\n  if (n >= 10)\
    \ {\n    return \"10\";\n  }\n  // If n is greater than or equal to 100 then print\
    \ a number as 100.\n  if (n >= 100) {\n    return \"100\";\n  }\n  // If n is\
    \ greater than or equal to 1000 then print a number as 1000.\n  if (n >= 1000)\
    \ {\n    return \"1000\";\n  }\n  // If n is greater than or equal to 10000 then\
    \ print a number as 10000.\n  if (n >= 10000) {\n    return \"10000\";\n  }\n\
    \  // If n is greater than or equal to 100000 then print a number as 100000.\n\
    \  if (n >= 100000) {\n    return \"100000\";\n  }\n  // If n is greater than\
    \ or equal to 1000000 then print a number as 1000000.\n  if (n >= 1000000) {\n\
    \    return \"1000000\";\n  }\n  // If n is greater than or equal to 10000000\
    \ then print a number as 10000000.\n  if (n >= 10000000) {\n    return \"10000000\"\
    ;\n  }\n  // If n is greater than or equal to 100000000 then print a number as\
    \ 100000000.\n  if (n >= 100000000) {\n    return \"100000000\";\n  }\n  // If\
    \ n is greater than or equal to 1000000000 then print a number as 1000000000.\n\
    \  if (n >= 1000000000) {\n    return \"1000000000\";\n  }\n  // If n is greater\
    \ than or equal to 10000000000 then print a number as 10000000000.\n  if (n >=\
    \ 10000000000) {\n    return \"10000000000\";\n  }\n  // If n is greater than\
    \ or equal to 100000000000 then print a number as 100000000000.\n  if (n >= 100000000000)\
    \ {\n    return \"100000000000\";\n  }\n  // If n is greater than or equal to\
    \ 1000000000000 then print a number as 1000000000000.\n  if (n >= 1000000000000)\
    \ {\n    return \"1000000000000\";\n  }\n  // If n is greater than or equal to\
    \ 10000000000000 then print a number as 10000000000000.\n  if (n >= 10000000000000)\
    \ {\n    return \"10000000000000\";\n  }\n  // If n is greater than or equal to\
    \ 100000000000000 then print a number as 100000000000000.\n  if (n >= 100000000000000)\
    \ {\n    return \"100000000000000\";\n  }\n  // If n is greater than or equal\
    \ to 1000000000000000 then print a number as 1000000000000000.\n  if (n >= 1000000000000000)\
    \ {\n    return \"1000000000000000\";\n  }\n  // If n is greater than or equal\
    \ to 10000000000", "    std::string s = \"\";\n    long cur = 1;\n    for(long\
    \ i = 0; i <= n; i++) {\n        s += to_string(cur);\n        cur *= 10;\n  \
    \  }\n    return s;", "  if (n == 0)\n    return std::string();\n  std::string\
    \ str = \"\";\n  for (int i = 0; i < n; i++) {\n    str += std::to_string(i);\n\
    \  }\n  return str;", "\tlong i;\n\tstd::string s(n+1, ' ');\n\tfor (i = 0; i\
    \ < n; i++)\n\t\ts[i] = '0'+i;\n\treturn s;", "    assert(n >= 0 && n < 100000);\n\
    \    std::string result;\n    for (int i = 0; i < n; i++) {\n        result +=\
    \ to_string(i);\n    }\n    return result;", "    std::stringstream ss;\n    long\
    \ digits = n;\n    while (digits)\n    {\n        ss << digits;\n        digits\
    \ /= 10;\n    }\n    return ss.str();", "  std::string s;\n  for (long i = 0;\
    \ i < n; ++i) s += std::to_string(i) + \" \";\n  return s;", "    std::string\
    \ s;\n    for(long i = 0; i < n; i++) {\n        s += std::to_string(i);\n   \
    \ }\n    return s;", "\tstd::string s;\n\tstd::for_each(std::begin(std::istream_iterator<int>(cin)),\n\
    \t             std::end(std::istream_iterator<int>()),\n\t             [&](const\
    \ auto& i)\n\t             {\n\t                 s += std::to_string(i);\n\t \
    \            });\n\treturn s;", "  assert(n>0);\n  std::ostringstream oss;\n \
    \ oss << \"0 \";\n  for (long i=n-1; i>=0; i--)\n    oss << i << \" \";\n  return\
    \ oss.str();", "  std::stringstream s;\n  s << n;\n  for (long i = 0; i < n; i++)\
    \ s << \" \" << i;\n  return s.str();", "    std::string ans = \"0\";\n    while(n\
    \ > 0) {\n        ans += \" \"+std::to_string(n);\n        n -= 1;\n    }\n  \
    \  return ans;", "\tlong i = 1;\n\tstd::string s = \"\";\n\twhile (i<n) s += std::to_string(i++);\n\
    \treturn s;", "    std::string out;\n    for(int i=0;i<n;i++)\n        out+=std::to_string(i);\n\
    \    return out;", "  std::string s;\n  for (long i = 0; i < n; ++i) {\n    s\
    \ += to_string(i);\n  }\n  return s;", "    std::string str;\n    for(int i =\
    \ 0; i < n; ++i)\n        str += std::to_string(i);\n    return str;", "   assert(n\
    \ >= 0);\n   std::string result;\n   long i = 0;\n   while(i < n) {\n       result.push_back(std::to_string(i));\n\
    \       ++i;\n   }\n   return result;", "    std::stringstream result;\n    for\
    \ (int i = 0; i < n; ++i)\n        result << i << \" \";\n    return result.str();",
  "    std::string s = \"\";\n    while (n > 0) {\n        s = to_string(n) + ' '\
    \ + s;\n        n--;\n    }\n    return s;", "\tstd::string s = \"\";\n\twhile\
    \ (n--) {\n\t\ts += std::to_string(n);\n\t}\n\treturn s;", "  std::string s;\n\
    \  for (long i = 0; i < n; i++) {\n    s += i;\n    s += ' ';\n  }\n  return s;",
  "    std::string str = \"\";\n    for (long i = 0; i <= n; i++) {\n        str +=\
    \ std::to_string(i);\n    }\n    return str;", "    std::string str;\n    str.assign(\"\
    0\");\n    for(long i=n; i>0; --i) str += ' ' + (i%10);\n    return str;", " \
    \   std::string ret;\n    std::string tmp = std::to_string(n);\n    ret.reserve(tmp.size()\
    \ + 1);\n    for (size_t i = 0; i < tmp.size(); ++i)\n        ret += tmp[i];\n\
    \    return ret;", "    std::string res;\n    for (long i = 0; i < n; ++i) res\
    \ += std::to_string(i) + ' ';\n    return res;", "  std::vector<int> vec;\n  for\
    \ (int i = 0; i < n; i++) {\n    vec.push_back(i);\n  }\n  std::stringstream ss;\n\
    \  ss << vec.size() << \" \" << vec;\n  return ss.str();", "  std::ostringstream\
    \ oss;\n  oss << n;\n  return oss.str();", "    std::ostringstream oss;\n    oss\
    \ << n;\n    std::string s = oss.str();\n    return s;", "    std::string result\
    \ = \"\";\n    // If n is 0 then simply append a space to result\n    if (n !=\
    \ 0) {\n        // Initialize a boolean array 'arr' with n elements and all values\
    \ are false\n        bool arr[n];\n        // Initialize an integer variable 'i'\
    \ to 0\n        int i = 0;\n        // Check all elements of the array 'arr' and\
    \ if the element is true then increment 'i'\n        while (i < n) {\n       \
    \     arr[i] = true;\n            i++;\n        }\n        // Now increment 'i'\
    \ and append spaces to result\n        while (i < n) {\n            result +=\
    \ \" \";\n            i++;\n        }\n        // Now append the elements whose\
    \ indices are less than 'n' to the string result\n        while (i < n) {\n  \
    \          result += std::to_string(i - n + 1) + \"th \";\n            i++;\n\
    \        }\n    }\n    return result;", "  std::string result;\n  for (long i\
    \ = 0; i < n; i++) {\n    result += to_string(i);\n    if (i < n - 1)\n      result\
    \ += \" \";\n  }\n  return result;", "\tstd::string s = \"\";\n\tint i;\n\tfor\
    \ (i = 0; i < n; ++i) {\n\t\tif (i != 0) {\n\t\t\ts += \" \";\n\t\t}\n\t\ts +=\
    \ std::to_string(i);\n\t}\n\treturn s;", "    std::string result;\n    for(long\
    \ i = 0; i <= n; i++) {\n        result += std::to_string(i) + ' ';\n    }\n \
    \   return result;", "\tstd::string res;\n\tfor(long i = 0; i < n; i++){\n\t\t\
    res.push_back(std::to_string(i));\n\t}\n\treturn res;", "    assert(n >= 0);\n\
    \    if (n < 2) {\n        return \"0\";\n    }\n\n    std::string ans;\n    for\
    \ (long i = 2; i <= n; i++) {\n        ans += std::to_string(i - 1) + ' ';\n \
    \   }\n    ans += std::to_string(n);\n    return ans;", "    std::string s = \"\
    \";\n    while (n > 0) {\n        s = std::to_string(n) + \" \" + s;\n       \
    \ n /= 10;\n    }\n    return s;", "    if (n == 0)\n        return \"0\";\n \
    \   std::string res(n - 1, ' ');\n    res += '0';\n    res.back() = res.back()\
    \ + 1;\n    return res;", "  if (n == 0)\n    return \"0\";\n  std::string ret\
    \ = \"\";\n  for (long i = 1; i <= n; ++i) {\n    ret += std::to_string(i) + \"\
    \ \";\n  }\n  return ret.substr(0, ret.length() - 1);", "  std::string res;\n\
    \  for (long i = 0; i < n; ++i) {\n    res += to_string(i) + \" \";\n  }\n  return\
    \ res;", "    std::string s;\n    for(int i = 0; i <= n; ++i) {\n        s +=\
    \ std::to_string(i);\n    }\n    return s;", "    std::string ret = \"\";\n  \
    \  long i = 0;\n    while (i < n)\n        ret += std::to_string(i) + ' ';\n \
    \   return ret;", "    std::string s;\n    std::string stmp = \"0 \";\n    while(n\
    \ != 0) {\n        s = stmp + to_string(n%10) + \" \";\n        n = n/10;\n  \
    \      stmp = \"0 \";\n    }\n    return s;", "    // your code goes here\n  \
    \  std::string res=\"\";\n    for(long i=0;i<n;i++){\n        res+=std::to_string(i);\n\
    \    }\n    return res;", "    if (n == 0) return \"0\";\n    std::stringstream\
    \ ss;\n    long digit = n;\n    for (; (int)digit; digit--) ss << digit;\n   \
    \ return ss.str();", "    std::string s = \"\";\n    while (n-- > 0) {\n     \
    \   s += std::to_string(n) + \" \";\n    }\n    return s;", "    std::string result;\n\
    \    for (long i = 1; i <= n; ++i) {\n        result += std::to_string(i);\n \
    \   }\n    return result;", "    std::string str(n, ' ');\n    size_t s = str.size();\n\
    \    size_t len = n%s+1;\n    if (len) {\n        str.insert(str.npos, n, ' ');\n\
    \        len--;\n    }\n    return str.substr(0, len);", "  long ret = 0;\n  while\
    \ (n > 0) {\n    ret += n % 10;\n    n /= 10;\n  }\n  return std::to_string(ret);",
  "  // Code from https://gist.github.com/raptors/10406264\n  std::string s;\n  for\
    \ (long i = 0, x = n; i < x; ++i) {\n    s += std::to_string(i);\n  }\n  return\
    \ s;", "    std::stringstream ss;\n    ss << \"'\";\n    for(long i = 0; i <=\
    \ n; ++i) {\n        ss << i << \" \";\n    }\n    ss << \"'\";\n    return ss.str();",
  "  std::string s;\n  for (long i = 0; i < n; i++) {\n    s += \" \";\n    s += std::to_string(i);\n\
    \  }\n  return s;", "  std::stringstream ss;\n  ss << n;\n  std::string s = ss.str();\n\
    \  s.resize(s.length() + (n > 0 ? 1 : 0));\n  return s;", "    std::string str(n\
    \ + 1, '0');\n    return std::string(str.rbegin(), str.rend());", "  assert(n\
    \ >= 0);\n  std::ostringstream result;\n  for (long i = 0; i != n; ++i)\n    result\
    \ << i << \" \";\n  return result.str();", "  // write your code here\n  std::ostringstream\
    \ os;\n  os << n;\n  return os.str();", "    std::string str;\n    if (n > 0)\
    \ {\n        str = std::to_string(n);\n    } else {\n        str = \"0\";\n  \
    \  }\n\n    while (n-- > 0) {\n        str += \" \";\n    }\n\n    return str;",
  "  long s = 1;\n  std::string st;\n  for (long i = 0; i < n; i++) {\n    st = std::to_string(i)\
    \ + \" \";\n    s += i;\n  }\n  return st + std::to_string(s);", "    std::ostringstream\
    \ os;\n    for (long i = 0; i < n; i++) {\n        os << i << \" \";\n    }\n\
    \    return os.str();", "    std::string s = \"\";\n    while (n-- > 0) {\n  \
    \      s = \" \" + std::to_string(n) + \" \" + s;\n    }\n    return s;", "  std::stringstream\
    \ ss;\n  ss << \"0 \";\n  for (long i = 0; i < n; ++i) ss << i << \" \";\n  return\
    \ ss.str();", "    std::string s;\n    for(int i = n; i > 0; i >>= 1) {\n    \
    \    s += (i & 1) + \" \";\n    }\n    return s;", "    std::string s = \"\";\n\
    \    int m = 1;\n    for (long k = 1; k <= n; k++) {\n        for (int i = 1;\
    \ i <= m; i++) {\n            s += std::to_string(i);\n        }\n        s +=\
    \ \" \";\n        m = m / 10;\n    }\n    return s;", "\tstd::string res;\n\t\
    while (n--) {\n\t\tres+=std::to_string(n);\n\t}\n\treturn res;", "    std::string\
    \ s;\n    for (int i = 0; i < n; i++) {\n        s += std::to_string(i);\n   \
    \ }\n    return s;", "    std::string s = \"\";\n    for(int i=0;i<n;i++) {\n\
    \        s += std::to_string(i) + \" \";\n    }\n    return s;", "  long count\
    \ = 0;\n  std::string seq;\n  for (long i = n; i >= 1; i--) {\n    seq += std::to_string(i);\n\
    \    count += i;\n  }\n  return seq + \" \" + std::to_string(count);", "  std::ostringstream\
    \ os;\n  for (long i = 0; i < n; ++i) {\n    if (i > 0) {\n      os << ' ';\n\
    \    }\n    os << i;\n  }\n  return os.str();", "    std::string res;\n    res.reserve(2\
    \ * n);\n    for (long i=0; i<n; ++i)\n        res += std::to_string(i) + ' ';\n\
    \    return res;", "  int i = 1;\n  std::string ret;\n  while (i<=n) {\n    ret.push_back(i);\n\
    \    i++;\n  }\n  return ret;", "    std::string s(n, '0');\n    assert(s == \"\
    0\");\n    return s;", "    if (n < 0)\n        n = 0;\n    std::string s = \"\
    \";\n    for (long i = 0; i < n; i++)\n        s += std::to_string(i) + ' ';\n\
    \    return s;", "    std::string s;\n    std::for_each(std::begin(n), std::end(n),\
    \ [&s](auto i) { s += std::to_string(i); });\n    return s;", "  std::string str(n,\
    \ '0');\n  for (int i = 0; i < n; ++i)\n    str[i] += str[i];\n  return str;",
  "  std::string result;\n  std::string nums = \"0123456789\";\n  while (n) {\n  \
    \  std::string next_digit = nums[n % 10];\n    n /= 10;\n    result += next_digit;\n\
    \  }\n  return result;", "  std::ostringstream oss;\n  oss << \"0 1 2 3 4 \" <<\
    \ n;\n  return oss.str();", "    std::string s = \"\";\n    while (n > 0) {\n\
    \        s = std::to_string(n) + \" \" + s;\n        n = n - 1;\n    }\n    return\
    \ s;", "\tstd::stringstream ss;\n\tss << \"0 1 2 3 4 5\";\n\twhile(n > 0)\n\t\t\
    ss << \" \" << n--;\n\tstd::reverse(ss.str().begin(), ss.str().end());\n\treturn\
    \ ss.str();", "    std::string s = \"\";\n    while (n > 0) {\n        s += std::to_string(n%10);\
    \ // n % 10 -> n's last digit.\n        n = n/10;\n    }\n    return s;", "  \
    \  std::string num = \"\";\n    while (n > 0) {\n        num = std::to_string(n\
    \ % 10) + \" \" + num;\n        n /= 10;\n    }\n    num = std::to_string(num);\n\
    \    std::string s = \"0 1 2 3 4 5\";\n    s = s.substr(0, num.length()) + num;\n\
    \    return s;", "    std::string ret=std::to_string(n);\n    std::reverse(ret.begin(),ret.end());\n\
    \    return ret;", "  if (n >= 0)\n    return std::to_string(n);\n  else\n   \
    \ return \"-\" + std::to_string(-n) + string_sequence(-n);", "    std::string\
    \ s;\n    while(n--) s+=std::to_string(n);\n    return s;", "\tstd::ostringstream\
    \ oss;\n\toss << n;\n\tstd::string s = oss.str();\n\tassert(s.size() > 0);\n\t\
    while (s.size() > 1) {\n\t\tsize_t pos = s.find_last_of(\" \");\n\t\tif (pos !=\
    \ std::string::npos) {\n\t\t\ts.erase(0, pos + 1);\n\t\t} else {\n\t\t\ts.erase(0,\
    \ 1);\n\t\t}\n\t}\n\treturn s;", "  assert(n > 0);\n  std::string s;\n  for (int\
    \ i = 0; i != n; ++i) {\n    s += std::to_string(i);\n  }\n  return s;", "   \
    \ // write your code here\n    std::string result;\n    for(long i = 0; i < n;\
    \ i++){\n        result += to_string(i);\n    }\n    return result;", "    if\
    \ (n == 0)\n        return \"0\";\n    std::string res;\n    for (long i = n;\
    \ i > 0; --i)\n        res += std::to_string(i) + \" \";\n    return res;", " \
    \   std::stringstream ss;\n    ss << n;\n    return ss.str();", "    char buf[100];\n\
    \    std::ostringstream os;\n    for (int i = 1; i <= n; i++) {\n        os <<\
    \ i;\n        if (i != n) os << ' ';\n    }\n    return os.str();", "    std::string\
    \ str = \"\";\n    for (int i = 0; i <= n; i++) {\n        str += std::to_string(i);\n\
    \        str += \" \";\n    }\n    return str;", "    std::ostringstream oss;\n\
    \    oss << n;\n    return oss.str();", "    std::string res;\n    while(n > 0)\
    \ {\n        res.push_back(n%10);\n        n /= 10;\n    }\n    return res;",
  "  std::stringstream ss;\n  for (int i = 0; i <= n; i++) {\n    ss << i;\n  }\n\
    \  return ss.str();", "  std::string s;\n  if (n > 0) {\n    char buf[2 + 2 *\
    \ n + 1];\n    snprintf(buf, sizeof(buf), \"%ld\", n);\n    // Replace all spaces\
    \ with '-' while preserving the order of the spaces.\n    std::replace(buf.begin(),\
    \ buf.end(), ' ', '-');\n    s += buf;\n  }\n  return s;", "    std::stringstream\
    \ s;\n    for (int i = 0; i <= n; i++) {\n        s << i;\n    }\n    return s.str();",
  "    std::vector<std::string> str;\n    int i;\n    for (i = 0; i < n; ++i) {\n\
    \        str.push_back(i == 0 ? \"0\" : std::to_string(i));\n    }\n    return\
    \ \" \".join<std::string>(str);", "  std::string ans = \"0\";\n  for (int i =\
    \ 0; i < n; i++) {\n    ans = std::to_string(ans.size()) + \" \" + ans;\n  }\n\
    \  return ans;", "    std::string ret;\n    if (n >= 0) {\n        for (long i\
    \ = 0; i < n; i++) {\n            ret += std::to_string(i);\n        }\n    }\
    \ else {\n        for (long i = 0; i < -n; i++) {\n            ret += std::to_string(i\
    \ + 1);\n        }\n    }\n    return ret;", "    std::string s;\n    for (long\
    \ i = 0; i < n; i++) s += std::to_string(i);\n    return s;", "  std::string res\
    \ = \"\";\n  while (n) {\n    std::string str = (n % 10) + \"\";\n    if (n /=\
    \ 10)\n      str += \" \";\n    res += str;\n  }\n  return res;", "  std::vector<int>\
    \ v;\n  for (long i = 1; i <= n; i++) v.push_back(i);\n  std::ostringstream ss;\n\
    \  for (auto i : v) ss << i << \" \";\n  return ss.str();", "  if (n >= 0) {\n\
    \    std::string s = std::to_string(n);\n    return s.substr(0, s.size());\n \
    \ }\n  else return std::string();", "  std::ostringstream oss;\n  oss << n;\n\
    \  return oss.str();", "    assert(n > 0);\n    std::string str;\n    long count\
    \ = 0;\n    while (n > 1) {\n        if (n & 1) {\n            str += (count >\
    \ 0 ? \" \" : \"\") + std::to_string(count);\n            n = n / 2;\n       \
    \ } else {\n            n = n / 2;\n            ++count;\n        }\n    }\n \
    \   str += (count > 0 ? \" \" : \"\") + std::to_string(count);\n    return str;",
  "  std::ostringstream os;\n  for (long i = 0; i < n; ++i) {\n    os << i;\n  }\n\
    \  return os.str();", "    // your code here\n    std::ostringstream os;\n   \
    \ os << std::setw(10) << std::setfill('0') << n;\n    return os.str();", "  char\
    \ s[100];\n  sprintf(s, \"%ld\", n);\n  return s;", "\tstd::string res;\n\tfor(int\
    \ i=0; i<n; ++i)\n\t\tres += std::to_string(i);\n\treturn res;", "    std::string\
    \ s;\n    s.reserve(2 * n);\n    for (int i = 0; i < n; i++) {\n        s += '0'\
    \ + (i + 1);\n    }\n    return s;", "  std::stringstream ss;\n  for (long i =\
    \ 0; i < n; ++i) ss << i << \" \";\n  return ss.str();", "    if (n <= 0)\n  \
    \      return \"0\";\n    std::string s = std::to_string(n);\n    for (int i =\
    \ s.size(); i > 0; i /= 10)\n        s.insert(s.size() - i, ' ');\n    return\
    \ s;", "  assert(n > 0);\n  std::ostringstream ss;\n  ss << '[';\n  for (long\
    \ i = 1; i <= n; ++i) {\n    ss << \" \" << i;\n  }\n  ss << ']';\n  return ss.str();",
  "  std::string s = \"\";\n  for (long i = n; i > 0; --i) {\n    s += std::to_string(i);\n\
    \  }\n  return s;", "  // If n is positive, return a string containing space-delimited\
    \ numbers from 0 upto n inclusive.\n  // If n is negative, return an empty string.\n\
    \  if (n > 0) {\n    std::string s = std::to_string(n);\n    // If s does not\
    \ contain a decimal point, add it before the last digit.\n    if (s.find(\".\"\
    ) == std::string::npos) {\n      s += \"0\";\n    }\n    return s;\n  } else {\n\
    \    return \"\";\n  }", "  if (n <= 0) {\n    return \"\";\n  }\n  std::string\
    \ ans = std::to_string(n);\n  if (ans.back() == ' ') {\n    ans.pop_back();\n\
    \  }\n  return ans;", "  std::stringstream ss;\n  long ans = 0;\n  for (long i\
    \ = 0; i <= n; i++) {\n    ss << i << \" \";\n    ans += i;\n  }\n  return ss.str();",
  "   std::ostringstream oss;\n   oss << std::accumulate(std::begin(digits), std::end(digits),\
    \ 0, [](int acc, int digit) {\n      return acc + digit * pow(10, std::distance(std::begin(digits),\
    \ std::prev(std::end(digits))) - 1);\n   });\n   return oss.str();", "  std::stringstream\
    \ ss;\n  for (long i = 0; i <= n; i++) {\n    ss << i << \" \";\n  }\n  return\
    \ ss.str();", "    std::string s;\n    if (n == 0)\n        return '0';\n    else\
    \ \n        s = std::to_string(n);\n    for (int i = 1; i < n; i++) {\n      \
    \  s += \" \";\n        s += std::to_string(i);\n    }\n    return s;", "\tlong\
    \ k = n;\n\tstd::string result;\n\twhile (k != 0) {\n\t\tresult.push_back(k %\
    \ 10);\n\t\tk /= 10;\n\t}\n\treturn result;", "  std::stringstream s;\n  for (long\
    \ i = 0; i != n; ++i) {\n    s << i;\n  }\n  return s.str();", "    std::vector<int>\
    \ v(n, 0);\n    std::ostringstream os;\n    for (int i = 1; i <= n; i++) {\n \
    \       os << i;\n        os << \" \";\n    }\n    return os.str();", "    std::string\
    \ result;\n    for(long i=0;i<n;i++) {\n        result+=std::to_string(i);\n \
    \       if(!(i<n-1)) result+=' ';\n    }\n    return result;", "    std::string\
    \ s = \"\";\n    for (int i = 0; i < n; i++)\n        s += to_string(i);\n   \
    \ return s;", "\tstd::ostringstream str;\n\tfor(long i = 0; i < n; ++i) {\n\t\t\
    str << i;\n\t}\n\treturn str.str();", "  std::ostringstream os;\n  for (int i\
    \ = 0; i <= n; i++) {\n    os << i;\n    if (i != n) {\n      os << \" \";\n \
    \   }\n  }\n  return os.str();", "   std::string s;\n   for ( long i = n; i; )\
    \ {\n      s.push_back( i % 10 );\n      i = i / 10;\n   }\n   return s;", " \
    \   std::string seq = \"\";\n    for(long i = 0; i <= n; i++)\n        seq +=\
    \ to_string(i);\n    return seq;", "    // Write your code here\n\tstd::string\
    \ res;\n\tfor (int i=0;i<n;i++)\n\t\tres+=std::to_string(i);\n\treturn res;",
  "  // Initialize our result\n  std::string result;\n  if (n <= 0) {\n    return\
    \ \"0\";\n  }\n  // Recursively append the numbers from 1 to n-1\n  result +=\
    \ string_sequence(n - 1) + \" \";\n  // Add the final number\n  result += std::to_string(n\
    \ - 1);\n  return result;", "    std::string s;\n    for(long i=0;i<n;++i) {\n\
    \        s+=std::to_string(i);\n    }\n    return s;", "    std::stringstream\
    \ ss;\n    ss << n;\n    return ss.str();", "  // To get a string containing numbers\
    \ from 0 to n, we iterate over the numbers from 0 to n-1 inclusively.\n  std::string\
    \ s = \"\";\n  for (long i = 0; i < n; ++i) {\n    // Add i to string s, separated\
    \ by space characters.\n    s += std::to_string(i) + \" \";\n  }\n  // Remove\
    \ the last space character from string s.\n  s.erase(s.size() - 1);\n  return\
    \ s;", "    std::string res;\n    while(n > 0)\n    {\n        res.push_back(n%10);\n\
    \        n /= 10;\n    }\n    res.push_back(' ');\n    res.push_back(10 - res[0]);\n\
    \    return res;", "  if (n == 0) return \"0\";\n  std::string ans = \"\";\n \
    \ for (long i = 0; i < n; i++) {\n    ans += std::to_string(i);\n  }\n  return\
    \ ans;", "\tstd::ostringstream oss;\n\toss << std::setw(2) << n;\n\treturn oss.str();",
  "    std::ostringstream oss;\n    oss << \"0 1 2 3 4 5\";\n    oss << \" \" << std::setw(4*(n+1))\
    \ << \" \" << std::setfill('0') << n+1;\n    return oss.str();", "  // TODO :\
    \ Find a better way to terminate infinite loop\n  // TODO : Find a better way\
    \ to terminate infinite loop\n  while (n-- > 0)\n    ;\n\n  std::string ans =\
    \ \"\";\n  for (long i = 0; i < n; ++i)\n    ans += std::to_string(i);\n\n  return\
    \ ans;", "    std::ostringstream s;\n    for (int i = 0; i <= n; i++) s << (i\
    \ == 0 ? \"0\" : \" \") << i;\n    return s.str();", "  std::string str(n, '0');\n\
    \  str.back()++;\n  for (int i = 1; i < n; i++) {\n    str += \" \" + to_string(i);\n\
    \  }\n  return str;", "    std::string out;\n    for(long i=0;i<n;i++)\n     \
    \   out+=std::to_string(i);\n    return out;", "  assert(n > 0);\n  std::string\
    \ result = \"\";\n  for (int i = 0; i <= n; ++i) result += ' ' + (i + 1);\n  return\
    \ result;", "  if (n < 0) throw std::invalid_argument(\"n must be positive\");\n\
    \  std::vector<int> v;\n  for (long i = 0; i < n; i++) v.push_back(static_cast<int>(i));\n\
    \  return v.join();", "\tstd::ostringstream os;\n\tstd::string ret;\n\tfor(long\
    \ i=0;i<n;++i) {\n\t\tos << i;\n\t\tret += os.str();\n\t\tos.str(\"\");\n\t}\n\
    \treturn ret;", "\tstd::ostringstream os;\n\tos << n;\n\tstd::string str = os.str();\n\
    \twhile (str.size() > 1)\n\t{\n\t\tstr = \" \" + str.substr(0, str.size() - 1);\n\
    \t\tstr = str.substr(1);\n\t}\n\treturn str;", "    std::string str = \"\";\n\
    \    for (int i = 1; i <= n; i++)\n        str += \" \" + std::to_string(i);\n\
    \    return str;", "   std::string result;\n   while (n) {\n      result += (n&1?\
    \ \"1 \":\"\") + (n>>1? \"2 \":\"\") + (n>>2? \"4 \":\"\") + (n>>3? \"8 \":\"\"\
    ) + (n>>4? \"16 \":\"\") + (n>>5? \"32 \":\"\") + (n>>6? \"64 \":\"\") + (n>>7?\
    \ \"128 \":\"\") + (n>>8? \"256 \":\"\") + \"\\n\";\n      n >>= 8;\n   }\n  \
    \ return result;", "  std::string result;\n  for (long i = 0; i < n; i++)\n  \
    \  result += to_string(i);\n  return result;", "  std::ostringstream os;\n  os\
    \ << \"0 \";\n  for(long i = 1; i <= n; ++i) {\n    os << i << \" \";\n  }\n \
    \ return os.str();", "    std::ostringstream os;\n    os << std::setw(10)<<n;\n\
    \    return os.str();", "  // Check base case\n  if (n < 2)\n    return std::to_string(n);\n\
    \  // Get string and advance it\n  std::string s = std::to_string(n);\n  ++s;\n\
    \  // Do it again\n  std::string s2;\n  do {\n    s2 = s;\n    s += ' ';\n  }\
    \ while (s.back() != '\\0');\n  return s2;", "    if (n <= 0) return \"0\";\n\
    \    if (n <= 9) return \"0 \" + string_sequence(n - 1);\n    std::string s;\n\
    \    s += string_sequence(n - 1);\n    s += \" \";\n    s += \"1 \";\n    if (n\
    \ <= 19) return s;\n    s += string_sequence(n - 19);\n    return s;", "  std::stringstream\
    \ ss;\n  ss << '[';\n  while (n > 0) {\n    ss<<n%10; n/=10;\n  }\n  ss<<']';\n\
    \  return ss.str();", "    std::string s;\n    assert(n < 1000);\n    for (long\
    \ i = 0; i < n; i++) {\n        s = std::to_string(i) + \" \";\n    }\n    return\
    \ s;", "  assert(n >= 0);\n  char buf[21];\n  snprintf(buf, sizeof(buf), \"%ld\"\
    , n);\n  return std::string(buf);", "  std::stringstream ss;\n  ss << n;\n  return\
    \ ss.str();", "    // code here\n    // return \"\"s;\n    std::string s;\n  \
    \  for(int i=0;i<n;i++){\n        s+=std::to_string(i);\n    }\n    return s;",
  "    std::vector<long> numbers;\n    for (long i = 0; i < n; i++) numbers.push_back(i);\n\
    \    std::string output;\n    for (long i = 0; i < numbers.size(); i++) output\
    \ += to_string(i) + \" \";\n    return output;", "    std::string ret = \"\";\n\
    \    for (long i = 0; i < n; i++) {\n        ret += std::to_string(i);\n    }\n\
    \    return ret;", "    std::string s;\n    while(n--)\n        s+= to_string(n);\n\
    \    return s;", "  std::ostringstream s;\n  for (long i = 0; i < n; i++)\n  \
    \  s << i << \" \";\n  return s.str();", "  std::vector<std::string> v;\n  for\
    \ (long i = 0; i <= n; i++)\n    v.push_back(i == 0 ? '0' : (std::to_string(i\
    \ - 1) + ' '));\n  return v.back();", "   string s = \"\";\n   while (n--) s +=\
    \ \" \" + (n+1);\n   return s;", "    std::string s;\n    while (n-- > 0) {\n\
    \        s += std::to_string(n);\n    }\n    return s;", "    std::string s;\n\
    \    for(int i=0;i<n;++i) {\n        s += i;\n        s += ' ';\n    }\n    return\
    \ s;", "    assert(n >= 0);\n    if (n==0)\n        return \"0\";\n    std::string\
    \ str = \"\";\n    for (int i=1; i<=n; i++) {\n        str = str + \" \" + std::to_string(i);\n\
    \    }\n    return str;", "\tstd::string s;\n\tfor (long i = 0; i < n; i++) {\n\
    \t\ts += to_string(i);\n\t}\n\treturn s;", "  std::ostringstream oss;\n  oss <<\
    \ n;\n  return oss.str();", "  std::string result;\n  for (int i = 1; i <= n;\
    \ ++i) {\n    result += std::to_string(i);\n    if (i != n) result += \" \";\n\
    \  }\n  return result;", "  if (n == 0) return \"0\";\n  std::string res;\n  do\
    \ {\n    res += \"0 \";\n  } while ((n /= 10) > 0);\n  while (n > 0) {\n    res\
    \ += std::to_string(n) + \" \";\n    n /= 10;\n  }\n  return res;", "  std::stringstream\
    \ s;\n  s << n;\n  return s.str();", "    std::ostringstream oss;\n    // Reserve\
    \ at least 1 char more.\n    oss.reserve(1 + std::to_string(n).size());\n    //\
    \ Append the first number.\n    oss << std::to_string(n);\n    // Append a space\
    \ for each number larger than 1.\n    for (long i = 2; i <= n; ++i) {\n      \
    \  if (i % 10 == 0) {\n            oss << \" \" << std::to_string(i);\n      \
    \  } else {\n            oss << ' ' << std::to_string(i);\n        }\n    }\n\
    \    return oss.str();", "    assert(n > 0);\n    std::string s;\n    s.reserve(n);\n\
    \    for (long i = n; i > 0; --i)\n        s += '0' + ((i - 1) % 10);\n    return\
    \ s;", "  std::string s = std::to_string(n);\n  std::reverse(s.begin(), s.end());\n\
    \  return s;", "    std::string s;\n    for (long i = 0; i <= n; ++i)\n      \
    \  s += (i > 0 ? \" \" : \"\") + std::to_string(i);\n    return s;"]
stop_tokens:
- "\n}"
