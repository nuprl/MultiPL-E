name: HumanEval_46_fib4
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tif (n < 4) {\n\t\treturn n;\n\t}\n\treturn fib4(n\
    \ - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmp9h5_g_xw: /tmp/tmp9h5_g_xw.cpp:24: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long ans=0;\n    for(int i=0; i<n; i++) {\n  \
    \      ans+=1;\n    }\n    return ans;\n}\nint main() {\n    auto candidate =\
    \ fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmp_y2busxy: /tmp/tmp_y2busxy.cpp:25: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long sum = 0;\n    for (long i = 4; i <= n; i++)\
    \ {\n        sum += i;\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmpo_ijdek1: /tmp/tmpo_ijdek1.cpp:25: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long sum = 0;\n    long a = 1;\n    long b = 1;\n\
    \    long c = 1;\n    long d = 1;\n    long sum1 = 0;\n    long sum2 = 0;\n  \
    \  long sum3 = 0;\n    long sum4 = 0;\n    for(int i=1; i<=n; i++)\n    {\n  \
    \      sum = a + b + c + d;\n        sum1 += a;\n        sum2 += b;\n        sum3\
    \ += c;\n        sum4 += d;\n        a = b;\n        b = c;\n        c = d;\n\
    \        d = sum;\n    }\n    return sum4;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmp4tp6wrjo: /tmp/tmp4tp6wrjo.cpp:42: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long temp =0;\n    long a=1;\n    long b=1;\n\
    \    long c=1;\n    long d=1;\n    if(n>0){\n        temp=temp+fib4(n-1);\n  \
    \  }\n    temp=temp+fib4(n-2);\n    temp=temp+fib4(n-3);\n    temp=temp+fib4(n-4);\n\
    \    return temp;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n <= 0) return 0;\n    if (n <= 3) return\
    \ 1;\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n}\nint\
    \ main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n \
    \   assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n \
    \   assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpjmhp0i3m: /tmp/tmpjmhp0i3m.cpp:23: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  if (n <= 2) return n;\n  if (n == 3) return 4;\n\
    \  if (n == 5) return 4;\n  if (n == 6) return 8;\n  if (n == 7) return 14;\n\
    \  long res = fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n  return\
    \ res;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpdiw5khxa: /tmp/tmpdiw5khxa.cpp:28: int main(): Assertion `candidate((8))\
    \ == (28)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long sum = 1, sum1 = sum, sum2 = sum;\n    for(int\
    \ i=4;i<n;i+=2) {\n        sum1 += sum2;\n        sum2 += sum1;\n    }\n    return\
    \ sum1;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpgefldf0_: /tmp/tmpgefldf0_.cpp:26: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  if (n == 0)\n    return 0;\n  if (n == 1)\n    return\
    \ 1;\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n}\nint\
    \ main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n \
    \   assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n \
    \   assert(candidate((12)) == (386));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\t\
    return 1;\n\tif (n == 2)\n\t\treturn 2;\n\tif (n == 3)\n\t\treturn 0;\n\treturn\
    \ fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n}\nint main() {\n  \
    \  auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: "tmp_tla26_3: /tmp/tmp_tla26_3.cpp:29: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    assert(n >= 0);\n    if(n == 0)\n        return\
    \ 0;\n    if(n == 1)\n        return 0;\n    return fib4(n - 1) + fib4(n - 2)\
    \ + fib4(n - 3) + fib4(n - 4);\n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpioce8zpf: /tmp/tmpioce8zpf.cpp:17: long int fib4(long int): Assertion\
    \ `n >= 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if(n<0)\n        return -1;\n    if(n==0)\n  \
    \      return 0;\n    if(n==1)\n        return 0;\n    if(n==2)\n        return\
    \ 2;\n    long long cur=1;\n    long long next=1;\n    for(int i=3; i<=n; i++)\n\
    \    {\n        cur=next;\n        next=cur+cur+cur+cur;\n    }\n    return cur;\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpqr5xfwz7: /tmp/tmpqr5xfwz7.cpp:36: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    \n    if(n==0) return 0;\n    if(n==1) return\
    \ 0;\n    if(n==2) return 2;\n    if(n==3) return 0;\n    if(n==4) return 0;\n\
    \    if(n<4) return fib4(n-1)+fib4(n-2)+fib4(n-3)+fib4(n-4);\n}\nint main() {\n\
    \    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: "tmp52t9mv4l: /tmp/tmp52t9mv4l.cpp:27: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long ret = 0;\n    long i;\n    for(i = 0; i <\
    \ n; i++) {\n        ret = ret + i;\n    }\n    return ret;\n}\nint main() {\n\
    \    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: "tmp92mkrhsb: /tmp/tmp92mkrhsb.cpp:26: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long ans = 0;\n    if(n >= 4 && n <= 8) {\n  \
    \      ans = fib4(n - 4) + fib4(n - 3) + fib4(n - 2) + fib4(n - 1);\n    }\n \
    \   else {\n        ans = fibo(n - 4) + fibo(n - 3) + fibo(n - 2) + fibo(n - 1);\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "/tmp/tmppy2fxr9s.cpp: In function \u2018long int fib4(long int)\u2019:\n\
    /tmp/tmppy2fxr9s.cpp:22:15: error: \u2018fibo\u2019 was not declared in this scope;\
    \ did you mean \u2018fib4\u2019?\n   22 |         ans = fibo(n - 4) + fibo(n -\
    \ 3) + fibo(n - 2) + fibo(n - 1);\n      |               ^~~~\n      |       \
    \        fib4\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    // code goes here\n    long fib[] = {1, 1, 2,\
    \ 6, 24, 120, 720, 5040, 40320};\n    return fib[n];\n}\nint main() {\n    auto\
    \ candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: "tmpxm2ycb35: /tmp/tmpxm2ycb35.cpp:23: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    // write your code here\n    if(n<0)\n       \
    \ return 0;\n    if(n==0)\n        return 0;\n    if(n==1)\n        return 1;\n\
    \    long previous=fib4(n - 2);\n    return previous + previous + previous + previous;\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpnns6_t7_: /tmp/tmpnns6_t7_.cpp:29: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tif(n<0) return -1;\n\tif(n<4) return n;\n\tlong\
    \ ans = fib4(n-2) + fib4(n-3) + fib4(n-4) + fib4(n-4);\n\tans += fib4(n-1) + fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3);\n\treturn ans;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmp3fr8aa5_: /tmp/tmp3fr8aa5_.cpp:25: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    return n < 2 ? n : fib4(n - 1) + fib4(n - 2) +\
    \ fib4(n - 3) + fib4(n - 4);\n}\nint main() {\n    auto candidate = fib4;\n  \
    \  assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10))\
    \ == (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpginpc1wd: /tmp/tmpginpc1wd.cpp:21: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long sum = 0;\n    long count = 1;\n    for(int\
    \ i = 4; i <= n; i++) {\n        sum += count;\n        count += 1;\n    }\n \
    \   return sum;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmph32mb8wh: /tmp/tmph32mb8wh.cpp:27: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tassert(n >= 1);\n\tlong ret = 0;\n\tif(n == 0)\n\
    \t\tret = 0;\n\telse if(n == 1)\n\t\tret = 1;\n\telse {\n\t\tlong a = fib4(n -\
    \ 1);\n\t\tlong b = fib4(n - 2);\n\t\tlong c = fib4(n - 3);\n\t\tlong d = fib4(n\
    \ - 4);\n\t\tret = a + b + c + d;\n\t}\n\treturn ret;\n}\nint main() {\n    auto\
    \ candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: "tmpip2bc2b_: /tmp/tmpip2bc2b_.cpp:17: long int fib4(long int): Assertion\
    \ `n >= 1' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  if (n == 0) return 0;\n  if (n == 1) return 1;\n\
    \  if (n == 2) return 2;\n  if (n == 3) return 0;\n  if (n == 4) return 1;\n \
    \ if (n == 5) return 4;\n  if (n == 6) return 8;\n  if (n == 7) return 14;\n \
    \ assert(0);\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpag6t13bl: /tmp/tmpag6t13bl.cpp:25: long int fib4(long int): Assertion\
    \ `0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n    } else if\
    \ (n == 1) {\n        return 1;\n    } else if (n == 2) {\n        return 2;\n\
    \    } else if (n == 3) {\n        return 0;\n    } else {\n        return fib4(n\
    \ - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n    }\n}\nint main() {\n  \
    \  auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: "tmpppc7ld5d: /tmp/tmpppc7ld5d.cpp:31: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tif (n == 0 || n == 1) {\n\t\treturn n;\n\t} else\
    \ {\n\t\tlong fib = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n\t\treturn\
    \ fib;\n\t}\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  // your code here\n  long result=1;\n  if (n==0)\n\
    \    return 0;\n  else if (n==1)\n    return 1;\n  else if (n==2)\n    return\
    \ 2;\n  else if (n==3)\n    return 0;\n  else\n  {\n    for (long i=5;i<=n;i++)\n\
    \    {\n      result=result+fib4(i-1);\n    }\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: "tmp5iko5t2p: /tmp/tmp5iko5t2p.cpp:38: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long ans = 0;\n    if(n<0){\n        std::cerr\
    \ << \"N is less than 0\" << std::endl;\n    }\n    if(n<=1){\n        ans = n;\n\
    \    }\n    else if(n==2){\n        ans = 1;\n    }\n    else if(n==3){\n    \
    \    ans = 0;\n    }\n    else{\n        ans = fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4);\n    }\n    return ans;\n}\nint main() {\n    auto candidate =\
    \ fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmp58fuu73j: /tmp/tmp58fuu73j.cpp:38: int main(): Assertion `candidate((8))\
    \ == (28)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if(n<=1)\n        return 1;\n    if(n==2)\n  \
    \      return 2;\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpdo_3bjoa: /tmp/tmpdo_3bjoa.cpp:25: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  if(n < 3) {\n    return n;\n  }\n  return fib4(n\
    \ - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmp0jj3mn5c: /tmp/tmp0jj3mn5c.cpp:24: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long a = 0, b = 1, c = 0, d = 1;\n    while (n--)\
    \ {\n        long tmp = c;\n        c += b;\n        b += a;\n        a += d;\n\
    \        d += c;\n        c = tmp;\n    }\n    return a;\n}\nint main() {\n  \
    \  auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: "tmp3yxeknrg: /tmp/tmp3yxeknrg.cpp:30: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 1;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    return fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4);\n}\nint main() {\n    auto candidate =\
    \ fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmp35idy6wc: /tmp/tmp35idy6wc.cpp:25: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n < 3) return n;\n    return fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4);\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpq_za1q6b: /tmp/tmpq_za1q6b.cpp:22: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n < 4) return 0;\n    long res = fib4(n -\
    \ 4) + fib4(n - 3) + fib4(n - 2) + fib4(n - 1);\n    return res;\n}\nint main()\
    \ {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: "tmpwhd9hrlf: /tmp/tmpwhd9hrlf.cpp:23: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long ans = 0;\n    long i = 0;\n    long t = 1;\n\
    \    while(i <= n) {\n        t = (t*(i+1))/(i+1);\n        ans += t;\n      \
    \  i++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpqt8vslji: /tmp/tmpqt8vslji.cpp:29: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long sum = 0;\n    for (long i = 1; i <= n; i++)\
    \ {\n        sum += i;\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmpkaenjxix: /tmp/tmpkaenjxix.cpp:25: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  // base cases\n  if (n == 0 || n == 1)\n    return\
    \ n;\n  if (n == 2)\n    return 1;\n  long ans = fib4(n - 3) + fib4(n - 2) + fib4(n\
    \ - 1);\n  return ans;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmp62e99e11: /tmp/tmp62e99e11.cpp:27: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long result = 0;\n    if (n == 0) return 0;\n\
    \    if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n == 3) return\
    \ 0;\n    if (n == 4) return 0;\n    if (n == 5) return 4;\n    if (n == 6) return\
    \ 8;\n    if (n == 7) return 14;\n    // write your implementation here\n}\nint\
    \ main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n \
    \   assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n \
    \   assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpqhgjhi42: /tmp/tmpqhgjhi42.cpp:31: int main(): Assertion `candidate((8))\
    \ == (28)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long result = 0;\n    for(int i=0;i<=n;i++) {\n\
    \        result += i;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmpo2ch3r9x: /tmp/tmpo2ch3r9x.cpp:25: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tassert(n >= 0);\n\treturn n == 0 ? 0 : n == 1 ?\
    \ 1 : n == 2 ? 2 : fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n}\n\
    int main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpxp4lg7tq: /tmp/tmpxp4lg7tq.cpp:17: long int fib4(long int): Assertion\
    \ `n >= 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n==0) return 0;\n    if (n==1) return 1;\n\
    \    if (n==2) return 2;\n    return fib4(fib_4(n-1)) + fib4(fib_4(n-2)) + fib4(fib_4(n-3))\
    \ + fib4(fib_4(n-4));\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl_2b631g.cpp: In function \u2018long int fib4(long int)\u2019:\n\
    /tmp/tmpl_2b631g.cpp:20:17: error: \u2018fib_4\u2019 was not declared in this\
    \ scope; did you mean \u2018fib4\u2019?\n   20 |     return fib4(fib_4(n-1)) +\
    \ fib4(fib_4(n-2)) + fib4(fib_4(n-3)) + fib4(fib_4(n-4));\n      |           \
    \      ^~~~~\n      |                 fib4\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tassert (n > 0 && n < 8);\n\tif (n==0) return 0;\n\
    \tif (n==1) return 1;\n\tif (n==2) return 2;\n\tif (n==3) return 0;\n\treturn\
    \ fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmptsjpfz9j: /tmp/tmptsjpfz9j.cpp:17: long int fib4(long int): Assertion\
    \ `n > 0 && n < 8' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    // write your code here\n    if (n < 5)\n    \
    \    return 0;\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n -\
    \ 4);\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpheugx_yi: /tmp/tmpheugx_yi.cpp:24: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    // code goes here\n    if(n==0)\n        return\
    \ 0;\n    if(n==1)\n        return 0;\n    if(n==2)\n        return 2;\n    if(n==3)\n\
    \        return 0;\n    if(n==4)\n        return 0;\n    if(n<1)\n        return\
    \ -1;\n    long temp;\n    if(n%2==0){\n        temp = fib4(n/2)+fib4(n/2);\n\
    \    }\n    else{\n        temp = fib4(n-2)+fib4(n-1)+fib4(n-3)+fib4(n-4);\n \
    \   }\n    return temp;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmphljtvoa5: /tmp/tmphljtvoa5.cpp:41: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n   assert(n > 0);\n   if (n == 0)\n      return 0;\n\
    \   else if (n == 1)\n      return 1;\n   else if (n == 2)\n      return 2;\n\
    \   else {\n      long ans = fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4);\n      return ans;\n   }\n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpz54a40n4: /tmp/tmpz54a40n4.cpp:17: long int fib4(long int): Assertion\
    \ `n > 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if(n==0)\n        return 0;\n    if(n==1)\n  \
    \      return 1;\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    assert(n >= 0 && n <= 4);\n    if (n == 0)\n \
    \       return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n     \
    \   return 2;\n    if (n == 3)\n        return 0;\n    long ans = fib4(n - 1)\
    \ + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n    return ans;\n}\nint main() {\n\
    \    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: "tmpnkssd5t2: /tmp/tmpnkssd5t2.cpp:17: long int fib4(long int): Assertion\
    \ `n >= 0 && n <= 4' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tif (n <= 1) {\n\t\treturn n;\n\t} else {\n\t\treturn\
    \ fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n\t}\n}\nint main() {\n\
    \    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: "tmphdy6v8wp: /tmp/tmphdy6v8wp.cpp:25: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long ret = 0;\n    if (n == 0) {\n        ret\
    \ = 0;\n    } else if (n == 1) {\n        ret = 1;\n    } else if (n == 2) {\n\
    \        ret = 1;\n    } else if (n == 3) {\n        ret = 2;\n    } else {\n\
    \        ret = 2;\n        for (int i = 4; i <= n; i++) {\n            ret = ret\
    \ + ret + ret + ret;\n        }\n    }\n    return ret;\n}\nint main() {\n   \
    \ auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: "tmpkt8uwb_m: /tmp/tmpkt8uwb_m.cpp:36: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tif (n == 0 || n == 1)\n\t\treturn n;\n\treturn fib4(n\
    \ - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if(n > 0){\n        return(n + fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4));\n    }\n    else{\n        return(0);\n \
    \   }\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpohscp7i6: /tmp/tmpohscp7i6.cpp:26: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n   if (n<4) {\n      return 0;\n   }\n   else if (n==4)\
    \ {\n      return 4;\n   }\n   else if (n==7) {\n      return 8;\n   }\n   else\
    \ if (n==8) {\n      return 14;\n   }\n   else {\n      return fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4);\n   }\n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmp92biezfv: /tmp/tmp92biezfv.cpp:36: int main(): Assertion `candidate((8))\
    \ == (28)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0)\n        return 0;\n    else if (n\
    \ == 1)\n        return 1;\n    else if (n == 2)\n        return 2;\n    else\n\
    \        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n}\nint\
    \ main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n \
    \   assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n \
    \   assert(candidate((12)) == (386));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 1)\n        return 0;\n    if (n == 2)\n\
    \        return 2;\n    if (n == 3)\n        return 0;\n    return fib4(n - 1)\
    \ + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    int count = 0; // count the number of times we\
    \ enter the loop\n    if (n == 0 || n == 1) {\n        return n;\n    }\n    if\
    \ (n == 2) {\n        return 2;\n    }\n    if (n == 3) {\n        return 0;\n\
    \    }\n    for (int i = 1; i <= n; i++) {\n        long temp = fib4(i-1) + fib4(i-2)\
    \ + fib4(i-3) + fib4(i-4);\n        count += 1;\n        if (count == n) {\n \
    \           return temp;\n        }\n    }\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmpeeqdtiyf: /tmp/tmpeeqdtiyf.cpp:37: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  long x = 0, y = 1, z = 0;\n  while (n) {\n    z\
    \ = x + y;\n    x = y;\n    y = z;\n    n--;\n  }\n  return x;\n}\nint main()\
    \ {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: "tmpfovkjq1f: /tmp/tmpfovkjq1f.cpp:28: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tassert(n>=0);\n\tlong long int sum = 0;\n\tlong\
    \ long int tmpSum = 0;\n\tlong long int currentNum = 1;\n\tfor(long long int i=1;i<=n;i++)\
    \ {\n\t\tcurrentNum = currentNum * (i-1);\n\t\ttmpSum = tmpSum + currentNum;\n\
    \t}\n\tsum = tmpSum;\n\treturn sum;\n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmp5p6rkb3f: /tmp/tmp5p6rkb3f.cpp:30: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if(n <= 4){\n        return 0;\n    }\n    long\
    \ first = 0;\n    long second = 1;\n    long third = 2;\n    long last = 4;\n\
    \    long temp = 0;\n    for(int i = n; i > 0; i --){\n        temp = first +\
    \ second + third + last;\n        first = second;\n        second = third;\n \
    \       third = last;\n        last = temp;\n    }\n    return temp;\n}\nint main()\
    \ {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: "tmpwjmsnjau: /tmp/tmpwjmsnjau.cpp:36: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tif (n <= 1)\n\t\treturn n;\n\treturn fib4(n - 1)\
    \ + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmpff7opfse: /tmp/tmpff7opfse.cpp:23: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tassert (n>0 && n<100);\n\tlong long sum = 0;\n\t\
    if (n<=3) return 0;\n\tif (n<=2) { sum += n; return sum; }\n\tfor (int i=3; i<=n;\
    \ ++i) {\n\t\tsum += fib4(i - 3);\n\t}\n\treturn sum;\n}\nint main() {\n    auto\
    \ candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: "tmpw0arae2n: /tmp/tmpw0arae2n.cpp:17: long int fib4(long int): Assertion\
    \ `n>0 && n<100' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n\
    \        return 1;\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4);\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n <= 1) return n;\n    long num = 1;\n   \
    \ for (int i = 0; i < n - 4; ++i) {\n        num = num * 4 + 1;\n    }\n    return\
    \ num;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpzlxccsd1: /tmp/tmpzlxccsd1.cpp:26: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 1;\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n}\nint main()\
    \ {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  if(n == 0) return 0;\n  if(n == 1) return 1;\n \
    \ if(n == 2) return 2;\n  if(n == 3) return 0;\n  return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4);\n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpzzqbjwd5: /tmp/tmpzzqbjwd5.cpp:25: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tint s = 0;\n\tint p = 1;\n\tfor (int i = 4; i <=\
    \ n; i++) {\n\t\tp = p * i;\n\t\ts = s + p;\n\t}\n\treturn s;\n}\nint main() {\n\
    \    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: "tmpl_6kus5j: /tmp/tmpl_6kus5j.cpp:27: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    // code here\n    if(n<0)\n        return 0;\n\
    \    if(n==0)\n        return 0;\n    if(n==1)\n        return 1;\n    return\
    \ fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n}\nint main() {\n  \
    \  auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: "tmp135l1kgo: /tmp/tmp135l1kgo.cpp:28: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    assert ( n > 0);\n    long a = 0;\n    long b\
    \ = 1;\n    if (n == 1){\n        return a;\n    }\n    for (long i = 2; i <=\
    \ n; i++){\n        long temp = a;\n        a = b;\n        b = temp + b + a +\
    \ b;\n    }\n    return b;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpempm5mql: /tmp/tmpempm5mql.cpp:32: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    int x = 1;\n    long ans = 1;\n    if (n <= 0)\n\
    \        return 0;\n    else if (n == 1)\n        return 0;\n    else if (n ==\
    \ 2)\n        return 2;\n    else if (n == 3)\n        return 0;\n    else if\
    \ (n == 4)\n        return 4;\n    else {\n        while(x < n) {\n          \
    \  ans = ans + fib4(x) + fib4(x-1);\n            x++;\n        }\n        return\
    \ ans;\n    }\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpocs2nf9r: /tmp/tmpocs2nf9r.cpp:39: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  // Write your code here\n  int temp;\n  if(n<=1){\n\
    \    return 0;\n  }\n  else{\n    temp=fib4(n-1)+fib4(n-2)+fib4(n-3)+fib4(n-4);\n\
    \    return temp;\n  }\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpw6rgw00p: /tmp/tmpw6rgw00p.cpp:29: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tif (n<0) return 0;\n\tif (n==1) return 0;\n\tif\
    \ (n==2) return 1;\n\tlong a,b;\n\tif(n==4){\n\t\ta=3;\n\t\tb=4;\n\t}else{\n\t\
    \ta=0;\n\t\tb=0;\n\t}\n\tfor(int i=4;i<=n;i++){\n\t\tlong temp=a+b;\n\t\ta=b;\n\
    \t\tb=temp;\n\t}\n\treturn a;\n}\nint main() {\n    auto candidate = fib4;\n \
    \   assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10))\
    \ == (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpr4ae32ji: /tmp/tmpr4ae32ji.cpp:37: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tassert(n > 0);\n\tif (n == 0) return 0;\n\tif (n\
    \ == 1) return 1;\n\tif (n == 2) return 2;\n\tlong a = fib4(n - 2);\n\tlong b\
    \ = fib4(n - 1);\n\treturn a + b;\n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpilgc4tnw: /tmp/tmpilgc4tnw.cpp:27: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if(n<2) return n;\n    long mid = n/2;\n    long\
    \ a = fib4(mid);\n    long b = fib4(mid-1);\n    return a+b+mid+fib4(mid-2);\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpq2xgwv_m: /tmp/tmpq2xgwv_m.cpp:26: int main(): Assertion `candidate((8))\
    \ == (28)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long a = 0;\n    long b = 1;\n    long c = 1;\n\
    \    long d = 1;\n    long sum = 0;\n    while (n > 0) {\n        if (n % 2 ==\
    \ 1) {\n            sum += b;\n        }\n        if (n % 3 == 1) {\n        \
    \    sum += c;\n        }\n        if (n % 5 == 1) {\n            sum += d;\n\
    \        }\n        n--;\n        c = a;\n        a = b;\n        b = d;\n   \
    \     d = sum;\n    }\n    return d;\n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpxh2xasve: /tmp/tmpxh2xasve.cpp:42: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long ans = 0;\n    if (n == 0) return 0;\n   \
    \ if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n\
    \    if (n == 4) return 0;\n    for (int i = 0; i < 5; i++) {\n        long res\
    \ = fib4(n - i);\n        ans += res;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n\
    \        return 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n    \
    \    return 0;\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n -\
    \ 4);\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    return (n<=1)?0:((fib4(n-1)+fib4(n-2)+fib4(n-3)+fib4(n-4))%1000000);\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpkfw2y4sl: /tmp/tmpkfw2y4sl.cpp:21: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    // Write your code here.\n    if(n == 0)\n   \
    \     return 0;\n    if(n == 1)\n        return 1;\n    if(n == 2)\n        return\
    \ 1;\n    if(n == 3)\n        return 2;\n    return fib4(n - 1) + fib4(n - 2)\
    \ + fib4(n - 3) + fib4(n - 4);\n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmppmehnf08: /tmp/tmppmehnf08.cpp:30: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tlong ans = 0;\n\t\n\tassert(n >= 0 && n < 10);\n\
    \n\tif (n == 0) ans = 0;\n\telse if (n == 1) ans = 0;\n\telse if (n == 2) ans\
    \ = 2;\n\telse if (n == 3) ans = 0;\n\telse if (n == 4) ans = 2;\n\telse if (n\
    \ == 5) ans = 4;\n\telse if (n == 6) ans = 5;\n\telse if (n == 7) ans = 8;\n\t\
    else if (n == 8) ans = 7;\n\telse if (n == 9) ans = 15;\n\telse ans = fib4(n -\
    \ 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n\n\treturn ans;\n}\nint main()\
    \ {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: "tmp93r0w0qp: /tmp/tmp93r0w0qp.cpp:38: int main(): Assertion `candidate((8))\
    \ == (28)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    // code goes here\n    if(n<0) return 0;\n   \
    \ if(n==0) return 0;\n    if(n==1) return 1;\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4);\n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpo0yznpiu: /tmp/tmpo0yznpiu.cpp:25: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tif (n == 0) return 0;\n\tif (n == 1) return 0;\n\
    \tif (n == 2) return 2;\n\treturn fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4);\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tif (n == 0 || n == 1)\n\t\treturn n;\n\tif (n ==\
    \ 2)\n\t\treturn 2;\n\tif (n == 3) {\n\t\tlong a = fib4(n - 1);\n\t\tlong b =\
    \ fib4(n - 2);\n\t\tlong c = fib4(n - 3);\n\t\treturn a + b + c;\n\t}\n\tif (n\
    \ == 4) {\n\t\tlong a = fib4(n - 1);\n\t\tlong b = fib4(n - 2);\n\t\tlong c =\
    \ fib4(n - 3);\n\t\tlong d = fib4(n - 4);\n\t\treturn a + b + c + d;\n\t}\n\t\
    if (n == 5) {\n\t\tlong a = fib4(n - 1);\n\t\tlong b = fib4(n - 2);\n\t\tlong\
    \ c = fib4(n - 3);\n\t\tlong d = fib4(n - 4);\n\t\tlong e = fib4(n - 5);\n\t\t\
    return a + b + c + d + e;\n\t}\n\tif (n == 6) {\n\t\tlong a = fib4(n - 1);\n\t\
    \tlong b = fib4(n - 2);\n\t\tlong c = fib4(n - 3);\n\t\tlong d = fib4(n - 4);\n\
    \t\tlong e = fib4(n - 5);\n\t\tlong f = fib4(n - 6);\n\t\treturn a + b + c + d\
    \ + e + f;\n\t}\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpkz9r_1ou: /tmp/tmpkz9r_1ou.cpp:54: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  if (n <= 0) return 0;\n  if (n <= 2) return 1;\n\
    \  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n}\nint main()\
    \ {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: "tmpnk30akd2: /tmp/tmpnk30akd2.cpp:23: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\treturn n == 0 ? 0 : n == 1 ? 1 : fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4);\n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tif (n == 0) return 0;\n\tif (n == 1) return 0;\n\
    \tif (n == 2) return 2;\n\tif (n == 3) return 0;\n\tif (n == 4) return 0;\n\t\
    long prev1 = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n\tlong prev2 = fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4);\n\treturn prev1 + prev2;\n}\nint main()\
    \ {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: "tmpa3h4v58r: /tmp/tmpa3h4v58r.cpp:29: int main(): Assertion `candidate((8))\
    \ == (28)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\treturn n;\n}\nint main() {\n    auto candidate =\
    \ fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmp6b9nhw17: /tmp/tmp6b9nhw17.cpp:21: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long a = 1;\n    long b = 1;\n    long c;\n  \
    \  long total = 0;\n    for (int i = 0; i < n; i++) {\n        c = a + b + c;\n\
    \        a = b;\n        b = c;\n        total += a;\n    }\n    return total;\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpnqy8bpr0: /tmp/tmpnqy8bpr0.cpp:31: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if(n == 0)\n        return 0;\n    if(n == 1)\n\
    \        return 1;\n    if(n == 2)\n        return 2;\n    if(n == 3)\n      \
    \  return 0;\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmptbxzxfp5: /tmp/tmptbxzxfp5.cpp:29: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tif (n == 0)\n\t\treturn 0;\n\telse if (n == 1)\n\
    \t\treturn 1;\n\telse if (n == 2)\n\t\treturn 2;\n\telse if (n == 3)\n\t\treturn\
    \ 0;\n\telse if (n == 4)\n\t\treturn 4;\n\telse if (n == 5)\n\t\treturn 8;\n\t\
    else if (n == 6)\n\t\treturn 14;\n\telse if (n == 7)\n\t\treturn 26;\n\telse\n\
    \t\treturn fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n}\nint main() {\n \
    \   auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: "tmpsc8ygzsl: /tmp/tmpsc8ygzsl.cpp:38: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    \n    long fib4=0;\n    \n    if(n<=1){\n    \
    \    return fib4;\n    }\n    \n    long next=fib4(n -2);\n    \n    fib4=next+next;\n\
    \    \n    return fib4;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6856n3yu.cpp: In function \u2018long int fib4(long int)\u2019:\n\
    /tmp/tmp6856n3yu.cpp:24:24: error: \u2018fib4\u2019 cannot be used as a function\n\
    \   24 |     long next=fib4(n -2);\n      |                        ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tif (n == 0) {\n\t\treturn 0;\n\t} else if (n ==\
    \ 1) {\n\t\treturn 0;\n\t} else if (n == 2) {\n\t\treturn 2;\n\t} else if (n ==\
    \ 3) {\n\t\treturn 0;\n\t}\n\treturn fib4(n - 1) + fib4(n - 2) + fib4(n - 3) +\
    \ fib4(n - 4);\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    // Write your code here\n    long sum = 0, num\
    \ = 1;\n    while (n>=num) {\n        sum += num;\n        num += 1;\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmp7epomflw: /tmp/tmp7epomflw.cpp:27: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n<4)\n        return n;\n    return fib4(fib4(fib4(fib4(fib4(n-3)))))\
    \ + fib4(n-2);\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpqwrsi6j1: /tmp/tmpqwrsi6j1.cpp:23: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long a = 0, b = 1, c = 0, d = 0;\n    long ans\
    \ = 1;\n    // cout << \"fib4 called\\n\";\n    for(int i = 0; i <= n; i++) {\n\
    \        // cout << \"i = \" << i << endl;\n        c = (a + b + c + d);\n   \
    \     d = a - b;\n        a= b;\n        b = c;\n        c = d;\n        ans =\
    \ ans * ans;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmph22cxfcn: /tmp/tmph22cxfcn.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if(n == 0)\n        return 0;\n    if(n == 1)\n\
    \        return 1;\n    if(n == 2)\n        return 2;\n    if(n == 3)\n      \
    \  return 0;\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n}\nint\
    \ main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n \
    \   assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n \
    \   assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpub2yaguc: /tmp/tmpub2yaguc.cpp:29: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long a = 0;\n    while (n > 0) {\n        a =\
    \ (a + n) % 499;\n        n = (n + n) % 499;\n    }\n    return a;\n}\nint main()\
    \ {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    \n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmp_6iww9m9: /tmp/tmp_6iww9m9.cpp:21: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    assert(n >= 0);\n    if (n < 1)\n        return\
    \ 0;\n    if (n < 2)\n        return 1;\n    return fib4(n - 1) + fib4(n - 2)\
    \ + fib4(n - 3) + fib4(n - 4);\n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpig2blepx: /tmp/tmpig2blepx.cpp:17: long int fib4(long int): Assertion\
    \ `n >= 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if(n<4){\n        return n;\n    }\n    return\
    \ fib4(fib4(fib4(fib4(n-3))) + fib4(n-2)) + fib4(n-1) + fib4(n-4);\n}\nint main()\
    \ {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  if (n == 0 || n == 1 || n == 2) return 1;\n  else\
    \ if (n == 3) return 4;\n  else if (n == 4) return 8;\n  else return fib4(n -\
    \ 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmpr3y_pz5a: /tmp/tmpr3y_pz5a.cpp:24: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    assert(n >= 0);\n    if (n == 0) return 0;\n \
    \   if (n == 1) return 1;\n    long ans = fib4(n - 1) + fib4(n - 2) + fib4(n -\
    \ 3) + fib4(n - 4);\n    return ans;\n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmp__x9e8yz: /tmp/tmp__x9e8yz.cpp:17: long int fib4(long int): Assertion\
    \ `n >= 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0)\n        return 0;\n    else if (n\
    \ == 1)\n        return 1;\n    else if (n == 2)\n        return 2;\n    else\
    \ if (n == 3)\n        return 0;\n    else if (n == 4)\n        return 1;\n  \
    \  else if (n == 5)\n        return 1;\n    else if (n == 6)\n        return 4;\n\
    \    else if (n == 7)\n        return 5;\n    else\n        return fib4(n-1) +\
    \ fib4(n-2) + fib4(n-3) + fib4(n-4);\n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmppp3o98td: /tmp/tmppp3o98td.cpp:38: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    int a=0, b=0, c=0, d=0;\n    while(n>0){\n   \
    \     long curr=a;\n        a=b;\n        b=c;\n        c=d;\n        d=curr+a+b+c+d;\n\
    \        n--;\n    }\n    return d;\n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpbzee3jin: /tmp/tmpbzee3jin.cpp:30: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    // write your code in C++14\n    \n    if (n ==\
    \ 0) return 0;\n    if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n\
    \ == 3) return 0;\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4);\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpbki6h2rp: /tmp/tmpbki6h2rp.cpp:27: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    // code goes here\n    if(n<4)\n        return\
    \ 0;\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n}\nint main()\
    \ {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: "tmpv6jl0q0i: /tmp/tmpv6jl0q0i.cpp:24: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long a = 0;\n    long b = 0;\n    for (long i\
    \ = 5; i < n; i++) {\n        a = a + b;\n        b = b + a;\n    }\n    return\
    \ a;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) ==\
    \ (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmp4bzojm83: /tmp/tmp4bzojm83.cpp:27: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    if (n == 4) return\
    \ 4;\n    if (n == 5) return 8;\n    if (n == 6) return 14;\n    long res = fib4(n\
    \ - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n    return res;\n}\nint main()\
    \ {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: "tmpj627tjcn: /tmp/tmpj627tjcn.cpp:29: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    \n    long ret = 0;\n    \n    for(long i = 1;\
    \ i <= n; i++) {\n        \n        long tmp = 0;\n        \n        for(long\
    \ j = 1; j <= 4; j++) {\n            \n            tmp = tmp + j;\n        }\n\
    \        \n        tmp = tmp + i;\n        \n        ret = ret + tmp;\n    }\n\
    \    \n    return ret;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpob8qdo83: /tmp/tmpob8qdo83.cpp:38: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long long x = 0;\n    long long y = 1;\n    for\
    \ (int i = 0; i < n; i++) {\n        x = x + y;\n        y = x * x;\n    }\n \
    \   return x;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpgfpwyatp: /tmp/tmpgfpwyatp.cpp:27: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    int a,b,c,d;\n    if(n<2)\n        return n;\n\
    \    a=b=c=d=0;\n    while(n != 0) {\n        int temp;\n        if(n%2 == 1)\
    \ {\n            temp = a+b+c;\n            a = b;\n            b = c;\n     \
    \       c = temp;\n        }\n        else{\n            temp = a+b+d;\n     \
    \       a = b;\n            b = d;\n            d = temp;\n        }\n       \
    \ n /= 4;\n    }\n    return d;\n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpuufm6n66: /tmp/tmpuufm6n66.cpp:41: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long f = 1;\n    long fib = 0;\n    for (int i\
    \ = 0; i < n; i++) {\n        f = f * 5;\n        fib = fib + f;\n    }\n    return\
    \ fib;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmp92340cnv: /tmp/tmp92340cnv.cpp:27: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n     assert(n >= 0);\n     long res = 0;\n     for\
    \ (int i = 1; i <= n; i++) {\n         res = (res + i) % 10;\n     }\n     return\
    \ res;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpu3wrpqo1: /tmp/tmpu3wrpqo1.cpp:26: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tassert(n>=0);\n\tlong l=n%4;\n\tif (l==0) return\
    \ n;\n\tif (l==1) return n+2;\n\tif (l==2) return n*3;\n\treturn fib4(n-2)+fib4(n-3)+fib4(n-4);\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmp8r_j2s7f: /tmp/tmp8r_j2s7f.cpp:26: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n\
    \        return 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n    \
    \    return 0;\n    if (n == 4)\n        return 2;\n    long left = fib4(n - 1);\n\
    \    long right = fib4(n - 2);\n    long result = left + right + fib4(n - 3) +\
    \ fib4(n - 4);\n    return result;\n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    // assert(n >= 0);\n    // assert(n <= 4);\n \
    \   long arr[] = {0, 1, 1, 2, 3, 5, 8, 13, 21, 34};\n    return arr[n];\n}\nint\
    \ main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n \
    \   assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n \
    \   assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpb3vul4di: /tmp/tmpb3vul4di.cpp:24: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n\
    \        return 1;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n    \
    \    return 0;\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n -\
    \ 4);\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpxy05l56r: /tmp/tmpxy05l56r.cpp:29: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n   if (n == 0)\n      return 0;\n   if (n == 1)\n\
    \      return 1;\n   if (n == 2)\n      return 2;\n   if (n == 3)\n      return\
    \ 0;\n   return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n}\nint\
    \ main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n \
    \   assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n \
    \   assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmp0ypw6pwo: /tmp/tmp0ypw6pwo.cpp:29: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  if (n <= 1) return 1;\n  long a = fib4(n - 1);\n\
    \  long b = fib4(n - 2);\n  long c = fib4(n - 3);\n  long d = fib4(n - 4);\n \
    \ return a + b + c + d;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmp_op4xp2p: /tmp/tmp_op4xp2p.cpp:26: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    // Write your code here\n    // assert(n > 0);\n\
    \    long fib4=0;\n    if(n<4) {\n        fib4=fib4+1;\n    }\n    else if(n<8)\
    \ {\n        fib4=fib4+1;\n    }\n    else if(n<14) {\n        fib4=fib4+1;\n\
    \    }\n    else {\n        fib4=fib4+fib4+1; \n    }\n    return fib4;\n}\nint\
    \ main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n \
    \   assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n \
    \   assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmprs8y3snb: /tmp/tmprs8y3snb.cpp:36: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    return n <= 0 ? 0 : ((n == 1 || n == 2) ? 1 :\
    \ ((n == 2 || n == 3) ? 2 :\n        ((n == 3 || n == 4) ? 3 : ((n == 4 || n ==\
    \ 5) ? 4 : ((n == 6 || n == 0) ? 0 : fib4(n - 1) + fib4(n - 2) + fib4(n - 3) +\
    \ fib4(n - 4))));\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcm2ekaie.cpp: In function \u2018long int fib4(long int)\u2019:\n\
    /tmp/tmpcm2ekaie.cpp:18:143: error: expected \u2018)\u2019 before \u2018;\u2019\
    \ token\n   18 |         ((n == 3 || n == 4) ? 3 : ((n == 4 || n == 5) ? 4 : ((n\
    \ == 6 || n == 0) ? 0 : fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4))));\n\
    \      |                                                                     \
    \                                                                          ^\n\
    \      |                                                                     \
    \                                                                          )\n\
    /tmp/tmpcm2ekaie.cpp:17:51: note: to match this \u2018(\u2019\n   17 |     return\
    \ n <= 0 ? 0 : ((n == 1 || n == 2) ? 1 : ((n == 2 || n == 3) ? 2 :\n      |  \
    \                                                 ^\n/tmp/tmpcm2ekaie.cpp:18:143:\
    \ error: expected \u2018)\u2019 before \u2018;\u2019 token\n   18 |         ((n\
    \ == 3 || n == 4) ? 3 : ((n == 4 || n == 5) ? 4 : ((n == 6 || n == 0) ? 0 : fib4(n\
    \ - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4))));\n      |                \
    \                                                                            \
    \                                                   ^\n      |               \
    \                                                                            \
    \                                                    )\n/tmp/tmpcm2ekaie.cpp:17:25:\
    \ note: to match this \u2018(\u2019\n   17 |     return n <= 0 ? 0 : ((n == 1\
    \ || n == 2) ? 1 : ((n == 2 || n == 3) ? 2 :\n      |                        \
    \ ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n <= 1)\n        return n;\n    return fib4(n\
    \ - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmpjq0l_cik: /tmp/tmpjq0l_cik.cpp:23: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  if (n < 2) {\n    return n;\n  } else if (n <= 4)\
    \ {\n    return n;\n  } else if (n <= 8) {\n    return n;\n  } else if (n <= 16)\
    \ {\n    return n;\n  } else if (n <= 32) {\n    return n + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4);\n  } else {\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n\
    \  }\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) ==\
    \ (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpa90y2vdc: /tmp/tmpa90y2vdc.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    assert(n >= 1);\n    if (n <= 0) {\n        return\
    \ 0;\n    }\n    long ans = fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n -\
    \ 4);\n    return ans;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpb3c33j8o: /tmp/tmpb3c33j8o.cpp:17: long int fib4(long int): Assertion\
    \ `n >= 1' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tlong curr = 1;\n\tlong last;\n\twhile (n > 4) {\n\
    \t\tlast = (curr * curr) % 4;\n\t\tcurr = last;\n\t\tn--;\n\t}\n\tlast = (curr\
    \ * curr) % 4;\n\treturn last;\n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpi6z1idzh: /tmp/tmpi6z1idzh.cpp:29: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  // Write your code here.\n  assert(n > 0);\n  long\
    \ a = 0;\n  long b = 1;\n  long c = 2;\n  long d = 1;\n  long e = 1;\n  for (long\
    \ i = 0; i < n; ++i) {\n    long temp = a;\n    a = b;\n    b = c;\n    c = d;\n\
    \    d = e;\n    e = temp + e + c + d;\n  }\n  return e;\n}\nint main() {\n  \
    \  auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: "tmpnnwb5z09: /tmp/tmpnnwb5z09.cpp:36: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long f4 = 0, f5 = 1, f6 = 3, f7 = 7;\n    while\
    \ (n) {\n        int remainder = n % 4;\n        f4 = f4 + f5 + f6 + f7;\n   \
    \     f5 = f5 + f6;\n        f6 = f6;\n        f7 = f7;\n        n = n / 4;\n\
    \    }\n    return f4;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpjbw_35lf: /tmp/tmpjbw_35lf.cpp:30: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    assert(n >= 0);\n    if (n == 0) return 0;\n \
    \   if (n == 1) return 1;\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3)\
    \ + fib4(n - 4);\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmp8dmg8w0p: /tmp/tmp8dmg8w0p.cpp:17: long int fib4(long int): Assertion\
    \ `n >= 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\t\
    return 0;\n\tif (n == 2)\n\t\treturn 2;\n\tif (n == 3)\n\t\treturn 0;\n\tlong\
    \ ans = 0;\n\tans += fib4(n - 1);\n\tans += fib4(n - 2);\n\tans += fib4(n - 3);\n\
    \tans += fib4(n - 4);\n\treturn ans;\n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0 || n == 1) {\n        return n;\n \
    \   }\n    long a = fib4(n - 1);\n    long b = fib4(n - 2);\n    long c = fib4(n\
    \ - 3);\n    long d = fib4(n - 4);\n    return a + b + c + d;\n}\nint main() {\n\
    \    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    int sum = 0;\n    long a = fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4);\n    for (int i = 1; i <= n; i++) {\n        sum += a;\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if(n <= 0)\n        return 0;\n    if(n <= 2)\n\
    \        return 1;\n    \n    long res = fib4(n - 1);\n    long temp1 = res;\n\
    \    long temp2 = temp1 + fib4(n - 2);\n    long temp3 = temp2 + fib4(n - 3);\n\
    \    long temp4 = temp3 + fib4(n - 4);\n    return temp4;\n}\nint main() {\n \
    \   auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: "tmp0jq18re5: /tmp/tmp0jq18re5.cpp:31: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n\
    \        return 1;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n    \
    \    return 0;\n    if (n == 4)\n        return 4;\n\n    return (fib4(n - 1)\
    \ + fib4(n - 2) + fib4(n - 3) + fib4(n - 4));\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmpe05tx35a: /tmp/tmpe05tx35a.cpp:32: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n   assert (0 <= n);\n   long sum = 0;\n   for (int\
    \ i = 1; i <= n; i++)\n      sum += fibonacci_seq[i];\n   return sum;\n}\nint\
    \ main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n \
    \   assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n \
    \   assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj7okikpm.cpp: In function \u2018long int fib4(long int)\u2019:\n\
    /tmp/tmpj7okikpm.cpp:20:14: error: \u2018fibonacci_seq\u2019 was not declared\
    \ in this scope\n   20 |       sum += fibonacci_seq[i];\n      |             \
    \ ^~~~~~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    assert(n>=0);\n    if (n<=0) return 0;\n    if\
    \ (n==1) return 1;\n    return fib4( (n-1)+(n-2)+(n-3)+(n-4) );\n}\nint main()\
    \ {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: "tmpmbj6lhry: /tmp/tmpmbj6lhry.cpp:17: long int fib4(long int): Assertion\
    \ `n>=0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  if (n == 0) {\n    return 0;\n  }\n  if (n == 1)\
    \ {\n    return 1;\n  }\n  if (n == 2) {\n    return 2;\n  }\n  if (n == 3) {\n\
    \    return 3;\n  }\n  if (n == 4) {\n    return 4;\n  }\n  return fib4(n - 1)\
    \ + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmp800p2gz3: /tmp/tmp800p2gz3.cpp:36: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    assert(n >= 0);\n    if (n == 0 || n == 1)\n \
    \       return n;\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4);\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmph97ixx18: /tmp/tmph97ixx18.cpp:17: long int fib4(long int): Assertion\
    \ `n >= 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    int ans = 0;\n    if (n <= 1) {\n        return\
    \ n;\n    }\n    for (int i = 3; i <= n; i += 2) {\n        ans += fib4(i - 1);\n\
    \        ans += fib4(i - 2);\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: "tmp7f8mptgb: /tmp/tmp7f8mptgb.cpp:29: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long prev = 0;\n    if(n == 0) return 0;\n   \
    \ if(n == 1) return 1;\n    if(n == 2) return 2;\n    \n    long cur = prev +\
    \ prev;\n    prev = cur + cur;\n    \n    while(n > 3) {\n        cur = prev +\
    \ prev;\n        prev = cur + cur;\n        n--;\n    }\n    return prev;\n}\n\
    int main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmp7i9iy8x5: /tmp/tmp7i9iy8x5.cpp:34: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    assert (n>0);\n    if (n==1) return 0;\n    if\
    \ (n==2) return 1;\n    if (n==3) return 1;\n    if (n==4) return 2;\n    return\
    \ fib4(int(n/4)) + fib4(int(n%4));\n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpn_z9ivwc: /tmp/tmpn_z9ivwc.cpp:26: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if(n <= 0) return 0;\n    if(n <= 1) return 0;\n\
    \    if(n <= 2) return 2;\n    return fib4(n - 4) + fib4(n - 3) + fib4(n - 2)\
    \ + fib4(n - 1);\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmp13k41g2q: /tmp/tmp13k41g2q.cpp:24: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if(n < 4){\n        return n;\n    }\n    long\
    \ fib5 = fib4(5) + fib4(6) + fib4(7) + fib4(8);\n    return fib5;\n}\nint main()\
    \ {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  long res = 0;\n  if(n<=0)\n  {\n    return 0;\n\
    \  }\n  else if (n==1)\n  {\n    return 1;\n  }\n  else\n  {\n    long temp=fib4(n-1);\n\
    \    res = res + temp;\n    temp=fib4(n-2);\n    res = res + temp;\n    temp=fib4(n-3);\n\
    \    res = res + temp;\n    temp=fib4(n-4);\n    res = res + temp;\n  }\n  return\
    \ res;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmp4r08xs2k: /tmp/tmp4r08xs2k.cpp:41: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tint temp;\n\tif(n<0){\n\t\tprintf(\"The value of\
    \ negative number is not defined.\\n\");\n\t\treturn -1;\n\t}\n\tif(0<=n && n<=4){\n\
    \t\treturn n;\n\t}\n\tif(n<5){\n\t\ttemp=fib4(n-1);\n\t}else{\n\t\ttemp=fib4(n-4);\n\
    \t\ttemp+=fib4(n-3);\n\t}\n\treturn temp;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmp1_6glmmb: /tmp/tmp1_6glmmb.cpp:35: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long a = 0;\n    long b = 0;\n    long c = 1;\n\
    \    for (int i = 0; i < n; i++) {\n        a = b;\n        b = c;\n        c\
    \ = a + b + c + a;\n    }\n    return c;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmp8i1wlun3: /tmp/tmp8i1wlun3.cpp:29: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    assert(n < 8);\n    if (n == 0)\n        return\
    \ 0;\n    if (n == 1)\n        return 1;\n    if (n == 2)\n        return 2;\n\
    \    if (n == 3)\n        return 0;\n    return fib4(n - 4) + fib4(n - 3) + fib4(n\
    \ - 2) + fib4(n - 1);\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpqpb6u9t5: /tmp/tmpqpb6u9t5.cpp:30: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  if(n <= 1){\n    return n;\n  }\n  else{\n    return\
    \ fib4(n - 4) + fib4(n - 3) + fib4(n - 2) + fib4(n - 1);\n  }\n}\nint main() {\n\
    \    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: "tmpn6agk31a: /tmp/tmpn6agk31a.cpp:26: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tassert(n>=0);\n\tif(n<=1)\n\t\treturn n;\n\tif(n<4)\n\
    \t\treturn fib4(n-4)+fib4(n-3)+fib4(n-2)+fib4(n-1);\n\telse\n\t\treturn fib4(n-2)+fib4(n-1)+fib4(n);\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpwb779_bk: /tmp/tmpwb779_bk.cpp:17: long int fib4(long int): Assertion\
    \ `n>=0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  if (n <= 3) return n;\n  return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4);\n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmp5goo86hz: /tmp/tmp5goo86hz.cpp:22: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n    } else if\
    \ (n == 1) {\n        return 0;\n    } else if (n == 2) {\n        return 2;\n\
    \    } else if (n == 3) {\n        return 0;\n    } else if (n == 4) {\n     \
    \   return 2;\n    } else {\n        return fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4);\n    }\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\t\
    return 0;\n\tif (n == 2)\n\t\treturn 2;\n\tif (n == 3)\n\t\treturn 0;\n\treturn\
    \ fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n}\nint main() {\n  \
    \  auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    assert(n >= 0);\n    if (n == 0)\n        return\
    \ 0;\n    if (n == 1)\n        return 0;\n    return fib4(n - 1) + fib4(n - 2)\
    \ + fib4(n - 3) + fib4(n - 4);\n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpl17jc3vr: /tmp/tmpl17jc3vr.cpp:17: long int fib4(long int): Assertion\
    \ `n >= 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tlong ans;\n\tif (n == 0) ans = 0;\n\telse if (n\
    \ == 1) ans = 1;\n\telse if (n == 2) ans = 2;\n\telse if (n == 3) ans = 0;\n\t\
    else ans = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n\treturn ans;\n}\n\
    int main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmp2xb8438o: /tmp/tmp2xb8438o.cpp:27: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if(n==0) return 0;\n    if(n==1) return 0;\n \
    \   if(n==2) return 2;\n    if(n==3) return 0;\n    if(n==4) return 0;\n    return\
    \ fib4(4-(n%4)) + (fib4(n%4));\n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpwckarv4k: /tmp/tmpwckarv4k.cpp:26: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if(n == 0){\n        return 0;\n    }\n    if(n\
    \ == 1){\n        return 1;\n    }\n    if(n == 2){\n        return 2;\n    }\n\
    \    if(n == 3){\n        return 0;\n    }\n    return fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4);\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpkgorw2lk: /tmp/tmpkgorw2lk.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0)\n        return 0;\n    else if (n\
    \ == 1)\n        return 0;\n    else if (n == 2)\n        return 2;\n    else\
    \ if (n == 3)\n        return 0;\n    else\n        return (fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4));\n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 1)\n        return 0;\n    else if (n\
    \ == 0)\n        return 1;\n    else if (n == 2)\n        return 2;\n    else\n\
    \        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n}\nint\
    \ main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n \
    \   assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n \
    \   assert(candidate((12)) == (386));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    // Your code here\n    long a = 0;\n    long b\
    \ = 1;\n    long c = 1;\n    long d = 1;\n    long temp;\n    for(int i = 1; i\
    \ <= n; i++) {\n        temp = a;\n        a = b;\n        b = c;\n        c =\
    \ d;\n        d = temp + a + b + c + d;\n    }\n    return d;\n}\nint main() {\n\
    \    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: "tmp2dtyhi0a: /tmp/tmp2dtyhi0a.cpp:34: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    // assert(n >= 0 && n < 1000);\n    // long long\
    \ result = 1;\n    // long long x = 1;\n    // long long y = 1;\n    // long long\
    \ z = 1;\n    // long long s = 2;\n    // long long k = 2;\n    long long temp,\
    \ temp1, temp2, temp3;\n    temp1 = 1;\n    temp2 = 1;\n    temp3 = 1;\n    if\
    \ (n == 0) {\n        return 0;\n    } else if (n == 1) {\n        return 0;\n\
    \    } else if (n == 2) {\n        return 2;\n    } else {\n        while (k <=\
    \ n) {\n            temp = temp1 + temp2;\n            temp1 = temp2;\n      \
    \      temp2 = temp;\n            temp = temp3 + temp3;\n            temp3 = temp3;\n\
    \            temp3 = temp + temp3;\n        }\n        return temp3;\n    }\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzhj_9hxk.cpp: In function \u2018long int fib4(long int)\u2019:\n\
    /tmp/tmpzhj_9hxk.cpp:35:16: error: \u2018k\u2019 was not declared in this scope\n\
    \   35 |         while (k <= n) {\n      |                ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tif (n == 0) {\n\t\treturn 0;\n\t}\n\tif (n == 1)\
    \ {\n\t\treturn 0;\n\t}\n\tif (n == 2) {\n\t\treturn 2;\n\t}\n\tif (n == 3) {\n\
    \t\treturn 0;\n\t}\n\treturn fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4);\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tassert(n>=0 && n<20);\n\tlong prev=n%10;\n\tif (prev>0)\
    \ return prev;\n\tprev=prev+fib4(10-n);\n\treturn prev;\n}\nint main() {\n   \
    \ auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: "tmp77yd4chn: /tmp/tmp77yd4chn.cpp:25: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\t\
    return 1;\n\tif (n == 2)\n\t\treturn 2;\n\tif (n == 3)\n\t\treturn 0;\n\tif (n\
    \ == 4)\n\t\treturn 0;\n\treturn fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4);\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpzs3nw_13: /tmp/tmpzs3nw_13.cpp:31: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\t\
    return 0;\n\tif (n == 2)\n\t\treturn 2;\n\tif (n == 3)\n\t\treturn 0;\n\tif (n\
    \ >= 4) {\n\t\tlong ans = fib4(n - 4) + fib4(n - 3) + fib4(n - 2) + fib4(n - 1);\n\
    \t\treturn ans;\n\t}\n\telse\n\t\treturn 0;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n\
    \        return 1;\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long a = 0;\n    long b = 1;\n    long c = 1;\n\
    \    long d = 1;\n    long e = 1;\n    for (long i = 0; i < n; i++) {\n      \
    \  a = b;\n        b = c;\n        c = d;\n        d = e;\n        e = a + b +\
    \ c + d + e;\n    }\n    return e;\n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpjhoqa2nk: /tmp/tmpjhoqa2nk.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if(n<0)\n        throw std::invalid_argument(\"\
    fib4: Invalid argument n <= 0\");\n    if(n>0){\n        long prev=fib4(n-1);\n\
    \        long cur=prev+prev+prev+prev+prev;\n        return cur;\n    }else{\n\
    \        return 0;\n    }\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmp457r9d9w: /tmp/tmp457r9d9w.cpp:29: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    else if (n == 1) return\
    \ 0;\n    else if (n == 2) return 2;\n    else if (n == 3) return 0;\n    else\
    \ if (n == 4) return 1;\n    else if (n == 5) return 2;\n    else if (n == 6)\
    \ return 3;\n    else if (n == 7) return 4;\n    else return fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4);\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpntg0rcy3: /tmp/tmpntg0rcy3.cpp:29: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tif(n<=1) {\n\t\treturn n;\n\t} else {\n\t\treturn\
    \ fib4(n - 4) + fib4(n - 3) + fib4(n - 2) + fib4(n - 1);\n\t}\n}\nint main() {\n\
    \    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: "tmpqvreyown: /tmp/tmpqvreyown.cpp:25: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    assert(n >= 0);\n    if (n == 0)\n        return\
    \ 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n        return 2;\n\
    \    if (n == 3)\n        return 0;\n    if (n == 4)\n        return 0;\n    return\
    \ fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n}\nint main() {\n  \
    \  auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: "tmppsay070b: /tmp/tmppsay070b.cpp:32: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tassert(n >= 0 && n < 40000);\n\tif (n == 0) {\n\t\
    \treturn 0;\n\t}\n\tif (n == 1) {\n\t\treturn 0;\n\t}\n\tif (n == 2) {\n\t\treturn\
    \ 2;\n\t}\n\tif (n == 3) {\n\t\treturn 0;\n\t}\n\treturn fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4);\n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long prev = 0;\n    long cur = 0;\n    long next\
    \ = 1;\n    for (int i = 0; i < n; i++) {\n        next = prev + cur + next;\n\
    \        prev = cur;\n        cur = next;\n    }\n    return cur;\n}\nint main()\
    \ {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: "tmpka_iaq1t: /tmp/tmpka_iaq1t.cpp:29: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  long long ans = 0;\n  while (n) {\n    ans += n;\n\
    \    n = n - 4;\n  }\n  return ans;\n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  if (n == 0) return 0;\n  if (n == 1) return 0;\n\
    \  if (n == 2) return 2;\n  if (n == 3) return 0;\n  if (n == 4) return 1;\n \
    \ return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n}\nint main() {\n   \
    \ auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: "tmp8qxarm9z: /tmp/tmp8qxarm9z.cpp:26: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  if(n<=0)\n    return 0;\n  if(n==1)\n    return\
    \ 1;\n  if(n==2)\n    return 2;\n  if(n==3)\n    return 0;\n  if(n>4)\n    return\
    \ fib4(n-1)+fib4(n-2)+fib4(n-3)+fib4(n-4);\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmpaiyc1r3w: /tmp/tmpaiyc1r3w.cpp:30: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long sum = 0;\n    if (n == 0) return 0;\n   \
    \ if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n\
    \    long i = 2;\n    for (long j = 1; j <= n; j++) {\n        sum += fib4(n -\
    \ j) + fib4(j);\n    }\n    return sum;\n}\nint main() {\n    auto candidate =\
    \ fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n\
    \        return 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n    \
    \    return 0;\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n}\n\
    int main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tif(n==0)\n\t\treturn 0;\n\tif(n==1)\n\t\treturn\
    \ 1;\n\tif(n==2)\n\t\treturn 2;\n\tif(n==3)\n\t\treturn 0;\n\tif(n==4)\n\t\treturn\
    \ 2;\n\tif(n==5)\n\t\treturn 4;\n\tif(n==6)\n\t\treturn 8;\n\tif(n==7)\n\t\treturn\
    \ 14;\n\tif(n==8)\n\t\treturn 16;\n\tif(n==9)\n\t\treturn 24;\n\tif(n==10)\n\t\
    \treturn 32;\n\tif(n==11)\n\t\treturn 48;\n\tif(n==12)\n\t\treturn 64;\n\tif(n==13)\n\
    \t\treturn 96;\n\tif(n==14)\n\t\treturn 128;\n\tif(n==15)\n\t\treturn 160;\n\t\
    if(n==16)\n\t\treturn 192;\n\tif(n==17)\n\t\treturn 256;\n\tif(n==18)\n\t\treturn\
    \ 320;\n\tif(n==19)\n\t\treturn 384;\n\tif(n==20)\n\t\treturn 416;\n\tif(n==21)\n\
    \t\treturn 528;\n\tif(n==22)\n\t\treturn 640;\n\tif(n==23)\n\t\treturn 704;\n\t\
    if(n==24)\n\t\treturn 832;\n\tif(n==25)\n\t\treturn 944;\n\tif(n==26)\n\t\treturn\
    \ 1064;\n\tif(n==27)\n\t\treturn 1184;\n\tif(n==28)\n\t\treturn 1281;\n\tif(n==29)\n\
    \t\treturn 1313;\n\tif(n==30)\n\t\treturn 1429;\n\tif(n==31)\n\t\treturn 1553;\n\
    \tif(n==32)\n\t\treturn 1671;\n\tif(n==33)\n\t\treturn 1811;\n\tif(n==34)\n\t\t\
    return 1949;\n\tif(n==35)\n\t\treturn 2071;\n\tif(n==36)\n\t\treturn 2193;\n\t\
    if(n==37)\n\t\treturn 2349;\n\tif(n==38)\n\t\treturn 2489;\n\tif(n==39)\n\t\t\
    return 2637;\n\tif(n==40)\n\t\treturn 2783;\n\tif(n==41)\n\t\treturn 3007;\n\t\
    if(n==42)\n\t\treturn 3277;\n\tif(n==43)\n\t\treturn 3515;\n\tif(n==44)\n\t\t\
    return 3713;\n\tif(n==45)\n\t\treturn 3931;\n\tif(n==46)\n\t\treturn 4163;\n\t\
    if(n==47)\n\t\treturn 4423;\n\tif(n==48)\n\t\treturn 46\n}\nint main() {\n   \
    \ auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwii805j7.cpp: In function \u2018long int fib4(long int)\u2019:\n\
    /tmp/tmpwii805j7.cpp:114:12: error: expected \u2018;\u2019 before \u2018}\u2019\
    \ token\n  114 |   return 46\n      |            ^\n      |            ;\n  115\
    \ | }\n      | ~           \n/tmp/tmpwii805j7.cpp:115:1: warning: control reaches\
    \ end of non-void function [-Wreturn-type]\n  115 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long sum = 0;\n    long temp = 0;\n    for(int\
    \ i = 0; i < n; i++) {\n        if(i == 0 || i == 1 || i == 2 || i == 3) {\n \
    \           sum = temp;\n        }\n        else {\n            temp += 4;\n \
    \       }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpem59ysk9: /tmp/tmpem59ysk9.cpp:31: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tif (n <= 0) return 0;\n\tif (n <= 1) return 0;\n\
    \tif (n <= 2) return 2;\n\tif (n <= 3) return 0;\n\treturn fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4);\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    int arr[n];\n    int cnt = 0;\n    for(int i =\
    \ 0; i < n; i++) {\n        arr[cnt] = i;\n        cnt += 2;\n    }\n    for(int\
    \ i = 0; i < n; i++) {\n        arr[cnt] = i;\n        cnt += 2;\n    }\n    for(int\
    \ i = 0; i < n; i++) {\n        arr[cnt] = i;\n        cnt += 2;\n    }\n    for(int\
    \ i = 0; i < n; i++) {\n        arr[cnt] = i;\n        cnt += 2;\n    }\n    for(int\
    \ i = 0; i < n; i++) {\n        arr[cnt] = i;\n        cnt += 2;\n    }\n    return\
    \ arr[n-1];\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmp0rt0hbmk: /tmp/tmp0rt0hbmk.cpp:43: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long ans = 0;\n    if (n == 0)\n        ans =\
    \ 0;\n    else if (n == 1)\n        ans = 1;\n    else if (n == 2)\n        ans\
    \ = 2;\n    else if (n == 3)\n        ans = 0;\n    else\n        ans = fib4(n\
    \ - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: "tmp2exf_rle: /tmp/tmp2exf_rle.cpp:32: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\t\
    return 1;\n\tif (n == 2)\n\t\treturn 2;\n\tif (n == 3)\n\t\treturn 0;\n\tif (n\
    \ > 3)\n\t\treturn fib4(n - 4) + fib4(n - 3) + fib4(n - 2) + fib4(n - 1);\n}\n\
    int main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmp5madvxvj: /tmp/tmp5madvxvj.cpp:30: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tif (n == 0 || n == 1 || n == 2) return n;\n\treturn\
    \ fib4(n - 4) + fib4(n - 3) + fib4(n - 2) + fib4(n - 1);\n}\nint main() {\n  \
    \  auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    // Write your solution here\n    if (n <= 4)\n\
    \        return n;\n    return fib4(n - 4) + fib4(n - 3) + fib4(n - 2) + fib4(n\
    \ - 1);\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpi5ndxfej: /tmp/tmpi5ndxfej.cpp:24: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if(n==0)\n        return 0;\n    else if(n==1)\n\
    \        return 1;\n    else if(n==2)\n        return 2;\n    else\n        return\
    \ fib4(--n)+fib4(--n)+fib4(--n)+fib4(--n);\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    \n    long long a = (n <= 0) ? 0 : (n % 2 == 0)\
    \ ? 1 : fib4(n / 2);\n    return a + a * ((n % 2 == 0) ? 1 : fib4(n / 2));\n}\n\
    int main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpn_15l8ro: /tmp/tmpn_15l8ro.cpp:23: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tif (n <= 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\t\
    return 1;\n\treturn fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n}\n\
    int main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmp1u8ztdd2: /tmp/tmp1u8ztdd2.cpp:25: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if(n<0)\n        return 0;\n    if(n==0)\n   \
    \     return 0;\n    if(n==1)\n        return 1;\n    long fib3=fib4(3-long(n));\n\
    \    if(n%2==1)\n        return fib3+fib3+fib3+fib3;\n    return fib3+fib3;\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmp0ab56dp4: /tmp/tmp0ab56dp4.cpp:30: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 1;\n    if (n == 2) return 2;\n    return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4);\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    // write your code in C++14\n    long prev = 0;\n\
    \    long next = prev + prev + prev + prev;\n    long sum = 0;\n    for(long i\
    \ = 0; i <= n; i++) {\n        sum += next;\n        prev = next;\n        next\
    \ = sum;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpjz8t2_tx: /tmp/tmpjz8t2_tx.cpp:30: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long num = 0;\n    while (n>1){\n        long\
    \ mid = (n-1)/2;\n        num += mid*mid*mid*mid;\n        n = mid;\n    }\n \
    \   return num;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpmd68_x1z: /tmp/tmpmd68_x1z.cpp:27: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    // Write your code here\n    if(n==0 || n==1){\n\
    \        return n;\n    }\n    if(n<0){\n        throw std::invalid_argument(\"\
    n should be non-negative\");\n    }\n    \n    long res=fib4(n-1);\n    res+=fib4(n-2);\n\
    \    res+=fib4(n-3);\n    res+=fib4(n-4);\n    \n    return res;\n}\nint main()\
    \ {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::invalid_argument'\n\
    \  what():  n should be non-negative\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long ans=0;\n    long temp;\n    for(long i=4;i<=n;i++){\n\
    \        temp=i-1;\n        ans=temp+ans;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: "tmpejx4rfcy: /tmp/tmpejx4rfcy.cpp:27: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  if (n <= 1)\n    return n;\n  else\n    return fib4(n\
    \ - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmp5nt4zqla: /tmp/tmp5nt4zqla.cpp:24: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    assert(n >= 0 && n <= 4);\n    if (n == 0)\n \
    \       return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n     \
    \   return 2;\n    if (n == 3)\n        return 0;\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4);\n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmp44wk9tx3: /tmp/tmp44wk9tx3.cpp:17: long int fib4(long int): Assertion\
    \ `n >= 0 && n <= 4' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long res=1;\n    for(int i=0;i<=n;i++){\n    \
    \    res=res+i;\n    }\n    return res;\n}\nint main() {\n    auto candidate =\
    \ fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmp5w3b_086: /tmp/tmp5w3b_086.cpp:25: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long ans = 1;\n    long sum = 0;\n    while(n>1)\
    \ {\n        ans = ans+sum;\n        sum += ans;\n        n--;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmp27ncvqud: /tmp/tmp27ncvqud.cpp:28: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tassert(n>=0);\n\tif (n==0) return 0;\n\tif (n==1)\
    \ return 1;\n\tlong prev1=fib4(n-1);\n\tlong prev2=fib4(n-2);\n\tlong prev3=fib4(n-3);\n\
    \tlong prev4=fib4(n-4);\n\treturn prev1 + prev2 + prev3 + prev4;\n}\nint main()\
    \ {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: "tmps0gx_ciw: /tmp/tmps0gx_ciw.cpp:17: long int fib4(long int): Assertion\
    \ `n>=0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  if(n==0) return 0;\n  if(n==1) return 1;\n  if(n==2)\
    \ return 2;\n  if(n==3) return 0;\n  return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4);\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpe7k9l6zj: /tmp/tmpe7k9l6zj.cpp:25: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    \n    // base case\n    if(n == 0) return 0;\n\
    \    if(n == 1) return 1;\n    if(n == 2) return 2;\n    \n    long prev1 = fib4(n\
    \ - 1);\n    long prev2 = fib4(n - 2);\n    \n    return (prev1 + prev2 + prev1\
    \ + prev2);\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpoag96stg: /tmp/tmpoag96stg.cpp:30: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long result = 0;\n    while (n > 1) {\n      \
    \  result = result + n;\n        n -= 4;\n    }\n    return result + n;\n}\nint\
    \ main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n \
    \   assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n \
    \   assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpjyr5kd8d: /tmp/tmpjyr5kd8d.cpp:26: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if(n<0) return -1; // Base case\n    long fib4\
    \ = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4); // Recursive case\n    return\
    \ fib4;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv66mj09c.cpp: In function \u2018long int fib4(long int)\u2019:\n\
    /tmp/tmpv66mj09c.cpp:18:25: error: \u2018fib4\u2019 cannot be used as a function\n\
    \   18 |     long fib4 = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4); // Recursive\
    \ case\n      |                         ^\n/tmp/tmpv66mj09c.cpp:18:37: error:\
    \ \u2018fib4\u2019 cannot be used as a function\n   18 |     long fib4 = fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4); // Recursive case\n      |            \
    \                         ^\n/tmp/tmpv66mj09c.cpp:18:49: error: \u2018fib4\u2019\
    \ cannot be used as a function\n   18 |     long fib4 = fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4); // Recursive case\n      |                        \
    \                         ^\n/tmp/tmpv66mj09c.cpp:18:61: error: \u2018fib4\u2019\
    \ cannot be used as a function\n   18 |     long fib4 = fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4); // Recursive case\n      |                        \
    \                                     ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\t// Your code here\n\tif (n == 1){\n\t\treturn 0;\n\
    \t}\n\tif (n == 2){\n\t\treturn 2;\n\t}\n\tif (n == 3){\n\t\treturn 0;\n\t}\n\t\
    if (n == 4){\n\t\treturn 2;\n\t}\n\treturn fib4(n-1) + fib4(n-2) + fib4(n-3) +\
    \ fib4(n-4);\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    assert(n>0 && n<20);\n    if(n==0) return 0;\n\
    \    if(n==1) return 1;\n    if(n==2) return 2;\n    if(n==3) return 1;\n    return\
    \ fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmph63338gy: /tmp/tmph63338gy.cpp:17: long int fib4(long int): Assertion\
    \ `n>0 && n<20' failed.\n"
  exit_code: -6
  status: Exception
