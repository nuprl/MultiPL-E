name: HumanEval_102_choose_num
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  // Write your code here\n  long\
    \ m = 1;\n  long ans = x;\n  if (m == 1) {\n    return ans;\n  }\n  while (y <\
    \ m) {\n    m += m;\n  }\n  long l = (m - 1) * (m - 2) / 2;\n  for (long i = y;\
    \ i < m; i = i + 2) {\n    if (l < i) {\n      ans = i;\n    }\n    l = i;\n \
    \ }\n  return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpfk86e7z2: /tmp/tmpfk86e7z2.cpp:30: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x >= y) {\n        std::swap(x,\
    \ y);\n    }\n    // Find the biggest number in the range [x, y]\n    while (x++\
    \ < y) {\n        if (x % 2 == 0) {\n            return x;\n        }\n    }\n\
    \    return -1;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp5qrsuv13: /tmp/tmp5qrsuv13.cpp:25: int main(): Assertion `candidate((33),\
    \ (12354)) == (12354)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\tassert(x > 0); assert(y > 0);\n\
    \tif (x == y) {\n\t\tif (x & 1) { // x even\n\t\t\treturn x;\n\t\t}\n\t\telse\
    \ {\n\t\t\treturn -1;\n\t\t}\n\t}\n\tlong xx = x;\n\tlong yy = y;\n\twhile (xx\
    \ < yy) {\n\t\tif (xx & 1) {\n\t\t\txx++;\n\t\t\tcontinue;\n\t\t}\n\t\tyy--;\n\
    \t\tif (yy & 1) {\n\t\t\tyy++;\n\t\t\tcontinue;\n\t\t}\n\t\txx <<= 1;\n\t\tyy\
    \ <<= 1;\n\t}\n\tif (xx == yy) {\n\t\treturn xx;\n\t}\n\treturn -1;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    while (x < y) {\n        if\
    \ (x % 2 == 0) x++;\n        else if (y % 2 == 0) y--;\n        else return -1;\n\
    \    }\n    return x;\n}\nint main() {\n    auto candidate = choose_num;\n   \
    \ assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpxgi35l9d: /tmp/tmpxgi35l9d.cpp:19: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x >= y) {\n        return\
    \ -1;\n    }\n    if (y > x) {\n        x = y;\n        y = x;\n    }\n    while\
    \ (x) {\n        if (x % 2 == 0) {\n            x += 1;\n            if (x ==\
    \ y) {\n                return x;\n            }\n        }\n        x /= 2;\n\
    \    }\n    return -1;\n}\nint main() {\n    auto candidate = choose_num;\n  \
    \  assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpt6o549ue: /tmp/tmpt6o549ue.cpp:30: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    assert(x > 0 && y > 0);\n \
    \   long ans = -1;\n    while ((x <= y) && (ans == -1)) {\n        if (x == y)\
    \ {\n            ans = x;\n        } else {\n            long mid = (x + y) /\
    \ 2;\n            if (mid % 2 == 0) {\n                y = mid;\n            }\
    \ else {\n                x = mid;\n            }\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long a = 1, b = 0, c;\n   \
    \ while(a <= x) {\n        if(a % 2 != 0) {\n            c = b;\n            b\
    \ = a;\n            a = c;\n        }\n        a++;\n    }\n    while(b <= y)\
    \ {\n        if(b % 2 != 0) {\n            c = b;\n            b = a;\n      \
    \      a = c;\n        }\n        b++;\n    }\n    if(a > b) {\n        return\
    \ a;\n    }\n    return b;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp1opelsst: /tmp/tmp1opelsst.cpp:34: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    return (x * y + x) / 2 - y\
    \ + 1;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmptqg9z0nx: /tmp/tmptqg9z0nx.cpp:14: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // your code here\n    long\
    \ ans = -1L;\n    while (x > 0 && y > 0 && x >= y) {\n        if (x % 2 == 0)\
    \ {\n            x = x / 2;\n        } else if (y % 2 == 0) {\n            y =\
    \ y / 2;\n        }\n    }\n    if (x == 0 || y == 0) {\n        ans = -1;\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n  \
    \  assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpbwuf13zi: /tmp/tmpbwuf13zi.cpp:26: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\tif (x > y)\n\t\treturn -1;\n\t\
    long ans = x;\n\twhile (ans <= y) {\n\t\tif (ans & 1)\n\t\t\tans += 2;\n\t\telse\n\
    \t\t\tans += 1;\n\t}\n\treturn ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp23p6xc5g: /tmp/tmp23p6xc5g.cpp:23: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\tint ans = (x+y) >> 1;\n\treturn\
    \ ans > x ? ans : -1L;\n}\nint main() {\n    auto candidate = choose_num;\n  \
    \  assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp2a66hk80: /tmp/tmp2a66hk80.cpp:15: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    while (x != 0) {\n        ans = y;\n        if (x % 2\
    \ == 0) {\n            if (y % 2 == 0) {\n                ans = x;\n         \
    \   } else {\n                x = x / 2;\n                y = y / 2;\n       \
    \     }\n        } else {\n            x = x / 2;\n            y = y / 2;\n  \
    \      }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp0ewmzcwe: /tmp/tmp0ewmzcwe.cpp:30: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    int m = 1;\n    long ans =\
    \ -1;\n    while (m <= y && x <= y) {\n        ans = m;\n        m *= 2;\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpk2gah9ph: /tmp/tmpk2gah9ph.cpp:20: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here.\n\
    \    int m = 0;\n    for(int i = x; i <= y; i++) {\n        m = m + ((i & 1) +\
    \ 1);\n    }\n    long ans = -1;\n    if(m % 2 != 0) {\n        ans = m;\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp4kkl7w94: /tmp/tmp4kkl7w94.cpp:23: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  assert(x > 0);\n  assert(y >\
    \ 0);\n  long xi = x;\n  long yi = y;\n  while (xi < yi) {\n    if ((xi & yi)\
    \ == 0) return xi;\n    xi = xi + 1;\n    yi = yi + 1;\n  }\n  if (xi == yi) {\n\
    \    return xi;\n  }\n  assert(xi > yi);\n  long x_ = x;\n  long y_ = y;\n  while\
    \ (x_ < y_) {\n    if ((x_ & y_) == 0) return x_;\n    x_ = x_ + 1;\n    y_ =\
    \ y_ + 1;\n  }\n  return -1;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpq12d0s8m: /tmp/tmpq12d0s8m.cpp:34: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    while (y\
    \ <= x) {\n        if (y % 2 != 0) {\n            ans = y;\n            break;\n\
    \        }\n        y *= 2;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpuucj4a1l: /tmp/tmpuucj4a1l.cpp:22: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Check if both numbers are\
    \ even numbers.\n    if (x % 2 == 0 && y % 2 == 0)\n        return max(x, y);\n\
    \    else\n        return -1;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt_uvpxa2.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmpt_uvpxa2.cpp:12:16: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   12 |         return max(x,\
    \ y);\n      |                ^~~\n      |                std::max\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n   \
    \              from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpt_uvpxa2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Initialize a boolean array\
    \ that indicates whether the number is in \n    // the given range.\n    bool*\
    \ arr = (bool*)calloc(sizeof(bool), (x-y+1) * 2);\n    if (arr == nullptr) {\n\
    \        // handle memory allocation error\n        return -1;\n    }\n\n    //\
    \ Initialize the boolean array to false and set all elements to true.\n    memset(arr,\
    \ 0, sizeof(bool) * (x-y+1) * 2);\n    \n    long temp = 0;\n    \n    // For\
    \ each element in range [x, y] except for last one, \n    // set all the elements\
    \ in range [x-y, y] to false.\n    for (int i = x; i <= y; i++) {\n        arr[x-y]\
    \ = false;\n        for (int j = x-y; j <= i; j++) {\n            arr[j] = true;\n\
    \        }\n    }\n    \n    // If first number is in range, \n    // the last\
    \ number must be in range [x-y, y].\n    if (arr[x-1]) {\n        arr[x-y] = true;\n\
    \    }\n    \n    for (int i = x-y; i > 0; i--) {\n        arr[x-i-1] = false;\n\
    \    }\n    \n    for (int i = y; i > 0; i--) {\n        arr[i-1] = false;\n \
    \   }\n    \n    // Find the maximum of elements in arr, and set the final number\
    \ \n    // to be the biggest number that is in range [x-y, y].\n    for (int i\
    \ = 0; i <= (x-y); i++) {\n        if (arr[i]) {\n            temp = i;\n    \
    \        break;\n        }\n    }\n    free(arr);\n    return temp;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpe3i8lsvo: /tmp/tmpe3i8lsvo.cpp:59: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  // Write your code here\n  bool\
    \ flag = false;\n  while (x != y) {\n    if (x % 2 == 0 && y % 2 == 0) {\n   \
    \   flag = true;\n      break;\n    }\n    if (x % 2 == 0) {\n      x = x / 2;\n\
    \    } else if (y % 2 == 0) {\n      y = y / 2;\n    } else {\n      return -1;\n\
    \    }\n  }\n  return flag ? x : -1;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp3hejtymc: /tmp/tmp3hejtymc.cpp:29: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x >= y)\n        return\
    \ -1;\n    int smaller = 0;\n    int larger = 0;\n    while(x >= y && smaller\
    \ < y)\n    {\n        smaller = y;\n        y = (x * y) / 2;\n    }\n    while(smaller\
    \ < x && x < y)\n    {\n        larger = x;\n        x = (smaller * x) / 2;\n\
    \    }\n    long ans = x - smaller + larger;\n    return ans % 2 == 0 ? (ans +\
    \ 1) : ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpcjurv0wb: /tmp/tmpcjurv0wb.cpp:29: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if(x==y)\
    \ ans = x;\n    else if(x<y && y%2==0) {\n        ans = choose_num(x+1, y-1);\n\
    \        ans = 2*x + ans;\n    }\n    else {\n        ans = choose_num(x-1, y);\n\
    \        ans = 2*x + ans;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long result;\n    while (x\
    \ % 2 == 0 && y % 2 == 0) {\n        long temp = y;\n        y = x;\n        x\
    \ = temp;\n    }\n    while (y-- > 0) {\n        if (x % 2 != 0 && y % 2 == 0)\
    \ {\n            x = x + 1;\n        }\n        else {\n            y = x + 1;\n\
    \        }\n    }\n    result = x;\n    while (result-- > 0)\n        if (x %\
    \ 2 != 0)\n            x = x - 1;\n        else\n            y = y - 1;\n    return\
    \ result;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\tassert(x > 0 && y > 0);\n\tif\
    \ (x > y)\n\t\tswap(x, y);\n\tlong ans = x;\n\tfor (long i = x + 1; i <= y; i++)\n\
    \t\tif (i % 2 == 0 && i != y)\n\t\t\tans = i;\n\treturn ans;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpihv17qmp.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmpihv17qmp.cpp:12:3: error: \u2018swap\u2019 was not declared\
    \ in this scope\n   12 |   swap(x, y);\n      |   ^~~~\n/tmp/tmpihv17qmp.cpp:12:3:\
    \ note: suggested alternatives:\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpihv17qmp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:2029:5:\
    \ note:   \u2018std::__cxx11::swap\u2019\n 2029 |     swap(match_results<_Bi_iter,\
    \ _Alloc>& __lhs,\n      |     ^~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/exception:143,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpihv17qmp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/exception_ptr.h:166:5:\
    \ note:   \u2018std::__exception_ptr::swap\u2019\n  166 |     swap(exception_ptr&\
    \ __lhs, exception_ptr& __rhs)\n      |     ^~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/nested_exception.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/exception:144,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2."
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  assert(x <= y);\n  long ans =\
    \ -1;\n  for (long i = x; i <= y; ++i) {\n    if (i % 2 == 0) ans = i;\n  }\n\
    \  return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp8gztei9z: /tmp/tmp8gztei9z.cpp:10: long int choose_num(long int, long\
    \ int): Assertion `x <= y' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  if (x >= y)\n    return -1;\n\
    \  else\n    return x;\n}\nint main() {\n    auto candidate = choose_num;\n  \
    \  assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmppytiq79s: /tmp/tmppytiq79s.cpp:17: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    assert(x != -1 && y != -1);\n\
    \    if (x <= y) {\n        long x_even = x % 2 == 0;\n        if (x_even) {\n\
    \            while (y != x && x_even) {\n                y = y / 2;\n        \
    \        x_even = x % 2 == 0;\n            }\n        }\n        else {\n    \
    \        while (y != x && !x_even) {\n                y = y / 2;\n           \
    \     x_even = x % 2 == 0;\n            }\n        }\n    }\n    else {\n    \
    \    long y_even = y % 2 == 0;\n        while (!(x_even || y_even) && x >= y)\
    \ {\n            long temp = x;\n            x = y;\n            y = temp;\n \
    \           x_even = x % 2 == 0;\n            y_even = y % 2 == 0;\n        }\n\
    \    }\n    return x;\n}\nint main() {\n    auto candidate = choose_num;\n   \
    \ assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpht4ebrjo.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmpht4ebrjo.cpp:28:18: error: \u2018x_even\u2019 was not declared\
    \ in this scope; did you mean \u2018y_even\u2019?\n   28 |         while (!(x_even\
    \ || y_even) && x >= y) {\n      |                  ^~~~~~\n      |          \
    \        y_even\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // initialize x\n    long mx\
    \ = x;\n    long mn = y;\n    \n    // If x is less than or equal to y, then it\
    \ must be even\n    if (x <= y) \n    {\n        // If x is even, then choose\
    \ y to be the biggest even number that is \n        // less than or equal to x\n\
    \        while (mx % 2 == 0 && mx < y) { mx += y; mn--; }\n    }\n    else\n \
    \   {\n        // If y is even, then choose x to be the biggest even number that\
    \ is \n        // less than or equal to y\n        while (mn % 2 == 0 && mn >\
    \ x) { mx += x; mn--; }\n    }\n    \n    // If no such number is found, then\
    \ return -1\n    if (mx % 2 == 0 && mx < y) \n        return mx;\n    else\n \
    \       return -1;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp5soqf42w: /tmp/tmp5soqf42w.cpp:36: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  if (x < y && x >= y) {\n    return\
    \ x;\n  }\n  else if (x < y && x <= y) {\n    return y;\n  }\n  else if (x > y\
    \ && x < y) {\n    return x;\n  }\n  else if (x > y && x > y) {\n    return y;\n\
    \  }\n  else {\n    return -1;\n  }\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpz_i6tzt9: /tmp/tmpz_i6tzt9.cpp:28: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\tlong z = (x + y) / 2;\n\tif (x\
    \ >= y)\n\t\treturn -1;\n\telse {\n\t\twhile (x < z && y < z)\n\t\t\tz = z * 2;\n\
    \t\twhile (y > z && x < z)\n\t\t\tz = z / 2;\n\t}\n\treturn z;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpj4yhgkv2: /tmp/tmpj4yhgkv2.cpp:23: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if(x>y) return -1;\n    long\
    \ temp=x;\n    while(y>=temp){\n        if(y%temp==0){\n            return temp;\n\
    \        }\n        temp+=temp;\n    }\n    return -1;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpnklceoy9: /tmp/tmpnklceoy9.cpp:22: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    while(x > y) {\n        if(x\
    \ % 2 == 0 && y % 2 != 0) {\n            return x;\n        }\n        y /= 2;\n\
    \    }\n    if(x % 2 != 0 && y % 2 == 0) {\n        return y;\n    }\n    return\
    \ -1;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpeeq4bhll: /tmp/tmpeeq4bhll.cpp:23: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    int l = (x - y) % 2;\n    if\
    \ (l >= 0)\n        return x + y;\n    return x - y;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpii_qg57j: /tmp/tmpii_qg57j.cpp:17: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // write your code here\n \
    \   int i, j, m, r, s;\n    long mid = (x + y) / 2;\n    long mx, my;\n\n    mx\
    \ = x;\n    my = y;\n    i = 0;\n    while (x < mid)\n    {\n        r = x + my;\n\
    \        if (r > mid)\n            r = (r - my);\n        if (r % 2 == 0)\n  \
    \      {\n            x = r;\n            i++;\n        }\n        m = (int)r;\n\
    \        j = m + 1;\n        for ( ; j < mx; j += 2)\n        {\n            if\
    \ (j % 2 != 0)\n            {\n                y = j;\n                break;\n\
    \            }\n        }\n    }\n    if (mx != my)\n    {\n        r = x;\n \
    \       while (r < mx)\n        {\n            r = r + my;\n            if (r\
    \ > mx)\n                r =(r - my);\n            s = (long) r;\n           \
    \ if (s % 2 == 0)\n            {\n                i++;\n                break;\n\
    \            }\n        }\n    }\n    if (i == 0)\n    {\n        return -1;\n\
    \    }\n    return i;\n}\nint main() {\n    auto candidate = choose_num;\n   \
    \ assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if(x > y && x == y) \n    \
    \   return y;\n    if(x > y) \n       return choose_num(y, x);\n    return -1;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpbi7t01an: /tmp/tmpbi7t01an.cpp:18: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  assert(x >= 0 && x < y && y >\
    \ 0);\n  long p = x;\n  long q = y;\n  long r = x;\n  while (p < q) {\n    //\
    \ the number at p is even\n    if (p % 2 == 0) {\n      if (p > q) {\n       \
    \ // the number at q is even\n        return -1;\n      }\n      // now the number\
    \ at p and q are even and the number at p is in the range [x, q]\n      r = q;\n\
    \    } else {\n      if (q % 2 == 0) {\n        // the number at q is even\n \
    \       return -1;\n      }\n      // now the number at p and q are even and the\
    \ number at q is in the range [y, y]\n      q = r;\n    }\n    // move p or q\
    \ one step to the right\n    p = p + 1;\n    q = q - 1;\n  }\n  // now the number\
    \ at p is even and at q is odd\n  if (q % 2 == 1) {\n    return -1;\n  }\n  return\
    \ p;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp_f2dn8tj: /tmp/tmp_f2dn8tj.cpp:43: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  assert(x != -1);\n  assert(y\
    \ != -1);\n  long ans = -1;\n  long div = y;\n  long mod = x;\n  long p = x;\n\
    \  while (p != 0) {\n    if (p % 2 != 0) {\n      if (ans == -1 || (p * div +\
    \ mod) <= ans) {\n        ans = (p * div + mod);\n      }\n    }\n    mod = p\
    \ / 2;\n    div = p / 2;\n    p = div;\n  }\n  return ans;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp92bste3n: /tmp/tmp92bste3n.cpp:30: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   assert(x >= 0 && y >= 0);\n    long z = x + y;\n    if (z > x)\n        return\
    \ -1;\n    long a = x;\n    while (a < z) {\n        a += y;\n        if (a >\
    \ z) {\n            z = a;\n        }\n    }\n    return z;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp_mi9qzs5: /tmp/tmp_mi9qzs5.cpp:26: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x > y) return x;\n    else\
    \ return y;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpkv85q55b: /tmp/tmpkv85q55b.cpp:15: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if(x <= y) {\n        return\
    \ x;\n    }\n    return y;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpjbogq0y2: /tmp/tmpjbogq0y2.cpp:17: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\tlong max_number = x;\n\tlong\
    \ min_number = y;\n\n\twhile (max_number >= min_number) {\n\t\tmax_number = max_number\
    \ * 2 + 1;\n\t\tif (max_number > x)\n\t\t\tmax_number = x;\n\t\tif (max_number\
    \ < y)\n\t\t\tmax_number = y;\n\t}\n\tif (max_number == min_number)\n\t\treturn\
    \ -1;\n\treturn max_number;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmptnvuntk5: /tmp/tmptnvuntk5.cpp:26: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  if (x <= y) \n    return -1L;\n\
    \  long res = 0;\n  long limit = x+y;\n  if (limit > 2L*10L*10L) {\n    return\
    \ -1L;\n  }\n  for (long i = x; i <= limit; ++i) {\n    if (i % 2 == 0) {\n  \
    \    res = i;\n    }\n  }\n  return res;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpgsh50jk3: /tmp/tmpgsh50jk3.cpp:26: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    while (x <= y) {\n        if\
    \ (x % 2 == 0 && y % 2 == 0) {\n            return x;\n        }\n        else\
    \ if (x % 2 == 0 && y % 2 != 0) {\n            y = y + 1;\n        }\n       \
    \ else {\n            x = x + 1;\n        }\n    }\n    return -1;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpyrrnr5cy: /tmp/tmpyrrnr5cy.cpp:25: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1; // start with\
    \ the highest number\n    while (y>0) {\n        if (y&1) ans++;\n        y >>=\
    \ 1;\n    }\n    while (x>0) {\n        if (x&1) ans--;\n        x >>= 1;\n  \
    \  }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n   \
    \ assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpgapccgqa: /tmp/tmpgapccgqa.cpp:23: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    assert(x >= 0);\n    assert(x\
    \ <= y);\n    long max_even = -1;\n    long max_odd = x;\n    // Find x with its\
    \ even and odd numbers and calculate its maximum\n    while (max_odd % 2 == 0)\
    \ {\n        max_even += max_odd / 2;\n        max_odd -= max_odd / 2;\n    }\n\
    \    // Find the largest odd number that is in the range [x, y]\n    while (max_odd\
    \ % 2 == 1) {\n        max_odd -= 1;\n    }\n    // Return the maximum of the\
    \ even and odd numbers that we found\n    return max_even;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpjjt9muwz: /tmp/tmpjjt9muwz.cpp:28: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // write your code here\n \
    \   long max_num = x;\n    while (max_num < y) {\n        if (max_num % 2 == 0\
    \ && max_num != 2)\n            max_num = max_num * 3 + 1;\n        else if (max_num\
    \ % 2 == 1)\n            max_num = max_num * 3;\n        else\n            break;\n\
    \    }\n    return max_num;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp9zvgsewu: /tmp/tmp9zvgsewu.cpp:24: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = 0;\n    while (\
    \ x > y) {\n        if(x%2==0 && y%2==0)\n            ans+=2;\n        x/=2;\n\
    \        y/=2;\n    }\n    if(x%2==0 && y%2==0)\n        ans+=1;\n    while(x\
    \ > y) {\n        if(x%2==1)\n            ans++;\n        x/=2;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpz3qj4eyu: /tmp/tmpz3qj4eyu.cpp:28: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  long ans = -1;\n  if (x < y)\
    \ {\n    ans = (y - x + 1) >> 1;\n  } else {\n    ans = (x - y + 1) >> 1;\n  }\n\
    \  return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpuq1n61jv: /tmp/tmpuq1n61jv.cpp:20: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if(x > y) {\n        return\
    \ choose_num(y, x);\n    }\n    \n    // This loop will iterate through all even\
    \ numbers up to the\n    // maximum possible integer value that the function can\
    \ handle.\n    for(long i = 2; i <= x / 2; i++) {\n        if(x % i == 0 && y\
    \ % i == 0) {\n            return i;\n        }\n    }\n    return -1; // If no\
    \ even number was found, then the function should return -1.\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpfac4bwsy: /tmp/tmpfac4bwsy.cpp:25: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  long n = y;\n  while(x > n) {\n\
    \    x = x - n;\n    ++n;\n  }\n  while(x < n) {\n    y = y - n;\n    ++n;\n \
    \ }\n  return x;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  long min = std::min(x, y);\n\
    \  long max = std::max(x, y);\n  long res = min - max;\n  if (res == 0) return\
    \ min;\n  if (res == 1) return max;\n  return -1;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpitl7a1w6: /tmp/tmpitl7a1w6.cpp:19: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    int i = x;\n    long xdigits\
    \ = 0;\n    while (i >= 10) {\n        i *= 10;\n        xdigits += 1;\n    }\n\
    \    i = y;\n    long ydigits = 0;\n    while (i >= 10) {\n        i *= 10;\n\
    \        ydigits += 1;\n    }\n    long maxdigits = xdigits + ydigits;\n    if\
    \ (maxdigits > 9) {\n        maxdigits = 9;\n    }\n    if (maxdigits == 0) {\n\
    \        return -1;\n    }\n    long ret = 0;\n    for (long k = 1; k <= maxdigits;\
    \ k++) {\n        ret = ret * 10 + i / k;\n        i = i % k;\n        if (i ==\
    \ 0) {\n            break;\n        }\n    }\n    return ret;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp6mr7qy_4: /tmp/tmp6mr7qy_4.cpp:41: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  // Your code goes here\n  long\
    \ ans = 1;\n  long r = x;\n  while(x <= y && r <= y) {\n    while(r <= y && x\
    \ % r == 0) {\n      x = x + 1;\n      r = r + 1;\n    }\n    while(r < y && y\
    \ % r == 0) {\n      y = y + 1;\n      r = r + 1;\n    }\n    if(x <= y) {\n \
    \     ans = max(ans, x);\n      x = x + 1;\n    }\n    if(y <= r) {\n      ans\
    \ = max(ans, y);\n      y = y + 1;\n    }\n  }\n  if(ans == 1)\n    return -1;\n\
    \  return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm60df7vb.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmpm60df7vb.cpp:23:13: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   23 |       ans = max(ans,\
    \ x);\n      |             ^~~\n      |             std::max\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n   \
    \              from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpm60df7vb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n/tmp/tmpm60df7vb.cpp:27:13: error: \u2018\
    max\u2019 was not declared in this scope; did you mean \u2018std::max\u2019?\n\
    \   27 |       ans = max(ans, y);\n      |             ^~~\n      |          \
    \   std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpm60df7vb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  // Code goes here\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpbbhahup7: /tmp/tmpbbhahup7.cpp:14: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x > y || y == 0)\n    \
    \    return -1;\n    long res = x * y; //xy = x*y\n    long remain = y - x;\n\
    \    while (x > y)\n    {\n        if (x%2 == 0) {\n            x /= 2;\n    \
    \        res *= 2;\n        }\n        else {\n            res /= 2;\n       \
    \ }\n        if (remain > 0)\n        {\n            res += (remain%2 == 0) ?\
    \ x : -x;\n            remain /= 2;\n        }\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpdr5hhew2: /tmp/tmpdr5hhew2.cpp:33: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  assert(x >= 0 && y >= 0);\n \
    \ long largest = y;\n  long counter = 0;\n  while (largest != x && largest % 2\
    \ == 0) {\n    largest = largest / 2;\n    counter++;\n  }\n  if (largest == x)\
    \ largest = -1;\n  return largest;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp1rzqq8no: /tmp/tmp1rzqq8no.cpp:22: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\tassert(x > 0 && y > 0 && x <\
    \ y);\n\tlong min = x;\n\tlong max = y;\n\twhile (max < min) {\n\t\tlong mid =\
    \ (min + max) / 2;\n\t\tif (mid % 2 == 0) max = mid;\n\t\telse min = mid;\n\t\
    }\n\treturn max;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp3gwbsjdx: /tmp/tmp3gwbsjdx.cpp:22: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  long long ans = x;\n  while (ans\
    \ < y) {\n    ans += y;\n  }\n  ans %= x;\n  if (ans > x) {\n    ans -= x;\n \
    \ }\n  return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmps0fejs6n: /tmp/tmps0fejs6n.cpp:22: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long min_num = (x < y) ? x\
    \ : y;\n    long max_num = (x < y) ? y : x;\n    long mid;\n    \n    while ((mid\
    \ =  min_num + max_num/2) > 0) {\n        if (mid % 2 == 0)\n            return\
    \ mid;\n        else if (mid < min_num)\n            max_num = mid-1;\n      \
    \  else\n            min_num = mid+1;\n    }\n    \n    return -1;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here.\n\
    \    long result = -1;\n    if (x >= y) {\n        while (x <= y) {\n        \
    \    if (x % 2 == 0) \n                result = x;\n            else\n       \
    \         y = y - 1;\n            x = x + 1;\n        }\n    } else {\n      \
    \  while (y >= x) {\n            if (y % 2 == 0) \n                result = y;\n\
    \            else\n                x = x - 1;\n            y = y - 1;\n      \
    \  }\n    }\n    return result;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpaw644aod: /tmp/tmpaw644aod.cpp:33: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  assert(x >= 0);\n  assert(x <=\
    \ y);\n  long ans = 0;\n  while (x != 0) {\n    ans = (ans * 10 + x%10);\n   \
    \ x /= 10;\n  }\n  if (y == ans)\n    return -1;\n  while (y != 0) {\n    ans\
    \ = (ans * 10 + y%10);\n    y /= 10;\n  }\n  return ans;\n}\nint main() {\n  \
    \  auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp5glh5ckt: /tmp/tmp5glh5ckt.cpp:27: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x > y || x == 0)\n    \
    \    return -1;\n\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0)\n      \
    \  return mid;\n    if (mid < x)\n        return choose_num(y, mid);\n    return\
    \ choose_num(mid, y);\n}\nint main() {\n    auto candidate = choose_num;\n   \
    \ assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpcc6f7q66: /tmp/tmpcc6f7q66.cpp:24: int main(): Assertion `candidate((33),\
    \ (12354)) == (12354)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    int result = 0;\n    while\
    \ (x > 0) {\n        if (x % 2 == 0) result += x;\n        x = x / 2;\n    }\n\
    \    while (y > 0) {\n        if (y % 2 == 0) result += y;\n        y = y / 2;\n\
    \    }\n    if (result <= y) return result;\n    return -1;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp9czoxbk5: /tmp/tmp9czoxbk5.cpp:24: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n     assert(x > 0 && y > 0);\n\
    \     long mid = (x + y) / 2;\n     return mid * mid > x && mid * mid < y ? mid\
    \ : -1;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpu4ok6rab: /tmp/tmpu4ok6rab.cpp:16: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\tlong result = -1;\n\twhile (result\
    \ < x && result < y) result += 2;\n\treturn result < x ? x : result;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp5mscxwtu: /tmp/tmp5mscxwtu.cpp:16: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    assert(x >= y);\n    // write\
    \ your code here\n    // return -1;\n    long max_num = x;\n    long min_num =\
    \ y;\n    while (true) {\n        long mid_num = (max_num + min_num) / 2;\n  \
    \      if (mid_num % 2 == 0) {\n            max_num = mid_num;\n        } else\
    \ {\n            min_num = mid_num;\n        }\n        if (max_num == min_num)\
    \ {\n            break;\n        }\n    }\n    return max_num;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpfwtvlc04: /tmp/tmpfwtvlc04.cpp:10: long int choose_num(long int, long\
    \ int): Assertion `x >= y' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long min = x;\n    long max\
    \ = y;\n    while (min <= max) {\n        if (min + 2 == max) {\n            return\
    \ min;\n        }\n        min = min + 2;\n        max = max - 2;\n    }\n   \
    \ return -1;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp_y91ajxr: /tmp/tmp_y91ajxr.cpp:23: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // your code goes here\n  \
    \  for (long i = x; i <= y; i++) {\n        if (i % 2 != 0) {\n            return\
    \ i;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate =\
    \ choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp43rk_59t: /tmp/tmp43rk_59t.cpp:20: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x % 2 == 0) return (x /\
    \ 2);\n    else return (y / 2);\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp3neshzc7: /tmp/tmp3neshzc7.cpp:15: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\t// Base case: if the numbers\
    \ are equal, then return x.\n\tif (x == y) return x;\n\n\t// Recursive case: choose\
    \ the larger number between the two\n\t// and return the result if that's not\
    \ evenly divisible by 2.\n\tlong m = ((x % 2 == 0 && y % 2 == 0) ? x : y);\n\t\
    return ((m % 2 == 0) && (m != x)) ? m : -1;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp32kcssac: /tmp/tmp32kcssac.cpp:20: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    assert (x >= y);\n    if (x\
    \ < y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n \
    \   // now x<= y\n    if (x % 2 == 0)\n        return x;\n    else {\n       \
    \ long mid = (x + y) / 2;\n        if (mid % 2 == 0)\n            return mid;\n\
    \        else\n            return choose_num(mid, y);\n    }\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpob6z8164: /tmp/tmpob6z8164.cpp:10: long int choose_num(long int, long\
    \ int): Assertion `x >= y' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\tif (x < y && x > 0)\n\t\treturn\
    \ max(x, y);\n\tif (x > y && x > 0)\n\t\treturn min(y, x);\n\tassert(x == y);\n\
    \treturn -1;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr9amz8y5.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmpr9amz8y5.cpp:11:10: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   11 |   return max(x, y);\n\
    \      |          ^~~\n      |          std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpr9amz8y5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n/tmp/tmpr9amz8y5.cpp:13:10: error: \u2018\
    min\u2019 was not declared in this scope; did you mean \u2018std::min\u2019?\n\
    \   13 |   return min(y, x);\n      |          ^~~\n      |          std::min\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpr9amz8y5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3450:5:\
    \ note: \u2018std::min\u2019 declared here\n 3450 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if(x ==\
    \ 0)\n        x = 1;\n    if(y == 0)\n        y = 1;\n    while(x<y) {\n     \
    \   long c = x;\n        x = y;\n        y = c;\n    }\n    while(y>0) {\n   \
    \     if(y%2 == 0) {\n            ans = y;\n            break;\n        } else\
    \ {\n            y = y/2;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpthumo8x2: /tmp/tmpthumo8x2.cpp:32: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // your code goes here\n  \
    \  return -1;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpzuf9a3w1: /tmp/tmpzuf9a3w1.cpp:15: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   return -1;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpz2ticmq3: /tmp/tmpz2ticmq3.cpp:15: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\tlong left_bound = min(x, y);\n\
    \tlong right_bound = max(x, y);\n\t// if x & y is even, then return 0\n\tif((x\
    \ & y) == 0) {\n\t\treturn -1;\n\t}\n\t// if x is smaller than y, then return\
    \ -1\n\tif(x < y) {\n\t\treturn -1;\n\t}\n\tlong max_num = max(left_bound, right_bound);\n\
    \t// loop through all even numbers in [min, max]\n\t// if the number is even,\
    \ then return it\n\tfor(long i = left_bound; i <= right_bound; i++) {\n\t\tif((i\
    \ & 1) == 0) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}\nint main() {\n \
    \   auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp35q845yh.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmp35q845yh.cpp:10:20: error: \u2018min\u2019 was not declared\
    \ in this scope; did you mean \u2018std::min\u2019?\n   10 |  long left_bound\
    \ = min(x, y);\n      |                    ^~~\n      |                    std::min\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp35q845yh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3450:5:\
    \ note: \u2018std::min\u2019 declared here\n 3450 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n/tmp/tmp35q845yh.cpp:11:21: error: \u2018\
    max\u2019 was not declared in this scope; did you mean \u2018std::max\u2019?\n\
    \   11 |  long right_bound = max(x, y);\n      |                     ^~~\n   \
    \   |                     std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp35q845yh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x == y || x > y)\n    \
    \    return -1;\n    if (x > 0 && x <= y) {\n        long even = 1;\n        long\
    \ odd = 0;\n        while (even < y) {\n            even += x;\n            odd\
    \ *= x;\n        }\n        while (odd > y) {\n            even -= y;\n      \
    \      odd *= y;\n        }\n        return even;\n    }\n    return -1;\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpaa_rxs8s: /tmp/tmpaa_rxs8s.cpp:29: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    assert(x >0 && y > 0 );\n \
    \   if (x < y) {\n        long t = x;\n        x = y;\n        y = t;\n    }\n\
    \    long l1 = y / 2;\n    long l2 = x / 2;\n    long l3 = l1 + l2;\n    if (l3\
    \ <= x) {\n        if (l3 == x)\n            return x;\n        else if (l3 ==\
    \ y)\n            return y;\n        else if (l3 > x)\n            return -1;\n\
    \    }\n    if (l3 < x)\n        return -1;\n    if (l2 < y)\n        return -1;\n\
    \    return l3;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpux9ygj54: /tmp/tmpux9ygj54.cpp:35: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long max_num = -1;\n    long low = x;\n    long high = y;\n    while (low\
    \ <= high) {\n        long mid = (low+high)/2;\n        long num = mid*(mid %\
    \ 2 == 0 ? 1 : -1);\n        if (num > max_num) {\n            max_num = num;\n\
    \        }\n        high = mid;\n        low = mid+1;\n    }\n    return max_num;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp5dtcoxrk: /tmp/tmp5dtcoxrk.cpp:27: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  assert(x > 0 && y > 0);\n  int\
    \ x_even = x % 2;\n  int y_even = y % 2;\n  if ((x_even == y_even) && (x_even\
    \ != 0)) {\n    return -1;\n  }\n  return x_even > y_even ? x : y;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpu7vqvyuj: /tmp/tmpu7vqvyuj.cpp:20: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    int n = sizeof(long int) *\
    \ 8;\n    long long res = 0;\n    for(int i = 0; i< n; i++){\n        res += x\
    \ >> i;\n        res += y >> i;\n    }\n    while(res%2==0){\n        res++;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = choose_num;\n \
    \   assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpxmvh1vk1: /tmp/tmpxmvh1vk1.cpp:23: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Your code here\n    assert(x\
    \ >= 0 && y >= 0);\n    int result = 0;\n    if (x < y) {\n        if (y == 0)\
    \ return -1;\n        for (int i = x; i <= y; ++i)\n            if (i % 2 == 0)\n\
    \                result += i;\n    } else {\n        if (x == 0) return -1;\n\
    \        for (int i = y; i <= x; ++i)\n            if (i % 2 == 0)\n         \
    \       result += i;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpwtr_2ngx: /tmp/tmpwtr_2ngx.cpp:28: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    assert(x > 0 && y > 0);\n \
    \   int x_even = x % 2;\n    int y_even = y % 2;\n    if (x_even == y_even) return\
    \ x_even;\n    else return -1;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpc8dw5lzu: /tmp/tmpc8dw5lzu.cpp:18: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    assert(x >= 0 && y >= 0);\n\
    \    // Create a stack that will contain the even numbers from [x, y]\n    vector<long>\
    \ arr;\n    for (long i = x; i <= y; i++) {\n        if (i % 2 == 0) {\n     \
    \       arr.push_back(i);\n        }\n    }\n    // The stack is initialized with\
    \ all even numbers between x and y\n    // The biggest even number will be at\
    \ the top of the stack\n    // We traverse the stack until we find a number which\
    \ is greater \n    // than x\n    long top = arr.size() - 1;\n    long result\
    \ = -1;\n    while (top >= 0) {\n        if (arr[top] > x) {\n            break;\n\
    \        }\n        top = top - 1;\n    }\n    if (arr[top] >= x) {\n        //\
    \ We need to add one to top\n        top++;\n    }\n    if (arr[top] > y) {\n\
    \        // We need to add one to top\n        top++;\n    }\n    if (arr[top]\
    \ > y) {\n        // We need to add one to top\n        top++;\n    }\n    if\
    \ (arr[top] > y) {\n        // We need to add one to top\n        top++;\n   \
    \ }\n    if (arr[top] > y) {\n        // We need to add one to top\n        top++;\n\
    \    }\n    if (arr[top] > y) {\n        // We need to add one to top\n      \
    \  top++;\n    }\n    if (arr[top] > y) {\n        // We need to add one to top\n\
    \        top++;\n    }\n    if (arr[top] > y) {\n        // We need to add one\
    \ to top\n        top++;\n    }\n    if (arr[top] > y) {\n        // We need to\
    \ add one to top\n        top++;\n    }\n    if (arr[top] > y) {\n        // We\
    \ need to add one to top\n        top++;\n    }\n    if (arr[top] > y) {\n   \
    \     // We need to add one to top\n        top++;\n    }\n    if (arr[top] >\
    \ y) {\n        // We need to add one to top\n        top++;\n    }\n    if (arr[top]\
    \ > y) {\n        // We need to add one to top\n        top++;\n    }\n    if\
    \ (arr[top] > y) {\n        // We need to add one to top\n        top++;\n   \
    \ }\n    if (arr[top] > y) {\n        // We need to add one to top\n        top++;\n\
    \    }\n    if (arr[top] > y) {\n        // We need to add one to top\n      \
    \  top++;\n    }\n    if (arr[top] > y) {\n        // We need to add one to top\n\
    \        top++;\n    }\n    if (arr[top] > y) {\n        // We need to add one\
    \ to top\n        top++;\n    }\n    if (arr[top] > y) {\n        // We need to\
    \ add one to top\n        top++;\n    }\n    if (arr[top] > \n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5ecgkfd8.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmp5ecgkfd8.cpp:12:5: error: \u2018vector\u2019 was not declared\
    \ in this scope; did you mean \u2018std::vector\u2019?\n   12 |     vector<long>\
    \ arr;\n      |     ^~~~~~\n      |     std::vector\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp5ecgkfd8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:386:11:\
    \ note: \u2018std::vector\u2019 declared here\n  386 |     class vector : protected\
    \ _Vector_base<_Tp, _Alloc>\n      |           ^~~~~~\n/tmp/tmp5ecgkfd8.cpp:12:12:\
    \ error: expected primary-expression before \u2018long\u2019\n   12 |     vector<long>\
    \ arr;\n      |            ^~~~\n/tmp/tmp5ecgkfd8.cpp:15:13: error: \u2018arr\u2019\
    \ was not declared in this scope\n   15 |             arr.push_back(i);\n    \
    \  |             ^~~\n/tmp/tmp5ecgkfd8.cpp:22:16: error: \u2018arr\u2019 was not\
    \ declared in this scope\n   22 |     long top = arr.size() - 1;\n      |    \
    \            ^~~\n/tmp/tmp5ecgkfd8.cpp:107:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n  107 | }\n      | ^\n/tmp/tmp5ecgkfd8.cpp:106:19:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n  106 |     if (arr[top]\
    \ >\n      |        ~          ^\n      |                   )\n  107 | }\n   \
    \   | ~                  \n/tmp/tmp5ecgkfd8.cpp:107:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n  107 | }\n      | ^\n/tmp/tmp5ecgkfd8.cpp:107:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n  107 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  // your code goes here\n  long\
    \ ans = -1;\n  if (x >= y) {\n    long mid = x + (y - x) / 2;\n    if (mid % 2\
    \ == 0) {\n      ans = mid;\n    }\n  }\n  return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpa319pa9v: /tmp/tmpa319pa9v.cpp:22: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    assert(x != -1);\n    assert(y\
    \ != -1);\n    long ans = -1;\n    long i = (x + y - 1) / 2;\n    if (i == x)\
    \ {\n        ans = y;\n    } else if (i == y) {\n        ans = x;\n    } else\
    \ {\n        while (i != 0) {\n            if (i % 2 == 0) {\n               \
    \ ans = i;\n                break;\n            }\n            i /= 2;\n     \
    \   }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpekcft_im: /tmp/tmpekcft_im.cpp:31: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    while(x < y) { \n        //\
    \ Check if x is even \n        if (x % 2 == 0) { \n            // If x is even,\
    \ check if y is\n            if (y % 2 == 0) { \n                // If both x\
    \ and y are even, \n                // find out which is greater than y \n   \
    \             return x > y ? x : y; \n            } else { \n                //\
    \ If y is even, \n                // find out which is greater than x \n     \
    \           return x > y ? y : x; \n            } \n        } else { \n      \
    \      // If x is odd, check if y is odd \n            if (y % 2 == 1) { \n  \
    \              // If both x and y are odd, \n                // find out which\
    \ is greater than y \n                return x > y ? x : y; \n            } else\
    \ { \n                // If y is odd, \n                // find out which is greater\
    \ than x \n                return x > y ? y : x; \n            } \n        } \n\
    \    } \n    return -1; \n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpn5v13ezp: /tmp/tmpn5v13ezp.cpp:40: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  if(x < 0 || x > y)\n    return\
    \ -1;\n  else if(y == x)\n    return x;\n  else {\n    long res = 2;\n    while(y\
    \ % res != 0) {\n      if(res % 2 == 0)\n        res = res / 2;\n      else\n\
    \        res = res * 3;\n    }\n    if(res == 2)\n      return x;\n    else if(res\
    \ == 3)\n      return y;\n    else\n      return -1;\n  }\n}\nint main() {\n \
    \   auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpub1viman: /tmp/tmpub1viman.cpp:32: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // write your code in C++11\n\
    \    auto cmp = [&](long l, long r) -> bool {\n        return (r - l) > 0;\n \
    \   };\n\n    auto f = [&](long l, long r) -> bool {\n        return (r > x) &&\
    \ (l < y) || (r < x) && (l > y);\n    };\n\n    auto lower = [x=x](long l) ->\
    \ bool {\n        return !cmp(x, l);\n    };\n    auto upper = [y=y](long r) ->\
    \ bool {\n        return !cmp(y, r);\n    };\n\n    while (f(x, y)) {\n      \
    \  x -= y;\n        y -= x;\n        if (y > x) {\n            x = y;\n      \
    \  }\n    }\n\n    return y;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp20nsjeuk.cpp: In lambda function:\n/tmp/tmp20nsjeuk.cpp:20:17:\
    \ error: \u2018cmp\u2019 is not captured\n   20 |         return !cmp(x, l);\n\
    \      |                 ^~~\n/tmp/tmp20nsjeuk.cpp:19:22: note: the lambda has\
    \ no capture-default\n   19 |     auto lower = [x=x](long l) -> bool {\n     \
    \ |                      ^\n/tmp/tmp20nsjeuk.cpp:11:10: note: \u2018choose_num(long\
    \ int, long int)::<lambda(long int, long int)> cmp\u2019 declared here\n   11\
    \ |     auto cmp = [&](long l, long r) -> bool {\n      |          ^~~\n/tmp/tmp20nsjeuk.cpp:\
    \ In lambda function:\n/tmp/tmp20nsjeuk.cpp:23:17: error: \u2018cmp\u2019 is not\
    \ captured\n   23 |         return !cmp(y, r);\n      |                 ^~~\n\
    /tmp/tmp20nsjeuk.cpp:22:22: note: the lambda has no capture-default\n   22 | \
    \    auto upper = [y=y](long r) -> bool {\n      |                      ^\n/tmp/tmp20nsjeuk.cpp:11:10:\
    \ note: \u2018choose_num(long int, long int)::<lambda(long int, long int)> cmp\u2019\
    \ declared here\n   11 |     auto cmp = [&](long l, long r) -> bool {\n      |\
    \          ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long a = (x + y) / 2;\n   \
    \ while ((a % 2 == 0) && (a > 0)) {\n        a = a / 2;\n    }\n    return a >\
    \ x ? x : -1;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpgqtrxmqq: /tmp/tmpgqtrxmqq.cpp:18: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\tif(x>=y) {\n\t\tx=y;\n\t}\n\t\
    long ans=-1;\n\twhile(true) {\n\t\tans=x+y;\n\t\tif(ans>=y) {\n\t\t\tx=ans-y;\n\
    \t\t}\n\t\tif(ans>=x) {\n\t\t\tbreak;\n\t\t}\n\t\ty=ans-x;\n\t}\n\treturn ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpbup2xha5: /tmp/tmpbup2xha5.cpp:28: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x > y) {\n        long\
    \ temp = x;\n        x = y;\n        y = temp;\n    }\n    long max_num = x;\n\
    \    long min_num = y;\n    while (min_num + 1 < max_num) {\n        long mid\
    \ = (max_num + min_num) / 2;\n        if (mid % 2 == 0) {\n            max_num\
    \ = mid;\n        } else {\n            min_num = mid;\n        }\n    }\n   \
    \ return max_num;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpyh6or7g6: /tmp/tmpyh6or7g6.cpp:29: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  long result = (x / y) * y;\n\
    \  if(result <= x) {\n    return -1;\n  } else {\n    return result;\n  }\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpqji1ezvu: /tmp/tmpqji1ezvu.cpp:19: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    assert(x > 0 && y > 0);\n \
    \   long res = -1;\n    if (x <= y) {\n        while (x < y) {\n            x++;\n\
    \            if (x > y) {\n                return -1;\n            }\n       \
    \ }\n        res = x;\n    }\n    else {\n        while (x > y) {\n          \
    \  y--;\n            if (x < y) {\n                return -1;\n            }\n\
    \        }\n        res = y;\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpjer1dv9b: /tmp/tmpjer1dv9b.cpp:34: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    assert(x < y);\n    long ans\
    \ = x;\n    while (ans < y) {\n        if (ans % 2 == 0) {\n            ans =\
    \ ans + 1;\n        } else {\n            ans = ans + 2;\n        }\n    }\n \
    \   return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpokgtuhwl: /tmp/tmpokgtuhwl.cpp:23: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x <= y) {\n        long\
    \ z = x;\n        z = z - y;\n        while (z & 1) { z = z / 2; }\n        return\
    \ z + 1;\n    }\n    else {\n        long z = y;\n        z = x - z;\n       \
    \ while (z & 1) { z = z / 2; }\n        return z + 1;\n    }\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp8bkjo3ex: /tmp/tmp8bkjo3ex.cpp:25: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    assert(x >= 0);\n    assert(y\
    \ >= 0);\n    long min = y;\n    long max = x;\n    \n    // If x is smaller than\
    \ y then swap them.\n    if (x < y) {\n        swap(x, y);\n    }\n    \n    long\
    \ mid = x + (y - x) / 2;\n    \n    long result = min;\n    // Check if the middle\
    \ number is even.\n    while (min <= max) {\n        long mid1 = mid + (max -\
    \ min) / 2;\n        long mid2 = mid + (min - max) / 2;\n        if (mid1 % 2\
    \ == 0 && mid2 % 2 == 0) {\n            result = mid1;\n            min = mid1\
    \ + 1;\n            break;\n        } else if (mid1 % 2 == 1 && mid2 % 2 == 1)\
    \ {\n            result = mid2;\n            max = mid2 - 1;\n            break;\n\
    \        } else {\n            mid = mid1;\n            max = mid2;\n        }\n\
    \    }\n    \n    if (result <= min) {\n        return result;\n    } else {\n\
    \        return -1;\n    }\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkaew1qz0.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmpkaew1qz0.cpp:17:9: error: \u2018swap\u2019 was not declared\
    \ in this scope\n   17 |         swap(x, y);\n      |         ^~~~\n/tmp/tmpkaew1qz0.cpp:17:9:\
    \ note: suggested alternatives:\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpkaew1qz0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:2029:5:\
    \ note:   \u2018std::__cxx11::swap\u2019\n 2029 |     swap(match_results<_Bi_iter,\
    \ _Alloc>& __lhs,\n      |     ^~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/exception:143,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpkaew1qz0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/exception_ptr.h:166:5:\
    \ note:   \u2018std::__exception_ptr::swap\u2019\n  166 |     swap(exception_ptr&\
    \ __lhs, exception_ptr& __rhs)\n      |     ^~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/nested_exception.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/exception:144,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/incl"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\tif (x < 0 || y < 0) {\n\t\treturn\
    \ -1;\n\t} else if (x == y || y == 0) {\n\t\treturn x;\n\t} else if (x >= y) {\n\
    \t\treturn -1;\n\t} else {\n\t\tlong mid = (x + y) / 2;\n\t\tif (mid % 2 == 0)\
    \ {\n\t\t\treturn choose_num(mid, y);\n\t\t} else {\n\t\t\treturn choose_num(x,\
    \ mid);\n\t\t}\n\t}\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\tif (x > y) {\n\t\tswap(x, y);\n\
    \t}\n\tlong ans = -1;\n\tfor (long i = 0; i < y; i++) {\n\t\tlong mid = (x + i)\
    \ / 2;\n\t\tif (mid > y) {\n\t\t\tbreak;\n\t\t}\n\t\tif (mid <= y && mid % 2 ==\
    \ 0) {\n\t\t\tans = mid;\n\t\t}\n\t}\n\treturn ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpryo8rfg5.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmpryo8rfg5.cpp:11:3: error: \u2018swap\u2019 was not declared\
    \ in this scope\n   11 |   swap(x, y);\n      |   ^~~~\n/tmp/tmpryo8rfg5.cpp:11:3:\
    \ note: suggested alternatives:\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpryo8rfg5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:2029:5:\
    \ note:   \u2018std::__cxx11::swap\u2019\n 2029 |     swap(match_results<_Bi_iter,\
    \ _Alloc>& __lhs,\n      |     ^~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/exception:143,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpryo8rfg5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/exception_ptr.h:166:5:\
    \ note:   \u2018std::__exception_ptr::swap\u2019\n  166 |     swap(exception_ptr&\
    \ __lhs, exception_ptr& __rhs)\n      |     ^~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/nested_exception.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/exception:144,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2."
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long largest = -1;\n    long\
    \ temp = 0;\n\n    while (x <= y) {\n        if (x % 2 == 0) {\n            temp\
    \ += x;\n            x /= 2;\n        } else {\n            temp += y;\n     \
    \       y /= 2;\n        }\n\n        if (temp > largest) {\n            largest\
    \ = temp;\n        }\n    }\n\n    return largest;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpu9xdat18: /tmp/tmpu9xdat18.cpp:31: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    assert(x >= 0 && y >= 0);\n\
    \    if(y == x) return -1;\n    long min = std::min(x, y);\n    if(min % 2 ==\
    \ 1) min--;\n    long max = std::max(x, y);\n    long ans = min - 1;\n    while(max)\
    \ {\n        if(max % 2 == 0) max--;\n        if(max >= ans) ans -= 2;\n     \
    \   max /= 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpd1t2wyfs: /tmp/tmpd1t2wyfs.cpp:25: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    assert(x > 0 && y > 0);\n \
    \   if (x <= y) {\n        if (x % 2 == 0) {\n            return x;\n        }\n\
    \    }\n    else {\n        if (y % 2 == 0) {\n            return y;\n       \
    \ }\n    }\n    long xRem = x - y;\n    if (xRem % 2 == 0) {\n        return x;\n\
    \    }\n    else {\n        return y;\n    }\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpn631txg5: /tmp/tmpn631txg5.cpp:31: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    assert(x != 0 && y != 0);\n\
    \    long mid = x + (y - x) / 2;\n    if (mid % 2 == 0) {\n        return mid;\n\
    \    } else {\n        if (mid < x || mid > y) {\n            return -1;\n   \
    \     }\n        return choose_num(x, mid) + choose_num(mid + 1, y);\n    }\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpxyqpssdz: /tmp/tmpxyqpssdz.cpp:23: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\t// write your code here\n\tif(x<y){\n\
    \t\tlong m = x;\n\t\tlong n = y;\n\t\twhile(true){\n\t\t\tlong p = n%m;\n\t\t\t\
    if(p==0 && m>=n){\n\t\t\t\treturn m;\n\t\t\t}\n\t\t\tm = n;\n\t\t\tn = p;\n\t\t\
    }\n\t}\n\telse{\n\t\tlong m = y;\n\t\tlong n = x;\n\t\twhile(true){\n\t\t\tlong\
    \ p = n%m;\n\t\t\tif(p==0 && m>=n){\n\t\t\t\treturn m;\n\t\t\t}\n\t\t\tm = n;\n\
    \t\t\tn = p;\n\t\t}\n\t}\n\t\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpvjgu33ib: /tmp/tmpvjgu33ib.cpp:39: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // write your code here\n \
    \   return -1;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpjrulzxjb: /tmp/tmpjrulzxjb.cpp:15: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here.\n\
    \    long mid = (x + y) / 2;\n    if (mid >= x && mid <= y) {\n        return\
    \ mid;\n    }\n    \n    if (x <= mid) {\n        return choose_num(x, mid);\n\
    \    }\n    \n    return choose_num(mid, y); \n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpgsvfx3yt: /tmp/tmpgsvfx3yt.cpp:24: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans;\n    if(x==y) {\n\
    \        return -1;\n    }\n    for(int i=0;i<=y;i++) {\n        if(x%i==0) {\n\
    \            ans = i;\n        }\n    }\n    return ans;\n}\nint main() {\n  \
    \  auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    int count = 0;\n    while (x\
    \ <= y) {\n        if (x % 2 == 0) {\n            x = x + 2;\n        } else if\
    \ (x % 2 != 0) {\n            x = x + 1;\n        } else {\n            x = x\
    \ + 1;\n            y = y + 1;\n        }\n        count++;\n    }\n    // If\
    \ there are more even numbers than x and y, then there's no such \n    // number.\
    \ Otherwise, we return the last even number that ends with x.\n    if (count ==\
    \ 0) {\n        return -1;\n    }\n    return x;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp16chy42_: /tmp/tmp16chy42_.cpp:31: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    for (long i = x; i <= y; i++){\n\
    \        if ((i%2) == 0) return i;\n    }\n    return -1;\n}\nint main() {\n \
    \   auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmplgf7co04: /tmp/tmplgf7co04.cpp:17: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\t// assert(x > 0 && y > 0);\n\t\
    long z = max(x, y);\n\tif (z <= x) {\n\t\tz = x + 1;\n\t\twhile (z <= y) {\n\t\
    \t\tif (z % 2 == 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tz = z + 2;\n\t\t}\n\t} else\
    \ if (z <= y) {\n\t\tz = y + 1;\n\t\twhile (z <= x) {\n\t\t\tif (z % 2 == 0) {\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t\tz = z + 2;\n\t\t}\n\t} else {\n\t\treturn -1;\n\
    \t}\n\treturn z;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpow112mlj.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmpow112mlj.cpp:11:11: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   11 |  long z = max(x,\
    \ y);\n      |           ^~~\n      |           std::max\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n        \
    \         from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpow112mlj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long mid = (x + y) / 2;\n \
    \   if (x < mid) {\n        return choose_num(x, mid);\n    } else if (x > mid)\
    \ {\n        return choose_num(mid + 1, y);\n    } else {\n        return mid;\n\
    \    }\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp72hfhpcg: /tmp/tmp72hfhpcg.cpp:21: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  assert(x >= 0 && y >= 0);\n \
    \ long ans = 0;\n  while (x < y) {\n    ans++;\n    x += (x & -x)<<1;\n    y +=\
    \ (y & -y)<<1;\n  }\n  ans = max(ans, abs(x) + abs(y));\n  return ans;\n}\nint\
    \ main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "/tmp/tmptkwagxgh.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmptkwagxgh.cpp:17:9: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   17 |   ans = max(ans,\
    \ abs(x) + abs(y));\n      |         ^~~\n      |         std::max\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n   \
    \              from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptkwagxgh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if(x == y)\n        return\
    \ -1;\n    for(long i = 3; i <= x; i = i*2 + 2)\n        if(x <= y && x % i ==\
    \ 0 && y % i == 0)\n            return i;\n    return -1;\n}\nint main() {\n \
    \   auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmprpm32zeq: /tmp/tmprpm32zeq.cpp:19: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if(x>y) {\n        x = y-1;\n\
    \    }\n    if(x>=0 && y>=0) {\n        for(long i = x; i<=y; i++) {\n       \
    \     if(i%2==0) {\n                return i;\n            }\n        }\n    }\n\
    \    return -1;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpvbejoteu: /tmp/tmpvbejoteu.cpp:24: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\tint m = 0;\n\twhile (m <= y &&\
    \ x <= y) {\n\t\tif (x % 2 == 0) {\n\t\t\tm++;\n\t\t} else {\n\t\t\tm--;\n\t\t\
    }\n\t\tx++;\n\t}\n\treturn m == 0 ? -1 : m;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp_1iuk2zc: /tmp/tmp_1iuk2zc.cpp:23: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long p = x;\n    while ((p\
    \ < y) && (p % 2 == 0)) {\n        ++p;\n    }\n    long q = y;\n    while ((q\
    \ > x) && (q % 2 == 0)) {\n        --q;\n    }\n    if (p == q) return -1;\n \
    \   else return p;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp88d7x6lz: /tmp/tmp88d7x6lz.cpp:23: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long max_num = x;\n    long\
    \ min_num = y;\n    if(x <= y) {\n        max_num = y;\n        min_num = x;\n\
    \    }\n    while(max_num%2 == 0 && (max_num > min_num)) {\n        max_num--;\n\
    \    }\n    return max_num;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp6xaw1q0w: /tmp/tmp6xaw1q0w.cpp:23: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long z = y;\n    while(x >=\
    \ z) {\n        z /= 2;\n    }\n    while(x < z) {\n        z /= 2;\n    }\n \
    \   return z;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp_anrpow2: /tmp/tmp_anrpow2.cpp:21: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  // Write your code here\n  bool\
    \ found = false;\n  long max_val = y;\n  while (!found && max_val >= x) {\n  \
    \  if (max_val % 2 == 0) max_val = max_val / 2;\n    else found = true;\n  }\n\
    \  return found ? max_val : -1;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpbly1baf7: /tmp/tmpbly1baf7.cpp:21: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long res;\n    // To find biggest\
    \ even number between x and y, iterate from 0 to y-1\n    // and add 2 to each\
    \ iteration until x's value is reached or reach y.\n    for (long i = 0; i < y;\
    \ ++i)\n    {\n        long num = x + 2*i;\n        if (num >= 0 && num % 2 ==\
    \ 0)\n            res = num;\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmph6h0idne: /tmp/tmph6h0idne.cpp:23: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long mid = (x + y)/2;\n   \
    \ if(x == mid) return x;\n    else if(y == mid) return y;\n    else if((x==y)\
    \ && (mid%2==0))\n        return mid;\n    else\n        return choose_num(mid,\
    \ y);\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpvi3a7yrh: /tmp/tmpvi3a7yrh.cpp:21: int main(): Assertion `candidate((13),\
    \ (12)) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\tassert(x != 0 && y != 0);\n\t\
    long z = (x + y) >> 1;\n\twhile (z < y) {\n\t\tz += y;\n\t}\n\treturn z;\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp1c61z9z7: /tmp/tmp1c61z9z7.cpp:19: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  int m = 0;\n  long ans = -1;\n\
    \  \n  while (x < y) {\n    if (x % 2 == 0 && y % 2 == 0) {\n      m = x / 2;\n\
    \      ans = m;\n    }\n    x /= 2;\n    y /= 2;\n  }\n\n  return ans;\n}\nint\
    \ main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpn7ack5cu: /tmp/tmpn7ack5cu.cpp:26: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here.\n\
    \    long n = x*x + y*y;\n    long d = n - 2*x + y;\n    if (d < 0)\n        return\
    \ -1;\n    else\n        return x/2 + (n/2 - d)/2;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpz5tgetn5: /tmp/tmpz5tgetn5.cpp:20: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   if (x >= y) {\n        long min = x;\n        long max = y;\n        while\
    \ (min < max) {\n            long mid = (min + max) / 2;\n            if (mid\
    \ % 2 == 0) {\n                min = mid;\n            } else {\n            \
    \    max = mid;\n            }\n        }\n        return min;\n    } else {\n\
    \        long min = y;\n        long max = x;\n        while (min < max) {\n \
    \           long mid = (min + max) / 2;\n            if (mid % 2 == 0) {\n   \
    \             min = mid;\n            } else {\n                max = mid;\n \
    \           }\n        }\n        return max;\n    }\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmplaqwf5kx: /tmp/tmplaqwf5kx.cpp:39: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x < y)\n        x = y;\n\
    \    if (x < 0)\n        x = -y; // make x positive\n    if (y > x)\n        y\
    \ = x;\n    long min = x;\n    long max = y;\n    long counter = 1;\n    while\
    \ (max > min) {\n        counter++;\n        if (max % 2 == 0)\n            max\
    \ = max / 2;\n        else\n            max = (max * 3 + 1) / 2;\n    }\n    if\
    \ (x > y)\n        return -1;\n    return min;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpczlnqfl3: /tmp/tmpczlnqfl3.cpp:32: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x > y) {\n        std::swap(x,\
    \ y);\n    }\n    long max = x;\n    while (y < max) {\n        if (max % 2 ==\
    \ 0) {\n            max = (max / 2) + (max / 2);\n        }\n        else {\n\
    \            max = (max * 2) + (max * 2);\n        }\n    }\n    return max;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpywv_rwjw: /tmp/tmpywv_rwjw.cpp:26: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long max_num;\n    for(max_num\
    \ = x; max_num < y; max_num++) { // go through all possible numbers\n        long\
    \ diff = max_num - x; // the difference between current number and x\n       \
    \ long is_even = diff % 2 != 0; // check if the current number is even\n\n   \
    \     if(is_even) {\n            return max_num; // if the number is even, then\
    \ return it\n        }\n    }\n\n    return -1; // if there is no even number,\
    \ the function returns -1\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpzbq7et7i: /tmp/tmpzbq7et7i.cpp:24: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    long p\
    \ = 1;\n    while (x < y) {\n        if (x % 2 == 0) {\n            x /= 2;\n\
    \            ans = p;\n        }\n        else {\n            p += 2;\n      \
    \  }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    assert(x >= y);\n    long max\
    \ = x;\n    while (max < y) {\n        if (max % 2 == 0 && max < x) {\n      \
    \      max = x + 1;\n        } else if (max % 2 != 0) {\n            return -1;\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp1ljb7_fw: /tmp/tmp1ljb7_fw.cpp:10: long int choose_num(long int, long\
    \ int): Assertion `x >= y' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x <= y && x > 0) return\
    \ x;\n    if (y <= x && y > 0) return y;\n    // Both are negative\n    // If\
    \ x is bigger than y, then return x\n    // If y is bigger than x, then return\
    \ y\n    if (x > y) \n        return x;\n    else\n        return y;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpt5si16n0: /tmp/tmpt5si16n0.cpp:22: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x <= y) {\n        if (x\
    \ % 2 == 0) {\n            return x;\n        }\n    }\n    else {\n        if\
    \ (y % 2 == 0) {\n            return y;\n        }\n    }\n    return -1;\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp3q01tnbs: /tmp/tmp3q01tnbs.cpp:24: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if(x>=y)\n        return -1;\n\
    \    if(x<0)\n        x=-x;\n    if(y<0)\n        y=-y;\n    long long res=0;\n\
    \    while(y!=0)\n    {\n        if(y%2==0)\n        {\n            res+=x;\n\
    \        }\n        x=x/2;\n        y=y/2;\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp3fez8z2d: /tmp/tmp3fez8z2d.cpp:30: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  int i = x;\n  int j = y;\n  long\
    \ k = 0;\n  while (true) {\n    if (i == j) return k;\n    else if (j > i) {\n\
    \      if (i % 2 == 0) j -= 1;\n      else i += 1;\n    } else i += 1;\n    k\
    \ += i;\n  }\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpq9afgk3q: /tmp/tmpq9afgk3q.cpp:24: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    int ans = 0;\n    long num\
    \ = x;\n    while (num < y) {\n        if (num % 2 == 0) {\n            ans =\
    \ num;\n        }\n        else {\n            ans = ans * 2 + num % 2;\n    \
    \    }\n        num = num / 2;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long mid = (x + y) / 2;\n    if(mid * mid <= x && x <= mid * mid)\n      \
    \  return mid;\n    else\n        return -1;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpb5ujaz5_: /tmp/tmpb5ujaz5_.cpp:19: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    int res;\n    long ans;\n\n\
    \    if(x > y) {\n        if(y > x) {\n            ans = y;\n            res =\
    \ x;\n        }\n        else {\n            ans = x;\n            res = y;\n\
    \        }\n    }\n    else {\n        if(x < y) {\n            ans = x;\n   \
    \         res = y;\n        }\n        else {\n            ans = y;\n        \
    \    res = x;\n        }\n    }\n    while(ans != 0) {\n        if((ans % 2) ==\
    \ 0) {\n            ans = ans / 2;\n        }\n        else {\n            ans\
    \ = ans * 3;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if(x > y)\n        std::swap(x,\
    \ y);\n\n    long num = y;\n    for(long i=y; i>=x; i--)\n        num = 2*i;\n\
    \n    if(num > x)\n        num = -1;\n\n    return num;\n}\nint main() {\n   \
    \ auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n \
    \   assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp7jb5dsoj: /tmp/tmp7jb5dsoj.cpp:24: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    assert(x >= 0 && x < y);\n\
    \    long max_even_number = -1;\n    while (y != 0) {\n        if ((y & 1) ==\
    \ 0) {\n            y = y >> 1;\n        } else {\n            y >>= 1;\n    \
    \        max_even_number = x;\n        }\n        x++;\n    }\n    return max_even_number;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp6qug5puk: /tmp/tmp6qug5puk.cpp:25: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x >= y) {\n        return\
    \ x;\n    }\n    for (long i = x; i <= y; i++) {\n        if (i % 2 == 0) {\n\
    \            return i;\n        }\n    }\n    return -1;\n}\nint main() {\n  \
    \  auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp04vn02sx: /tmp/tmp04vn02sx.cpp:22: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long max = (x > y) ? x : y;\n\
    \    long min = (x > y) ? y : x;\n    while (min++ < max) {\n        if (min %\
    \ 2 == 0 && max % 2 == 0) return min;\n        long mid = min/2;\n        if (mid\
    \ % 2 == 0) max--;\n        else min--;\n    }\n    return -1;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp1_q5se17: /tmp/tmp1_q5se17.cpp:24: int main(): Assertion `candidate((33),\
    \ (12354)) == (12354)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long long ans = -1;\n    for(long\
    \ long i = y; i <= x; i = i * 2)\n        if(i % 2 == 0)\n            ans = i;\n\
    \    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpgld35se0: /tmp/tmpgld35se0.cpp:18: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    for (long i = x; i <= y; ++i)\n\
    \        if (i % 2 == 0 && i != x)\n            return i;\n    return -1;\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpn41xtvs4: /tmp/tmpn41xtvs4.cpp:19: int main(): Assertion `candidate((33),\
    \ (12354)) == (12354)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    assert(x >= 0 && y >= 0);\n\
    \    long ans = 0;\n    while (x < y) {\n        if (x % 2 == 0) {\n         \
    \   ans = x;\n            break;\n        }\n        x /= 2;\n    }\n    while\
    \ (y > x) {\n        if (y % 2 == 0) {\n            ans = y;\n            break;\n\
    \        }\n        y /= 2;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp8shoh787: /tmp/tmp8shoh787.cpp:30: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    while (x<y) {\n        if(x%2==0)\n\
    \        x++;\n        else\n        y--;\n    }\n    return x;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpyl9z2mlt: /tmp/tmpyl9z2mlt.cpp:20: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // write your code here\n \
    \   long z = 2;\n    while(x < y){\n        z = z*2;\n        x++;\n    }\n  \
    \  return z;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmphsfkvq0y: /tmp/tmphsfkvq0y.cpp:20: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    assert(x > 0 && y > 0);\n \
    \   if (x <= y) {\n        if (x % 2 != 0) return x;\n        return choose_num(x\
    \ + 2, y - 1);\n    } else {\n        return -1;\n    }\n}\nint main() {\n   \
    \ auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n \
    \   assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpbr6jllc4: /tmp/tmpbr6jllc4.cpp:20: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\tassert(x >= 0 && y >= 0);\n\t\
    long ans = -1;\n\tint n = 1;\n\tint temp;\n\twhile (x <= y) {\n\t\ttemp = (x <<\
    \ 1) + y;\n\t\tif (temp > n) {\n\t\t\tans = temp;\n\t\t\tn = temp;\n\t\t}\n\t\t\
    x = x + 1;\n\t\ty = y + 1;\n\t}\n\treturn ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\tif (x <= y && x > y) {\n\t\t\
    long temp;\n\t\ttemp = x;\n\t\tx = y;\n\t\ty = temp;\n\t}\n\tlong min = 1;\n\t\
    long max = 0;\n\twhile (min <= y) {\n\t\tmin = min * 2 + 1;\n\t\tmax = max * 2\
    \ + 1;\n\t}\n\tif (x > min) {\n\t\twhile (x < min) {\n\t\t\tx = x * 2 + 1;\n\t\
    \t}\n\t\treturn -1;\n\t}\n\tif (x < max) {\n\t\twhile (x > max) {\n\t\t\tx = x\
    \ * 2 + 1;\n\t\t}\n\t\treturn -1;\n\t}\n\treturn min;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpzteobyuo: /tmp/tmpzteobyuo.cpp:38: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    int result = -1;\n    if (x\
    \ > y) {\n        swap(x, y);\n    }\n    long max = x;\n    for (int i = 0; i\
    \ < y; i++) {\n        if (max % 2 == 0) {\n            max = max / 2;\n     \
    \   }\n        else {\n            max = max * 3 + 1;\n        }\n    }\n    if\
    \ (max > x) {\n        result = x;\n    }\n    else {\n        result = y;\n \
    \   }\n    swap(x, result);\n    return result;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "/tmp/tmppxd1t02w.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmppxd1t02w.cpp:12:9: error: \u2018swap\u2019 was not declared\
    \ in this scope\n   12 |         swap(x, y);\n      |         ^~~~\n/tmp/tmppxd1t02w.cpp:12:9:\
    \ note: suggested alternatives:\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmppxd1t02w.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:2029:5:\
    \ note:   \u2018std::__cxx11::swap\u2019\n 2029 |     swap(match_results<_Bi_iter,\
    \ _Alloc>& __lhs,\n      |     ^~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/exception:143,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmppxd1t02w.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/exception_ptr.h:166:5:\
    \ note:   \u2018std::__exception_ptr::swap\u2019\n  166 |     swap(exception_ptr&\
    \ __lhs, exception_ptr& __rhs)\n      |     ^~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/nested_exception.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/exception:144,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/incl"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // write your code here\n \
    \   long max_even = -1;\n    for(long i = x; i <= y; i++){\n        if((i%2) ==\
    \ 0){\n            max_even = i;\n        }\n    }\n    return max_even;\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here.\n\
    \    long res = -1;\n    if(x != 0 && y != 0){\n        while(x < y){\n      \
    \      if((x*x)%2 == 0){\n                if(x>res) res = x;\n               \
    \ x ++;\n            }\n            else{\n                if(x>res) res = x;\n\
    \                x --;\n            }\n        }\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here.\n\
    \    long ans = 0;\n    while (y >= x && ans <= y) {\n        if (y % 2 == 0)\
    \ {\n            y = y / 2;\n            ans = ans + 1;\n        } else if (y\
    \ == 1) {\n            return -1;\n        } else if (y == 0) {\n            return\
    \ -1;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if(x < y) {\n        long r\
    \ = y;\n        long m = x;\n        long n = y;\n        while(true) {\n    \
    \        m = m / 2;\n            if(m == 0) return r;\n            if(m > n) n\
    \ = m;\n            r = r * 2;\n        }\n    } else {\n        long r = x;\n\
    \        long m = y;\n        long n = x;\n        while(true) {\n           \
    \ m = m / 2;\n            if(m == 0) return r;\n            if(m > n) n = m;\n\
    \            r = r * 2;\n        }\n    }\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpl5qrd3io: /tmp/tmpl5qrd3io.cpp:34: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x == y)\n        return\
    \ -1;\n    else if (x <= y)\n        return x;\n    else\n        return y;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpkwrxxco7: /tmp/tmpkwrxxco7.cpp:19: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    for(int\
    \ i = 0; i < 100 && ans == -1; i++) {\n        if(x <= i) {\n            ans =\
    \ i;\n            break;\n        }\n        if(y <= i) {\n            ans = i;\n\
    \            break;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpj9991fuf: /tmp/tmpj9991fuf.cpp:25: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // write your code here\n \
    \   long max_num = 0;\n    for(int i = 0; i < (int)(y/x); i++)\n    {\n      \
    \  max_num = std::max((int)max_num, (x + (y%x)*i));\n    }\n    return (max_num);\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5uriqrem.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmp5uriqrem.cpp:14:55: error: no matching function for call\
    \ to \u2018max(int, long int)\u2019\n   14 |         max_num = std::max((int)max_num,\
    \ (x + (y%x)*i));\n      |                                                   \
    \    ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp5uriqrem.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:222:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const\
    \ _Tp&, const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:222:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp5uriqrem.cpp:14:55:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    int\u2019 and \u2018long int\u2019)\n   14 |         max_num = std::max((int)max_num,\
    \ (x + (y%x)*i));\n      |                                                   \
    \    ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  assert(x >= 0 && y >= 0 && x\
    \ < y);\n  long max_num = x;\n  // Check if the number is in the desired range\n\
    \  long mid = x + (y - x) / 2;\n  long diff = 1;\n  for (int i = 1; i * diff <\
    \ mid && i < y; ++i) {\n    diff *= 2;\n  }\n  // If there are two even numbers\
    \ in the range, then choose one as the\n  // answer.\n  if (diff % 2 == 0) return\
    \ mid;\n  else {\n    long max_val = y;\n    long temp = 1;\n    // Find the first\
    \ even number in the range and swap it with the number\n    // below it\n    while\
    \ (mid - temp * 2 >= max_val) {\n      temp = temp * 2 + 1;\n    }\n    // Do\
    \ the same for the number above it\n    while (mid + temp * 2 < max_val) {\n \
    \     temp = temp * 2 + 2;\n    }\n    return mid + temp;\n  }\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpph1on6_0: /tmp/tmpph1on6_0.cpp:38: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\tif (x >= y) {\n\t\treturn -1;\
    \ // There is no such a number\n\t}\n\tint xmod = x % 2L;\n\tint ymod = y % 2L;\n\
    \treturn y + ((xmod > ymod) ? xmod + ymod : xmod);\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp1zas1ugn: /tmp/tmp1zas1ugn.cpp:19: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x >= y || x <= 0)\n   \
    \     return -1;\n\n    long mid = x + y / 2;\n\n    if (x <= mid)\n        return\
    \ choose_num(mid, y);\n    else\n        return choose_num(x, mid);\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpesqno0fd: /tmp/tmpesqno0fd.cpp:22: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\tif (x > y) {\n\t\treturn choose_num(y,\
    \ x);\n\t} else if (x == y) {\n\t\treturn x;\n\t} else if (x % 2 == 0 && y % 2\
    \ == 0) {\n\t\treturn x / 2;\n\t} else if (x % 2 == 0 && y % 2 == 1) {\n\t\treturn\
    \ x + (y / 2);\n\t} else {\n\t\treturn -1;\n\t}\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpvpzlx28r: /tmp/tmpvpzlx28r.cpp:24: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   assert(x >= y && y >= x);\n    while (x%2==0) {\n        x/=2;\n    }\n  \
    \  while(y%2==0) {\n        y/=2;\n    }\n    return (x+y);\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpstou898e: /tmp/tmpstou898e.cpp:11: long int choose_num(long int, long\
    \ int): Assertion `x >= y && y >= x' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x <= y && x > 0) {\n  \
    \      while (x <= y) {\n            if (x % 2 == 0)\n                x += 1;\n\
    \            else\n                return -1;\n        }\n    }\n    else if (y\
    \ > x) {\n        while (y > x) {\n            if (y % 2 == 0)\n             \
    \   y += 1;\n            else\n                return -1;\n        }\n    }\n\
    \    return x;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmplqyj466z: /tmp/tmplqyj466z.cpp:30: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\t// Your code goes here\n\tint\
    \ i, j;\n\tint temp;\n\tint result = -1;\n\t\n\tfor(i=1;i<=y;i++){\n\t\tfor(j=1;j<i;j++){\n\
    \t\t\tif(i%j==0){\n\t\t\t\ttemp = i;\n\t\t\t\ti = j;\n\t\t\t\tj = temp;\n\t\t\t\
    }\n\t\t}\n\t\tif(i==result){\n\t\t\tbreak;\n\t\t}\n\t\tresult = i;\n\t}\n\treturn\
    \ result;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp7khlaqb2: /tmp/tmp7khlaqb2.cpp:32: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long small = x;\n    long big\
    \ = y;\n    while(small != big){\n        if(small%2 == 0 && big%2 == 0){\n  \
    \          return big;\n        }\n        big++;\n    }\n    return -1;\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpepicgqw0: /tmp/tmpepicgqw0.cpp:22: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    int ans = 0;\n    while (x\
    \ <= y) {\n        long mod = (x+y)/2; // dividing by 2 will get all the even\
    \ numbers\n        if (mod % 2 == 0) {\n            ans = mod;\n            break;\n\
    \        }\n        if (mod == 0) {\n            ans = -1;\n            break;\n\
    \        }\n        y = mod;\n        x++;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp3_ppstzj: /tmp/tmp3_ppstzj.cpp:28: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\tlong max_num = y;\n\tfor (long\
    \ i = 1; i < x; i++) {\n\t\tif (max_num > x && max_num % i > 0) {\n\t\t\tmax_num\
    \ = x;\n\t\t} else if (max_num < x && max_num % i == 0) {\n\t\t\tmax_num = i;\n\
    \t\t}\n\t}\n\treturn max_num;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp4zpyehcp: /tmp/tmp4zpyehcp.cpp:22: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    assert(x\
    \ > 0 && y > 0);\n    if (x == y)\n        return ans;\n    if (x > y) {\n   \
    \     long temp = x;\n        x = y;\n        y = temp;\n    }\n    int m = (x\
    \ + y) / 2;\n    // We only care about the even numbers\n    while (m * 2 < x)\
    \ {\n        m = m / 2;\n    }\n    // Since we already checked that m is even\
    \ and x <= m * 2, we know \n    // m * 2 is even\n    while (m < y) {\n      \
    \  m = m / 2;\n    }\n    // Now m < y and m == y\n    if (m == y)\n        ans\
    \ = m;\n    // We want to find the smallest number that satisfies the following\
    \ condition: \n    // m - 2 is the biggest even number that is in the range [x,\
    \ y]\n    // If there's such number, then return it\n    while ((m - 2) % 2 ==\
    \ 0 && ans == -1) {\n        ans = m;\n        m = m / 2;\n    }\n    // We also\
    \ want to find the smallest number that satisfies the following condition:\n \
    \   // m - 2 is the biggest even number that is in the range [x, y]\n    // If\
    \ there's no such number, then the function should return -1.\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long max_num = std::numeric_limits<long>::min();\n\
    \    long min_num = std::numeric_limits<long>::max();\n\n    while (x<y) {\n \
    \       max_num = max_num < x ? max_num : x;\n        min_num = min_num > y ?\
    \ min_num : y;\n        x+=max_num;\n        y-=max_num;\n    }\n\n    if (max_num\
    \ == min_num) {\n        return max_num;\n    }\n\n    while (max_num%2 != 0)\
    \ {\n        max_num += 2;\n    }\n\n    while (min_num%2 != 0) {\n        min_num\
    \ -= 2;\n    }\n\n    return min_num;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long z = 0;\n    while (z <\
    \ x && z < y) {\n        if ((x % 2) == 0) {\n            x = x + 1;\n       \
    \ }\n        else {\n            y = y + 1;\n        }\n        z = z + 1;\n \
    \   }\n    return z;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpwefh5kud: /tmp/tmpwefh5kud.cpp:24: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x !=\
    \ 0 && y != 0) {\n        if (x >= y) {\n            while (x <= y) {\n      \
    \          if (x % 2 == 0) {\n                    ans = x;\n                 \
    \   break;\n                }\n                x += 2;\n            }\n      \
    \  } else {\n            while (y <= x) {\n                if (y % 2 == 0) {\n\
    \                    ans = y;\n                    break;\n                }\n\
    \                y += 2;\n            }\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpna377jm1: /tmp/tmpna377jm1.cpp:34: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    int ans = 1;\n    while (ans\
    \ < x) ans *= 2;\n    while (ans > y) ans /= 2;\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmprxgxr0ee: /tmp/tmprxgxr0ee.cpp:17: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    long p\
    \ = y;\n    long q = x;\n    while(q > p) {\n        q = p * q;\n        p = p\
    \ * 2;\n    }\n    long k = (p*q)/y;\n    if(y != 0)\n        k++;\n    ans =\
    \ k;\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n   \
    \ assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp1sy45zfj: /tmp/tmp1sy45zfj.cpp:25: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long z = x + y;\n    while (z %2 != 0)\n    {\n        z = z / 2;\n    }\n\
    \    return z;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpgtqfaj1d: /tmp/tmpgtqfaj1d.cpp:20: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x <= y && y <= x) {\n \
    \       return x;\n    }\n    // x is smaller than y\n    if (x == y) {\n    \
    \    return -1;\n    }\n    // x is bigger than y\n    if (x > y) {\n        std::swap(x,\
    \ y);\n    }\n    // x is bigger than y\n    long p = 1;\n    while ((p * 2) <=\
    \ y && p <= y) {\n        ++p;\n    }\n    p -= 2; // move the even number to\
    \ left\n    if (p <= y) {\n        // the even number is bigger than y\n     \
    \   return -1;\n    }\n    return p * 2;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpenf7c48k: /tmp/tmpenf7c48k.cpp:35: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    return (x>y)?x:y;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpv6u6o8kh: /tmp/tmpv6u6o8kh.cpp:14: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x <= y && x > 0)\n    \
    \    return max(x, y);\n    if (y > x)\n        return choose_num(y, x);\n   \
    \ if (x == 0)\n        return -1;\n    if (x > y)\n        return choose_num(x,\
    \ y);\n    if (y == 0)\n        return -1;\n    // The first if condition was\
    \ met.\n    assert(x <= y);\n    // The second if condition was met.\n    assert(x\
    \ > 0);\n    return max(x, y);\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz6l50y00.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmpz6l50y00.cpp:11:16: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   11 |         return max(x,\
    \ y);\n      |                ^~~\n      |                std::max\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n   \
    \              from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpz6l50y00.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n/tmp/tmpz6l50y00.cpp:24:12: error: \u2018\
    max\u2019 was not declared in this scope; did you mean \u2018std::max\u2019?\n\
    \   24 |     return max(x, y);\n      |            ^~~\n      |            std::max\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpz6l50y00.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x <= y) {\n        return\
    \ x << 1;\n    }\n    return x ^ y;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp5se14o68: /tmp/tmp5se14o68.cpp:17: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Your code goes here\n  \
    \  long sum = 0;\n    long temp;\n    long temp2;\n    for (long i = y; x >= i;\
    \ i--)\n    {\n        temp = sum + x;\n        temp2 = sum;\n        sum = temp\
    \ - temp2;\n    }\n    if (sum == 0)\n        return -1;\n    else\n        return\
    \ sum;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpz6gx6_1g: /tmp/tmpz6gx6_1g.cpp:27: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x > y) {\n        long\
    \ temp = x;\n        x = y;\n        y = temp;\n    }\n    if (x % 2 == 0 && y\
    \ % 2 == 0) {\n        return y;\n    }\n    if (x == y) {\n        return -1;\n\
    \    }\n    while ((x % 2 == 0) && y % 2 == 0) {\n        x /= 2;\n        y /=\
    \ 2;\n    }\n    while ((x % 2 == 1) && y % 2 == 1) {\n        x /= 2;\n     \
    \   y /= 2;\n    }\n    while ((x % 2 == 0) && y % 2 == 1) {\n        x /= 2;\n\
    \        y /= 2;\n    }\n    while ((x % 2 == 1) && y % 2 == 0) {\n        x /=\
    \ 2;\n        y /= 2;\n    }\n    if (x == y) {\n        return -1;\n    }\n \
    \   if (x > y) {\n        return x;\n    }\n    return y;\n}\nint main() {\n \
    \   auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpf3qyuyh6: /tmp/tmpf3qyuyh6.cpp:47: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  // Your code here\n  assert(x\
    \ > 0 && y > 0);\n  if((x == 0) && (y == 0)) {\n    return -1;\n  }\n  long ans\
    \ = x + y;\n  ans = ans % 2;\n  ans = (ans + 2) % x;\n  ans = (ans + 2) % y;\n\
    \  return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp_fdlj03c: /tmp/tmp_fdlj03c.cpp:23: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    for (long i = x; i <= y; ++i)\n\
    \        if (x%i == 0 && y%i == 0)\n            return i;\n    return -1;\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmph96bui2_: /tmp/tmph96bui2_.cpp:17: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  assert(x > 0 && y > 0 && x +\
    \ y > 0);\n  long max = 0;\n  long min = (x > y) ? x : y;\n  long mid;\n  for(mid\
    \ = min + 1; mid < max; mid++) {\n    if (mid % 2 == 0) {\n      max = mid;\n\
    \      break;\n    }\n  }\n  assert(max > 0);\n  if (x == max) {\n    return y;\n\
    \  }\n  if (y == max) {\n    return x;\n  }\n  min = max - 1;\n  for(mid = min\
    \ + 1; mid < max; mid++) {\n    if (mid % 2 == 0) {\n      max = mid;\n      break;\n\
    \    }\n  }\n  assert(max > 0);\n  if (x <= max) {\n    return x;\n  }\n  if (y\
    \ <= max) {\n    return y;\n  }\n  return -1;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpok_xnapg: /tmp/tmpok_xnapg.cpp:20: long int choose_num(long int, long\
    \ int): Assertion `max > 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long result = -1;\n    while(y > x) {\n        if(y%2==0) {\n            y\
    \ = y/2;\n        } else {\n            y = y/2;\n        }\n        x = x + 1;\n\
    \    }\n    return x -1;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpuge3xdhr: /tmp/tmpuge3xdhr.cpp:24: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    assert(x > 0 && y > 0);\n \
    \   if (x > y) {\n        long temp=x;\n        x=y;\n        y=temp;\n    }\n\
    \    long max=0;\n    long min=x;\n    while(min <= y) {\n        max++;\n   \
    \     min+=2;\n    }\n    while(max > min) {\n        if (max % 2 == 0) {\n  \
    \          if (max >= x && max <= y) {\n                return max;\n        \
    \    }\n        }\n        max-=2;\n    }\n    return -1;\n}\nint main() {\n \
    \   auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpmm6nos8a: /tmp/tmpmm6nos8a.cpp:34: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    while (x < y) {\n        if\
    \ (x % 2 == 0) x = x + 1;\n        else x = x - 2;\n    }\n    return x >= y ?\
    \ x : -1;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  long result = 0;\n  assert(x\
    \ >= 0);\n  assert(y >= 0);\n  long max = x;\n  while (max <= y) {\n    max =\
    \ x + y;\n    if (max % 2 == 0) {\n      result += max;\n    }\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpnl8g3kvd: /tmp/tmpnl8g3kvd.cpp:24: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    assert(x >= 0 && x < y && y\
    \ > 0);\n    // Initialize result to INT_MAX.\n    long res = INT_MAX;\n    //\
    \ Initialize remainder to 0.\n    long rem = 0;\n    \n    // Start comparing\
    \ with the first number in the range.\n    while (x <= y) {\n        // If remainder\
    \ is 0, then we've found an even number!\n        if (rem == 0) {\n          \
    \  res = x;\n        }\n        // Otherwise, increment remainder.\n        else\
    \ {\n            rem++;\n        }\n        // Increment x, which is the next\
    \ number to compare.\n        x++;\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpm9xy5k2l: /tmp/tmpm9xy5k2l.cpp:33: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long z = (x > y) ? x : y;\n\
    \    long a = x;\n    long b = y;\n    long c = z;\n    long ans = a;\n    long\
    \ d = b;\n    while (a < z) {\n        long tmp = a;\n        a = b;\n       \
    \ b = c;\n        c = tmp;\n        if (a == z) {\n            if (b > z) {\n\
    \                long tmp = b;\n                b = c;\n                c = tmp;\n\
    \            }\n            ans = a;\n            break;\n        }\n        if\
    \ (b == z) {\n            if (c > z) {\n                long tmp = b;\n      \
    \          b = c;\n                c = tmp;\n            }\n            ans =\
    \ a;\n            break;\n        }\n        if (c > z) {\n            long tmp\
    \ = b;\n            b = c;\n            c = tmp;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpbup7vnk0: /tmp/tmpbup7vnk0.cpp:49: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\t// Base case\n\tif (x <= y) {\n\
    \t\treturn x;\n\t} else {\n\t\tlong ans = y;\n\t\twhile (ans <= x) {\n\t\t\tans\
    \ += y;\n\t\t}\n\t\treturn ans;\n\t}\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp4yp7igcd: /tmp/tmp4yp7igcd.cpp:23: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    assert(x >= 0 && y >= 0);\n\
    \    if (x >= y) {\n        long tmp = x;\n        x = y;\n        y = tmp;\n\
    \    }\n    long mid = x + (y / 2);\n    if (mid % 2 == 0) {\n        return mid;\n\
    \    }\n    if (x <= y) {\n        return -1;\n    }\n    return choose_num(mid,\
    \ y);\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpy4u8nio8: /tmp/tmpy4u8nio8.cpp:27: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long m = 1;\n    while (x <=\
    \ y) {\n        m *= 2;\n        x += (m - 1) / m;\n    }\n    return m;\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    assert(x >= 0 && y >= 0);\n\
    \    // return max even number in [x, y]\n    long ans = -1;\n    // If x or y\
    \ is 0, the answer would be 0.\n    if (x == 0 || y == 0) return 0;\n    if (x\
    \ > y) swap(x, y);\n    long n = 1;\n    while (n < x) n <<= 1;\n    long q =\
    \ n;\n    while (!(q & 1)) {\n        q >>= 1;\n        ans++;\n    }\n    return\
    \ n < y ? ans : -1;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmq0iqwih.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmpmq0iqwih.cpp:15:16: error: \u2018swap\u2019 was not declared\
    \ in this scope\n   15 |     if (x > y) swap(x, y);\n      |                ^~~~\n\
    /tmp/tmpmq0iqwih.cpp:15:16: note: suggested alternatives:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n            \
    \     from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpmq0iqwih.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:2029:5:\
    \ note:   \u2018std::__cxx11::swap\u2019\n 2029 |     swap(match_results<_Bi_iter,\
    \ _Alloc>& __lhs,\n      |     ^~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/exception:143,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpmq0iqwih.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/exception_ptr.h:166:5:\
    \ note:   \u2018std::__exception_ptr::swap\u2019\n  166 |     swap(exception_ptr&\
    \ __lhs, exception_ptr& __rhs)\n      |     ^~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/nested_exception.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/exception:144,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9."
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\tint ans = 1;\n\twhile (x <= y)\
    \ {\n\t\tif (x % 2 == 0 && (x + y) % 2 != 0) {\n\t\t\tans = x + y;\n\t\t\tbreak;\n\
    \t\t}\n\t\tx++;\n\t}\n\treturn ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpyw_t0fhi: /tmp/tmpyw_t0fhi.cpp:22: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  assert(x >= 0 && y >= 0);\n \
    \ // Calculate the number of iterations that should be performed \n  // for loop\
    \ to work properly.\n  int iterations = abs(x) + abs(y);\n  // Initialize a variable\
    \ to store the answer.\n  long answer = 0;\n  // Initialize a variable which stores\
    \ the number of iterations.\n  int num_iterations = 0;\n\n  // This loop runs\
    \ exactly once for the outer loop. \n  while (num_iterations < iterations) {\n\
    \    // Find the number of times 2 should be multiplied.\n    num_iterations +=\
    \ (x * (x + y));\n    // Find the number of times 3 should be multiplied.\n  \
    \  num_iterations += (y * (x + y));\n    // Find the number of times 4 should\
    \ be multiplied.\n    num_iterations += (y * (y + x));\n    // Find the number\
    \ of times 5 should be multiplied.\n    num_iterations += (x * y);\n    // Find\
    \ the number of times 6 should be multiplied.\n    num_iterations += (x * y *\
    \ x);\n    // Find the number of times 7 should be multiplied.\n    num_iterations\
    \ += (x * y * y * x);\n    // Find the number of times 8 should be multiplied.\n\
    \    num_iterations += (y * x * y);\n    // Find the number of times 9 should\
    \ be multiplied.\n    num_iterations += (y * y * x);\n    // Find the number of\
    \ times 10 should be multiplied.\n    num_iterations += (x * y * y);\n    // Find\
    \ the number of times 11 should be multiplied.\n    num_iterations += (x * y *\
    \ y * x);\n    // Find the number of times 12 should be multiplied.\n    num_iterations\
    \ += (x * x * y);\n    // Find the number of times 13 should be multiplied.\n\
    \    num_iterations += (x * x * x * x);\n    // Find the number of times 14 should\
    \ be multiplied.\n    num_iterations += (x * x * x * x * y);\n    // Find the\
    \ number of times 15 should be multiplied.\n    num_iterations += (x * x * x *\
    \ x * x * y);\n    // Find the number of times 16 should be multiplied.\n    num_iterations\
    \ += (x * x * x * x * x * x * y);\n  }\n\n  // Return the answer.\n  return answer;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpgwyzx3do: /tmp/tmpgwyzx3do.cpp:58: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\tlong ans = -1;\n\twhile ( x >=\
    \ y ) {\n\t\tif ( x % 2 != 0 && y % 2 == 0 ) {\n\t\t\tans = x;\n\t\t\tbreak;\n\
    \t\t} else if ( x % 2 == 0 && y % 2 == 0 ) {\n\t\t\tans = y;\n\t\t\tbreak;\n\t\
    \t} else if ( x % 2 == 0 && y % 2 != 0 ) {\n\t\t\ty = y - 1;\n\t\t} else {\n\t\
    \t\tx = x - 1;\n\t\t}\n\t}\n\treturn ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpb8jjnqlz: /tmp/tmpb8jjnqlz.cpp:28: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  assert(x != LONG_MIN);\n  assert(y\
    \ != LONG_MIN);\n  \n  long max_number = LONG_MIN;\n  \n  // This is necessary\
    \ for the \"unsigned\" part in the while loop\n  long max_signed_number = LONG_MIN;\n\
    \  \n  while(x < y) {\n    if((x % 2) == 0) {\n      max_number = x;\n      break;\n\
    \    } else {\n      x = x + 1;\n    }\n  }\n  while(y > x) {\n    if((y % 2)\
    \ == 0) {\n      max_number = y;\n      break;\n    } else {\n      y = y - 1;\n\
    \    }\n  }\n  \n  if(max_number < LONG_MIN) {\n    return -1;\n  }\n  \n  while(max_signed_number\
    \ > max_number) {\n    max_signed_number -= 2;\n  }\n  \n  return max_signed_number;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp4jws8f0j: /tmp/tmp4jws8f0j.cpp:47: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long i, mid;\n    // If x ==\
    \ y then x will always be even.\n    if (x == y) {\n        // For x == y we return\
    \ x\n        return x;\n    }\n    // Middle point of x and y.\n    mid = x +\
    \ (y - x) / 2;\n    // Go through all even numbers between x and mid.\n    for\
    \ (i = 0; i <= (x - mid) / 2; i++) {\n        if (mid % 2 == 0) {\n          \
    \  // If mid is even, we return mid.\n            return mid;\n        }\n   \
    \     // If mid is odd, we substract 1 from mid (since we know it cannot\n   \
    \     // be a even number).\n        mid--;\n    }\n    // No even numbers between\
    \ x and mid are in the range.\n    return -1;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp2m040vqe: /tmp/tmp2m040vqe.cpp:33: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if(x>y)\n        return -1;\n\
    \    int l = (int) (x-y);\n    for(int i = 0; i <= l; i++)\n        if(x % 2 ==\
    \ 0 && y % 2 == 0 && x != y)\n            return x;\n    return -1;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp8ow2krif: /tmp/tmp8ow2krif.cpp:20: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = 0;\n    while (x\
    \ <= y) {\n        ans = x + ans % y;\n        x += y % x;\n        y = y / x;\n\
    \    }\n    if (y == 1) {\n        if (x <= y) {\n            ans = x + 1;\n \
    \       }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpu52fj6nn: /tmp/tmpu52fj6nn.cpp:25: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  assert(x >= y);\n  long max_num\
    \ = x + 1;\n  // If x is even and y is even, then add 2 before adding the numbers.\
    \ \n  // This avoids the case where x+y is even.\n  if (x % 2 == 0 && y % 2 ==\
    \ 0) {\n    max_num = x + 2;\n  }\n  while (max_num < y) {\n    max_num = max_num\
    \ + max_num;\n  }\n  return max_num;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp478pfmf6: /tmp/tmp478pfmf6.cpp:10: long int choose_num(long int, long\
    \ int): Assertion `x >= y' failed.\n"
  exit_code: -6
  status: Exception
