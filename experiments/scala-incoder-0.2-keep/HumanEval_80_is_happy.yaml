name: HumanEval_80_is_happy
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a string s.\n    // Your task is to check if the string is\
  \ happy or not.\n    // A string is happy if its length is at least 3 and every\
  \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a) =>\
  \ False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    // is_happy(aabb)\
  \ => False\n    // is_happy(adb) => True\n    // is_happy(xyy) => False\n    def\
  \ isHappy(s : String) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\"))\
  \ == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
  abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
  adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
  iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n    }\n\
  \n}\n"
completions: ["        val len = s.length\n        if (len < 3 || len % 3 != 0) return\
    \ false\n        val set = mutable.HashSet[Char]()\n        for (i <- 0 until\
    \ len) {\n            if (set.contains(s(i)))\n                return false\n\
    \            set += s(i)\n        }\n        return true", "        val chars\
    \ = mutable.ArrayBuffer(s.toCharArray)\n        val len = chars.length\n     \
    \   val happy = mutable.ArrayBuffer(s.toCharArray)\n        val happyLen = happy.length\n\
    \        val distinctChars = mutable.Set[Char]()\n        val distinctCharsLen\
    \ = distinctChars.length\n        val happyDistinctChars = mutable.Set[Char]()\n\
    \        val happyDistinctCharsLen = happyDistinctChars.length\n        for(i\
    \ <- 0 until len) {\n            val c = chars(i)\n            distinctChars +=\
    \ c\n            happyDistinctChars += c\n            happyDistinctCharsLen +=\
    \ 1\n        }\n        happyLen >= 3 && distinctCharsLen >= 3 && happyDistinctCharsLen\
    \ >= 3", "        val chars = mutable.HashSet[Char]()\n        for(i <- 0 until\
    \ s.length)\n            chars += s.charAt(i)\n        chars.size == s.length\
    \ && chars.distinct.length >= 3", "        val chars = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until s.length)\n            chars += s.charAt(i)\n     \
    \   chars.toList.groupBy(c => c).forall { case (c, n) => n >= 3 && c.distinct().size\
    \ == 3 }", "        val len = s.length\n        if (len < 3) false\n        else\
    \ {\n            var i = 0\n            var j = 1\n            var k = 0\n   \
    \         var happy = true\n            while (i < len) {\n                if\
    \ (s.charAt(i) == s.charAt(j) && s.charAt(i) != s.charAt(k)) {\n             \
    \       happy = false\n                }\n                i += 1\n           \
    \     j += 1\n                k += 1\n            }\n            happy\n     \
    \   }", "        val n = s.length\n        if(n < 3) return false\n        val\
    \ counts = mutable.HashMap[Char, Int]()\n        for(i <- 0 until n) {\n     \
    \       val c = s.charAt(i)\n            if(!counts.contains(c)) {\n         \
    \       counts += c -> 1\n            } else {\n                counts(c) += 1\n\
    \            }\n        }\n        for(i <- 0 until n) {\n            val c =\
    \ s.charAt(i)\n            if(counts(c) != 3) return false\n        }\n      \
    \  true", "        val chars = s.toCharArray\n        val len = chars.length\n\
    \        if (len < 3) return false\n        val set = mutable.HashSet[Char]()\n\
    \        for (i <- 0 until len) {\n            val c = chars(i)\n            if\
    \ (!set(c)) {\n                set += c\n            }\n        }\n        return\
    \ len >= 3", "        val chars = s.toCharArray\n        val distinctChars = chars.distinct\n\
    \        val distinctCharsCount = distinctChars.size\n        val happy = distinctCharsCount\
    \ >= 3 && distinctChars.forall(distinctChars.init)\n        happy", "        val\
    \ chars = mutable.ListBuffer[Char]()\n        for(i <- 0 until s.length)\n   \
    \         chars += s.charAt(i)\n        chars.toList.distinct.size == s.length\
    \ && chars.toList.distinct.size == 3", "        val chars = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until s.length)\n            chars += s.charAt(i)\n     \
    \   chars.toList.distinct.size == s.length && chars.toList.distinct.size == 3",
  "        val chars = mutable.ListBuffer[Char]()\n        for (i <- 0 until s.length)\n\
    \            chars += s.charAt(i)\n        chars.toList.groupBy(c => c).forall(c\
    \ => c.length >= 3 && c.distinct.length == 3)", "        val chars = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until s.length)\n            chars += s.charAt(i)\n     \
    \   chars.toList.distinct.length >= 3 && chars.toList.distinct.forall(c => chars.toList.count(_\
    \ == c) == 3)", "        val chars = mutable.ListBuffer[Char]()\n        for(i\
    \ <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.groupBy(x\
    \ => x).filter(_._2.length >= 3).forall(x => x._2.distinct.length == 3)", "  \
    \      val chars = s.toCharArray\n        val len = chars.length\n        val\
    \ distinctChars = chars.distinct\n        val len = chars.length\n        val\
    \ distinctChars = chars.distinct\n        val len = chars.length\n        val\
    \ distinctChars = chars.distinct\n        val len = chars.length\n        val\
    \ distinctChars = chars.distinct\n        val len = chars.length\n        val\
    \ distinctChars = chars.distinct\n        val len = chars.length\n        val\
    \ distinctChars = chars.distinct\n        val len = chars.length\n        val\
    \ distinctChars = chars.distinct\n        val len = chars.length\n        val\
    \ distinctChars = chars.distinct\n        val len = chars.length\n        val\
    \ distinctChars = chars.distinct\n        val len = chars.length\n        val\
    \ distinctChars = chars.distinct\n        val len = chars.length\n        val\
    \ distinctChars = chars.distinct\n        val len = chars.length\n        val\
    \ distinctChars = chars.distinct\n        val len = chars.length\n        val\
    \ distinctChars = chars.distinct\n        val len = chars.length\n        val\
    \ distinctChars = chars.distinct\n        val len = chars.length\n        val\
    \ distinctChars = chars.distinct\n        val len = chars.length\n        val\
    \ distinctChars = chars.distinct\n        val len = chars.length\n        val\
    \ distinctChars = chars.distinct\n        val len = chars.length\n        val\
    \ distinctChars = chars.distinct\n        val len = chars.length\n        val\
    \ distinctChars = chars.distinct\n        val len = chars.length\n        val\
    \ distinctChars = chars.distinct\n        val len = chars.length\n        val\
    \ distinctChars = chars.distinct\n        val len = chars.length\n        val\
    \ distinctChars = chars.distinct\n        val len = chars.length\n        val\
    \ distinctChars = chars.distinct\n        val len = chars.length\n        val\
    \ distinctChars = chars.distinct\n        val len = chars.length\n        val\
    \ distinctChars = chars.distinct\n        val len = chars.length\n        val\
    \ distinctChars = chars.distinct\n        val len = chars.length\n        val\
    \ distinctChars = chars.distinct\n        val len = chars.length\n        val\
    \ distinctChars = chars.distinct\n        val len = chars.length\n        val\
    \ distinctChars = chars.distinct\n        val len = chars.length\n        val\
    \ distinctChars = chars.distinct\n        val len = chars.length\n        val\
    \ distinctChars = chars.distinct\n        val len = chars.length\n        val\
    \ distinctChars = chars.distinct\n        val len = chars.length\n        val\
    \ distinctChars = chars.distinct\n        val len = chars.length\n        val\
    \ distinct", "        val chars = mutable.ListBuffer[Char]()\n        for(i <-\
    \ 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.groupBy(x\
    \ => x).forall { case (k, v) => v.length >= 3 && v.distinct.length == v.length\
    \ }", "        val l = s.length\n        if(l < 3) return false\n        val set\
    \ = mutable.HashSet[Char]()\n        for(i <- 0 until l) set += s.charAt(i)\n\
    \        l == set.size", "        val chars = mutable.ListBuffer[Char]()\n   \
    \     for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.groupBy(x\
    \ => x).filter(_._2.length >= 3).forall(x => x._2.distinct.length == 3)", "  \
    \      val l = s.length\n        if(l < 3) return false\n        val set = mutable.HashSet[Char]()\n\
    \        for(i <- 0 until l) {\n            if(set.contains(s(i)))\n         \
    \       return false\n            set += s(i)\n        }\n        return true",
  "        val chars = mutable.ListBuffer[Char]()\n        for (i <- 0 until s.length)\n\
    \            chars += s.charAt(i)\n        chars.toList.length >= 3 && chars.toList.distinct.length\
    \ == 3", "        val len = s.length\n        if (len < 3) return false\n    \
    \    val chars = mutable.ListBuffer[Char]()\n        for (i <- 0 until len) {\n\
    \            chars += s.charAt(i)\n        }\n        chars.distinct.size == len"]
stop_tokens:
- "\n    }\n"
