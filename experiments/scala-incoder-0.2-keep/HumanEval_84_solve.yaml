name: HumanEval_84_solve
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a positive integer N, return the total sum of its digits in binary.\n\
  \    // Example\n    // For N = 1000, the sum of digits will be 1 the output should\
  \ be \"1\".\n    // For N = 150, the sum of digits will be 6 the output should be\
  \ \"110\".\n    // For N = 147, the sum of digits will be 12 the output should be\
  \ \"1100\".\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
  \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    def solve(N\
  \ : Long) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
  1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
  1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
  10010\")));\n    }\n\n}\n"
completions: ["        val sum = 0\n        var binary = \"\"\n        var remainder\
    \ = 0\n        for(i <- 0 until N) {\n            remainder = i % 10\n       \
    \     sum += remainder\n            binary += remainder\n        }\n        binary.reverse",
  "        val binary = N.toBinaryString\n        val sum = 0\n        for(i <- 0\
    \ until binary.length){\n            val digit = binary.charAt(i)\n          \
    \  sum += digit.toInt\n        }\n        binary.reverse\n        binary.reverse.takeWhile(x\
    \ => x != '0').mkString", "        var sum = 0\n        var binary = \"\"\n  \
    \      var remainder = 0\n        for(i <- 0 until N){\n            sum += i\n\
    \            binary = sum.toString(2)\n            remainder = sum % 2\n     \
    \       sum = sum / 2\n        }\n        if(remainder == 0){\n            binary\
    \ = sum.toString(2)\n        }\n        binary", "        val sums = mutable.ArrayBuffer.empty[Int]\n\
    \        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n        val\
    \ sumOfDigits = digits.foldLeft(0)(_ + _)\n        sums += sumOfDigits\n     \
    \   val binary = sums.map(x => x % 2).mkString(\"\")\n        binary.reverse",
  "        val sum = 0\n        var sumStr = \"\"\n        var remainder = 0\n   \
    \     var remainderStr = \"\"\n        for(i <- 0 until N) {\n            sum\
    \ += i\n            sumStr += i\n            remainder = sum % 2\n           \
    \ remainderStr += remainder\n        }\n        if(sumStr.length == 1) {\n   \
    \         sumStr = \"0\" + sumStr\n        }\n        if(remainderStr.length ==\
    \ 1) {\n            remainderStr = \"0\" + remainderStr\n        }\n        sumStr\
    \ + remainderStr", "        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sums = digits.map(_.sum)\n        val result = sums.foldLeft(\"\"\
    )(_ + _)\n        result", "        var sum = 0\n        var binary = \"\"\n \
    \       var remainder = 0\n        var remainder2 = N\n        var remainder3\
    \ = N\n        var remainder4 = N\n        var remainder5 = N\n        var remainder6\
    \ = N\n        var remainder7 = N\n        var remainder8 = N\n        var remainder9\
    \ = N\n        var remainder10 = N\n        var remainder11 = N\n        var remainder12\
    \ = N\n        var remainder13 = N\n        var remainder14 = N\n        var remainder15\
    \ = N\n        var remainder16 = N\n        var remainder17 = N\n        var remainder18\
    \ = N\n        var remainder19 = N\n        var remainder20 = N\n        var remainder21\
    \ = N\n        var remainder22 = N\n        var remainder23 = N\n        var remainder24\
    \ = N\n        var remainder25 = N\n        var remainder26 = N\n        var remainder27\
    \ = N\n        var remainder28 = N\n        var remainder29 = N\n        var remainder30\
    \ = N\n        var remainder31 = N\n        var remainder32 = N\n        var remainder33\
    \ = N\n        var remainder34 = N\n        var remainder35 = N\n        var remainder36\
    \ = N\n        var remainder37 = N\n        var remainder38 = N\n        var remainder39\
    \ = N\n        var remainder40 = N\n        var remainder41 = N\n        var remainder42\
    \ = N\n        var remainder43 = N\n        var remainder44 = N\n        var remainder45\
    \ = N\n        var remainder46 = N\n        var remainder47 = N\n        var remainder48\
    \ = N\n        var remainder49 = N\n        var remainder50 = N\n        var remainder51\
    \ = N\n        var remainder52 = N\n        var remainder53 = N\n        var remainder54\
    \ = N\n        var remainder55 = N\n        var remainder56 = N\n        var remainder57\
    \ = N\n        var remainder58 = N\n        var remainder59 = N\n        var remainder60\
    \ = N\n        var remainder61 = N\n        var remainder62 = N\n        var remainder63\
    \ = N\n        var remainder64 = N\n        var remainder65 = N\n        var remainder66\
    \ = N\n        var remainder67 = N\n        var remainder68 = N\n        var remainder69\
    \ = N\n        var remainder70 = N\n        var remainder71 = N\n        var remainder72\
    \ = N\n        var remainder73 = N\n        var remainder74 = ", "        val\
    \ sum = 0\n        val binary = new mutable.ListBuffer[String]()\n        for(i\
    \ <- 0 until N) {\n            val remainder = i rem 2\n            val digit\
    \ = i / 2\n            sum += digit\n            binary.append(remainder)\n  \
    \      }\n        binary.reverse.mkString(\"\")", "        val sum = 0\n     \
    \   var sumStr = \"\"\n        var remainder = 0\n        var remainderStr = \"\
    \"\n        var remainderStr2 = \"\"\n        var remainderStr3 = \"\"\n     \
    \   var remainderStr4 = \"\"\n        var remainderStr5 = \"\"\n        var remainderStr6\
    \ = \"\"\n        var remainderStr7 = \"\"\n        var remainderStr8 = \"\"\n\
    \        var remainderStr9 = \"\"\n        var remainderStr10 = \"\"\n       \
    \ var remainderStr11 = \"\"\n        var remainderStr12 = \"\"\n        var remainderStr13\
    \ = \"\"\n        var remainderStr14 = \"\"\n        var remainderStr15 = \"\"\
    \n        var remainderStr16 = \"\"\n        var remainderStr17 = \"\"\n     \
    \   var remainderStr18 = \"\"\n        var remainderStr19 = \"\"\n        var\
    \ remainderStr20 = \"\"\n        var remainderStr21 = \"\"\n        var remainderStr22\
    \ = \"\"\n        var remainderStr23 = \"\"\n        var remainderStr24 = \"\"\
    \n        var remainderStr25 = \"\"\n        var remainderStr26 = \"\"\n     \
    \   var remainderStr27 = \"\"\n        var remainderStr28 = \"\"\n        var\
    \ remainderStr29 = \"\"\n        var remainderStr30 = \"\"\n        var remainderStr31\
    \ = \"\"\n        var remainderStr32 = \"\"\n        var remainderStr33 = \"\"\
    \n        var remainderStr34 = \"\"\n        var remainderStr35 = \"\"\n     \
    \   var remainderStr36 = \"\"\n        var remainderStr37 = \"\"\n        var\
    \ remainderStr38 = \"\"\n        var remainderStr39 = \"\"\n        var remainderStr40\
    \ = \"\"\n        var remainderStr41 = \"\"\n        var remainderStr42 = \"\"\
    \n        var remainderStr43 = \"\"\n        var remainderStr44 = \"\"\n     \
    \   var remainderStr45 = \"\"\n        var remainderStr46 = \"\"\n        var\
    \ remainderStr47 = \"\"\n        var remainderStr48 = \"\"\n        var remainderStr49\
    \ = \"\"\n        var remainderStr50 = \"\"\n        var remainderStr51 = \"\"\
    \n        var remainderStr52 = \"\"\n        var remainderStr53 = \"\"\n     \
    \   var remainderStr54 = \"\"\n        var remainderStr55 = \"\"\n        var\
    \ remainderStr56 = \"\"\n        var remainderStr57 = \"\"\n        var remainderStr58\
    \ = \"\"\n        var remainderStr59 = \"\"\n        var remainderStr60 = \"\"\
    \n        var remainderStr61 = \"\"\n        var remainderStr62 = \"\"\n     \
    \   var remainderStr63 = \"\"\n        var remainderStr64 = \"\"\n        var\
    \ remainderStr65 = \"\"\n        var remainderStr66 = \"\"\n        var remainderStr67\
    \ = \"\"\n        var remainderStr68 = \"\"\n        var remainderStr69 = \"\"\
    \n        var remain", "        val sum = 0\n        var sumOfDigits = 0\n   \
    \     var binaryString = \"\"\n        for(i <- 0 until N) {\n            val\
    \ digit = math.abs(N % 10)\n            sum += digit\n            sumOfDigits\
    \ += digit\n            binaryString += digit\n            N /= 10\n        }\n\
    \        val result = if (sumOfDigits == sum) binaryString else \"\"\n       \
    \ result + sumOfDigits", "        val binary = scala.collection.mutable.StringBuilder()\n\
    \        var sum = 0\n        while(N /= 10) {\n            sum += N % 10\n  \
    \          N /= 10\n        }\n        binary.append(sum)\n        binary.toString()",
  "        val sum = 0\n        val binary = new mutable.MutableList[String]\n   \
    \     while(N /= 10) {\n            val remainder = N % 10\n            sum +=\
    \ remainder\n            binary.append(remainder)\n            N = (N - remainder)\
    \ / 10\n        }\n        val result = binary.reverse.mkString(\"\")\n      \
    \  val result = binary.reverse.mkString(\"\")\n        binary.reverse.mkString(\"\
    \")", "        val sum = 0\n        val binary = new mutable.ListBuffer[String]()\n\
    \        while(N >0) {\n            val remainder = N % 2\n            N /= 2\n\
    \            sum += remainder\n            binary.append(remainder)\n        }\n\
    \        binary.reverse.mkString(\"\")", "        val sum = 0\n        val binary\
    \ = new mutable.ListBuffer[String]()\n        while(N >=0){\n            val remainder\
    \ = N % 2\n            N /= 2\n            sum += remainder\n            binary.append(remainder)\n\
    \        }\n        binary.reverse.mkString(\"\")", "        val binary = N.toBinaryString\n\
    \        val sum = 0\n        val result = new mutable.ListBuffer[String]\n  \
    \      for(i <- 0 to binary.length-1){\n            val c = binary.charAt(i)\n\
    \            val d = c.toInt\n            sum += d\n            result += (d +\"\
    \")\n        }\n        val result = sum.toString.reverse\n        return result",
  "        val binary = N.toBinaryString\n        val sum = 0\n        for(i <- 0\
    \ until binary.length){\n            val temp = binary.charAt(i).toInt\n     \
    \       sum += temp\n        }\n        binary.reverse\n        binary.reverse.takeWhile(x\
    \ => x != '0').reverse", "        val sum = 0\n        var sumStr = \"\"\n   \
    \     var remainder = N\n        while (remainder > 0) {\n            sum += remainder\
    \ % 2\n            remainder = remainder / 2\n        }\n        sumStr += sum.toString\n\
    \        sumStr.reverse", "        var sum = 0\n        var binary = \"\"\n  \
    \      var remainder = 0\n        var remainderSum = 0\n        var remainderSum2\
    \ = 0\n        var remainderSum3 = 0\n        var remainderSum4 = 0\n        var\
    \ remainderSum5 = 0\n        var remainderSum6 = 0\n        var remainderSum7\
    \ = 0\n        var remainderSum8 = 0\n        var remainderSum9 = 0\n        var\
    \ remainderSum10 = 0\n        var remainderSum11 = 0\n        var remainderSum12\
    \ = 0\n        var remainderSum13 = 0\n        var remainderSum14 = 0\n      \
    \  var remainderSum15 = 0\n        var remainderSum16 = 0\n        var remainderSum17\
    \ = 0\n        var remainderSum18 = 0\n        var remainderSum19 = 0\n      \
    \  var remainderSum20 = 0\n        var remainderSum21 = 0\n        var remainderSum22\
    \ = 0\n        var remainderSum23 = 0\n        var remainderSum24 = 0\n      \
    \  var remainderSum25 = 0\n        var remainderSum26 = 0\n        var remainderSum27\
    \ = 0\n        var remainderSum28 = 0\n        var remainderSum29 = 0\n      \
    \  var remainderSum30 = 0\n        var remainderSum31 = 0\n        var remainderSum32\
    \ = 0\n        var remainderSum33 = 0\n        var remainderSum34 = 0\n      \
    \  var remainderSum35 = 0\n        var remainderSum36 = 0\n        var remainderSum37\
    \ = 0\n        var remainderSum38 = 0\n        var remainderSum39 = 0\n      \
    \  var remainderSum40 = 0\n        var remainderSum41 = 0\n        var remainderSum42\
    \ = 0\n        var remainderSum43 = 0\n        var remainderSum44 = 0\n      \
    \  var remainderSum45 = 0\n        var remainderSum46 = 0\n        var remainderSum47\
    \ = 0\n        var remainderSum48 = 0\n        var remainderSum49 = 0\n      \
    \  var remainderSum50 = 0\n        var remainderSum51 = 0\n        var remainderSum52\
    \ = 0\n        var remainderSum53 = 0\n        var remainderSum54 = 0\n      \
    \  var remainderSum55 = 0\n        var remainderSum56 = 0\n        var remainderSum57\
    \ = 0\n        var remainderSum58 = 0\n        var remainderSum59 = 0\n      \
    \  var remainderSum60 = 0\n        var remainderSum61 = 0\n        var remainderSum62\
    \ = 0\n        var remainderSum63 = 0\n        var remainderSum64 = 0\n      \
    \  var remainderSum65 = 0\n        var remainderSum66 = 0\n        var remainderSum67\
    \ = 0\n        var remainderSum68 = 0\n        var remainderSum69 = 0\n      \
    \  var remainderSum70 = 0\n        var remainderSum71 = 0\n        var remain",
  "        val sum = 0\n        val binary = new mutable.ListBuffer[String]()\n  \
    \      while(N >0) {\n            val digit = N % 10\n            sum += digit\n\
    \            N /= 10\n            binary.append(digit.toString)\n        }\n \
    \       val result = sum.toBinaryString\n        binary.reverse.foreach(x => result\
    \ += x)\n        result", "        var sum = 0\n        var binary = \"\"\n  \
    \      var remainder = 0\n        while(N !=0){\n            remainder = N % 2\n\
    \            N = N / 2\n            sum = sum + remainder\n            binary\
    \ = binary + remainder\n        }\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse", "        var\
    \ sum = 0\n        var binary = \"\"\n        var remainder = N\n        while(remainder\
    \ > 0) {\n            sum += remainder % 2\n            remainder = remainder\
    \ / 2\n        }\n        while(sum > 0) {\n            binary += sum % 2\n  \
    \          sum = sum / 2\n        }\n        binary", "        val sum = 0\n \
    \       var binary = \"\"\n        var remainder = N\n        while(remainder\
    \ > 0) {\n            val digit = remainder % 10\n            sum += digit\n \
    \           binary = digit + binary\n            remainder = remainder / 10\n\
    \        }\n        binary = sum.toString + binary\n        binary", "       \
    \ val sum = 0\n        var sumStr = \"\"\n        var remainder = 0\n        var\
    \ remainderStr = \"\"\n        for(i <- 0 until N) {\n            remainder =\
    \ i % 2\n            sum = sum + remainder\n            sumStr = sumStr + remainderStr\
    \ + sum\n            remainderStr = if (remainder == 0) \"0\" else \"1\"\n   \
    \     }\n        sumStr", "        var sum = 0\n        var binary = \"\"\n  \
    \      var remainder = 0\n        var remainder2 = N\n        while (remainder2\
    \ > 0) {\n            sum = sum + remainder2 % 2\n            remainder2 = remainder2\
    \ / 2\n        }\n        binary = binary(sum)\n        remainder2 = N\n     \
    \   while (remainder2 > 0) {\n            sum = sum + remainder2 % 2\n       \
    \     remainder2 = remainder2 / 2\n        }\n        binary = binary(sum)\n \
    \       remainder2 = N\n        while (remainder2 > 0) {\n            sum = sum\
    \ + remainder2 % 2\n            remainder2 = remainder2 / 2\n        }\n     \
    \   binary = binary(sum)\n        remainder2 = N\n        while (remainder2 >\
    \ 0) {\n            sum = sum + remainder2 % 2\n            remainder2 = remainder2\
    \ / 2\n        }\n        binary = binary(sum)\n        remainder2 = N\n     \
    \   while (remainder2 > 0) {\n            sum = sum + remainder2 % 2\n       \
    \     remainder2 = remainder2 / 2\n        }\n        binary = binary(sum)\n \
    \       remainder2 = N\n        while (remainder2 > 0) {\n            sum = sum\
    \ + remainder2 % 2\n            remainder2 = remainder2 / 2\n        }\n     \
    \   binary = binary(sum)\n        remainder2 = N\n        while (remainder2 >\
    \ 0) {\n            sum = sum + remainder2 % 2\n            remainder2 = remainder2\
    \ / 2\n        }\n        binary = binary(sum)\n        remainder2 = N\n     \
    \   while (remainder2 > 0) {\n            sum = sum + remainder2 % 2\n       \
    \     remainder2 = remainder2 / 2\n        }\n        binary = binary(sum)\n \
    \       remainder2 = N\n        while (remainder2 > 0) {\n            sum = sum\
    \ + remainder2 % 2\n            remainder2 = remainder2 / 2\n        }\n     \
    \   binary = binary(sum)\n        remainder2 = N\n        while (remainder2 >\
    \ 0) {\n            sum = sum + remainder2 % 2\n            remainder2 = remainder2\
    \ / 2\n        }\n        binary = binary(sum)\n        remainder2 = N\n     \
    \   while (remainder2 > 0) {\n            sum = sum + remainder2 % 2\n       \
    \     remainder2 = remainder2 / 2\n        }\n        binary = binary(sum)\n \
    \       remainder2 = N\n        while (remainder2 > 0) {\n            sum = sum\
    \ + remainder2 % 2\n            remainder2 = remainder2 / 2\n        }\n     \
    \   ", "        val sum = 0\n        val binary = new mutable.ListBuffer[String]\n\
    \        while(N /= 10) {\n            binary.append(N % 10)\n            sum\
    \ += N % 10\n            N /= 10\n        }\n        binary.reverse.foreach(x\
    \ => sum += x)\n        binary.reverse.mkString", "        val sum = 0\n     \
    \   var binary = \"\"\n        var remainder = 0\n        var i = 0\n        while(i\
    \ < N) {\n            remainder = N % 2\n            sum += remainder\n      \
    \      N = N / 2\n            binary = binary + remainder\n            i = i +\
    \ 1\n        }\n        binary = binary + sum\n        binary", "        val sum\
    \ = 0\n        val binary = new mutable.ListBuffer[String]()\n        for(i <-\
    \ 0 until N) {\n            val remainder = N % 2\n            val digit = N /\
    \ 2\n            sum += digit\n            binary.append(remainder)\n        \
    \    binary.append(digit)\n            N -= 1\n        }\n        binary.reverse.mkString(\"\
    \").padToLength(N.toInt, 0)", "        val binary = new mutable.ListBuffer[String]()\n\
    \        val digits = N.toString.reverse.grouped(2).map{case (a,b) => a + b.toInt}\n\
    \        val sum = digits.sum\n        val digit = digits.last\n        val remainder\
    \ = digits.dropRight(1)\n        val remainderSum = remainder.sum\n        val\
    \ remainderDigit = remainder.last\n        val remainderRemainder = remainder.dropRight(1)\n\
    \        val remainderRemainderSum = remainderRemainder.sum\n        val remainderRemainderDigit\
    \ = remainderRemainder.last\n        val remainderRemainderRemainder = remainderRemainder.dropRight(1)\n\
    \        val remainderRemainderRemainderSum = remainderRemainderRemainder.sum\n\
    \        val remainderRemainderRemainderDigit = remainderRemainderRemainder.last\n\
    \        val remainderRemainderRemainderRemainder = remainderRemainderRemainder.dropRight(1)\n\
    \        val remainderRemainderRemainderRemainderSum = remainderRemainderRemainderRemainder.sum\n\
    \        val remainderRemainderRemainderRemainderDigit = remainderRemainderRemainderRemainder.last\n\
    \        val remainderRemainderRemainderRemainderRemainder = remainderRemainderRemainderRemainder.dropRight(1)\n\
    \        val remainderRemainderRemainderRemainderSum = remainderRemainderRemainderRemainderRemainder.sum\n\
    \        val remainderRemainderRemainderRemainderDigit = remainderRemainderRemainderRemainder.last\n\
    \        val remainderRemainderRemainderRemainderRemainder = remainderRemainderRemainderRemainder.dropRight(1)\n\
    \        val remainderRemainderRemainderRemainderSum = remainderRemainderRemainderRemainderRemainder.sum\n\
    \        val remainderRemainderRemainderRemainderDigit = remainderRemainderRemainderRemainder.last\n\
    \        val remainderRemainderRemainderRemainderRemainder = remainderRemainderRemainderRemainder.dropRight(1)\n\
    \        val remainderRemainderRemainderRemainderSum = remainderRemainderRemainderRemainderRemainder.sum\n\
    \        val remainderRemainderRemainderRemainderDigit = remainderRemainderRemainderRemainder.last\n\
    \        val remainderRemainderRemainderRemainderRemainder = remainderRemainderRemainderRemainder.dropRight(1)\n\
    \        val remainderRemainderRemainderRemainderSum = remainderRemainderRemainderRemainderRemainder.sum\n\
    \        val remainderRemainderRemainderRemainderDigit = remainderRemainderRemain",
  "        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n        val sumOfDigits\
    \ = digits.foldLeft(0)(_ + _)\n        val result = digits.length match {\n  \
    \          case 0 => \"\"\n            case 1 => digits(0).toBinaryString\n  \
    \          case 2 => digits(0).toBinaryString + digits(1).toBinaryString\n   \
    \         case 3 => digits(0).toBinaryString + digits(1).toBinaryString + digits(2).toBinaryString\n\
    \            case 4 => digits(0).toBinaryString + digits(1).toBinaryString + digits(2).toBinaryString\
    \ + digits(3).toBinaryString\n            case 5 => digits(0).toBinaryString +\
    \ digits(1).toBinaryString + digits(2).toBinaryString + digits(3).toBinaryString\
    \ + digits(4).toBinaryString\n            case 6 => digits(0).toBinaryString +\
    \ digits(1).toBinaryString + digits(2).toBinaryString + digits(3).toBinaryString\
    \ + digits(4).toBinaryString + digits(5).toBinaryString\n            case 7 =>\
    \ digits(0).toBinaryString + digits(1).toBinaryString + digits(2).toBinaryString\
    \ + digits(3).toBinaryString + digits(4).toBinaryString + digits(5).toBinaryString\
    \ + digits(6).toBinaryString\n            case 8 => digits(0).toBinaryString +\
    \ digits(1).toBinaryString + digits(2).toBinaryString + digits(3).toBinaryString\
    \ + digits(4).toBinaryString + digits(5).toBinaryString + digits(6).toBinaryString\
    \ + digits(7).toBinaryString\n            case 9 => digits(0).toBinaryString +\
    \ digits(1).toBinaryString + digits(2).toBinaryString + digits(3).toBinaryString\
    \ + digits(4).toBinaryString + digits(5).toBinaryString + digits(6).toBinaryString\
    \ + digits(7).toBinaryString + digits(8).toBinaryString\n        }\n        result\
    \ + sumOfDigits.toBinaryString", "        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sumOfDigits = digits.foldLeft(0)(_ + _)\n        val result = digits.length\
    \ match {\n            case 0 => \"\"\n            case 1 => digits(0).toBinaryString\n\
    \            case 2 => digits(0).toBinaryString + digits(1).toBinaryString\n \
    \           case 3 => digits(0).toBinaryString + digits(1).toBinaryString + digits(2).toBinaryString\n\
    \            case 4 => digits(0).toBinaryString + digits(1).toBinaryString + digits(2).toBinaryString\
    \ + digits(3).toBinaryString\n            case 5 => digits(0).toBinaryString +\
    \ digits(1).toBinaryString + digits(2).toBinaryString + digits(3).toBinaryString\
    \ + digits(4).toBinaryString\n            case 6 => digits(0).toBinaryString +\
    \ digits(1).toBinaryString + digits(2).toBinaryString + digits(3).toBinaryString\
    \ + digits(4).toBinaryString + digits(5).toBinaryString\n            case 7 =>\
    \ digits(0).toBinaryString + digits(1).toBinaryString + digits(2).toBinaryString\
    \ + digits(3).toBinaryString + digits(4).toBinaryString + digits(5).toBinaryString\
    \ + digits(6).toBinaryString\n            case 8 => digits(0).toBinaryString +\
    \ digits(1).toBinaryString + digits(2).toBinaryString + digits(3).toBinaryString\
    \ + digits(4).toBinaryString + digits(5).toBinaryString + digits(6).toBinaryString\
    \ + digits(7).toBinaryString\n            case 9 => digits(0).toBinaryString +\
    \ digits(1).toBinaryString + digits(2).toBinaryString + digits(3).toBinaryString\
    \ + digits(4).toBinaryString + digits(5).toBinaryString + digits(6).toBinaryString\
    \ + digits(7).toBinaryString + digits(8).toBinaryString\n        }\n        result\
    \ + sumOfDigits.toBinaryString", "        val sum = 0\n        val binary = new\
    \ mutable.ListBuffer[String]()\n        while(N >0){\n            val remainder\
    \ = N % 2\n            N /= 2\n            sum += remainder\n            binary.append(remainder)\n\
    \        }\n        binary.reverse.mkString(\"\") + sum.toString", "        val\
    \ sum = 0\n        val binary = scala.collection.mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until N) {\n            val temp = scala.math.pow(10, i).toInt\n\
    \            val remainder = N - i\n            val remainderDigit = scala.math.pow(10,\
    \ remainder).toInt\n            val sumDigit = temp + remainderDigit\n       \
    \     sum += sumDigit\n            binary.append(sumDigit.toString)\n        }\n\
    \        binary.reverse.mkString(\"\")", "        val sum = 0\n        val binary\
    \ = new mutable.ListBuffer[String]\n        while(N /= 10) {\n            binary.append(N\
    \ % 10)\n            sum += N % 10\n            N /= 10\n        }\n        binary.reverse.foreach(x\
    \ => sum += x)\n        binary.reverse.mkString(\"\")", "        val digits =\
    \ N.toString.reverse.grouped(2).map(_.toInt)\n        val sum = 0\n        digits.foreach(x\
    \ => sum += x)\n        sum.toString", "        val sum = 0\n        val binary\
    \ = new mutable.ArrayBuffer[String]()\n        var remainder = N\n        while(true){\n\
    \            val remainder1 = remainder % 2\n            val remainder2 = remainder\
    \ / 2\n            val remainder3 = remainder2 / 2\n            val remainder4\
    \ = remainder3 / 2\n            val remainder5 = remainder4 / 2\n            val\
    \ remainder6 = remainder5 / 2\n            val remainder7 = remainder6 / 2\n \
    \           val remainder8 = remainder7 / 2\n            val remainder9 = remainder8\
    \ / 2\n            val remainder10 = remainder9 / 2\n            val remainder11\
    \ = remainder10 / 2\n            val remainder12 = remainder11 / 2\n         \
    \   val remainder13 = remainder12 / 2\n            val remainder14 = remainder13\
    \ / 2\n            val remainder15 = remainder14 / 2\n            val remainder16\
    \ = remainder15 / 2\n            val remainder17 = remainder16 / 2\n         \
    \   val remainder18 = remainder17 / 2\n            val remainder19 = remainder18\
    \ / 2\n            val remainder20 = remainder19 / 2\n            val remainder21\
    \ = remainder20 / 2\n            val remainder22 = remainder21 / 2\n         \
    \   val remainder23 = remainder22 / 2\n            val remainder24 = remainder23\
    \ / 2\n            val remainder25 = remainder24 / 2\n            val remainder26\
    \ = remainder25 / 2\n            val remainder27 = remainder26 / 2\n         \
    \   val remainder28 = remainder27 / 2\n            val remainder29 = remainder28\
    \ / 2\n            val remainder30 = remainder29 / 2\n            val remainder31\
    \ = remainder30 / 2\n            val remainder32 = remainder31 / 2\n         \
    \   val remainder33 = remainder32 / 2\n            val remainder34 = remainder33\
    \ / 2\n            val remainder35 = remainder34 / 2\n            val remainder36\
    \ = remainder35 / 2\n            val remainder37 = remainder36 / 2\n         \
    \   val remainder38 = remainder37 / 2\n            val remainder39 = remainder38\
    \ / 2\n            val remainder40 = remainder39 / 2\n            val remainder41\
    \ = remainder40 / 2\n            val remainder42 = remain", "        val sum =\
    \ 0\n        val binary = new mutable.ListBuffer[String]()\n        while(N /=\
    \ 10) {\n            val remainder = N % 10\n            sum += remainder\n  \
    \          binary.append(remainder)\n            N = (N - remainder) / 10\n  \
    \      }\n        val result = sum.toBinaryString\n        binary.reverse.foreach(x\
    \ => result += x)\n        result", "        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sum = digits.foldLeft(0)(_ + _)\n        val result = digits.map(x\
    \ => if (x == 0) \"0\" else x.toString.reverse).mkString(\"\")\n        val result\
    \ = if (sum == 0) \"0\" else result\n        val result = if (sum < 10) result\
    \ + sum.toString else result\n        val result = if (sum < 100) result + sum.toString.reverse.head\
    \ + sum.toString.reverse.tail.head else result\n        val result = if (sum <\
    \ 1000) result + sum.toString.reverse.head + sum.toString.reverse.tail.head +\
    \ sum.toString.reverse.tail.tail.head else result\n        val result = if (sum\
    \ < 10000) result + sum.toString.reverse.head + sum.toString.reverse.tail.head\
    \ + sum.toString.reverse.tail.tail.head + sum.toString.reverse.tail.tail.tail.head\
    \ else result\n        val result = if (sum < 100000) result + sum.toString.reverse.head\
    \ + sum.toString.reverse.tail.head + sum.toString.reverse.tail.tail.head + sum.toString.reverse.tail.tail.tail.head\
    \ + sum.toString.reverse.tail.tail.tail.tail.head else result\n        val result\
    \ = if (sum < 1000000) result + sum.toString.reverse.head + sum.toString.reverse.tail.head\
    \ + sum.toString.reverse.tail.tail.head + sum.toString.reverse.tail.tail.tail.head\
    \ + sum.toString.reverse.tail.tail.tail.tail.head + sum.toString.reverse.tail.tail.tail.tail.tail.head\
    \ else result\n        val result = if (sum < 10000000) result + sum.toString.reverse.head\
    \ + sum.toString.reverse.tail.head + sum.toString.reverse.tail.tail.head + sum.toString.reverse.tail.tail.tail.head\
    \ + sum.toString.reverse.tail.tail.tail.tail.head + sum.toString.reverse.tail.tail.tail.tail.tail.head\
    \ else result\n        val result = if (sum < 100000000) result + sum.toString.reverse.head\
    \ + sum.toString.reverse.tail.head + sum.toString.reverse.tail.tail.head + sum.toString.reverse.tail.tail.tail.head\
    \ + sum.toString.reverse.tail.tail.tail.tail.head + sum.toString.reverse.tail.tail.tail",
  "        val sum = 0\n        var sumOfDigits = 0\n        var sumOfDigitsInBinary\
    \ = 0\n        var binaryString = \"\"\n        var remainder = 0\n        while(sum\
    \ < N) {\n            val remainder = N % 10\n            N /= 10\n          \
    \  sum += remainder\n            sumOfDigits += remainder\n            sumOfDigitsInBinary\
    \ += remainder\n            binaryString += remainder\n        }\n        val\
    \ remainderOfSum = sum % 10\n        val remainderOfSumOfDigits = sumOfDigits\
    \ % 10\n        val remainderOfSumOfDigitsInBinary = sumOfDigitsInBinary % 10\n\
    \        val remainderOfSumOfDigitsInBinaryString = remainderOfSumOfDigits % 10\n\
    \        val remainderOfSumOfDigitsInBinaryStringInBinary = remainderOfSumOfDigitsInBinary\
    \ % 10\n        val remainderOfSumOfDigitsInBinaryStringInBinaryString = remainderOfSumOfDigitsInBinaryString\
    \ % 10\n        val remainderOfSumOfDigitsInBinaryStringInBinaryStringInBinary\
    \ = remainderOfSumOfDigitsInBinaryStringInBinary % 10\n        val remainderOfSumOfDigitsInBinaryStringInBinaryStringInBinaryString\
    \ = remainderOfSumOfDigitsInBinaryStringInBinaryString % 10\n        val remainderOfSumOfDigitsInBinaryStringInBinaryStringInBinaryStringInBinary\
    \ = remainderOfSumOfDigitsInBinaryStringInBinaryStringInBinary % 10\n        val\
    \ remainderOfSumOfDigitsInBinaryStringInBinaryStringInBinaryStringInBinaryString\
    \ = remainderOfSumOfDigitsInBinaryStringInBinaryStringInBinaryString % 10\n  \
    \      val remainderOfSumOfDigitsInBinaryStringInBinaryStringInBinaryStringInBinaryStringInBinary\
    \ = remainderOfSumOfDigitsInBinaryStringInBinaryStringInBinaryStringInBinary %\
    \ 10\n        val remainderOfSumOfDigitsInBinaryStringInBinaryStringInBinaryStringInBinaryStringInBinaryString\
    \ = remainderOfSumOfDigitsInBinaryStringInBinaryStringInBinaryStringInBinaryString\
    \ % 10\n        val remainderOfSumOfDigitsInBinaryStringInBinaryStringInBinaryStringInBinaryStringInBinaryStringInBinary\
    \ = remainderOfSumOfDigitsInBinaryStringInBinaryStringInBinaryStringInBinaryStringInBinaryString\
    \ % 10\n        val remainderOfSumOfDigitsInBinaryStringInBinaryStringInBinaryStringInBinaryStringInBinaryStringInBinaryString\
    \ = remainderOfSumOfDigitsInBinaryStringInBinary", "        var sum = 0\n    \
    \    var binary = \"\"\n        var remainder = 0\n        var remainder2 = 0\n\
    \        var remainder3 = 0\n        var remainder4 = 0\n        var remainder5\
    \ = 0\n        var remainder6 = 0\n        var remainder7 = 0\n        var remainder8\
    \ = 0\n        var remainder9 = 0\n        var remainder10 = 0\n        var remainder11\
    \ = 0\n        var remainder12 = 0\n        var remainder13 = 0\n        var remainder14\
    \ = 0\n        var remainder15 = 0\n        var remainder16 = 0\n        var remainder17\
    \ = 0\n        var remainder18 = 0\n        var remainder19 = 0\n        var remainder20\
    \ = 0\n        var remainder21 = 0\n        var remainder22 = 0\n        var remainder23\
    \ = 0\n        var remainder24 = 0\n        var remainder25 = 0\n        var remainder26\
    \ = 0\n        var remainder27 = 0\n        var remainder28 = 0\n        var remainder29\
    \ = 0\n        var remainder30 = 0\n        var remainder31 = 0\n        var remainder32\
    \ = 0\n        var remainder33 = 0\n        var remainder34 = 0\n        var remainder35\
    \ = 0\n        var remainder36 = 0\n        var remainder37 = 0\n        var remainder38\
    \ = 0\n        var remainder39 = 0\n        var remainder40 = 0\n        var remainder41\
    \ = 0\n        var remainder42 = 0\n        var remainder43 = 0\n        var remainder44\
    \ = 0\n        var remainder45 = 0\n        var remainder46 = 0\n        var remainder47\
    \ = 0\n        var remainder48 = 0\n        var remainder49 = 0\n        var remainder50\
    \ = 0\n        var remainder51 = 0\n        var remainder52 = 0\n        var remainder53\
    \ = 0\n        var remainder54 = 0\n        var remainder55 = 0\n        var remainder56\
    \ = 0\n        var remainder57 = 0\n        var remainder58 = 0\n        var remainder59\
    \ = 0\n        var remainder60 = 0\n        var remainder61 = 0\n        var remainder62\
    \ = 0\n        var remainder63 = 0\n        var remainder64 = 0\n        var remainder65\
    \ = 0\n        var remainder66 = 0\n        var remainder67 = 0\n        var remainder68\
    \ = 0\n        var remainder69 = 0\n        var remainder70 = 0\n        var remainder71\
    \ = 0\n        var remainder72 = 0\n        var remainder73 = 0\n        var remainder74\
    \ = 0\n        var remainder75 = 0\n        var remainder76 = 0\n        var remainder77\
    \ = 0\n        var remainder78 = 0\n        var remainder79 = 0\n        var remainder80\
    \ = 0\n        var remainder81 = 0\n        var remainder82 = 0\n        var remainder83\
    \ = 0\n        var remainder84 = 0\n", "        val sum = 0\n        val binary\
    \ = new mutable.HashMap[Int, String]()\n        val binary = N.toString.reverse.foldLeft(new\
    \ mutable.HashMap[Int, String]())((acc, x) => {\n            val digit = x.toInt\n\
    \            val sum = acc.getOrElse(digit, 0)\n            val bin = sum.toString\
    \ + x.toString\n            acc.put(digit, bin)\n            acc\n        })\n\
    \        binary.values.toList.reverse.foldLeft(\"\")(_ + _)", "        val binary\
    \ = N.toBinaryString\n        val binary = binary.reverse\n        val sum = 0\n\
    \        val result = new mutable.ListBuffer[String]\n        for(i <- 0 to binary.length-1){\n\
    \            val temp = binary(i).toInt\n            sum += temp\n           \
    \ if(sum > 9){\n                val temp = sum.toString.toInt\n              \
    \  val temp = temp.toBinaryString\n                val temp = temp.reverse\n \
    \               val temp = temp + temp\n                result += temp\n     \
    \           sum = 0\n            }\n        }\n        binary.reverse\n      \
    \  binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        ",
  "        val binary = scala.collection.mutable.ListBuffer[String]()\n        var\
    \ sum = 0\n        while(N >=0){\n            val remainder = N % 2\n        \
    \    sum += remainder\n            N /= 2\n            binary.append(remainder)\n\
    \        }\n        binary.reverse.mkString(\"\")", "        val sums = mutable.ArrayBuffer.empty[Int]\n\
    \        var sum = 0\n        for(i <- 0 until N) {\n            val digit = i\
    \ % 10\n            sum += digit\n            sums += digit\n        }\n     \
    \   val result = sums.toString.reverse.foldLeft(\"\")(_ + _ + _)\n        sums.clear()\n\
    \        result", "        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sumOfDigits = digits.foldLeft(0)(_ + _)\n        val binaryDigits\
    \ = digits.map(x => if (x == 0) \"0\" else \"1\")\n        val result = binaryDigits.take(sumOfDigits).reverse.mkString\n\
    \        result", "        val sum = 0\n        var binary = \"\"\n        var\
    \ sumOfDigits = 0\n        while(N >0) {\n            sumOfDigits += N % 2\n \
    \           N /= 2\n        }\n        while(sumOfDigits > 0) {\n            binary\
    \ += (sumOfDigits % 2).toString\n            sumOfDigits /= 2\n        }\n   \
    \     binary", "        val sum = 0\n        val binary = new mutable.ListBuffer[String]\n\
    \        while(N >0){\n            val temp = N % 10\n            sum += temp\n\
    \            binary.append(temp.toString)\n            N = N / 10\n        }\n\
    \        val result = sum.toString\n        binary.reverse.foreach(x => result\
    \ += x)\n        result", "        val sum = 0\n        val binary = new mutable.LinkedList[String]()\n\
    \        for(i <- 0 until N) {\n            val digit = i % 10\n            sum\
    \ += digit\n            binary.addLast(digit.toString)\n        }\n        binary.reverse.foldLeft(sum.toString)\
    \ { (acc, digit) => acc + (digit.charAt(0).toInt * Math.pow(10, digit.lastIndexOf(\"\
    1\") - digit.lastIndexOf(\"0\") + 1))}", "        val binary = N.toBinaryString\n\
    \        val sum = 0\n        var i = 0\n        while (i < binary.length) {\n\
    \            val digit = binary.charAt(i)\n            sum += digit.toInt\n  \
    \          i += 1\n        }\n        val result = sum.toBinaryString\n      \
    \  return result", "        val sum = 0\n        var sumStr = \"\"\n        var\
    \ i = 0\n        while(i < N) {\n            sum += N % 10\n            N = (N\
    \ / 10).toLong\n            i += 1\n        }\n        sumStr += sum.toString\n\
    \        sumStr.reverse", "        var sum = 0\n        var binary = \"\"\n  \
    \      for(i <- 0 until N) {\n            val temp = N % 10\n            sum +=\
    \ temp\n            binary += temp.toString\n            N /= 10\n        }\n\
    \        if(sum > 0) {\n            binary += sum.toString\n        }\n      \
    \  return binary", "        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sumOfDigits = digits.foldLeft(0)(_ + _)\n        val binaryDigits\
    \ = digits.map(x => if (x == 0) \"0\" else \"1\")\n        val result = binaryDigits.take(sumOfDigits).mkString(\"\
    \")\n        result + (if (sumOfDigits == 0) \"\" else \"\")", "        val sum\
    \ = 0\n        val binary = new mutable.ListBuffer[String]()\n        while(N\
    \ /= 10) {\n            val remainder = N % 10\n            sum += remainder\n\
    \            binary.append(remainder)\n            N = (N - remainder) / 10\n\
    \        }\n        binary.reverse.mkString(\"\") + sum.toString", "        val\
    \ sum = 0\n        val binary = new mutable.MutableList[String]()\n        while(N\
    \ !=0){\n            val temp = N % 10\n            sum += temp\n            binary.append(temp.toString)\n\
    \            N = N / 10\n        }\n        val result = sum.toString\n      \
    \  binary.reverse.foreach(x => result += x)\n        result", "        val sum\
    \ = 0\n        var binary = \"\"\n        for(i <- 0 until N) {\n            val\
    \ digit = math.pow(2,i)\n            sum += digit\n            binary += digit.toString\n\
    \        }\n        binary = binary.reverse\n        binary.reverse", "      \
    \  val binary = scala.collection.mutable.ListBuffer[String]()\n        val digits\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val sum = 0\n        while(N\
    \ /= 10) {\n            digits.append(N % 10)\n            sum += N % 10\n   \
    \         N = (N / 10).toInt\n        }\n        while(sum > 0) {\n          \
    \  binary.append(digits.takeWhile(_ > 0).mkString(\"\"))\n            sum -= digits.takeWhile(_\
    \ > 0).sum\n        }\n        binary.reverse.mkString(\"\")", "        val sum\
    \ = 0\n        var sumOfDigits = 0\n        var binaryString = \"\"\n        var\
    \ remainder = 0\n        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val digitCount = digits.count\n        val digitSum = digits.sum\n  \
    \      val digitSumOfDigits = digitSum / digitCount\n        val digitSumOfDigitsToOne\
    \ = digitSumOfDigits + 1\n        val digitSumOfDigitsToTwo = digitSumOfDigitsToOne\
    \ * 2\n        val digitSumOfDigitsToFour = digitSumOfDigitsToTwo * 4\n      \
    \  val digitSumOfDigitsToEight = digitSumOfDigitsToFour * 8\n        val digitSumOfDigitsToEightToOne\
    \ = digitSumOfDigitsToEight / 2\n        val digitSumOfDigitsToEightToTwo = digitSumOfDigitsToEightToOne\
    \ * 2\n        val digitSumOfDigitsToEightToFour = digitSumOfDigitsToEightToTwo\
    \ * 4\n        val digitSumOfDigitsToEightToEight = digitSumOfDigitsToEightToFour\
    \ * 8\n        val digitSumOfDigitsToEightToEightToOne = digitSumOfDigitsToEightToEight\
    \ / 2\n        val digitSumOfDigitsToEightToEightToTwo = digitSumOfDigitsToEightToEightToOne\
    \ * 2\n        val digitSumOfDigitsToEightToEightToFour = digitSumOfDigitsToEightToEightToTwo\
    \ * 4\n        val digitSumOfDigitsToEightToEightToEight = digitSumOfDigitsToEightToEightToFour\
    \ * 8\n        val digitSumOfDigitsToEightToEightToEightToOne = digitSumOfDigitsToEightToEightToEight\
    \ / 2\n        val digitSumOfDigitsToEightToEightToEightToTwo = digitSumOfDigitsToEightToEightToEightToOne\
    \ * 2\n        val digitSumOfDigitsToEightToEightToEightToFour = digitSumOfDigitsToEightToEightToEightToTwo\
    \ * 4\n        val digitSumOfDigitsToEightToEightToEightToEight = digitSumOfDig",
  "        var sum = 0\n        var binary = \"\"\n        var remainder = N\n   \
    \     while (remainder > 0) {\n            sum += (remainder % 2)\n          \
    \  binary = remainder + binary\n            remainder = remainder / 2\n      \
    \  }\n        binary = binary.reverse\n        sum.toString", "        val sum\
    \ = 0\n        val binary = new mutable.ListBuffer[String]\n        for(i <- 0\
    \ until N) {\n            val remainder = N % 2\n            val digit = N / 2\n\
    \            sum += digit\n            binary.append(remainder)\n            binary.append(digit)\n\
    \            N = N / 2\n        }\n        binary.reverse.mkString(\"\")", " \
    \       val binary = N.toBinaryString\n        val sum = 0\n        for(i <- 0\
    \ to binary.length-1){\n            sum += binary(i)\n        }\n        sum.toString",
  "        val sum = 0\n        val binary = new mutable.LinkedList[String]()\n  \
    \      for(i <- 0 until N) {\n            val digit = i % 10\n            sum\
    \ += digit\n            binary.addLast(digit.toString)\n        }\n        val\
    \ result = sum.toBinaryString\n        binary.reverse.foreach(binary.addLast(_))\n\
    \        binary.reverse.foreach(binary.addLast(_))\n        binary.reverse.foreach(binary.addLast(_))\n\
    \        binary.reverse.foreach(binary.addLast(_))\n        binary.reverse.foreach(binary.addLast(_))\n\
    \        binary.reverse.foreach(binary.addLast(_))\n        binary.reverse.foreach(binary.addLast(_))\n\
    \        binary.reverse.foreach(binary.addLast(_))\n        binary.reverse.foreach(binary.addLast(_))\n\
    \        binary.reverse.foreach(binary.addLast(_))\n        binary.reverse.foreach(binary.addLast(_))\n\
    \        binary.reverse.foreach(binary.addLast(_))\n        binary.reverse.foreach(binary.addLast(_))\n\
    \        binary.reverse.foreach(binary.addLast(_))\n        binary.reverse.foreach(binary.addLast(_))\n\
    \        binary.reverse.foreach(binary.addLast(_))\n        binary.reverse.foreach(binary.addLast(_))\n\
    \        binary.reverse.foreach(binary.addLast(_))\n        binary.reverse.foreach(binary.addLast(_))\n\
    \        binary.reverse.foreach(binary.addLast(_))\n        binary.reverse.foreach(binary.addLast(_))\n\
    \        binary.reverse.foreach(binary.addLast(_))\n        binary.reverse.foreach(binary.addLast(_))\n\
    \        binary.reverse.foreach(binary.addLast(_))\n        binary.reverse.foreach(binary.addLast(_))\n\
    \        binary.reverse.foreach(binary.addLast(_))\n        binary.reverse.foreach(binary.addLast(_))\n\
    \        binary.reverse.foreach(binary.addLast(_))\n        binary.reverse.foreach(binary.addLast(_))\n\
    \        binary.reverse.foreach(binary.addLast(_))\n        binary.reverse.foreach(binary.addLast(_))\n\
    \        binary.reverse.foreach(binary.addLast(_))\n        binary.reverse.",
  "        val sum = 0\n        var binary = \"\"\n        var i = N\n        while\
    \ (i > 0) {\n            val remainder = i % 2\n            sum = sum + remainder\n\
    \            i = i / 2\n            binary = binary + remainder\n        }\n \
    \       binary = binary.reverse\n        binary.reverse", "        var sum = 0\n\
    \        var binary = \"\"\n        var remainder = 0\n        var remainder1\
    \ = 0\n        var remainder2 = 0\n        var remainder3 = 0\n        var remainder4\
    \ = 0\n        var remainder5 = 0\n        var remainder6 = 0\n        var remainder7\
    \ = 0\n        var remainder8 = 0\n        var remainder9 = 0\n        var remainder10\
    \ = 0\n        var remainder11 = 0\n        var remainder12 = 0\n        var remainder13\
    \ = 0\n        var remainder14 = 0\n        var remainder15 = 0\n        var remainder16\
    \ = 0\n        var remainder17 = 0\n        var remainder18 = 0\n        var remainder19\
    \ = 0\n        var remainder20 = 0\n        var remainder21 = 0\n        var remainder22\
    \ = 0\n        var remainder23 = 0\n        var remainder24 = 0\n        var remainder25\
    \ = 0\n        var remainder26 = 0\n        var remainder27 = 0\n        var remainder28\
    \ = 0\n        var remainder29 = 0\n        var remainder30 = 0\n        var remainder31\
    \ = 0\n        var remainder32 = 0\n        var remainder33 = 0\n        var remainder34\
    \ = 0\n        var remainder35 = 0\n        var remainder36 = 0\n        var remainder37\
    \ = 0\n        var remainder38 = 0\n        var remainder39 = 0\n        var remainder40\
    \ = 0\n        var remainder41 = 0\n        var remainder42 = 0\n        var remainder43\
    \ = 0\n        var remainder44 = 0\n        var remainder45 = 0\n        var remainder46\
    \ = 0\n        var remainder47 = 0\n        var remainder48 = 0\n        var remainder49\
    \ = 0\n        var remainder50 = 0\n        var remainder51 = 0\n        var remainder52\
    \ = 0\n        var remainder53 = 0\n        var remainder54 = 0\n        var remainder55\
    \ = 0\n        var remainder56 = 0\n        var remainder57 = 0\n        var remainder58\
    \ = 0\n        var remainder59 = 0\n        var remainder60 = 0\n        var remainder61\
    \ = 0\n        var remainder62 = 0\n        var remainder63 = 0\n        var remainder64\
    \ = 0\n        var remainder65 = 0\n        var remainder66 = 0\n        var remainder67\
    \ = 0\n        var remainder68 = 0\n        var remainder69 = 0\n        var remainder70\
    \ = 0\n        var remainder71 = 0\n        var remainder72 = 0\n        var remainder73\
    \ = 0\n        var remainder74 = 0\n        var remainder75 = 0\n        var remainder76\
    \ = 0\n        var remainder77 = 0\n        var remainder78 = 0\n        var remainder79\
    \ = 0\n        var remainder80 = 0\n        var remainder81 = 0\n        var remainder82\
    \ = 0\n        var remainder83 = 0\n", "        val binary = N.toBinaryString\n\
    \        val sum = 0\n        var i = 0\n        while (i < binary.length) {\n\
    \            val digit = binary.charAt(i)\n            sum += digit.toInt\n  \
    \          i += 1\n        }\n        binary.reverse.foldLeft(\"\")(_ + _ + _)",
  "        val binary = N.toBinaryString\n        val sum = 0\n        for(i <- 0\
    \ to binary.length-1){\n            val temp = binary.charAt(i).toInt\n      \
    \      sum += temp\n        }\n        binary.reverse\n        binary.toString\
    \ + sum.toString", "        val sum = 0\n        var binary = \"\"\n        for(i\
    \ <- 0 until N) {\n            val digit = N % 10\n            sum += digit\n\
    \            binary += digit.toString\n            N /= 10\n        }\n      \
    \  if(sum > 0) {\n            binary += sum.toString\n        }\n        binary",
  "        var sum = 0\n        var binary = \"\"\n        var remainder = 0\n   \
    \     var remainder2 = 0\n        var remainder3 = 0\n        var remainder4 =\
    \ 0\n        var remainder5 = 0\n        var remainder6 = 0\n        var remainder7\
    \ = 0\n        var remainder8 = 0\n        var remainder9 = 0\n        var remainder10\
    \ = 0\n        var remainder11 = 0\n        var remainder12 = 0\n        var remainder13\
    \ = 0\n        var remainder14 = 0\n        var remainder15 = 0\n        var remainder16\
    \ = 0\n        var remainder17 = 0\n        var remainder18 = 0\n        var remainder19\
    \ = 0\n        var remainder20 = 0\n        var remainder21 = 0\n        var remainder22\
    \ = 0\n        var remainder23 = 0\n        var remainder24 = 0\n        var remainder25\
    \ = 0\n        var remainder26 = 0\n        var remainder27 = 0\n        var remainder28\
    \ = 0\n        var remainder29 = 0\n        var remainder30 = 0\n        var remainder31\
    \ = 0\n        var remainder32 = 0\n        var remainder33 = 0\n        var remainder34\
    \ = 0\n        var remainder35 = 0\n        var remainder36 = 0\n        var remainder37\
    \ = 0\n        var remainder38 = 0\n        var remainder39 = 0\n        var remainder40\
    \ = 0\n        var remainder41 = 0\n        var remainder42 = 0\n        var remainder43\
    \ = 0\n        var remainder44 = 0\n        var remainder45 = 0\n        var remainder46\
    \ = 0\n        var remainder47 = 0\n        var remainder48 = 0\n        var remainder49\
    \ = 0\n        var remainder50 = 0\n        var remainder51 = 0\n        var remainder52\
    \ = 0\n        var remainder53 = 0\n        var remainder54 = 0\n        var remainder55\
    \ = 0\n        var remainder56 = 0\n        var remainder57 = 0\n        var remainder58\
    \ = 0\n        var remainder59 = 0\n        var remainder60 = 0\n        var remainder61\
    \ = 0\n        var remainder62 = 0\n        var remainder63 = 0\n        var remainder64\
    \ = 0\n        var remainder65 = 0\n        var remainder66 = 0\n        var remainder67\
    \ = 0\n        var remainder68 = 0\n        var remainder69 = 0\n        var remainder70\
    \ = 0\n        var remainder71 = 0\n        var remainder72 = 0\n        var remainder73\
    \ = 0\n        var remainder74 = 0\n        var remainder75 = 0\n        var remainder76\
    \ = 0\n        var remainder77 = 0\n        var remainder78 = 0\n        var remainder79\
    \ = 0\n        var remainder80 = 0\n        var remainder81 = 0\n        var remainder82\
    \ = 0\n        var remainder83 = 0\n        var remainder84 = 0\n", "        val\
    \ sums = mutable.HashMap[Int, Int]()\n        val digits = N.toString.reverse.map(_.toInt)\n\
    \        val len = digits.length\n        val sum = 0\n        val sumOfDigits\
    \ = 0 // sum of digits in the binary number\n        val sumOfDigitsInBinary =\
    \ 0 // sum of digits in the binary number in binary\n        val sumOfDigitsInBinaryInBinary\
    \ = 0 // sum of digits in the binary number in binary in binary\n        val sumOfDigitsInBinaryInBinaryInBinary\
    \ = 0 // sum of digits in the binary number in binary in binary in binary\n  \
    \      val sumOfDigitsInBinaryInBinaryInBinaryInBinary = 0 // sum of digits in\
    \ the binary number in binary in binary in binary in binary\n        val sumOfDigitsInBinaryInBinaryInBinaryInBinaryInBinary\
    \ = 0 // sum of digits in the binary number in binary in binary in binary in binary\
    \ in binary\n        val sumOfDigitsInBinaryInBinaryInBinaryInBinaryInBinaryInBinary\
    \ = 0 // sum of digits in the binary number in binary in binary in binary in binary\
    \ in binary in binary in binary\n        val sumOfDigitsInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinary\
    \ = 0 // sum of digits in the binary number in binary in binary in binary in binary\
    \ in binary in binary in binary in binary\n        val sumOfDigitsInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinary\
    \ = 0 // sum of digits in the binary number in binary in binary in binary in binary\
    \ in binary in binary in binary in binary in binary\n        val sumOfDigitsInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinary\
    \ = 0 // sum of digits in the binary number in binary in binary in binary in binary\
    \ in binary in binary in binary in binary in binary in binary\n        val sumOfDigitsInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryInBinaryIn",
  "        val binary = scala.collection.mutable.StringBuilder()\n        var sum\
    \ = 0\n        var remainder = 0\n        var remainderSum = 0\n        var lastDigit\
    \ = 0\n        var lastDigitSum = 0\n        var lastDigitSumLastDigit = 0\n \
    \       var lastDigitSumLastDigitLastDigit = 0\n        var lastDigitSumLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigit = 0\n    \
    \    var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigit = 0\n     \
    \   var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit = 0\n\
    \        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigit", "        val binary = N.toBinaryString\n      \
    \  val sum = 0\n        val bin = binary.toList\n        val bin2 = bin.map(x\
    \ => if (x == '1') 1 else 0)\n        val bin3 = bin2.map(x => if (x == '1') 1\
    \ else 0)\n        val bin4 = bin3.map(x => if (x == '1') 1 else 0)\n        val\
    \ bin5 = bin4.map(x => if (x == '1') 1 else 0)\n        val bin6 = bin5.map(x\
    \ => if (x == '1') 1 else 0)\n        val bin7 = bin6.map(x => if (x == '1') 1\
    \ else 0)\n        val bin8 = bin7.map(x => if (x == '1') 1 else 0)\n        val\
    \ bin9 = bin8.map(x => if (x == '1') 1 else 0)\n        val bin10 = bin9.map(x\
    \ => if (x == '1') 1 else 0)\n        val bin11 = bin10.map(x => if (x == '1')\
    \ 1 else 0)\n        val bin12 = bin11.map(x => if (x == '1') 1 else 0)\n    \
    \    val bin13 = bin12.map(x => if (x == '1') 1 else 0)\n        val bin14 = bin13.map(x\
    \ => if (x == '1') 1 else 0)\n        val bin15 = bin14.map(x => if (x == '1')\
    \ 1 else 0)\n        val bin16 = bin15.map(x => if (x == '1') 1 else 0)\n    \
    \    val bin17 = bin16.map(x => if (x == '1') 1 else 0)\n        val bin18 = bin17.map(x\
    \ => if (x == '1') 1 else 0)\n        val bin19 = bin18.map(x => if (x == '1')\
    \ 1 else 0)\n        val bin20 = bin19.map(x => if (x == '1') 1 else 0)\n    \
    \    val bin21 = bin20.map(x => if (x == '1') 1 else 0)\n        val bin22 = bin21.map(x\
    \ => if (x == '1') 1 else 0)\n        val bin23 = bin22.map(x => if (x == '1')\
    \ 1 else 0)\n        val bin24 = bin23.map(x => if (x == '1') 1 else 0)\n    \
    \    val bin25 = bin24.map(x => if (x == '1') 1 else 0)\n        val bin26 = bin25.map(x\
    \ => if (x == '1') 1 else 0)\n        val bin27 = bin26.map(x => if (x == '1')\
    \ 1 else 0)\n        val bin28 = bin27.map(x => if (x == '1') 1 else 0)\n    \
    \    val bin29 = bin28.map(x => if (x == '1", "        val binary = N.toBinaryString\n\
    \        val sum = 0\n        for(i <- binary.indices) {\n            sum += binary.charAt(i)\n\
    \        }\n        binary.reverse\n        binary.reverse.takeWhile(_ != '0').mkString",
  "        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n        val sumOfDigits\
    \ = digits.foldLeft(0)(_ + _)\n        val binaryDigits = digits.map(_.toBinaryString).mkString(\"\
    \")\n        val binarySum = binaryDigits.reverse.grouped(2).map(_.toInt).sum\n\
    \        val result = if (sumOfDigits == binarySum) binaryDigits else \"\"\n \
    \       result", "        val sum = 0\n        val binary = new mutable.MutableList[String]\n\
    \        val remainder = N % 2\n        val remainder2 = N / 2\n        val remainder3\
    \ = N / 3\n        val remainder4 = N / 4\n        val remainder5 = N / 5\n  \
    \      val remainder6 = N / 6\n        val remainder7 = N / 7\n        val remainder8\
    \ = N / 8\n        val remainder9 = N / 9\n        val remainder10 = N / 10\n\
    \        val remainder11 = N / 11\n        val remainder12 = N / 12\n        val\
    \ remainder13 = N / 13\n        val remainder14 = N / 14\n        val remainder15\
    \ = N / 15\n        val remainder16 = N / 16\n        val remainder17 = N / 17\n\
    \        val remainder18 = N / 18\n        val remainder19 = N / 19\n        val\
    \ remainder20 = N / 20\n        val remainder21 = N / 21\n        val remainder22\
    \ = N / 22\n        val remainder23 = N / 23\n        val remainder24 = N / 24\n\
    \        val remainder25 = N / 25\n        val remainder26 = N / 26\n        val\
    \ remainder27 = N / 27\n        val remainder28 = N / 28\n        val remainder29\
    \ = N / 29\n        val remainder30 = N / 30\n        val remainder31 = N / 31\n\
    \        val remainder32 = N / 32\n        val remainder33 = N / 33\n        val\
    \ remainder34 = N / 34\n        val remainder35 = N / 35\n        val remainder36\
    \ = N / 36\n        val remainder37 = N / 37\n        val remainder38 = N / 38\n\
    \        val remainder39 = N / 39\n        val remainder40 = N / 40\n        val\
    \ remainder41 = N / 41\n        val remainder42 = N / 42\n        val remainder43\
    \ = N / 43\n        val remainder44 = N / 44\n        val remainder45 = N / 45\n\
    \        val remainder46 = N / 46\n        val remainder47 = N / 47\n        val\
    \ remainder48 = N / 48\n        val remainder49 = N / 49\n        val remainder50\
    \ = N / 50\n        val remainder51 = N / ", "        val sum = 0\n        val\
    \ binary = scala.collection.mutable.ListBuffer[String]()\n        while(N >0)\
    \ {\n            val remainder = N % 2\n            N /= 2\n            sum +=\
    \ remainder\n            binary += remainder.toString\n        }\n        binary.reverse.mkString",
  "        var sum = 0\n        var binary = \"\"\n        var remainder = 0\n   \
    \     while(N !=0){\n            remainder = N % 2\n            N = N / 2\n  \
    \          sum = sum + remainder\n            binary = binary + remainder\n  \
    \      }\n        binary = binary + sum\n        return binary", "        val\
    \ sum = 0\n        val binary = new mutable.LinkedList[String]\n        for(i\
    \ <- 0 until N) {\n            val remainder = i % 2\n            val digit =\
    \ i / 2\n            sum += digit\n            binary.addLast(remainder.toString)\n\
    \        }\n        binary.reverse.mkString(\"\")", "        val binary = N.toBinaryString\n\
    \        val sum = 0\n        val binNum = binary.toList\n        binNum.foreach(x\
    \ => sum += x)\n        binNum.map(x => if (sum == x) \"1\" else \"0\").mkString",
  "        var sum = 0\n        var binary = \"\"\n        var remainder = 0\n   \
    \     var remainder2 = N\n        while (remainder2 > 0) {\n            remainder\
    \ = remainder2 % 2\n            sum = sum + remainder\n            binary = binary\
    \ + remainder\n            remainder2 = (remainder2 - remainder) / 2\n       \
    \ }\n        binary = binary + sum.toString\n        return binary", "       \
    \ val digits = N.toString.reverse.grouped(2).map(_.toInt)\n        val sumOfDigits\
    \ = digits.foldLeft(0)(_ + _)\n        val binaryDigits = digits.map(x => x.toBinaryString).mkString\n\
    \        val binarySum = binaryDigits.reverse.grouped(2).map(_.toInt).sum\n  \
    \      val result = if (sumOfDigits == binarySum) binaryDigits else \"\"\n   \
    \     result", "        val sum = 0\n        val binary = new mutable.Array[String](N.toInt)\n\
    \        for(i <- 0 until N.toInt){\n            val remainder = N % 2\n     \
    \       val digit = N / 2\n            sum += digit\n            binary(i) = remainder.toString\n\
    \            N = N / 2\n        }\n        binary.toList.mkString(\"\")", "  \
    \      var sum = 0\n        var binary = \"\"\n        var remainder = 0\n   \
    \     var i = 0\n        while(i < N) {\n            remainder = N % 2\n     \
    \       N = N / 2\n            sum = sum + remainder\n            binary = binary\
    \ + remainder\n            i = i + 1\n        }\n        binary = binary + sum\n\
    \        return binary", "        val sum = 0\n        val binary = new mutable.ArrayBuffer[String]()\n\
    \        for(i <- 0 until N) {\n            val remainder = N % 2\n          \
    \  val digit = N / 2\n            sum += digit\n            binary.append(remainder)\n\
    \            N = digit\n        }\n        binary.reverse.mkString(\"\")", " \
    \       val sum = 0\n        val binary = new mutable.ListBuffer[String]()\n \
    \       while(N >0) {\n            val remainder = N % 2\n            N /= 2\n\
    \            sum += remainder\n            binary.append(remainder)\n        }\n\
    \        binary.reverse.mkString(\"\")", "        val sum = 0\n        val binary\
    \ = new mutable.ArrayList[String]\n        for(i <- 0 until N) {\n           \
    \ val digit = math.pow(10, i).toInt\n            sum += digit\n            binary.add(digit.toString)\n\
    \        }\n        binary.toList.map(_.length).sum.toString", "        val digits\
    \ = N.toString.reverse.grouped(2).map(_.toInt)\n        val sum = 0\n        val\
    \ result = new mutable.ListBuffer[String]()\n        digits.foreach { digit =>\n\
    \            sum += digit._1\n            result += digit._2\n        }\n    \
    \    val binary = sum.toString.reverse.grouped(2).map(_.toInt)\n        binary.foreach\
    \ { binary =>\n            result += binary._1 + binary._2\n        }\n      \
    \  result.toString", "        val digits = N.toString.reverse.grouped(2).map(_\
    \ + \"\").reverse\n        val sum = 0\n        val result = new mutable.StringBuilder\n\
    \        for (i <- 0 until digits.length) {\n            val digit = digits(i)\n\
    \            val binary = digits(i).reverse\n            val sum = sum + binary.toInt\n\
    \            if (sum > 9) {\n                result.append((sum / 10).toString\
    \ + binary.toString + digit)\n                sum = sum % 10\n            } else\
    \ {\n                result.append((sum / 10).toString + binary.toString + digit)\n\
    \                sum = sum % 10\n            }\n        }\n        return result.toString",
  "        val binary = N.toBinaryString\n        val sum = 0\n        var sumOfDigits\
    \ = 0\n        var binaryIndex = 0\n        var binaryString = \"\"\n        while\
    \ (binaryIndex < binary.length) {\n            val digit = binary.charAt(binaryIndex)\n\
    \            sum += digit.toInt\n            sumOfDigits += digit.toInt\n    \
    \        binaryIndex += 1\n        }\n        val result = sum.toBinaryString\n\
    \        val resultString = result.substring(0, result.length - sumOfDigits)\n\
    \        binaryString = binaryString + resultString\n        binaryString", " \
    \       var sum = 0\n        var binary = \"\"\n        var remainder = 0\n  \
    \      var remainder2 = N\n        var remainder3 = N\n        var remainder4\
    \ = N\n        var remainder5 = N\n        var remainder6 = N\n        var remainder7\
    \ = N\n        var remainder8 = N\n        var remainder9 = N\n        var remainder10\
    \ = N\n        var remainder11 = N\n        var remainder12 = N\n        var remainder13\
    \ = N\n        var remainder14 = N\n        var remainder15 = N\n        var remainder16\
    \ = N\n        var remainder17 = N\n        var remainder18 = N\n        var remainder19\
    \ = N\n        var remainder20 = N\n        var remainder21 = N\n        var remainder22\
    \ = N\n        var remainder23 = N\n        var remainder24 = N\n        var remainder25\
    \ = N\n        var remainder26 = N\n        var remainder27 = N\n        var remainder28\
    \ = N\n        var remainder29 = N\n        var remainder30 = N\n        var remainder31\
    \ = N\n        var remainder32 = N\n        var remainder33 = N\n        var remainder34\
    \ = N\n        var remainder35 = N\n        var remainder36 = N\n        var remainder37\
    \ = N\n        var remainder38 = N\n        var remainder39 = N\n        var remainder40\
    \ = N\n        var remainder41 = N\n        var remainder42 = N\n        var remainder43\
    \ = N\n        var remainder44 = N\n        var remainder45 = N\n        var remainder46\
    \ = N\n        var remainder47 = N\n        var remainder48 = N\n        var remainder49\
    \ = N\n        var remainder50 = N\n        var remainder51 = N\n        var remainder52\
    \ = N\n        var remainder53 = N\n        var remainder54 = N\n        var remainder55\
    \ = N\n        var remainder56 = N\n        var remainder57 = N\n        var remainder58\
    \ = N\n        var remainder59 = N\n        var remainder60 = N\n        var remainder61\
    \ = N\n        var remainder62 = N\n        var remainder63 = N\n        var remainder64\
    \ = N\n        var remainder65 = N\n        var remainder66 = N\n        var remainder67\
    \ = N\n        var remainder68 = N\n        var remainder69 = N\n        var remainder70\
    \ = N\n        var remainder71 = N\n        var remainder72 = N\n        var remainder73\
    \ = N\n        var remainder74 = ", "        val binary = scala.collection.mutable.ListBuffer[String]()\n\
    \        var sum = 0\n        while(N /= 10) {\n            sum += N % 10\n  \
    \          binary.append(N % 10)\n            N /= 10\n        }\n        binary.reverse.foreach(x\
    \ => sum -= x)\n        binary.reverse.foreach(x => sum += x)\n        sum.toString",
  "        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n        val sumOfDigits\
    \ = digits.foldLeft(0)((sum, digit) => sum + digit)\n        val result = sumOfDigits.toBinaryString\n\
    \        result match {\n            case \"\" => \"\"\n            case x =>\
    \ x\n        }", "        val digits = N.toString.reverse.map(_.toInt)\n     \
    \   val sum = 0\n        val result = new mutable.ListBuffer[String]()\n     \
    \   digits.foreach(x => sum += x)\n        val remainder = sum % 2\n        val\
    \ remainderString = if (remainder == 0) \"0\" else \"\"\n        result += \"\
    1\" + remainderString\n        digits.foreach(x => result += x.toString + remainderString)\n\
    \        result.toString", "        var sum = 0\n        var binary = \"\"\n \
    \       var remainder = 0\n        while(N !=0){\n            remainder = N %\
    \ 2\n            sum = sum + remainder\n            N = N / 2\n        }\n   \
    \     while(sum > 0){\n            binary = binary + Integer.toBinaryString(sum\
    \ % 10)\n            sum = sum / 10\n        }\n        return binary", "    \
    \    var sum = 0\n        var binary = \"\"\n        var remainder = 0\n     \
    \   for(i <- 0 until N) {\n            sum = sum + i\n            binary = binary\
    \ + i.toString(2)\n        }\n        for(i <- 0 until N) {\n            remainder\
    \ = sum % 2\n            sum = sum / 2\n            binary = binary + remainder.toString(2)\n\
    \        }\n        binary", "        var sum = 0\n        var binary = \"\"\n\
    \        while(N >0){\n            sum = sum + N % 10\n            N = N / 10\n\
    \        }\n        while(sum > 0){\n            binary = binary + sum % 2\n \
    \           sum = sum / 2\n        }\n        return binary", "        val binary\
    \ = N.toBinaryString\n        val sum = 0\n        val bin = binary.toList\n \
    \       val binLen = bin.length\n        val binSum = bin.foldLeft(0)(_ + _)\n\
    \        val binSumLen = binSum.toBinaryString.length\n        val binSumLenLen\
    \ = binSumLen.toBinaryString.length\n        val binSumLenLenLen = binSumLenLen.toBinaryString.length\n\
    \        val binSumLenLenLenLen = binSumLenLenLen.toBinaryString.length\n    \
    \    val binSumLenLenLenLenLen = binSumLenLenLenLen.toBinaryString.length\n  \
    \      val binSumLenLenLenLenLenLen = binSumLenLenLenLenLen.toBinaryString.length\n\
    \        val binSumLenLenLenLenLenLenLen = binSumLenLenLenLenLenLen.toBinaryString.length\n\
    \        val binSumLenLenLenLenLenLenLenLen = binSumLenLenLenLenLenLenLen.toBinaryString.length\n\
    \        val binSumLenLenLenLenLenLenLenLenLen = binSumLenLenLenLenLenLenLenLen.toBinaryString.length\n\
    \        val binSumLenLenLenLenLenLenLenLenLenLen = binSumLenLenLenLenLenLenLenLenLenLen.toBinaryString.length\n\
    \        val binSumLenLenLenLenLenLenLenLenLenLenLen = binSumLenLenLenLenLenLenLenLenLenLenLen.toBinaryString.length\n\
    \        val binSumLenLenLenLenLenLenLenLenLenLenLen = binSumLenLenLenLenLenLenLenLenLenLenLenLen.toBinaryString.length\n\
    \        val binSumLenLenLenLenLenLenLenLenLenLenLenLen = binSumLenLenLenLenLenLenLenLenLenLenLenLen.toBinaryString.length\n\
    \        val binSumLenLenLenLenLenLenLenLenLenLenLenLen = binSumLenLenLenLenLenLenLenLenLenLenLenLenLen.toBinaryString.length\n\
    \        val binSumLenLenLenLenLenLenLenLenLenLenLenLenLen = binSumLenLenLenLenLenLenLenLenLenLenLenLenLen.toBinaryString.length\n\
    \        val binSumLenLenLenLenLenLenLenLenLenLenLenLenLenLen = binSumLenLenLenLenLenLenLenLenLenLenLenLenLenLen.toBinaryString.length\n\
    \        val binSumLenLenLenLenLenLenLenLenLenLenLenLenLenLen = binSumLenLen",
  "        val sum = 0\n        val binary = new mutable.HashMap[Int, String]()\n\
    \        for(i <- 0 until N) {\n            val remainder = i % 2\n          \
    \  val digit = i / 2\n            sum += digit\n            binary.put(digit,\
    \ remainder.toString)\n        }\n        binary.values.toList.sorted.mkString",
  "        val binary = N.toBinaryString\n        val sum = 0\n        for(i <- 0\
    \ until binary.length){\n            val digit = binary.charAt(i)\n          \
    \  sum += digit.toInt\n        }\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n", "        var sum = 0\n        var binary = \"\"\n\
    \        var remainder = 0\n        var remainder2 = 0\n        var remainder3\
    \ = 0\n        var remainder4 = 0\n        var remainder5 = 0\n        var remainder6\
    \ = 0\n        var remainder7 = 0\n        var remainder8 = 0\n        var remainder9\
    \ = 0\n        var remainder10 = 0\n        var remainder11 = 0\n        var remainder12\
    \ = 0\n        var remainder13 = 0\n        var remainder14 = 0\n        var remainder15\
    \ = 0\n        var remainder16 = 0\n        var remainder17 = 0\n        var remainder18\
    \ = 0\n        var remainder19 = 0\n        var remainder20 = 0\n        var remainder21\
    \ = 0\n        var remainder22 = 0\n        var remainder23 = 0\n        var remainder24\
    \ = 0\n        var remainder25 = 0\n        var remainder26 = 0\n        var remainder27\
    \ = 0\n        var remainder28 = 0\n        var remainder29 = 0\n        var remainder30\
    \ = 0\n        var remainder31 = 0\n        var remainder32 = 0\n        var remainder33\
    \ = 0\n        var remainder34 = 0\n        var remainder35 = 0\n        var remainder36\
    \ = 0\n        var remainder37 = 0\n        var remainder38 = 0\n        var remainder39\
    \ = 0\n        var remainder40 = 0\n        var remainder41 = 0\n        var remainder42\
    \ = 0\n        var remainder43 = 0\n        var remainder44 = 0\n        var remainder45\
    \ = 0\n        var remainder46 = 0\n        var remainder47 = 0\n        var remainder48\
    \ = 0\n        var remainder49 = 0\n        var remainder50 = 0\n        var remainder51\
    \ = 0\n        var remainder52 = 0\n        var remainder53 = 0\n        var remainder54\
    \ = 0\n        var remainder55 = 0\n        var remainder56 = 0\n        var remainder57\
    \ = 0\n        var remainder58 = 0\n        var remainder59 = 0\n        var remainder60\
    \ = 0\n        var remainder61 = 0\n        var remainder62 = 0\n        var remainder63\
    \ = 0\n        var remainder64 = 0\n        var remainder65 = 0\n        var remainder66\
    \ = 0\n        var remainder67 = 0\n        var remainder68 = 0\n        var remainder69\
    \ = 0\n        var remainder70 = 0\n        var remainder71 = 0\n        var remainder72\
    \ = 0\n        var remainder73 = 0\n        var remainder74 = 0\n        var remainder75\
    \ = 0\n        var remainder76 = 0\n        var remainder77 = 0\n        var remainder78\
    \ = 0\n        var remainder79 = 0\n        var remainder80 = 0\n        var remainder81\
    \ = 0\n        var remainder82 = 0\n        var remainder83 = 0\n        var remainder84\
    \ = 0\n", "        val sum = 0\n        val binary = new mutable.ArrayBuffer[String]()\n\
    \        while(N >0) {\n            val remainder = N % 2\n            N /= 2\n\
    \            sum += remainder\n            binary.append(remainder)\n        }\n\
    \        val result = sum.toBinaryString\n        binary.reverse.foreach(x =>\
    \ result += x)\n        result", "        var sum = 0\n        var binary = \"\
    \"\n        var remainder = 0\n        var remainder2 = N\n        while(true){\n\
    \            sum += remainder\n            binary = remainder2.toBinaryString()\
    \ + binary\n            remainder2 = remainder2 % 10\n            if(remainder2\
    \ == 0){\n                break\n            }\n            remainder = sum %\
    \ 2\n            sum = 0\n        }\n        return binary", "        var sum\
    \ = 0\n        var binary = \"\"\n        var i = 0\n        while(i < N) {\n\
    \            sum += N % 2\n            N = N / 2\n        }\n        while(sum\
    \ > 0) {\n            binary += sum % 2\n            sum = sum / 2\n        }\n\
    \        binary", "        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sumOfDigits = digits.foldLeft(0)(_ + _)\n        val binaryDigits\
    \ = digits.map(_.toString).mkString(\"\")\n        val binarySum = binaryDigits.reverse.grouped(2).map(_.toInt).sum\n\
    \        val result = binarySum.toString.reverse\n        result match {\n   \
    \         case \"\" => \"\"\n            case _ => result\n        }", "     \
    \   val sum = 0\n        var sumStr = \"\"\n        for(i <- 0 until N) {\n  \
    \          val digit = N % 2\n            sum += digit\n            sumStr +=\
    \ digit.toString\n            N /= 2\n        }\n        sumStr", "        var\
    \ sum = 0\n        var binary = \"\"\n        for(i <- 0 until N){\n         \
    \   sum += i.toBinaryString().length\n            binary += i.toBinaryString()\n\
    \        }\n        binary = binary.reverse\n        while(binary.length >= 1){\n\
    \            val temp = binary.takeWhile(_ != '0')\n            binary = binary.drop(temp.length)\n\
    \            sum += temp.length\n        }\n        binary = binary.reverse\n\
    \        while(binary.length >= 1){\n            val temp = binary.takeWhile(_\
    \ != '0')\n            binary = binary.drop(temp.length)\n            sum += temp.length\n\
    \        }\n        binary = binary.reverse\n        while(binary.length >= 1){\n\
    \            val temp = binary.takeWhile(_ != '0')\n            binary = binary.drop(temp.length)\n\
    \            sum += temp.length\n        }\n        binary = binary.reverse\n\
    \        while(binary.length >= 1){\n            val temp = binary.takeWhile(_\
    \ != '0')\n            binary = binary.drop(temp.length)\n            sum += temp.length\n\
    \        }\n        binary = binary.reverse\n        while(binary.length >= 1){\n\
    \            val temp = binary.takeWhile(_ != '0')\n            binary = binary.drop(temp.length)\n\
    \            sum += temp.length\n        }\n        binary = binary.reverse\n\
    \        while(binary.length >= 1){\n            val temp = binary.takeWhile(_\
    \ != '0')\n            binary = binary.drop(temp.length)\n            sum += temp.length\n\
    \        }\n        binary = binary.reverse\n        while(binary.length >= 1){\n\
    \            val temp = binary.takeWhile(_ != '0')\n            binary = binary.drop(temp.length)\n\
    \            sum += temp.length\n        }\n        binary = binary.reverse\n\
    \        while(binary.length >= 1){\n            val temp = binary.takeWhile(_\
    \ != '0')\n            binary = binary.drop(temp.length)\n            sum += temp.length\n\
    \        }\n        binary = binary.reverse\n        while(binary.length >= 1){\n\
    \            val temp = binary.takeWhile(_ != '0')\n            binary = binary.drop(temp.length)\n\
    \            sum += temp.length\n        }\n        binary = binary.reverse\n\
    \        while(binary.length >= 1){\n            val temp = binary.takeWhile(_\
    \ != '0')\n            binary = binary.drop(temp.length)\n            sum += temp.length\n\
    \        }\n        binary = binary.reverse\n        while(binary.length >= 1){\n\
    \            val temp = binary.takeWhile(_", "        val sum = 0\n        val\
    \ binary = new mutable.LinkedList[String]\n        while(N >0){\n            val\
    \ remainder = N % 2\n            sum += remainder\n            N /= 2\n      \
    \      binary.addLast(remainder.toString)\n        }\n        binary.reverse.mkString(\"\
    \")", "        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n     \
    \   val sumOfDigits = digits.foldLeft(0)(_ + _)\n        val binaryDigits = digits.map(_.toString).mkString(\"\
    \")\n        val binarySum = binaryDigits.reverse.foldLeft(0)(_ + _)\n       \
    \ val result = binarySum % 10\n        val result = if (result == 0) \"0\" else\
    \ result.toString\n        result", "        val sum = 0\n        val binary =\
    \ new mutable.MutableList[String]\n        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        digits.foreach(x => sum += x)\n        digits.foreach(x => binary.append(x.toBinaryString))\n\
    \        binary.reverse.mkString(\"\")", "        val sum = 0\n        val binary\
    \ = scala.collection.mutable.ListBuffer[String]()\n        while(N >0) {\n   \
    \         val digit = N % 10\n            sum += digit\n            binary.append(digit.toString)\n\
    \            N = (N - digit) / 10\n        }\n        val result = sum.toString.reverse.foldLeft(\"\
    \")(_ + _)\n        binary.reverse.foldLeft(result)(_ + _)", "        val binary\
    \ = N.toBinaryString\n        val sum = 0\n        for(i <- 0 until binary.length){\n\
    \            val digit = binary.charAt(i)\n            sum += digit.toInt\n  \
    \      }\n        binary.reverse.foldLeft(\"\"){ (acc, digit) => acc + digit }",
  "        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n        val sum\
    \ = 0\n        for(i <- 0 until digits.size) {\n            sum += digits(i)\n\
    \        }\n        sum.toString", "        val binary = scala.collection.mutable.ListBuffer.empty[String]\n\
    \        var sum = 0\n        while(N >0) {\n            val remainder = N % 2\n\
    \            sum += remainder\n            N /= 2\n            binary.append(remainder)\n\
    \        }\n        binary.reverse.mkString(\"\")", "        val sum = 0\n   \
    \     val binary = new mutable.ListBuffer[String]()\n        while(N >0) {\n \
    \           val remainder = N % 2\n            N /= 2\n            sum += remainder\n\
    \            binary.append(remainder)\n        }\n        binary.reverse.mkString(\"\
    \")", "        val binary = scala.collection.mutable.ListBuffer[String]()\n  \
    \      val digits = scala.collection.mutable.ListBuffer[Int]()\n        val remainder\
    \ = N / 2\n        val remainderDigits = remainder / 10\n        val remainderRemainder\
    \ = remainder % 10\n        val remainderRemainderDigits = remainderRemainder\
    \ / 2\n        val remainderRemainderRemainder = remainderRemainder % 2\n    \
    \    val remainderRemainderRemainderDigits = remainderRemainderRemainder / 2\n\
    \        val remainderRemainderRemainderRemainder = remainderRemainderRemainder\
    \ % 2\n        val remainderRemainderRemainderRemainderDigits = remainderRemainderRemainderRemainder\
    \ / 2\n        val remainderRemainderRemainderRemainderRemainder = remainderRemainderRemainderRemainder\
    \ % 2\n        val remainderRemainderRemainderRemainderRemainderDigits = remainderRemainderRemainderRemainderRemainder\
    \ / 2\n        val remainderRemainderRemainderRemainderRemainderRemainder = remainderRemainderRemainderRemainderRemainder\
    \ % 2\n        val remainderRemainderRemainderRemainderRemainderRemainderDigits\
    \ = remainderRemainderRemainderRemainderRemainderRemainder / 2\n        val remainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = remainderRemainderRemainderRemainderRemainderRemainder % 2\n        val remainderRemainderRemainderRemainderRemainderRemainderRemainderDigits\
    \ = remainderRemainderRemainderRemainderRemainderRemainderRemainder / 2\n    \
    \    val remainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = remainderRemainderRemainderRemainderRemainderRemainderRemainder % 2\n    \
    \    val remainderRemainderRemainderRemainderRemainderRemainderRemainderDigits\
    \ = remainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder /\
    \ 2\n        val remainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = remainderRemainderRemainderRemainderRemainderRemainderRemainder % 2\n    \
    \    val remainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderDigits\
    \ = remainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder /\
    \ 2\n        val remainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = remainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder %\
    \ 2\n", "        var sum = 0\n        var binary = \"\"\n        var remainder\
    \ = 0\n        while(N >0) {\n            remainder = N % 2\n            N = N\
    \ / 2\n            sum = sum + remainder\n            binary = binary + remainder\n\
    \        }\n        binary = binary.reverse\n        binary = binary.dropRight(1)\n\
    \        binary = binary.reverse\n        binary = binary.dropRight(1)\n     \
    \   binary = binary.reverse\n        binary = binary.dropRight(1)\n        binary\
    \ = binary.reverse\n        binary = binary.dropRight(1)\n        binary = binary.reverse\n\
    \        binary = binary.dropRight(1)\n        binary = binary.reverse\n     \
    \   binary = binary.dropRight(1)\n        binary = binary.reverse\n        binary\
    \ = binary.dropRight(1)\n        binary = binary.reverse\n        binary = binary.dropRight(1)\n\
    \        binary = binary.reverse\n        binary = binary.dropRight(1)\n     \
    \   binary = binary.reverse\n        binary = binary.dropRight(1)\n        binary\
    \ = binary.reverse\n        binary = binary.dropRight(1)\n        binary = binary.reverse\n\
    \        binary = binary.dropRight(1)\n        binary = binary.reverse\n     \
    \   binary = binary.dropRight(1)\n        binary = binary.reverse\n        binary\
    \ = binary.dropRight(1)\n        binary = binary.reverse\n        binary = binary.dropRight(1)\n\
    \        binary = binary.reverse\n        binary = binary.dropRight(1)\n     \
    \   binary = binary.reverse\n        binary = binary.dropRight(1)\n        binary\
    \ = binary.reverse\n        binary = binary.dropRight(1)\n        binary = binary.reverse\n\
    \        binary = binary.dropRight(1)\n        binary = binary.reverse\n     \
    \   binary = binary.dropRight(1)\n        binary = binary.reverse\n        binary\
    \ = binary.dropRight(1)\n        binary = binary.reverse\n        binary = binary.dropRight(1)\n\
    \        binary = binary.reverse\n        binary = binary.dropRight(1)\n     \
    \   binary = binary.reverse\n        binary = binary.dropRight(1)\n        binary\
    \ = binary.reverse\n        binary = binary.dropRight(1)\n        binary = binary.reverse\n\
    \        binary = binary.dropRight(1)\n        binary = binary.reverse\n     \
    \   binary = binary.dropRight(1)\n        binary = binary.reverse\n        binary\
    \ = binary.dropRight(1)\n        binary = binary.reverse\n        binary = binary.dropRight",
  "        val sum = 0\n        var binary = \"\"\n        for(i <- 0 until N) {\n\
    \            val remainder = N % 2\n            val digit = N / 2\n          \
    \  sum += digit\n            binary = remainder + binary\n            N = digit\n\
    \        }\n        binary = sum + binary\n        binary", "        val digits\
    \ = N.toString.reverse.grouped(2).map(_.toInt)\n        val sumOfDigits = digits.foldLeft(0)(_\
    \ + _)\n        val result = digits.length match {\n            case 0 => \"\"\
    \n            case 1 => digits(0).toBinaryString\n            case 2 => digits(0).toBinaryString\
    \ + digits(1).toBinaryString\n            case 3 => digits(0).toBinaryString +\
    \ digits(1).toBinaryString + digits(2).toBinaryString\n            case 4 => digits(0).toBinaryString\
    \ + digits(1).toBinaryString + digits(2).toBinaryString + digits(3).toBinaryString\n\
    \            case 5 => digits(0).toBinaryString + digits(1).toBinaryString + digits(2).toBinaryString\
    \ + digits(3).toBinaryString + digits(4).toBinaryString\n            case 6 =>\
    \ digits(0).toBinaryString + digits(1).toBinaryString + digits(2).toBinaryString\
    \ + digits(3).toBinaryString + digits(4).toBinaryString + digits(5).toBinaryString\n\
    \            case 7 => digits(0).toBinaryString + digits(1).toBinaryString + digits(2).toBinaryString\
    \ + digits(3).toBinaryString + digits(4).toBinaryString + digits(5).toBinaryString\
    \ + digits(6).toBinaryString\n            case 8 => digits(0).toBinaryString +\
    \ digits(1).toBinaryString + digits(2).toBinaryString + digits(3).toBinaryString\
    \ + digits(4).toBinaryString + digits(5).toBinaryString + digits(6).toBinaryString\
    \ + digits(7).toBinaryString\n            case 9 => digits(0).toBinaryString +\
    \ digits(1).toBinaryString + digits(2).toBinaryString + digits(3).toBinaryString\
    \ + digits(4).toBinaryString + digits(5).toBinaryString + digits(6).toBinaryString\
    \ + digits(7).toBinaryString + digits(8).toBinaryString\n        }\n        val\
    \ resultString = result.reverse.grouped(2).map(_.toBinaryString).mkString(\"\"\
    )\n        resultString", "        val binary = N.toBinaryString\n        val\
    \ sum = 0\n        for(i <- 0 until binary.length){\n            sum += binary(i).toInt\n\
    \        }\n        binary.reverse", "        val sum = 0\n        val binary\
    \ = new mutable.MutableList[String]\n        while(N >=0){\n            val remainder\
    \ = N % 2\n            sum += remainder\n            binary.append(remainder)\n\
    \            N = N / 2\n        }\n        val result = sum.toBinaryString\n \
    \       binary.reverse.foreach(x => result += x)\n        result", "        val\
    \ digits = N.toString.reverse.grouped(2).map(_.toInt)\n        val sumOfDigits\
    \ = digits.foldLeft(0)(_ + _)\n        val binaryDigits = digits.map(x => if (x\
    \ == 0) \"0\" else \"1\")\n        val binarySum = binaryDigits.foldLeft(0)(_\
    \ + _)\n        val binarySumString = binarySum.toString.reverse\n        val\
    \ binarySumStringLength = binarySumString.length\n        val binarySumStringWithZeros\
    \ = binarySumString.padTo(binarySumStringLength, \"0\")\n        val binarySumStringWithOnes\
    \ = binarySumString.padTo(binarySumStringLength, \"1\")\n        val binarySumStringWithZerosAndOnes\
    \ = binarySumStringWithZeros + binarySumStringWithOnes\n        val binarySumStringWithZerosAndOnesLength\
    \ = binarySumStringWithZerosAndOnes.length\n        val binarySumStringWithZerosAndOnesWithZeros\
    \ = binarySumStringWithZerosAndOnes.padTo(binarySumStringWithZerosAndOnesLength,\
    \ \"0\")\n        val binarySumStringWithZerosAndOnesWithOnes = binarySumStringWithZerosAndOnesWithZeros\
    \ + binarySumStringWithOnes\n        val binarySumStringWithZerosAndOnesWithOnesLength\
    \ = binarySumStringWithZerosAndOnesWithOnes.length\n        val binarySumStringWithZerosAndOnesWithOnesWithZeros\
    \ = binarySumStringWithZerosAndOnesWithOnes.padTo(binarySumStringWithZerosAndOnesWithOnesLength,\
    \ \"0\")\n        val binarySumStringWithZerosAndOnesWithOnesWithOnes = binarySumStringWithZerosAndOnesWithOnesWithZeros\
    \ + binarySumStringWithOnes\n        val binarySumStringWithZerosAndOnesWithOnesWithOnesLength\
    \ = binarySumStringWithZerosAndOnesWithOnesWithOnes.length\n        val binarySumStringWithZerosAndOnesWithOnesWithOnesWithZeros\
    \ = binarySumStringWithZerosAndOnesWithOnesWithOnes.padTo(binarySumStringWithZerosAndOnesWithOnesWithOnesLength,\
    \ \"0\")\n        val binarySumStringWithZerosAndOnesWithOnesWithOnesWithOnes\
    \ = binarySumStringWithZerosAndOnesWithOnesWithOnesWithZeros + binarySumStringWithOnes\n\
    \        val binarySumStringWithZerosAndOnesWithOnesWithOnesWithOnesLength = binarySumStringWithZerosAndOnesWithOnesWithOnesWithOnesLength\n\
    \        val binarySumStringWithZerosAndOnesWithOnesWithOnesWithOnesWithZeros\
    \ = binarySumStringWithZerosAndOnesWithOnesWithOnesWithOnesWith", "        val\
    \ sum = 0\n        val binary = new mutable.MutableList[String]()\n        for(i\
    \ <- 0 until N) {\n            val remainder = N % 2\n            sum += remainder\n\
    \            binary.append(remainder)\n            N /= 2\n        }\n       \
    \ binary.reverse.mkString(\"\")", "        val binary = N.toBinaryString\n   \
    \     val sum = 0\n        for(i <- 0 until binary.length){\n            val c\
    \ = binary.charAt(i)\n            sum += c.toInt\n        }\n        binary.reverse\n\
    \        binary.reverse.foldLeft(\"\"){(acc, c) => acc + (if (c == '1') 1 else\
    \ 0)}", "        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n   \
    \     val sum = digits.foldLeft(0)(_ + _)\n        val result = digits.map(x =>\
    \ x.toString.reverse.charAt(0)).mkString\n        result + sum.toString", "  \
    \      val binary = N.toBinaryString\n        val sum = 0\n        for(i <- binary.length.toInt){\n\
    \            sum += binary(i).toInt\n        }\n        sum.toString", "     \
    \   val sum = 0\n        val binary = new mutable.ListBuffer[String]()\n     \
    \   while(N >0) {\n            val remainder = N % 2\n            sum += remainder\n\
    \            N /= 2\n            binary.append(remainder)\n        }\n       \
    \ binary.reverse.mkString(\"\") + sum.toString", "        var sum = 0\n      \
    \  var sumStr = \"\"\n        var remainder = 0\n        var remainderStr = \"\
    \"\n        var remainderStr2 = \"\"\n        var remainderStr3 = \"\"\n     \
    \   var remainderStr4 = \"\"\n        var remainderStr5 = \"\"\n        var remainderStr6\
    \ = \"\"\n        var remainderStr7 = \"\"\n        var remainderStr8 = \"\"\n\
    \        var remainderStr9 = \"\"\n        var remainderStr10 = \"\"\n       \
    \ var remainderStr11 = \"\"\n        var remainderStr12 = \"\"\n        var remainderStr13\
    \ = \"\"\n        var remainderStr14 = \"\"\n        var remainderStr15 = \"\"\
    \n        var remainderStr16 = \"\"\n        var remainderStr17 = \"\"\n     \
    \   var remainderStr18 = \"\"\n        var remainderStr19 = \"\"\n        var\
    \ remainderStr20 = \"\"\n        var remainderStr21 = \"\"\n        var remainderStr22\
    \ = \"\"\n        var remainderStr23 = \"\"\n        var remainderStr24 = \"\"\
    \n        var remainderStr25 = \"\"\n        var remainderStr26 = \"\"\n     \
    \   var remainderStr27 = \"\"\n        var remainderStr28 = \"\"\n        var\
    \ remainderStr29 = \"\"\n        var remainderStr30 = \"\"\n        var remainderStr31\
    \ = \"\"\n        var remainderStr32 = \"\"\n        var remainderStr33 = \"\"\
    \n        var remainderStr34 = \"\"\n        var remainderStr35 = \"\"\n     \
    \   var remainderStr36 = \"\"\n        var remainderStr37 = \"\"\n        var\
    \ remainderStr38 = \"\"\n        var remainderStr39 = \"\"\n        var remainderStr40\
    \ = \"\"\n        var remainderStr41 = \"\"\n        var remainderStr42 = \"\"\
    \n        var remainderStr43 = \"\"\n        var remainderStr44 = \"\"\n     \
    \   var remainderStr45 = \"\"\n        var remainderStr46 = \"\"\n        var\
    \ remainderStr47 = \"\"\n        var remainderStr48 = \"\"\n        var remainderStr49\
    \ = \"\"\n        var remainderStr50 = \"\"\n        var remainderStr51 = \"\"\
    \n        var remainderStr52 = \"\"\n        var remainderStr53 = \"\"\n     \
    \   var remainderStr54 = \"\"\n        var remainderStr55 = \"\"\n        var\
    \ remainderStr56 = \"\"\n        var remainderStr57 = \"\"\n        var remainderStr58\
    \ = \"\"\n        var remainderStr59 = \"\"\n        var remainderStr60 = \"\"\
    \n        var remainderStr61 = \"\"\n        var remainderStr62 = \"\"\n     \
    \   var remainderStr63 = \"\"\n        var remainderStr64 = \"\"\n        var\
    \ remainderStr65 = \"\"\n        var remainderStr66 = \"\"\n        var remainderStr67\
    \ = \"\"\n        var remainderStr68 = \"\"\n        var remainderStr69 = \"\"\
    \n        var remainder", "        var sum = 0\n        var binary = \"\"\n  \
    \      var remainder = 0\n        var lastDigit = 0\n        var lastDigitSum\
    \ = 0\n        var lastDigitSumLastDigit = 0\n        var lastDigitSumLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigit = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigit =\
    \ 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit\
    \ = 0\n        var lastDigitSumLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLast",
  "        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n        val sumOfDigits\
    \ = digits.foldLeft(0)(_ + _)\n        val binaryDigits = digits.map(x => if (x\
    \ == 0) \"0\" else \"1\")\n        val result = binaryDigits.takeWhile(x => x\
    \ != 0).mkString(\"\")\n        val output = if (sumOfDigits == 0) \"0\" else\
    \ result\n        output", "        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sumOfDigits = digits.foldLeft(0)((sum, digit) => sum + digit)\n \
    \       val result = sumOfDigits.toBinaryString\n        val result = result.reverse\n\
    \        val result = result.reverse\n        val result = result.reverse\n  \
    \      val result = result.reverse\n        val result = result.reverse\n    \
    \    val result = result.reverse\n        val result = result.reverse\n      \
    \  val result = result.reverse\n        val result = result.reverse\n        val\
    \ result = result.reverse\n        val result = result.reverse\n        val result\
    \ = result.reverse\n        val result = result.reverse\n        val result =\
    \ result.reverse\n        val result = result.reverse\n        val result = result.reverse\n\
    \        val result = result.reverse\n        val result = result.reverse\n  \
    \      val result = result.reverse\n        val result = result.reverse\n    \
    \    val result = result.reverse\n        val result = result.reverse\n      \
    \  val result = result.reverse\n        val result = result.reverse\n        val\
    \ result = result.reverse\n        val result = result.reverse\n        val result\
    \ = result.reverse\n        val result = result.reverse\n        val result =\
    \ result.reverse\n        val result = result.reverse\n        val result = result.reverse\n\
    \        val result = result.reverse\n        val result = result.reverse\n  \
    \      val result = result.reverse\n        val result = result.reverse\n    \
    \    val result = result.reverse\n        val result = result.reverse\n      \
    \  val result = result.reverse\n        val result = result.reverse\n        val\
    \ result = result.reverse\n        val result = result.reverse\n        val result\
    \ = result.reverse\n        val result = result.reverse\n        val result =\
    \ result.reverse\n        val result = result.reverse\n        val result = result.reverse\n\
    \        val result = result.reverse\n        val result = result.reverse\n  \
    \      val result = result.reverse\n        val result = result.reverse\n    \
    \    val result = result.reverse\n        val result = result.reverse\n      \
    \  val result = result.reverse\n        val result = result.reverse\n        val\
    \ result = result.reverse\n        val result = result.reverse\n        val result\
    \ = result.reverse\n        val result = result.reverse\n        val result =\
    \ result.reverse\n        val result = result.reverse\n        val result = result.reverse\n\
    \        val result = result.reverse\n        val result = result.reverse\n  \
    \      val result = result.reverse\n        val result = result.reverse\n    \
    \    val result = result.reverse\n        val result = result.reverse\n      \
    \  val result = result.reverse\n        val result = result.reverse\n        val\
    \ result = result.reverse\n        val result = result.reverse\n        val result\
    \ = result.reverse\n        val result = result.reverse\n        val result =\
    \ result.reverse\n        val result = result.reverse\n        val result = result.reverse\n\
    \        val result = result", "        val sum = 0\n        var sumOfDigits =\
    \ 0\n        var sumOfDigitsString = \"\"\n        var sumOfDigitsString2 = \"\
    \"\n        var sumOfDigitsString3 = \"\"\n        var sumOfDigitsString4 = \"\
    \"\n        var sumOfDigitsString5 = \"\"\n        var sumOfDigitsString6 = \"\
    \"\n        var sumOfDigitsString7 = \"\"\n        var sumOfDigitsString8 = \"\
    \"\n        var sumOfDigitsString9 = \"\"\n        var sumOfDigitsString10 = \"\
    \"\n        var sumOfDigitsString11 = \"\"\n        var sumOfDigitsString12 =\
    \ \"\"\n        var sumOfDigitsString13 = \"\"\n        var sumOfDigitsString14\
    \ = \"\"\n        var sumOfDigitsString15 = \"\"\n        var sumOfDigitsString16\
    \ = \"\"\n        var sumOfDigitsString17 = \"\"\n        var sumOfDigitsString18\
    \ = \"\"\n        var sumOfDigitsString19 = \"\"\n        var sumOfDigitsString20\
    \ = \"\"\n        var sumOfDigitsString21 = \"\"\n        var sumOfDigitsString22\
    \ = \"\"\n        var sumOfDigitsString23 = \"\"\n        var sumOfDigitsString24\
    \ = \"\"\n        var sumOfDigitsString25 = \"\"\n        var sumOfDigitsString26\
    \ = \"\"\n        var sumOfDigitsString27 = \"\"\n        var sumOfDigitsString28\
    \ = \"\"\n        var sumOfDigitsString29 = \"\"\n        var sumOfDigitsString30\
    \ = \"\"\n        var sumOfDigitsString31 = \"\"\n        var sumOfDigitsString32\
    \ = \"\"\n        var sumOfDigitsString33 = \"\"\n        var sumOfDigitsString34\
    \ = \"\"\n        var sumOfDigitsString35 = \"\"\n        var sumOfDigitsString36\
    \ = \"\"\n        var sumOfDigitsString37 = \"\"\n        var sumOfDigitsString38\
    \ = \"\"\n        var sumOfDigitsString39 = \"\"\n        var sumOfDigitsString40\
    \ = \"\"\n        var sumOfDigitsString41 = \"\"\n        var sumOfDigitsString42\
    \ = \"\"\n        var sumOfDigitsString43 = \"\"\n        var sumOfDigitsString44\
    \ = \"\"\n        var sumOfDigitsString45 = \"\"\n        var sumOfDigitsString46\
    \ = \"\"\n        var sumOfDigitsString47 = \"\"\n        var sumOfDigitsString48\
    \ = \"\"\n        var sumOfDigitsString49 = \"\"\n        var sumOfDigitsString50\
    \ = \"\"\n        var sumOfDigitsString51 = \"\"\n        var sumOfDigitsString52\
    \ = \"\"\n        var sumOfDigitsString53 = \"\"\n        var sumOfDigitsString54\
    \ = \"\"\n        var sumOfDigitsString55", "        val sum = 0\n        val\
    \ binary = new mutable.ListBuffer[String]()\n        val digits = N.toString.reverse.grouped(2).map(_\
    \ + \"\").reverse\n        digits.foreach(x => sum += x.toInt)\n        while(sum\
    \ > 0) {\n            val remainder = sum % 2\n            binary.append(remainder)\n\
    \            sum -= remainder\n        }\n        binary.reverse.mkString(\"\"\
    )", "        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n       \
    \ val sumOfDigits = digits.foldLeft(0)(_ + _)\n        val result = digits.length\
    \ match {\n            case 0 => \"\"\n            case 1 => digits(0).toString\
    \ + digits(1).toString\n            case _ => digits(0).toString + digits(1).toString\
    \ + solve(N / 2)\n        }\n        result + sumOfDigits.toBinaryString", " \
    \       val sum = 0\n        val binary = scala.collection.mutable.ListBuffer[String]()\n\
    \        while(N >0) {\n            val remainder = N % 2\n            N /= 2\n\
    \            sum += remainder\n            binary += remainder.toString\n    \
    \    }\n        binary.reverse.mkString(\"\")", "        var sum = 0\n       \
    \ var binary = \"\"\n        var remainder = 0\n        var remainder2 = N\n \
    \       var remainder3 = N\n        var remainder4 = N\n        var remainder5\
    \ = N\n        var remainder6 = N\n        var remainder7 = N\n        var remainder8\
    \ = N\n        var remainder9 = N\n        var remainder10 = N\n        var remainder11\
    \ = N\n        var remainder12 = N\n        var remainder13 = N\n        var remainder14\
    \ = N\n        var remainder15 = N\n        var remainder16 = N\n        var remainder17\
    \ = N\n        var remainder18 = N\n        var remainder19 = N\n        var remainder20\
    \ = N\n        var remainder21 = N\n        var remainder22 = N\n        var remainder23\
    \ = N\n        var remainder24 = N\n        var remainder25 = N\n        var remainder26\
    \ = N\n        var remainder27 = N\n        var remainder28 = N\n        var remainder29\
    \ = N\n        var remainder30 = N\n        var remainder31 = N\n        var remainder32\
    \ = N\n        var remainder33 = N\n        var remainder34 = N\n        var remainder35\
    \ = N\n        var remainder36 = N\n        var remainder37 = N\n        var remainder38\
    \ = N\n        var remainder39 = N\n        var remainder40 = N\n        var remainder41\
    \ = N\n        var remainder42 = N\n        var remainder43 = N\n        var remainder44\
    \ = N\n        var remainder45 = N\n        var remainder46 = N\n        var remainder47\
    \ = N\n        var remainder48 = N\n        var remainder49 = N\n        var remainder50\
    \ = N\n        var remainder51 = N\n        var remainder52 = N\n        var remainder53\
    \ = N\n        var remainder54 = N\n        var remainder55 = N\n        var remainder56\
    \ = N\n        var remainder57 = N\n        var remainder58 = N\n        var remainder59\
    \ = N\n        var remainder60 = N\n        var remainder61 = N\n        var remainder62\
    \ = N\n        var remainder63 = N\n        var remainder64 = N\n        var remainder65\
    \ = N\n        var remainder66 = N\n        var remainder67 = N\n        var remainder68\
    \ = N\n        var remainder69 = N\n        var remainder70 = N\n        var remainder71\
    \ = N\n        var remainder72 = N\n        var remainder73 = N\n        var remainder74\
    \ = ", "        val binary = N.toBinaryString\n        val sum = 0\n        for(i\
    \ <- 0 until binary.length){\n            sum += binary.charAt(i).toInt\n    \
    \    }\n        binary.reverse\n        binary.reverse.drop(sum).reverse", " \
    \       var sum = 0\n        var binary = \"\"\n        var remainder = 0\n  \
    \      var remainder2 = N\n        while (remainder2 > 0) {\n            remainder2\
    \ = remainder2 % 10\n            sum = sum + remainder2\n            remainder\
    \ = remainder + remainder2\n        }\n        binary = binary(sum)\n        return\
    \ binary", "        val sum = 0\n        val binary = new mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until N) {\n            val remainder = i % 2\n          \
    \  val digit = i / 2\n            sum += digit\n            binary.append(remainder)\n\
    \            binary.append(digit)\n        }\n        binary.reverse.mkString",
  "        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n        val sumOfDigits\
    \ = digits.foldLeft(0)((sum, digit) => sum + digit)\n        val result = sumOfDigits.toBinaryString\n\
    \        result match {\n            case \"\" => \"\"\n            case x =>\
    \ x\n        }", "        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sumOfDigits = digits.foldLeft(0)(_ + _)\n        val binaryDigits\
    \ = digits.map(x => x.toBinaryString).mkString(\"\")\n        val binarySum =\
    \ binaryDigits.reverse.grouped(2).map(_.toInt).sum\n        val result = binarySum.toBinaryString\n\
    \        result match {\n            case x if x.length < 2 => \"\"\n        \
    \    case x if x.length == 2 => x.reverse\n            case x if x.length == 3\
    \ => x.reverse\n            case x if x.length == 4 => x.reverse\n           \
    \ case x if x.length == 5 => x.reverse\n            case x if x.length == 6 =>\
    \ x.reverse\n            case x if x.length == 7 => x.reverse\n            case\
    \ x if x.length == 8 => x.reverse\n            case x if x.length >= 9 => x.reverse\n\
    \        }", "        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sumOfDigits = digits.foldLeft(0)(_ + _)\n        val binaryString\
    \ = sumOfDigits.toBinary.reverse\n        binaryString.takeWhile(_ != '0').mkString",
  "        val sum = 0\n        var binary = \"\"\n        while(N !=0){\n       \
    \     val remainder = N % 2\n            sum += remainder\n            N = N /\
    \ 2\n            binary = remainder + binary\n        }\n        val result =\
    \ sum.toBinaryString\n        binary = binary.reverse\n        binary = binary.dropRight(1)\n\
    \        binary = binary.reverse\n        binary = binary.dropRight(1)\n     \
    \   binary = binary.reverse\n        binary = binary.dropRight(1)\n        binary\
    \ = binary.reverse\n        binary = binary.dropRight(1)\n        binary = binary.reverse\n\
    \        binary = binary.dropRight(1)\n        binary = binary.reverse\n     \
    \   binary = binary.dropRight(1)\n        binary = binary.reverse\n        binary\
    \ = binary.dropRight(1)\n        binary = binary.reverse\n        binary = binary.dropRight(1)\n\
    \        binary = binary.reverse\n        binary = binary.dropRight(1)\n     \
    \   binary = binary.reverse\n        binary = binary.dropRight(1)\n        binary\
    \ = binary.reverse\n        binary = binary.dropRight(1)\n        binary = binary.reverse\n\
    \        binary = binary.dropRight(1)\n        binary = binary.reverse\n     \
    \   binary = binary.dropRight(1)\n        binary = binary.reverse\n        binary\
    \ = binary.dropRight(1)\n        binary = binary.reverse\n        binary = binary.dropRight(1)\n\
    \        binary = binary.reverse\n        binary = binary.dropRight(1)\n     \
    \   binary = binary.reverse\n        binary = binary.dropRight(1)\n        binary\
    \ = binary.reverse\n        binary = binary.dropRight(1)\n        binary = binary.reverse\n\
    \        binary = binary.dropRight(1)\n        binary = binary.reverse\n     \
    \   binary = binary.dropRight(1)\n        binary = binary.reverse\n        binary\
    \ = binary.dropRight(1)\n        binary = binary.reverse\n        binary = binary.dropRight(1)\n\
    \        binary = binary.reverse\n        binary = binary.dropRight(1)\n     \
    \   binary = binary.reverse\n        binary = binary.dropRight(1)\n        binary\
    \ = binary.reverse\n        binary = binary.dropRight(1)\n        binary = binary.reverse\n\
    \        binary = binary.dropRight(1)\n        binary = binary.reverse\n     \
    \   binary = binary.dropRight(1)\n        binary = binary.reverse\n        binary\
    \ = binary.dropRight(1)\n        binary = binary.reverse\n        binary = ",
  "        val binary = N.toBinaryString\n        val sum = 0\n        for(i <- binary.indices)\
    \ {\n            sum += binary.charAt(i)\n        }\n        sum.toString", " \
    \       val sum = 0\n        val binary = new mutable.ArrayBuilder[String]\n \
    \       for(i <- 0 until N) {\n            val remainder = N % 2\n           \
    \ val digit = N / 2\n            sum += digit\n            binary.append(digit)\n\
    \            N = (remainder + digit) / 2\n        }\n        binary.toString.reverse",
  "        val digits = N.toString.reverse.grouped(2).map(_ + \"\").map(_.toInt)\n\
    \        val sum = digits.sum\n        val result = digits.map(x => if (x == 0)\
    \ \"0\" else x.toString.reverse.grouped(2).map(_ + \"\").map(_.toInt).mkString(\"\
    \"))\n        val result = result.map(x => if (x == \"\") \"\" else x.reverse.grouped(2).map(_\
    \ + \"\").map(_.toInt).mkString(\"\"))\n        val result = result.map(x => if\
    \ (x == \"\") \"\" else x.reverse.grouped(2).map(_ + \"\").map(_.toInt).mkString(\"\
    \"))\n        val result = result.map(x => if (x == \"\") \"\" else x.reverse.grouped(2).map(_\
    \ + \"\").map(_.toInt).mkString(\"\"))\n        val result = result.map(x => if\
    \ (x == \"\") \"\" else x.reverse.grouped(2).map(_ + \"\").map(_.toInt).mkString(\"\
    \"))\n        val result = result.map(x => if (x == \"\") \"\" else x.reverse.grouped(2).map(_\
    \ + \"\").map(_.toInt).mkString(\"\"))\n        val result = result.map(x => if\
    \ (x == \"\") \"\" else x.reverse.grouped(2).map(_ + \"\").map(_.toInt).mkString(\"\
    \"))\n        val result = result.map(x => if (x == \"\") \"\" else x.reverse.grouped(2).map(_\
    \ + \"\").map(_.toInt).mkString(\"\"))\n        val result = result.map(x => if\
    \ (x == \"\") \"\" else x.reverse.grouped(2).map(_ + \"\").map(_.toInt).mkString(\"\
    \"))\n        val result = result.map(x => if (x == \"\") \"\" else x.reverse.grouped(2).map(_\
    \ + \"\").map(_.toInt).mkString(\"\"))\n        val result = result.map(x => if\
    \ (x == \"\") \"\" else x.reverse.grouped(2).map(_ + \"\").map(_.toInt).mkString(\"\
    \"))\n        val result = result.map(x => if (x == \"\") \"\" else x.reverse.grouped(2).map(_\
    \ + \"\").map(_.toInt).mkString(\"\"))\n        val result = result.map(x => if\
    \ (x == \"\") \"\" else x.reverse.grouped(2).map(_ + \"\").map(_.toInt).mkString(\"\
    \"))\n        val result = result.map(x => if (x == \"\") \"\" else x.reverse.grouped(2).map(_\
    \ + \"\").map(_.toInt).mkString(\"\"))\n        val result = result.", "     \
    \   val sum = 0\n        val binary = new mutable.MutableList[String]()\n    \
    \    val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n    \
    \    digits.foreach(x => sum += x.toInt)\n        val result = sum.toBinaryString\n\
    \        binary.append(result)\n        binary.reverse.mkString(\"\")", "    \
    \    val binary = N.toBinaryString\n        val sum = 0\n        for(i <- 0 until\
    \ binary.length){\n            val c = binary(i)\n            sum += c.toInt\n\
    \        }\n        binary.reverse\n        binary.reverse.takeWhile(c => c !=\
    \ '0').reverse", "        var sum = 0\n        var binary = \"\"\n        var\
    \ remainder = 0\n        for(i <- 0 until N) {\n            val remainder = N\
    \ % 2\n            sum += remainder\n            N = N / 2\n            binary\
    \ += remainder\n        }\n        binary = binary.reverse\n        sum.toString",
  "        val binary = N.toBinaryString\n        val sum = 0\n        for(i <- 0\
    \ until binary.length){\n            val c = binary.charAt(i)\n            sum\
    \ += c.toInt\n        }\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        ", "        val sum = 0\n        val binary = new\
    \ mutable.ListBuffer[String]\n        for(i <- 0 until N) {\n            val remainder\
    \ = i % 10\n            sum += remainder\n            binary.append(remainder)\n\
    \        }\n        val result = sum.toBinaryString\n        binary.reverse.foreach(x\
    \ => result += x)\n        result", "        var sum = 0\n        var binary =\
    \ \"\"\n        var remainder = 0\n        var remainder2 = N\n        while (remainder2\
    \ > 0) {\n            sum += remainder2 % 2\n            remainder2 = (remainder2\
    \ / 2)\n        }\n        remainder2 = N\n        while (remainder2 > 0) {\n\
    \            binary = binary + remainder2 % 2\n            remainder2 = (remainder2\
    \ / 2)\n        }\n        binary = binary + sum\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        ", "        val binary\
    \ = N.toBinaryString\n        val sum = 0\n        val bin = binary.toList\n \
    \       bin.foreach(x => {\n            sum += x.toInt\n        })\n        val\
    \ result = sum.toBinaryString\n        binary.toList.foreach(x => {\n        \
    \    result += x.toBinaryString\n        })\n        result", "        val sum\
    \ = 0\n        var binary = \"\"\n        for(i <- 0 until N) {\n            val\
    \ temp = N % 2\n            sum += temp\n            N /= 2\n            binary\
    \ += temp.toString\n        }\n        binary = binary.reverse\n        binary.reverse",
  "        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n        val sumOfDigits\
    \ = digits.foldLeft(0)(_ + _)\n        val binaryDigits = digits.map(_.toBinaryString).mkString(\"\
    \")\n        val binarySum = binaryDigits.reverse.grouped(2).map(_.toInt).sum\n\
    \        val result = binarySum.toBinaryString\n        result + (if (sumOfDigits\
    \ == 0) \"\" else N.toBinaryString)", "        val sum = 0\n        val binary\
    \ = new mutable.ListBuffer[String]()\n        while(N >0) {\n            val digit\
    \ = N % 10\n            N /= 10\n            sum += digit\n            binary.append(digit.toString)\n\
    \        }\n        val result = sum.toBinaryString\n        binary.reverse.foreach(x\
    \ => result += x)\n        result", "        val binary = N.toBinaryString\n \
    \       val sum = 0\n        for(i <- 0 until binary.length){\n            sum\
    \ += binary(i).toInt\n        }\n        binary.reverse.foldLeft(\"\"){(acc, i)\
    \ => acc + (i.toChar * sum)}", "        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sumOfDigits = digits.foldLeft(0)(_ + _)\n        val binary = digits.length\
    \ match {\n            case 0 => \"0\"\n            case 1 => \"1\"\n        \
    \    case 2 => \"10\"\n            case 3 => \"11\"\n            case _ => digits(0).toString\
    \ + digits(1).toString + digits(2).toString + digits(3).toString + digits(4).toString\
    \ + digits(5).toString + digits(6).toString + digits(7).toString + digits(8).toString\
    \ + digits(9).toString + digits(10).toString + digits(11).toString + digits(12).toString\
    \ + digits(13).toString + digits(14).toString + digits(15).toString + digits(16).toString\
    \ + digits(17).toString + digits(18).toString + digits(19).toString + digits(20).toString\
    \ + digits(21).toString + digits(22).toString + digits(23).toString + digits(24).toString\
    \ + digits(25).toString + digits(26).toString + digits(27).toString + digits(28).toString\
    \ + digits(29).toString + digits(30).toString + digits(31).toString + digits(32).toString\
    \ + digits(33).toString + digits(34).toString + digits(35).toString + digits(36).toString\
    \ + digits(37).toString + digits(38).toString + digits(39).toString + digits(40).toString\
    \ + digits(41).toString + digits(42).toString + digits(43).toString + digits(44).toString\
    \ + digits(45).toString + digits(46).toString + digits(47).toString + digits(48).toString\
    \ + digits(49).toString + digits(50).toString + digits(51).toString + digits(52).toString\
    \ + digits(53).toString + digits(54).toString + digits(55).toString + digits(56).toString\
    \ + digits(57).toString + digits(58).toString + digits(59).toString + digits(60).toString\
    \ + digits(61).toString + digits(62).toString + digits(63).toString + digits(64).toString\
    \ + digits(65).toString + digits(66).toString + digits(67).toString + digits(68).toString\
    \ + digits(69).toString + digits(70).toString + digits(71).toString + digits(72).toString\
    \ + digits(73", "        val binary = N.toBinaryString\n        val sum = 0\n\
    \        var i = 0\n        while(i < binary.length) {\n            sum += binary.charAt(i).toInt\n\
    \            i += 1\n        }\n        sum.toString", "        val binary = N.toBinaryString\n\
    \        val sum = 0\n        val bin = binary.toList\n        bin.foreach(x =>\
    \ {\n            sum += x.toInt\n        })\n        binary.toString.reverse.foldLeft(\"\
    \")(_ + _ + _)", "        val binary = N.toBinaryString\n        val sum = 0\n\
    \        var i = 0\n        while (i < binary.length) {\n            sum += binary.charAt(i).toInt\n\
    \            i += 1\n        }\n        val result = sum.toBinaryString\n    \
    \    return result", "        val sum = 0\n        val binary = new mutable.ArrayBuffer[String]()\n\
    \        var remainder = N\n        while(true){\n            val remainderToBinary\
    \ = remainder % 2\n            val remainderToBinaryString = remainderToBinary.toString\n\
    \            binary.append(remainderToBinaryString)\n            remainder = remainder\
    \ / 2\n            if(remainder == 0){\n                sum += binary.last\n \
    \               binary.clear()\n                break\n            }\n       \
    \ }\n        sum.toString", "        val binary = new mutable.ListBuffer[String]()\n\
    \        var sum = 0\n        var remainder = N\n        while(true){\n      \
    \      val remainderDigit = remainder % 10\n            binary.append(remainderDigit.toString)\n\
    \            sum += remainderDigit\n            remainder = remainder / 10\n \
    \           if(remainder == 0){\n                binary.reverse\n            \
    \    binary.mkString(\"\")\n            }\n        }", "        val sum = 0\n\
    \        val binary = new mutable.MutableList[String]()\n        while(N >0) {\n\
    \            val remainder = N % 2\n            N /= 2\n            sum += remainder\n\
    \            binary.append(remainder)\n        }\n        binary.reverse.mkString(\"\
    \")", "        val binary = N.toBinaryString\n        val sum = 0\n        for(i\
    \ <- 0 until binary.length){\n            val index = binary.length - i - 1\n\
    \            sum += binary(index)\n        }\n        sum.toString", "       \
    \ val binary = scala.collection.mutable.StringBuilder()\n        var sum = 0\n\
    \        while(N !=0){\n            val remainder = N % 2\n            sum +=\
    \ remainder\n            N /= 2\n        }\n        val remainder = sum % 2\n\
    \        binary.append(remainder)\n        binary.toString()", "        val digits\
    \ = N.toString.reverse.grouped(2).map(_.toInt).toList\n        val sumOfDigits\
    \ = digits.foldLeft(0)(_ + _)\n        val result = sumOfDigits.toBinaryString\n\
    \        val result = result.substring(0, result.length-1)\n        return result",
  "        val sum = 0\n        val binary = new mutable.Array[String](N.toInt)\n\
    \        for(i <- 0 until N.toInt) {\n            val bin = i.toBinary.reverse\n\
    \            binary(i) = bin\n            sum += bin.last\n        }\n       \
    \ binary.map(x => x.reverse).mkString(\"\")", "        val sum = 0\n        val\
    \ binary = new mutable.ListBuffer[String]()\n        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        digits.foreach(x => sum += x)\n        digits.foreach(x => binary.append(x.toString))\n\
    \        binary.reverse.mkString(\"\")", "        val binary = N.toBinaryString\n\
    \        val sum = 0\n        for(i <- 0 until binary.length){\n            val\
    \ temp = binary.charAt(i).toInt\n            sum += temp\n        }\n        binary.reverse\n\
    \        binary.reverse.takeWhile(x => x != '0').mkString", "        val digits\
    \ = N.toString.reverse.grouped(2).map(_.toInt)\n        val sumOfDigits = digits.foldLeft(0)(_\
    \ + _)\n        val binaryDigits = digits.map(_.toString).mkString(\"\")\n   \
    \     val binarySum = binaryDigits.reverse.foldLeft(0)(_ + _)\n        val result\
    \ = binarySum.toString.reverse\n        result + (if (sumOfDigits < 10) 0 else\
    \ \"\")", "        val binary = N.toBinaryString\n        val sum = 0\n      \
    \  for(i <- 0 until binary.length){\n            sum += binary.charAt(i)\n   \
    \     }\n        sum.toString", "        var sum = 0\n        var binary = \"\"\
    \n        for(i <- 0 until N) {\n            sum += N % 2\n            N /= 2\n\
    \        }\n        for(i <- 0 until sum) {\n            binary += if(i % 2 ==\
    \ 0) \"1\" else \"0\"\n        }\n        binary", "        var sum = 0\n    \
    \    var binary = \"\"\n        for(i <- 0 until N){\n            sum += i.toBinaryString().length\n\
    \            binary += i.toBinaryString()\n        }\n        binary = binary.reverse\n\
    \        while(binary.length >= 2){\n            binary += \"0\"\n        }\n\
    \        binary = binary.reverse\n        while(binary.length >= 1){\n       \
    \     binary += \"0\"\n        }\n        binary = binary.reverse\n        while(binary.length\
    \ >= 1){\n            binary += \"0\"\n        }\n        binary = binary.reverse\n\
    \        while(binary.length >= 1){\n            binary += \"0\"\n        }\n\
    \        binary = binary.reverse\n        while(binary.length >= 1){\n       \
    \     binary += \"0\"\n        }\n        binary = binary.reverse\n        while(binary.length\
    \ >= 1){\n            binary += \"0\"\n        }\n        binary = binary.reverse\n\
    \        while(binary.length >= 1){\n            binary += \"0\"\n        }\n\
    \        binary = binary.reverse\n        while(binary.length >= 1){\n       \
    \     binary += \"0\"\n        }\n        binary = binary.reverse\n        while(binary.length\
    \ >= 1){\n            binary += \"0\"\n        }\n        binary = binary.reverse\n\
    \        while(binary.length >= 1){\n            binary += \"0\"\n        }\n\
    \        binary = binary.reverse\n        while(binary.length >= 1){\n       \
    \     binary += \"0\"\n        }\n        binary = binary.reverse\n        while(binary.length\
    \ >= 1){\n            binary += \"0\"\n        }\n        binary = binary.reverse\n\
    \        while(binary.length >= 1){\n            binary += \"0\"\n        }\n\
    \        binary = binary.reverse\n        while(binary.length >= 1){\n       \
    \     binary += \"0\"\n        }\n        binary = binary.reverse\n        while(binary.length\
    \ >= 1){\n            binary += \"0\"\n        }\n        binary = binary.reverse\n\
    \        while(binary.length >= 1){\n            binary += \"0\"\n        }\n\
    \        binary = binary.reverse\n        while(binary.length >= 1){\n       \
    \     binary += \"0\"\n        }\n        binary = binary.reverse\n        while(binary.length\
    \ >= 1){\n            binary += \"0\"\n        }\n        binary = binary.reverse\n\
    \        while(binary.length >= 1){\n            binary += \"0\"\n        }\n\
    \        binary = binary.reverse\n        while(binary.length >= 1){\n       \
    \     binary += \"0\"\n        }\n        binary = binary.reverse\n        while(binary.length\
    \ >= 1)", "        var sum = 0\n        var binary = \"\"\n        var remainder\
    \ = N\n        while(n > 0){\n            sum += n % 10\n            n = n / 10\n\
    \        }\n        while(sum > 0){\n            binary += sum % 2\n         \
    \   sum = sum / 2\n        }\n        remainder = remainder % 10\n        while(remainder\
    \ > 0){\n            binary += remainder % 2\n            remainder = remainder\
    \ / 2\n        }\n        binary", "        val digits = N.toString.reverse.map(_.toInt)\n\
    \        val sumOfDigits = digits.foldLeft(0)(_ + _)\n        val binaryDigits\
    \ = sumOfDigits.toBinaryString\n        binaryDigits", "        val sum = 0\n\
    \        val binary = new mutable.ArrayBuffer[String]\n        for(i <- 0 until\
    \ N) {\n            val remainder = N % 2\n            val digit = N / 2\n   \
    \         sum += digit\n            binary.append(remainder)\n            N =\
    \ digit\n        }\n        binary.reverse.toString.reverse", "        val digits\
    \ = N.toString.reverse.grouped(2).map(_.toInt)\n        val sumOfDigits = digits.foldLeft(0)((sum,\
    \ digit) => sum + digit)\n        val binaryDigits = digits.map(digit => if (digit\
    \ == 1) \"1\" else \"0\")\n        val binarySum = binaryDigits.mkString(\"\"\
    )\n        val binarySumString = binarySum.reverse\n        val binarySumStringLength\
    \ = binarySumString.length\n        val binarySumStringWithZeros = binarySumString.padTo(binarySumStringLength,\
    \ \"0\")\n        val binarySumStringWithOnes = binarySumString.padTo(binarySumStringLength,\
    \ \"1\")\n        val binarySumStringWithZerosAndOnes = binarySumStringWithZeros\
    \ + binarySumStringWithOnes\n        binarySumStringWithZerosAndOnes", "     \
    \   var sum = 0\n        var binary = \"\"\n        var remainder = 0\n      \
    \  var remainder2 = N\n        while (remainder2 > 0) {\n            remainder2\
    \ = remainder2 % 10\n            sum = sum + remainder2\n            binary =\
    \ binary + remainder2\n            remainder = remainder / 10\n        }\n   \
    \     if (sum > 0) {\n            binary = binary + sum.toString\n        }\n\
    \        return binary", "        var sum = 0\n        var binary = \"\"\n   \
    \     var remainder = 0\n        var i = 0\n        while (i < N) {\n        \
    \    sum = sum + math.pow(2, i)\n            binary = binary + Integer.toBinaryString(i)\n\
    \            i = i + 1\n        }\n        remainder = N % sum\n        binary\
    \ = binary + Integer.toBinaryString(remainder)\n        binary", "        val\
    \ sum = 0\n        val binary = new mutable.ListBuffer[String]()\n        val\
    \ digits = N.toString.reverse.grouped(2).map(_.toInt)\n        digits.foreach(x\
    \ => sum += x)\n        val result = sum.toBinaryString\n        binary.append(result)\n\
    \        binary.reverse.mkString(\"\")", "        val sum = 0\n        val binary\
    \ = new mutable.ListBuffer[String]\n        for(i <- 0 until N) {\n          \
    \  val temp = i.toBinaryString\n            val length = temp.length\n       \
    \     val digits = temp.substring(length-1, length)\n            sum += digits.toLong\n\
    \            binary.append(digits)\n        }\n        binary.reverse.mkString(\"\
    \")", "        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n     \
    \   val sumOfDigits = digits.foldLeft(0)(_ + _)\n        val result = digits.length\
    \ match {\n            case 0 => \"0\"\n            case 1 => digits(0).toString\
    \ + digits(1).toString\n            case _ => digits(0).toString + digits(1).toString\
    \ + solve(N - sumOfDigits)\n        }\n        result", "        val digits =\
    \ N.toString.reverse.grouped(2).map(_.toInt)\n        val sum = 0\n        digits.foreach(sum\
    \ ++= _)\n        sum.toString", "        val sum = 0\n        val binary = new\
    \ mutable.MutableList[String]\n        for(i <- 0 until N) {\n            val\
    \ temp = N % 10\n            sum += temp\n            binary.append(temp.toString)\n\
    \            N /= 10\n        }\n        binary.reverse.mkString(\"\") + sum.toString",
  "        val sum = 0\n        var sumOfDigits = 0\n        var binaryString = \"\
    \"\n        var remainder = 0\n        for(i <- 0 until N){\n            remainder\
    \ = N % 2\n            sum += remainder\n            sumOfDigits += remainder\n\
    \            binaryString += remainder\n            N = N / 2\n        }\n   \
    \     binaryString += sumOfDigits\n        binaryString += sum\n        binaryString.reverse",
  "        val sum = 0\n        var sumStr = \"\"\n        var remainder = 0\n   \
    \     var remainderStr = \"\"\n        var remainderStr2 = \"\"\n        var remainderStr3\
    \ = \"\"\n        var remainderStr4 = \"\"\n        var remainderStr5 = \"\"\n\
    \        var remainderStr6 = \"\"\n        var remainderStr7 = \"\"\n        var\
    \ remainderStr8 = \"\"\n        var remainderStr9 = \"\"\n        var remainderStr10\
    \ = \"\"\n        var remainderStr11 = \"\"\n        var remainderStr12 = \"\"\
    \n        var remainderStr13 = \"\"\n        var remainderStr14 = \"\"\n     \
    \   var remainderStr15 = \"\"\n        var remainderStr16 = \"\"\n        var\
    \ remainderStr17 = \"\"\n        var remainderStr18 = \"\"\n        var remainderStr19\
    \ = \"\"\n        var remainderStr20 = \"\"\n        var remainderStr21 = \"\"\
    \n        var remainderStr22 = \"\"\n        var remainderStr23 = \"\"\n     \
    \   var remainderStr24 = \"\"\n        var remainderStr25 = \"\"\n        var\
    \ remainderStr26 = \"\"\n        var remainderStr27 = \"\"\n        var remainderStr28\
    \ = \"\"\n        var remainderStr29 = \"\"\n        var remainderStr30 = \"\"\
    \n        var remainderStr31 = \"\"\n        var remainderStr32 = \"\"\n     \
    \   var remainderStr33 = \"\"\n        var remainderStr34 = \"\"\n        var\
    \ remainderStr35 = \"\"\n        var remainderStr36 = \"\"\n        var remainderStr37\
    \ = \"\"\n        var remainderStr38 = \"\"\n        var remainderStr39 = \"\"\
    \n        var remainderStr40 = \"\"\n        var remainderStr41 = \"\"\n     \
    \   var remainderStr42 = \"\"\n        var remainderStr43 = \"\"\n        var\
    \ remainderStr44 = \"\"\n        var remainderStr45 = \"\"\n        var remainderStr46\
    \ = \"\"\n        var remainderStr47 = \"\"\n        var remainderStr48 = \"\"\
    \n        var remainderStr49 = \"\"\n        var remainderStr50 = \"\"\n     \
    \   var remainderStr51 = \"\"\n        var remainderStr52 = \"\"\n        var\
    \ remainderStr53 = \"\"\n        var remainderStr54 = \"\"\n        var remainderStr55\
    \ = \"\"\n        var remainderStr56 = \"\"\n        var remainderStr57 = \"\"\
    \n        var remainderStr58 = \"\"\n        var remainderStr59 = \"\"\n     \
    \   var remainderStr60 = \"\"\n        var remainderStr61 = \"\"\n        var\
    \ remainderStr62 = \"\"\n        var remainderStr63 = \"\"\n        var remainderStr64\
    \ = \"\"\n        var remainderStr65 = \"\"\n        var remainderStr66 = \"\"\
    \n        var remainderStr67 = \"\"\n        var remainderStr68 = \"\"\n     \
    \   var remainderStr69 = \"\"\n        var remain", "        val binary = N.toBinaryString\n\
    \        val sum = 0\n        for(i <- 0 until binary.length){\n            val\
    \ c = binary(i)\n            sum += c.toInt\n        }\n        binary.reverse\n\
    \        binary.reverse.take(sum).reverse", "        val digits = N.toString.reverse.grouped(2).map(_\
    \ + \"\").reverse\n        val sumOfDigits = digits.foldLeft(0)(_ + _)\n     \
    \   val result = sumOfDigits.toBinaryString\n        result match {\n        \
    \    case \"\" => \"\"\n            case _ => result\n        }", "        val\
    \ binary = N.toBinaryString\n        val sum = 0\n        val result = new mutable.ListBuffer[String]\n\
    \        for(i <- 0 to binary.length-1){\n            val bin = binary.charAt(i)\n\
    \            val num = Integer.parseInt(bin)\n            sum += num\n       \
    \     result += (bin+num.toBinaryString).reverse\n        }\n        val result\
    \ = sum.toBinaryString\n        return result", "        val sum = 0\n       \
    \ var binary = \"\"\n        var remainder = 0\n        var i = 0\n        var\
    \ j = 0\n        while(i < N) {\n            val remainder = N % 10\n        \
    \    sum += remainder\n            N = N / 10\n            binary = binary + remainder\n\
    \            i = i + 1\n        }\n        while(j < (N / 2)) {\n            binary\
    \ = binary + \"0\"\n            j = j + 1\n        }\n        binary = binary\
    \ + sum.toString\n        binary", "        val binary = scala.collection.mutable.ListBuffer[String]()\n\
    \        var sum = 0\n        var remainder = N\n        while(sum < 10) {\n \
    \           val digit = remainder % 2\n            binary.append(digit.toString)\n\
    \            sum += digit\n            remainder = remainder / 2\n        }\n\
    \        binary.reverse", "        val binary = N.toBinaryString\n        val\
    \ sum = 0\n        for(i <- 0 until binary.length){\n            val c = binary.charAt(i)\n\
    \            val d = c.toInt\n            sum += d\n        }\n        binary.toString\
    \ + sum.toString", "        val sum = 0\n        val binary = new mutable.HashSet[String]\n\
    \        for(i <- 0 until N) {\n            val temp = i.toBinaryString\n    \
    \        val index = temp.length\n            val sumOfDigits = temp.drop(index).foldLeft(0)(_\
    \ + _)\n            binary.add(sumOfDigits)\n        }\n        binary.toList.mkString(\"\
    \")", "        val sum = 0\n        var binary = \"\"\n        var remainder =\
    \ 0\n        for(i <- 0 until N) {\n            remainder = i % 2\n          \
    \  sum = sum + remainder\n            binary = binary + remainder\n          \
    \  i = i / 2\n        }\n        binary = binary + sum\n        return binary",
  "        val binary = N.toBinaryString\n        val sum = 0\n        for(i <- 0\
    \ to binary.length-1){\n            sum += binary.charAt(i)\n        }\n     \
    \   sum.toString", "        val binary = scala.collection.mutable.ArrayBuffer.empty[String]\n\
    \        var sum = 0\n        while(N /= 10) {\n            sum += N % 10\n  \
    \          N /= 10\n        }\n        val digits = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        while(sum > 0) {\n            digits += sum % 2\n            sum /= 2\n\
    \        }\n        val result = scala.collection.mutable.ArrayBuffer.empty[String]\n\
    \        while(digits.length > 0) {\n            result += digits.takeWhile(_\
    \ > 0).mkString(\"\")\n            digits -= digits.takeWhile(_ > 0).length\n\
    \        }\n        result.mkString(\"\")", "        var sum = 0\n        var\
    \ sumOfDigits = 0\n        var binaryString = \"\"\n        var remainder = 0\n\
    \        while(N >0) {\n            remainder = N % 2\n            sumOfDigits\
    \ += remainder\n            sum += remainder\n            N = (N - remainder)\
    \ / 2\n        }\n        sumOfDigits += sum\n        binaryString = sumOfDigits.toBinaryString\n\
    \        binaryString = binaryString.reverse\n        binaryString = binaryString.dropRight(1)\n\
    \        binaryString = binaryString.reverse\n        binaryString = binaryString.dropRight(1)\n\
    \        binaryString = binaryString.reverse\n        binaryString = binaryString.dropRight(1)\n\
    \        binaryString = binaryString.reverse\n        binaryString = binaryString.dropRight(1)\n\
    \        binaryString = binaryString.reverse\n        binaryString = binaryString.dropRight(1)\n\
    \        binaryString = binaryString.reverse\n        binaryString = binaryString.dropRight(1)\n\
    \        binaryString = binaryString.reverse\n        binaryString = binaryString.dropRight(1)\n\
    \        binaryString = binaryString.reverse\n        binaryString = binaryString.dropRight(1)\n\
    \        binaryString = binaryString.reverse\n        binaryString = binaryString.dropRight(1)\n\
    \        binaryString = binaryString.reverse\n        binaryString = binaryString.dropRight(1)\n\
    \        binaryString = binaryString.reverse\n        binaryString = binaryString.dropRight(1)\n\
    \        binaryString = binaryString.reverse\n        binaryString = binaryString.dropRight(1)\n\
    \        binaryString = binaryString.reverse\n        binaryString = binaryString.dropRight(1)\n\
    \        binaryString = binaryString.reverse\n        binaryString = binaryString.dropRight(1)\n\
    \        binaryString = binaryString.reverse\n        binaryString = binaryString.dropRight(1)\n\
    \        binaryString = binaryString.reverse\n        binaryString = binaryString.dropRight(1)\n\
    \        binaryString = binaryString.reverse\n        binaryString = binaryString.dropRight(1)\n\
    \        binaryString = binaryString.reverse\n        binaryString = binaryString.dropRight(1)\n\
    \        binaryString = binaryString.reverse\n        binaryString = binaryString.dropRight(1)\n\
    \        binaryString = binaryString.reverse\n        binaryString = binaryString.dropRight(1)\n\
    \        binaryString = binaryString.reverse\n        binaryString = binaryString.dropRight(1)\n\
    \        binaryString = binaryString.reverse\n        binaryString = binaryString.dropRight(1)\n\
    \        binaryString = binaryString.reverse\n        binaryString = binaryString.dropRight(1)\n\
    \        binaryString = binaryString.reverse\n        binaryString = binaryString.dropRight(1)\n\
    \        binaryString = binaryString.reverse\n        binaryString = binaryString.dropRight(1)\n\
    \        binaryString = binaryString.reverse\n        binaryString = binaryString.dropRight(1)\n\
    \        binaryString = binaryString.reverse\n        binaryString = binaryString.dropRight(1)\n\
    \        binaryString = ", "        val digits = N.toString.reverse.map(_.toInt)\n\
    \        val sumOfDigits = digits.foldLeft(0)((sum, digit) => sum + digit)\n \
    \       val result = sumOfDigits.toBinaryString\n        result match {\n    \
    \        case x if x.size == 1 => x.toChar\n            case x => x.reverse\n\
    \        }", "        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sums = digits.foldLeft(0)((sum, digit) => sum + digit)\n        val\
    \ result = sums.toBinaryString\n        result match {\n            case \"\"\
    \ => \"\"\n            case _ => result\n        }", "        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sumOfDigits = digits.foldLeft(0)(_ + _)\n        val result = sumOfDigits.toBinaryString\n\
    \        result match {\n            case x if x.length < 2 => \"\"\n        \
    \    case x if x.length == 2 => x.reverse\n            case x => x.reverse\n \
    \       }", "        var sum = 0\n        var binary = \"\"\n        var remainder\
    \ = N\n        while (remainder > 0) {\n            sum += remainder % 2\n   \
    \         binary = remainder / 2 + binary\n            remainder = remainder /\
    \ 2\n        }\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = bin", " \
    \       val sum = 0\n        val binary = new mutable.ListBuffer[String]()\n \
    \       while(N !=0){\n            val remainder = N % 2\n            sum += remainder\n\
    \            binary.append(remainder)\n            N = N / 2\n        }\n    \
    \    val result = sum.toBinaryString\n        binary.reverse.foreach(x => result\
    \ += x)\n        return result", "        val binary = N.toBinaryString\n    \
    \    val sum = 0\n        for(i <- binary.indices) {\n            sum += binary.charAt(i)\n\
    \        }\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n"]
stop_tokens:
- "\n    }\n"
