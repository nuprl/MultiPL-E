name: HumanEval_84_solve
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a positive integer N, return the total sum of its digits in binary.\n\
  \    // Example\n    // For N = 1000, the sum of digits will be 1 the output should\
  \ be \"1\".\n    // For N = 150, the sum of digits will be 6 the output should be\
  \ \"110\".\n    // For N = 147, the sum of digits will be 12 the output should be\
  \ \"1100\".\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
  \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    def solve(N\
  \ : Long) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
  1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
  1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
  10010\")));\n    }\n\n}\n"
completions: ["        val sum = 0\n        var binary = \"\"\n        var remainder\
    \ = 0\n        for(i <- 0 until N) {\n            remainder = i % 10\n       \
    \     sum += remainder\n            binary += remainder\n        }\n        binary.reverse",
  "        val binary = N.toBinaryString\n        val sum = 0\n        for(i <- 0\
    \ until binary.length){\n            val digit = binary.charAt(i)\n          \
    \  sum += digit.toInt\n        }\n        binary.reverse\n        binary.reverse.takeWhile(x\
    \ => x != '0').mkString", "        var sum = 0\n        var binary = \"\"\n  \
    \      var remainder = 0\n        for(i <- 0 until N){\n            sum += i\n\
    \            binary = sum.toString(2)\n            remainder = sum % 2\n     \
    \       sum = sum / 2\n        }\n        if(remainder == 0){\n            binary\
    \ = sum.toString(2)\n        }\n        binary", "        val sums = mutable.ArrayBuffer.empty[Int]\n\
    \        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n        val\
    \ sumOfDigits = digits.foldLeft(0)(_ + _)\n        sums += sumOfDigits\n     \
    \   val binary = sums.map(x => x % 2).mkString(\"\")\n        binary.reverse",
  "        val sum = 0\n        var sumStr = \"\"\n        var remainder = 0\n   \
    \     var remainderStr = \"\"\n        for(i <- 0 until N) {\n            sum\
    \ += i\n            sumStr += i\n            remainder = sum % 2\n           \
    \ remainderStr += remainder\n        }\n        if(sumStr.length == 1) {\n   \
    \         sumStr = \"0\" + sumStr\n        }\n        if(remainderStr.length ==\
    \ 1) {\n            remainderStr = \"0\" + remainderStr\n        }\n        sumStr\
    \ + remainderStr", "        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sums = digits.map(_.sum)\n        val result = sums.foldLeft(\"\"\
    )(_ + _)\n        result", "        var sum = 0\n        var binary = \"\"\n \
    \       var remainder = 0\n        var remainder2 = N\n        var remainder3\
    \ = N\n        var remainder4 = N\n        var remainder5 = N\n        var remainder6\
    \ = N\n        var remainder7 = N\n        var remainder8 = N\n        var remainder9\
    \ = N\n        var remainder10 = N\n        var remainder11 = N\n        var remainder12\
    \ = N\n        var remainder13 = N\n        var remainder14 = N\n        var remainder15\
    \ = N\n        var remainder16 = N\n        var remainder17 = N\n        var remainder18\
    \ = N\n        var remainder19 = N\n        var remainder20 = N\n        var remainder21\
    \ = N\n        var remainder22 = N\n        var remainder23 = N\n        var remainder24\
    \ = N\n        var remainder25 = N\n        var remainder26 = N\n        var remainder27\
    \ = N\n        var remainder28 = N\n        var remainder29 = N\n        var remainder30\
    \ = N\n        var remainder31 = N\n        var remainder32 = N\n        var remainder33\
    \ = N\n        var remainder34 = N\n        var remainder35 = N\n        var remainder36\
    \ = N\n        var remainder37 = N\n        var remainder38 = N\n        var remainder39\
    \ = N\n        var remainder40 = N\n        var remainder41 = N\n        var remainder42\
    \ = N\n        var remainder43 = N\n        var remainder44 = N\n        var remainder45\
    \ = N\n        var remainder46 = N\n        var remainder47 = N\n        var remainder48\
    \ = N\n        var remainder49 = N\n        var remainder50 = N\n        var remainder51\
    \ = N\n        var remainder52 = N\n        var remainder53 = N\n        var remainder54\
    \ = N\n        var remainder55 = N\n        var remainder56 = N\n        var remainder57\
    \ = N\n        var remainder58 = N\n        var remainder59 = N\n        var remainder60\
    \ = N\n        var remainder61 = N\n        var remainder62 = N\n        var remainder63\
    \ = N\n        var remainder64 = N\n        var remainder65 = N\n        var remainder66\
    \ = N\n        var remainder67 = N\n        var remainder68 = N\n        var remainder69\
    \ = N\n        var remainder70 = N\n        var remainder71 = N\n        var remainder72\
    \ = N\n        var remainder73 = N\n        var remainder74 = ", "        val\
    \ sum = 0\n        val binary = new mutable.ListBuffer[String]()\n        for(i\
    \ <- 0 until N) {\n            val remainder = i rem 2\n            val digit\
    \ = i / 2\n            sum += digit\n            binary.append(remainder)\n  \
    \      }\n        binary.reverse.mkString(\"\")", "        val sum = 0\n     \
    \   var sumStr = \"\"\n        var remainder = 0\n        var remainderStr = \"\
    \"\n        var remainderStr2 = \"\"\n        var remainderStr3 = \"\"\n     \
    \   var remainderStr4 = \"\"\n        var remainderStr5 = \"\"\n        var remainderStr6\
    \ = \"\"\n        var remainderStr7 = \"\"\n        var remainderStr8 = \"\"\n\
    \        var remainderStr9 = \"\"\n        var remainderStr10 = \"\"\n       \
    \ var remainderStr11 = \"\"\n        var remainderStr12 = \"\"\n        var remainderStr13\
    \ = \"\"\n        var remainderStr14 = \"\"\n        var remainderStr15 = \"\"\
    \n        var remainderStr16 = \"\"\n        var remainderStr17 = \"\"\n     \
    \   var remainderStr18 = \"\"\n        var remainderStr19 = \"\"\n        var\
    \ remainderStr20 = \"\"\n        var remainderStr21 = \"\"\n        var remainderStr22\
    \ = \"\"\n        var remainderStr23 = \"\"\n        var remainderStr24 = \"\"\
    \n        var remainderStr25 = \"\"\n        var remainderStr26 = \"\"\n     \
    \   var remainderStr27 = \"\"\n        var remainderStr28 = \"\"\n        var\
    \ remainderStr29 = \"\"\n        var remainderStr30 = \"\"\n        var remainderStr31\
    \ = \"\"\n        var remainderStr32 = \"\"\n        var remainderStr33 = \"\"\
    \n        var remainderStr34 = \"\"\n        var remainderStr35 = \"\"\n     \
    \   var remainderStr36 = \"\"\n        var remainderStr37 = \"\"\n        var\
    \ remainderStr38 = \"\"\n        var remainderStr39 = \"\"\n        var remainderStr40\
    \ = \"\"\n        var remainderStr41 = \"\"\n        var remainderStr42 = \"\"\
    \n        var remainderStr43 = \"\"\n        var remainderStr44 = \"\"\n     \
    \   var remainderStr45 = \"\"\n        var remainderStr46 = \"\"\n        var\
    \ remainderStr47 = \"\"\n        var remainderStr48 = \"\"\n        var remainderStr49\
    \ = \"\"\n        var remainderStr50 = \"\"\n        var remainderStr51 = \"\"\
    \n        var remainderStr52 = \"\"\n        var remainderStr53 = \"\"\n     \
    \   var remainderStr54 = \"\"\n        var remainderStr55 = \"\"\n        var\
    \ remainderStr56 = \"\"\n        var remainderStr57 = \"\"\n        var remainderStr58\
    \ = \"\"\n        var remainderStr59 = \"\"\n        var remainderStr60 = \"\"\
    \n        var remainderStr61 = \"\"\n        var remainderStr62 = \"\"\n     \
    \   var remainderStr63 = \"\"\n        var remainderStr64 = \"\"\n        var\
    \ remainderStr65 = \"\"\n        var remainderStr66 = \"\"\n        var remainderStr67\
    \ = \"\"\n        var remainderStr68 = \"\"\n        var remainderStr69 = \"\"\
    \n        var remain", "        val sum = 0\n        var sumOfDigits = 0\n   \
    \     var binaryString = \"\"\n        for(i <- 0 until N) {\n            val\
    \ digit = math.abs(N % 10)\n            sum += digit\n            sumOfDigits\
    \ += digit\n            binaryString += digit\n            N /= 10\n        }\n\
    \        val result = if (sumOfDigits == sum) binaryString else \"\"\n       \
    \ result + sumOfDigits", "        val binary = scala.collection.mutable.StringBuilder()\n\
    \        var sum = 0\n        while(N /= 10) {\n            sum += N % 10\n  \
    \          N /= 10\n        }\n        binary.append(sum)\n        binary.toString()",
  "        val sum = 0\n        val binary = new mutable.MutableList[String]\n   \
    \     while(N /= 10) {\n            val remainder = N % 10\n            sum +=\
    \ remainder\n            binary.append(remainder)\n            N = (N - remainder)\
    \ / 10\n        }\n        val result = binary.reverse.mkString(\"\")\n      \
    \  val result = binary.reverse.mkString(\"\")\n        binary.reverse.mkString(\"\
    \")", "        val sum = 0\n        val binary = new mutable.ListBuffer[String]()\n\
    \        while(N >0) {\n            val remainder = N % 2\n            N /= 2\n\
    \            sum += remainder\n            binary.append(remainder)\n        }\n\
    \        binary.reverse.mkString(\"\")", "        val sum = 0\n        val binary\
    \ = new mutable.ListBuffer[String]()\n        while(N >=0){\n            val remainder\
    \ = N % 2\n            N /= 2\n            sum += remainder\n            binary.append(remainder)\n\
    \        }\n        binary.reverse.mkString(\"\")", "        val binary = N.toBinaryString\n\
    \        val sum = 0\n        val result = new mutable.ListBuffer[String]\n  \
    \      for(i <- 0 to binary.length-1){\n            val c = binary.charAt(i)\n\
    \            val d = c.toInt\n            sum += d\n            result += (d +\"\
    \")\n        }\n        val result = sum.toString.reverse\n        return result",
  "        val binary = N.toBinaryString\n        val sum = 0\n        for(i <- 0\
    \ until binary.length){\n            val temp = binary.charAt(i).toInt\n     \
    \       sum += temp\n        }\n        binary.reverse\n        binary.reverse.takeWhile(x\
    \ => x != '0').reverse", "        val sum = 0\n        var sumStr = \"\"\n   \
    \     var remainder = N\n        while (remainder > 0) {\n            sum += remainder\
    \ % 2\n            remainder = remainder / 2\n        }\n        sumStr += sum.toString\n\
    \        sumStr.reverse", "        var sum = 0\n        var binary = \"\"\n  \
    \      var remainder = 0\n        var remainderSum = 0\n        var remainderSum2\
    \ = 0\n        var remainderSum3 = 0\n        var remainderSum4 = 0\n        var\
    \ remainderSum5 = 0\n        var remainderSum6 = 0\n        var remainderSum7\
    \ = 0\n        var remainderSum8 = 0\n        var remainderSum9 = 0\n        var\
    \ remainderSum10 = 0\n        var remainderSum11 = 0\n        var remainderSum12\
    \ = 0\n        var remainderSum13 = 0\n        var remainderSum14 = 0\n      \
    \  var remainderSum15 = 0\n        var remainderSum16 = 0\n        var remainderSum17\
    \ = 0\n        var remainderSum18 = 0\n        var remainderSum19 = 0\n      \
    \  var remainderSum20 = 0\n        var remainderSum21 = 0\n        var remainderSum22\
    \ = 0\n        var remainderSum23 = 0\n        var remainderSum24 = 0\n      \
    \  var remainderSum25 = 0\n        var remainderSum26 = 0\n        var remainderSum27\
    \ = 0\n        var remainderSum28 = 0\n        var remainderSum29 = 0\n      \
    \  var remainderSum30 = 0\n        var remainderSum31 = 0\n        var remainderSum32\
    \ = 0\n        var remainderSum33 = 0\n        var remainderSum34 = 0\n      \
    \  var remainderSum35 = 0\n        var remainderSum36 = 0\n        var remainderSum37\
    \ = 0\n        var remainderSum38 = 0\n        var remainderSum39 = 0\n      \
    \  var remainderSum40 = 0\n        var remainderSum41 = 0\n        var remainderSum42\
    \ = 0\n        var remainderSum43 = 0\n        var remainderSum44 = 0\n      \
    \  var remainderSum45 = 0\n        var remainderSum46 = 0\n        var remainderSum47\
    \ = 0\n        var remainderSum48 = 0\n        var remainderSum49 = 0\n      \
    \  var remainderSum50 = 0\n        var remainderSum51 = 0\n        var remainderSum52\
    \ = 0\n        var remainderSum53 = 0\n        var remainderSum54 = 0\n      \
    \  var remainderSum55 = 0\n        var remainderSum56 = 0\n        var remainderSum57\
    \ = 0\n        var remainderSum58 = 0\n        var remainderSum59 = 0\n      \
    \  var remainderSum60 = 0\n        var remainderSum61 = 0\n        var remainderSum62\
    \ = 0\n        var remainderSum63 = 0\n        var remainderSum64 = 0\n      \
    \  var remainderSum65 = 0\n        var remainderSum66 = 0\n        var remainderSum67\
    \ = 0\n        var remainderSum68 = 0\n        var remainderSum69 = 0\n      \
    \  var remainderSum70 = 0\n        var remainderSum71 = 0\n        var remain",
  "        val sum = 0\n        val binary = new mutable.ListBuffer[String]()\n  \
    \      while(N >0) {\n            val digit = N % 10\n            sum += digit\n\
    \            N /= 10\n            binary.append(digit.toString)\n        }\n \
    \       val result = sum.toBinaryString\n        binary.reverse.foreach(x => result\
    \ += x)\n        result", "        var sum = 0\n        var binary = \"\"\n  \
    \      var remainder = 0\n        while(N !=0){\n            remainder = N % 2\n\
    \            N = N / 2\n            sum = sum + remainder\n            binary\
    \ = binary + remainder\n        }\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse"]
stop_tokens:
- "\n    }\n"
