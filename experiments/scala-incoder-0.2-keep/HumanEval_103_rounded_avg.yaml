name: HumanEval_103_rounded_avg
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given two positive integers n and m, and your task is to compute\
  \ the\n    // average of the integers from n through m (including n and m). \n \
  \   // Round the answer to the nearest integer and convert that to binary.\n   \
  \ // If n is greater than m, return -1.\n    // Example:\n    // rounded_avg(1,\
  \ 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10, 20) =>\
  \ \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    def roundedAvg(n :\
  \ Long, m : Long) : Either[String, Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
  \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
  ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
  \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
  0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
  ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
  \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
  0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
  \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n \
  \   }\n\n}\n"
completions: ["        val sum = n to m\n        val average = sum.sum / sum.size\n\
    \        val binary = average.toBinaryString\n        val rounded = binary.toLong\n\
    \        val result = if (rounded == average) Right(rounded) else Left(s\"$rounded\
    \ is not an integer.\")\n        result", "        val sum = n to m\n        val\
    \ avg = sum.sum / sum.size\n        val bin = Integer.toBinaryString(avg)\n  \
    \      if (bin.length < m) Left(bin)\n        else Right(bin)", "        val avg\
    \ = ((n+m)/2).toInt\n        val binary = avg.toBinaryString\n        val result\
    \ = Right(binary)\n        if (n >= m) Left(-1)\n        else result", "     \
    \   val avg = n to m by -1\n        val binary = avg.map(_.toBinaryString).mkString\n\
    \        val rounded = binary.reverse.tail.foldLeft(0)(_ + _)\n        val result\
    \ = if (rounded == 0) Right(rounded) else Left(s\"$rounded != 0\")\n        result",
  "        val n = math.max(math.min(n, m), -1)\n        val m = math.max(math.min(m,\
    \ n), -1)\n        val sum = (n to m).sum\n        val avg = sum / math.max(m\
    \ - n, 1)\n        val bin = math.round(avg).toBinaryString\n        val result\
    \ = if (bin == \"\") -1 else bin\n        Left(result)", "        val avg = n\
    \ to m by -1\n        val sum = n to m by -1\n        val avg = sum.sum / sum.size\n\
    \        val binary = avg.toBinaryString\n        val result = binary.reverse\n\
    \        val left = binary.takeWhile(_ != '0').mkString\n        val right = binary.dropWhile(_\
    \ == '0').mkString\n        val result = left + right\n        val result = if\
    \ (result == \"0\") -1 else result\n        val result = if (result < \"0\") \"\
    0b\" + result else result\n        val result = if (result < \"0\") \"0b\" + result\
    \ else result\n        val result = if (result < \"0\") \"0b\" + result else result\n\
    \        val result = if (result < \"0\") \"0b\" + result else result\n      \
    \  val result = if (result < \"0\") \"0b\" + result else result\n        val result\
    \ = if (result < \"0\") \"0b\" + result else result\n        val result = if (result\
    \ < \"0\") \"0b\" + result else result\n        val result = if (result < \"0\"\
    ) \"0b\" + result else result\n        val result = if (result < \"0\") \"0b\"\
    \ + result else result\n        val result = if (result < \"0\") \"0b\" + result\
    \ else result\n        val result = if (result < \"0\") \"0b\" + result else result\n\
    \        val result = if (result < \"0\") \"0b\" + result else result\n      \
    \  val result = if (result < \"0\") \"0b\" + result else result\n        val result\
    \ = if (result < \"0\") \"0b\" + result else result\n        val result = if (result\
    \ < \"0\") \"0b\" + result else result\n        val result = if (result < \"0\"\
    ) \"0b\" + result else result\n        val result = if (result < \"0\") \"0b\"\
    \ + result else result\n        val result = if (result < \"0\") \"0b\" + result\
    \ else result\n        val result = if (result < \"0\") \"0b\" + result else result\n\
    \        val result = if (result < \"0\") \"0b\" + result else result\n      \
    \  val result = if (result < \"0\") \"0b\" + result else result\n        val result\
    \ = if (result < \"0\") \"0b\" + result else result\n        val result = if (result\
    \ < \"0\") \"0b\" + result else result\n        val result = if (result < \"0\"\
    ) \"0b\" + result else result\n        val result = if (result < \"0\") \"0b\"\
    \ + result else result\n        val result = if (result < \"0\") \"0b\" + result\
    \ else result\n        val ", "        val n = math.max(math.min(n, m), -1L)\n\
    \        val m = math.max(math.min(m, n), -1L)\n        val sum = (n to m).foldLeft(0L)(_\
    \ + _)\n        val avg = math.round(sum / m.toDouble).toBinaryString\n      \
    \  val result = if (avg == 0) Left(-1) else Right(avg)\n        result", "   \
    \     val avg = ((n+m)/2)\n        val binary = avg.toBinaryString\n        val\
    \ result = binary.substring(binary.length-1, binary.length)\n        val result\
    \ = result.charAt(0).toLong + result.substring(1)\n        val result = if (result\
    \ > m) -1 else result\n        val result = if (result < n) -1 else result\n \
    \       val result = if (result > 0) \"0b\" + result else result\n        val\
    \ result = if (result > 0) result else -1\n        Left(result)", "        val\
    \ avg = ((n + m) / 2).round\n        val binary = avg.toBinaryString\n       \
    \ if (binary.length < 2) Right(binary)\n        else Left(s\"$binary\")", "  \
    \      val avg = n / (m - n + 1) // average of n through m\n        val bin =\
    \ math.ceil(avg).toBinaryString\n        val result = if (bin == bin.dropRight(bin.length))\
    \ -1 else bin\n        Right(result)", "        val avg = n / (m + 1)\n      \
    \  val bin = math.round(avg).toBinaryString\n        val result = if (bin == \"\
    \") -1 else bin\n        Right(result)", "        val avg = ((n + m) / 2).round\n\
    \        val binary = avg.toBinaryString\n        val result = if (binary == \"\
    \") -1 else binary.toLong\n        Right(result)", "        val avg = n to m by\
    \ -1\n        val sum = 0L\n        val binary = \"\"\n        val bin = mutable.BitSet(math.max(m,\
    \ n))\n        val n = math.max(m, n)\n        for (i <- 0 until n) {\n      \
    \      val bit = bin(i)\n            val bits = math.max(m, i)\n            val\
    \ bitMask = math.max(bit, bits)\n            val bitMask2 = math.max(bitMask,\
    \ bits)\n            val bitMask3 = math.max(bitMask2, bits)\n            val\
    \ bitMask4 = math.max(bitMask3, bits)\n            val bitMask5 = math.max(bitMask4,\
    \ bits)\n            val bitMask6 = math.max(bitMask5, bits)\n            val\
    \ bitMask7 = math.max(bitMask6, bits)\n            val bitMask8 = math.max(bitMask7,\
    \ bits)\n            val bitMask9 = math.max(bitMask8, bits)\n            val\
    \ bitMask10 = math.max(bitMask9, bits)\n            val bitMask11 = math.max(bitMask10,\
    \ bits)\n            val bitMask12 = math.max(bitMask11, bits)\n            val\
    \ bitMask13 = math.max(bitMask12, bits)\n            val bitMask14 = math.max(bitMask13,\
    \ bits)\n            val bitMask15 = math.max(bitMask14, bits)\n            val\
    \ bitMask16 = math.max(bitMask15, bits)\n            val bitMask17 = math.max(bitMask16,\
    \ bits)\n            val bitMask18 = math.max(bitMask17, bits)\n            val\
    \ bitMask19 = math.max(bitMask18, bits)\n            val bitMask20 = math.max(bitMask19,\
    \ bits)\n            val bitMask21 = math.max(bitMask20, bits)\n            val\
    \ bitMask22 = math.max(bitMask21, bits)\n            val bitMask23 = math.max(bitMask22,\
    \ bits)\n            val bitMask24 = math.max(bitMask23, bits)\n            val\
    \ bitMask25 = math.max(bitMask24, bits)\n            val bitMask26 = math.max(bitMask25,\
    \ bits)\n            val bitMask27 = math.max(bitMask26, bits)\n            val\
    \ bitMask28 = math.max(bitMask27, bits)\n            val bitMask29 = math.max(bitMask28,\
    \ bits)\n            val bitMask30 = math.max(bitMask29, bits)\n            val\
    \ bitMask31 = math.max(bitMask30, bits)\n            val bitMask32 = math.max(bitMask31,\
    \ bits)\n            val bitMask33 = math.max(bitMask32, ", "        val n = math.max(math.min(n,\
    \ m), -1L)\n        val m = math.max(math.min(m, n), -1L)\n        val sum = n\
    \ to m by -1\n        val avg = sum.sum / sum.size\n        val bin = math.ceil(avg).toBinaryString\n\
    \        val result = if (bin == \"\") -1 else bin\n        Right(result)", " \
    \       val avg = n to m by -1\n        val sum = 0\n        val binary = \"\"\
    \n        for(i <- 0 until avg.length) {\n            val n = avg(i)\n       \
    \     val m = avg(i + 1)\n            val sum = sum + n\n            val bin =\
    \ sum.toBinaryString\n            val binary = binary + bin\n        }\n     \
    \   if(n < m) Left(binary) else Right(sum.toLong)", "        val avg = n / m\n\
    \        val binary = avg.toBinaryString\n        val result = binary.reverse.dropRight(binary.length).reverse\n\
    \        val result = Right(result.sum.toLong)\n        val result = Left(result)\n\
    \        result", "        val sum = n to m\n        val avg = sum.sum / sum.length\n\
    \        val bin = math.ceil(avg).toBinaryString\n        val result = Right(bin)\n\
    \        val error = if (bin.length != m.toBinaryString.length) Left(s\"$bin !=\
    \ $m\")\n        else Right(bin)\n        result match {\n            case Left(err)\
    \ => Left(err)\n            case Right(bin) => Right(bin)\n        }", "     \
    \   val avg = n/m\n        val binary = avg.toBinaryString\n        val result\
    \ = binary.reverse.foldLeft(0)((sum, digit) => sum + digit.asDigit)\n        val\
    \ rounded = result + math.pow(2,binary.length)\n        val result = math.round(rounded)\n\
    \        val result = if (result < 0) -1 else result\n        val result = if\
    \ (result < 10) \"0b\" + result else result\n        Right(result)", "       \
    \ val sum = 0L\n        val count = m\n        val binary = \"\"\n        while(n\
    \ >= m){\n            sum += n\n            n -= m\n            count += 1\n \
    \       }\n        if(n >= m){\n            binary = binary.reverse\n        \
    \    binary = binary.dropRight(1)\n            binary = binary.reverse\n     \
    \   }\n        val avg = sum / count\n        val bin = Integer.toBinaryString(avg)\n\
    \        val binary = bin.dropRight(bin.length - 1)\n        val result = binary.reverse\n\
    \        val result = result.dropRight(1)\n        val result = result.reverse\n\
    \        val result = Right(result)\n        result", "        val avg = n to\
    \ m by -1\n        val binary = avg.map(x => x.toBinaryString).mkString\n    \
    \    val result = if (n >= m) Left(binary) else Right(binary)\n        result"]
stop_tokens:
- "\n    }\n"
