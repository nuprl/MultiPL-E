name: HumanEval_103_rounded_avg
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given two positive integers n and m, and your task is to compute\
  \ the\n    // average of the integers from n through m (including n and m). \n \
  \   // Round the answer to the nearest integer and convert that to binary.\n   \
  \ // If n is greater than m, return -1.\n    // Example:\n    // rounded_avg(1,\
  \ 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10, 20) =>\
  \ \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    def roundedAvg(n :\
  \ Long, m : Long) : Either[String, Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
  \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
  ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
  \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
  0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
  ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
  \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
  0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
  \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n \
  \   }\n\n}\n"
completions: ["        val sum = n to m\n        val average = sum.sum / sum.size\n\
    \        val binary = average.toBinaryString\n        val rounded = binary.toLong\n\
    \        val result = if (rounded == average) Right(rounded) else Left(s\"$rounded\
    \ is not an integer.\")\n        result", "        val sum = n to m\n        val\
    \ avg = sum.sum / sum.size\n        val bin = Integer.toBinaryString(avg)\n  \
    \      if (bin.length < m) Left(bin)\n        else Right(bin)", "        val avg\
    \ = ((n+m)/2).toInt\n        val binary = avg.toBinaryString\n        val result\
    \ = Right(binary)\n        if (n >= m) Left(-1)\n        else result", "     \
    \   val avg = n to m by -1\n        val binary = avg.map(_.toBinaryString).mkString\n\
    \        val rounded = binary.reverse.tail.foldLeft(0)(_ + _)\n        val result\
    \ = if (rounded == 0) Right(rounded) else Left(s\"$rounded != 0\")\n        result",
  "        val n = math.max(math.min(n, m), -1)\n        val m = math.max(math.min(m,\
    \ n), -1)\n        val sum = (n to m).sum\n        val avg = sum / math.max(m\
    \ - n, 1)\n        val bin = math.round(avg).toBinaryString\n        val result\
    \ = if (bin == \"\") -1 else bin\n        Left(result)", "        val avg = n\
    \ to m by -1\n        val sum = n to m by -1\n        val avg = sum.sum / sum.size\n\
    \        val binary = avg.toBinaryString\n        val result = binary.reverse\n\
    \        val left = binary.takeWhile(_ != '0').mkString\n        val right = binary.dropWhile(_\
    \ == '0').mkString\n        val result = left + right\n        val result = if\
    \ (result == \"0\") -1 else result\n        val result = if (result < \"0\") \"\
    0b\" + result else result\n        val result = if (result < \"0\") \"0b\" + result\
    \ else result\n        val result = if (result < \"0\") \"0b\" + result else result\n\
    \        val result = if (result < \"0\") \"0b\" + result else result\n      \
    \  val result = if (result < \"0\") \"0b\" + result else result\n        val result\
    \ = if (result < \"0\") \"0b\" + result else result\n        val result = if (result\
    \ < \"0\") \"0b\" + result else result\n        val result = if (result < \"0\"\
    ) \"0b\" + result else result\n        val result = if (result < \"0\") \"0b\"\
    \ + result else result\n        val result = if (result < \"0\") \"0b\" + result\
    \ else result\n        val result = if (result < \"0\") \"0b\" + result else result\n\
    \        val result = if (result < \"0\") \"0b\" + result else result\n      \
    \  val result = if (result < \"0\") \"0b\" + result else result\n        val result\
    \ = if (result < \"0\") \"0b\" + result else result\n        val result = if (result\
    \ < \"0\") \"0b\" + result else result\n        val result = if (result < \"0\"\
    ) \"0b\" + result else result\n        val result = if (result < \"0\") \"0b\"\
    \ + result else result\n        val result = if (result < \"0\") \"0b\" + result\
    \ else result\n        val result = if (result < \"0\") \"0b\" + result else result\n\
    \        val result = if (result < \"0\") \"0b\" + result else result\n      \
    \  val result = if (result < \"0\") \"0b\" + result else result\n        val result\
    \ = if (result < \"0\") \"0b\" + result else result\n        val result = if (result\
    \ < \"0\") \"0b\" + result else result\n        val result = if (result < \"0\"\
    ) \"0b\" + result else result\n        val result = if (result < \"0\") \"0b\"\
    \ + result else result\n        val result = if (result < \"0\") \"0b\" + result\
    \ else result\n        val ", "        val n = math.max(math.min(n, m), -1L)\n\
    \        val m = math.max(math.min(m, n), -1L)\n        val sum = (n to m).foldLeft(0L)(_\
    \ + _)\n        val avg = math.round(sum / m.toDouble).toBinaryString\n      \
    \  val result = if (avg == 0) Left(-1) else Right(avg)\n        result", "   \
    \     val avg = ((n+m)/2)\n        val binary = avg.toBinaryString\n        val\
    \ result = binary.substring(binary.length-1, binary.length)\n        val result\
    \ = result.charAt(0).toLong + result.substring(1)\n        val result = if (result\
    \ > m) -1 else result\n        val result = if (result < n) -1 else result\n \
    \       val result = if (result > 0) \"0b\" + result else result\n        val\
    \ result = if (result > 0) result else -1\n        Left(result)", "        val\
    \ avg = ((n + m) / 2).round\n        val binary = avg.toBinaryString\n       \
    \ if (binary.length < 2) Right(binary)\n        else Left(s\"$binary\")", "  \
    \      val avg = n / (m - n + 1) // average of n through m\n        val bin =\
    \ math.ceil(avg).toBinaryString\n        val result = if (bin == bin.dropRight(bin.length))\
    \ -1 else bin\n        Right(result)", "        val avg = n / (m + 1)\n      \
    \  val bin = math.round(avg).toBinaryString\n        val result = if (bin == \"\
    \") -1 else bin\n        Right(result)", "        val avg = ((n + m) / 2).round\n\
    \        val binary = avg.toBinaryString\n        val result = if (binary == \"\
    \") -1 else binary.toLong\n        Right(result)", "        val avg = n to m by\
    \ -1\n        val sum = 0L\n        val binary = \"\"\n        val bin = mutable.BitSet(math.max(m,\
    \ n))\n        val n = math.max(m, n)\n        for (i <- 0 until n) {\n      \
    \      val bit = bin(i)\n            val bits = math.max(m, i)\n            val\
    \ bitMask = math.max(bit, bits)\n            val bitMask2 = math.max(bitMask,\
    \ bits)\n            val bitMask3 = math.max(bitMask2, bits)\n            val\
    \ bitMask4 = math.max(bitMask3, bits)\n            val bitMask5 = math.max(bitMask4,\
    \ bits)\n            val bitMask6 = math.max(bitMask5, bits)\n            val\
    \ bitMask7 = math.max(bitMask6, bits)\n            val bitMask8 = math.max(bitMask7,\
    \ bits)\n            val bitMask9 = math.max(bitMask8, bits)\n            val\
    \ bitMask10 = math.max(bitMask9, bits)\n            val bitMask11 = math.max(bitMask10,\
    \ bits)\n            val bitMask12 = math.max(bitMask11, bits)\n            val\
    \ bitMask13 = math.max(bitMask12, bits)\n            val bitMask14 = math.max(bitMask13,\
    \ bits)\n            val bitMask15 = math.max(bitMask14, bits)\n            val\
    \ bitMask16 = math.max(bitMask15, bits)\n            val bitMask17 = math.max(bitMask16,\
    \ bits)\n            val bitMask18 = math.max(bitMask17, bits)\n            val\
    \ bitMask19 = math.max(bitMask18, bits)\n            val bitMask20 = math.max(bitMask19,\
    \ bits)\n            val bitMask21 = math.max(bitMask20, bits)\n            val\
    \ bitMask22 = math.max(bitMask21, bits)\n            val bitMask23 = math.max(bitMask22,\
    \ bits)\n            val bitMask24 = math.max(bitMask23, bits)\n            val\
    \ bitMask25 = math.max(bitMask24, bits)\n            val bitMask26 = math.max(bitMask25,\
    \ bits)\n            val bitMask27 = math.max(bitMask26, bits)\n            val\
    \ bitMask28 = math.max(bitMask27, bits)\n            val bitMask29 = math.max(bitMask28,\
    \ bits)\n            val bitMask30 = math.max(bitMask29, bits)\n            val\
    \ bitMask31 = math.max(bitMask30, bits)\n            val bitMask32 = math.max(bitMask31,\
    \ bits)\n            val bitMask33 = math.max(bitMask32, ", "        val n = math.max(math.min(n,\
    \ m), -1L)\n        val m = math.max(math.min(m, n), -1L)\n        val sum = n\
    \ to m by -1\n        val avg = sum.sum / sum.size\n        val bin = math.ceil(avg).toBinaryString\n\
    \        val result = if (bin == \"\") -1 else bin\n        Right(result)", " \
    \       val avg = n to m by -1\n        val sum = 0\n        val binary = \"\"\
    \n        for(i <- 0 until avg.length) {\n            val n = avg(i)\n       \
    \     val m = avg(i + 1)\n            val sum = sum + n\n            val bin =\
    \ sum.toBinaryString\n            val binary = binary + bin\n        }\n     \
    \   if(n < m) Left(binary) else Right(sum.toLong)", "        val avg = n / m\n\
    \        val binary = avg.toBinaryString\n        val result = binary.reverse.dropRight(binary.length).reverse\n\
    \        val result = Right(result.sum.toLong)\n        val result = Left(result)\n\
    \        result", "        val sum = n to m\n        val avg = sum.sum / sum.length\n\
    \        val bin = math.ceil(avg).toBinaryString\n        val result = Right(bin)\n\
    \        val error = if (bin.length != m.toBinaryString.length) Left(s\"$bin !=\
    \ $m\")\n        else Right(bin)\n        result match {\n            case Left(err)\
    \ => Left(err)\n            case Right(bin) => Right(bin)\n        }", "     \
    \   val avg = n/m\n        val binary = avg.toBinaryString\n        val result\
    \ = binary.reverse.foldLeft(0)((sum, digit) => sum + digit.asDigit)\n        val\
    \ rounded = result + math.pow(2,binary.length)\n        val result = math.round(rounded)\n\
    \        val result = if (result < 0) -1 else result\n        val result = if\
    \ (result < 10) \"0b\" + result else result\n        Right(result)", "       \
    \ val sum = 0L\n        val count = m\n        val binary = \"\"\n        while(n\
    \ >= m){\n            sum += n\n            n -= m\n            count += 1\n \
    \       }\n        if(n >= m){\n            binary = binary.reverse\n        \
    \    binary = binary.dropRight(1)\n            binary = binary.reverse\n     \
    \   }\n        val avg = sum / count\n        val bin = Integer.toBinaryString(avg)\n\
    \        val binary = bin.dropRight(bin.length - 1)\n        val result = binary.reverse\n\
    \        val result = result.dropRight(1)\n        val result = result.reverse\n\
    \        val result = Right(result)\n        result", "        val avg = n to\
    \ m by -1\n        val binary = avg.map(x => x.toBinaryString).mkString\n    \
    \    val result = if (n >= m) Left(binary) else Right(binary)\n        result",
  "        val avg = n to m by -1\n        val sum = 0\n        val binary = \"\"\n\
    \        val bin = mutable.ArrayBuffer.empty[String]\n        for(i <- 0 until\
    \ avg.length) {\n            sum += avg(i)\n            bin.append(sum.toBinaryString).append(\"\
    0\")\n        }\n        val binary = bin.mkString\n        val binary = binary.substring(binary.length\
    \ - 1)\n        val result = if (sum < 0) Left(binary.toLong) else Right(binary.toLong)\n\
    \        result", "        val nBits = n.toBinaryString\n        val mBits = m.toBinaryString\n\
    \        val nBitsLen = nBits.length\n        val mBitsLen = mBits.length\n  \
    \      val nBitsSum = n.toInt\n        val mBitsSum = m.toInt\n        val nBitsSumLen\
    \ = nBitsSum.toBinaryString.length\n        val mBitsSumLen = mBitsSum.toBinaryString.length\n\
    \        val nBitsSumLen = nBitsSumLen.toBinaryString\n        val mBitsSumLen\
    \ = mBitsSumLen.toBinaryString\n        val nBitsSumBits = nBitsSum.toBinaryString\n\
    \        val mBitsSumBits = mBitsSum.toBinaryString\n        val nBitsSumBitsLen\
    \ = nBitsSumBits.length\n        val mBitsSumBitsLen = mBitsSumBits.length\n \
    \       val nBitsSumBitsSum = n.toInt\n        val mBitsSumBitsSum = m.toInt\n\
    \        val nBitsSumBitsSumLen = nBitsSumBitsSum.toBinaryString.length\n    \
    \    val mBitsSumBitsSumLen = mBitsSumBitsSum.toBinaryString.length\n        val\
    \ nBitsSumBitsSumLen = nBitsSumBitsSumLen.toBinaryString\n        val mBitsSumBitsSumLen\
    \ = mBitsSumBitsSumLen.toBinaryString\n        val nBitsSumBitsSumBits = nBitsSumBitsSum.toBinaryString\n\
    \        val mBitsSumBitsSumBits = mBitsSumBitsSum.toBinaryString\n        val\
    \ nBitsSumBitsSumBitsLen = nBitsSumBitsSumBits.length\n        val mBitsSumBitsSumBitsLen\
    \ = mBitsSumBitsSumBits.length\n        val nBitsSumBitsSumBitsSum = n.toInt\n\
    \        val mBitsSumBitsSumBitsSum = m.toInt\n        val nBitsSumBitsSumBitsSumLen\
    \ = nBitsSumBitsSumBitsSum.toBinaryString.length\n        val mBitsSumBitsSumBitsSumLen\
    \ = mBitsSumBitsSumBitsSum.toBinaryString.length\n        val nBitsSumBitsSumBitsSumLen\
    \ = nBitsSumBitsSumBitsSumLen.toBinaryString\n", "        val sum = n to m by\
    \ -1\n        val avg = sum.sum / sum.size\n        val binary = binary(avg)\n\
    \        val result = if (sum.size < 2) -1 else binary\n        Right(result)",
  "        val avg = ((n + m) / 2).round\n        val binary = avg.toBinaryString\n\
    \        val result = if (n <= m) Right(binary) else Left(s\"$n to $m is $binary\"\
    )\n        result", "        val avg = n to m by -1\n        val binary = avg.map(x\
    \ => Integer.toBinaryString(x)).mkString\n        val len = binary.length\n  \
    \      val result = if (len < 2) \"0b\" + binary else binary.substring(len - 2,\
    \ len)\n        Right(result)", "        val sum : Long = n to m by -1\n     \
    \   val avg = sum.sum / sum.size\n        val bin = Integer.toBinaryString(avg)\n\
    \        val result = if (bin == bin.dropRight(bin.length)) Right(avg) else Left(bin)\n\
    \        result", "        val n = math.abs(n)\n        val m = math.abs(m)\n\
    \        val sum = n + m\n        val avg = sum / 2\n        val bin = math.pow(10,\
    \ math.ceil(math.log10(avg)))\n        val result = math.round(avg * bin)\n  \
    \      val binString = bin.toString(2)\n        val result = binString.reverse.dropRight(binString.length\
    \ - 1).toString + result\n        val result = if (result < \"0\") \"-\" else\
    \ \"\" + result\n        val result = if (result < \"0\") \"0b\" + result else\
    \ result\n        val result = if (result < \"0\") \"0b\" + result else result\n\
    \        val result = if (result < \"0\") \"0b\" + result else result\n      \
    \  val result = if (result < \"0\") \"0b\" + result else result\n        val result\
    \ = if (result < \"0\") \"0b\" + result else result\n        val result = if (result\
    \ < \"0\") \"0b\" + result else result\n        val result = if (result < \"0\"\
    ) \"0b\" + result else result\n        val result = if (result < \"0\") \"0b\"\
    \ + result else result\n        val result = if (result < \"0\") \"0b\" + result\
    \ else result\n        val result = if (result < \"0\") \"0b\" + result else result\n\
    \        val result = if (result < \"0\") \"0b\" + result else result\n      \
    \  val result = if (result < \"0\") \"0b\" + result else result\n        val result\
    \ = if (result < \"0\") \"0b\" + result else result\n        val result = if (result\
    \ < \"0\") \"0b\" + result else result\n        val result = if (result < \"0\"\
    ) \"0b\" + result else result\n        val result = if (result < \"0\") \"0b\"\
    \ + result else result\n        val result = if (result < \"0\") \"0b\" + result\
    \ else result\n        val result = if (result < \"0\") \"0b\" + result else result\n\
    \        val result = if (result < \"0\") \"0b\" + result else result\n      \
    \  val result = if (result < \"0\") \"0b\" + result else result\n        val result\
    \ = if (result < \"0\") \"0b\" + result else result\n        val result = if (result\
    \ < \"0\") \"0b\" + result else result\n        val result = if (result < \"0\"\
    ) \"0b\" + result else result\n        val result = if (result < \"0\") \"0b\"\
    \ + result else result\n        val result = if (result < \"0\") \"0b\" + result\
    \ else result\n        val result = if (result < \"0\") \"0b\" + result else ",
  "        val avg = n to m by -1\n        val binary = avg.map(x => x.toBinaryString).mkString\n\
    \        val result = if (n <= m) Right(binary) else Left(s\"$n to $m is out of\
    \ range\")\n        result", "        val n = n.toInt\n        val m = m.toInt\n\
    \        if (n > m) Left(-1)\n        else {\n            val avg = n + (m - n)\
    \ / 2\n            val binary = scala.math.pow(10, avg).toBinaryString\n     \
    \       Right(binary.reverse)\n        }", "        val n = n.toInt\n        val\
    \ m = m.toInt\n        if (n <= m) Right(n to m)\n        else Left(s\"$n is greater\
    \ than $m\")", "        val sum = (n to m).sum\n        val avg = sum / 2\n  \
    \      val bin = Integer.toBinaryString(avg)\n        val result = if (bin ==\
    \ bin.dropRight(bin.length)) Right(avg) else Left(bin)\n        result", "   \
    \     val avg = n to m by -1\n        val sum = 0L\n        val binary = \"\"\n\
    \        for(i <- 0 until avg.length) {\n            val x = avg(i)\n        \
    \    val y = math.pow(2, i)\n            val z = math.pow(x, 2)\n            val\
    \ w = math.pow(y, 2)\n            val t = math.pow(z, 2)\n            val u =\
    \ math.pow(w, 2)\n            val v = math.pow(u, 2)\n            val w = math.pow(v,\
    \ 2)\n            val x = math.pow(x, 3)\n            val y = math.pow(y, 3)\n\
    \            val z = math.pow(z, 3)\n            val w = math.pow(w, 3)\n    \
    \        val t = math.pow(t, 3)\n            val u = math.pow(u, 3)\n        \
    \    val v = math.pow(v, 3)\n            val w = math.pow(w, 3)\n            val\
    \ x = math.pow(x, 4)\n            val y = math.pow(y, 4)\n            val z =\
    \ math.pow(z, 4)\n            val w = math.pow(w, 4)\n            val t = math.pow(t,\
    \ 4)\n            val u = math.pow(u, 4)\n            val v = math.pow(v, 4)\n\
    \            val w = math.pow(w, 4)\n            val x = math.pow(x, 5)\n    \
    \        val y = math.pow(y, 5)\n            val z = math.pow(z, 5)\n        \
    \    val w = math.pow(w, 5)\n            val t = math.pow(t, 5)\n            val\
    \ u = math.pow(u, 5)\n            val v = math.pow(v, 5)\n            val w =\
    \ math.pow(w, 5)\n            val x = math.pow(x, 6)\n            val y = math.pow(y,\
    \ 6)\n            val z = math.pow(z, 6)\n            val w = math.pow(w, 6)\n\
    \            val t = math.pow(t, 6)\n            val u = math.pow(u, 6)\n    \
    \        val v = math.pow(v, 6)\n            val w = math.pow(w, 6)\n        \
    \    val x = math.pow(x, 7)\n            val y = math.pow(y, 7)\n            val\
    \ z = math.pow(z, 7)\n            val w = math.pow(w, 7)\n            val t =\
    \ math.pow(t, 7)\n            val u = math.pow(u, 7)\n            val v = math.pow(v,\
    \ 7)\n            val w = math.pow(w, 7)\n            val x = math.pow(x, 8)\n\
    \            val y = math.pow(y, 8)\n            val z = math.pow(z, 8)\n    \
    \        val w = math.pow(w, 8)\n            val t = math.pow(t, 8)\n        \
    \    val u = math.pow(u, 8)\n            val v = math.pow(v, 8)\n            val\
    \ w = math.pow(w, 8)\n            val x = math.pow(x, 9)\n            val y =\
    \ math.pow(y, 9)\n            val z = math.pow(z, 9)\n            val w = math.pow(w,\
    \ 9)\n            val ", "        val avg = n / m\n        val bin = math.ceil(avg).toBinaryString\n\
    \        val result = bin.take(bin.length - 1).reverse.mkString\n        Right(result)",
  "        val avg = n to m by -1\n        val binary = avg.map(x => Integer.toBinaryString(x)).mkString\n\
    \        val result = if (binary.length == 0) \"0b0\" else binary\n        Right(result)",
  "        val n = math.max(math.min(n, m), -1)\n        val m = math.max(math.min(m,\
    \ n), -1)\n        val sum = math.max(m, n) + math.min(n, m)\n        val avg\
    \ = sum / 2\n        val bin = math.pow(10, math.ceil(math.log10(avg)))\n    \
    \    val result = bin.toString(2)\n        val right = result.length\n       \
    \ val left = result.length - right\n        val zeros = math.max(0, left)\n  \
    \      val ones = math.max(0, right)\n        val result = zeros + result\n  \
    \      val result = result.substring(0, ones)\n        val result = result + ones\n\
    \        val result = result.substring(0, zeros)\n        val result = result\
    \ + zeros\n        val result = result.substring(0, result.length - 1)\n     \
    \   val result = result + result.substring(1)\n        val result = result + result.substring(0,\
    \ result.length - 1)\n        val result = result + result.substring(0, result.length\
    \ - 1)\n        val result = result + result.substring(0, result.length - 1)\n\
    \        val result = result + result.substring(0, result.length - 1)\n      \
    \  val result = result + result.substring(0, result.length - 1)\n        val result\
    \ = result + result.substring(0, result.length - 1)\n        val result = result\
    \ + result.substring(0, result.length - 1)\n        val result = result + result.substring(0,\
    \ result.length - 1)\n        val result = result + result.substring(0, result.length\
    \ - 1)\n        val result = result + result.substring(0, result.length - 1)\n\
    \        val result = result + result.substring(0, result.length - 1)\n      \
    \  val result = result + result.substring(0, result.length - 1)\n        val result\
    \ = result + result.substring(0, result.length - 1)\n        val result = result\
    \ + result.substring(0, result.length - 1)\n        val result = result + result.substring(0,\
    \ result.length - 1)\n        val result = result + result.substring(0, result.length\
    \ - 1)\n        val result = result + result.substring(0, result.length - 1)\n\
    \        val result = result + result.substring(0, result.length - 1)\n      \
    \  val result = result + result.substring(0, result.length - 1)\n        val result\
    \ = result + result.substring(0, result.length - 1)\n        val result = result\
    \ + result.substring(0, result.length - 1)\n        val result = result + result.substring(0,\
    \ result.length - 1)\n        val result = result + result.substring(0, result.length\
    \ - 1)\n        val result = result + result.substring(0, result.length - 1)\n\
    \        val result = result + result.substring(0, result.length - 1)\n      \
    \  val result = result + result.substring(0, result.length - 1)\n        val result\
    \ = result + result.substring(0, result.length - 1)\n        val result = result\
    \ + result.substring(0, result.length - 1)\n        val result = result + result.substring(0,\
    \ result.length - 1)\n        val result = result + result.substring(0, result.length\
    \ - 1)\n        val result = result + result.substring(0, result.length - 1)\n\
    \        val result = result + result.substring(0, result.length - 1)\n      \
    \  val result = result + result.substring(0, ", "        val avg = n to m by -1\n\
    \        val binary = avg.map(_.toBinaryString).mkString\n        val rounded\
    \ = binary.toLong\n        val result = if (rounded == 0) Right(rounded) else\
    \ Left(s\"$rounded is not a valid binary number\")\n        result", "       \
    \ val sum = n to m\n        val avg = sum.sum.toDouble / sum.size\n        val\
    \ rounded = math.round(avg).toBinaryString\n        val result = Right(rounded)\n\
    \        if (rounded > \"1\") {\n            Left(s\"$rounded is greater than\
    \ 1\")\n        } else {\n            result\n        }", "        val sum = (n\
    \ to m).sum\n        val avg = sum / 2\n        val bin = math.ceil(avg).toBinaryString\n\
    \        val result = if (bin == bin.dropRight(bin.length)) -1 else bin\n    \
    \    Left(result)", "        val avg = n to m by -1\n        val sum = 0\n   \
    \     val binary = \"\"\n        for(i <- 0 until avg.length) {\n            val\
    \ value = avg(i)\n            val bin = math.pow(2, i)\n            val binary\
    \ = binary.dropRight(bin.length).padTo(\"0\", bin.length)\n            val binary\
    \ = binary.dropRight(bin.length).padTo(\"0\", bin.length)\n            val binary\
    \ = binary.dropRight(bin.length).padTo(\"0\", bin.length)\n            val binary\
    \ = binary.dropRight(bin.length).padTo(\"0\", bin.length)\n            val binary\
    \ = binary.dropRight(bin.length).padTo(\"0\", bin.length)\n            val binary\
    \ = binary.dropRight(bin.length).padTo(\"0\", bin.length)\n            val binary\
    \ = binary.dropRight(bin.length).padTo(\"0\", bin.length)\n            val binary\
    \ = binary.dropRight(bin.length).padTo(\"0\", bin.length)\n            val binary\
    \ = binary.dropRight(bin.length).padTo(\"0\", bin.length)\n            val binary\
    \ = binary.dropRight(bin.length).padTo(\"0\", bin.length)\n            val binary\
    \ = binary.dropRight(bin.length).padTo(\"0\", bin.length)\n            val binary\
    \ = binary.dropRight(bin.length).padTo(\"0\", bin.length)\n            val binary\
    \ = binary.dropRight(bin.length).padTo(\"0\", bin.length)\n            val binary\
    \ = binary.dropRight(bin.length).padTo(\"0\", bin.length)\n            val binary\
    \ = binary.dropRight(bin.length).padTo(\"0\", bin.length)\n            val binary\
    \ = binary.dropRight(bin.length).padTo(\"0\", bin.length)\n            val binary\
    \ = binary.dropRight(bin.length).padTo(\"0\", bin.length)\n            val binary\
    \ = binary.dropRight(bin.length).padTo(\"0\", bin.length)\n            val binary\
    \ = binary.dropRight(bin.length).padTo(\"0\", bin.length)\n            val binary\
    \ = binary.dropRight(bin.length).padTo(\"0\", bin.length)\n            val binary\
    \ = binary.dropRight(bin.length).padTo(\"0\", bin.length)\n            val binary\
    \ = binary.dropRight(bin.length).padTo(\"0\", bin.length)\n            val binary\
    \ = ", "        val sum = n to m by -1\n        val avg = sum.sum / sum.size\n\
    \        val bin = math.ceil(avg).toBinaryString\n        val result = if (bin.size\
    \ == 0) \"0b0\" else bin\n        Right(result)", "        val avg = n to m by\
    \ -1\n        val binary = avg.map(x => x.toBinaryString).mkString\n        val\
    \ result = if (n >= m) Right(binary.toLong) else Left(s\"$n to $m doesn't include\
    \ $n\")\n        result", "        val nToM = (n to m).toList\n        val nToM2\
    \ = nToM.filter(_ > 0)\n        val nToM3 = nToM2.filter(_ > 1)\n        val nToM4\
    \ = nToM3.filter(_ > 2)\n        val nToM5 = nToM4.filter(_ > 3)\n        val\
    \ nToM6 = nToM5.filter(_ > 4)\n        val nToM7 = nToM6.filter(_ > 5)\n     \
    \   val nToM8 = nToM7.filter(_ > 6)\n        val nToM9 = nToM8.filter(_ > 7)\n\
    \        val nToM10 = nToM9.filter(_ > 8)\n        val nToM11 = nToM10.filter(_\
    \ > 9)\n        val nToM12 = nToM11.filter(_ > 10)\n        val nToM13 = nToM12.filter(_\
    \ > 11)\n        val nToM14 = nToM13.filter(_ > 12)\n        val nToM15 = nToM14.filter(_\
    \ > 13)\n        val nToM16 = nToM15.filter(_ > 14)\n        val nToM17 = nToM16.filter(_\
    \ > 15)\n        val nToM18 = nToM17.filter(_ > 16)\n        val nToM19 = nToM18.filter(_\
    \ > 17)\n        val nToM20 = nToM19.filter(_ > 18)\n        val nToM21 = nToM20.filter(_\
    \ > 19)\n        val nToM22 = nToM21.filter(_ > 20)\n        val nToM23 = nToM22.filter(_\
    \ > 21)\n        val nToM24 = nToM23.filter(_ > 22)\n        val nToM25 = nToM24.filter(_\
    \ > 23)\n        val nToM26 = nToM25.filter(_ > 24)\n        val nToM27 = nToM26.filter(_\
    \ > 25)\n        val nToM28 = nToM27.filter(_ > 26)\n        val nToM29 = nToM28.filter(_\
    \ > 27)\n        val nToM30 = nToM29.filter(_ > 28)\n        val nToM31 = nToM30.filter(_\
    \ > 29)\n        val nToM32 = nToM31.filter(_ > 30)\n        val nToM33 = nToM32.filter(_\
    \ > 31)\n        val nToM34 = nToM33.filter(_ > ", "        val avg = ((n + m)\
    \ / 2).round\n        val binary = avg.toBinaryString\n        val result = if\
    \ (n <= m) Right(binary) else Left(s\"$n to $m is $binary\")\n        result",
  "        val n = math.max(math.min(m, n), n)\n        val m = math.max(math.min(m,\
    \ n), n)\n        val sum = n to m\n        val avg = sum.sum / sum.size\n   \
    \     val bin = math.round(avg).toBinaryString\n        val result = if (bin.length\
    \ == 1) \"0b\" + bin else bin\n        Right(result)", "        val n = math.abs(n)\n\
    \        val m = math.abs(m)\n        val sum = n + m\n        val avg = sum /\
    \ 2\n        val binary = if (n == m) s\"0b$avg\" else -1\n        val result\
    \ = if (binary == -1) s\"$n through $m\" else s\"$n through $m (including $n and\
    \ $m)\"\n        Right(result)", "        val avg = n + (m / 2)\n        val binary\
    \ = avg.toBinaryString\n        val left = (binary.length - m.toBinaryString.length)\n\
    \        val right = binary.length - left\n        val result = binary.substring(0,\
    \ left) + binary.substring(left, right) + binary.substring(right)\n        val\
    \ result = result.reverse\n        val result = result.substring(0, result.length\
    \ - m.toBinaryString.length)\n        val result = result.substring(0, result.length\
    \ - m.toBinaryString.length + 1) + result.substring(result.length - m.toBinaryString.length)\n\
    \        val result = result.substring(0, result.length - m.toBinaryString.length\
    \ + 1) + result.substring(result.length - m.toBinaryString.length + 1)\n     \
    \   val result = result.substring(0, result.length - m.toBinaryString.length +\
    \ 1) + result.substring(result.length - m.toBinaryString.length + 1)\n       \
    \ val result = result.substring(0, result.length - m.toBinaryString.length + 1)\
    \ + result.substring(result.length - m.toBinaryString.length + 1)\n        val\
    \ result = result.substring(0, result.length - m.toBinaryString.length + 1) +\
    \ result.substring(result.length - m.toBinaryString.length + 1)\n        val result\
    \ = result.substring(0, result.length - m.toBinaryString.length + 1) + result.substring(result.length\
    \ - m.toBinaryString.length + 1)\n        val result = result.substring(0, result.length\
    \ - m.toBinaryString.length + 1) + result.substring(result.length - m.toBinaryString.length\
    \ + 1)\n        val result = result.substring(0, result.length - m.toBinaryString.length\
    \ + 1) + result.substring(result.length - m.toBinaryString.length + 1)\n     \
    \   val result = result.substring(0, result.length - m.toBinaryString.length +\
    \ 1) + result.substring(result.length - m.toBinaryString.length + 1)\n       \
    \ val result = result.substring(0, result.length - m.toBinaryString.length + 1)\
    \ + result.substring(result.length - m.toBinaryString.length + 1)\n        val\
    \ result = result.substring(0, result.length - m.toBinaryString.length + 1) +\
    \ result.substring(result.length - m.toBinaryString.length + 1)\n        val result\
    \ = result.substring(0, result.length - m.toBinaryString.length + 1) + result.substring(result.length\
    \ - m.toBinaryString.length + 1)\n        val result = result.substring(0, result.length\
    \ - m.toBinaryString.length + 1) + result.substring(result.length - m.toBinaryString.length\
    \ + 1)\n        val result = result.substring(0, result.length - m.toBinaryString.length\
    \ + 1) + result.substring(result.length - m.toBinaryString.length + 1)\n     \
    \   val result = result.substring(0, result.length - m.toBinaryString.length +\
    \ 1) + result.substring(result.length - m.toBinaryString.length + 1)\n       \
    \ val result = result.substring(0, result.length - m.toBinaryString.length + 1)\
    \ + result.substring(result.length - m.toBinaryString.length + 1)\n        val\
    \ result = result.substring(0, result.length - m.toBinaryString.length + 1) +\
    \ result.substring(result.length - m.toBinaryString.length + 1)\n        val result\
    \ = result.substring(0, result.length - m.to", "        val n = math.max(math.min(n,\
    \ m), -1)\n        val m = math.max(math.min(m, n), -1)\n        val sum = n +\
    \ m\n        val avg = sum / 2\n        val binary = math.round(avg).toBinaryString\n\
    \        val result = if (binary == \"\") -1 else binary\n        Right(result)",
  "        val avg = n to m by -1\n        val binary = avg.map(x => x.toBinaryString).mkString\n\
    \        val result = if (n == m) Right(binary) else Left(s\"$n to $m not possible\"\
    )\n        result", "        val avg = n/m\n        val binary = avg.toBinaryString\n\
    \        val result = binary.reverse.foldLeft(0)((sum, digit) => sum + digit.asInstanceOf[Int])\n\
    \        if (result > 0) Right(result)\n        else Left(s\"$n cannot be divided\
    \ by $m\")", "        val avg = n + (m - 1) / 2\n        if (avg > m) Left(-1)\n\
    \        else Right(avg)", "        val sum = n to m\n        val avg = sum.sum\
    \ / sum.size\n        val binary = avg.toBinaryString\n        val result = if\
    \ (n >= m) -1 else binary\n        Right(result)", "        val sum = n to m by\
    \ -1\n        val avg = sum.sum / sum.size\n        val binary = avg.toBinaryString\n\
    \        val result = if (binary.length == 1) \"0b\" + binary else binary\n  \
    \      Right(result)", "        val n = n.toInt\n        val m = m.toInt\n   \
    \     val sum = n + m\n        val avg = sum / 2\n        val binary = binary(avg)\n\
    \        val result = if (n == m) Right(binary) else Left(s\"$n through $m is\
    \ $binary\")\n        result", "        val sum = n to m\n        val avg = sum.sum\
    \ / sum.size\n        val bin = math.round(avg).toBinaryString\n        val result\
    \ = if (bin.size == 0) \"0b0\" else bin\n        val right = if (bin.size == 0)\
    \ -1 else bin.size - 1\n        Right(bin.substring(0, right) + result)", "  \
    \      val avg = n to m by -1\n        val sum = avg.sum\n        val avg = sum\
    \ / avg.length\n        val bin = Integer.toBinaryString(avg)\n        val right\
    \ = (bin.length + 1) * \"0\"\n        val left = bin.dropRight(bin.length)\n \
    \       val result = if (right == left) Right(bin) else Left(right)\n        result",
  "        val avg = n to m by -1\n        val binary = avg.map(x => Integer.toBinaryString(x)).mkString\n\
    \        val result = if (binary.length == 0) \"0b0\" else binary\n        Right(result)",
  "        val sum = n to m by -1\n        val avg = sum.sum / sum.size\n        val\
    \ bin = math.ceil(avg).toBinaryString\n        val result = if (bin.length < m)\
    \ -1 else bin\n        Right(result)", "        val avg = n to m by -1\n     \
    \   val sum = 0\n        val binary = \"\"\n        for(i <- 0 until avg.length)\
    \ {\n            val x = avg(i)\n            val y = math.pow(2,i)\n         \
    \   val z = math.pow(2,i+1)\n            val sum = sum + x\n            val binary\
    \ = binary + y.toBinaryString\n            val binary = binary + z.toBinaryString\n\
    \        }\n        if(sum < 0) Left(s\"$sum\")\n        else Right(binary.toInt)",
  "        val sum = (n to m).foldLeft(0L) { (sum, num) =>\n            sum + num\n\
    \        }\n        val avg = sum / m\n        val binary = avg.toBinaryString\n\
    \        val result = if (binary == \"\") -1 else binary.toLong\n        val right\
    \ = if (result < 0) -1 else result\n        Left(s\"$n to $m is $avg. Convert\
    \ to binary: $binary. Result: $result. Right: $right\")", "        val sum = n\
    \ to m\n        val avg = sum.sum / sum.size\n        val bin = math.ceil(avg).toBinaryString\n\
    \        val result = if (bin == bin.drop(bin.length-1)) bin else bin.dropRight(1)\n\
    \        Right(result)", "        val avg = n to m by -1\n        val binary =\
    \ avg.map(x => x.toBinaryString).mkString\n        val result = if (binary.length\
    \ == 0) \"0b0\" else binary\n        Right(result)", "        val sum = n to m\
    \ by -1\n        val avg = sum.sum / sum.length\n        val bin = math.ceil(avg).toBinaryString\n\
    \        val result = if (bin == bin.drop(bin.length)) Right(bin) else Left(s\"\
    $n to $m is $avg\")\n        result", "        val avg = n / m\n        val bin\
    \ = math.ceil(avg).toBinaryString\n        val result = bin.substring(0, bin.length\
    \ - 1) + bin.substring(bin.length - 1)\n        if (n >= m) Right(result)\n  \
    \      else Left(s\"$n / $m -> $result\")", "        val avg = n to m by -1\n\
    \        val binary = avg.map(x => x.toBinaryString).mkString\n        val rounded\
    \ = binary.toLong\n        val result = if (rounded == 0) Right(rounded) else\
    \ Left(s\"${rounded}b${binary}\")\n        result", "        val n = math.max(math.min(n,\
    \ m), -1)\n        val m = math.max(math.min(m, n), -1)\n        val sum = n to\
    \ m\n        val sums = sum.map(x => math.pow(2, x))\n        val avg = sums.sum\
    \ / sums.length\n        val bin = math.round(avg).toBinaryString\n        val\
    \ result = if (bin == \"\") -1 else bin\n        Left(result)", "        val sum\
    \ = n to m by -1\n        val avg = sum.sum / sum.size\n        val binary = avg.toBinaryString\n\
    \        val result = if (binary.length < 8) -1 else binary\n        Right(result)",
  "        val n1 = n / 2\n        val m1 = m / 2\n        val n2 = n - n1\n     \
    \   val m2 = m - m1\n        val n3 = n1 + n2\n        val m3 = m1 + m2\n    \
    \    val n4 = n1 + n3\n        val m4 = m1 + m3\n        val n5 = n1 + n4\n  \
    \      val m5 = m1 + m4\n        val n6 = n1 + n5\n        val m6 = m1 + m5\n\
    \        val n7 = n1 + n6\n        val m7 = m1 + m6\n        val n8 = n1 + n7\n\
    \        val m8 = m1 + m7\n        val n9 = n1 + n8\n        val m9 = m1 + m8\n\
    \        val n10 = n1 + n9\n        val m10 = m1 + m9\n        val n11 = n1 +\
    \ n10\n        val m11 = m1 + m10\n        val n12 = n1 + n11\n        val m12\
    \ = m1 + m11\n        val n13 = n1 + n12\n        val m13 = m1 + m12\n       \
    \ val n14 = n1 + n13\n        val m14 = m1 + m13\n        val n15 = n1 + n14\n\
    \        val m15 = m1 + m14\n        val n16 = n1 + n15\n        val m16 = m1\
    \ + m15\n        val n17 = n1 + n16\n        val m17 = m1 + m16\n        val n18\
    \ = n1 + n17\n        val m18 = m1 + m17\n        val n19 = n1 + n18\n       \
    \ val m19 = m1 + m18\n        val n20 = n1 + n19\n        val m20 = m1 + m19\n\
    \        val n21 = n1 + n20\n        val m21 = m1 + m20\n        val n22 = n1\
    \ + n21\n        val m22 = m1 + m21\n        val n23 = n1 + n22\n        val m23\
    \ = m1 + m22\n        val n24 = n1 + n23\n        val m24 = m1 + m23\n       \
    \ val n25 = n1 + n24\n        val m25 = m1 + m24\n        val n26 = n1 + n25\n\
    \        val m26 = m1 + m25\n        val n27 = n1 + n26\n        val m27 = m1\
    \ + m26\n        val n28 = n1 + n27\n        val m28 = m1 + m27\n        val n29\
    \ = n1 + n28\n        val m29 = m1 + m28", "        val n = math.abs(n)\n    \
    \    val m = math.abs(m)\n        val sum = mutable.ArrayBuffer.empty[Long]\n\
    \        val avg = mutable.ArrayBuffer.empty[Long]\n        val n = math.min(n,\
    \ m)\n        val m = math.max(m, n)\n        for(i <- n until m) {\n        \
    \    sum += i\n            avg += i\n        }\n        val avg = sum.toDouble\
    \ / avg.length\n        val bin = Integer.toBinaryString(avg)\n        if(bin.length\
    \ < m) Left(bin)\n        else Right(bin)", "        val sum = n to m by -1\n\
    \        val avg = sum.sum / sum.size\n        val bin = math.ceil(avg).toBinaryString\n\
    \        val result = if (bin.length == 1) \"0b\" + bin else bin\n        Right(result)",
  "        val sum = n to m\n        val avg = sum.foldLeft(0L) { (sum, curr) => sum\
    \ + curr }\n        val rounded = math.round(avg).toBinaryString\n        val\
    \ result = if (rounded == sum.toBinaryString) Right(rounded) else Left(rounded)\n\
    \        result", "        val n = math.abs(n)\n        val m = math.abs(m)\n\
    \        if (n <= m) {\n            Right(math.round(n))\n        } else {\n \
    \           Left(s\"$n is greater than $m\")\n        }", "        val n = math.max(math.min(n,\
    \ m), -1L)\n        val m = math.max(math.min(m, n), -1L)\n        val sum = n\
    \ + m\n        val avg = sum / 2\n        val bin = math.pow(10, math.ceil(math.log10(avg)))\n\
    \        val result = math.round(avg * bin)\n        val binString = bin.toString(2)\n\
    \        val result = binString.reverse.mkString(\"\")\n        val result = binString.reverse.mkString(\"\
    \")\n        val result = binString.reverse.mkString(\"\")\n        val result\
    \ = binString.reverse.mkString(\"\")\n        val result = binString.reverse.mkString(\"\
    \")\n        val result = binString.reverse.mkString(\"\")\n        val result\
    \ = binString.reverse.mkString(\"\")\n        val result = binString.reverse.mkString(\"\
    \")\n        val result = binString.reverse.mkString(\"\")\n        val result\
    \ = binString.reverse.mkString(\"\")\n        val result = binString.reverse.mkString(\"\
    \")\n        val result = binString.reverse.mkString(\"\")\n        val result\
    \ = binString.reverse.mkString(\"\")\n        val result = binString.reverse.mkString(\"\
    \")\n        val result = binString.reverse.mkString(\"\")\n        val result\
    \ = binString.reverse.mkString(\"\")\n        val result = binString.reverse.mkString(\"\
    \")\n        val result = binString.reverse.mkString(\"\")\n        val result\
    \ = binString.reverse.mkString(\"\")\n        val result = binString.reverse.mkString(\"\
    \")\n        val result = binString.reverse.mkString(\"\")\n        val result\
    \ = binString.reverse.mkString(\"\")\n        val result = binString.reverse.mkString(\"\
    \")\n        val result = binString.reverse.mkString(\"\")\n        val result\
    \ = binString.reverse.mkString(\"\")\n        val result = binString.reverse.mkString(\"\
    \")\n        val result = binString.reverse.mkString(\"\")\n        val result\
    \ = binString.reverse.mkString(\"\")\n        val result = binString.reverse.mkString(\"\
    \")\n        val result = binString.reverse.mkString(\"\")\n        val result\
    \ = binString.reverse.mkString(\"\")\n        val result = binString.reverse.mkString(\"\
    \")\n        val result = binString.reverse.mkString(\"\")\n        val result\
    \ = binString.reverse.mkString(\"\")\n        val result = binString.reverse.mkString(\"\
    \")\n        val result = binString.reverse.mkString(\"\")\n        val result\
    \ = binString.reverse.mkString(\"\")\n        val result = binString.reverse.mkString(\"\
    \")\n        val result = binString.reverse.mkString(\"\")\n        val result\
    \ = binString.reverse.mkString(", "        val avg = ((n + m) / 2).round\n   \
    \     val binary = avg.toBinaryString\n        if (binary.length < m) Left(s\"\
    $n to $m is $binary\")\n        else if (binary.length > m) Right(-1)\n      \
    \  else Right(binary)", "        val nBits = n.toString.length\n        val mBits\
    \ = m.toString.length\n        val nBitsDiff = mBits - nBits\n        val mBitsDiff\
    \ = nBits - mBits\n        val nBitsDiffToM = mBits - nBits\n        val mBitsDiffToN\
    \ = nBits - mBits\n        val nBitsDiffToMToN = nBits - mBits\n        val mBitsDiffToNToM\
    \ = mBits - nBits\n        val nBitsDiffToMToNToM = mBits - nBits\n        val\
    \ mBitsDiffToNToMToN = nBits - mBits\n        val nBitsDiffToMToNToMToN = nBits\
    \ - mBits\n        val mBitsDiffToNToMToNToM = mBits - nBits\n        val nBitsDiffToMToNToMToNToM\
    \ = mBits - nBits\n        val mBitsDiffToNToMToNToMToN = mBits - nBits\n    \
    \    val nBitsDiffToMToNToMToNToMToN = mBits - nBits\n        val mBitsDiffToNToMToNToMToNToM\
    \ = mBits - nBits\n        val nBitsDiffToMToNToMToNToMToNToM = mBits - nBits\n\
    \        val mBitsDiffToNToMToNToMToNToMToNToM = mBits - nBits\n        val nBitsDiffToMToNToMToNToMToNToMToNToM\
    \ = mBits - nBits\n        val mBitsDiffToNToMToNToMToNToMToNToMToNToM = mBits\
    \ - nBits\n        val nBitsDiffToMToNToMToNToMToNToMToNToMToNToM = mBits - nBits\n\
    \        val mBitsDiffToNToMToNToMToNToMToNToMToNToMToNToM = mBits - nBits\n \
    \       val nBitsDiffToMToNToMToNToMToNToMToNToMToNToMToNToM = mBits ", "    \
    \    val nToM : Long = n - m\n        val nToMInt : Long = math.ceil(nToM.toDouble)\n\
    \        val nToMBin = math.pow(2, math.ceil(nToM.toDouble)).toBinaryString\n\
    \        val nToMBinLen = nToMBin.length\n        val nToMBinLenMinusOne = nToMBinLen\
    \ - 1\n        val nToMBinLenMinusOneInt = math.pow(2, nToMBinLenMinusOne).toInt\n\
    \        val nToMBinLenMinusOneIntInt = math.pow(2, nToMBinLenMinusOneInt).toInt\n\
    \        val nToMBinLenMinusOneIntIntInt = math.pow(2, nToMBinLenMinusOneIntInt).toInt\n\
    \        val nToMBinLenMinusOneIntIntIntInt = math.pow(2, nToMBinLenMinusOneIntIntInt).toInt\n\
    \        val nToMBinLenMinusOneIntIntIntIntInt = math.pow(2, nToMBinLenMinusOneIntIntIntInt).toInt\n\
    \        val nToMBinLenMinusOneIntIntIntIntIntInt = math.pow(2, nToMBinLenMinusOneIntIntIntIntInt).toInt\n\
    \        val nToMBinLenMinusOneIntIntIntIntIntIntInt = math.pow(2, nToMBinLenMinusOneIntIntIntIntIntInt).toInt\n\
    \        val nToMBinLenMinusOneIntIntIntIntIntIntIntIntInt = math.pow(2, nToMBinLenMinusOneIntIntIntIntIntIntIntInt).toInt\n\
    \        val nToMBinLenMinusOneIntIntIntIntIntIntIntIntIntIntInt = math.pow(2,\
    \ nToMBinLenMinusOneIntIntIntIntIntIntIntIntIntInt).toInt\n        val nToMBinLenMinusOneIntIntIntIntIntIntIntIntIntIntIntInt\
    \ = math.pow(2, nToMBinLenMinusOneIntIntIntIntIntIntIntIntIntIntIntInt).toInt\n\
    \        val nToMBinLenMinusOneIntIntIntIntIntIntIntIntIntIntIntIntIntInt = math.pow(2,\
    \ nToMBinLenMinusOneIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt).toInt\n   \
    \     val nToMBinLenMinusOneIntIntIntIntIntInt", "        val avg = n to m by\
    \ -1\n        val binary = avg.map(x => Integer.toBinaryString(x)).mkString\n\
    \        val rounded = binary.toLong\n        val result = if (rounded == 0) Right(rounded)\
    \ else Left(s\"$rounded is not a binary number\")\n        result", "        val\
    \ sum = n to m\n        val avg = sum.sum / sum.size\n        val bin = math.ceil(avg).toBinaryString\n\
    \        val result = if (bin.size == 0) \"0b0\" else bin\n        Right(result)",
  "        val n = math.max(math.min(n, m), -1)\n        val m = math.max(math.min(m,\
    \ n), -1)\n        val sum = math.max(m, n) - math.min(n, m)\n        val avg\
    \ = sum / 2\n        val binary = math.pow(10, math.ceil(math.log10(avg)))\n \
    \       val result = math.round(avg * binary)\n        val result = math.min(math.max(result,\
    \ 0), binary)\n        val result = math.max(result, 0)\n        val result =\
    \ math.min(result, binary)\n        val result = math.max(result, 0)\n       \
    \ val result = math.min(result, binary)\n        val result = math.max(result,\
    \ 0)\n        val result = math.min(result, binary)\n        val result = math.max(result,\
    \ 0)\n        val result = math.min(result, binary)\n        val result = math.max(result,\
    \ 0)\n        val result = math.min(result, binary)\n        val result = math.max(result,\
    \ 0)\n        val result = math.min(result, binary)\n        val result = math.max(result,\
    \ 0)\n        val result = math.min(result, binary)\n        val result = math.max(result,\
    \ 0)\n        val result = math.min(result, binary)\n        val result = math.max(result,\
    \ 0)\n        val result = math.min(result, binary)\n        val result = math.max(result,\
    \ 0)\n        val result = math.min(result, binary)\n        val result = math.max(result,\
    \ 0)\n        val result = math.min(result, binary)\n        val result = math.max(result,\
    \ 0)\n        val result = math.min(result, binary)\n        val result = math.max(result,\
    \ 0)\n        val result = math.min(result, binary)\n        val result = math.max(result,\
    \ 0)\n        val result = math.min(result, binary)\n        val result = math.max(result,\
    \ 0)\n        val result = math.min(result, binary)\n        val result = math.max(result,\
    \ 0)\n        val result = math.min(result, binary)\n        val result = math.max(result,\
    \ 0)\n        val result = math.min(result, binary)\n        val result = math.max(result,\
    \ 0)\n        val result = math.min(result, binary)\n        val result = math.max(result,\
    \ 0)\n        val result = math.min(result, binary)\n        val result = math.max(result,\
    \ 0)\n        val result = math.min(result, binary)\n        val result = math.max(result,\
    \ 0)\n        val result = math.min(result, binary)\n        val result = math.max(result,\
    \ 0)\n        val result = math.min(result, binary)\n        val result = math.max(result,\
    \ 0)\n        val result = math.min(result, binary)\n        val result = math.max(result,\
    \ 0)\n        val result = math.min(result, binary)\n        val result = math.max(result,\
    \ 0)\n        val result = math.min(result, binary)\n        val result = math.max(",
  "        val n = math.abs(n)\n        val m = math.abs(m)\n        if (n > m) {\n\
    \            Left(-1)\n        } else {\n            val sum = (n to m).map(x\
    \ => math.pow(x, 2)).sum\n            val avg = math.round(sum / 2)\n        \
    \    Right(math.pow(10, math.ceil(math.log10(avg))).toBinaryString)\n        }",
  "        val avg = n to m by -1\n        val binary = avg.map(x => Integer.toBinaryString(x)).mkString\n\
    \        val result = if (n <= m) Right(binary) else Left(\"-1\")\n        result",
  "        val avg = n + (m - 1) / 2\n        val bin = Integer.toBinaryString(avg)\n\
    \        if (bin.size == m) Right(avg)\n        else Left(s\"$n through $m average\
    \ is $avg, but should be $bin\")", "        val avg = n to m by -1\n        val\
    \ sum = 0L\n        val binary = \"\"\n        for(i <- 0 until avg.length) {\n\
    \            val bin = math.pow(2,i)\n            val val = avg(i).toBinaryString\n\
    \            val binVal = bin.pow(val.length)\n            val binValStr = binVal.toString(2)\n\
    \            val binValStr = binValStr.substring(0, binValStr.length-1)\n    \
    \        val binValStr = binValStr.substring(binValStr.length-val.length)\n  \
    \          val binValStr = binValStr.substring(0, binValStr.length-1)\n      \
    \      val binValStr = binValStr.substring(binValStr.length-val.length)\n    \
    \        val binValStr = binValStr.substring(0, binValStr.length-1)\n        \
    \    val binValStr = binValStr.substring(binValStr.length-val.length)\n      \
    \      val binValStr = binValStr.substring(0, binValStr.length-1)\n          \
    \  val binValStr = binValStr.substring(binValStr.length-val.length)\n        \
    \    val binValStr = binValStr.substring(0, binValStr.length-1)\n            val\
    \ binValStr = binValStr.substring(binValStr.length-val.length)\n            val\
    \ binValStr = binValStr.substring(0, binValStr.length-1)\n            val binValStr\
    \ = binValStr.substring(binValStr.length-val.length)\n            val binValStr\
    \ = binValStr.substring(0, binValStr.length-1)\n            val binValStr = binValStr.substring(binValStr.length-val.length)\n\
    \            val binValStr = binValStr.substring(0, binValStr.length-1)\n    \
    \        val binValStr = binValStr.substring(binValStr.length-val.length)\n  \
    \          val binValStr = binValStr.substring(0, binValStr.length-1)\n      \
    \      val binValStr = binValStr.substring(binValStr.length-val.length)\n    \
    \        val binValStr = binValStr.substring(0, binValStr.length-1)\n        \
    \    val binValStr = binValStr.substring(binValStr.length-val.length)\n      \
    \      val binValStr = binValStr.substring(0, binValStr.length-1)\n          \
    \  val binValStr = binValStr.substring(binValStr.length-val.length)\n        \
    \    val binValStr = binValStr.substring(0, binValStr.length-1)\n            val\
    \ binValStr = binValStr.substring(binValStr.length-val.length)\n            val\
    \ binValStr = binValStr.substring(0, binValStr.length-1)\n            val bin",
  "        val avg = n to m by -1\n        val binary = avg.map(x => Integer.toBinaryString(x))\n\
    \        val binary = binary.map(x => x.padToLength(4, '0'))\n        val sum\
    \ = binary.sum\n        val avg = sum / binary.length\n        val result = if\
    \ (avg < 0) Left(s\"$avg cannot be represented as a binary number\") else Right(avg)\n\
    \        result", "        val avg = ((n + m) / 2).round\n        val bin = Integer.toBinaryString(avg)\n\
    \        if (bin.length < m) Left(s\"$n through $m is too small to round up to\
    \ $avg\")\n        else if (bin.length > m) Right(-1)\n        else Right(bin)",
  "        val avg = n to m by -1\n        val sum = 0L\n        val num = 0L\n  \
    \      val binary = \"\"\n        val bin = mutable.BitSet(math.max(m, n))\n \
    \       for(i <- 0 until avg.length) {\n            sum += avg(i)\n          \
    \  num += 1L\n            bin.set(i)\n        }\n        if(num > 0) {\n     \
    \       val avg = sum / num\n            val binary = bin.toBinaryString\n   \
    \         val len = binary.length\n            val right = math.min(len, m)\n\
    \            val left = math.max(len - 1, n)\n            val right = binary.substring(right,\
    \ right)\n            val left = binary.substring(left, left)\n            val\
    \ result = if (right == \"\") -1 else left.concat(right)\n            Right(result)\n\
    \        } else {\n            Left(-1)\n        }", "        val sum = n to m\n\
    \        val avg = sum.sum / sum.size\n        val bin = math.ceil(avg).toBinaryString\n\
    \        val result = if (bin.length < m) -1 else bin\n        Right(result)",
  "        val n = n.toInt\n        val m = m.toInt\n        if (n > m) {\n      \
    \      Left(-1)\n        } else {\n            val sum = n.toLong + m.toLong\n\
    \            val avg = sum / 2\n            val binary = binary(avg)\n       \
    \     Right(binary.toInt)\n        }", "        val avg = n to m by -1\n     \
    \   val sum = 0L\n        val count = 0L\n        val binary = new mutable.HashSet[String]()\n\
    \        for(i <- 0 until avg.length) {\n            val x = avg(i)\n        \
    \    sum += x\n            count += if (x == 0) 1 else 0\n            binary.add(x.toBinaryString())\n\
    \        }\n        if (count > 0) Right(sum / count)\n        else Left(s\"The\
    \ average of $n to $m is $sum / $count\")", "        val avg = n/m\n        val\
    \ bin = Integer.toBinaryString(avg)\n        if (bin.length < m) Left(s\"$n /\
    \ $m is not an integer, $bin is too short\")\n        else if (bin.length > m)\
    \ Right(-1)\n        else Right(bin)", "        val n = math.max(math.min(n, m),\
    \ -1)\n        val m = math.max(math.min(m, n), -1)\n        val sum = n + m\n\
    \        val avg = sum / 2\n        val binary = binary(avg)\n        val result\
    \ = if (n == m) Right(binary) else Left(s\"$n to $m is $binary\")\n        result",
  "        val avg = n to m by -1\n        val sum = n to m by -1\n        val avg\
    \ = avg.toList\n        val sum = sum.toList\n        val avg = avg.map(_.toBinaryString).mkString\n\
    \        val sum = sum.map(_.toBinaryString).mkString\n        val avg = avg.toBinaryString\n\
    \        val sum = sum.toBinaryString\n        if (sum.equals(avg)) {\n      \
    \      Right(avg)\n        } else {\n            Left(s\"$avg does not equal $sum\"\
    )\n        }", "        val avg = n to m by -1\n        val binary = avg.map(_.toBinaryString).mkString\n\
    \        val bin = binary.length\n        val result = if (bin == 0) \"0b\" +\
    \ binary else binary.padTo(bin, \"0\")\n        Right(result)", "        val sum\
    \ = mutable.ListBuffer[Long]()\n        val avg = mutable.ListBuffer[Long]()\n\
    \        val n = math.max(m, n)\n        val m = math.min(n, m)\n        for (i\
    \ <- n until m) {\n            sum += i\n            avg += i\n        }\n   \
    \     val avg = sum.sum / avg.length\n        val binary = avg.toBinaryString\n\
    \        val result = if (binary == \"\") -1 else binary.toLong\n        Right(result)",
  "        val avg = n to m by -1\n        val binary = avg.map(_.toBinaryString).mkString\n\
    \        val result = if (n >= m) Right(binary) else Left(s\"$n to $m is out of\
    \ range\")\n        result", "        val avg = n to m by -1\n        val binary\
    \ = avg.map(x => Integer.toBinaryString(x)).mkString\n        val result = if\
    \ (n >= m) Left(binary) else Right(binary)\n        result", "        val sum\
    \ : Long = n to m by -1\n        val avg : Long = sum.toDouble / sum.size\n  \
    \      val result : Long = math.round(avg).toBinaryString\n        val result\
    \ : Either[String, Long] = if (result == \"0\") Left(result) else Right(result)\n\
    \        result", "        val avg = n to m by -1\n        val sum = 0L\n    \
    \    val binary = \"\"\n        for(i <- 0 until avg.length) {\n            val\
    \ value = avg(i)\n            sum += value\n            binary += if(value >=\
    \ 0) \"1\" + if(value < 0) \"0\" + value else value.toString else value.toString.reverse\n\
    \        }\n        val result = if(sum > 0) sum.toString else -1\n        val\
    \ right = binary.reverse\n        val left = binary.dropRight(1)\n        val\
    \ result = if(right == \"\") Left(result) else Right(result)\n        result",
  "        val nToM = (n to m).toList\n        val nToMSum = nToM.sum\n        val\
    \ nToMCount = nToM.size\n        val nToMSumAsString = nToMSum.toBinaryString\n\
    \        val nToMCountAsString = nToMCount.toBinaryString\n        val nToMSumAsLong\
    \ = Long(nToMSumAsString)\n        val nToMCountAsLong = Long(nToMCountAsString)\n\
    \        val nToMSumAsEither = Right(nToMSumAsLong)\n        val nToMCountAsEither\
    \ = Right(nToMCountAsLong)\n        val nToMSumAsEitherString = nToMSumAsEither.toString\n\
    \        val nToMCountAsEitherString = nToMCountAsEither.toString\n        val\
    \ nToMSumAsEitherLong = nToMSumAsEitherString.toLong\n        val nToMCountAsEitherLong\
    \ = nToMCountAsEitherString.toLong\n        val nToMSumAsEitherLongAsString =\
    \ nToMSumAsEitherLong.toBinaryString\n        val nToMCountAsEitherLongAsString\
    \ = nToMCountAsEitherLong.toBinaryString\n        val nToMSumAsEitherLongAsLong\
    \ = nToMSumAsEitherLongAsString.toLong\n        val nToMCountAsEitherLongAsLong\
    \ = nToMCountAsEitherLongAsString.toLong\n        val nToMSumAsEitherLongAsLongAsString\
    \ = nToMSumAsEitherLongAsLong.toBinaryString\n        val nToMCountAsEitherLongAsLongAsString\
    \ = nToMCountAsEitherLongAsLong.toBinaryString\n        val nToMSumAsEitherLongAsLongAsLong\
    \ = nToMSumAsEitherLongAsLongAsString.toLong\n        val nToMCountAsEitherLongAsLongAsLong\
    \ = nToMCountAsEitherLongAsLongAsString.toLong\n        val nToMSumAsEitherLongAsLongAsLongAsString\
    \ = nToMSumAsEitherLongAsLongAsLongAsString.toBinaryString\n        val nToMCountAsEitherLongAsLongAsLongAsString\
    \ = nToM", "        val avg = n to m by -1\n        val sum = 0L\n        val\
    \ count = m\n        val binary = \"\"\n        for(i <- 0 until count) {\n  \
    \          val value = avg(i).right.toLong\n            sum += value\n       \
    \     binary += value.toString + \" \"\n        }\n        val result = if (sum\
    \ > 0) sum.toString else -1\n        val bin = binary.substring(binary.length\
    \ - count)\n        val binary = bin.substring(0, bin.length - 1)\n        val\
    \ right = binary.toLong\n        val left = binary.toLong - right\n        val\
    \ result = if (right > 0) right else -1\n        Left(binary, result)", "    \
    \    val avg = ((n + m) / 2.0).toLong\n        val bin = Integer.toBinaryString(avg)\n\
    \        if (bin.length < m) Left(s\"$bin is too short\")\n        else if (bin.length\
    \ > m) Right(-1)\n        else Right(bin)", "        val n = math.max(math.min(n,\
    \ m), -1L)\n        val m = math.max(math.min(m, n), -1L)\n        val nm = n\
    \ to m\n        val sum = nm.foldLeft(0L)(_ + _)\n        val avg = sum / nm.length\n\
    \        val bin = math.round(avg).toBinaryString\n        val result = if (bin\
    \ == \"\") -1 else bin\n        Left(result)", "        val avg = n + (m / 2)\n\
    \        val bin = math.pow(10, math.ceil(math.log(avg) / math.log(10)))\n   \
    \     val binString = bin.toString(2)\n        val binString = binString.reverse\n\
    \        val binString = binString.dropRight(1)\n        val binString = binString.reverse\n\
    \        val binString = binString.dropRight(1)\n        val binString = binString.reverse\n\
    \        val binString = binString.dropRight(1)\n        val binString = binString.reverse\n\
    \        val binString = binString.dropRight(1)\n        val binString = binString.reverse\n\
    \        val binString = binString.dropRight(1)\n        val binString = binString.reverse\n\
    \        val binString = binString.dropRight(1)\n        val binString = binString.reverse\n\
    \        val binString = binString.dropRight(1)\n        val binString = binString.reverse\n\
    \        val binString = binString.dropRight(1)\n        val binString = binString.reverse\n\
    \        val binString = binString.dropRight(1)\n        val binString = binString.reverse\n\
    \        val binString = binString.dropRight(1)\n        val binString = binString.reverse\n\
    \        val binString = binString.dropRight(1)\n        val binString = binString.reverse\n\
    \        val binString = binString.dropRight(1)\n        val binString = binString.reverse\n\
    \        val binString = binString.dropRight(1)\n        val binString = binString.reverse\n\
    \        val binString = binString.dropRight(1)\n        val binString = binString.reverse\n\
    \        val binString = binString.dropRight(1)\n        val binString = binString.reverse\n\
    \        val binString = binString.dropRight(1)\n        val binString = binString.reverse\n\
    \        val binString = binString.dropRight(1)\n        val binString = binString.reverse\n\
    \        val binString = binString.dropRight(1)\n        val binString = binString.reverse\n\
    \        val binString = binString.dropRight(1)\n        val binString = binString.reverse\n\
    \        val binString = binString.dropRight(1)\n        val binString = binString.reverse\n\
    \        val binString = binString.dropRight(1)\n        val binString = binString.reverse\n\
    \        val binString = binString.dropRight(1)\n        val binString = binString.reverse\n\
    \        val binString = binString.dropRight(1)\n        val binString = binString.reverse\n\
    \        val binString = binString.dropRight(1)\n        val binString = binString.reverse\n\
    \        val binString = binString.dropRight(1)\n        val binString = binString.reverse\n\
    \        val binString = binString.dropRight(1)\n        val binString = binString.reverse\n\
    \        ", "        val avg = ((n + m) / 2).round\n        val bin = Integer.toBinaryString(avg)\n\
    \        if (bin.length < m) Left(s\"$bin is too short\")\n        else if (bin.length\
    \ > m) Right(s\"$bin is too long\")\n        else Right(bin)", "        val avg\
    \ = ((n + m) / 2).round\n        val binary = avg.toBinaryString\n        if (binary.length\
    \ < m) Left(s\"$binary is too short\")\n        else if (binary.length > m) Right(-1)\n\
    \        else Right(binary)", "        val avg = n to m by -1\n        val binary\
    \ = avg.map(x => Integer.toBinaryString(x)).mkString\n        val result = if\
    \ (binary.length < m) -1 else binary\n        Right(result)", "        val avg\
    \ = n + (m - 1) / 2\n        val bin = math.pow(10, math.ceil(math.log10(avg)))\n\
    \        val binStr = bin.toString(2)\n        val binStrLen = binStr.length\n\
    \        val binStr = binStr.substring(0, binStrLen - 1)\n        val binStrLen\
    \ = binStr.length\n        val binStr = binStr.substring(0, binStrLen - 1)\n \
    \       val binStrLen = binStr.length\n        val binStr = binStr.substring(0,\
    \ binStrLen - 1)\n        val binStrLen = binStr.length\n        val binStr =\
    \ binStr.substring(0, binStrLen - 1)\n        val binStrLen = binStr.length\n\
    \        val binStr = binStr.substring(0, binStrLen - 1)\n        val binStrLen\
    \ = binStr.length\n        val binStr = binStr.substring(0, binStrLen - 1)\n \
    \       val binStrLen = binStr.length\n        val binStr = binStr.substring(0,\
    \ binStrLen - 1)\n        val binStrLen = binStr.length\n        val binStr =\
    \ binStr.substring(0, binStrLen - 1)\n        val binStrLen = binStr.length\n\
    \        val binStr = binStr.substring(0, binStrLen - 1)\n        val binStrLen\
    \ = binStr.length\n        val binStr = binStr.substring(0, binStrLen - 1)\n \
    \       val binStrLen = binStr.length\n        val binStr = binStr.substring(0,\
    \ binStrLen - 1)\n        val binStrLen = binStr.length\n        val binStr =\
    \ binStr.substring(0, binStrLen - 1)\n        val binStrLen = binStr.length\n\
    \        val binStr = binStr.substring(0, binStrLen - 1)\n        val binStrLen\
    \ = binStr.length\n        val binStr = binStr.substring(0, binStrLen - 1)\n \
    \       val binStrLen = binStr.length\n        val binStr = binStr.substring(0,\
    \ binStrLen - 1)\n        val binStrLen = binStr.length\n        val binStr =\
    \ binStr.substring(0, binStrLen - 1)\n        val binStrLen = binStr.length\n\
    \        val binStr = binStr.substring(0, binStrLen - 1)\n        val binStrLen\
    \ = binStr.length\n        val binStr = binStr.substring(0, binStrLen - 1)\n \
    \       val binStrLen = binStr.length\n        val binStr = binStr.substring(0,\
    \ binStrLen - 1)\n        val binStrLen = binStr.length\n        val binStr =\
    \ binStr.substring(0, binStrLen - ", "        val avg = ((n + m) / 2).round\n\
    \        val binary = avg.toBinaryString\n        val result = if (n >= m) Right(binary)\
    \ else Left(s\"$n to $m is $binary\")\n        result", "        val avg = n to\
    \ m by -1\n        val binary = avg.map(x => x.toBinaryString).mkString\n    \
    \    val result = if (n <= m) Right(binary) else Left(\"-1\")\n        result",
  "        val sum = (n to m).sum\n        val avg = sum / m\n        val bin = math.round(avg).toBinaryString\n\
    \        val result = if (bin == \"\") -1 else bin\n        Right(result)", " \
    \       val n = n.toInt\n        val m = m.toInt\n        if (n > m) {\n     \
    \       Left(-1)\n        } else {\n            val sum = n.toLong + m.toLong\n\
    \            val avg = sum / 2\n            val binary = avg.toBinaryString\n\
    \            Right(binary.padToLength(binary.length, \"0\"))\n        }", "  \
    \      val sum = n to m\n        val avg = sum.sum / sum.size\n        val bin\
    \ = math.ceil(avg).toBinaryString\n        val result = if (bin.size == 0) \"\
    0b0\" else bin\n        val right = if (bin.size == 0) -1 else bin.dropRight(1)\n\
    \        Right(result + right)", "        val avg = n to m by -1\n        val\
    \ binary = avg.map(x => x.toBinaryString).mkString\n        val result = if (n\
    \ <= m) Right(binary) else Left(s\"$n to $m is out of range\")\n        result",
  "        val avg = n to m by -1\n        val sum = n to m by -1\n        val avg\
    \ = avg.toList.sum / sum.toList.size\n        val binary = avg.toBinaryString\n\
    \        val result = if (binary.length == 1) \"0b\" + binary else binary\n  \
    \      val right = result.dropRight(1)\n        val left = result.drop(1)\n  \
    \      val leftRight = left ++ right\n        val leftRightString = leftRight.toString.toUpperCase\n\
    \        val result = if (leftRightString.length == 1) \"0b\" + leftRightString\
    \ else leftRightString\n        val right = result.dropRight(1)\n        val left\
    \ = result.drop(1)\n        val leftRight = left ++ right\n        val leftRightString\
    \ = leftRight.toString.toUpperCase\n        val result = if (leftRightString.length\
    \ == 1) \"0b\" + leftRightString else leftRightString\n        val right = result.dropRight(1)\n\
    \        val left = result.drop(1)\n        val leftRight = left ++ right\n  \
    \      val leftRightString = leftRight.toString.toUpperCase\n        val result\
    \ = if (leftRightString.length == 1) \"0b\" + leftRightString else leftRightString\n\
    \        val right = result.dropRight(1)\n        val left = result.drop(1)\n\
    \        val leftRight = left ++ right\n        val leftRightString = leftRight.toString.toUpperCase\n\
    \        val result = if (leftRightString.length == 1) \"0b\" + leftRightString\
    \ else leftRightString\n        val right = result.dropRight(1)\n        val left\
    \ = result.drop(1)\n        val leftRight = left ++ right\n        val leftRightString\
    \ = leftRight.toString.toUpperCase\n        val result = if (leftRightString.length\
    \ == 1) \"0b\" + leftRightString else leftRightString\n        val right = result.dropRight(1)\n\
    \        val left = result.drop(1)\n        val leftRight = left ++ right\n  \
    \      val leftRightString = leftRight.toString.toUpperCase\n        val result\
    \ = if (leftRightString.length == 1) \"0b\" + leftRightString else leftRightString\n\
    \        val right = result.dropRight(1)\n        val left = result.drop(1)\n\
    \        val leftRight = left ++ right\n        val leftRightString = leftRight.toString.toUpperCase\n\
    \        val result = if (leftRightString.length == 1) \"0b\" + leftRightString\
    \ else leftRightString\n        val right = result.dropRight(1)\n        val left\
    \ = result.drop(1)\n        val leftRight = left ++ right\n        val leftRightString\
    \ = leftRight.toString.toUpperCase\n        val result = if (leftRightString.length\
    \ == 1) \"0b\" + leftRightString else ", "        val ns = List(n, m).sorted\n\
    \        val nm = ns zip ns drop 1\n        val nm = nm.filter(_._2 > _._1).map(_._1).sum\
    \ / 2\n        val nm = nm.toBinaryString\n        val nm = nm.dropRight(1)\n\
    \        val nm = nm.reverse\n        val nm = nm.dropRight(1)\n        val nm\
    \ = nm.reverse\n        val nm = nm.dropRight(1)\n        val nm = nm.reverse\n\
    \        val nm = nm.dropRight(1)\n        val nm = nm.reverse\n        val nm\
    \ = nm.dropRight(1)\n        val nm = nm.reverse\n        val nm = nm.dropRight(1)\n\
    \        val nm = nm.reverse\n        val nm = nm.dropRight(1)\n        val nm\
    \ = nm.reverse\n        val nm = nm.dropRight(1)\n        val nm = nm.reverse\n\
    \        val nm = nm.dropRight(1)\n        val nm = nm.reverse\n        val nm\
    \ = nm.dropRight(1)\n        val nm = nm.reverse\n        val nm = nm.dropRight(1)\n\
    \        val nm = nm.reverse\n        val nm = nm.dropRight(1)\n        val nm\
    \ = nm.reverse\n        val nm = nm.dropRight(1)\n        val nm = nm.reverse\n\
    \        val nm = nm.dropRight(1)\n        val nm = nm.reverse\n        val nm\
    \ = nm.dropRight(1)\n        val nm = nm.reverse\n        val nm = nm.dropRight(1)\n\
    \        val nm = nm.reverse\n        val nm = nm.dropRight(1)\n        val nm\
    \ = nm.reverse\n        val nm = nm.dropRight(1)\n        val nm = nm.reverse\n\
    \        val nm = nm.dropRight(1)\n        val nm = nm.reverse\n        val nm\
    \ = nm.dropRight(1)\n        val nm = nm.reverse\n        val nm = nm.dropRight(1)\n\
    \        val nm = nm.reverse\n        val nm = nm.dropRight(1)\n        val nm\
    \ = nm.reverse\n        val nm = nm.dropRight(1)\n        val nm = nm.reverse\n\
    \        val nm = nm.dropRight(1)\n        val nm = nm.reverse\n        val nm\
    \ = nm.dropRight(1)\n        val nm = nm.reverse\n        val nm = nm.dropRight",
  "        val avg = n/m\n        val bin = Integer.toBinaryString(avg)\n        val\
    \ result = bin.take(bin.length-m.toInt)\n        val right = bin.drop(bin.length-m.toInt)\n\
    \        val left = bin.take(bin.length-n.toInt)\n        val leftRight = left.dropRight(left.length-n.toInt)\n\
    \        val leftLeftRight = left.drop(left.length-n.toInt)\n        val leftLeftLeftRight\
    \ = left.drop(left.length-m.toInt)\n        val leftLeftLeftLeftRight = left.drop(left.length-m.toInt)\n\
    \        val leftLeftLeftLeftLeftRight = left.drop(left.length-m.toInt)\n    \
    \    val leftLeftLeftLeftLeftLeftRight = left.drop(left.length-m.toInt)\n    \
    \    val leftLeftLeftLeftLeftLeftLeftRight = left.drop(left.length-m.toInt)\n\
    \        val leftLeftLeftLeftLeftLeftLeftLeftRight = left.drop(left.length-m.toInt)\n\
    \        val leftLeftLeftLeftLeftLeftLeftLeftRight = left.drop(left.length-m.toInt)\n\
    \        val leftLeftLeftLeftLeftLeftLeftLeftRight = left.drop(left.length-m.toInt)\n\
    \        val leftLeftLeftLeftLeftLeftLeftLeftRight = left.drop(left.length-m.toInt)\n\
    \        val leftLeftLeftLeftLeftLeftLeftLeftRight = left.drop(left.length-m.toInt)\n\
    \        val leftLeftLeftLeftLeftLeftLeftLeftRight = left.drop(left.length-m.toInt)\n\
    \        val leftLeftLeftLeftLeftLeftLeftLeftRight = left.drop(left.length-m.toInt)\n\
    \        val leftLeftLeftLeftLeftLeftLeftLeftRight = left.drop(left.length-m.toInt)\n\
    \        val leftLeftLeftLeftLeftLeftLeftLeftRight = left.drop(left.length-m.toInt)\n\
    \        val leftLeftLeftLeftLeftLeftLeftLeftRight = left.drop(left.length-m.toInt)\n\
    \        val leftLeftLeftLeftLeftLeftLeftLeftRight = left.drop(left.length-m.toInt)\n\
    \        val leftLeftLeftLeftLeftLeftLeftLeftRight = left.drop(left.length-m.toInt)\n\
    \        val leftLeftLeftLeftLeftLeftLeftLeftRight = left.drop(left.length-m.toInt)\n\
    \        val leftLeftLeftLeftLeftLeftLeftLeftRight = left.drop(left.", "     \
    \   val sum : Long = n to m by -1\n        val avg = sum.sum / sum.size\n    \
    \    val bin = Integer.toBinaryString(avg)\n        if (bin.length < m) Left(bin)\n\
    \        else Right(bin)", "        val avg = n to m by -1\n        val binary\
    \ = avg.map(x => Integer.toBinaryString(x)).mkString\n        val result = if\
    \ (n >= m) Left(binary) else Right(binary)\n        result", "        val n =\
    \ math.max(math.min(m, n), n)\n        val m = math.max(math.min(m, n), n)\n \
    \       val sum = n to m by -1\n        val avg = sum.sum / sum.size\n       \
    \ val binary = math.round(avg).toBinaryString\n        val result = if (binary\
    \ == \"\") -1 else binary\n        Right(result)", "        val n = math.abs(n)\n\
    \        val m = math.abs(m)\n        val sum = n + m\n        val avg = sum /\
    \ 2\n        val binary = math.round(avg).toBinaryString\n        val result =\
    \ if (binary == \"\") -1 else binary\n        Right(result)", "        val n =\
    \ math.max(math.min(n, m), -1)\n        val m = math.max(math.min(m, n), -1)\n\
    \        val sum = (n+m)/2\n        val binary = sum.toBinaryString\n        val\
    \ result = if (binary == binary.reverse) Right(sum) else Left(s\"$sum is not an\
    \ average of $n and $m\")\n        result", "        val avg = n + (m / 2)\n \
    \       val binary = avg.toBinaryString\n        val len = binary.length\n   \
    \     val right = binary.substring(len - 1, len)\n        val left = binary.substring(0,\
    \ len - 1)\n        val result = if (right == left) Right(avg) else Left(-1)\n\
    \        result", "        val n = math.max(math.min(n, m), 1L)\n        val m\
    \ = math.max(math.min(m, n), 1L)\n        val sum = math.min(m, n) - math.max(m,\
    \ n)\n        val avg = sum / 2\n        val binary = binary(avg)\n        val\
    \ result = if (binary == \"\") -1 else binary\n        Left(result)", "      \
    \  val avg = n to m by -1\n        val sum = 0\n        val count = 0\n      \
    \  for(i <- 0 until avg.length) {\n            sum += avg(i)\n            count\
    \ += 1\n        }\n        if(count > 0) Right(sum.toString(2))\n        else\
    \ Left(s\"$n is greater than $m\")", "        val nBits = n.toBinaryString\n \
    \       val mBits = m.toBinaryString\n        val nBitsLength = nBits.length\n\
    \        val mBitsLength = mBits.length\n        val nBitsSum = sum(nBits.dropRight(mBitsLength))\n\
    \        val mBitsSum = sum(mBits.takeRight(nBitsLength))\n        val nBitsSumLength\
    \ = nBitsSum.length\n        val mBitsSumLength = mBitsSum.length\n        val\
    \ nBitsSumBits = nBitsSum.dropRight(mBitsSumLength)\n        val mBitsSumBits\
    \ = mBitsSum.takeRight(nBitsSumLength)\n        val nBitsSumBitsLength = nBitsSumBits.length\n\
    \        val mBitsSumBitsLength = mBitsSumBits.length\n        val nBitsSumBitsSum\
    \ = sum(nBitsSumBits)\n        val mBitsSumBitsSum = sum(mBitsSumBits)\n     \
    \   val nBitsSumBitsSumLength = nBitsSumBitsSum.length\n        val mBitsSumBitsSumLength\
    \ = mBitsSumBitsSum.length\n        val nBitsSumBitsSumBits = nBitsSumBitsSum.dropRight(mBitsSumBitsSumLength)\n\
    \        val mBitsSumBitsSumBits = mBitsSumBitsSum.takeRight(nBitsSumBitsSumLength)\n\
    \        val nBitsSumBitsSumBitsLength = nBitsSumBitsSumBits.length\n        val\
    \ mBitsSumBitsSumBitsLength = mBitsSumBitsSumBits.length\n        val nBitsSumBitsSumBitsSum\
    \ = sum(nBitsSumBitsSumBits)\n        val mBitsSumBitsSumBitsSum = sum(mBitsSumBitsSumBits)\n\
    \        val nBitsSumBitsSumBitsSumLength = nBitsSumBitsSumBitsSum.length\n  \
    \      val mBitsSumBitsSumBitsSumLength = mBitsSumBitsSumBitsSum.length\n    \
    \    val nBitsSumBitsSumBitsSumBits = nBitsSumBitsSumBitsSum.dropRight(mBitsSumBitsSumBitsSumLength)\n\
    \        val mBitsSumBitsSumBitsSumBits = ", "        val avg = n / m\n      \
    \  val bin = math.round(avg).toBinaryString\n        val result = if (bin.length\
    \ == 1) \"0b\" + bin else bin\n        Right(result)", "        val avg = n to\
    \ m by -1\n        val binary = avg.map(x => Integer.toBinaryString(x)).mkString\n\
    \        val result = if (binary.length == 0) \"0b0\" else binary\n        Right(result)",
  "        val n = math.max(math.min(n, m), 1L)\n        val m = math.max(math.min(m,\
    \ n), 1L)\n        val sum = math.min(m, n) + math.max(m, n) + 1\n        val\
    \ avg = sum / 2\n        val bin = math.pow(10, math.ceil(math.log10(avg)))\n\
    \        val result = math.round(avg * bin).toLong / bin\n        val binString\
    \ = bin.toString(2)\n        if (binString.length < 2) Right(binString)\n    \
    \    else Left(binString)", "        val avg = n / m\n        val binary = avg.toBinaryString\n\
    \        val result = binary.reverse.dropWhile(_ == '0').mkString\n        val\
    \ right = (binary.reverse.takeWhile(_ == '1').length + binary.reverse.length)\
    \ / 2\n        val left = (binary.reverse.length + binary.length) / 2\n      \
    \  val result = if (right == left) result else -1\n        Right(result)", " \
    \       val n = n.toInt\n        val m = m.toInt\n        if (n > m) {\n     \
    \       Left(-1)\n        } else {\n            val sum = n.toLong + m.toLong\n\
    \            val avg = sum / 2\n            val binary = avg.toBinaryString\n\
    \            Right(binary.length)\n        }", "        val sum = n to m by -1\n\
    \        val avg = sum.sum / sum.size\n        val bin = math.round(avg).toBinaryString\n\
    \        val result = if (bin.size == 0) \"0b0\" else bin\n        Right(result)",
  "        val avg = n to m by -1\n        val sum = avg.reduceLeft(_ + _)\n     \
    \   val result = sum / avg.length\n        val bin = result.toBinaryString\n \
    \       val right = bin.dropRight(1)\n        val left = bin.take(1)\n       \
    \ val result = if (right == left) Right result else Left(s\"$result is not an\
    \ average\")\n        result", "        val n = n.toInt\n        val m = m.toInt\n\
    \        val sum = n to m\n        val avg = sum.sum / sum.size\n        val bin\
    \ = Integer.toBinaryString(avg)\n        if (bin.length < m) Left(bin)\n     \
    \   else Right(bin)", "        val n = math.max(math.min(n, m), 1L)\n        val\
    \ m = math.max(math.min(m, n), 1L)\n        val sum = n + m\n        val avg =\
    \ sum / 2\n        val bin = math.pow(10, math.ceil(math.log10(avg)))\n      \
    \  val rounded = math.round(avg * bin) / bin\n        val str = bin.toString(2)\n\
    \        val right = str.dropRight(1)\n        val left = str.dropLeft(1)\n  \
    \      val result = if (right == \"\") left else right\n        Right(rounded)",
  "        val n = math.max(math.min(n, m), 0).toInt\n        val m = math.max(math.min(m,\
    \ n), 0).toInt\n        val sum = n + m\n        val avg = sum / 2\n        val\
    \ binary = binary(sum)\n        val result = if (binary == 0) Right(avg) else\
    \ Left(s\"$sum is not a power of 2\")\n        result", "        val avg = n +\
    \ (m / 2)\n        val bin = math.pow(10, math.ceil(math.log10(avg)))\n      \
    \  val binString = bin.toString(2)\n        val result = binString.substring(0,\
    \ binString.length - 1)\n        val right = binString.substring(binString.length\
    \ - 1)\n        val left = binString.substring(0, binString.length - 1)\n    \
    \    if (right == \"0\") Right(result)\n        else Left(s\"$result $left\")",
  "        val sum = n to m\n        val avg = sum.sum / sum.size\n        val bin\
    \ = math.ceil(avg).toBinaryString\n        val result = if (bin.length < 2) \"\
    0b\" + bin else bin\n        Right(result)", "        val sum = n to m\n     \
    \   val avg = sum.sum / sum.size\n        val binary = avg + \"\"\n        val\
    \ result = if (binary == binary.reverse) Right(binary.reverse) else Left(s\"$binary\
    \ is not a binary number\")\n        result", "        val avg = n / (m + 1)\n\
    \        val bin = math.ceil(avg).toBinaryString\n        val result = Right(bin)\n\
    \        if (n > m) Left(-1)\n        else result", "        val avg = n to m\
    \ by -1\n        val binary = avg.map(_.toBinaryString).mkString\n        val\
    \ result = if (n >= m) -1 else binary\n        Right(result)", "        val nBits\
    \ = n.toBinaryString\n        val mBits = m.toBinaryString\n        val nBitsLen\
    \ = nBits.length\n        val mBitsLen = mBits.length\n        val nBitsSum =\
    \ sum(nBits.dropRight(mBitsLen))\n        val mBitsSum = sum(mBits.takeRight(nBitsLen))\n\
    \        val nBitsSumLen = nBitsSum.length\n        val mBitsSumLen = mBitsSum.length\n\
    \        val nBitsSumInt = nBitsSum.toInt\n        val mBitsSumInt = mBitsSum.toInt\n\
    \        val nBitsSumBin = nBitsSum.toBinaryString\n        val mBitsSumBin =\
    \ mBitsSum.toBinaryString\n        val nBitsSumBinLen = nBitsSumBin.length\n \
    \       val mBitsSumBinLen = mBitsSumBin.length\n        val nBitsSumBinInt =\
    \ nBitsSumBin.toInt\n        val mBitsSumBinInt = mBitsSumBin.toInt\n        val\
    \ nBitsSumBinBin = nBitsSumBin.toBinaryString\n        val mBitsSumBinBin = mBitsSumBin.toBinaryString\n\
    \        val nBitsSumBinBinLen = nBitsSumBinBin.length\n        val mBitsSumBinBinLen\
    \ = mBitsSumBinBin.length\n        val nBitsSumBinBinInt = nBitsSumBinBin.toInt\n\
    \        val mBitsSumBinBinInt = mBitsSumBinBin.toInt\n        val nBitsSumBinBinBinLen\
    \ = nBitsSumBinBinLen\n        val mBitsSumBinBinLen = mBitsSumBinBinLen\n   \
    \     val nBitsSumBinBinBinInt = nBitsSumBinBinInt.toInt\n        val mBitsSumBinBinInt\
    \ = mBitsSumBinBinInt.toInt\n        val nBitsSumBinBinBinLen = nBitsSumBinBinLen\n\
    \        val mBitsSumBinBinLen = mBitsSumBinBinLen\n        val nBitsSumBinBinBinBinInt\
    \ = nBitsSumBinBinBinInt.toInt\n        val mBitsSumBinBinInt = mBitsSumBinBinInt.toInt\n\
    \        val nBitsSumBinBinBinLen = nBitsSumBinBinLen\n        val ", "      \
    \  val avg = n to m by -1\n        val binary = avg.map(_.toBinaryString).mkString\n\
    \        val result = if (binary.length < m) -1 else binary.substring(0, m)\n\
    \        Right(result)", "        val sum = n to m\n        val avg = sum.sum\
    \ / sum.size\n        val bin = Integer.toBinaryString(avg)\n        val result\
    \ = if (sum.size == 1) bin\n        else bin.substring(0, bin.length - 1)\n  \
    \      val right = if (sum.size == 1) \"0b0\"\n        else bin.substring(bin.length\
    \ - 1)\n        val left = if (sum.size == 1) \"0b0\"\n        else bin.substring(0,\
    \ bin.length - 1)\n        val result = if (sum.size == 1) bin\n        else bin.substring(0,\
    \ bin.length - 1)\n        val right = if (sum.size == 1) \"0b0\"\n        else\
    \ bin.substring(bin.length - 1)\n        val left = if (sum.size == 1) \"0b0\"\
    \n        else bin.substring(0, bin.length - 1)\n        val result = if (sum.size\
    \ == 1) bin\n        else bin.substring(0, bin.length - 1)\n        val right\
    \ = if (sum.size == 1) \"0b0\"\n        else bin.substring(bin.length - 1)\n \
    \       val left = if (sum.size == 1) \"0b0\"\n        else bin.substring(0, bin.length\
    \ - 1)\n        val result = if (sum.size == 1) bin\n        else bin.substring(0,\
    \ bin.length - 1)\n        val right = if (sum.size == 1) \"0b0\"\n        else\
    \ bin.substring(bin.length - 1)\n        val left = if (sum.size == 1) \"0b0\"\
    \n        else bin.substring(0, bin.length - 1)\n        val result = if (sum.size\
    \ == 1) bin\n        else bin.substring(0, bin.length - 1)\n        val right\
    \ = if (sum.size == 1) \"0b0\"\n        else bin.substring(bin.length - 1)\n \
    \       val left = if (sum.size == 1) \"0b0\"\n        else bin.substring(0, bin.length\
    \ - 1)\n        val result = if (sum.size == 1) bin\n        else bin.substring(0,\
    \ bin.length - 1)\n        val right = if (sum.size == 1) \"0b0\"\n        else\
    \ bin.substring(bin.length - 1)\n        val left = if (sum.size == 1) \"0b0\"\
    \n        else bin.substring(0, bin.length - 1)\n        val result = if (sum.size\
    \ == 1) bin\n        else bin.substring(0, bin.length - 1)\n        val right\
    \ = if (sum.size == 1) \"0b0\"\n        else bin.substring(bin.length - 1)\n \
    \       val left = if (sum.size == 1) \"0b0\"\n        else bin.substring(0, bin.length\
    \ - 1)\n        val result = if (sum.size == 1) bin\n        else bin.substring(0,\
    \ bin.length - 1)\n        val right = if (sum.size == 1) \"0b0\"\n        else\
    \ bin.substring(bin.length - 1)\n        val left = if (sum.size == 1) \"0b0\"\
    \n        else bin.substring(0, bin.length - 1)\n        val result = if (sum.size\
    \ == 1) bin\n        else bin.substring(0, bin.length - 1)\n        ", "     \
    \   val avg = n / (m+1)\n        val binary = avg.toBinaryString\n        val\
    \ result = binary.reverse.dropWhile(_ == '0').drop(1).reverse\n        val result\
    \ = result.dropRight(1)\n        val result = result.takeRight(binary.length)\n\
    \        val result = result.dropWhile(_ == '0').drop(1).reverse\n        val\
    \ result = result.dropRight(1)\n        val result = result.takeRight(binary.length)\n\
    \        val result = result.dropWhile(_ == '0').drop(1).reverse\n        val\
    \ result = result.dropRight(1)\n        val result = result.takeRight(binary.length)\n\
    \        val result = result.dropWhile(_ == '0').drop(1).reverse\n        val\
    \ result = result.dropRight(1)\n        val result = result.takeRight(binary.length)\n\
    \        val result = result.dropWhile(_ == '0').drop(1).reverse\n        val\
    \ result = result.dropRight(1)\n        val result = result.takeRight(binary.length)\n\
    \        val result = result.dropWhile(_ == '0').drop(1).reverse\n        val\
    \ result = result.dropRight(1)\n        val result = result.takeRight(binary.length)\n\
    \        val result = result.dropWhile(_ == '0').drop(1).reverse\n        val\
    \ result = result.dropRight(1)\n        val result = result.takeRight(binary.length)\n\
    \        val result = result.dropWhile(_ == '0').drop(1).reverse\n        val\
    \ result = result.dropRight(1)\n        val result = result.takeRight(binary.length)\n\
    \        val result = result.dropWhile(_ == '0').drop(1).reverse\n        val\
    \ result = result.dropRight(1)\n        val result = result.takeRight(binary.length)\n\
    \        val result = result.dropWhile(_ == '0').drop(1).reverse\n        val\
    \ result = result.dropRight(1)\n        val result = result.takeRight(binary.length)\n\
    \        val result = result.dropWhile(_ == '0').drop(1).reverse\n        val\
    \ result = result.dropRight(1)\n        val result = result.takeRight(binary.length)\n\
    \        val result = result.dropWhile(_ == '0').drop(1).reverse\n        val\
    \ result = result.dropRight(1)\n        val result = result.takeRight(binary.length)\n\
    \        val result = result.dropWhile(_ == '0').drop(1).reverse\n        val\
    \ result = result.dropRight(1)\n        val result = result.takeRight(binary.length)\n\
    \        val result = result.dropWhile(_ == '0').drop(1).reverse\n        val\
    \ result = result.dropRight(1)\n        val result = result.takeRight(binary.length)\n\
    \        val result = result.dropWhile(_ == '0').drop(1).reverse", "        val\
    \ avg = n to m by -1\n        val sum = 0L\n        val binary = \"\"\n      \
    \  for(i <- 0 until avg.length) {\n            val n = avg(i)\n            val\
    \ m = avg(i+1)\n            val sum = sum + n\n            val bin = sum.toString\
    \ + m.toString\n            binary = binary + bin.charAt(bin.length-1)\n     \
    \   }\n        if(n >= m) {\n            Left(binary)\n        } else {\n    \
    \        Right(sum.toLong)\n        }", "        val n = math.max(math.min(m,\
    \ n), n)\n        val m = math.max(math.min(m, n), n)\n        val binary = n.toBinaryString\n\
    \        val binary = binary.padToLength(binary.length + m.toBinaryString.length,\
    \ \"0\")\n        val binary = binary.drop(binary.length - m.toBinaryString.length)\n\
    \        val binary = binary.reverse\n        val binary = binary.reverse\n  \
    \      val binary = binary.reverse\n        val binary = binary.reverse\n    \
    \    val binary = binary.reverse\n        val binary = binary.reverse\n      \
    \  val binary = binary.reverse\n        val binary = binary.reverse\n        val\
    \ binary = binary.reverse\n        val binary = binary.reverse\n        val binary\
    \ = binary.reverse\n        val binary = binary.reverse\n        val binary =\
    \ binary.reverse\n        val binary = binary.reverse\n        val binary = binary.reverse\n\
    \        val binary = binary.reverse\n        val binary = binary.reverse\n  \
    \      val binary = binary.reverse\n        val binary = binary.reverse\n    \
    \    val binary = binary.reverse\n        val binary = binary.reverse\n      \
    \  val binary = binary.reverse\n        val binary = binary.reverse\n        val\
    \ binary = binary.reverse\n        val binary = binary.reverse\n        val binary\
    \ = binary.reverse\n        val binary = binary.reverse\n        val binary =\
    \ binary.reverse\n        val binary = binary.reverse\n        val binary = binary.reverse\n\
    \        val binary = binary.reverse\n        val binary = binary.reverse\n  \
    \      val binary = binary.reverse\n        val binary = binary.reverse\n    \
    \    val binary = binary.reverse\n        val binary = binary.reverse\n      \
    \  val binary = binary.reverse\n        val binary = binary.reverse\n        val\
    \ binary = binary.reverse\n        val binary = binary.reverse\n        val binary\
    \ = binary.reverse\n        val binary = binary.reverse\n        val binary =\
    \ binary.reverse\n        val binary = binary.reverse\n        val binary = binary.reverse\n\
    \        val binary = binary.reverse\n        val binary = binary.reverse\n  \
    \      val binary = binary.reverse\n        val binary = binary.reverse\n    \
    \    val binary = binary.reverse\n        val binary = binary.reverse\n      \
    \  val binary = binary.reverse\n        val binary = binary.reverse\n        val\
    \ binary = binary.reverse\n        val binary = binary.reverse\n        ", " \
    \       val avg = n/m\n        val binary = avg.toBinaryString\n        val result\
    \ = binary.reverse.dropWhile(x => x == '0').mkString\n        val right = new\
    \ Right(result)\n        if (n > m) right\n        else Left(s\"$n $m $result\"\
    )", "        val sum = n to m\n        val avg = sum.sum / sum.size\n        val\
    \ bin = math.ceil(avg).toBinaryString\n        val result = if (bin.size == m)\
    \ Right(bin) else Left(s\"$n to $m is $avg\")\n        result", "        val n\
    \ = math.abs(n)\n        val m = math.abs(m)\n        if (n > m) {\n         \
    \   Left(-1)\n        } else {\n            val avg = math.round((n + m) / 2)\n\
    \            Right(math.pow(2,avg).toInt)\n        }", "        val avg = n to\
    \ m by -1\n        val sum = 0\n        val binary = \"\"\n        for(i <- 0\
    \ until avg.length) {\n            sum += avg(i)\n            binary += if(sum\
    \ > 0) \"1\" else \"0\"\n        }\n        val result = if(sum > 0) binary.toLong\
    \ else -1\n        Right(result)", "        val sum = n to m\n        val avg\
    \ = sum.sum / sum.size\n        val bin = math.ceil(avg).toBinaryString\n    \
    \    val result = if (bin.length == 1) \"0b\" + bin else bin\n        Right(result)",
  "        val avg = n to m by -1\n        val binary = avg.map(_.toBinaryString).mkString\n\
    \        val bin = binary.length\n        val len = binary.length\n        val\
    \ binary = binary.padTo(len, 0)\n        val binary = binary.reverse\n       \
    \ val binary = binary.drop(binary.length - 1)\n        val binary = binary.reverse\n\
    \        val binary = binary.drop(binary.length - 1)\n        val binary = binary.reverse\n\
    \        val binary = binary.drop(binary.length - 1)\n        val binary = binary.reverse\n\
    \        val binary = binary.drop(binary.length - 1)\n        val binary = binary.reverse\n\
    \        val binary = binary.drop(binary.length - 1)\n        val binary = binary.reverse\n\
    \        val binary = binary.drop(binary.length - 1)\n        val binary = binary.reverse\n\
    \        val binary = binary.drop(binary.length - 1)\n        val binary = binary.reverse\n\
    \        val binary = binary.drop(binary.length - 1)\n        val binary = binary.reverse\n\
    \        val binary = binary.drop(binary.length - 1)\n        val binary = binary.reverse\n\
    \        val binary = binary.drop(binary.length - 1)\n        val binary = binary.reverse\n\
    \        val binary = binary.drop(binary.length - 1)\n        val binary = binary.reverse\n\
    \        val binary = binary.drop(binary.length - 1)\n        val binary = binary.reverse\n\
    \        val binary = binary.drop(binary.length - 1)\n        val binary = binary.reverse\n\
    \        val binary = binary.drop(binary.length - 1)\n        val binary = binary.reverse\n\
    \        val binary = binary.drop(binary.length - 1)\n        val binary = binary.reverse\n\
    \        val binary = binary.drop(binary.length - 1)\n        val binary = binary.reverse\n\
    \        val binary = binary.drop(binary.length - 1)\n        val binary = binary.reverse\n\
    \        val binary = binary.drop(binary.length - 1)\n        val binary = binary.reverse\n\
    \        val binary = binary.drop(binary.length - 1)\n        val binary = binary.reverse\n\
    \        val binary = binary.drop(binary.length - 1)\n        val binary = binary.reverse\n\
    \        val binary = binary.drop(binary.length - 1)\n        val binary = binary.reverse\n\
    \        val binary = binary.drop(binary.length - 1)", "        val avg = n +\
    \ (m / 2)\n        val bin = math.pow(2,math.ceil(math.log2(avg)))\n        val\
    \ binStr = bin.toString(2)\n        val binStrLen = binStr.length\n        val\
    \ n = binStr.substring(0, binStrLen - 1)\n        val m = binStr.substring(binStrLen\
    \ - 1)\n        val result = if (n == m) Right(avg) else Left(s\"$n $m\")\n  \
    \      result", "        val nBits = n.toBinaryString\n        val mBits = m.toBinaryString\n\
    \        val nBitsLength = nBits.length\n        val mBitsLength = mBits.length\n\
    \        val nBitsSum = n.toInt\n        val mBitsSum = m.toInt\n        val nBitsSumLength\
    \ = nBitsSum.length\n        val mBitsSumLength = mBitsSum.length\n        val\
    \ nBitsSumBits = nBitsSum.dropRight(nBitsSumLength)\n        val mBitsSumBits\
    \ = mBitsSum.dropRight(mBitsSumLength)\n        val nBitsSumBitsLength = nBitsSumBits.length\n\
    \        val mBitsSumBitsLength = mBitsSumBits.length\n        val nBitsSumBitsSum\
    \ = nBitsSumBits.dropRight(nBitsSumBitsLength)\n        val mBitsSumBitsSum =\
    \ mBitsSumBits.dropRight(mBitsSumBitsLength)\n        val nBitsSumBitsSumLength\
    \ = nBitsSumBitsSum.length\n        val mBitsSumBitsSumLength = mBitsSumBitsSum.length\n\
    \        val nBitsSumBitsSumBits = nBitsSumBitsSum.dropRight(nBitsSumBitsSumLength)\n\
    \        val mBitsSumBitsSumBits = mBitsSumBitsSum.dropRight(mBitsSumBitsSumLength)\n\
    \        val nBitsSumBitsSumBitsLength = nBitsSumBitsSumBits.length\n        val\
    \ mBitsSumBitsSumBitsLength = mBitsSumBitsSumBits.length\n        val nBitsSumBitsSumBitsSum\
    \ = nBitsSumBitsSumBits.dropRight(nBitsSumBitsSumBitsLength)\n        val mBitsSumBitsSumBitsSum\
    \ = mBitsSumBitsSumBits.dropRight(mBitsSumBitsSumBitsLength)\n        val nBitsSumBitsSumBitsSumLength\
    \ = nBitsSumBitsSumBitsSum.length\n        val mBitsSumBitsSumBitsSumLength =\
    \ mBitsSumBitsSumBitsSum.length\n        val nBitsSumBitsSumBitsSumBits = nBitsSumBitsSumBitsSum.dropRight(nBitsSumBit",
  "        val avg = ((n + m) / 2).round\n        val binary = avg.toBinaryString\n\
    \        if (binary.length < m) Left(s\"$n to $m is $avg\")\n        else Right(binary.substring(0,\
    \ m))", "        val n = math.abs(n)\n        val m = math.abs(m)\n        val\
    \ avg = ((n + m) / 2.0).toLong\n        val binary = avg.toBinaryString\n    \
    \    if (binary.length < 2) Right(binary.padToLength(2, \"0\"))\n        else\
    \ Left(s\"$binary\")", "        val n = math.ceil(n)\n        val m = math.ceil(m)\n\
    \        val sum = (n to m).foldLeft(0L){ (sum, v) => sum + v }\n        val avg\
    \ = sum / m\n        val binary = avg.toBinaryString\n        val result = if\
    \ (binary == \"\") -1 else binary.toLong\n        Left(s\"$sum / $m = $result\"\
    )", "        val sum = n to m\n        val avg = sum.sum / sum.length\n      \
    \  val bin = math.ceil(avg).toBinaryString\n        val right = bin.dropRight(1)\n\
    \        val left = bin.dropLeft(1)\n        val result = if (right == left) Right(bin)\
    \ else Left(s\"$left $right\")\n        result", "        val n = math.abs(n)\n\
    \        val m = math.abs(m)\n        val sum = n + m\n        val avg = sum /\
    \ 2\n        val binary = math.round(avg).toBinaryString\n        val result =\
    \ if (binary == \"\") -1 else binary\n        Right(result)", "        val sum\
    \ = n to m\n        val sums = sum.map(x => x.toBinaryString).map(x => x.padToLength(8,\
    \ \"0\"))\n        val sumsSum = sums.sum\n        val sumsSum2 = sumsSum * sumsSum\n\
    \        val sumsSum3 = sumsSum2 * sumsSum\n        val sumsSum4 = sumsSum3 *\
    \ sumsSum\n        val sumsSum5 = sumsSum4 * sumsSum\n        val sumsSum6 = sumsSum5\
    \ * sumsSum\n        val sumsSum7 = sumsSum6 * sumsSum\n        val sumsSum8 =\
    \ sumsSum7 * sumsSum\n        val sumsSum9 = sumsSum8 * sumsSum\n        val sumsSum10\
    \ = sumsSum9 * sumsSum\n        val sumsSum11 = sumsSum10 * sumsSum\n        val\
    \ sumsSum12 = sumsSum11 * sumsSum\n        val sumsSum13 = sumsSum12 * sumsSum\n\
    \        val sumsSum14 = sumsSum13 * sumsSum\n        val sumsSum15 = sumsSum14\
    \ * sumsSum\n        val sumsSum16 = sumsSum15 * sumsSum\n        val sumsSum17\
    \ = sumsSum16 * sumsSum\n        val sumsSum18 = sumsSum17 * sumsSum\n       \
    \ val sumsSum19 = sumsSum18 * sumsSum\n        val sumsSum20 = sumsSum19 * sumsSum\n\
    \        val sumsSum21 = sumsSum20 * sumsSum\n        val sumsSum22 = sumsSum21\
    \ * sumsSum\n        val sumsSum23 = sumsSum22 * sumsSum\n        val sumsSum24\
    \ = sumsSum23 * sumsSum\n        val sumsSum25 = sumsSum24 * sumsSum\n       \
    \ val sumsSum26 = sumsSum25 * sumsSum\n        val sumsSum27 = sumsSum26 * sumsSum\n\
    \        val sumsSum28 = sumsSum27 * sumsSum\n        val sumsSum29 = sumsSum28\
    \ * sumsSum\n        val sumsSum30 = sumsSum29 * sumsSum\n        val sumsSum31\
    \ = sumsSum30 * sumsSum\n        val sumsSum32 = ", "        val avg = n to m\
    \ by -1\n        val binary = avg.map(x => x.toBinaryString).mkString\n      \
    \  val result = if (n == m) Right(binary) else Left(s\"$n to $m is $binary\")\n\
    \        result", "        val avg = n to m by -1\n        val binary = avg.map(_.toBinaryString).mkString\n\
    \        val result = if (n <= m) Right(binary.toLong) else Left(\"-1\")\n   \
    \     result", "        val avg = n to m by -1\n        val binary = avg.map(_.toBinaryString).mkString(\"\
    \")\n        val result = binary.toLong\n        Right(result)", "        val\
    \ nToM = (n to m).toList\n        val nToMSum = nToM.sum\n        val nToMCount\
    \ = nToM.size\n        val nToMSumInt = nToMSum.toInt\n        val nToMSumBin\
    \ = Integer.toBinaryString(nToMSumInt)\n        val nToMCountBin = Integer.toBinaryString(nToMCount)\n\
    \        val nToMSumBin = Integer.toBinaryString(nToMSumInt)\n        val nToMCountBin\
    \ = Integer.toBinaryString(nToMCount)\n        val nToMSumBin = Integer.toBinaryString(nToMSumInt)\n\
    \        val nToMCountBin = Integer.toBinaryString(nToMCount)\n        val nToMSumBin\
    \ = Integer.toBinaryString(nToMSumInt)\n        val nToMCountBin = Integer.toBinaryString(nToMCount)\n\
    \        val nToMSumBin = Integer.toBinaryString(nToMSumInt)\n        val nToMCountBin\
    \ = Integer.toBinaryString(nToMCount)\n        val nToMSumBin = Integer.toBinaryString(nToMSumInt)\n\
    \        val nToMCountBin = Integer.toBinaryString(nToMCount)\n        val nToMSumBin\
    \ = Integer.toBinaryString(nToMSumInt)\n        val nToMCountBin = Integer.toBinaryString(nToMCount)\n\
    \        val nToMSumBin = Integer.toBinaryString(nToMSumInt)\n        val nToMCountBin\
    \ = Integer.toBinaryString(nToMCount)\n        val nToMSumBin = Integer.toBinaryString(nToMSumInt)\n\
    \        val nToMCountBin = Integer.toBinaryString(nToMCount)\n        val nToMSumBin\
    \ = Integer.toBinaryString(nToMSumInt)\n        val nToMCountBin = Integer.toBinaryString(nToMCount)\n\
    \        val nToMSumBin = Integer.toBinaryString(nToMSumInt)\n        val nToMCountBin\
    \ = Integer.toBinaryString(nToMCount)\n        val nToMSumBin = Integer.toBinaryString(nToMSumInt)\n\
    \        val nToMCountBin = Integer.toBinaryString(nToMCount)\n        val nToMSumBin\
    \ = Integer.toBinaryString(nToMSumInt)", "        val nBits = n.toBinaryString\n\
    \        val mBits = m.toBinaryString\n        val nBitsLength = nBits.length\n\
    \        val mBitsLength = mBits.length\n        val nBitsSum = n.toInt\n    \
    \    val mBitsSum = m.toInt\n        val nBitsSumLength = nBitsSum.toBinaryString.length\n\
    \        val mBitsSumLength = mBitsSum.toBinaryString.length\n        val nBitsSumBits\
    \ = nBitsSum.toBinaryString\n        val mBitsSumBits = mBitsSum.toBinaryString\n\
    \        val nBitsSumBitsLength = nBitsSumBits.length\n        val mBitsSumBitsLength\
    \ = mBitsSumBits.length\n        val nBitsSumBitsSum = nBitsSumBits.toInt\n  \
    \      val mBitsSumBitsSum = mBitsSumBits.toInt\n        val nBitsSumBitsSumLength\
    \ = nBitsSumBitsSum.toBinaryString.length\n        val mBitsSumBitsSumLength =\
    \ mBitsSumBitsSum.toBinaryString.length\n        val nBitsSumBitsSumBits = nBitsSumBitsSum.toBinaryString\n\
    \        val mBitsSumBitsSumBits = mBitsSumBitsSum.toBinaryString\n        val\
    \ nBitsSumBitsSumBitsLength = nBitsSumBitsSumBits.length\n        val mBitsSumBitsSumBitsLength\
    \ = mBitsSumBitsSumBits.length\n        val nBitsSumBitsSumBitsSum = nBitsSumBitsSumBits.toInt\n\
    \        val mBitsSumBitsSumBitsSum = mBitsSumBitsSumBits.toInt\n        val nBitsSumBitsSumBitsSumLength\
    \ = nBitsSumBitsSumBitsSum.toBinaryString.length\n        val mBitsSumBitsSumBitsSumLength\
    \ = mBitsSumBitsSumBitsSum.toBinaryString.length\n        val nBitsSumBitsSumBitsSumBits\
    \ = nBitsSumBitsSumBitsSum.toBinaryString\n        val mBitsSumBitsSumBitsSumBits\
    \ = mBitsSumBitsSumBitsSum.toBinaryString\n        val nBitsSumBitsSumBitsSumBitsLength\
    \ = nBitsSumBitsSumBitsSumBit", "        val n = math.max(math.min(n, m), -1)\n\
    \        val m = math.max(math.min(m, n), -1)\n        val sum = n + m\n     \
    \   val avg = sum / 2\n        val bin = math.pow(10, math.ceil(math.log10(avg)))\n\
    \        val result = math.round(avg * bin)\n        val str = result.toBinaryString\n\
    \        val right = str.dropRight(1)\n        val left = str.dropLeft(1)\n  \
    \      val right = right.reverse\n        val left = left.reverse\n        val\
    \ result = if (right == left) Right(result) else Left(s\"$result is not an average\"\
    )\n        result", "        val n = math.max(math.min(n, m), -1)\n        val\
    \ m = math.max(math.min(m, n), -1)\n        val sum = n to m\n        val avg\
    \ = sum.sum / sum.size\n        val bin = math.round(avg).toBinaryString\n   \
    \     val result = if (bin == \"\") -1 else bin\n        Left(result)", "    \
    \    val avg = n / m\n        val binary = avg.toBinaryString\n        val result\
    \ = binary.reverse.dropRight(1)\n        val resultString = result.reverse\n \
    \       val resultLong = resultString.toLong\n        val resultLeft = Right(resultLong)\n\
    \        if (n < m) resultLeft\n        else Left(resultString)", "        val\
    \ n = math.max(math.min(m, n), n)\n        val m = math.max(math.min(m, n), n)\n\
    \        val sum = n until m\n        val avg = sum.sum / sum.length\n       \
    \ val bin = math.round(avg).toBinaryString\n        val result = if (bin.length\
    \ == 1) \"0b\" + bin else bin\n        Right(result)", "        val sum = n to\
    \ m\n        val avg = sum.sum / sum.length\n        val binary = binary(avg)\n\
    \        val result = if (n == m) Right(binary) else Left(s\"$n to $m is $binary\"\
    )\n        result", "        val avg = n to m by -1\n        val binary = avg.map(x\
    \ => Integer.toBinaryString(x)).mkString\n        val result = if (binary.length\
    \ == 0) \"0b0\" else binary\n        Right(result)", "        val avg = n to m\
    \ by -1\n        val sum = 0L\n        val binary = \"\"\n        for(i <- 0 until\
    \ avg.length) {\n            val bin = math.pow(2,i)\n            val val = avg(i).toBinaryString\n\
    \            val len = val.length\n            val binLen = bin.length\n     \
    \       val binVal = bin.charAt(len-1)\n            val binValLen = binVal.length\n\
    \            val binValVal = binVal.charAt(binValLen-1)\n            val binValValLen\
    \ = binValVal.length\n            val binValValVal = binValVal.charAt(binValValLen-1)\n\
    \            val binValValValLen = binValValVal.length\n            val binValValValVal\
    \ = binValValVal.charAt(binValValValLen-1)\n            val binValValValValLen\
    \ = binValValValVal.length\n            val binValValValValVal = binValValValVal.charAt(binValValValValLen-1)\n\
    \            val binValValValValValLen = binValValValValVal.length\n         \
    \   val binValValValValValVal = binValValValValVal.charAt(binValValValValValLen-1)\n\
    \            val binValValValValValValLen = binValValValValValVal.length\n   \
    \         val binValValValValValValVal = binValValValValValVal.charAt(binValValValValValValLen-1)\n\
    \            val binValValValValValValValLen = binValValValValValValVal.length\n\
    \            val binValValValValValValValVal = binValValValValValValVal.charAt(binValValValValValValValLen-1)\n\
    \            val binValValValValValValValValLen = binValValValValValValValValVal.length\n\
    \            val binValValValValValValValValVal = binValValValValValValValVal.charAt(binValValValValValValValValLen-1)\n\
    \            val binValValValValValValValValLen = binValValValValValValValValVal.length\n\
    \            val binValValValValValValValValVal = binValValValValValValValValVal.charAt(binValValValValValValValValValLen-1)\n\
    \            val binValValValValValValValValValLen = binValValValValValValValValValValVal.length\n\
    \            val binValVal", "        val avg = n + (m - 1) / 2\n        val binary\
    \ = avg.toBinaryString\n        val result = binary.reverse.dropWhile(_ == '0').mkString\n\
    \        val right = (binary.reverse.takeWhile(_ == '1').length).max(0)\n    \
    \    val left = binary.reverse.takeWhile(_ == '0').length\n        val final =\
    \ if (right == 0) \"0b\" + binary.reverse.dropWhile(_ == '0').mkString else -1\n\
    \        Left(result)", "        val avg = n / m\n        val bin = math.round(avg).toBinaryString\n\
    \        if (bin.length < 2) Right(bin)\n        else Left(s\"$bin is not a valid\
    \ binary number\")", "        val n = n.toInt\n        val m = m.toInt\n     \
    \   if (n > m) {\n            Left(-1)\n        } else {\n            val sum\
    \ = n.toLong + m.toLong\n            val avg = sum / 2\n            val binary\
    \ = avg.toBinaryString\n            Right(binary.length)\n        }", "      \
    \  val n = math.max(math.min(n, m), 1L)\n        val m = math.max(math.min(m,\
    \ n), 1L)\n        val sum = n + m\n        val avg = sum / 2\n        val bin\
    \ = math.pow(10, math.ceil(math.log10(avg)))\n        val result = math.round(avg\
    \ * bin).toLong\n        val str = if (result < 0) \"-\" else \"\"\n        Right(s\"\
    0b${str}${result}\")", "        val sum = n to m by -1\n        val avg = sum.sum\
    \ / sum.length\n        val bin = math.round(avg).toBinaryString\n        val\
    \ result = if (bin == \"\") -1 else bin\n        Left(result)", "        val nToM\
    \ = (n to m).toList\n        val nToM2 = nToM.filter(_ > 0)\n        val nToM3\
    \ = nToM2.filter(_ > 1)\n        val nToM4 = nToM3.filter(_ > 2)\n        val\
    \ nToM5 = nToM4.filter(_ > 3)\n        val nToM6 = nToM5.filter(_ > 4)\n     \
    \   val nToM7 = nToM6.filter(_ > 5)\n        val nToM8 = nToM7.filter(_ > 6)\n\
    \        val nToM9 = nToM8.filter(_ > 7)\n        val nToM10 = nToM9.filter(_\
    \ > 8)\n        val nToM11 = nToM10.filter(_ > 9)\n        val nToM12 = nToM11.filter(_\
    \ > 10)\n        val nToM13 = nToM12.filter(_ > 11)\n        val nToM14 = nToM13.filter(_\
    \ > 12)\n        val nToM15 = nToM14.filter(_ > 13)\n        val nToM16 = nToM15.filter(_\
    \ > 14)\n        val nToM17 = nToM16.filter(_ > 15)\n        val nToM18 = nToM17.filter(_\
    \ > 16)\n        val nToM19 = nToM18.filter(_ > 17)\n        val nToM20 = nToM19.filter(_\
    \ > 18)\n        val nToM21 = nToM20.filter(_ > 19)\n        val nToM22 = nToM21.filter(_\
    \ > 20)\n        val nToM23 = nToM22.filter(_ > 21)\n        val nToM24 = nToM23.filter(_\
    \ > 22)\n        val nToM25 = nToM24.filter(_ > 23)\n        val nToM26 = nToM25.filter(_\
    \ > 24)\n        val nToM27 = nToM26.filter(_ > 25)\n        val nToM28 = nToM27.filter(_\
    \ > 26)\n        val nToM29 = nToM28.filter(_ > 27)\n        val nToM30 = nToM29.filter(_\
    \ > 28)\n        val nToM31 = nToM30.filter(_ > 29)\n        val nToM32 = nToM31.filter(_\
    \ > 30)\n        val nToM33 = nToM32.filter(_ > 31)\n        val nToM34 = nToM33.filter(_\
    \ > ", "        val nBits = n.toBinaryString\n        val mBits = m.toBinaryString\n\
    \        val nBitsLen = nBits.length\n        val mBitsLen = mBits.length\n  \
    \      val nBitsSum = sum(nBits.dropRight(mBitsLen))\n        val mBitsSum = sum(mBits.takeRight(nBitsLen))\n\
    \        val nBitsSumInt = nBitsSum.toInt\n        val mBitsSumInt = mBitsSum.toInt\n\
    \        val nBitsSumBin = Integer.toBinaryString(nBitsSumInt)\n        val mBitsSumBin\
    \ = Integer.toBinaryString(mBitsSumInt)\n        val nBitsSumBinLen = nBitsSumBin.length\n\
    \        val mBitsSumBinLen = mBitsSumBin.length\n        val nBitsSumBinSum =\
    \ sum(nBitsSumBin.dropRight(mBitsSumBinLen))\n        val mBitsSumBinSum = sum(mBitsSumBin.takeRight(nBitsSumBinLen))\n\
    \        val nBitsSumBinSumInt = nBitsSumBinSum.toInt\n        val mBitsSumBinSumInt\
    \ = mBitsSumBinSum.toInt\n        val nBitsSumBinSumBin = Integer.toBinaryString(nBitsSumBinSumInt)\n\
    \        val mBitsSumBinSumBin = Integer.toBinaryString(mBitsSumBinSumInt)\n \
    \       val nBitsSumBinSumBinLen = nBitsSumBinSumBin.length\n        val mBitsSumBinSumBinLen\
    \ = mBitsSumBinSumBin.length\n        val nBitsSumBinSumBinSum = sum(nBitsSumBinSumBin.dropRight(mBitsSumBinSumBinLen))\n\
    \        val mBitsSumBinSumBinSum = sum(mBitsSumBinSumBin.takeRight(nBitsSumBinSumBinLen))\n\
    \        val nBitsSumBinSumBinSumInt = nBitsSumBinSumBinSum.toInt\n        val\
    \ mBitsSumBinSumBinSumInt = mBitsSumBinSumBinSum.toInt\n        val nBitsSumBinSumBinSumBin\
    \ = Integer.toBinaryString(nBitsSumBinSumBinSumInt)\n        val mBitsSumBinSumBinSumBin\
    \ = Integer.toBinaryString(mBitsSumBinSumBinSumInt", "        val avg = ((n +\
    \ m) / 2).round\n        val binary = avg.toBinaryString\n        if (binary.length\
    \ < 2) Right(binary.padToLength(2, \"0\"))\n        else Left(s\"$binary\")",
  "        val avg = ((n + m) / 2).round\n        val binary = avg.toBinaryString\n\
    \        val result = if (n == m) Right(binary) else Left(s\"$n through $m average\
    \ is $binary\")\n        result", "        val sum = n to m by -1\n        val\
    \ avg = sum.sum / sum.size\n        val binary = avg.toBinaryString\n        val\
    \ result = if (binary.length == 1) \"0b\" + binary else binary\n        Right(result)",
  "        val sum = n to m\n        val avg = sum.sum / sum.size\n        val binary\
    \ = math.round(avg).toBinaryString\n        val result = if (binary == \"\") -1\
    \ else binary\n        val right = binary.reverse\n        val left = binary.reverse.dropRight(1)\n\
    \        val result = if (right == \"\") -1 else right\n        val result = if\
    \ (left == \"\") -1 else left\n        val result = if (result == \"\") -1 else\
    \ result\n        val result = if (result == \"\") -1 else result\n        val\
    \ result = if (result == \"\") -1 else result\n        val result = if (result\
    \ == \"\") -1 else result\n        val result = if (result == \"\") -1 else result\n\
    \        val result = if (result == \"\") -1 else result\n        val result =\
    \ if (result == \"\") -1 else result\n        val result = if (result == \"\"\
    ) -1 else result\n        val result = if (result == \"\") -1 else result\n  \
    \      val result = if (result == \"\") -1 else result\n        val result = if\
    \ (result == \"\") -1 else result\n        val result = if (result == \"\") -1\
    \ else result\n        val result = if (result == \"\") -1 else result\n     \
    \   val result = if (result == \"\") -1 else result\n        val result = if (result\
    \ == \"\") -1 else result\n        val result = if (result == \"\") -1 else result\n\
    \        val result = if (result == \"\") -1 else result\n        val result =\
    \ if (result == \"\") -1 else result\n        val result = if (result == \"\"\
    ) -1 else result\n        val result = if (result == \"\") -1 else result\n  \
    \      val result = if (result == \"\") -1 else result\n        val result = if\
    \ (result == \"\") -1 else result\n        val result = if (result == \"\") -1\
    \ else result\n        val result = if (result == \"\") -1 else result\n     \
    \   val result = if (result == \"\") -1 else result\n        val result = if (result\
    \ == \"\") -1 else result\n        val result = if (result == \"\") -1 else result\n\
    \        val result = if (result == \"\") -1 else result\n        val result =\
    \ if (result == \"\") -1 else result\n        val result = if (result == \"\"\
    ) -1 else result\n        val result = if (result == \"\") -1 else result\n  \
    \      val result = if (result == \"\") -1 else result\n        val result = if\
    \ (result == \"\") -1 else result\n        val result = if (result == \"\") -1\
    \ else result\n        val result = if (result == \"\") -1 else result\n     \
    \   val result = if (result == \"\") -1 else result\n        val result = if (result\
    \ == \"\") -1 else result\n        val result = if (result == \"\") -1 else result\n\
    \        val result = if (result == \"\") -1 else result\n", "        val n =\
    \ math.abs(n)\n        val m = math.abs(m)\n        val sum = n + m\n        val\
    \ avg = sum / 2\n        val bin = math.pow(10, math.ceil(math.log10(avg)))\n\
    \        val rounded = math.round(avg * bin) / bin\n        val result = if (rounded\
    \ == avg) Right(rounded) else Left(s\"$rounded is not an exact integer in binary\"\
    )\n        result", "        val n = math.max(math.min(n, m), -1)\n        val\
    \ m = math.max(math.min(m, n), -1)\n        val sum = (n to m).map(i => math.pow(2,\
    \ i).toLong).sum\n        val avg = math.round(sum / 2).toLong\n        val bin\
    \ = Integer.toBinaryString(avg)\n        val result = if (n == m) Right(bin) else\
    \ Left(s\"$n to $m is $bin\")\n        result", "        val sum = (n to m).foldLeft(0L){\
    \ (sum, num) =>\n            val result = sum + num\n            val rounded =\
    \ math.round(result * 2) / 2.0\n            val binary = Integer.toBinaryString(rounded)\n\
    \            val result = if (rounded == 0) \"0b\" + binary else binary\n    \
    \        Right(result)\n        }\n        val avg = sum.right.getOrElse(\"0b0\"\
    )\n        val result = if (n == m) Right(avg) else Left(\"0b\" + avg)\n     \
    \   result", "        val nMinusM = (n - m).toInt\n        if(nMinusM < 0) Left(s\"\
    $n is greater than $m\")\n        else Right(nMinusM.toBinary)", "        val\
    \ ns = List(n, m).sorted\n        val nm = ns zip ns drop 1 map (_ / 2)\n    \
    \    val nn = ns zip nm map (_ / 2)\n        val nn = nn zip nn map (_ / 2)\n\
    \        val nn = nn zip nn map (_ / 2)\n        val nn = nn zip nn map (_ / 2)\n\
    \        val nn = nn zip nn map (_ / 2)\n        val nn = nn zip nn map (_ / 2)\n\
    \        val nn = nn zip nn map (_ / 2)\n        val nn = nn zip nn map (_ / 2)\n\
    \        val nn = nn zip nn map (_ / 2)\n        val nn = nn zip nn map (_ / 2)\n\
    \        val nn = nn zip nn map (_ / 2)\n        val nn = nn zip nn map (_ / 2)\n\
    \        val nn = nn zip nn map (_ / 2)\n        val nn = nn zip nn map (_ / 2)\n\
    \        val nn = nn zip nn map (_ / 2)\n        val nn = nn zip nn map (_ / 2)\n\
    \        val nn = nn zip nn map (_ / 2)\n        val nn = nn zip nn map (_ / 2)\n\
    \        val nn = nn zip nn map (_ / 2)\n        val nn = nn zip nn map (_ / 2)\n\
    \        val nn = nn zip nn map (_ / 2)\n        val nn = nn zip nn map (_ / 2)\n\
    \        val nn = nn zip nn map (_ / 2)\n        val nn = nn zip nn map (_ / 2)\n\
    \        val nn = nn zip nn map (_ / 2)\n        val nn = nn zip nn map (_ / 2)\n\
    \        val nn = nn zip nn map (_ / 2)\n        val nn = nn zip nn map (_ / 2)\n\
    \        val nn = nn zip nn map (_ / 2)\n        val nn = nn zip nn map (_ / 2)\n\
    \        val nn = nn zip nn map (_ / 2)\n        val nn = nn zip nn map (_ / 2)\n\
    \        val nn = nn zip nn map (_ / 2)\n        val nn = nn zip nn map (_ / 2)\n\
    \        val nn = nn zip nn map (_ / 2)\n        val nn = nn zip nn map (_ / 2)\n\
    \        val nn = nn zip nn map (_ / 2)\n        val ", "        val avg = n /\
    \ (m - n + 1) // average of n through m\n        val bin = math.ceil(avg).toBinaryString\n\
    \        val result = if (bin == bin.dropRight(1)) bin else bin + bin.dropRight(1)\n\
    \        Right(result)", "        val avg = ((n + m) / 2).round\n        val binary\
    \ = avg.toBinaryString\n        if (binary.length < m) Left(s\"$n to $m is $binary\"\
    )\n        else Right(binary)", "        val avg = ((n + m) / 2).round\n     \
    \   val bin = Integer.toBinaryString(avg)\n        if (bin.length < m) Left(s\"\
    $bin is too short\")\n        else if (bin.length > m) Right(-1)\n        else\
    \ Right(bin)", "        val sum = 0L\n        val count = 0L\n        for(i <-\
    \ n until m){\n            sum += i\n            count += 1\n        }\n     \
    \   if(count > 0){\n            val avg = sum / count\n            val binary\
    \ = Integer.toBinaryString(avg)\n            val result = Right(binary.length\
    \ + binary.reverse)\n        } else {\n            val result = Left(-1)\n   \
    \     }\n        return result", "        val avg = n to m by -1\n        val\
    \ binary = avg.map(x => x.toBinaryString).mkString\n        val result = if (n\
    \ == m) Right(binary) else Left(s\"$n to $m is $binary\")\n        result", " \
    \       val sum = n to m\n        val avg = sum.sum / sum.size\n        val bin\
    \ = math.ceil(avg).toBinaryString\n        val result = if (bin.size == 1) \"\
    0b\" + bin else bin\n        Right(result)", "        val avg = n to m by -1\n\
    \        val sum = 0\n        val binary = \"\"\n        for(i <- 0 until avg.length)\
    \ {\n            val bin = math.pow(2,i)\n            val val = avg(i).toBinaryString\n\
    \            val binVal = bin.toInt\n            val binVal2 = binVal + binVal\n\
    \            val binVal3 = binVal2 + binVal2\n            val binVal4 = binVal3\
    \ + binVal3\n            val binVal5 = binVal4 + binVal4\n            val binVal6\
    \ = binVal5 + binVal5\n            val binVal7 = binVal6 + binVal6\n         \
    \   val binVal8 = binVal7 + binVal7\n            val binVal9 = binVal8 + binVal8\n\
    \            val binVal10 = binVal9 + binVal9\n            val binVal11 = binVal10\
    \ + binVal10\n            val binVal12 = binVal11 + binVal11\n            val\
    \ binVal13 = binVal12 + binVal12\n            val binVal14 = binVal13 + binVal13\n\
    \            val binVal15 = binVal14 + binVal14\n            val binVal16 = binVal15\
    \ + binVal15\n            val binVal17 = binVal16 + binVal16\n            val\
    \ binVal18 = binVal17 + binVal17\n            val binVal19 = binVal18 + binVal18\n\
    \            val binVal20 = binVal19 + binVal19\n            val binVal21 = binVal20\
    \ + binVal20\n            val binVal22 = binVal21 + binVal21\n            val\
    \ binVal23 = binVal22 + binVal22\n            val binVal24 = binVal23 + binVal23\n\
    \            val binVal25 = binVal24 + binVal24\n            val binVal26 = binVal25\
    \ + binVal25\n            val binVal27 = binVal26 + binVal26\n            val\
    \ binVal28 = binVal27 + binVal27\n            val binVal29 = binVal28 + binVal28\n\
    \            val binVal30 = binVal29 + binVal29\n            val binVal31 = binVal30\
    \ + binVal30\n            val binVal32 = binVal31 + binVal31\n            val\
    \ binVal33 = binVal32 + binVal32\n            val binVal34 = binVal33 + binVal33\n\
    \            val binVal35 = binVal", "        val sum = n to m by -1\n       \
    \ val avg = sum.sum / sum.size\n        val binary = avg + binary(avg)\n     \
    \   binary.toString.toLong", "        val sum = n to m\n        val avg = sum.sum\
    \ / sum.size\n        val bin = math.ceil(avg).toBinaryString\n        val right\
    \ = bin.dropRight(1)\n        val left = bin.dropLeft(1)\n        val result =\
    \ if (right == left) Right(bin) else Left(s\"$left $right\")\n        result",
  "        val sum = n to m\n        val avg = sum.sum / sum.size\n        val binary\
    \ = binary(avg)\n        val result = if (n == m) -1 else binary\n        Left(result)",
  "        val n = math.abs(n)\n        val m = math.abs(m)\n        val sum = (n\
    \ to m).sum\n        val avg = sum / m\n        val bin = math.round(avg).toBinaryString\n\
    \        if (bin.length < m) Left(bin)\n        else Right(bin)", "        val\
    \ n = n.toInt\n        val m = m.toInt\n        if (n > m) {\n            Left(-1)\n\
    \        } else {\n            val sum = n.toLong + m.toLong\n            val\
    \ avg = sum / 2\n            val binary = binary(avg)\n            Right(binary.toLong)\n\
    \        }", "        val avg = ((n + m) / 2).round\n        val binary = avg.toBinaryString\n\
    \        if (binary.length < m) Left(s\"$binary is too short\")\n        else\
    \ if (binary.length > m) Right(-1)\n        else Right(binary)"]
stop_tokens:
- "\n    }\n"
