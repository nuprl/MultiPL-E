name: HumanEval_58_common
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return sorted unique common elements for two lists.\n    // >>> common([1,\
  \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    // [1, 5, 653]\n    // >>>\
  \ common([5, 3, 2, 8], [3, 2])\n    // [2, 3]\n    def common(l1 : List[Long], l2\
  \ : List[Long]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
  \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
  \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
  \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
  \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
  \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
  \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
  \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
  \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n}\n"
completions: ["        val l3 = l1 ++ l2\n        val l4 = l3.distinct\n        l4.sort",
  "        val common = mutable.Set[Long]()\n        l1.foreach { x => if (l2.contains(x))\
    \ common += x }\n        common.sortWith((x, y) => x < y)", "        val l3 =\
    \ l1 ++ l2\n        val l4 = l3.distinct\n        l4.sort", "        val l3 =\
    \ l1 ++ l2\n        val l4 = l3.distinct\n        l4.sort", "        val common\
    \ = mutable.Set[Long]()\n        l1.foreach { x => common.add(x) }\n        l2.foreach\
    \ { x => common.add(x) }\n        common.filter(_ != l1.head).filter(_ != l2.head).toList",
  "        val l3 = l1 ++ l2\n        val l4 = l3 groupBy { x => x } map { case (k,\
    \ v) => k }\n        l4.toList", "        val l3 = l1 ++ l2\n        val l4 =\
    \ l3.distinct\n        l4.sort", "        val l3 = l1.toSet intersect l2\n   \
    \     l3.toList", "        val set1 = l1.toSet\n        val set2 = l2.toSet\n\
    \        val common = set1 intersect set2\n        common.sorted", "        val\
    \ l3 = l1.toSet intersect l2.toSet\n        l3.toList", "        val common =\
    \ mutable.Set[Long]()\n        l1.foreach { x => if (common.add(x)) l2.remove(x)\
    \ }\n        l2.toList", "        val l3 = l1 ++ l2\n        val l4 = l3.distinct\n\
    \        l4.sort", "        val l3 = l1 ++ l2\n        val l4 = l3.distinct\n\
    \        l4.sort", "        val l3 = l1 ++ l2\n        val l4 = l3.distinct\n\
    \        l4.sort", "        val l3 = l1.toSet intersect l2\n        l3.toList",
  "        val common = mutable.Set[Long]()\n        l1.foreach { x =>\n         \
    \   if (l2.contains(x)) {\n                common += x\n            }\n      \
    \  }\n        common.sorted", "        val set1 = l1.toSet\n        val set2 =\
    \ l2.toSet\n        val common = set1 intersect set2\n        common toList",
  "        val l3 = l1.toSet intersect l2\n        l3.toList", "        val l3 = l1\
    \ ++ l2\n        val l4 = l3.distinct\n        l4.sort", "        val set1 = new\
    \ mutable.HashSet[Long]()\n        val set2 = new mutable.HashSet[Long]()\n  \
    \      l1.foreach(x => set1.add(x))\n        l2.foreach(x => set2.add(x))\n  \
    \      set1.intersect(set2).toList"]
stop_tokens:
- "\n    }\n"
