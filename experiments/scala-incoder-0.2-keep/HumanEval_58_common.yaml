name: HumanEval_58_common
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return sorted unique common elements for two lists.\n    // >>> common([1,\
  \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    // [1, 5, 653]\n    // >>>\
  \ common([5, 3, 2, 8], [3, 2])\n    // [2, 3]\n    def common(l1 : List[Long], l2\
  \ : List[Long]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
  \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
  \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
  \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
  \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
  \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
  \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
  \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
  \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n}\n"
completions: ["        val l3 = l1 ++ l2\n        val l4 = l3.distinct\n        l4.sort",
  "        val common = mutable.Set[Long]()\n        l1.foreach { x => if (l2.contains(x))\
    \ common += x }\n        common.sortWith((x, y) => x < y)", "        val l3 =\
    \ l1 ++ l2\n        val l4 = l3.distinct\n        l4.sort", "        val l3 =\
    \ l1 ++ l2\n        val l4 = l3.distinct\n        l4.sort", "        val common\
    \ = mutable.Set[Long]()\n        l1.foreach { x => common.add(x) }\n        l2.foreach\
    \ { x => common.add(x) }\n        common.filter(_ != l1.head).filter(_ != l2.head).toList",
  "        val l3 = l1 ++ l2\n        val l4 = l3 groupBy { x => x } map { case (k,\
    \ v) => k }\n        l4.toList", "        val l3 = l1 ++ l2\n        val l4 =\
    \ l3.distinct\n        l4.sort", "        val l3 = l1.toSet intersect l2\n   \
    \     l3.toList", "        val set1 = l1.toSet\n        val set2 = l2.toSet\n\
    \        val common = set1 intersect set2\n        common.sorted", "        val\
    \ l3 = l1.toSet intersect l2.toSet\n        l3.toList", "        val common =\
    \ mutable.Set[Long]()\n        l1.foreach { x => if (common.add(x)) l2.remove(x)\
    \ }\n        l2.toList", "        val l3 = l1 ++ l2\n        val l4 = l3.distinct\n\
    \        l4.sort", "        val l3 = l1 ++ l2\n        val l4 = l3.distinct\n\
    \        l4.sort", "        val l3 = l1 ++ l2\n        val l4 = l3.distinct\n\
    \        l4.sort", "        val l3 = l1.toSet intersect l2\n        l3.toList",
  "        val common = mutable.Set[Long]()\n        l1.foreach { x =>\n         \
    \   if (l2.contains(x)) {\n                common += x\n            }\n      \
    \  }\n        common.sorted", "        val set1 = l1.toSet\n        val set2 =\
    \ l2.toSet\n        val common = set1 intersect set2\n        common toList",
  "        val l3 = l1.toSet intersect l2\n        l3.toList", "        val l3 = l1\
    \ ++ l2\n        val l4 = l3.distinct\n        l4.sort", "        val set1 = new\
    \ mutable.HashSet[Long]()\n        val set2 = new mutable.HashSet[Long]()\n  \
    \      l1.foreach(x => set1.add(x))\n        l2.foreach(x => set2.add(x))\n  \
    \      set1.intersect(set2).toList", "        val l3 = l1 ++ l2\n        val l4\
    \ = l3.distinct\n        l4.sort", "        val set1 = l1.toSet\n        val set2\
    \ = l2.toSet\n        val common = set1 intersect set2\n        common.sortWith(_\
    \ < _)", "        val l3 = l1 ++ l2\n        val l4 = l3.distinct\n        l4.sort",
  "        val common = mutable.Set[Long]()\n        l1.foreach(x => common.add(x))\n\
    \        l2.foreach(x => common.add(x))\n        common.sort", "        val set1\
    \ = new mutable.HashSet[Long]()\n        val set2 = new mutable.HashSet[Long]()\n\
    \        l1.foreach(x => set1 += x)\n        l2.foreach(x => set2 += x)\n    \
    \    set1.intersect(set2).toList", "        val l3 = l1 ++ l2\n        val l4\
    \ = l3.distinct\n        l4.sort", "        val set1 = l1.toSet\n        val set2\
    \ = l2.toSet\n        val common = set1 intersect set2\n        common.sorted",
  "        val common = mutable.Set[Long]()\n        l1.foreach(x => common.add(x))\n\
    \        l2.foreach(x => common.add(x))\n        common.sortWith((x, y) => x <\
    \ y)", "        val commonSet = mutable.Set[Long]()\n        l1.foreach(x => commonSet.add(x))\n\
    \        l2.foreach(x => commonSet.add(x))\n        commonSet.filter(x => l1.contains(x)\
    \ && l2.contains(x)).toList", "        val common = mutable.Set[Long]()\n    \
    \    l1.foreach { x => common.add(x) }\n        l2.foreach { x => common.add(x)\
    \ }\n        common.filter(_ != l1.head).filter(_ != l2.head).toList", "     \
    \   val set1 = new mutable.HashSet[Long]()\n        val set2 = new mutable.HashSet[Long]()\n\
    \        l1.foreach { x => set1.add(x) }\n        l2.foreach { x => set2.add(x)\
    \ }\n        set1.intersect(set2).toList", "        val l3 = l1.intersect(l2)\n\
    \        l3.toList", "        val l3 = l1.intersect(l2)\n        l3.toList", " \
    \       val l3 = l1 ++ l2\n        val l4 = l3.distinct\n        l4.sort", " \
    \       val l3 = l1.toSet intersect l2\n        l3.toList", "        val common\
    \ = mutable.Set[Long]()\n        l1.foreach { x =>\n            if (l2.contains(x))\
    \ {\n                common += x\n            }\n        }\n        common.sorted",
  "        val l3 = l1 ++ l2\n        val l4 = l3.distinct\n        l4.sort", "  \
    \      val set1 = l1.toSet\n        val set2 = l2.toSet\n        val common =\
    \ set1 intersect set2\n        common toList", "        val l3 = l1.toSet intersect\
    \ l2\n        l3.toList", "        val common = mutable.Set[Long]()\n        l1.foreach(x\
    \ => common.add(x))\n        l2.foreach(x => common.add(x))\n        common.sort",
  "        val l1 = l1.toSet\n        val l2 = l2.toSet\n        l1 intersect l2 toList",
  "        val set1 = l1.toSet\n        val set2 = l2.toSet\n        val common =\
    \ set1 intersect set2\n        val result = common.map(x => l1.indexOf(x)).toList\n\
    \        common.foreach(x => l1.remove(x))\n        l1 ++ result", "        val\
    \ l3 = l1 ++ l2\n        val l4 = l3.distinct\n        l4.sort", "        val\
    \ l3 = l1 ++ l2\n        val l4 = l3.distinct\n        l4.sort", "        val\
    \ l3 = l1 ++ l2\n        val l4 = l3.distinct\n        l4.sort", "        val\
    \ common = mutable.Set[Long]()\n        l1.foreach { x => if (common.add(x)) l2.remove(l2.indexOf(x))\
    \ }\n        l2.toList", "        val l3 = l1 ++ l2\n        val l4 = l3.distinct\n\
    \        l4.sort", "        val l3 = l1 ++ l2\n        val l4 = l3.distinct\n\
    \        l4.sort", "        val common = mutable.Set[Long]()\n        l1.foreach(x\
    \ => common.add(x))\n        l2.foreach(x => common.add(x))\n        common.sortWith((x,\
    \ y) => x < y)", "        val l3 = l1.filterNot(l2.contains)\n        val l4 =\
    \ l2.filterNot(l1.contains)\n        l3.intersect(l4)", "        val l3 = l1 ++\
    \ l2\n        val l4 = l3.distinct\n        l4.sort", "        val set1 = l1.toSet\n\
    \        val set2 = l2.toSet\n        val common = set1 intersect set2\n     \
    \   common.map(x => l1.indexOf(x)).filter(x => l2.indexOf(x) == -1).toList", " \
    \       val set1 = l1.toSet\n        val set2 = l2.toSet\n        val common =\
    \ set1 intersect set2\n        common.sorted", "        val l3 = l1 ++ l2\n  \
    \      val l4 = l3.distinct\n        l4.sort", "        val common = mutable.Set[Long]()\n\
    \        l1.foreach(x => common.add(x))\n        l2.foreach(x => common.add(x))\n\
    \        common.sortWith(_ < _)", "        val common = mutable.Set[Long]()\n\
    \        l1.foreach { x => if (l2.contains(x)) common += x }\n        common.sorted",
  "        val l3 = l1.intersect(l2)\n        l3.toList", "        val l3 = l1 ++\
    \ l2\n        val l4 = l3.distinct\n        l4.sort", "        val l3 = l1 ++\
    \ l2\n        val l4 = l3.distinct\n        l4.sort", "        val l3 = l1.toSet\
    \ intersect l2\n        l3.toList", "        val common = mutable.Set[Long]()\n\
    \        l1.foreach(x => common.add(x))\n        l2.foreach(x => common.add(x))\n\
    \        common.filter(_ != l1.head).filter(_ != l2.head).toList", "        val\
    \ l1 = l1.toSet\n        val l2 = l2.toSet\n        val common = l1 intersect\
    \ l2\n        val unique = l1 diff l2\n        common ++ unique", "        val\
    \ l3 = l1 ++ l2\n        val l4 = l3.distinct\n        l4.sort", "        val\
    \ l3 = l1 ++ l2\n        val l4 = l3.distinct\n        l4.sort", "        val\
    \ l3 = l1 ++ l2\n        val l4 = l3.distinct\n        l4.sort", "        val\
    \ l3 = l1 ++ l2\n        val l4 = l3.distinct\n        l4.sort", "        val\
    \ l3 = l1 ++ l2\n        val l4 = l3.distinct\n        l4.sort", "        val\
    \ commonSet = mutable.Set[Long]()\n        l1.foreach { x => commonSet.add(x)\
    \ }\n        l2.foreach { x => commonSet.add(x) }\n        commonSet.filter(_\
    \ != 0).sort", "        val l3 = l1.filterNot(l2.contains)\n        val l4 = l2.filterNot(l1.contains)\n\
    \        l3.intersect(l4)", "        val set1 = l1.toSet\n        val set2 = l2.toSet\n\
    \        val common = set1 intersect set2\n        common.sortWith(_ < _)", " \
    \       val set1 = new mutable.HashSet[Long]()\n        val set2 = new mutable.HashSet[Long]()\n\
    \        l1.foreach(x => set1 += x)\n        l2.foreach(x => set2 += x)\n    \
    \    set1.intersect(set2).toList", "        val l3 = l1.toSet intersect l2\n \
    \       l3.toList", "        val common = mutable.Set[Long]()\n        for(i <-\
    \ l1 diff l2) {\n            common += i\n        }\n        common.sorted", " \
    \       val l3 = l1.toSet intersect l2\n        l3.toList", "        val common\
    \ = mutable.Set[Long]()\n        l1.foreach { x => l2.foreach { y => if (x ==\
    \ y) common.add(x) } }\n        common.sorted", "        val set1 = new mutable.HashSet[Long]()\n\
    \        val set2 = new mutable.HashSet[Long]()\n        l1.foreach(x => set1.add(x))\n\
    \        l2.foreach(x => set2.add(x))\n        set1.intersect(set2).toList", " \
    \       val common = mutable.Set[Long]()\n        l1.foreach { x => common.add(x)\
    \ }\n        l2.foreach { x => common.add(x) }\n        common.sort", "      \
    \  val common = mutable.Set[Long]()\n        l1.foreach(x => if (common.add(x))\
    \ common.remove(x))\n        l2.foreach(x => if (common.add(x)) common.remove(x))\n\
    \        common.sort", "        val l3 = l1 ++ l2\n        val l4 = l3.distinct\n\
    \        l4.sort", "        val l1 = l1.toSet\n        val l2 = l2.toSet\n   \
    \     val common = l1 intersect l2\n        val result = new mutable.ListBuffer[Long]()\n\
    \        common foreach { x => result += x }\n        result.sort", "        val\
    \ set1 = new mutable.HashSet[Long]()\n        val set2 = new mutable.HashSet[Long]()\n\
    \        l1.foreach(x => set1.add(x))\n        l2.foreach(x => set2.add(x))\n\
    \        set1.intersect(set2).toList", "        val common = mutable.Set[Long]()\n\
    \        l1.foreach(x => if (l2.contains(x)) common += x)\n        l2.foreach(x\
    \ => if (common.contains(x)) common -= x)\n        common.distinct", "       \
    \ val set1 = new mutable.HashSet[Long]()\n        val set2 = new mutable.HashSet[Long]()\n\
    \        l1.foreach(x => set1.add(x))\n        l2.foreach(x => set2.add(x))\n\
    \        set1.intersect(set2).toList", "        val l3 = l1.toSet intersect l2\n\
    \        l3.toList", "        val set1 = l1.toSet\n        val set2 = l2.toSet\n\
    \        val common = set1 intersect set2\n        common toList", "        val\
    \ common = mutable.Set[Long]()\n        l1.foreach(x => common.add(x))\n     \
    \   l2.foreach(x => common.add(x))\n        common.filter(_ != l1.head).filter(_\
    \ != l2.head).toList", "        val l3 = l1 ++ l2\n        val l4 = l3.distinct\n\
    \        l4.sort", "        val l3 = l1 ++ l2\n        val l4 = l3.distinct\n\
    \        l4.sort", "        val set1 = l1.toSet\n        val set2 = l2.toSet\n\
    \        val commonSet = set1 intersect set2\n        commonSet.map(x => l1.indexOf(x)).sortBy(x\
    \ => l1.indexOf(x)).toList", "        val set1 = new mutable.HashSet[Long]()\n\
    \        val set2 = new mutable.HashSet[Long]()\n        l1.foreach(x => set1.add(x))\n\
    \        l2.foreach(x => set2.add(x))\n        set1.intersect(set2).toList", " \
    \       val commonSet = mutable.Set[Long]()\n        l1.foreach(x => commonSet.add(x))\n\
    \        l2.foreach(x => commonSet.add(x))\n        commonSet.filter(_ != 0).sort",
  "        val l3 = l1 ++ l2\n        val l4 = l3.distinct\n        l4.sort", "  \
    \      val set1 = l1.toSet\n        val set2 = l2.toSet\n        val common =\
    \ set1 intersect set2\n        common.sortWith(_ < _)", "        val l3 = l1.intersect(l2)\n\
    \        l3.toList", "        val l3 = l1 ++ l2\n        val l4 = l3.distinct\n\
    \        l4.sort", "        val set1 = l1.toSet\n        val set2 = l2.toSet\n\
    \        val common = set1 intersect set2\n        common toList", "        val\
    \ common = mutable.Set[Long]()\n        l1.foreach { x => if (l2.contains(x))\
    \ common += x }\n        common.sorted", "        val l3 = l1.toSet intersect\
    \ l2\n        l3.toList", "        val l3 = l1 ++ l2\n        val l4 = l3.distinct\n\
    \        l4.sort", "        val common = mutable.Set[Long]()\n        l1.foreach(x\
    \ => common += x)\n        l2.foreach(x => common += x)\n        common.sort",
  "        val l3 = l1.toSet intersect l2.toSet\n        l3.toList", "        val\
    \ common = mutable.Set[Long]()\n        l1.foreach { x =>\n            if (l2.contains(x))\
    \ {\n                common += x\n            }\n        }\n        common.sorted",
  "        val l3 = l1 ++ l2\n        val l4 = l3 groupBy (_ % l3.length)\n      \
    \  l4.map(_._2.head).sort", "        val l1 = l1.toSet\n        val l2 = l2.toSet\n\
    \        l1 intersect l2", "        val l3 = l1.toSet intersect l2\n        l3.toList",
  "        val common = new mutable.HashSet[Long]()\n        l1.foreach { x => common.add(x)\
    \ }\n        l2.foreach { x => common.add(x) }\n        common.sort", "      \
    \  val set1 = l1.toSet\n        val set2 = l2.toSet\n        val common = set1\
    \ intersect set2\n        common.sorted", "        val l1 = l1.toSet\n       \
    \ val l2 = l2.toSet\n        val common = l1 intersect l2\n        l1.filterNot(common.toSet)",
  "        val l3 = l1.intersect(l2)\n        l3.toList", "        val set1 = l1.toSet\n\
    \        val set2 = l2.toSet\n        val common = set1 intersect set2\n     \
    \   common.sorted", "        val common = mutable.Set[Long]()\n        l1.foreach(x\
    \ => if (l2.contains(x)) common.add(x) else ())\n        common.sorted", "   \
    \     val l3 = l1.toSet intersect l2.toSet\n        l3.toList", "        val l3\
    \ = l1 ++ l2\n        val l4 = l3.distinct\n        l4.sort", "        val l1\
    \ = l1.toSet\n        val l2 = l2.toSet\n        l1.intersect(l2).toList", " \
    \       val l3 = l1.toSet intersect l2\n        l3.toList", "        val set1\
    \ = l1.toSet\n        val set2 = l2.toSet\n        val common = set1 intersect\
    \ set2\n        common toList", "        val l3 = l1 ++ l2\n        val l4 = l3.distinct\n\
    \        l4.sort", "        val set1 = l1.toSet\n        val set2 = l2.toSet\n\
    \        val common = set1 intersect set2\n        common.sorted", "        val\
    \ set1 = new mutable.HashSet[Long]()\n        val set2 = new mutable.HashSet[Long]()\n\
    \        l1.foreach(x => set1 += x)\n        l2.foreach(x => set2 += x)\n    \
    \    set1.intersect(set2).toList", "        val l3 = l1 ++ l2\n        val l4\
    \ = l3 groupBy (_ % l3.length)\n        l4.values.toList.sortWith(_ < _).flatMap(_.toList)",
  "        val commonSet = mutable.Set[Long]()\n        l1.foreach { x => commonSet.add(x)\
    \ }\n        l2.foreach { x => commonSet.add(x) }\n        commonSet.filter(_\
    \ != 0).sorted", "        val common = mutable.Set[Long]()\n        l1.foreach\
    \ { x => if (l2.contains(x)) common += x }\n        common.sorted", "        val\
    \ common = mutable.Set[Long]()\n        l1.foreach { x =>\n            l2.foreach\
    \ { y =>\n                if (x == y) common += x\n            }\n        }\n\
    \        common.sorted", "        val common = mutable.Set[Long]()\n        l1.foreach(x\
    \ => common.add(x))\n        l2.foreach(x => common.add(x))\n        common.sort",
  "        val l3 = l1.toSet intersect l2\n        l3.toList", "        val common\
    \ = mutable.Set[Long]()\n        l1.foreach { x => if (common.add(x)) l2.remove(x)\
    \ }\n        l2.toList", "        val common = mutable.Set[Long]()\n        l1.foreach\
    \ { x => if (common.add(x)) l2.remove(x) }\n        l2.toList", "        val l1\
    \ = l1.toSet\n        val l2 = l2.toSet\n        l1.intersect(l2).toList", " \
    \       val set1 = l1.toSet\n        val set2 = l2.toSet\n        val common =\
    \ set1 intersect set2\n        common.sorted", "        val l3 = l1 ++ l2\n  \
    \      val l4 = l3.distinct\n        l4.sort", "        val l3 = l1 ++ l2\n  \
    \      val l4 = l3.distinct\n        l4.sort", "        val set1 = new mutable.HashSet[Long]()\n\
    \        val set2 = new mutable.HashSet[Long]()\n        l1.foreach(x => set1\
    \ += x)\n        l2.foreach(x => set2 += x)\n        set1.intersect(set2).toList",
  "        val set1 = l1.toSet\n        val set2 = l2.toSet\n        val common =\
    \ set1 intersect set2\n        common.sorted", "        val l3 = l1 ++ l2\n  \
    \      val l4 = l3 groupBy (_ % l3.size)\n        l4.map(_._2.last).distinct",
  "        val set1 = new mutable.HashSet[Long]()\n        val set2 = new mutable.HashSet[Long]()\n\
    \        l1.foreach(x => set1.add(x))\n        l2.foreach(x => set2.add(x))\n\
    \        set1.intersect(set2).toList", "        val l3 = l1 ++ l2\n        val\
    \ l4 = l3.distinct\n        l4.sort", "        val set1 = l1.toSet\n        val\
    \ set2 = l2.toSet\n        val common = set1 intersect set2\n        common.sort",
  "        val set1 = l1.toSet\n        val set2 = l2.toSet\n        val common =\
    \ set1 intersect set2\n        common.sort", "        val common = mutable.Set[Long]()\n\
    \        l1.foreach(x => common += x)\n        l2.foreach(x => common += x)\n\
    \        common.sort", "        val set1 = l1.toSet\n        val set2 = l2.toSet\n\
    \        val common = set1 intersect set2\n        common toList", "        val\
    \ commonSet = mutable.Set[Long]()\n        l1.foreach(x => commonSet.add(x))\n\
    \        l2.foreach(x => commonSet.add(x))\n        commonSet.filter(x => l1.contains(x)\
    \ && l2.contains(x)).toList", "        val l3 = l1 ++ l2\n        val l4 = l3.distinct\n\
    \        l4.sort", "        val l3 = l1 ++ l2\n        val l4 = l3.distinct\n\
    \        l4.sort", "        val set1 = l1.toSet\n        val set2 = l2.toSet\n\
    \        val common = set1 intersect set2\n        common.sorted", "        val\
    \ l3 = l1 ++ l2\n        val l4 = l3.distinct\n        l4.sort", "        val\
    \ set1 = new mutable.HashSet[Long]()\n        val set2 = new mutable.HashSet[Long]()\n\
    \        l1.foreach(x => set1.add(x))\n        l2.foreach(x => set2.add(x))\n\
    \        set1.intersect(set2).toList", "        val l3 = l1 ++ l2\n        val\
    \ l4 = l3.distinct\n        l4.sort", "        val set1 = new mutable.HashSet[Long]()\n\
    \        val set2 = new mutable.HashSet[Long]()\n        l1.foreach { x => set1.add(x)\
    \ }\n        l2.foreach { x => set2.add(x) }\n        set1.intersect(set2).toList",
  "        val set1 = new mutable.HashSet[Long]()\n        val set2 = new mutable.HashSet[Long]()\n\
    \        l1.foreach(x => set1 += x)\n        l2.foreach(x => set2 += x)\n    \
    \    set1.intersect(set2).toList", "        val l3 = l1 ++ l2\n        val l4\
    \ = l3.distinct\n        l4.sort", "        val l3 = l1.toSet intersect l2.toSet\n\
    \        l3.toList", "        val set1 = new mutable.HashSet[Long]()\n       \
    \ val set2 = new mutable.HashSet[Long]()\n        l1.foreach { x => set1.add(x)\
    \ }\n        l2.foreach { x => set2.add(x) }\n        set1.intersect(set2).toList",
  "        val set1 = l1.toSet\n        val set2 = l2.toSet\n        val common =\
    \ set1 intersect set2\n        common.sorted", "        val common = mutable.Set[Long]()\n\
    \        l1.foreach { x =>\n            if (l2.contains(x)) {\n              \
    \  common += x\n            }\n        }\n        common.sorted", "        val\
    \ l3 = l1 ++ l2\n        val l4 = l3.distinct\n        l4.sort", "        val\
    \ l3 = l1 ++ l2\n        val l4 = l3.distinct\n        l4.sort", "        val\
    \ set1 = l1.toSet\n        val set2 = l2.toSet\n        val common = set1 intersect\
    \ set2\n        common toList", "        val set1 = l1.toSet\n        val set2\
    \ = l2.toSet\n        val common = set1 intersect set2\n        common.sortWith(_\
    \ < _)", "        val set1 = l1.toSet\n        val set2 = l2.toSet\n        val\
    \ common = set1 intersect set2\n        common.sorted", "        val set1 = l1.toSet\n\
    \        val set2 = l2.toSet\n        val common = set1 intersect set2\n     \
    \   common.map(x => l1.indexOf(x)).filter(x => l2.indexOf(x) == -1).toList", " \
    \       val set1 = l1.toSet\n        val set2 = l2.toSet\n        val common =\
    \ set1 intersect set2\n        val list = common.map(i => l1.indexOf(i)).toList\n\
    \        list.sortWith(_ < _)", "        val set1 = l1.toSet\n        val set2\
    \ = l2.toSet\n        val common = set1 intersect set2\n        common.sortWith(_\
    \ < _)", "        val l1 = l1.toSet\n        val l2 = l2.toSet\n        l1 intersect\
    \ l2", "        val l3 = l1.intersect(l2)\n        l3.toList.sortWith(_ < _)",
  "        val l3 = l1 ++ l2\n        val l4 = l3.distinct\n        l4.sort", "  \
    \      val l3 = l1 ++ l2\n        val l4 = l3 groupBy { x => x }\n        l4.values.toList.sortBy(_._1).distinct",
  "        val commonSet = mutable.Set[Long]()\n        l1.foreach { x =>\n      \
    \      if (commonSet.contains(x)) return\n            commonSet.add(x)\n     \
    \   }\n        l2.foreach { x =>\n            if (commonSet.contains(x)) return\n\
    \            commonSet.add(x)\n        }\n        commonSet.sort", "        val\
    \ set1 = new mutable.HashSet[Long]()\n        val set2 = new mutable.HashSet[Long]()\n\
    \        l1.foreach(x => set1.add(x))\n        l2.foreach(x => set2.add(x))\n\
    \        set1.intersect(set2).toList", "        val l3 = l1.intersect(l2)\n  \
    \      val l4 = l3.filter(_ != l1.head).filter(_ != l2.head).filter(_ != l3.head)\n\
    \        l4.toList", "        val l3 = l1 ++ l2\n        val l4 = l3 filter (x\
    \ => l3.contains(x))\n        val l5 = l4 filter (x => l4.contains(x))\n     \
    \   l5", "        val l3 = l1 ++ l2\n        val l4 = l3.distinct\n        l4.sort",
  "        val commonSet = mutable.Set[Long]()\n        l1.foreach { x => commonSet.add(x)\
    \ }\n        l2.foreach { x => commonSet.add(x) }\n        commonSet.filter(_\
    \ != 0).sorted", "        val l3 = l1 ++ l2\n        val l4 = l3 groupBy { x =>\
    \ x }\n        l4.map(_._2).toList", "        val l1 = l1.toSet\n        val l2\
    \ = l2.toSet\n        l1.intersect(l2).toList", "        val l3 = l1 ++ l2\n \
    \       val l4 = l3.distinct\n        l4.sort", "        val l3 = l1.toSet intersect\
    \ l2\n        l3.toList", "        val set1 = l1.toSet\n        val set2 = l2.toSet\n\
    \        val common = set1 intersect set2\n        common toList", "        val\
    \ common = mutable.Set[Long]()\n        l1.foreach { x =>\n            if (l2.contains(x))\
    \ {\n                common += x\n            }\n        }\n        common.sortWith(_\
    \ < _)", "        val commonSet = mutable.Set[Long]()\n        l1.foreach { x\
    \ => commonSet.add(x) }\n        l2.foreach { x => commonSet.add(x) }\n      \
    \  commonSet.filter(_ != 0).sorted", "        val set1 = new mutable.HashSet[Long]()\n\
    \        val set2 = new mutable.HashSet[Long]()\n        l1.foreach(x => set1.add(x))\n\
    \        l2.foreach(x => set2.add(x))\n        set1.intersect(set2).toList", " \
    \       val common = mutable.Set[Long]()\n        l1.foreach { x => if (common.add(x))\
    \ l2.remove(x) }\n        l2.toList", "        val set1 = l1.toSet\n        val\
    \ set2 = l2.toSet\n        val common = set1 intersect set2\n        common.sorted",
  "        val l3 = l1 ++ l2\n        val l4 = l3.distinct\n        l4.sort", "  \
    \      val set1 = l1.toSet\n        val set2 = l2.toSet\n        val common =\
    \ set1 intersect set2\n        common.sortWith(_ < _)", "        val l3 = l1.toSet\
    \ intersect l2\n        l3.toList", "        val l3 = l1.toSet intersect l2\n\
    \        l3.toList", "        val common = mutable.Set[Long]()\n        val l3\
    \ = l1.toSet ++ l2.toSet\n        l3.foreach { x => common += x }\n        common.sortWith(_\
    \ < _)", "        val set1 = l1.toSet\n        val set2 = l2.toSet\n        val\
    \ commonSet = set1 intersect set2\n        commonSet.map(l => l).toList", "  \
    \      val set1 = l1.toSet\n        val set2 = l2.toSet\n        val common =\
    \ set1 intersect set2\n        common.sort", "        val set1 = l1.toSet\n  \
    \      val set2 = l2.toSet\n        val common = set1 intersect set2\n       \
    \ common toList", "        val set1 = l1.toSet\n        val set2 = l2.toSet\n\
    \        val common = set1 intersect set2\n        common.sortWith(_ < _)", " \
    \       val set1 = l1.toSet\n        val set2 = l2.toSet\n        val commonSet\
    \ = set1 intersect set2\n        commonSet.map(l1.indexOf(_)).filter(l2.indexOf(_)\
    \ != -1)", "        val common = mutable.Set[Long]()\n        l1.foreach(x =>\
    \ common.add(x))\n        l2.foreach(x => common.add(x))\n        common.sort",
  "        val set1 = new mutable.HashSet[Long]()\n        val set2 = new mutable.HashSet[Long]()\n\
    \        l1.foreach { x => set1.add(x) }\n        l2.foreach { x => set2.add(x)\
    \ }\n        set1.intersect(set2).toList", "        val l3 = l1 ++ l2\n      \
    \  val l4 = l3.distinct\n        l4.sort", "        val l3 = l1.toSet intersect\
    \ l2\n        l3.toList", "        val set1 = l1.toSet\n        val set2 = l2.toSet\n\
    \        val common = set1 intersect set2\n        common toList", "        val\
    \ common = mutable.Set[Long]()\n        l1.foreach(x => common.add(x))\n     \
    \   l2.foreach(x => common.add(x))\n        common.sort", "        val l3 = l1\
    \ ++ l2\n        val l4 = l3.distinct\n        l4.sort", "        val common =\
    \ mutable.Set[Long]()\n        l1.foreach { x => common.add(x) }\n        l2.foreach\
    \ { x => common.add(x) }\n        common.filter(_ != l1.head).sortWith(_ < _).distinct"]
stop_tokens:
- "\n    }\n"
