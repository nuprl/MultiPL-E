language: scala
name: HumanEval_152_compare
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.map(x => if (x == 0) 0 else x)\n        val guessScores\
    \ = guess.map(x => if (x == 0) 0 else x)\n        val gameScore = gameScores.sum\n\
    \        val guessScore = guessScores.sum\n        val diffs = guessScores.zip(gameScores).map(x\
    \ => if (x._1 == x._2) 0 else abs(x._1 - x._2))\n        diffs.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797976
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameLen = game.length\n        val guessLen = guess.length\n       \
    \ val result = new Array[Long](guessLen)\n        var i = 0\n        while (i\
    \ < guessLen) {\n            val gameScore = game(i)\n            val guessScore\
    \ = guess(i)\n            val diff = guessScore - gameScore\n            result(i)\
    \ = if (gameScore == guessScore) 0 else Math.abs(diff)\n            i += 1\n \
    \       }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp484z42or.scala:26:8\
    \ ---------------------\e[0m\e[0m\n\e[31m26 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797972
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val guesses = guess.toSet\n        val scores = game.toSet\n        val\
    \ results = new mutable.ArrayBuffer[Long]()\n        val scoreDiffs = new mutable.ArrayBuffer[Long]()\n\
    \        val guessesDiffs = new mutable.ArrayBuffer[Long]()\n        val guessesDiffsCount\
    \ = new mutable.ArrayBuffer[Long]()\n        val guessesCount = new mutable.ArrayBuffer[Long]()\n\
    \        val guessesCountCount = new mutable.ArrayBuffer[Long]()\n        val\
    \ guessesCountCountCount = new mutable.ArrayBuffer[Long]()\n        val guessesCountCountCountCount\
    \ = new mutable.ArrayBuffer[Long]()\n        val guessesCountCountCountCountCount\
    \ = new mutable.ArrayBuffer[Long]()\n        val guessesCountCountCountCountCountCount\
    \ = new mutable.ArrayBuffer[Long]()\n        val guessesCountCountCountCountCountCountCount\
    \ = new mutable.ArrayBuffer[Long]()\n        val guessesCountCountCountCountCountCountCountCount\
    \ = new mutable.ArrayBuffer[Long]()\n        val guessesCountCountCountCountCountCountCountCountCount\
    \ = new mutable.ArrayBuffer[Long]()\n        val guessesCountCountCountCountCountCountCountCountCountCount\
    \ = new mutable.ArrayBuffer[Long]()\n        val guessesCountCountCountCountCountCountCountCountCountCountCount\
    \ = new mutable.ArrayBuffer[Long]()\n        val guessesCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = new mutable.ArrayBuffer[Long]()\n        val guessesCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = new mutable.ArrayBuffer[Long]()\n        val guessesCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = new mutable.ArrayBuffer[Long]()\n        val guessesCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = new mutable.ArrayBuffer[Long]()\n        val guessesCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = new mutable.ArrayBuffer[Long]()\n        val guessesCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = new mutable.ArrayBuffer[Long]()\n        val guessesCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = new mutable.ArrayBuffer[Long]()\n        val guessesCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = new mutable.ArrayBuffer[Long]()\n        val guessesCountCountCountCountCountCountCountCountCountCountCount\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpe0s0yny0.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe0s0yny0.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessesCountCountCountCountCountCountCountCountCountCountCountCountCount\e\
    [0m = \e[33mnew\e[0m mutable.ArrayBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mguessesCountCountCountCountCountCountCountCountCountCountCountCountCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpe0s0yny0.scala:37:12 ---------------------------\e[0m\e[0m\n\e\
    [31m37 |\e[0m        \e[33mval\e[0m \e[36mguessesCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\e\
    [0m = \e[33mnew\e[0m mutable.ArrayBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  guessesCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpe0s0yny0.scala:38:12 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mguessesCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\e\
    [0m = \e[33mnew\e[0m mutable.ArrayBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659797972
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val guesses = gues\n        val scores = game\n        val guessesCount\
    \ = guesses.size\n        val scoresCount = scores.size\n        val result =\
    \ new Array[Long](guessesCount)\n        val guessesRemaining = guessesCount -\
    \ 1\n        val scoresRemaining = scoresCount - 1\n        val guessesRemainingInScores\
    \ = guessesRemaining / scoresCount\n        val scoresRemainingInGuesses = scoresRemaining\
    \ / guessesCount\n        val guessesRemainingInGuessesRemaining = guessesRemainingInGuesses\
    \ * scoresRemainingInGuesses\n        val scoresRemainingInGuessesRemainingInScores\
    \ = scoresRemainingInGuessesRemaining / scoresCount\n        val guessesRemainingInGuessesRemainingInScoresRemaining\
    \ = guessesRemainingInGuessesRemainingInScores * scoresRemainingInGuessesRemainingInScores\n\
    \        val guessesRemainingInGuessesRemainingInScoresRemainingInGuesses = guessesRemainingInGuessesRemainingInScoresRemaining\
    \ / guessesCount\n        val scoresRemainingInGuessesRemainingInScoresRemainingInGuessesRemaining\
    \ = scoresRemainingInGuessesRemainingInScoresRemainingInGuesses * guessesRemainingInGuessesRemainingInScoresRemainingInGuesses\n\
    \        val guessesRemainingInGuessesRemainingInScoresRemainingInGuessesRemainingInScores\
    \ = guessesRemainingInGuessesRemainingInScoresRemainingInGuessesRemaining * scoresRemainingInGuessesRemainingInScoresRemainingInGuessesRemaining\n\
    \        val guessesRemainingInGuessesRemainingInScoresRemainingInGuessesRemainingInScoresRemainingInGuesses\
    \ = guessesRemainingInGuessesRemainingInScoresRemainingInGuessesRemainingInScoresRemaining\
    \ * guessesRemainingInGuessesRemainingInScoresRemainingInGuessesRemainingInScoresRemainingInGuesses\n\
    \        val guessesRemainingInGuessesRemainingInScoresRemainingInGuessesRemainingInScoresRemainingInGuessesRemainingInScores\
    \ = guessesRemainingInGuessesRemainingInScoresRemainingInG\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsy3s4k4v.scala:15:22 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mguesses\e[0m = gues\n\e\
    [31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m          \
    \            Not found: gues\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpsy3s4k4v.scala:24:49 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mval\e[0m \e[36mguessesRemainingInGuessesRemaining\e[0m = guessesRemainingInGuesses\
    \ * scoresRemainingInGuesses\n\e[31m\e[31m   |\e[0m                          \
    \                       ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                              Not found: guessesRemainingInGuesses\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsy3s4k4v.scala:25:56 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mscoresRemainingInGuessesRemainingInScores\e\
    [0m = scoresRemainingInGuessesRemaining / scoresCount\n\e[31m\e[31m   |\e[0m \
    \                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: scoresRemainingInGuessesRemaining\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsy3s4k4v.scala:26:66\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mguessesRemainingInGuessesRemainingInScoresRemaining\e[0m = guessesRemainingInGuessesRemainingInScores\
    \ * scoresRemainingInGuessesRemainingInScores\n\e[31m\e[31m   |\e[0m         \
    \                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Not found: guessesRemainingInGuessesRemainingInScores\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsy3s4k4v.scala:28:83\
    \ ------------------------\e["
  stdout: ''
  timestamp: 1659797971
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameSize = game.size\n        val guessSize = guess.size\n        val\
    \ result = new Array[Long](guessSize)\n        val gameScores = game.zipWithIndex.map{case\
    \ (score, index) => score}.toList\n        val guessScores = guess.zipWithIndex.map{case\
    \ (score, index) => score}.toList\n        val gameScoreMap = gameScores.groupBy(_\
    \ % gameSize)\n        val guessScoreMap = guessScores.groupBy(_ % guessSize)\n\
    \        guessScoreMap.foreach {\n            case (guessIndex, guessScores) =>\n\
    \                val guessScore = guessScores.head\n                val gameScore\
    \ = gameScores(guessIndex % gameSize)\n                val gameScoreDiff = gameScore\
    \ - guessScore\n                val guessScoreDiff = guessScore - gameScore\n\
    \                result(guessIndex) = gameScoreDiff\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf20mut45.scala:25:43\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m                \e[33mval\e[0m\
    \ \e[36mgameScore\e[0m = gameScores(guessIndex % gameSize)\n\e[31m\e[31m   |\e\
    [0m                                           ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                           Found:    Long\n\e[31m  \
    \ |\e[0m                                           Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf20mut45.scala:28:23 --------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                result(guessIndex) = gameScoreDiff\n\e\
    [31m\e[31m   |\e[0m                       ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                    Found:    (guessIndex : Long)\n\e[31m   |\e[0m          \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpf20mut45.scala:30:8 ---------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Found:    (result : Array[Long])\n\e[31m   |\e[0m        Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659797975
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameLen = game.length\n        val guessLen = guess.length\n       \
    \ val result = new Array[Long](guessLen)\n        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreKeys = gameScoreMap.keySet\n\
    \        val guessScoreKeys = guessScoreMap.keySet\n        val gameScoreKeySet\
    \ = gameScoreKeys.toSet\n        val guessScoreKeySet = guessScoreKeys.toSet\n\
    \        val gameScoreKeySetSize = gameScoreKeySet.size\n        val guessScoreKeySetSize\
    \ = guessScoreKeySet.size\n        val gameScoreKeySetSize = gameScoreKeySet.size\n\
    \        val guessScoreKeySetSize = guessScoreKeySet.size\n        val gameScoreKeySetSize\
    \ = gameScoreKeySet.size\n        val guessScoreKeySetSize = guessScoreKeySet.size\n\
    \        val gameScoreKeySetSize = gameScoreKeySet.size\n        val guessScoreKeySetSize\
    \ = guessScoreKeySet.size\n        val gameScoreKeySetSize = gameScoreKeySet.size\n\
    \        val guessScoreKeySetSize = guessScoreKeySet.size\n        val gameScoreKeySetSize\
    \ = gameScoreKeySet.size\n        val guessScoreKeySetSize = guessScoreKeySet.size\n\
    \        val gameScoreKeySetSize = gameScoreKeySet.size\n        val guessScoreKeySetSize\
    \ = guessScoreKeySet.size\n        val gameScoreKeySetSize = gameScoreKeySet.size\n\
    \        val guessScoreKeySetSize = guessScoreKeySet.size\n        val gameScoreKeySetSize\
    \ = gameScoreKeySet.size\n        val guessScoreKeySetSize = guessScoreKeySet.size\n\
    \        val gameScoreKeySetSize = gameScoreKeySet.size\n        val guessScoreKeySetSize\
    \ = guessScoreKeySet.size\n        val gameScoreKeySetSize = gameScoreKeySet.size\n\
    \        val guessScoreKeySetSize = guessScoreKeySet.size\n        val gameScoreKeySetSize\
    \ = gameScoreKeySet.size\n        val guessScoreKeySetSize = guessScoreKeySet.size\n\
    \        val gameScoreKeySetSize = gameScoreKeySet.size\n        val guessScoreKeySetSize\
    \ = guessScoreKeySet.size\n        val gameScoreKeySetSize = gameScoreKeySet.size\n\
    \        val guessScoreKeySetSize = guessScoreKeySet.size\n        val gameScoreKeySet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpx843fy1a.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpx843fy1a.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreKeySetSize\e[0m = gameScoreKeySet.size\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mgameScoreKeySetSize\
    \ is already defined as \e[33mvalue\e[0m \e[35mgameScoreKeySetSize\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpx843fy1a.scala:29:12 ---------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mval\e[0m \e[36mguessScoreKeySetSize\e[0m = guessScoreKeySet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreKeySetSize is already defined as \e[33mvalue\e[0m\
    \ \e[35mguessScoreKeySetSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpx843fy1a.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mgameScoreKeySetSize\e[0m\
    \ = gameScoreKeySet.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreKeySetSize is already defined as \e[33mvalue\e[0m\
    \ \e[35mgameScoreKeySetSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpx843fy1a.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mguessScoreKeySetSize\e[0m\
    \ = guessScoreKeySet.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreKeySetSize is already defined as \e[33mvalue\e[0m\
    \ \e[35mguessScoreKeySetSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded"
  stdout: ''
  timestamp: 1659797976
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameLen = game.length\n        val guessLen = guess.length\n       \
    \ val result = new Array[Long](guessLen)\n        var i = 0\n        var j = 0\n\
    \        var k = 0\n        var gameScore = 0\n        var guessScore = 0\n  \
    \      var diff = 0\n        while(i < guessLen && j < gameLen) {\n          \
    \  gameScore = game(i)\n            guessScore = guess(j)\n            diff =\
    \ guessScore - gameScore\n            if(diff < 0) {\n                diff = -diff\n\
    \            }\n            result(k) = diff\n            i += 1\n           \
    \ j += 1\n            k += 1\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb8tq02a5.scala:25:28\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m            gameScore = game(i)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                     Found:    Long\n\e[31m   |\e[0m                        Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb8tq02a5.scala:26:30\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m            guessScore = guess(j)\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                        Found:    Long\n\e[31m   |\e[0m                     \
    \    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb8tq02a5.scala:36:8\
    \ ---------------------\e[0m\e[0m\n\e[31m36 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659797974
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.zipWithIndex.map(x => (x._2, x._1)).toMap\n      \
    \  val guessScores = guess.zipWithIndex.map(x => (x._2, x._1)).toMap\n       \
    \ val guessesWithScores = guess.zip(game).toMap\n        val guessesWithScore\
    \ = guessesWithScores.mapValues(x => x._2 - x._1)\n        val guessesWithScores\
    \ = guessesWithScores.mapValues(x => x._2 - x._1)\n        val guessesWithScore\
    \ = guessesWithScores.mapValues(x => x._2 - x._1)\n        val guessesWithScore\
    \ = guessesWithScores.mapValues(x => x._2 - x._1)\n        val guessesWithScore\
    \ = guessesWithScores.mapValues(x => x._2 - x._1)\n        val guessesWithScore\
    \ = guessesWithScores.mapValues(x => x._2 - x._1)\n        val guessesWithScore\
    \ = guessesWithScores.mapValues(x => x._2 - x._1)\n        val guessesWithScore\
    \ = guessesWithScores.mapValues(x => x._2 - x._1)\n        val guessesWithScore\
    \ = guessesWithScores.mapValues(x => x._2 - x._1)\n        val guessesWithScore\
    \ = guessesWithScores.mapValues(x => x._2 - x._1)\n        val guessesWithScore\
    \ = guessesWithScores.mapValues(x => x._2 - x._1)\n        val guessesWithScore\
    \ = guessesWithScores.mapValues(x => x._2 - x._1)\n        val guessesWithScore\
    \ = guessesWithScores.mapValues(x => x._2 - x._1)\n        val guessesWithScore\
    \ = guessesWithScores.mapValues(x => x._2 - x._1)\n        val guessesWithScore\
    \ = guessesWithScores.mapValues(x => x._2 - x._1)\n        val guessesWithScore\
    \ = guessesWithScores.mapValues(x => x._2 - x._1)\n        val guessesWithScore\
    \ = guessesWithScores.mapValues(x => x._2 - x._1)\n        val guessesWithScore\
    \ = guessesWithScores.mapValues(x => x._2 - x._1)\n        val guessesWithScore\
    \ = guessesWithScores.mapValues(x => x._2 - x._1)\n        val guessesWithScore\
    \ = guessesWithScores.mapValues(x => \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpz82ruwkd.scala:37:63 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mguessesWithScore\e[0m =\
    \ guessesWithScores.mapValues(\e[36mx\e[0m => \n\e[31m\e[31m   |\e[0m        \
    \                                                       ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpz82ruwkd.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessesWithScores\e[0m = guessesWithScores.mapValues(\e[36mx\e[0m => x._2\
    \ - x._1)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesWithScores is already defined as \e[33mvalue\e[0m \e\
    [35mguessesWithScores\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpz82ruwkd.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mguessesWithScore\e[0m =\
    \ guessesWithScores.mapValues(\e[36mx\e[0m => x._2 - x._1)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesWithScore is already defined as \e[33mvalue\e[0m \e\
    [35mguessesWithScore\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpz82ruwkd.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mguessesWithScore\e[0m =\
    \ guessesWithScores.mapValues(\e[36mx\e[0m => x._2 - x._1)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesWithScore is already defined as \e[33mvalue\e[0m \e\
    [35mguessesWithScore\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel defi"
  stdout: ''
  timestamp: 1659797975
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameLength = game.size\n        val guessLength = guess.size\n     \
    \   val gameScores = game.zip(guess).map { case (gameScore, guessScore) => gameScore\
    \ - guessScore }\n        val guessScores = guess.zip(game).map { case (guessScore,\
    \ gameScore) => guessScore - gameScore }\n        val gameScoreSum = gameScores.sum\n\
    \        val guessScoreSum = guessScores.sum\n        val gameScoreDiff = gameScoreSum\
    \ - guessScoreSum\n        val guessScoreDiff = guessScoreSum - gameScoreSum\n\
    \        val gameScoreDiffAbs = Math.abs(gameScoreDiff)\n        val guessScoreDiffAbs\
    \ = Math.abs(guessScoreDiff)\n        val gameScoreDiffAbsArray = Array.ofDim[Long](guessLength)\n\
    \        val guessScoreDiffAbsArray = Array.ofDim[Long](gameLength)\n        gameScoreDiffAbsArray.fill(gameScoreDiffAbs)\n\
    \        guessScoreDiffAbsArray.fill(guessScoreDiffAbs)\n        gameScoreDiffAbsArray.zip(guessScoreDiffAbsArray).map\
    \ { case (gameScoreDiffAbs, guessScoreDiffAbs) => guessScoreDiffAbs - gameScoreDiffAbs\
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8tbmg90r.scala:27:30 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        gameScoreDiffAbsArray.fill(gameScoreDiffAbs)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        value fill is not a member of Array[Long]\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp8tbmg90r.scala:28:31 ------------------------\e[0m\e[0m\n\
    \e[31m28 |\e[0m        guessScoreDiffAbsArray.fill(guessScoreDiffAbs)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \ value fill is not a member of Array[Long]\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp8tbmg90r.scala:29:8 ---------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        gameScoreDiffAbsArray.zip(guessScoreDiffAbsArray).map { \e[33mcase\e\
    [0m (gameScoreDiffAbs, guessScoreDiffAbs) => guessScoreDiffAbs - gameScoreDiffAbs\
    \ }\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mArray\e[0m[Long]\n\e[31m   |\e\
    [0m        Required: \e[1m\e[32mList\e[0m[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659797975
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameLength = game.length\n        val guessLength = guess.length\n \
    \       val result = new Array[Long](guessLength)\n        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreKeys = gameScoreMap.keys\n\
    \        val guessScoreKeys = guessScoreMap.keys\n        val gameScoreValues\
    \ = gameScoreMap.values.toList\n        val guessScoreValues = guessScoreMap.values.toList\n\
    \        val gameScoreKeySet = gameScoreKeys.toSet\n        val guessScoreKeySet\
    \ = guessScoreKeys.toSet\n        val gameScoreValueSet = gameScoreValues.toSet\n\
    \        val guessScoreValueSet = guessScoreValues.toSet\n        val gameScoreKeySetSize\
    \ = gameScoreKeySet.size\n        val guessScoreKeySetSize = guessScoreKeySet.size\n\
    \        val gameScoreValueSetSize = gameScoreValueSet.size\n        val guessScoreValueSetSize\
    \ = guessScoreValueSet.size\n        val gameScoreKeySetIterator = gameScoreKeySet.iterator\n\
    \        val guessScoreKeySetIterator = guessScoreKeySet.iterator\n        val\
    \ gameScoreValueSetIterator = gameScoreValueSet.iterator\n        val guessScoreValueSetIterator\
    \ = guessScoreValueSet.iterator\n        val gameScoreKeySetIteratorSize = gameScoreKeySetIterator.size\n\
    \        val guessScoreKeySetIteratorSize = guessScoreKeySetIterator.size\n  \
    \      val gameScoreValueSetIteratorSize = gameScoreValueSetIterator.size\n  \
    \      val guessScoreValueSetIteratorSize = guessScoreValueSetIterator.size\n\
    \        val gameScoreKeySetIteratorIterator = gameScoreKeySetIterator.iterator\n\
    \        val guessScoreKeySetIteratorIterator = guessScoreKeySetIterator.iterator\n\
    \        val gameScoreValueSetIteratorIterator = gameScoreValueSetIterator.iterator\n\
    \        val guessScoreValueSetIteratorIterator = guessScoreValueSetIterator.iterator\n\
    \        val gameScoreKeySetIteratorIteratorSize = gameScoreKeySetIteratorIterator.size\n\
    \        val guessScoreKeySetIteratorIteratorSize = guessScoreKeySetIteratorIterator.size\n\
    \        val gameScoreValueSetIteratorIteratorSize = gameScoreValueSetIteratorIterator.size\n\
    \        val guessScoreValueSetIteratorIteratorSize = guessScoreValueSetIteratorIterator.size\n\
    \        val gameScoreKeySet\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong,\
    \ -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpu7p6hy06.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpu7p6hy06.scala:20:43\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.toMap\n\e[31m\e[31m   |\e\
    [0m                                           ^\e[0m\n\e[31m   |\e[0m        \
    \                               Cannot prove that Long <:< (K, V)\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m                                       where:    K is a type\
    \ variable\n\e[31m   |\e[0m                                                 V\
    \ is a type variable\n\e[31m   |\e[0m                                       .\n\
    \e[31m\e[31m-- Error: /tmp/tmpu7p6hy06.scala:21:45 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mguessScoreMap\e[0m = guessScores.toMap\n\
    \e[31m\e[31m   |\e[0m                                             ^\e[0m\n\e[31m\
    \   |\e[0m                                       Cannot prove that Long <:< (K,\
    \ V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                       where:\
    \    K is a type variable\n\e[31m   |\e[0m                                   \
    \              V is a type variable\n\e[31m   |\e[0m                         \
    \              .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu7p6hy06.scala:51:5\
    \ ---------------------\e[0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659797975
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameLen = game.length\n        val guessLen = guess.length\n       \
    \ val result = new Array[Long](guessLen)\n        val gameScores = game.zipWithIndex.filter(_._1\
    \ == 0)\n        val guessScores = guess.zipWithIndex.filter(_._1 == 0)\n    \
    \    gameScores.foreach { case (score, index) =>\n            val guessIndex =\
    \ guessScores.indexWhere(_._2 == index)\n            val diff = abs(guessScores._2\
    \ - score)\n            result(guessIndex) = diff\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb8rs5jiv.scala:22:39 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mdiff\e[0m = abs(guessScores._2\
    \ - score)\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           value _2 is not a member of List[(Long,\
    \ Int)]\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb8rs5jiv.scala:25:8\
    \ ---------------------\e[0m\e[0m\n\e[31m25 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797974
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameSet = game.distinct\n        val guessSet = guess.distinct\n   \
    \     val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSet\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpo704znnh.scala:63:4 ----------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo704znnh.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameSetSize\e[0m = gameSetSize.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameSetSize is already defined as \e[33mvalue\e[0m \e[35mgameSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpo704znnh.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mguessSetSize\e[0m = guessSetSize.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mguessSetSize is already defined as \e[33mvalue\e[0m \e[35mguessSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpo704znnh.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mgameSetSize\e[0m = gameSetSize.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameSetSize is already defined as \e[33mvalue\e[0m \e[35mgameSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpo704znnh.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mguessSetSize\e[0m = guessSetSize.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mguessSetSize is already defined as \e[33mvalue\e[0m \e[35mguessSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpo704znnh.scala:23:12 ----------"
  stdout: ''
  timestamp: 1659797973
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.zipWithIndex.map { case (score, index) => score ->\
    \ index }.toMap\n        val guessesScores = guess.zipWithIndex.map { case (score,\
    \ index) => score -> index }.toMap\n        val guessesWithScores = guessesScores.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessesWithIndexes\
    \ = guessesWithScores.map { case (score, index) => index -> score }.toMap\n  \
    \      val guessesWithIndexesSorted = guessesWithIndexes.toSeq.sortBy(_._1).reverse\n\
    \        val guessesWithIndexesSortedWithScores = guessesWithIndexesSorted.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessesWithIndexesSortedWithScoreAndScores\
    \ = guessesWithIndexesSortedWithScores.map { case (score, index) => index -> score\
    \ -> gameScores(index) }.toMap\n        val guessesWithIndexesSortedWithScoreAndScoreAndScores\
    \ = guessesWithIndexesSortedWithScoreAndScores.map { case (score, index, score)\
    \ => index -> score -> score }.toMap\n        val guessesWithIndexesSortedWithScoreAndScoreAndScoreAndScores\
    \ = guessesWithIndexesSortedWithScoreAndScoreAndScoreAndScores.map { case (score,\
    \ index, score, score) => index -> score -> score -> score }.toMap\n        val\
    \ guessesWithIndexesSortedWithScoreAndScoreAndScoreAndScoreAndScores = guessesWithIndexesSortedWithScoreAndScoreAndScoreAndScoreAndScores.map\
    \ { case (score, index, score, score, score) => index -> score -> score -> score\
    \ -> score }.toMap\n        val guessesWithIndexesSortedWithScoreAndScoreAndScoreAndScoreAndScoreAndScores\
    \ = guessesWithIndexesSortedWithScoreAndScoreAndScoreAndScoreAndScoreAndScores.map\
    \ { case (score, index, score, score, score, score) => index -> score -> score\
    \ -> score -> score -> score }.toMap\n        val guessesWithIndexesSortedWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScores\
    \ = guessesWithIndexesSortedWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScores.map\
    \ { case (score, index, score, score, score, score, score) => index -> score ->\
    \ score -> score -> score -> score -> score }.toMap\n        val guessesWithIndexesSortedWithScoreAndScoreAndScoreAndScoreAndScoreAnd\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprhyvp8fx.scala:28:4 ----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E005] Naming Error: /tmp/tmprhyvp8fx.scala:22:134\
    \ --------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessesWithIndexesSortedWithScoreAndScoreAndScores\e[0m = guessesWithIndexesSortedWithScoreAndScores.map\
    \ { \e[33mcase\e[0m (score, index, score) => index -> score -> score }.toMap\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \  ^^^^^\e[0m\n\e[31m   |\e[0m                                       duplicate\
    \ pattern variable: score\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmprhyvp8fx.scala:23:73 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mguessesWithIndexesSortedWithScoreAndScoreAndScoreAndScores\e\
    [0m = guessesWithIndexesSortedWithScoreAndScoreAndScoreAndScores.map { \e[33mcase\e\
    [0m (score, index, score, score) => index -> score -> score -> score }.toMap\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                 ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mguessesWithIndexesSortedWithScoreAndScoreAndScoreAndScores\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmprhyvp8fx.scala:24:81\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessesWithIndexesSortedWithScoreAndScoreAndScoreAndScoreAndScores\e[0m\
    \ = guessesWithIndexesSortedWithScoreAndScoreAndScoreAndScoreAndScores.map { \e\
    [33mcase\e[0m (score, index, score, score, score) => index -> score -> score ->\
    \ score -> score }.toMap\n\e[31m\e[31m   |\e[0m                              \
    \                                                   ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35mguessesWithInd"
  stdout: ''
  timestamp: 1659797975
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameLen = game.length\n        val guessLen = guess.length\n       \
    \ val result = new Array[Long](guessLen)\n        var i = 0\n        while (i\
    \ < guessLen) {\n            var j = 0\n            while (j < gameLen) {\n  \
    \              if (game(j) == guess(i)) {\n                    result(i) = game(j)\n\
    \                    j++\n                }\n                else {\n        \
    \            result(i) = abs(game(j) - guess(i))\n                    j++\n  \
    \              }\n            }\n            i += 1\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpz0jm0ew5.scala:24:23 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                    j++\n\e[31m\e[31m   |\e[0m      \
    \                 ^\e[0m\n\e[31m   |\e[0m                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error:\
    \ /tmp/tmpz0jm0ew5.scala:28:23 ---------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m                    j++\n\e[31m\e[31m   |\e[0m                       ^\e\
    [0m\n\e[31m   |\e[0m                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz0jm0ew5.scala:33:8\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659797971
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameLen = game.length\n        val guessLen = guess.length\n       \
    \ val result = new Array[Long](guessLen)\n        var i = 0\n        while (i\
    \ < guessLen) {\n            val gameScore = game(i)\n            val guessScore\
    \ = guess(i)\n            val diff = guessScore - gameScore\n            result(i)\
    \ = if (guessScore == gameScore) 0 else diff\n            i += 1\n        }\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkqeqlv5c.scala:26:8\
    \ ---------------------\e[0m\e[0m\n\e[31m26 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797972
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameSet = game.distinct\n        val guessSet = guess.distinct\n   \
    \     val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val result = new mutable.ArrayList[Long](guessSetSize)\n        val gameSetIterator\
    \ = gameSet.iterator\n        val guessSetIterator = guessSet.iterator\n     \
    \   val gameSetIteratorSize = gameSetIterator.size\n        val guessSetIteratorSize\
    \ = guessSetIterator.size\n        val gameSetIteratorCurrent = gameSetIterator.next\n\
    \        val guessSetIteratorCurrent = guessSetIterator.next\n        var gameSetIteratorCurrentScore\
    \ = gameSetIteratorCurrent.toLong\n        var guessSetIteratorCurrentScore =\
    \ guessSetIteratorCurrent.toLong\n        var gameSetIteratorCurrentGuess = gameSetIteratorCurrent.toLong\n\
    \        var guessSetIteratorCurrentGuess = guessSetIteratorCurrent.toLong\n \
    \       var gameSetIteratorCurrentGuessScore = gameSetIteratorCurrentGuess.toLong\n\
    \        var guessSetIteratorCurrentGuessScore = guessSetIteratorCurrentGuess.toLong\n\
    \        var gameSetIteratorCurrentGuessGuess = gameSetIteratorCurrentGuess.toLong\n\
    \        var guessSetIteratorCurrentGuessGuess = guessSetIteratorCurrentGuess.toLong\n\
    \        var gameSetIteratorCurrentGuessGuessScore = gameSetIteratorCurrentGuessGuess.toLong\n\
    \        var guessSetIteratorCurrentGuessGuessScore = guessSetIteratorCurrentGuessGuess.toLong\n\
    \        var gameSetIteratorCurrentGuessGuessGuess = gameSetIteratorCurrentGuessGuess.toLong\n\
    \        var guessSetIteratorCurrentGuessGuessGuess = guessSetIteratorCurrentGuessGuess.toLong\n\
    \        var gameSetIteratorCurrentGuessGuessGuessScore = gameSetIteratorCurrentGuessGuessGuess.toLong\n\
    \        var guessSetIteratorCurrentGuessGuessGuessScore = guessSetIteratorCurrentGuessGuessGuess.toLong\n\
    \        var gameSetIteratorCurrentGuessGuessGuessGuess = gameSetIteratorCurrentGuessGuessGuess.toLong\n\
    \        var guessSetIteratorCurrentGuessGuessGuessGuess = guessSetIteratorCurrentGuessGuessGuess.toLong\n\
    \        var gameSetIteratorCurrentGuessGuessGuessGuessScore = gameSetIteratorCurrentGuessGuessGuessGuess.toLong\n\
    \        var guessSetIteratorCurrentGuessGuessGuessGuessScore = guessSetIteratorCurrentGuessGuessGuessGuess.toLong\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxhonggcw.scala:19:25 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ArrayList[\e[35mLong\e[0m](guessSetSize)\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxhonggcw.scala:45:5\
    \ ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797972
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameSet = game.distinct\n        val guessSet = guess.distinct\n   \
    \     val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val result = new mutable.ArrayList[Long]()\n        val gameSetIterator\
    \ = gameSet.iterator\n        val guessSetIterator = guessSet.iterator\n     \
    \   val gameSetIteratorSize = gameSetIterator.size\n        val guessSetIteratorSize\
    \ = guessSetIterator.size\n        var gameSetIteratorIndex = 0\n        var guessSetIteratorIndex\
    \ = 0\n        var gameSetIteratorValue = 0\n        var guessSetIteratorValue\
    \ = 0\n        var gameSetIteratorValueDiff = 0\n        var guessSetIteratorValueDiff\
    \ = 0\n        var gameSetIteratorValueDiffAbs = 0\n        var guessSetIteratorValueDiffAbs\
    \ = 0\n        var gameSetIteratorValueDiffAbsMax = 0\n        var guessSetIteratorValueDiffAbsMax\
    \ = 0\n        var gameSetIteratorValueDiffAbsMaxIndex = 0\n        var guessSetIteratorValueDiffAbsMaxIndex\
    \ = 0\n        var gameSetIteratorValueDiffAbsMaxValue = 0\n        var guessSetIteratorValueDiffAbsMaxValue\
    \ = 0\n        var gameSetIteratorValueDiffAbsMaxValueIndex = 0\n        var guessSetIteratorValueDiffAbsMaxValueIndex\
    \ = 0\n        var gameSetIteratorValueDiffAbsMaxValueDiff = 0\n        var guessSetIteratorValueDiffAbsMaxValueDiff\
    \ = 0\n        var gameSetIteratorValueDiffAbsMaxValueDiffIndex = 0\n        var\
    \ guessSetIteratorValueDiffAbsMaxValueDiffIndex = 0\n        var gameSetIteratorValueDiffAbsMaxValueDiffAbs\
    \ = 0\n        var guessSetIteratorValueDiffAbsMaxValueDiffAbs = 0\n        var\
    \ gameSetIteratorValueDiffAbsMaxValueDiffAbsIndex = 0\n        var guessSetIteratorValueDiffAbsMaxValueDiffAbsIndex\
    \ = 0\n        var gameSetIteratorValueDiffAbsMaxValueDiffAbsValue = 0\n     \
    \   var guessSetIteratorValueDiffAbsMaxValueDiffAbsValue = 0\n        var gameSetIteratorValueDiffAbsMaxValueDiffAbsValueIndex\
    \ = 0\n        var guessSetIteratorValueDiffAbsMaxValueDiffAbsValueIndex = 0\n\
    \        var gameSetIteratorValueDiffAbsMaxValueDiffAbsValueDiff = 0\n       \
    \ var guessSetIteratorValueDiffAbsMaxValueDiffAbsValueDiff = 0\n        var gameSetIteratorValueDiffAbsMaxValueDiffAbsValueDiffIndex\
    \ = 0\n        var guessSetIteratorValueDiffAbsMaxValueDiffAbsValueDiffIndex =\
    \ 0\n        var gameSetIteratorValueDiffAbsMaxValueDiffAbs\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdkj6wcw_.scala:57:4 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdkj6wcw_.scala:19:25\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ArrayList[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpdkj6wcw_.scala:57:5 ---------------------\e[0m\e[0m\n\e[31m57\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659797971
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.map(x => if (x == 0) 0 else x)\n        val guessScores\
    \ = guess.map(x => if (x == 0) 0 else x)\n        val diffs = guessScores.zip(gameScores).map(x\
    \ => if (x._1 == x._2) 0 else abs(x._1 - x._2))\n        diffs.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797975
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreCount = gameScores.count\n        val guessScoreCount\
    \ = guessScores.count\n        val gameScoreSum = gameScores.sum\n        val\
    \ guessScoreSum = guessScores.sum\n        val gameScoreDiff = gameScoreSum -\
    \ guessScoreSum\n        val guessScoreDiff = guessScoreSum - gameScoreSum\n \
    \       val gameScoreDiffs = gameScores.zip(guessScores).map { case (gameScore,\
    \ guessScore) =>\n            if (gameScore == guessScore) {\n               \
    \ 0\n            } else {\n                Math.abs(gameScore - guessScore)\n\
    \            }\n        }\n        gameScoreDiffs.take(gameScoreCount)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp99a1v0zz.scala:30:28\
    \ --------------------\e[0m\e[0m\n\e[31m30 |\e[0m        gameScoreDiffs.take(gameScoreCount)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Found:    (gameScoreCount : (Long => Boolean) => Int)\n\
    \e[31m   |\e[0m                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797973
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameLen = game.length\n        val guessLen = guess.length\n       \
    \ val result = new mutable.ArrayBuffer[Long]()\n        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => index -> score }.toMap\n        val gameScore = gameScores.map\
    \ { case (index, score) => score }.toList\n        val guessScore = guessScores.map\
    \ { case (index, score) => score }.toList\n        val gameScoreDiff = gameScore\
    \ diff guessScore\n        val gameScoreDiffLen = gameScoreDiff.length\n     \
    \   val guessScoreDiffLen = guessScoreDiff.length\n        val gameScoreDiffDiff\
    \ = gameScoreDiff.zipWithIndex.map { case (score, index) => index -> score }.toMap\n\
    \        val guessScoreDiffDiff = guessScoreDiff.zipWithIndex.map { case (score,\
    \ index) => index -> score }.toMap\n        val gameScoreDiffDiffLen = gameScoreDiffDiff.length\n\
    \        val guessScoreDiffDiffLen = guessScoreDiffDiff.length\n        val gameScoreDiffDiffDiff\
    \ = gameScoreDiffDiff.zipWithIndex.map { case (score, index) => index -> score\
    \ }.toMap\n        val guessScoreDiffDiffDiff = guessScoreDiffDiff.zipWithIndex.map\
    \ { case (score, index) => index -> score }.toMap\n        val gameScoreDiffDiffLen\
    \ = gameScoreDiffDiff.length\n        val guessScoreDiffDiffLen = guessScoreDiffDiff.length\n\
    \        val gameScoreDiffDiffDiff = gameScoreDiffDiff.zipWithIndex.map { case\
    \ (score, index) => index -> score }.toMap\n        val guessScoreDiffDiffDiff\
    \ = guessScoreDiffDiff.zipWithIndex.map { case (score, index) => index -> score\
    \ }.toMap\n        val gameScoreDiffDiffLen = gameScoreDiffDiff.length\n     \
    \   val guessScoreDiffDiffLen = guessScoreDiffDiff.length\n        val gameScoreDiffDiffDiff\
    \ = gameScoreDiffDiff.zipWithIndex.map { case (score, index) => index -> score\
    \ }.toMap\n        val guessScoreDiffDiffDiff = guessScoreDiffDiff.zipWithIndex.map\
    \ { case (score, index) => index -> score }.toMap\n        val gameScoreDiffDiffLen\
    \ = gameScoreDiffDiff.length\n        val guessScoreDiffDiffLen = guessScoreDiffDiff.length\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp6a6x4mv2.scala:41:11 ---------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp6a6x4mv2.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffDiffLen\e[0m\
    \ = gameScoreDiffDiff.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffDiffLen is already defined as \e[33mvalue\e[0m\
    \ \e[35mgameScoreDiffDiffLen\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp6a6x4mv2.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mguessScoreDiffDiffLen\e\
    [0m = guessScoreDiffDiff.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreDiffDiffLen is already defined as \e[33mvalue\e\
    [0m \e[35mguessScoreDiffDiffLen\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6a6x4mv2.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffDiffDiff\e\
    [0m = gameScoreDiffDiff.zipWithIndex.map { \e[33mcase\e[0m (score, index) => index\
    \ -> score }.toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffDiffDiff is already defined as \e[33mvalue\e\
    [0m \e[35mgameScoreDiffDiffDiff\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6a6x4mv2.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgues"
  stdout: ''
  timestamp: 1659797975
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.zipWithIndex.map { case (score, index) => score ->\
    \ index }.toMap\n        val guessesScores = guess.zipWithIndex.map { case (score,\
    \ index) => score -> index }.toMap\n        val guessesWithScores = guess.zip(game).map\
    \ { case (guess, score) => guess -> score }.toMap\n        val guessesWithIndexes\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> index }.toMap\n \
    \       val guessesWithIndexesWithScores = guess.zipWithIndex.map { case (guess,\
    \ index) => guess -> score }.toMap\n        val guessesWithIndexesWithScoreAndScores\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> (score, score) }.toMap\n\
    \        val guessesWithIndexesWithScoreAndScores = guess.zipWithIndex.map { case\
    \ (guess, index) => guess -> (score, score) }.toMap\n        val guessesWithIndexesWithScoreAndScores\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> (score, score) }.toMap\n\
    \        val guessesWithIndexesWithScoreAndScores = guess.zipWithIndex.map { case\
    \ (guess, index) => guess -> (score, score) }.toMap\n        val guessesWithIndexesWithScoreAndScores\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> (score, score) }.toMap\n\
    \        val guessesWithIndexesWithScoreAndScores = guess.zipWithIndex.map { case\
    \ (guess, index) => guess -> (score, score) }.toMap\n        val guessesWithIndexesWithScoreAndScores\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> (score, score) }.toMap\n\
    \        val guessesWithIndexesWithScoreAndScores = guess.zipWithIndex.map { case\
    \ (guess, index) => guess -> (score, score) }.toMap\n        val guessesWithIndexesWithScoreAndScores\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> (score, score) }.toMap\n\
    \        val guessesWithIndexesWithScoreAndScores = guess.zipWithIndex.map { case\
    \ (guess, index) => guess -> (score, score) }.toMap\n        val guessesWithIndexesWithScoreAndScores\
    \ = guess.zipWithIndex.map { case (guess, index) => \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmlw57mi_.scala:40:0 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmlw57mi_.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessesWithIndexesWithScoreAndScores\e[0m = guess.zipWithIndex.map { \e\
    [33mcase\e[0m (guess, index) => guess -> (score, score) }.toMap\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesWithIndexesWithScoreAndScores is already defined as\
    \ \e[33mvalue\e[0m \e[35mguessesWithIndexesWithScoreAndScores\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmlw57mi_.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessesWithIndexesWithScoreAndScores\e[0m = guess.zipWithIndex.map { \e\
    [33mcase\e[0m (guess, index) => guess -> (score, score) }.toMap\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesWithIndexesWithScoreAndScores is already defined as\
    \ \e[33mvalue\e[0m \e[35mguessesWithIndexesWithScoreAndScores\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmlw57mi_.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessesWithIndexesWithScoreAndScores\e[0m = guess.zipWithIndex.map { \e\
    [33mcase\e[0m (guess, index) => guess -> (score, score) }.toMap\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesWithIndexesWithScoreAndScores is already defined as\
    \ \e[33mvalue\e[0m \e[35mguesses"
  stdout: ''
  timestamp: 1659797976
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.zipWithIndex.map(x => x._2).toList\n        val guessScores\
    \ = guess.zipWithIndex.map(x => x._2).toList\n        val gameScoreMap = gameScores.groupBy(x\
    \ => x).map(x => (x._1, x._2.size)).toMap\n        val guessScoreMap = guessScores.groupBy(x\
    \ => x).map(x => (x._1, x._2.size)).toMap\n        val gameScoreArray = gameScores.map(x\
    \ => x._2).toArray\n        val guessScoreArray = guessScores.map(x => x._2).toArray\n\
    \        val gameScoreArrayMap = gameScoreArray.groupBy(x => x).map(x => (x._1,\
    \ x._2.size)).toMap\n        val guessScoreArrayMap = guessScoreArray.groupBy(x\
    \ => x).map(x => (x._1, x._2.size)).toMap\n        val gameScoreArrayMap2 = gameScoreArrayMap.map(x\
    \ => (x._1, x._2.toArray)).toMap\n        val guessScoreArrayMap2 = guessScoreArrayMap.map(x\
    \ => (x._1, x._2.toArray)).toMap\n        val gameScoreArrayMap3 = gameScoreArrayMap2.map(x\
    \ => (x._1, x._2.toArray)).toMap\n        val guessScoreArrayMap3 = guessScoreArrayMap2.map(x\
    \ => (x._1, x._2.toArray)).toMap\n        val gameScoreArrayMap4 = gameScoreArrayMap3.map(x\
    \ => (x._1, x._2.toArray)).toMap\n        val guessScoreArrayMap4 = guessScoreArrayMap3.map(x\
    \ => (x._1, x._2.toArray)).toMap\n        val gameScoreArrayMap5 = gameScoreArrayMap4.map(x\
    \ => (x._1, x._2.toArray)).toMap\n        val guessScoreArrayMap5 = guessScoreArrayMap4.map(x\
    \ => (x._1, x._2.toArray)).toMap\n        val gameScoreArrayMap6 = gameScoreArrayMap5.map(x\
    \ => (x._1, x._2.toArray)).toMap\n        val guessScoreArrayMap6 = guessScoreArrayMap5.map(x\
    \ => (x._1, x._2.toArray)).toMap\n        val gameScoreArrayMap7 = gameScoreArrayMap6.map(x\
    \ => (x._1, x._2.toArray)).toMap\n        val guessScoreArrayMap7 = guessScoreArrayMap6.map(x\
    \ => (x._1, x._2.toArray)).toMap\n        val gameScoreArrayMap8 = gameScore\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzj6ye82u.scala:19:51 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mgameScoreArray\e[0m = gameScores.map(\e\
    [36mx\e[0m => x._2).toArray\n\e[31m\e[31m   |\e[0m                           \
    \                      ^^^^\e[0m\n\e[31m   |\e[0m                            \
    \             value _2 is not a member of Int\n\e[31m\e[31m-- Error: /tmp/tmpzj6ye82u.scala:19:62\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \ \e[33mval\e[0m \e[36mgameScoreArray\e[0m = gameScores.map(\e[36mx\e[0m => x._2).toArray\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \      ^\e[0m\n\e[31m   |\e[0m                                          No ClassTag\
    \ available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                          \
    \                where:    B is a type variable\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpzj6ye82u.scala:20:53 ------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mguessScoreArray\e[0m = guessScores.map(\e\
    [36mx\e[0m => x._2).toArray\n\e[31m\e[31m   |\e[0m                           \
    \                        ^^^^\e[0m\n\e[31m   |\e[0m                          \
    \               value _2 is not a member of Int\n\e[31m\e[31m-- Error: /tmp/tmpzj6ye82u.scala:20:64\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mval\e[0m \e[36mguessScoreArray\e[0m = guessScores.map(\e[36mx\e[0m =>\
    \ x._2).toArray\n\e[31m\e[31m   |\e[0m                                       \
    \                         ^\e[0m\n\e[31m   |\e[0m                            \
    \              No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m \
    \                                         where:    B is a type variable\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpzj6ye82u.scala:35:33 ------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgameScoreArrayMap8\e[0m\
    \ = gameScore\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Not found: gameScore\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when com"
  stdout: ''
  timestamp: 1659797976
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameLength = game.size\n        val guessLength = guess.size\n     \
    \   val result = new Array[Long](guessLength)\n        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score -> index }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score -> index }\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreDiff = gameScores.filter(_._2\
    \ > 0).map { case (score, index) => score - gameScoreSet.get(index) }\n      \
    \  val guessScoreDiff = guessScores.filter(_._2 > 0).map { case (score, index)\
    \ => score - guessScoreSet.get(index) }\n        val gameScoreDiffCount = gameScoreDiff.count\n\
    \        val guessScoreDiffCount = guessScoreDiff.count\n        val gameScoreDiffSum\
    \ = gameScoreDiff.sum\n        val guessScoreDiffSum = guessScoreDiff.sum\n  \
    \      val gameScoreDiffSumAbs = gameScoreDiffSum.abs\n        val guessScoreDiffSumAbs\
    \ = guessScoreDiffSum.abs\n        val gameScoreDiffSumAbsCount = gameScoreDiffSumAbs.count\n\
    \        val guessScoreDiffSumAbsCount = guessScoreDiffSumAbs.count\n        val\
    \ gameScoreDiffSumAbsSum = gameScoreDiffSumAbs.sum\n        val guessScoreDiffSumAbsSum\
    \ = guessScoreDiffSumAbs.sum\n        val gameScoreDiffSumAbsSumAbs = gameScoreDiffSumAbsSum.abs\n\
    \        val guessScoreDiffSumAbsSumAbs = guessScoreDiffSumAbsSum.abs\n      \
    \  val gameScoreDiffSumAbsSumAbsCount = gameScoreDiffSumAbsSumAbs.count\n    \
    \    val guessScoreDiffSumAbsSumAbsCount = guessScoreDiffSumAbsSumAbs.count\n\
    \        val gameScoreDiffSumAbsSumAbsSum = gameScoreDiffSumAbsSumAbs.sum\n  \
    \      val guessScoreDiffSumAbsSumAbsSum = guessScoreDiffSumAbsSumAbs.sum\n  \
    \      val gameScoreDiffSumAbsSumAbsSumAbs = gameScoreDiffSumAbsSumAbsSum.abs\n\
    \        val guessScoreDiffSumAbsSumAbsSumAbs = guessScoreDiffSumAbsSumAbsSum.abs\n\
    \        val gameScoreDiffSumAbsSumAbsSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfaz7u1x3.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfaz7u1x3.scala:22:106\
    \ -----------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mgameScoreDiff\e[0m = gameScores.filter(_._2 > \e[31m0\e[0m).map { \e[33mcase\e\
    [0m (score, index) => score - gameScoreSet.get(index) }\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \                 ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue get is not a member\
    \ of Set[(Long, Int)] - did you mean gameScoreSet.seq?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpfaz7u1x3.scala:23:109 -----------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mguessScoreDiff\e[0m = guessScores.filter(_._2\
    \ > \e[31m0\e[0m).map { \e[33mcase\e[0m (score, index) => score - guessScoreSet.get(index)\
    \ }\n\e[31m\e[31m   |\e[0m                                                   \
    \                                            ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mvalue get is not a member of Set[(Long, Int)] - did you mean guessScoreSet.seq?\n\
    \e[31m\e[31m-- Error: /tmp/tmpfaz7u1x3.scala:26:48 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffSum\e[0m =\
    \ gameScoreDiff.sum\n\e[31m\e[31m   |\e[0m                                   \
    \             ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e\
    [0m \e[35mBigIntIsIntegral\e[0m in \e[33mobject\e[0m \e[35mNumeric\e[0m and \e\
    [33mobject\e[0m \e[35mDoubleIsFractional\e[0m in \e[33mobject\e[0m \e[35mNumeric\e\
    [0m match type Numeric[B] of parameter num of \e[33mmethod\e[0m \e[35msum\e[0m\
    \ in \e[33mtrait\e[0m \e[35mIterableOnceOps\e[0m\n\e[31m\e[31m-- Error: /tmp/tmpfaz7u1x3.scala:27:50\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m       \
    \ \e[33mval\e[0m \e[36mguessScoreDiffSum\e[0m = guessScoreDiff.sum\n\e[31m\e[31m\
    \   |\e[0m                                                  ^\e[0m\n\e[31m   |\e\
    [0mambiguous given instances: b"
  stdout: ''
  timestamp: 1659797975
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val guesses = guess.toSet\n        val scores = game.toSet\n        val\
    \ results = new mutable.ArrayList[Long]()\n        for(score <- scores) {\n  \
    \          val guess = guesses.find(_ == score)\n            if(guess == None)\
    \ results += score\n            else results += abs(guess - score)\n        }\n\
    \        results\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6f1gnte_.scala:17:26 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresults\e[0m = \e[33mnew\e\
    [0m mutable.ArrayList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m              \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val guesses = guess.map(x => Math.abs(x - game))\n        val scores = game.map(x\
    \ => Math.abs(x - guess))\n        val guessesWithScores = guesses.zip(scores)\n\
    \        val guessesWithScoresSortedByScore = guessesWithScores.sortBy(_._2)\n\
    \        val guessesWithScoresSortedByScoreWithMax = guessesWithScoresSortedByScore.takeWhile(_._2\
    \ > 0).reverse\n        val guessesWithScoresSortedByScoreWithMaxWithMax = guessesWithScoresSortedByScoreWithMax.takeWhile(_._2\
    \ > 0).reverse\n        guessesWithScoresSortedByScoreWithMaxWithMax.map(x =>\
    \ if (x._2 == 0) 0 else x._1 - x._2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpelxjomul.scala:15:48 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mguesses\e[0m = guess.map(\e\
    [36mx\e[0m => Math.abs(x - game))\n\e[31m\e[31m   |\e[0m                     \
    \                         ^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35m-\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\
    \e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m\
    \   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x:\
    \ Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\
    \e[31m   |\e[0mmatch arguments ((game : List[Long]))\n\e[31m\e[31m-- [E134] Type\
    \ Error: /tmp/tmpelxjomul.scala:16:46 -----------------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m        \e[33mval\e[0m \e[36mscores\e[0m = game.map(\e[36mx\e[0m\
    \ => Math.abs(x - guess))\n\e[31m\e[31m   |\e[0m                             \
    \               ^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of\
    \ \e[33mmethod\e[0m \e[35m-\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\
    \e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m\
    \   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x:\
    \ Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\
    \e[31m   |\e[0mmatch arguments ((guess : List[Long]))\n\e[31m\e[31m-- Error: /tmp/tmpelxjomul.scala:18:75\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m18 |\e[0m       \
    \ \e[33mval\e[0m \e[36mguessesWithScoresSortedByScore\e[0m = guessesWithScores.sortBy(_._2)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                   ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both \e\
    [33mobject\e[0m \e[35mInt\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e\
    [33mobject\e[0m \e[35mChar\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match\
    \ type Ordering[B] of parameter ord of \e[33mmethod\e[0m \e[35msortBy\e[0m in\
    \ \e[33mtrait\e[0m \e[35mSeqOps\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1659797988
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameLen = game.length\n        val guessLen = guess.length\n       \
    \ val result = new mutable.ArrayList[Long](guessLen)\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n    \
    \    val guessScores = guess.zipWithIndex.map { case (score, index) => score ->\
    \ index }.toMap\n        val gameScore = gameScores.map { case (score, index)\
    \ => score }.toSeq\n        val guessScore = guessScores.map { case (score, index)\
    \ => score }.toSeq\n        val gameScoreDiff = gameScore diff guessScore\n  \
    \      val gameScoreDiffLen = gameScoreDiff.length\n        val gameScoreDiffDiff\
    \ = gameScoreDiff.zipWithIndex.map { case (score, index) => score -> index }.toMap\n\
    \        val gameScoreDiffDiffLen = gameScoreDiffDiff.length\n        val gameScoreDiffDiffDiff\
    \ = gameScoreDiffDiff.map { case (score, index) => score -> index }.toMap\n  \
    \      val gameScoreDiffDiffDiffLen = gameScoreDiffDiffDiff.length\n        val\
    \ gameScoreDiffDiffDiffDiff = gameScoreDiffDiffDiff.map { case (score, index)\
    \ => score -> index }.toMap\n        val gameScoreDiffDiffDiffDiffLen = gameScoreDiffDiffDiffDiff.length\n\
    \        val gameScoreDiffDiffDiffDiffDiff = gameScoreDiffDiffDiffDiff.map { case\
    \ (score, index) => score -> index }.toMap\n        val gameScoreDiffDiffDiffDiffDiffLen\
    \ = gameScoreDiffDiffDiffDiffDiff.length\n        val gameScoreDiffDiffDiffDiffDiffDiff\
    \ = gameScoreDiffDiffDiffDiffDiff.map { case (score, index) => score -> index\
    \ }.toMap\n        val gameScoreDiffDiffDiffDiffDiffLen = gameScoreDiffDiffDiffDiffDiffDiff.length\n\
    \        val gameScoreDiffDiffDiffDiffDiffDiff = gameScoreDiffDiffDiffDiffDiffDiff.map\
    \ { case (score, index) => score -> index }.toMap\n        val gameScoreDiffDiffDiffDiffDiffLen\
    \ = gameScoreDiffDiffDiffDiffDiffDiffLen\n        val gameScoreDiffDiffDiffDiffDiffDiff\
    \ = gameScoreDiffDiffDiffDiffDiffDiff.map { case (score, index) => score -> index\
    \ }.toMap\n        val gameScoreDiffDiffDiffDiffDiffLen = gameScoreDiffDiffDiffDiffDiffLen\n\
    \        val gameScoreDiffDiffDiffDiffDiffDiff = gameScoreDiffDiffDiffDiffDiffDiff.map\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuq1_8nf4.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffDiffDiffDiffDiffLen\e\
    [0m = gameScoreDiffDiffDiffDiffDiffDiff.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffDiffDiffDiffDiffLen is already defined as \e\
    [33mvalue\e[0m \e[35mgameScoreDiffDiffDiffDiffDiffLen\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuq1_8nf4.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreDiffDiffDiffDiffDiffDiff\e[0m = gameScoreDiffDiffDiffDiffDiffDiff.map\
    \ { \e[33mcase\e[0m (score, index) => score -> index }.toMap\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffDiffDiffDiffDiffDiff is already defined as \e\
    [33mvalue\e[0m \e[35mgameScoreDiffDiffDiffDiffDiffDiff\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuq1_8nf4.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreDiffDiffDiffDiffDiffLen\e[0m = gameScoreDiffDiffDiffDiffDiffDiffLen\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffDiffDiffDiffDiffLen is already defined as \e\
    [33mvalue\e[0m \e[35mgameScoreDiffDiffDiffDiffDiffLen\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuq1_8nf4.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreDiffDiffDiffDiffDiffDiff\e[0m = gameScoreDiffDiffDiffDiffDiffDiff.map\
    \ { \e[33mcase\e[0m (score, "
  stdout: ''
  timestamp: 1659797997
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.zipWithIndex.map { case (score, index) => (index,\
    \ score) }.toMap\n        val guessesScores = guess.zipWithIndex.map { case (score,\
    \ index) => (index, score) }.toMap\n        val guessesWithScores = guessesScores.map\
    \ { case (index, score) => (index, gameScores(index) - score) }\n        val guessesWithAbsScores\
    \ = guessesWithScores.map { case (index, score) => (index, math.abs(score)) }\n\
    \        guessesWithAbsScores.map { case (index, score) => (index, gameScores(index)\
    \ - score) }\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnp4u6j60.scala:19:33\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        guessesWithAbsScores.map\
    \ { \e[33mcase\e[0m (index, score) => (index, gameScores(index) - score) }\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Map[Int, Long]\n\e[31m   |\e[0m        Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameLength = game.length\n        val guessLength = guess.length\n \
    \       val result = new Array[Long](guessLength)\n        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScore = gameScores.sum\n \
    \       val guessScore = guessScores.sum\n        val diffs = gameScores.zip(guessScores).map\
    \ { case (gameScore, guessScore) =>\n            val diff = abs(gameScore - guessScore)\n\
    \            if (diff > 0) diff else 0\n        }\n        val correct = gameScores.zip(guessScores).map\
    \ { case (gameScore, guessScore) =>\n            if (gameScore == guessScore)\
    \ 0 else abs(gameScore - guessScore)\n        }\n        val correctCount = correct.count(_\
    \ == 0)\n        val wrongCount = gameLength - correctCount\n        val wrongPercentage\
    \ = wrongCount / gameLength\n        val correctPercentage = correctCount / gameLength\n\
    \        val totalPercentage = correctPercentage + wrongPercentage\n        val\
    \ correctPercentages = correct.map(correctPercentage / totalPercentage)\n    \
    \    val wrongPercentages = wrong.map(wrongPercentage / totalPercentage)\n   \
    \     val correctPercentagesIndex = gameScores.zip(correctPercentages).zipWithIndex.map\
    \ { case (score, correctPercentage) =>\n            if (score == 0) 0 else index\n\
    \        }\n        val wrongPercentagesIndex = gameScores.zip(wrongPercentages).zipWithIndex.map\
    \ { case (score, wrongPercentage) =>\n            if (score == 0) 0 else index\n\
    \        }\n        val correctPercentagesIndex = gameScores.zip(correctPercentages).zipWithIndex.map\
    \ { case (score, correctPercentage) =>\n            if (score == 0) 0 else index\n\
    \        }\n        val wrongPercentagesIndex = gameScores.zip(wrongPercentages).zipWithIndex.map\
    \ { case (score, wrongPercentage) =>\n            if (score == 0) 0 else index\n\
    \        }\n        val correctPercentagesIndex = gameScores.zip(correctPercentages).zipWithIndex.map\
    \ { case (score, correctPercentage) =>\n            if (score == 0) 0 else index\n\
    \        }\n        val wrongPercentagesIndex = gameScores.zip(wrongPercentages).zipWithIndex.map\
    \ { case (score, wrongPercentage) =>\n            if (score == 0) 0 else index\n\
    \        }\n        val correctPercentagesIndex = gameScores.zip(correctPercentages).zipWithIndex.map\
    \ { case (score, correctPercentage) =>\n            if (score == 0) 0 else index\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcvuunkax.scala:66:0 ----------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcvuunkax.scala:42:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcorrectPercentagesIndex\e[0m = gameScores.zip(correctPercentages).zipWithIndex.map\
    \ { \e[33mcase\e[0m (score, correctPercentage) =>\n\e[31m\e[31m   |\e[0m     \
    \   ^\e[0m\n\e[31m   |\e[0mcorrectPercentagesIndex is already defined as \e[33mvalue\e\
    [0m \e[35mcorrectPercentagesIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m43 |\e[0m            \e[33mif\e[0m (score == \e[31m0\e[0m) \e[31m0\e[0m\
    \ \e[33melse\e[0m index\n\e[31m44 |\e[0m        }\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpcvuunkax.scala:45:12 ---------------------------\e[0m\e[0m\n\e\
    [31m45 |\e[0m        \e[33mval\e[0m \e[36mwrongPercentagesIndex\e[0m = gameScores.zip(wrongPercentages).zipWithIndex.map\
    \ { \e[33mcase\e[0m (score, wrongPercentage) =>\n\e[31m\e[31m   |\e[0m       \
    \ ^\e[0m\n\e[31m   |\e[0mwrongPercentagesIndex is already defined as \e[33mvalue\e\
    [0m \e[35mwrongPercentagesIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m46 |\e[0m            \e[33mif\e[0m (score == \e[31m0\e[0m) \e[31m0\e[0m\
    \ \e[33melse\e[0m index\n\e[31m47 |\e[0m        }\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpcvuunkax.scala:48:12 ---------------------------\e[0m\e[0m\n\e\
    [31m48 |\e[0m        \e[33mval\e[0m \e[36mcorrectPercentagesIndex\e[0m = gameScores.zip(correctPercentages).zipWithIndex.map\
    \ { \e[33mcase\e[0m (score, correctPercentage) =>\n\e[31m\e[31m   |\e[0m     \
    \   ^\e[0m\n\e[31m   |\e[0mcorrectPercentagesIndex is already defined as \e[33mvalue\e\
    [0m \e[35mcorrectPercentagesIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m49 |\e[0m            \e[33mif\e[0m (score == \e[31m0\e[0m) \e[31m0\e[0m\
    \ \e[33melse\e[0m i"
  stdout: ''
  timestamp: 1659797999
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameLen = game.size\n        val guessLen = guess.size\n        val\
    \ result = new Array[Long](guessLen)\n        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScoreMap.values.toList\n\
    \        val guessScoreList = guessScoreMap.values.toList\n        val gameScoreSet\
    \ = gameScoreList.map(_.toSet)\n        val guessScoreSet = guessScoreList.map(_.toSet)\n\
    \        val gameScoreSetSize = gameScoreSet.size\n        val guessScoreSetSize\
    \ = guessScoreSet.size\n        val gameScoreSetIntersection = gameScoreSet.intersect(guessScoreSet)\n\
    \        val guessScoreSetIntersection = guessScoreSet.intersect(gameScoreSet)\n\
    \        val gameScoreSetUnion = gameScoreSet.union(guessScoreSet)\n        val\
    \ guessScoreSetUnion = guessScoreSet.union(gameScoreSet)\n        val gameScoreSetDifference\
    \ = gameScoreSet.diff(guessScoreSet)\n        val guessScoreSetDifference = guessScoreSet.diff(gameScoreSet)\n\
    \        val gameScoreSetDifferenceSize = gameScoreSetDifference.size\n      \
    \  val guessScoreSetDifferenceSize = guessScoreSetDifference.size\n        val\
    \ gameScoreSetDifferenceIntersection = gameScoreSetDifference.intersect(guessScoreSetDifference)\n\
    \        val guessScoreSetDifferenceIntersection = guessScoreSetDifference.intersect(gameScoreSetDifference)\n\
    \        val gameScoreSetDifferenceUnion = gameScoreSetDifference.union(guessScoreSetDifference)\n\
    \        val guessScoreSetDifferenceUnion = guessScoreSetDifference.union(gameScoreSetDifference)\n\
    \        val gameScoreSetDifferenceDifference = gameScoreSetDifference.diff(guessScoreSetDifference)\n\
    \        val guessScoreSetDifferenceDifference = guessScoreSetDifference.diff(gameScoreSetDifference)\n\
    \        val gameScoreSetDifferenceDifferenceSize = gameScoreSetDifferenceDifference.size\n\
    \        val guessScoreSetDifferenceDifferenceSize = guessScoreSetDifferenceDifference.size\n\
    \        val gameScoreSetDifferenceDifferenceIntersection = gameScoreSetDifferenceDifference.intersect(guessScoreSetDifferenceDifference)\n\
    \        val guessScoreSetDifferenceDifferenceIntersection = guessScoreSetDifferenceDifference.intersect(gameScoreSetDifferenceDifference)\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp8m9e8k7f.scala:46:11 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- Error: /tmp/tmp8m9e8k7f.scala:20:43 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.toMap\n\
    \e[31m\e[31m   |\e[0m                                           ^\e[0m\n\e[31m\
    \   |\e[0m                                       Cannot prove that Long <:< (K,\
    \ V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                       where:\
    \    K is a type variable\n\e[31m   |\e[0m                                   \
    \              V is a type variable\n\e[31m   |\e[0m                         \
    \              .\n\e[31m\e[31m-- Error: /tmp/tmp8m9e8k7f.scala:21:45 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mguessScoreMap\e[0m = guessScores.toMap\n\
    \e[31m\e[31m   |\e[0m                                             ^\e[0m\n\e[31m\
    \   |\e[0m                                       Cannot prove that Long <:< (K,\
    \ V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                       where:\
    \    K is a type variable\n\e[31m   |\e[0m                                   \
    \              V is a type variable\n\e[31m   |\e[0m                         \
    \              .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8m9e8k7f.scala:47:5\
    \ ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659797996
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameSize = game.size\n        val guessSize = guess.size\n        val\
    \ result = new Array[Long](guessSize)\n        val gameScores = game.map(x =>\
    \ math.abs(x))\n        val guessScores = guess.map(x => math.abs(x))\n      \
    \  val gameScore = gameScores.sum\n        val guessScore = guessScores.sum\n\
    \        val gameScoreDiff = gameScore - guessScore\n        val gameScoreDiffs\
    \ = gameScoreDiff.zipWithIndex\n        val gameScoreDiffsSorted = gameScoreDiffs.sortBy(_._1).reverse\n\
    \        val gameScoreDiffsSortedIndex = gameScoreDiffsSorted.zipWithIndex.filter(x\
    \ => x._2 == 0).map(_._1).sum\n        val gameScoreDiffsSortedIndex2 = gameScoreDiffsSorted.zipWithIndex.filter(x\
    \ => x._2 == 1).map(_._1).sum\n        val gameScoreDiffsSortedIndex3 = gameScoreDiffsSorted.zipWithIndex.filter(x\
    \ => x._2 == 2).map(_._1).sum\n        val gameScoreDiffsSortedIndex4 = gameScoreDiffsSorted.zipWithIndex.filter(x\
    \ => x._2 == 3).map(_._1).sum\n        val gameScoreDiffsSortedIndex5 = gameScoreDiffsSorted.zipWithIndex.filter(x\
    \ => x._2 == 4).map(_._1).sum\n        val gameScoreDiffsSortedIndex6 = gameScoreDiffsSorted.zipWithIndex.filter(x\
    \ => x._2 == 5).map(_._1).sum\n        val gameScoreDiffsSortedIndex7 = gameScoreDiffsSorted.zipWithIndex.filter(x\
    \ => x._2 == 6).map(_._1).sum\n        val gameScoreDiffsSortedIndex8 = gameScoreDiffsSorted.zipWithIndex.filter(x\
    \ => x._2 == 7).map(_._1).sum\n        val gameScoreDiffsSortedIndex9 = gameScoreDiffsSorted.zipWithIndex.filter(x\
    \ => x._2 == 8).map(_._1).sum\n        val gameScoreDiffsSortedIndex10 = gameScoreDiffsSorted.zipWithIndex.filter(x\
    \ => x._2 == 9).map(_._1).sum\n        val gameScoreDiffsSortedIndex11 = gameScoreDiffsSorted.zipWithIndex.filter(x\
    \ => x._2 == 10).map(_._1).sum\n        val gameScoreDiffsSortedIndex12 = gameScoreDiffsSorted.zipWithIndex.filter(x\
    \ => x._2 == 11).map(_._1).sum\n        val \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpwkaurb6q.scala:37:11 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpwkaurb6q.scala:23:43 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffs\e[0m = gameScoreDiff.zipWithIndex\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             value zipWithIndex is not a member\
    \ of Long\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwkaurb6q.scala:38:5\
    \ ---------------------\e[0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659797994
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameSize = game.size\n        val guessSize = guess.size\n        val\
    \ result = new mutable.ArrayList[Long]()\n        val gameScore = game.foldLeft(0L){\
    \ (sum, score) => sum + score}\n        val guessScore = guess.foldLeft(0L){ (sum,\
    \ score) => sum + score}\n        val difference = guessScore - gameScore\n  \
    \      val differenceAbs = Math.abs(difference)\n        val differenceAbsArray\
    \ = Array.ofDim[Long](guessSize)\n        differenceAbsArray.fill(differenceAbs)\n\
    \        val differenceAbsArrayList = mutable.ArrayList[Long](differenceAbsArray)\n\
    \        val differenceAbsArrayListSize = differenceAbsArrayList.size\n      \
    \  val differenceAbsArrayListIterator = differenceAbsArrayList.iterator\n    \
    \    val differenceAbsArrayListIteratorSize = differenceAbsArrayListIterator.size\n\
    \        val differenceAbsArrayListIteratorNext = differenceAbsArrayListIterator.next\n\
    \        val differenceAbsArrayListIteratorNextSize = differenceAbsArrayListIteratorNext.size\n\
    \        val differenceAbsArrayListIteratorNextNext = differenceAbsArrayListIteratorNext.next\n\
    \        val differenceAbsArrayListIteratorNextNextSize = differenceAbsArrayListIteratorNextNext.size\n\
    \        val differenceAbsArrayListIteratorNextNextNext = differenceAbsArrayListIteratorNextNext.next\n\
    \        val differenceAbsArrayListIteratorNextNextNextSize = differenceAbsArrayListIteratorNextNextNext.size\n\
    \        val differenceAbsArrayListIteratorNextNextNextNext = differenceAbsArrayListIteratorNextNextNext.next\n\
    \        val differenceAbsArrayListIteratorNextNextNextNextSize = differenceAbsArrayListIteratorNextNextNextNext.size\n\
    \        val differenceAbsArrayListIteratorNextNextNextNextNext = differenceAbsArrayListIteratorNextNextNextNext.next\n\
    \        val differenceAbsArrayListIteratorNextNextNextNextNextSize = differenceAbsArrayListIteratorNextNextNextNextNext.size\n\
    \        val differenceAbsArrayListIteratorNextNextNextNextNextNext = differenceAbsArrayListIteratorNextNextNextNextNext.next\n\
    \        val differenceAbsArrayListIteratorNextNextNextNextNextNextSize = differenceAbsArrayListIteratorNextNextNextNextNextNext.size\n\
    \        val differenceAbsArrayListIteratorNextNextNextNextNextNextSize = differenceAbsArrayListIteratorNextNextNextNextNextNext.size\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxem7s8su.scala:40:12 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mdifferenceAbsArrayListIteratorNextNextNextNextNextNextSize\e\
    [0m = differenceAbsArrayListIteratorNextNextNextNextNextNext.size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdifferenceAbsArrayListIteratorNextNextNextNextNextNextSize\
    \ is already defined as \e[33mvalue\e[0m \e[35mdifferenceAbsArrayListIteratorNextNextNextNextNextNextSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpxem7s8su.scala:17:25 ------------------------\e[0m\e[0m\n\
    \e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e[0m mutable.ArrayList[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpxem7s8su.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        differenceAbsArray.fill(differenceAbs)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value\
    \ fill is not a member of Array[Long]\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpxem7s8su.scala:24:37 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mval\e[0m \e[36mdifferenceAbsArrayList\e[0m = mutable.ArrayList[\e\
    [35mLong\e[0m](differenceAbsArray)\n\e[31m\e[31m   |\e[0m                    \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpxem7s8su.scala:42:5 ---------------------\e[0m\e[0m\n\e[31m42\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Lon"
  stdout: ''
  timestamp: 1659797994
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameLen = game.length\n        val guessLen = guess.length\n       \
    \ val result = new Array[Long](guessLen)\n        var i = 0\n        var j = 0\n\
    \        while (i < gameLen && j < guessLen) {\n            if (game(i) == guess(j))\
    \ {\n                result(j) = 0\n                i += 1\n                j\
    \ += 1\n            } else if (game(i) < guess(j)) {\n                result(j)\
    \ = 0\n                i += 1\n            } else {\n                result(j)\
    \ = abs(game(i) - guess(j))\n                i += 1\n                j += 1\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1vw0vavm.scala:34:8\
    \ ---------------------\e[0m\e[0m\n\e[31m34 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val guesses = guess.toSet\n        val scores = game.toSet\n        val\
    \ guessesWithScore = game.toSet.map(x => (x, x))\n        val guessesWithScoreWithScore\
    \ = game.toSet.map(x => (x, x))\n        val guessesWithScoreWithScoreWithScore\
    \ = game.toSet.map(x => (x, x))\n        val guessesWithScoreWithScoreWithScoreWithScore\
    \ = game.toSet.map(x => (x, x))\n        val guessesWithScoreWithScoreWithScoreWithScoreWithScore\
    \ = game.toSet.map(x => (x, x))\n        val guessesWithScoreWithScoreWithScoreWithScoreWithScoreWithScore\
    \ = game.toSet.map(x => (x, x))\n        val guessesWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScore\
    \ = game.toSet.map(x => (x, x))\n        val guessesWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScore\
    \ = game.toSet.map(x => (x, x))\n        val guessesWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScore\
    \ = game.toSet.map(x => (x, x))\n        val guessesWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScore\
    \ = game.toSet.map(x => (x, x))\n        val guessesWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScore\
    \ = game.toSet.map(x => (x, x))\n        val guessesWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScore\
    \ = game.toSet.map(x => (x, x))\n        val guessesWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScore\
    \ = game.toSet.map(x => (x, x))\n        val guessesWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScore\
    \ = game.toSet.map(x => (x, x))\n        val guessesWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScore\
    \ = game.toSet.map(x => (x, x))\n        val guessesWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScore\
    \ = game.toSet.map(x => (x, x))\n        val guessesWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWith\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpetxlcwjd.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpetxlcwjd.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessesWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScore\e\
    [0m = game.toSet.map(\e[36mx\e[0m => (x, x))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScore\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  guessesWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScore\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpetxlcwjd.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mguessesWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScore\e\
    [0m = game.toSet.map(\e[36mx\e[0m => (x, x))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScore\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  guessesWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScore\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpetxlcwjd.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mguessesWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithSc"
  stdout: ''
  timestamp: 1659797994
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameSize = game.size\n        val guessSize = guess.size\n        val\
    \ result = new mutable.ArrayList[Long]()\n        val gameScore = game.foldLeft(0L){\
    \ (sum, score) => sum + score}\n        val guessScore = guess.foldLeft(0L){ (sum,\
    \ score) => sum + score}\n        var i = 0\n        while (i < guessSize) {\n\
    \            val guessValue = guess(i)\n            val gameValue = game(i)\n\
    \            val diff = Math.abs(guessValue - gameValue)\n            val diffInGame\
    \ = gameScore - gameValue\n            val diffInGuess = guessScore - guessValue\n\
    \            if (diff == 0) {\n                result.add(0)\n            } else\
    \ {\n                result.add(diff)\n            }\n            i += 1\n   \
    \     }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpasxq128w.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ArrayList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797989
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val guesses = guess.toList\n        val scores = game.toList\n        val\
    \ result = guesses.zip(scores).map { case (guess, score) =>\n            if (guess\
    \ == score) 0 else math.abs(guess - score)\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797999
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val guessesDiff = guessesScores.zip(gameScores).map { case (guess,\
    \ game) => math.abs(guess - game) }\n        guessesDiff.zipWithIndex.map { case\
    \ (diff, index) => diff }\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798000
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap =\
    \ guessScores.toMap\n        val gameScores = gameScoreMap.values.toList\n   \
    \     val guessScores = guessScoreMap.values.toList\n        val gameScoreMap\
    \ = gameScores.zip(guessScores).map { case (gameScore, guessScore) =>\n      \
    \      if (gameScore == guessScore) 0 else Math.abs(gameScore - guessScore)\n\
    \        }.toMap\n        val gameScores = gameScoreMap.values.toList\n      \
    \  val gameScoreMap = gameScores.zip(guessScores).map { case (gameScore, guessScore)\
    \ =>\n            if (gameScore == guessScore) 0 else Math.abs(gameScore - guessScore)\n\
    \        }.toMap\n        val gameScores = gameScoreMap.values.toList\n      \
    \  val gameScoreMap = gameScores.zip(guessScores).map { case (gameScore, guessScore)\
    \ =>\n            if (gameScore == guessScore) 0 else Math.abs(gameScore - guessScore)\n\
    \        }.toMap\n        val gameScores = gameScoreMap.values.toList\n      \
    \  val gameScoreMap = gameScores.zip(guessScores).map { case (gameScore, guessScore)\
    \ =>\n            if (gameScore == guessScore) 0 else Math.abs(gameScore - guessScore)\n\
    \        }.toMap\n        val gameScores = gameScoreMap.values.toList\n      \
    \  val gameScoreMap = gameScores.zip(guessScores).map { case (gameScore, guessScore)\
    \ =>\n            if (gameScore == guessScore) 0 else Math.abs(gameScore - guessScore)\n\
    \        }.toMap\n        val gameScores = gameScoreMap.values.toList\n      \
    \  val gameScoreMap = gameScores.zip(guessScores).map { case (gameScore, guessScore)\
    \ =>\n            if (gameScore == guessScore) 0 else Math.abs(gameScore - guessScore)\n\
    \        }.toMap\n        val gameScores = gameScoreMap.values.toList\n      \
    \  val gameScoreMap = gameScores.zip(guessScores).map { case (gameScore, guessScore)\
    \ =>\n            if (gameScore == guessScore) 0 else Math.abs(gameScore - guessScore)\n\
    \        }.toMap\n        val gameScores = gameScoreMap.values.toList\n      \
    \  val gameScoreMap = gameScores.zip(guessScores).map { case (\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpvphg4ran.scala:49:67 ---------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.zip(guessScores).map\
    \ { \e[33mcase\e[0m (\n\e[31m\e[31m   |\e[0m                                 \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                                     pattern expected\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E040] Syntax Error: /tmp/tmpvphg4ran.scala:59:0 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvphg4ran.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScores\e[0m = gameScoreMap.values.toList\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mgameScores\
    \ is already defined as \e[33mvalue\e[0m \e[35mgameScores\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvphg4ran.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessScores\e[0m = guessScoreMap.values.toList\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mguessScores\
    \ is already defined as \e[33mvalue\e[0m \e[35mguessScores\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvphg4ran.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreMap\e[0m = gameScores.zip(guessScores).map { \e[33mcase\e[0m\
    \ (gameScore, guessScore) =>\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e\
    [0mgameScoreMap is already defined as \e[33mvalue\e[0m \e[35mgameScoreMap\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m22 |\e[0m  "
  stdout: ''
  timestamp: 1659798000
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameLen = game.size\n        val guessLen = guess.size\n        val\
    \ result = new mutable.ArrayList[Long](guessLen)\n        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val gameScore = gameScores.map\
    \ { case (score, index) => score }.toSeq\n        val guessScore = guessScores.map\
    \ { case (score, index) => score }.toSeq\n        val gameScoreDiff = gameScore\
    \ diff guessScore\n        val gameScoreDiffLen = gameScoreDiff.size\n       \
    \ val gameScoreDiffDiff = gameScoreDiff.zipWithIndex.map { case (score, diffIndex)\
    \ => diff -> diffIndex }.toMap\n        val gameScoreDiffDiffLen = gameScoreDiffDiff.size\n\
    \        val gameScoreDiffDiffDiff = gameScoreDiffDiff.map { case (diff, diffIndex)\
    \ => diff -> diffIndex }.toMap\n        val gameScoreDiffDiffDiffLen = gameScoreDiffDiffDiff.size\n\
    \        val gameScoreDiffDiffDiffDiff = gameScoreDiffDiffDiff.map { case (diff,\
    \ diffIndex) => diff -> diffIndex }.toMap\n        val gameScoreDiffDiffDiffDiffLen\
    \ = gameScoreDiffDiffDiffDiff.size\n        val gameScoreDiffDiffDiffDiffDiff\
    \ = gameScoreDiffDiffDiffDiff.map { case (diff, diffIndex) => diff -> diffIndex\
    \ }.toMap\n        val gameScoreDiffDiffDiffDiffLen = gameScoreDiffDiffDiffDiffLen\n\
    \        val gameScoreDiffDiffDiffDiffDiff = gameScoreDiffDiffDiffDiffDiff.map\
    \ { case (diff, diffIndex) => diff -> diffIndex }.toMap\n        val gameScoreDiffDiffDiffDiffLen\
    \ = gameScoreDiffDiffDiffDiffLen\n        val gameScoreDiffDiffDiffDiffDiff =\
    \ gameScoreDiffDiffDiffDiffDiff.map { case (diff, diffIndex) => diff -> diffIndex\
    \ }.toMap\n        val gameScoreDiffDiffDiffDiffLen = gameScoreDiffDiffDiffDiffLen\n\
    \        val gameScoreDiffDiffDiffDiffDiff = gameScoreDiffDiffDiffDiffDiff.map\
    \ { case (diff, diffIndex) => diff -> diffIndex }.toMap\n        val gameScoreDiffDiffDiffDiffLen\
    \ = gameScoreDiffDiffDiffDiffLen\n        val gameScoreDiffDiffDiffDiffDiff =\
    \ gameScoreDiffDiffDiffDiff\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong,\
    \ -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0biidwou.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffDiffDiffDiffLen\e\
    [0m = gameScoreDiffDiffDiffDiffLen\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffDiffDiffDiffLen is already defined as \e[33mvalue\e\
    [0m \e[35mgameScoreDiffDiffDiffDiffLen\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0biidwou.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffDiffDiffDiffDiff\e\
    [0m = gameScoreDiffDiffDiffDiffDiff.map { \e[33mcase\e[0m (diff, diffIndex) =>\
    \ diff -> diffIndex }.toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffDiffDiffDiffDiff is already defined as \e[33mvalue\e\
    [0m \e[35mgameScoreDiffDiffDiffDiffDiff\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0biidwou.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffDiffDiffDiffLen\e\
    [0m = gameScoreDiffDiffDiffDiffLen\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffDiffDiffDiffLen is already defined as \e[33mvalue\e\
    [0m \e[35mgameScoreDiffDiffDiffDiffLen\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0biidwou.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffDiffDiffDiffDiff\e\
    [0m = gameScoreDiffDiffDiffDiffDiff.map { \e[33mcase\e[0m (diff, diffIndex) =>\
    \ diff -> diffIndex }.toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659797998
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameLength = game.length\n        val guessLength = guess.length\n \
    \       val result = new Array[Long](guessLength)\n        var i = 0\n       \
    \ while (i < guessLength) {\n            var j = 0\n            while (j < gameLength)\
    \ {\n                if (game(j) == guess(i)) {\n                    result(j)\
    \ = 0\n                } else {\n                    result(j) = abs(game(j) -\
    \ guess(i))\n                }\n                j += 1\n            }\n      \
    \      i += 1\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4unhw6x4.scala:31:8\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797996
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameLength = game.size\n        val guessLength = guess.size\n     \
    \   val result = new mutable.ArrayList[Long](guessLength)\n        val gameScores\
    \ = game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n  \
    \      val guessScores = guess.zipWithIndex.map { case (score, index) => score\
    \ -> index }.toMap\n        val gameScore = gameScores.map { case (score, index)\
    \ => score }.toList\n        val guessScore = guessScores.map { case (score, index)\
    \ => score }.toList\n        var gameIndex = 0\n        var guessIndex = 0\n \
    \       var gameScoreDiff = 0\n        var guessScoreDiff = 0\n        while (gameIndex\
    \ < gameLength && guessIndex < guessLength) {\n            val gameScore = gameScore(gameIndex)\n\
    \            val guessScore = guessScore(guessIndex)\n            val gameScoreDiff\
    \ = gameScore - guessScore\n            val guessScoreDiff = guessScore - gameScore\n\
    \            if (gameScoreDiff == guessScoreDiff) {\n                result.add(0)\n\
    \            } else {\n                result.add(Math.abs(gameScoreDiff))\n \
    \           }\n            gameIndex += 1\n            guessIndex += 1\n     \
    \   }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpndz75b62.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ArrayList[\e[35mLong\e[0m](guessLength)\n\e[31m\e[31m   |\e[0m   \
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpndz75b62.scala:27:28\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e\
    [0m \e[36mgameScore\e[0m = gameScore(gameIndex)\n\e[31m\e[31m   |\e[0m       \
    \                     ^\e[0m\n\e[31m   |\e[0m                            Recursive\
    \ \e[33mvalue\e[0m \e[35mgameScore\e[0m needs type\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpndz75b62.scala:28:29 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33mval\e[0m \e[36mguessScore\e[0m = guessScore(guessIndex)\n\
    \e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m    \
    \                         Recursive \e[33mvalue\e[0m \e[35mguessScore\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659797991
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val guesses = guess.toList\n        val scores = game.toList\n        val\
    \ guessesCount = guesses.size\n        val scoresCount = scores.size\n       \
    \ val result = new Array[Long](guessesCount)\n        var i = 0\n        while\
    \ (i < guessesCount) {\n            val guess = guesses(i)\n            val score\
    \ = scores(i)\n            val diff = Math.abs(guess - score)\n            result(i)\
    \ = diff\n            i += 1\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvw97g36w.scala:28:8\
    \ ---------------------\e[0m\e[0m\n\e[31m28 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797996
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameSet = game.distinct\n        val guessSet = guess.distinct\n   \
    \     val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val result = new mutable.ArrayList[Long](guessSetSize)\n        val gameSetIterator\
    \ = gameSet.iterator\n        val guessSetIterator = guessSet.iterator\n     \
    \   val gameSetIteratorResult = gameSetIterator.next()\n        val guessSetIteratorResult\
    \ = guessSetIterator.next()\n        val gameSetIteratorResultSize = gameSetIteratorResult.size\n\
    \        val guessSetIteratorResultSize = guessSetIteratorResult.size\n      \
    \  var gameSetIteratorResultIndex = 0\n        var guessSetIteratorResultIndex\
    \ = 0\n        var gameSetIteratorResultIndexSize = 0\n        var guessSetIteratorResultIndexSize\
    \ = 0\n        var gameSetIteratorResultIndexSize2 = 0\n        var guessSetIteratorResultIndexSize2\
    \ = 0\n        var gameSetIteratorResultIndexSize3 = 0\n        var guessSetIteratorResultIndexSize3\
    \ = 0\n        var gameSetIteratorResultIndexSize4 = 0\n        var guessSetIteratorResultIndexSize4\
    \ = 0\n        var gameSetIteratorResultIndexSize5 = 0\n        var guessSetIteratorResultIndexSize5\
    \ = 0\n        var gameSetIteratorResultIndexSize6 = 0\n        var guessSetIteratorResultIndexSize6\
    \ = 0\n        var gameSetIteratorResultIndexSize7 = 0\n        var guessSetIteratorResultIndexSize7\
    \ = 0\n        var gameSetIteratorResultIndexSize8 = 0\n        var guessSetIteratorResultIndexSize8\
    \ = 0\n        var gameSetIteratorResultIndexSize9 = 0\n        var guessSetIteratorResultIndexSize9\
    \ = 0\n        var gameSetIteratorResultIndexSize10 = 0\n        var guessSetIteratorResultIndexSize10\
    \ = 0\n        var gameSetIteratorResultIndexSize11 = 0\n        var guessSetIteratorResultIndexSize11\
    \ = 0\n        var gameSetIteratorResultIndexSize12 = 0\n        var guessSetIteratorResultIndexSize12\
    \ = 0\n        var gameSetIteratorResultIndexSize13 = 0\n        var guessSetIteratorResultIndexSize13\
    \ = 0\n        var gameSetIteratorResultIndexSize14 = 0\n        var guessSetIteratorResultIndexSize14\
    \ = 0\n        var gameSetIteratorResultIndexSize15 = 0\n        var guessSetIteratorResultIndexSize15\
    \ = 0\n        var gameSetIteratorResultIndexSize16 = 0\n        var guessSetIteratorResultIndexSize16\
    \ = 0\n        var gameSetIteratorResultIndexSize17 = 0\n        var guessSetIteratorResultIndexSize17\
    \ = 0\n        var gameSetIteratorResultIndexSize18 = 0\n        var guessSetIteratorResultIndexSize18\
    \ = 0\n        var gameSetIteratorResultIndexSize19 = 0\n        var guessSetIteratorResultIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcs4zochb.scala:66:4 ----------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcs4zochb.scala:19:25\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ArrayList[\e[35mLong\e[0m](guessSetSize)\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpcs4zochb.scala:24:62 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mgameSetIteratorResultSize\e[0m\
    \ = gameSetIteratorResult.size\n\e[31m\e[31m   |\e[0m                        \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                          value size is not a member of Long\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpcs4zochb.scala:25:64 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mguessSetIteratorResultSize\e\
    [0m = guessSetIteratorResult.size\n\e[31m\e[31m   |\e[0m                     \
    \                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                               value size is not a member of Long\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpcs4zochb.scala:66:5 ---------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1659797999
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameLen = game.length\n        val guessLen = guess.length\n       \
    \ val result = new Array[Long](guessLen)\n        var i = 0\n        while (i\
    \ < guessLen) {\n            val gameScore = game(i)\n            val guessScore\
    \ = guess(i)\n            val diff = guessScore - gameScore\n            if (diff\
    \ < 0) {\n                diff = -diff\n            }\n            result(i) =\
    \ diff\n            i += 1\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpcos7dh4w.scala:24:21 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                diff = -diff\n\e[31m\e[31m   |\e[0m \
    \               ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val diff\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcos7dh4w.scala:29:8\
    \ ---------------------\e[0m\e[0m\n\e[31m29 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797997
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreCount = gameScores.count\n        val guessScoreCount\
    \ = guessScores.count\n        val gameScoreDiff = gameScoreCount - guessScoreCount\n\
    \        val guessScoreDiff = guessScoreCount - gameScoreCount\n        val gameScoreDiffs\
    \ = gameScoreDiff.zipWithIndex.map { case (diff, index) => diff }\n        val\
    \ guessScoreDiffs = guessScoreDiff.zipWithIndex.map { case (diff, index) => diff\
    \ }\n        val gameScoreDiffSum = gameScoreDiffs.sum\n        val guessScoreDiffSum\
    \ = guessScoreDiffs.sum\n        val gameScoreDiffAverage = gameScoreDiffSum /\
    \ gameScoreCount\n        val guessScoreDiffAverage = guessScoreDiffSum / guessScoreCount\n\
    \        val gameScoreDiffAverages = gameScoreDiffAverage.zipWithIndex.map { case\
    \ (diff, index) => diff }\n        val guessScoreDiffAverages = guessScoreDiffAverage.zipWithIndex.map\
    \ { case (diff, index) => diff }\n        val gameScoreDiffAverageSum = gameScoreDiffAverages.sum\n\
    \        val guessScoreDiffAverageSum = guessScoreDiffAverages.sum\n        val\
    \ gameScoreDiffAverageAverage = gameScoreDiffAverageSum / gameScoreCount\n   \
    \     val guessScoreDiffAverageAverage = guessScoreDiffAverageSum / guessScoreCount\n\
    \        val gameScoreDiffAverageAverages = gameScoreDiffAverageAverage.zipWithIndex.map\
    \ { case (diff, index) => diff }\n        val guessScoreDiffAverageAverages =\
    \ guessScoreDiffAverageAverage.zipWithIndex.map { case (diff, index) => diff }\n\
    \        val gameScoreDiffAverageAverageSum = gameScoreDiffAverageAverages.sum\n\
    \        val guessScoreDiffAverageAverageSum = guessScoreDiffAverageAverages.sum\n\
    \        val gameScoreDiffAverageAverageAverage = gameScoreDiffAverageAverageSum\
    \ / gameScoreCount\n        val guessScoreDiffAverageAverageAverage = guessScoreDiffAverageAverageSum\
    \ / guessScoreCount\n        val gameScoreDiffAverageAverageAverages = gameScoreDiffAverageAverageAverage.zipWithIndex.map\
    \ { case (diff, index) => diff }\n        val guessScoreDiffAverageAverageAverages\
    \ = guessScoreDiffAverageAverage.zipWithIndex.map { case (diff, index) => diff\
    \ }\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp39_u69_w.scala:41:11 ---------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp39_u69_w.scala:19:43 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiff\e[0m = gameScoreCount\
    \ - guessScoreCount\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue - is not a member of (Long => Boolean) => Int, but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp39_u69_w.scala:20:45 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mguessScoreDiff\e[0m = guessScoreCount\
    \ - gameScoreCount\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue - is not a member of (Long => Boolean) => Int, but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp39_u69_w.scala:42:5 ---------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659798000
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreCount = gameScores.count\n        val guessScoreCount\
    \ = guessScores.count\n        val gameScoreDiffs = gameScores.zip(guessScores).map\
    \ { case (gameScore, guessScore) =>\n            val diff = gameScore - guessScore\n\
    \            if (diff < 0) diff else diff\n        }\n        val gameScoreDiffCount\
    \ = gameScoreDiffs.count\n        val gameScoreDiffDiffs = gameScoreDiffs.zip(gameScores).map\
    \ { case (gameScoreDiff, gameScore) =>\n            val diff = gameScoreDiff -\
    \ gameScore\n            if (diff < 0) diff else diff\n        }\n        val\
    \ gameScoreDiffDiffCount = gameScoreDiffDiffs.count\n        val gameScoreDiffDiffDiffs\
    \ = gameScoreDiffDiffs.zip(gameScores).map { case (gameScoreDiffDiff, gameScore)\
    \ =>\n            val diff = gameScoreDiffDiff - gameScore\n            if (diff\
    \ < 0) diff else diff\n        }\n        val gameScoreDiffDiffDiffCount = gameScoreDiffDiffDiffs.count\n\
    \        val gameScoreDiffDiffDiffDiffs = gameScoreDiffDiffDiffs.zip(gameScores).map\
    \ { case (gameScoreDiffDiffDiff, gameScore) =>\n            val diff = gameScoreDiffDiffDiff\
    \ - gameScore\n            if (diff < 0) diff else diff\n        }\n        val\
    \ gameScoreDiffDiffDiffDiffCount = gameScoreDiffDiffDiffDiffs.count\n        val\
    \ gameScoreDiffDiffDiffDiffDiffs = gameScoreDiffDiffDiffDiffs.zip(gameScores).map\
    \ { case (gameScoreDiffDiffDiffDiff, gameScore) =>\n            val diff = gameScoreDiffDiffDiffDiff\
    \ - gameScore\n            if (diff < 0) diff else diff\n        }\n        val\
    \ gameScoreDiffDiffDiffDiffDiffCount = gameScoreDiffDiffDiffDiffDiffs.count\n\
    \        val gameScoreDiffDiffDiffDiffDiffDiffs = gameScoreDiffDiffDiffDiffDiffs.zip(gameScores).map\
    \ { case (gameScoreDiffDiffDiffDiffDiff, gameScore) =>\n            val diff =\
    \ gameScoreDiffDiffDiffDiffDiff - gameScore\n            if (diff < 0) diff else\
    \ diff\n        }\n        val gameScoreDiffDiffDiffDiffDiffDiffCount = gameScoreDiffDiffDiffDiffDiffDiffs.count\n\
    \        val gameScoreDiffDiffDiffDiffDiffDiffDiffs = gameScoreDiffDiffDiffDiffDiffDiff\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptabusbrw.scala:49:53 ------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffDiffDiffDiffDiffDiffDiffs\e\
    [0m = gameScoreDiffDiffDiffDiffDiffDiff\n\e[31m\e[31m   |\e[0m               \
    \                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: gameScoreDiffDiffDiffDiffDiffDiff\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptabusbrw.scala:50:5\
    \ ---------------------\e[0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797998
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.zipWithIndex.map(x => (x._2, x._1)).toMap\n      \
    \  val guessesScores = guess.zipWithIndex.map(x => (x._2, x._1)).toMap\n     \
    \   val guessesWithScores = guessesScores.map(x => (x._1, x._2))\n        val\
    \ guessesWithIndexes = guessesWithScores.map(x => (x._2, x._1))\n        val guessesWithIndexesSorted\
    \ = guessesWithIndexes.sortBy(x => x._1)\n        val guessesWithIndexesSortedWithScores\
    \ = guessesWithIndexesSorted.map(x => (x._2, x._1))\n        val guessesWithIndexesSortedWithScoresSorted\
    \ = guessesWithIndexesSortedWithScores.sortBy(x => x._1)\n        val guessesWithIndexesSortedWithScoresSortedWithIndex\
    \ = guessesWithIndexesSortedWithScoresSorted.map(x => (x._2, x._1))\n        val\
    \ guessesWithIndexesSortedWithScoresSortedWithIndexSorted = guessesWithIndexesSortedWithScoresSortedWithIndex.sortBy(x\
    \ => x._1)\n        val guessesWithIndexesSortedWithScoresSortedWithIndexSortedWithScores\
    \ = guessesWithIndexesSortedWithScoresSortedWithIndexSortedWithScores.map(x =>\
    \ (x._2, x._1))\n        val guessesWithIndexesSortedWithScoresSortedWithIndexSortedWithScoresSorted\
    \ = guessesWithIndexesSortedWithScoresSortedWithIndexSortedWithScoresSorted.sortBy(x\
    \ => x._1)\n        val guessesWithIndexesSortedWithScoresSortedWithIndexSortedWithScoresSortedWithIndex\
    \ = guessesWithIndexesSortedWithScoresSortedWithIndexSortedWithScoresSortedWithIndexSorted.map(x\
    \ => (x._2, x._1))\n        val guessesWithIndexesSortedWithScoresSortedWithIndexSortedWithScoresSortedWithIndexSorted\
    \ = guessesWithIndexesSortedWithScoresSortedWithIndexSortedWithScoresSortedWithIndexSortedWithIndex.sortBy(x\
    \ => x._1)\n        val guessesWithIndexesSortedWithScoresSortedWithIndexSortedWithScoresSortedWithIndexSortedWithIndexSorted\
    \ = guessesWithIndexesSortedWithScoresSortedWithIndexSortedWithScoresSortedWithIndexSortedWithIndexSortedWithIndex.sortBy(x\
    \ => x._1)\n        val guessesWithIndexesSortedWithScoresSortedWithIndexSorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpk49bhzce.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk49bhzce.scala:19:58\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mguessesWithIndexesSorted\e[0m = guessesWithIndexes.sortBy(\e[36mx\e[0m =>\
    \ x._1)\n\e[31m\e[31m   |\e[0m                                       ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          value sortBy is not a member of\
    \ Map[Long, Int]\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpk49bhzce.scala:24:80\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessesWithIndexesSortedWithScoresSortedWithIndexSortedWithScores\e[0m\
    \ = guessesWithIndexesSortedWithScoresSortedWithIndexSortedWithScores.map(\e[36mx\e\
    [0m => (x._2, x._1))\n\e[31m\e[31m   |\e[0m                                  \
    \                                              ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35mguessesWithIndexesSortedWithScoresSortedWithIndexSortedWithScores\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpk49bhzce.scala:25:86\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessesWithIndexesSortedWithScoresSortedWithIndexSortedWithScoresSorted\e\
    [0m = guessesWithIndexesSortedWithScoresSortedWithIndexSortedWithScoresSorted.sortBy(\e\
    [36mx\e[0m => x._1)\n\e[31m\e[31m   |\e[0m                                   \
    \                                                   ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35mguessesWithIndexesSortedWithScoresSortedWithIndexSortedWithScoresSorted\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk49bhzce.scala:27:101\
    \ -----------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mguessesWithIndexesSortedWithScoresSortedWithIndexSortedWithScore"
  stdout: ''
  timestamp: 1659797999
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap =\
    \ guessScores.toMap\n        val gameScoreKeys = gameScoreMap.keys\n        val\
    \ guessScoreKeys = guessScoreMap.keys\n        val gameScoreValues = gameScoreMap.values.toList\n\
    \        val guessScoreValues = guessScoreMap.values.toList\n        val gameScoreKeySet\
    \ = gameScoreKeys.toSet\n        val guessScoreKeySet = guessScoreKeys.toSet\n\
    \        val gameScoreValueSet = gameScoreValues.toSet\n        val guessScoreValueSet\
    \ = guessScoreValues.toSet\n        val gameScoreKeySetSize = gameScoreKeySet.size\n\
    \        val guessScoreKeySetSize = guessScoreKeySet.size\n        val gameScoreValueSetSize\
    \ = gameScoreValueSet.size\n        val guessScoreValueSetSize = guessScoreValueSet.size\n\
    \        val gameScoreKeySetSize = gameScoreKeySet.size\n        val guessScoreKeySetSize\
    \ = guessScoreKeySet.size\n        val gameScoreValueSetSize = gameScoreValueSet.size\n\
    \        val guessScoreValueSetSize = guessScoreValueSet.size\n        val gameScoreKeySetSize\
    \ = gameScoreKeySet.size\n        val guessScoreKeySetSize = guessScoreKeySet.size\n\
    \        val gameScoreValueSetSize = gameScoreValueSet.size\n        val guessScoreValueSetSize\
    \ = guessScoreValueSet.size\n        val gameScoreKeySetSize = gameScoreKeySet.size\n\
    \        val guessScoreKeySetSize = guessScoreKeySet.size\n        val gameScoreValueSetSize\
    \ = gameScoreValueSet.size\n        val guessScoreValueSetSize = guessScoreValueSet.size\n\
    \        val gameScoreKeySetSize = gameScoreKeySet.size\n        val guessScoreKeySetSize\
    \ = guessScoreKeySet.size\n        val gameScoreValueSetSize = gameScoreValueSet.size\n\
    \        val guessScoreValueSetSize = guessScoreValueSet.size\n        val gameScoreKeySetSize\
    \ = gameScoreKeySet.size\n        val guessScoreKeySetSize = guessScoreKeySet.size\n\
    \        val gameScoreValueSetSize = gameScoreValueSet.size\n        val guessScoreValueSetSize\
    \ = guessScoreValueSet.size\n        val gameScoreKeySetSize = gameScoreKeySet.size\n\
    \        val guessScoreKeySetSize = guessScoreKeySet.size\n        val gameScoreValueSetSize\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp2zoagfn9.scala:53:35 ---------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m        \e[33mval\e[0m \e[36mgameScoreValueSetSize\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m\
    \   |\e[0m                                   expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2zoagfn9.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreKeySetSize\e[0m = gameScoreKeySet.size\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mgameScoreKeySetSize\
    \ is already defined as \e[33mvalue\e[0m \e[35mgameScoreKeySetSize\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp2zoagfn9.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mguessScoreKeySetSize\e[0m = guessScoreKeySet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreKeySetSize is already defined as \e[33mvalue\e[0m\
    \ \e[35mguessScoreKeySetSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp2zoagfn9.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgameScoreValueSetSize\e\
    [0m = gameScoreValueSet.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreValueSetSize is already defined as \e[33mvalue\e\
    [0m \e[35mgameScoreValueSetSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2zoagfn9.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mguessScoreValueSetSize\e\
    [0m = guessScoreValueSet.si"
  stdout: ''
  timestamp: 1659798010
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.zipWithIndex.map{ case (score, index) => score }.toList\n\
    \        val guessesScores = guess.zipWithIndex.map{ case (score, index) => score\
    \ }.toList\n        val gameScoreMap = gameScores.groupBy(_._2).mapValues(_.map(_._1)).toMap\n\
    \        val guessesScoreMap = guessesScores.groupBy(_._2).mapValues(_.map(_._1)).toMap\n\
    \        val gameScoreList = gameScoreMap.values.toList\n        val guessesScoreList\
    \ = guessesScoreMap.values.toList\n        val gameScores = gameScoreList.zip(guessesScoreList).map\
    \ { case (gameScore, guessesScore) =>\n            val difference = gameScore\
    \ - guessesScore\n            val differenceAbs = math.abs(difference)\n     \
    \       if (difference < 0)\n                differenceAbs\n            else\n\
    \                differenceAbs\n        }\n        gameScores.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0gevb7m2.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = gameScoreList.zip(guessesScoreList).map\
    \ { \e[33mcase\e[0m (gameScore, guessesScore) =>\n\e[31m\e[31m   |\e[0m      \
    \  ^\e[0m\n\e[31m   |\e[0mgameScores is already defined as \e[33mvalue\e[0m \e\
    [35mgameScores\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m22 |\e\
    [0m            \e[33mval\e[0m \e[36mdifference\e[0m = gameScore - guessesScore\n\
    \e[31m23 |\e[0m            \e[33mval\e[0m \e[36mdifferenceAbs\e[0m = math.abs(difference)\n\
    \e[31m24 |\e[0m            \e[33mif\e[0m (difference < \e[31m0\e[0m)\n\e[31m25\
    \ |\e[0m                differenceAbs\n\e[31m26 |\e[0m            \e[33melse\e\
    [0m\n\e[31m27 |\e[0m                differenceAbs\n\e[31m28 |\e[0m        }\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp0gevb7m2.scala:17:48 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.groupBy(_._2).mapValues(_.map(_._1)).toMap\n\
    \e[31m\e[31m   |\e[0m                                              ^^^^\e[0m\n\
    \e[31m   |\e[0m                                        value _2 is not a member\
    \ of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0gevb7m2.scala:17:70\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mgameScoreMap\e[0m = gameScores.groupBy(_._2).mapValues(_.map(_._1)).toMap\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \            ^^^^\e[0m\n\e[31m   |\e[0m                                      \
    \  value _1 is not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0gevb7m2.scala:18:54\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mguessesScoreMap\e[0m = guessesScores.groupBy(_._2).mapValues(_.map(_._1)).toMap\n\
    \e[31m\e[31m   |\e[0m                                                    ^^^^\e\
    [0m\n\e[31m   |\e[0m                                        value _2 is not a\
    \ member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0gevb7m2"
  stdout: ''
  timestamp: 1659798013
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameLength = game.size\n        val guessLength = guess.size\n     \
    \   val result = new Array[Long](guessLength)\n        val gameScores = game.map(x\
    \ => if (x == 0) 0 else x)\n        val guessScores = guess.map(x => if (x ==\
    \ 0) 0 else x)\n        var i = 0\n        while (i < guessLength) {\n       \
    \     result(i) = gameScores(i) - guessScores(i)\n            i += 1\n       \
    \ }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt73zzw8z.scala:25:8\
    \ ---------------------\e[0m\e[0m\n\e[31m25 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798013
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreCount = gameScores.count\n        val guessScoreCount\
    \ = guessScores.count\n        val gameScoreSum = gameScores.sum\n        val\
    \ guessScoreSum = guessScores.sum\n        val gameScoreDiff = gameScoreSum -\
    \ guessScoreSum\n        val guessScoreDiff = guessScoreSum - gameScoreSum\n \
    \       val gameScoreDiffs = gameScoreDiff.zip(gameScores).map { case (diff, score)\
    \ => diff - score }\n        val guessScoreDiffs = guessScoreDiff.zip(guessScores).map\
    \ { case (diff, score) => diff - score }\n        val gameScoreDiffCount = gameScoreDiffs.count\n\
    \        val guessScoreDiffCount = guessScoreDiffs.count\n        val gameScoreDiffSum\
    \ = gameScoreDiffs.sum\n        val guessScoreDiffSum = guessScoreDiffs.sum\n\
    \        val gameScoreDiffDiff = gameScoreDiffSum - guessScoreDiffSum\n      \
    \  val guessScoreDiffDiff = guessScoreDiffSum - gameScoreDiffSum\n        val\
    \ gameScoreDiffDiffs = gameScoreDiffDiff.zip(gameScores).map { case (diff, score)\
    \ => diff - score }\n        val guessScoreDiffDiffs = guessScoreDiffDiff.zip(guessScores).map\
    \ { case (diff, score) => diff - score }\n        val gameScoreDiffDiffCount =\
    \ gameScoreDiffDiffs.count\n        val guessScoreDiffDiffCount = guessScoreDiffDiffs.count\n\
    \        val gameScoreDiffDiffSum = gameScoreDiffDiffs.sum\n        val guessScoreDiffDiffSum\
    \ = guessScoreDiffDiffs.sum\n        val gameScoreDiffDiffDiff = gameScoreDiffDiffSum\
    \ - guessScoreDiffDiffSum\n        val guessScoreDiffDiffDiff = guessScoreDiffDiffSum\
    \ - gameScoreDiffDiffSum\n        val gameScoreDiffDiffDiffs = gameScoreDiffDiffDiff.zip(gameScores).map\
    \ { case (diff, score) => diff - score }\n        val guessScoreDiffDiffDiffs\
    \ = guessScoreDiffDiffDiff.zip(guessScores).map { case (diff, score) => diff -\
    \ score }\n        val gameScoreDiffDiffDiffCount = gameScoreDiffDiffDiffs.count\n\
    \        val guessScoreDiffDiffCount = guessScoreDiffDiffs.count\n        val\
    \ gameScoreDiffDiffSum = game\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong,\
    \ -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0g_p6whg.scala:42:12 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mguessScoreDiffDiffCount\e\
    [0m = guessScoreDiffDiffs.count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreDiffDiffCount is already defined as \e[33mvalue\e\
    [0m \e[35mguessScoreDiffDiffCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0g_p6whg.scala:43:12 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffDiffSum\e[0m\
    \ = game\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mgameScoreDiffDiffSum is already defined as \e[33mvalue\e[0m \e[35mgameScoreDiffDiffSum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp0g_p6whg.scala:23:43 ------------------------\e[0m\e[0m\n\
    \e[31m23 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffs\e[0m = gameScoreDiff.zip(gameScores).map\
    \ { \e[33mcase\e[0m (diff, score) => diff - score }\n\e[31m\e[31m   |\e[0m   \
    \                          ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                  value zip is not a member of Long\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp0g_p6whg.scala:24:45 ------------------------\e[0m\e[0m\n\
    \e[31m24 |\e[0m        \e[33mval\e[0m \e[36mguessScoreDiffs\e[0m = guessScoreDiff.zip(guessScores).map\
    \ { \e[33mcase\e[0m (diff, score) => diff - score }\n\e[31m\e[31m   |\e[0m   \
    \                           ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                     value zip is not a member of Long\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp0g_p6whg.scala:44:5 ---------------------\e[0m\e\
    [0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    5 error"
  stdout: ''
  timestamp: 1659798018
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val guessesDiff = guessesScores.zip(gameScores).map { case (guess,\
    \ game) => math.abs(guess - game) }\n        guessesDiff.zipWithIndex.map { case\
    \ (diff, index) => diff }\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798000
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap =\
    \ guessScores.toMap\n        val gameScoreList = gameScores.toList\n        val\
    \ guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guess\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbsn9xo79.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreMap is already defined as \e[33mvalue\e[0m \e[35mgameScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbsn9xo79.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mguessScoreMap\e[0m = guessScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mguessScoreMap is already defined as \e[33mvalue\e[0m \e[35mguessScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbsn9xo79.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = gameScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreList is already defined as \e[33mvalue\e[0m \e[35mgameScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbsn9xo79.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessScoreList\e[0m = guessScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mguessScoreList is already defined as \e[33mvalue\e[0m \e[35mguessScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbsn9xo79.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreSet\e[0m = gameScores.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0"
  stdout: ''
  timestamp: 1659798018
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameLen = game.length\n        val guessLen = guess.length\n       \
    \ val result = new Array[Long](guessLen)\n        var i = 0\n        while (i\
    \ < guessLen) {\n            val gameScore = game(i)\n            val guessScore\
    \ = guess(i)\n            val diff = guessScore - gameScore\n            if (diff\
    \ < 0) {\n                diff = -diff\n            }\n            result(i) =\
    \ diff\n            i += 1\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpcos7dh4w.scala:24:21 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                diff = -diff\n\e[31m\e[31m   |\e[0m \
    \               ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val diff\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcos7dh4w.scala:29:8\
    \ ---------------------\e[0m\e[0m\n\e[31m29 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797997
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameSet = game.distinct\n        val guessSet = guess.distinct\n   \
    \     val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val result = new mutable.ListBuffer[Long]()\n        val gameSetIterator\
    \ = gameSet.iterator\n        val guessSetIterator = guessSet.iterator\n     \
    \   var gameSetIndex = 0\n        var guessSetIndex = 0\n        var gameSetScore\
    \ = 0\n        var guessSetScore = 0\n        var gameSetGuessScore = 0\n    \
    \    var guessSetGuessScore = 0\n        var gameSetGuessIndex = 0\n        var\
    \ guessSetGuessIndex = 0\n        var gameSetGuessScoreDiff = 0\n        var guessSetGuessScoreDiff\
    \ = 0\n        var gameSetGuessDiff = 0\n        var guessSetGuessDiff = 0\n \
    \       var gameSetGuessDiffIndex = 0\n        var guessSetGuessDiffIndex = 0\n\
    \        while (gameSetIndex < gameSetSize && guessSetIndex < guessSetSize) {\n\
    \            gameSetScore = gameSetIterator.next\n            guessSetScore =\
    \ guessSetIterator.next\n            gameSetGuessScore = gameSetScore - guessSetScore\n\
    \            guessSetGuessScore = guessSetScore - gameSetScore\n            gameSetGuessScoreDiff\
    \ = gameSetGuessScore - gameSetScore\n            guessSetGuessScoreDiff = guessSetGuessScore\
    \ - gameSetScore\n            gameSetGuessDiff = gameSetGuessScoreDiff + guessSetGuessScoreDiff\n\
    \            guessSetGuessDiff = guessSetGuessScoreDiff + gameSetGuessScoreDiff\n\
    \            gameSetGuessDiffIndex = gameSetGuessDiff.indexOf(0)\n           \
    \ guessSetGuessDiffIndex = guessSetGuessDiff.indexOf(0)\n            if (gameSetGuessDiffIndex\
    \ != -1 && guessSetGuessDiffIndex != -1) {\n                result.add(gameSetGuessDiffIndex\
    \ - guessSetGuessDiffIndex)\n            }\n            gameSetIndex += 1\n  \
    \          guessSetIndex += 1\n        }\n        return result.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps8cxvqyc.scala:19:25 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps8cxvqyc.scala:37:27\
    \ --------------------\e[0m\e[0m\n\e[31m37 |\e[0m            gameSetScore = gameSetIterator.next\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                           Found:    Long\n\e[31m   |\e[0m      \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmps8cxvqyc.scala:38:28 --------------------\e[0m\e[0m\n\e[31m38\
    \ |\e[0m            guessSetScore = guessSetIterator.next\n\e[31m\e[31m   |\e\
    [0m                            ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                         Found:    Long\n\e[31m   |\e[0m                    \
    \        Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps8cxvqyc.scala:45:53\
    \ ------------------------\e[0m\e[0m\n\e[31m45 |\e[0m            gameSetGuessDiffIndex\
    \ = gameSetGuessDiff.indexOf(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m            \
    \                        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                              value indexOf is not a member of Int\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmps8cxvqyc.scala:46:55 ------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m            guessSetGuessDiffIndex = guessSetGuessDiff.indexOf(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                     ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value indexOf is not a\
    \ member of Int\n5 errors found\n"
  stdout: ''
  timestamp: 1659798019
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameSize = game.size\n        val guessSize = guess.size\n        val\
    \ result = new Array[Long](guessSize)\n        var i = 0\n        while (i < guessSize)\
    \ {\n            val gameScore = game(i)\n            val guessScore = guess(i)\n\
    \            val diff = abs(guessScore - gameScore)\n            result(i) = diff\n\
    \            i += 1\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpapwz0f51.scala:26:8\
    \ ---------------------\e[0m\e[0m\n\e[31m26 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798016
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.map(x => if (x == 0) 0 else x)\n        val guessScores\
    \ = guess.map(x => if (x == 0) 0 else x)\n        val diffs = gameScores zip guessScores\n\
    \        val diffsSorted = diffs.sortBy(_._1).reverse\n        val diffsSortedWithZeros\
    \ = diffsSorted.takeWhile(_._1 == 0).map(_._2)\n        val diffsSortedWithZerosAndOnes\
    \ = diffsSorted.takeWhile(_._1 != 0).map(_._2)\n        diffsSortedWithZerosAndOnes.map(x\
    \ => if (x == 0) 0 else abs(x) - abs(diffsSortedWithZerosAndOnes.head))\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4g5e9_pt.scala:24)\n\tat Problem.main(tmp4g5e9_pt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798023
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameLen = game.size\n        val guessLen = guess.size\n        val\
    \ result = new Array[Long](guessLen)\n        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScoreMap.toList\n\
    \        val guessScoreList = guessScoreMap.toList\n        var gameIndex = 0\n\
    \        var guessIndex = 0\n        var gameScore = gameScoreList.head\n    \
    \    var guessScore = guessScoreList.head\n        var gameScoreDiff = gameScoreList.tail.head\n\
    \        var guessScoreDiff = guessScoreList.tail.head\n        var gameScoreDiffIndex\
    \ = 0\n        var guessScoreDiffIndex = 0\n        while (gameIndex < gameLen\
    \ && guessIndex < guessLen) {\n            if (gameScoreMap.get(gameIndex) ==\
    \ guessScoreMap.get(guessIndex)) {\n                gameScore = gameScoreList.apply(gameIndex)\n\
    \                guessScore = guessScoreList.apply(guessIndex)\n             \
    \   gameScoreDiff = gameScoreList.apply(gameIndex + 1)\n                guessScoreDiff\
    \ = guessScoreList.apply(guessIndex + 1)\n                gameScoreDiffIndex =\
    \ gameIndex + 1\n                guessScoreDiffIndex = guessIndex + 1\n      \
    \          gameIndex += 1\n                guessIndex += 1\n            } else\
    \ if (gameScoreMap.get(gameIndex) > guessScoreMap.get(guessIndex)) {\n       \
    \         gameScore = gameScoreList.apply(gameIndex)\n                guessScore\
    \ = guessScoreList.apply(guessIndex)\n                gameScoreDiff = gameScoreList.apply(gameIndex\
    \ + 1)\n                guessScoreDiff = guessScoreList.apply(guessIndex + 1)\n\
    \                gameScoreDiffIndex = gameIndex + 1\n                guessScoreDiffIndex\
    \ = guessIndex + 1\n                gameIndex += 1\n            } else {\n   \
    \             gameScore = gameScoreList.apply(gameIndex)\n                guessScore\
    \ = guessScoreList.apply(guessIndex)\n                gameScoreDiff = gameScoreList.apply(gameIndex\
    \ + 1)\n                guessScoreDiff = guessScoreList.apply(guessIndex + 1)\n\
    \                gameScoreDiffIndex = gameIndex + 1\n                guessScoreDiffIndex\
    \ = guessIndex + 1\n                gameIndex += 1\n                guessIndex\
    \ += 1\n            }\n        }\n        while (gameIndex < gameLen) {\n    \
    \        gameScore = gameScoreList.apply(gameIndex)\n            guessScore =\
    \ guessScoreList.apply(guessIndex)\n            gameScoreDiff = gameScoreList.apply(gameIndex\
    \ + 1)\n            guessScoreDiff = guessScoreList.apply(guessIndex + 1)\n  \
    \          \n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmj_700wb.scala:76:0 ----------------------------\e\
    [0m\e[0m\n\e[31m76 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- Error: /tmp/tmpmj_700wb.scala:20:43 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.toMap\n\
    \e[31m\e[31m   |\e[0m                                           ^\e[0m\n\e[31m\
    \   |\e[0m                                       Cannot prove that Long <:< (K,\
    \ V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                       where:\
    \    K is a type variable\n\e[31m   |\e[0m                                   \
    \              V is a type variable\n\e[31m   |\e[0m                         \
    \              .\n\e[31m\e[31m-- Error: /tmp/tmpmj_700wb.scala:21:45 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mguessScoreMap\e[0m = guessScores.toMap\n\
    \e[31m\e[31m   |\e[0m                                             ^\e[0m\n\e[31m\
    \   |\e[0m                                       Cannot prove that Long <:< (K,\
    \ V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                       where:\
    \    K is a type variable\n\e[31m   |\e[0m                                   \
    \              V is a type variable\n\e[31m   |\e[0m                         \
    \              .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmj_700wb.scala:75:1\
    \ ---------------------\e[0m\e[0m\n\e[31m75 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpmj_700wb.scala:68:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m68 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 errors found\n"
  stdout: ''
  timestamp: 1659798022
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameSet = game.distinct\n        val guessSet = guess.distinct\n   \
    \     val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSet\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpo704znnh.scala:63:4 ----------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo704znnh.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameSetSize\e[0m = gameSetSize.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameSetSize is already defined as \e[33mvalue\e[0m \e[35mgameSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpo704znnh.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mguessSetSize\e[0m = guessSetSize.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mguessSetSize is already defined as \e[33mvalue\e[0m \e[35mguessSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpo704znnh.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mgameSetSize\e[0m = gameSetSize.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameSetSize is already defined as \e[33mvalue\e[0m \e[35mgameSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpo704znnh.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mguessSetSize\e[0m = guessSetSize.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mguessSetSize is already defined as \e[33mvalue\e[0m \e[35mguessSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpo704znnh.scala:23:12 ----------"
  stdout: ''
  timestamp: 1659797973
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.zipWithIndex.map { case (score, index) => (index,\
    \ score) }.toMap\n        val guessesScores = guess.zipWithIndex.map { case (score,\
    \ index) => (index, score) }.toMap\n        val guessesWithScores = guessesScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val guessesWithIndexes\
    \ = guessesWithScores.map { case (index, score) => (index, score) }.toMap\n  \
    \      val guessesWithIndexesWithScores = guessesWithIndexes.map { case (index,\
    \ score) => (index, score) }.toMap\n        val guessesWithIndexesWithScoreAndScores\
    \ = guessesWithIndexesWithScores.map { case (index, score) => (index, score, gameScores(index))\
    \ }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScores = guessesWithIndexesWithScoreAndScores.map\
    \ { case (index, score, score) => (index, score, score, gameScores(index)) }.toMap\n\
    \        val guessesWithIndexesWithScoreAndScoreAndScoreAndScores = guessesWithIndexesWithScoreAndScoreAndScores.map\
    \ { case (index, score, score, score) => (index, score, score, score, gameScores(index))\
    \ }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScores\
    \ = guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScores.map { case (index,\
    \ score, score, score, score) => (index, score, score, score, score, gameScores(index))\
    \ }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScoreAndScores\
    \ = guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScoreAndScores.map {\
    \ case (index, score, score, score, score, score) => (index, score, score, score,\
    \ score, score, gameScores(index)) }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScores\
    \ = guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScores.map\
    \ { case (index, score, score, score, score, score, score) => (index, score, score,\
    \ score, score, score, score, gameScores(index)) }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScores\
    \ = guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScore\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp8pgrt80d.scala:20:150 ----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mguessesWithIndexesWithScoreAndScores\e\
    [0m = guessesWithIndexesWithScores.map { \e[33mcase\e[0m (index, score) => (index,\
    \ score, gameScores(index)) }.toMap\n\e[31m\e[31m   |\e[0m                   \
    \                                                                            \
    \                                                       ^\e[0m\n\e[31m   |\e[0m\
    \                          Cannot prove that (Int, Long, Long) <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                          where:    K is a type\
    \ variable\n\e[31m   |\e[0m                                    V is a type variable\n\
    \e[31m   |\e[0m                          .\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp8pgrt80d.scala:23:75 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mguessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScores\e\
    [0m = guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScores.map { \e[33mcase\e\
    [0m (index, score, score, score, score) => (index, score, score, score, score,\
    \ gameScores(index)) }.toMap\n\e[31m\e[31m   |\e[0m                          \
    \                                                 ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35mguessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScores\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8pgrt80d.scala:24:83\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScoreAndScores\e\
    [0m = guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScoreAndScores.map\
    \ { \e[33mcase\e[0m (index, score, score, score, score, score) => (index, score,\
    \ score, score, score, score, gameScores(index)) }.toMap\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \       ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mguessesWithIndexesWithScoreAndScoreAndSco"
  stdout: ''
  timestamp: 1659798021
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.map(x => if (x == 0) 0 else x)\n        val guessScores\
    \ = guess.map(x => if (x == 0) 0 else x)\n        val gameScoreCount = gameScores.count(x\
    \ => x == 0)\n        val guessScoreCount = guessScores.count(x => x == 0)\n \
    \       val gameScoreSum = gameScores.sum\n        val guessScoreSum = guessScores.sum\n\
    \        val gameScoreDiff = gameScoreSum - guessScoreSum\n        val guessScoreDiff\
    \ = guessScoreSum - gameScoreSum\n        val gameScoreDiffPercent = gameScoreDiff\
    \ / gameScoreCount * 100\n        val guessScoreDiffPercent = guessScoreDiff /\
    \ guessScoreCount * 100\n        val gameScoreDiffPercent = gameScoreDiff / gameScoreCount\
    \ * 100\n        val guessScoreDiffPercent = guessScoreDiff / guessScoreCount\
    \ * 100\n        val gameScoreDiffPercent = gameScoreDiff / gameScoreCount * 100\n\
    \        val guessScoreDiffPercent = guessScoreDiff / guessScoreCount * 100\n\
    \        val gameScoreDiffPercent = gameScoreDiff / gameScoreCount * 100\n   \
    \     val guessScoreDiffPercent = guessScoreDiff / guessScoreCount * 100\n   \
    \     val gameScoreDiffPercent = gameScoreDiff / gameScoreCount * 100\n      \
    \  val guessScoreDiffPercent = guessScoreDiff / guessScoreCount * 100\n      \
    \  val gameScoreDiffPercent = gameScoreDiff / gameScoreCount * 100\n        val\
    \ guessScoreDiffPercent = guessScoreDiff / guessScoreCount * 100\n        val\
    \ gameScoreDiffPercent = gameScoreDiff / gameScoreCount * 100\n        val guessScoreDiffPercent\
    \ = guessScoreDiff / guessScoreCount * 100\n        val gameScoreDiffPercent =\
    \ gameScoreDiff / gameScoreCount * 100\n        val guessScoreDiffPercent = guessScoreDiff\
    \ / guessScoreCount * 100\n        val gameScoreDiffPercent = gameScoreDiff /\
    \ gameScoreCount * 100\n        val guessScoreDiffPercent = guessScoreDiff / guessScoreCount\
    \ * 100\n        val gameScoreDiffPercent = gameScoreDiff / gameScoreCount * 100\n\
    \        val guessScoreDiffPercent = guessScoreDiff / guessScoreCount * 100\n\
    \        val gameScoreDiffPercent = gameScoreDiff / gameScoreCount * 100\n   \
    \     val guessScoreDiffPercent = guessScoreDiff / guessScoreCount * 100\n   \
    \     val gameScoreDiffPercent = \n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp53rdsyb2.scala:45:34 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffPercent\e[0m\
    \ = \n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m  \
    \ |\e[0m                                  expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp53rdsyb2.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreDiffPercent\e[0m = gameScoreDiff / gameScoreCount * \e[31m100\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffPercent is already defined as \e[33mvalue\e[0m\
    \ \e[35mgameScoreDiffPercent\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp53rdsyb2.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mguessScoreDiffPercent\e\
    [0m = guessScoreDiff / guessScoreCount * \e[31m100\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreDiffPercent is already defined as \e[33mvalue\e\
    [0m \e[35mguessScoreDiffPercent\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp53rdsyb2.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffPercent\e[0m\
    \ = gameScoreDiff / gameScoreCount * \e[31m100\e[0m\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mgameScoreDiffPercent is already defined as \e[33mvalue\e[0m \e[35mgameScoreDiffPercent\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp53rdsyb2.scala:28:12 ---"
  stdout: ''
  timestamp: 1659798019
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.zipWithIndex.map(x => x._1 - x._2)\n        val guessScores\
    \ = guess.zipWithIndex.map(x => x._1 - x._2)\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = new\
    \ mutable.ListBuffer[Long]()\n        val guessScoreList = new mutable.ListBuffer[Long]()\n\
    \        gameScoreMap.foreach {\n            case (score, index) =>\n        \
    \        gameScoreList.add(score)\n                guessScoreList.add(guessScoreMap(index))\n\
    \        }\n        val gameScoreArray = gameScoreList.toArray\n        val guessScoreArray\
    \ = guessScoreList.toArray\n        val gameScoreArrayLength = gameScoreArray.length\n\
    \        val guessScoreArrayLength = guessScoreArray.length\n        val gameScoreArrayLength\
    \ = gameScoreArrayLength\n        val guessScoreArrayLength = guessScoreArrayLength\n\
    \        val gameScoreArrayLength = gameScoreArrayLength\n        val guessScoreArrayLength\
    \ = guessScoreArrayLength\n        val gameScoreArrayLength = gameScoreArrayLength\n\
    \        val guessScoreArrayLength = guessScoreArrayLength\n        val gameScoreArrayLength\
    \ = gameScoreArrayLength\n        val guessScoreArrayLength = guessScoreArrayLength\n\
    \        val gameScoreArrayLength = gameScoreArrayLength\n        val guessScoreArrayLength\
    \ = guessScoreArrayLength\n        val gameScoreArrayLength = gameScoreArrayLength\n\
    \        val guessScoreArrayLength = guessScoreArrayLength\n        val gameScoreArrayLength\
    \ = gameScoreArrayLength\n        val guessScoreArrayLength = guessScoreArrayLength\n\
    \        val gameScoreArrayLength = gameScoreArrayLength\n        val guessScoreArrayLength\
    \ = guessScoreArrayLength\n        val gameScoreArrayLength = gameScoreArrayLength\n\
    \        val guessScoreArrayLength = guessScoreArrayLength\n        val gameScoreArrayLength\
    \ = gameScoreArrayLength\n        val guessScoreArrayLength = guessScoreArrayLength\n\
    \        val gameScoreArrayLength = gameScoreArrayLength\n        val guessScoreArrayLength\
    \ = guessScoreArrayLength\n        val gameScoreArrayLength = gameScoreArrayLength\n\
    \        val guessScoreArrayLength = guessScoreArrayLength\n        val gameScoreArrayLength\
    \ = gameScoreArrayLength\n        val guessScoreArrayLength = guessScoreArrayLength\n\
    \        val gameScoreArrayLength = gameScoreArrayLength\n        val guessScoreArrayLength\
    \ = guessScoreArrayLength\n        val gameScoreArrayLength = gameScoreArrayLength\n\
    \        val guessScoreArrayLength = guessScoreArrayLength\n        val gameScoreArrayLength\
    \ = gameScoreArray\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpznri1wbu.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mgameScoreArrayLength\e[0m\
    \ = gameScoreArrayLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreArrayLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mgameScoreArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpznri1wbu.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mguessScoreArrayLength\e\
    [0m = guessScoreArrayLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mguessScoreArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpznri1wbu.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mgameScoreArrayLength\e[0m\
    \ = gameScoreArrayLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreArrayLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mgameScoreArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpznri1wbu.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mguessScoreArrayLength\e\
    [0m = guessScoreArrayLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mguessScoreArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpznri1wbu.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m"
  stdout: ''
  timestamp: 1659798022
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap =\
    \ guessScores.toMap\n        val gameScoreSet = gameScoreMap.toSet\n        val\
    \ guessScoreSet = guessScoreMap.toSet\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreSet = gameScoreMap.toSet\n\
    \        val guessScoreSet = guessScoreMap.toSet\n        val gameScoreList =\
    \ gameScores.toList\n        val guessScoreList = guessScores.toList\n       \
    \ val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreSet = gameScoreMap.toSet\n        val guessScoreSet = guessScoreMap.toSet\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreSet = gameScoreMap.toSet\n        val guessScoreSet = guessScoreMap.toSet\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreSet = gameScoreMap.toSet\n        val guessScoreSet = guessScoreMap.toSet\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreSet = gameScoreMap.toSet\n        val guessScoreSet = guessScoreMap.toSet\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreSet = gameScoreMap.toSet\n        val guessScoreSet = guessScoreMap.toSet\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guess\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwgqukzna.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreMap is already defined as \e[33mvalue\e[0m \e[35mgameScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwgqukzna.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mguessScoreMap\e[0m = guessScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mguessScoreMap is already defined as \e[33mvalue\e[0m \e[35mguessScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwgqukzna.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreSet\e[0m = gameScoreMap.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreSet is already defined as \e[33mvalue\e[0m \e[35mgameScoreSet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwgqukzna.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessScoreSet\e[0m = guessScoreMap.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mguessScoreSet is already defined as \e[33mvalue\e[0m \e[35mguessScoreSet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwgqukzna.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = gameScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0"
  stdout: ''
  timestamp: 1659798022
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreCount = gameScores.count\n        val guessScoreCount\
    \ = guessScores.count\n        val gameScoreDiff = gameScoreCount - guessScoreCount\n\
    \        val guessScoreDiff = guessScoreCount - gameScoreCount\n        val gameScoreDiffList\
    \ = gameScoreDiff.toList.map(x => gameScoreDiffList.map(_ + x))\n        val guessScoreDiffList\
    \ = guessScoreDiff.toList.map(x => guessScoreDiffList.map(_ + x))\n        val\
    \ gameScoreDiffList2 = gameScoreDiffList.zip(guessScoreDiffList).map { case (gameScoreDiff,\
    \ guessScoreDiff) => gameScoreDiff - guessScoreDiff }\n        val gameScoreDiffList3\
    \ = gameScoreDiffList2.zip(guessScoreDiffList).map { case (gameScoreDiff, guessScoreDiff)\
    \ => gameScoreDiff - guessScoreDiff }\n        val gameScoreDiffList4 = gameScoreDiffList3.zip(guessScoreDiffList).map\
    \ { case (gameScoreDiff, guessScoreDiff) => gameScoreDiff - guessScoreDiff }\n\
    \        val gameScoreDiffList5 = gameScoreDiffList4.zip(guessScoreDiffList).map\
    \ { case (gameScoreDiff, guessScoreDiff) => gameScoreDiff - guessScoreDiff }\n\
    \        val gameScoreDiffList6 = gameScoreDiffList5.zip(guessScoreDiffList).map\
    \ { case (gameScoreDiff, guessScoreDiff) => gameScoreDiff - guessScoreDiff }\n\
    \        val gameScoreDiffList7 = gameScoreDiffList6.zip(guessScoreDiffList).map\
    \ { case (gameScoreDiff, guessScoreDiff) => gameScoreDiff - guessScoreDiff }\n\
    \        val gameScoreDiffList8 = gameScoreDiffList7.zip(guessScoreDiffList).map\
    \ { case (gameScoreDiff, guessScoreDiff) => gameScoreDiff - guessScoreDiff }\n\
    \        val gameScoreDiffList9 = gameScoreDiffList8.zip(guessScoreDiffList).map\
    \ { case (gameScoreDiff, guessScoreDiff) => gameScoreDiff - guessScoreDiff }\n\
    \        val gameScoreDiffList10 = gameScoreDiffList9.zip(guessScoreDiffList).map\
    \ { case (gameScoreDiff, guessScoreDiff) => gameScoreDiff - guessScoreDiff }\n\
    \        val gameScoreDiffList11 = gameScore\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpa3cmkxjk.scala:19:43 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiff\e[0m = gameScoreCount\
    \ - guessScoreCount\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue - is not a member of (Long => Boolean) => Int, but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpa3cmkxjk.scala:20:45 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mguessScoreDiff\e[0m = guessScoreCount\
    \ - gameScoreCount\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue - is not a member of (Long => Boolean) => Int, but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpa3cmkxjk.scala:32:34 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffList11\e[0m\
    \ = gameScore\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Not found: gameScore\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa3cmkxjk.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m long"
  stdout: ''
  timestamp: 1659798024
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap =\
    \ guessScores.toMap\n        val gameScoreList = gameScores.toList\n        val\
    \ guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guess\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbsn9xo79.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreMap is already defined as \e[33mvalue\e[0m \e[35mgameScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbsn9xo79.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mguessScoreMap\e[0m = guessScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mguessScoreMap is already defined as \e[33mvalue\e[0m \e[35mguessScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbsn9xo79.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = gameScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreList is already defined as \e[33mvalue\e[0m \e[35mgameScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbsn9xo79.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessScoreList\e[0m = guessScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mguessScoreList is already defined as \e[33mvalue\e[0m \e[35mguessScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbsn9xo79.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreSet\e[0m = gameScores.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0"
  stdout: ''
  timestamp: 1659798018
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameLen = game.size\n        val guessLen = guess.size\n        val\
    \ result = new Array[Long](guessLen)\n        var i = 0\n        var j = 0\n \
    \       var k = 0\n        var sum = 0\n        while (i < gameLen && j < guessLen)\
    \ {\n            if (game(i) == guess(j)) {\n                sum = 0\n       \
    \         while (i < gameLen && j < guessLen && game(i) == guess(j)) {\n     \
    \               sum += 1\n                    i += 1\n                    j +=\
    \ 1\n                }\n                result(k) = sum\n                k +=\
    \ 1\n                i = 0\n                j = 0\n            } else {\n    \
    \            val diff = abs(game(i) - guess(j))\n                result(k) = diff\n\
    \                k += 1\n                i = 0\n                j = 0\n      \
    \      }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4q7v8vxm.scala:42:8\
    \ ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798020
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameLength = game.length\n        val guessLength = guess.length\n \
    \       val result = new Array[Long](guessLength)\n        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val gameScore = gameScores.map\
    \ { case (score, index) => score }\n        val guessScore = guessScores.map {\
    \ case (score, index) => score }\n        val gameScoreDiff = gameScore diff guessScore\n\
    \        val gameScoreDiffLength = gameScoreDiff.length\n        val gameScoreDiffDiff\
    \ = gameScoreDiff.zipWithIndex.map { case (score, index) => score -> index }.toMap\n\
    \        val gameScoreDiffDiffLength = gameScoreDiffDiff.length\n        val gameScoreDiffDiffDiff\
    \ = gameScoreDiffDiff.zipWithIndex.map { case (score, index) => score -> index\
    \ }.toMap\n        val gameScoreDiffDiffDiffLength = gameScoreDiffDiffDiff.length\n\
    \        val gameScoreDiffDiffDiffLength = gameScoreDiffDiffDiff.length\n    \
    \    val gameScoreDiffDiffDiffLength = gameScoreDiffDiffDiffLength\n        val\
    \ gameScoreDiffDiffDiffLength = gameScoreDiffDiffDiffLength\n        val gameScoreDiffDiffDiffLength\
    \ = gameScoreDiffDiffDiffLength\n        val gameScoreDiffDiffDiffLength = gameScoreDiffDiffDiffLength\n\
    \        val gameScoreDiffDiffDiffLength = gameScoreDiffDiffDiffLength\n     \
    \   val gameScoreDiffDiffDiffLength = gameScoreDiffDiffDiffLength\n        val\
    \ gameScoreDiffDiffDiffLength = gameScoreDiffDiffDiffLength\n        val gameScoreDiffDiffDiffLength\
    \ = gameScoreDiffDiffDiffLength\n        val gameScoreDiffDiffDiffLength = gameScoreDiffDiffDiffLength\n\
    \        val gameScoreDiffDiffDiffLength = gameScoreDiffDiffDiffLength\n     \
    \   val gameScoreDiffDiffDiffLength = gameScoreDiffDiffDiffLength\n        val\
    \ gameScoreDiffDiffDiffLength = gameScoreDiffDiffDiffLength\n        val gameScoreDiffDiffDiffLength\
    \ = gameScoreDiffDiffDiffLength\n        val gameScoreDiffDiffDiffLength = gameScoreDiffDiffDiffLength\n\
    \        val gameScoreDiffDiffDiffLength = gameScoreDiffDiffDiffLength\n     \
    \   val gameScoreDiffDiffDiffLength = gameScoreDiffDiffDiffLength\n        val\
    \ gameScoreDiffDiffDiffLength = gameScoreDiffDiffDiffLength\n        val gameScoreDiffDiffDiffLength\
    \ = gameScoreDiffDiffDiffLength\n        val gameScore\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdfv_hpno.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdfv_hpno.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreDiffDiffDiffLength\e[0m = gameScoreDiffDiffDiff.length\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffDiffDiffLength is already defined as \e[33mvalue\e\
    [0m \e[35mgameScoreDiffDiffDiffLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdfv_hpno.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffDiffDiffLength\e\
    [0m = gameScoreDiffDiffDiffLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffDiffDiffLength is already defined as \e[33mvalue\e\
    [0m \e[35mgameScoreDiffDiffDiffLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdfv_hpno.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffDiffDiffLength\e\
    [0m = gameScoreDiffDiffDiffLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffDiffDiffLength is already defined as \e[33mvalue\e\
    [0m \e[35mgameScoreDiffDiffDiffLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdfv_hpno.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffDiffDiffLength\e\
    [0m = gameScoreDiffDiffDiffLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659798023
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val guesses = guess.toSet\n        val scores = game.toSet\n        val\
    \ results = new mutable.ListBuffer[Long]()\n        val maxScore = scores.max\n\
    \        val maxGuess = guess.max\n        val maxScoreIndex = scores.indexOf(maxScore)\n\
    \        val maxGuessIndex = guess.indexOf(maxGuess)\n        val maxScoreScore\
    \ = maxScoreIndex - maxGuessIndex\n        val maxScoreGuess = maxScoreIndex -\
    \ maxScoreIndex\n        val maxScoreGuesses = maxScoreIndex - maxGuessIndex\n\
    \        val maxScoreGuesses2 = maxScoreIndex - maxScoreIndex\n        val maxScoreGuesses3\
    \ = maxScoreIndex - maxScoreIndex\n        val maxScoreGuesses4 = maxScoreIndex\
    \ - maxScoreIndex\n        val maxScoreGuesses5 = maxScoreIndex - maxScoreIndex\n\
    \        val maxScoreGuesses6 = maxScoreIndex - maxScoreIndex\n        val maxScoreGuesses7\
    \ = maxScoreIndex - maxScoreIndex\n        val maxScoreGuesses8 = maxScoreIndex\
    \ - maxScoreIndex\n        val maxScoreGuesses9 = maxScoreIndex - maxScoreIndex\n\
    \        val maxScoreGuesses10 = maxScoreIndex - maxScoreIndex\n        val maxScoreGuesses11\
    \ = maxScoreIndex - maxScoreIndex\n        val maxScoreGuesses12 = maxScoreIndex\
    \ - maxScoreIndex\n        val maxScoreGuesses13 = maxScoreIndex - maxScoreIndex\n\
    \        val maxScoreGuesses14 = maxScoreIndex - maxScoreIndex\n        val maxScoreGuesses15\
    \ = maxScoreIndex - maxScoreIndex\n        val maxScoreGuesses16 = maxScoreIndex\
    \ - maxScoreIndex\n        val maxScoreGuesses17 = maxScoreIndex - maxScoreIndex\n\
    \        val maxScoreGuesses18 = maxScoreIndex - maxScoreIndex\n        val maxScoreGuesses19\
    \ = maxScoreIndex - maxScoreIndex\n        val maxScoreGuesses20 = maxScoreIndex\
    \ - maxScoreIndex\n        val maxScoreGuesses21 = maxScoreIndex - maxScoreIndex\n\
    \        val maxScoreGuesses22 = maxScoreIndex - maxScoreIndex\n        val maxScoreGuesses23\
    \ = maxScoreIndex - maxScoreIndex\n        val maxScoreGuesses24 = maxScoreIndex\
    \ - maxScoreIndex\n        val maxScoreGuesses25 = maxScoreIndex\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkcrkgsv1.scala:17:26 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresults\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkcrkgsv1.scala:20:35\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxScoreIndex\e[0m = scores.indexOf(maxScore)\n\e[31m\e[31m   |\e[0m     \
    \                       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \           value indexOf is not a member of Set[Long]\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpkcrkgsv1.scala:49:5 ---------------------\e[0m\e\
    [0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659798023
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameLen = game.length\n        val guessLen = guess.length\n       \
    \ val gameScores = game.zipWithIndex.map { case (score, index) => (index, score)\
    \ }.toMap\n        val guessScores = guess.zipWithIndex.map { case (score, index)\
    \ => (index, score) }.toMap\n        val gameScore = gameScores.map { case (index,\
    \ score) => (index, score) }.toMap\n        val guessScore = guessScores.map {\
    \ case (index, score) => (index, score) }.toMap\n        val gameScores = gameScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val guessScores = guessScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val gameScore = gameScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val guessScore = guessScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val gameScores = gameScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val guessScores = guessScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val gameScore = gameScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val guessScore = guessScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val gameScores = gameScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val guessScores = guessScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val gameScore = gameScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val guessScore = guessScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val gameScores = gameScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val guessScores = guessScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val gameScore = gameScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val guessScore = guessScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val gameScores = gameScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val guessScores = guessScore\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1p9g_0k0.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = gameScores.map\
    \ { \e[33mcase\e[0m (index, score) => (index, score) }.toMap\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScores is already defined as \e[33mvalue\e[0m \e[35mgameScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1p9g_0k0.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mguessScores\e[0m = guessScores.map {\
    \ \e[33mcase\e[0m (index, score) => (index, score) }.toMap\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScores is already defined as \e[33mvalue\e[0m \e[35mguessScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1p9g_0k0.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mgameScore\e[0m = gameScores.map { \e\
    [33mcase\e[0m (index, score) => (index, score) }.toMap\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScore is already defined as \e[33mvalue\e[0m \e[35mgameScore\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1p9g_0k0.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mguessScore\e[0m = guessScores.map {\
    \ \e[33mcase\e[0m (index, score) => (index, score) }.toMap\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScore is already defined as \e[33mvalue\e[0m \e[35mguessScore\e\
    [0m\n\e[31m   |\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659798023
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val guesses = guess.toSet\n        val scores = game.toSet\n        val\
    \ result = new mutable.ListBuffer[Long]()\n        val guessesCount = guesses.size\n\
    \        val scoresCount = scores.size\n        val guessesCount = guesses.size\n\
    \        val scoresCount = scores.size\n        val guessesCount = guesses.size\n\
    \        val scoresCount = scores.size\n        val guessesCount = guesses.size\n\
    \        val scoresCount = scores.size\n        val guessesCount = guesses.size\n\
    \        val scoresCount = scores.size\n        val guessesCount = guesses.size\n\
    \        val scoresCount = scores.size\n        val guessesCount = guesses.size\n\
    \        val scoresCount = scores.size\n        val guessesCount = guesses.size\n\
    \        val scoresCount = scores.size\n        val guessesCount = guesses.size\n\
    \        val scoresCount = scores.size\n        val guessesCount = guesses.size\n\
    \        val scoresCount = scores.size\n        val guessesCount = guesses.size\n\
    \        val scoresCount = scores.size\n        val guessesCount = guesses.size\n\
    \        val scoresCount = scores.size\n        val guessesCount = guesses.size\n\
    \        val scoresCount = scores.size\n        val guessesCount = guesses.size\n\
    \        val scoresCount = scores.size\n        val guessesCount = guesses.size\n\
    \        val scoresCount = scores.size\n        val guessesCount = guesses.size\n\
    \        val scoresCount = scores.size\n        val guessesCount = guesses.size\n\
    \        val scoresCount = scores.size\n        val guessesCount = guesses.size\n\
    \        val scoresCount = scores.size\n        val guessesCount = guesses.size\n\
    \        val scoresCount = scores.size\n        val guessesCount = guesses.size\n\
    \        val scoresCount = scores.size\n        val guessesCount = guesses.size\n\
    \        val scoresCount = scores.size\n        val guessesCount = guesses.size\n\
    \        val scoresCount = scores.size\n        val guessesCount = guesses.size\n\
    \        val scoresCount = scores.size\n        val guessesCount = guesses.size\n\
    \        val scoresCount = scores.size\n        val guessesCount = guesses.size\n\
    \        val scoresCount = scores.size\n        val guessesCount = guesses.size\n\
    \        val scoresCount = scores.size\n        val guessesCount = guesses.size\n\
    \        val scoresCount = scores.size\n        val guessesCount = guesses.size\n\
    \        val scoresCount = scores.size\n        val guessesCount = guesses.size\n\
    \        val scoresCount = scores.size\n        val guessesCount = guesses.size\n\
    \        val scoresCount = scores.size\n        val \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp9knxodf4.scala:78:11 ---------------------------\e\
    [0m\e[0m\n\e[31m78 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp9knxodf4.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mguessesCount\e[0m = guesses.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mguessesCount is already defined as \e[33mvalue\e[0m \e[35mguessesCount\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9knxodf4.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mscoresCount\e[0m = scores.size\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mscoresCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mscoresCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9knxodf4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessesCount\e[0m = guesses.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesCount is already defined as \e[33mvalue\e[0m \e[35mguessesCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9knxodf4.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mscoresCount\e[0m = scores.size\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mscoresCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mscoresCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Na"
  stdout: ''
  timestamp: 1659798022
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameLen = game.size\n        val guessLen = guess.size\n        val\
    \ result = new Array[Long](guessLen)\n        var i = 0\n        var j = 0\n \
    \       var k = 0\n        while (i < guessLen && j < gameLen) {\n           \
    \ if (game(j) == guess(i)) {\n                result(k) = game(j)\n          \
    \      i += 1\n                j += 1\n                k += 1\n            } else\
    \ if (game(j) < guess(i)) {\n                i += 1\n            } else {\n  \
    \              j += 1\n            }\n        }\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq0kgq36x.scala:33:8\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798022
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val guesses = guess.toList\n        val scores = game.toList\n        val\
    \ guessesCount = guesses.size\n        val scoresCount = scores.size\n       \
    \ val guessesCorrect = guesses.zip(scores).filter(_._2 == 0).map(_._1).sum\n \
    \       val scoresCorrect = scores.zip(guesses).filter(_._2 == 0).map(_._1).sum\n\
    \        val guessesDiff = guessesCount - guessesCorrect\n        val scoresDiff\
    \ = scoresCount - scoresCorrect\n        guesses.zip(scores).filter(_._2 == 0).map(_._1).zipWithIndex.map\
    \ { case (guess, score) =>\n            if (guess == score) {\n              \
    \  0\n            } else {\n                Math.abs(guess - score)\n        \
    \    }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp92kylfdq.scala:32)\n\tat Problem.main(tmp92kylfdq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798026
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreCount = gameScores.count\n        val guessScoreCount\
    \ = guessScores.count\n        val gameScoreSum = gameScores.sum\n        val\
    \ guessScoreSum = guessScores.sum\n        val gameScoreDiff = gameScoreSum -\
    \ guessScoreSum\n        val guessScoreDiff = guessScoreSum - gameScoreSum\n \
    \       val gameScoreDiffs = gameScores.zip(guessScores).map { case (gameScore,\
    \ guessScore) =>\n            if (gameScore == guessScore) {\n               \
    \ 0\n            } else {\n                Math.abs(gameScore - guessScore)\n\
    \            }\n        }\n        val guessScoreDiffs = guessScores.zip(gameScores).map\
    \ { case (guessScore, gameScore) =>\n            if (guessScore == gameScore)\
    \ {\n                0\n            } else {\n                Math.abs(guessScore\
    \ - gameScore)\n            }\n        }\n        gameScoreDiffs.zip(guessScoreDiffs).map\
    \ { case (gameScoreDiff, guessScoreDiff) =>\n            if (gameScoreDiff ==\
    \ guessScoreDiff) {\n                0\n            } else {\n               \
    \ gameScoreDiff + guessScoreDiff\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdqjj70ez.scala:46)\n\tat Problem.main(tmpdqjj70ez.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798026
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreCount = gameScores.count\n        val guessScoreCount\
    \ = guessScores.count\n        val gameScoreSum = gameScores.sum\n        val\
    \ guessScoreSum = guessScores.sum\n        val gameScoreDiff = gameScoreSum -\
    \ guessScoreSum\n        val guessScoreDiff = guessScoreSum - gameScoreSum\n \
    \       val gameScoreDiffs = gameScores.zip(guessScores).map { case (gameScore,\
    \ guessScore) =>\n            if (guessScore == gameScore) {\n               \
    \ 0\n            } else {\n                Math.abs(gameScore - guessScore)\n\
    \            }\n        }\n        gameScoreDiffs.take(gameScoreCount)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmyd9fc8a.scala:30:28\
    \ --------------------\e[0m\e[0m\n\e[31m30 |\e[0m        gameScoreDiffs.take(gameScoreCount)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Found:    (gameScoreCount : (Long => Boolean) => Int)\n\
    \e[31m   |\e[0m                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798024
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val guesses = guess.map(x => Math.abs(x - game))\n        val scores = game.map(x\
    \ => Math.abs(x - guess))\n        guesses.zip(scores).map(x => if (x._1 == 0)\
    \ 0 else x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpkkn4j7az.scala:15:48 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mguesses\e[0m = guess.map(\e\
    [36mx\e[0m => Math.abs(x - game))\n\e[31m\e[31m   |\e[0m                     \
    \                         ^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35m-\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\
    \e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m\
    \   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x:\
    \ Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\
    \e[31m   |\e[0mmatch arguments ((game : List[Long]))\n\e[31m\e[31m-- [E134] Type\
    \ Error: /tmp/tmpkkn4j7az.scala:16:46 -----------------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m        \e[33mval\e[0m \e[36mscores\e[0m = game.map(\e[36mx\e[0m\
    \ => Math.abs(x - guess))\n\e[31m\e[31m   |\e[0m                             \
    \               ^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of\
    \ \e[33mmethod\e[0m \e[35m-\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\
    \e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m\
    \   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x:\
    \ Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\
    \e[31m   |\e[0mmatch arguments ((guess : List[Long]))\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpkkn4j7az.scala:17:64 ------------------------\e[0m\e[0m\n\
    \e[31m17 |\e[0m        guesses.zip(scores).map(\e[36mx\e[0m => \e[33mif\e[0m (x._1\
    \ == \e[31m0\e[0m) \e[31m0\e[0m \e[33melse\e[0m x._1 - x._2)\n\e[31m\e[31m   |\e\
    [0m                                                           ^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue - is not a member of Nothing, but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Byte.byte2double\n\
    \e[31m   |\e[0m  import Byte.byte2float\n\e[31m   |\e[0m  import Byte.byte2int\n\
    \e[31m   |\e[0m  import Byte.byte2long\n\e[31m   |\e[0m  import Byte.byte2short\n\
    \e[31m   |\e[0m  import Char.char2doubl"
  stdout: ''
  timestamp: 1659798036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameSize = game.size\n        val guessSize = guess.size\n        val\
    \ result = new Array[Long](guessSize)\n        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => (index, score) }.toMap\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => (index, score) }.toMap\n        guessScores.foreach\
    \ { case (index, score) =>\n            val guessIndex = guessScores.keys.toList.indexOf(index)\n\
    \            if (guessIndex == -1) {\n                result(index) = score\n\
    \            } else {\n                val gameScore = gameScores.get(index)\n\
    \                val guessScore = guessScores.get(guessIndex)\n              \
    \  result(index) = Math.abs(guessScore - gameScore)\n            }\n        }\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgasmsi56.scala:27:52 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                result(index) = Math.abs(guessScore -\
    \ gameScore)\n\e[31m\e[31m   |\e[0m                                         ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue - is not a member of Option[Long], but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might make progress towards fixing the problem:\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpgasmsi56.scala:30:8 ---------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\e[31m   |\e[0m\
    \        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798037
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameLen = game.length\n        val guessLen = guess.length\n       \
    \ val result = new mutable.ArrayList[Long](guessLen)\n        val gameScores =\
    \ game.zipWithIndex.map{case (score, index) => score}\n        val guessScores\
    \ = guess.zipWithIndex.map{case (score, index) => score}\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n        val\
    \ gameScoreKeys = gameScoreMap.keySet\n        val guessScoreKeys = guessScoreMap.keySet\n\
    \        val gameScoreValues = gameScoreMap.values.toList\n        val guessScoreValues\
    \ = guessScoreMap.values.toList\n        val gameScoreKeySet = gameScoreKeys.toSet\n\
    \        val guessScoreKeySet = guessScoreKeys.toSet\n        val gameScoreValueSet\
    \ = gameScoreValues.toSet\n        val guessScoreValueSet = guessScoreValues.toSet\n\
    \        val gameScoreKeySet = gameScoreKeys.toSet\n        val guessScoreKeySet\
    \ = guessScoreKeys.toSet\n        val gameScoreValueSet = gameScoreValues.toSet\n\
    \        val guessScoreValueSet = guessScoreValues.toSet\n        val gameScoreKeySet\
    \ = gameScoreKeys.toSet\n        val guessScoreKeySet = guessScoreKeys.toSet\n\
    \        val gameScoreValueSet = gameScoreValues.toSet\n        val guessScoreValueSet\
    \ = guessScoreValues.toSet\n        val gameScoreKeySet = gameScoreKeys.toSet\n\
    \        val guessScoreKeySet = guessScoreKeys.toSet\n        val gameScoreValueSet\
    \ = gameScoreValues.toSet\n        val guessScoreValueSet = guessScoreValues.toSet\n\
    \        val gameScoreKeySet = gameScoreKeys.toSet\n        val guessScoreKeySet\
    \ = guessScoreKeys.toSet\n        val gameScoreValueSet = gameScoreValues.toSet\n\
    \        val guessScoreValueSet = guessScoreValues.toSet\n        val gameScoreKeySet\
    \ = gameScoreKeys.toSet\n        val guessScoreKeySet = guessScoreKeys.toSet\n\
    \        val gameScoreValueSet = gameScoreValues.toSet\n        val guessScoreValueSet\
    \ = guessScoreValues.toSet\n        val gameScoreKeySet = gameScoreKeys.toSet\n\
    \        val guessScoreKeySet = guessScoreKeys.toSet\n        val gameScoreValueSet\
    \ = gameScoreValues.toSet\n        val \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpsbeva7c1.scala:53:11 ---------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpsbeva7c1.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mgameScoreKeySet\e[0m = gameScoreKeys.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mgameScoreKeySet is already defined as \e[33mvalue\e[0m \e[35mgameScoreKeySet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsbeva7c1.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mguessScoreKeySet\e[0m = guessScoreKeys.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mguessScoreKeySet is already defined as \e[33mvalue\e[0m \e[35mguessScoreKeySet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsbeva7c1.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mgameScoreValueSet\e[0m = gameScoreValues.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mgameScoreValueSet is already defined as \e[33mvalue\e[0m \e[35mgameScoreValueSet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsbeva7c1.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mguessScoreValueSet\e[0m = guessScoreValues.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreValueSet is already defined as \e[33mvalue\e[0m\
    \ \e[35mguessScoreV"
  stdout: ''
  timestamp: 1659798038
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameLen = game.length\n        val guessLen = guess.length\n       \
    \ val result = new mutable.ListBuffer[Long]()\n        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreKeys = gameScoreMap.keys\n\
    \        val guessScoreKeys = guessScoreMap.keys\n        val gameScoreValues\
    \ = gameScoreMap.values.toList\n        val guessScoreValues = guessScoreMap.values.toList\n\
    \        val gameScoreKeySet = gameScoreKeys.toSet\n        val guessScoreKeySet\
    \ = guessScoreKeys.toSet\n        val gameScoreValueSet = gameScoreValues.toSet\n\
    \        val guessScoreValueSet = guessScoreValues.toSet\n        val gameScoreKeysSet\
    \ = gameScoreKeySet.toSet\n        val guessScoreKeysSet = guessScoreKeySet.toSet\n\
    \        val gameScoreValuesSet = gameScoreValueSet.toSet\n        val guessScoreValuesSet\
    \ = guessScoreValueSet.toSet\n        val gameScoreKeysSet = gameScoreKeySet.toSet\n\
    \        val guessScoreKeysSet = guessScoreKeySet.toSet\n        val gameScoreValuesSet\
    \ = gameScoreValueSet.toSet\n        val guessScoreValuesSet = guessScoreValueSet.toSet\n\
    \        val gameScoreKeysSet = gameScoreKeySet.toSet\n        val guessScoreKeysSet\
    \ = guessScoreKeySet.toSet\n        val gameScoreValuesSet = gameScoreValueSet.toSet\n\
    \        val guessScoreValuesSet = guessScoreValueSet.toSet\n        val gameScoreKeysSet\
    \ = gameScoreKeySet.toSet\n        val guessScoreKeysSet = guessScoreKeySet.toSet\n\
    \        val gameScoreValuesSet = gameScoreValueSet.toSet\n        val guessScoreValuesSet\
    \ = guessScoreValueSet.toSet\n        val gameScoreKeysSet = gameScoreKeySet.toSet\n\
    \        val guessScoreKeysSet = guessScoreKeySet.toSet\n        val gameScoreValuesSet\
    \ = gameScoreValueSet.toSet\n        val guessScoreValuesSet = guessScoreValueSet.toSet\n\
    \        val gameScoreKeysSet = gameScoreKeySet.toSet\n        val guessScoreKeysSet\
    \ = guessScore\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf5aq8rg5.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgameScoreKeysSet\e[0m =\
    \ gameScoreKeySet.toSet\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreKeysSet is already defined as \e[33mvalue\e[0m \e\
    [35mgameScoreKeysSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpf5aq8rg5.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mguessScoreKeysSet\e[0m =\
    \ guessScoreKeySet.toSet\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreKeysSet is already defined as \e[33mvalue\e[0m \e\
    [35mguessScoreKeysSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpf5aq8rg5.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mgameScoreValuesSet\e[0m\
    \ = gameScoreValueSet.toSet\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreValuesSet is already defined as \e[33mvalue\e[0m\
    \ \e[35mgameScoreValuesSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpf5aq8rg5.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mguessScoreValuesSet\e[0m\
    \ = guessScoreValueSet.toSet\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreValuesSet is already defined as \e[33mvalue\e[0m\
    \ \e[35mguessScoreValuesSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpf5aq8rg5.scala:38:12 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[3"
  stdout: ''
  timestamp: 1659798041
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameLen = game.length\n        val guessLen = guess.length\n       \
    \ val result = new Array[Long](guessLen)\n        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        guessScores.foreach {\
    \ case (score, index) =>\n            val guessScore = guessScoreMap(index)\n\
    \            val gameScore = gameScoreMap(index)\n            val diff = abs(guessScore\
    \ - gameScore)\n            if (gameScore == guessScore) {\n                result(index)\
    \ = diff\n            } else {\n                result(index) = diff * -1\n  \
    \          }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp5q09s5vx.scala:20:43 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.toMap\n\
    \e[31m\e[31m   |\e[0m                                           ^\e[0m\n\e[31m\
    \   |\e[0m                                       Cannot prove that Long <:< (K,\
    \ V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                       where:\
    \    K is a type variable\n\e[31m   |\e[0m                                   \
    \              V is a type variable\n\e[31m   |\e[0m                         \
    \              .\n\e[31m\e[31m-- Error: /tmp/tmp5q09s5vx.scala:21:45 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mguessScoreMap\e[0m = guessScores.toMap\n\
    \e[31m\e[31m   |\e[0m                                             ^\e[0m\n\e[31m\
    \   |\e[0m                                       Cannot prove that Long <:< (K,\
    \ V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                       where:\
    \    K is a type variable\n\e[31m   |\e[0m                                   \
    \              V is a type variable\n\e[31m   |\e[0m                         \
    \              .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5q09s5vx.scala:27:23\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m                result(index)\
    \ = diff\n\e[31m\e[31m   |\e[0m                       ^^^^^\e[0m\n\e[31m   |\e\
    [0m                       Found:    (index : Any)\n\e[31m   |\e[0m           \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp5q09s5vx.scala:29:23 --------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m                result(index) = diff * -\e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                       ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    (index : Any)\n\e[31m   |\e[0m                       Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5q09s5vx.scala:32:8 ---------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m"
  stdout: ''
  timestamp: 1659798042
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.map(x => if (x == 0) 0 else x)\n        val guessesScores\
    \ = guess.map(x => if (x == 0) 0 else x)\n        val diffs = guessesScores.zip(gameScores).map(x\
    \ => if (x._1 == x._2) 0 else abs(x._1 - x._2))\n        diffs.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798043
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val guesses = guess.toSet\n        val scores = game.toSet\n        val\
    \ results = new mutable.ArrayBuffer[Long]()\n        val guessesWithScore = game.toSet.zip(guesses)\n\
    \        val scoresWithGuesses = guess.toSet.zip(game)\n        guessesWithScore.foreach\
    \ { case (score, guess) =>\n            if (scoreWithGuesses.contains(guess))\
    \ results += score\n        }\n        results\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuc35qfz8.scala:17:26 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresults\e[0m = \e[33mnew\e\
    [0m mutable.ArrayBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuc35qfz8.scala:21:16\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m\
    \ (scoreWithGuesses.contains(guess)) results += score\n\e[31m\e[31m   |\e[0m \
    \               ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found:\
    \ scoreWithGuesses\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798033
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap =\
    \ guessScores.toMap\n        val gameScoreList = new mutable.ListBuffer[Long]()\n\
    \        val guessScoreList = new mutable.ListBuffer[Long]()\n        val gameScoreSet\
    \ = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n        val\
    \ gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = new mutable.ListBuffer[Long]()\n        val guessScoreList\
    \ = new mutable.ListBuffer[Long]()\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = new\
    \ mutable.ListBuffer[Long]()\n        val guessScoreList = new mutable.ListBuffer[Long]()\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = new mutable.ListBuffer[Long]()\n        val guessScoreList\
    \ = new mutable.ListBuffer[Long]()\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = new\
    \ mutable.ListBuffer[Long]()\n        val guessScoreList = new mutable.ListBuffer[Long]()\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = new mutable.ListBuffer[Long]()\n        val guessScoreList\
    \ = new mutable.ListBuffer[Long]()\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScore\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpg5oml8o_.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg5oml8o_.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreMap\e[0m = gameScores.toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreMap is already defined as \e[33mvalue\e[0m \e[35mgameScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpg5oml8o_.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mguessScoreMap\e[0m = guessScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mguessScoreMap is already defined as \e[33mvalue\e[0m \e[35mguessScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpg5oml8o_.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreList is already defined as \e[33mvalue\e[0m \e[35mgameScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpg5oml8o_.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessScoreList\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreList is already defined as \e[33mvalue\e[0m \e[35mguessScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group"
  stdout: ''
  timestamp: 1659798043
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameLen = game.size\n        val guessLen = guess.size\n        val\
    \ result = new Array[Long](guessLen)\n        var i = 0\n        while (i < guessLen)\
    \ {\n            val gameScore = game(i)\n            val guessScore = guess(i)\n\
    \            val diff = guessScore - gameScore\n            if (diff < 0) {\n\
    \                val temp = gameScore\n                gameScore = guessScore\n\
    \                guessScore = temp\n                diff *= -1\n            }\n\
    \            result(i) = diff\n            i += 1\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpwsg3g6vf.scala:25:26 -----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                gameScore = guessScore\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \         Reassignment to val gameScore\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmpwsg3g6vf.scala:26:27 -----------------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m                guessScore = temp\n\e[31m\e[31m   |\e[0m \
    \               ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val guessScore\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwsg3g6vf.scala:27:21\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                diff *= -\e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                value *= is not a member of Long - did you mean diff.!=?\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwsg3g6vf.scala:32:8 ---------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\e[31m   |\e[0m\
    \        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798042
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap\
    \ = guessesScores.toMap\n        val gameScoreKeys = gameScoreMap.keySet\n   \
    \     val guessesScoreKeys = guessesScoreMap.keySet\n        val gameScoreKeysSet\
    \ = gameScoreKeys.toSet\n        val guessesScoreKeysSet = guessesScoreKeys.toSet\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val guessesScoreKeysSetSize\
    \ = guessesScoreKeysSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val guessesScoreKeysSetSize = guessesScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val guessesScoreKeysSetSize = guessesScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val guessesScoreKeysSetSize\
    \ = guessesScoreKeysSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val guessesScoreKeysSetSize = guessesScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val guessesScoreKeysSetSize = guessesScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val guessesScoreKeysSetSize\
    \ = guessesScoreKeysSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val guessesScoreKeysSetSize = guessesScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val guessesScoreKeysSetSize = guessesScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val guessesScoreKeysSetSize\
    \ = guessesScoreKeysSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val guessesScoreKeysSetSize = guessesScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val guessesScoreKeysSetSize = guessesScoreKeysSet.size\n\
    \        val gameScoreKeys\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong,\
    \ -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuqfbtjpb.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuqfbtjpb.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreKeysSetSize\e[0m = gameScoreKeysSet.size\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mgameScoreKeysSetSize is already defined as \e[33mvalue\e[0m \e[35mgameScoreKeysSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuqfbtjpb.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessesScoreKeysSetSize\e[0m = guessesScoreKeysSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesScoreKeysSetSize is already defined as \e[33mvalue\e\
    [0m \e[35mguessesScoreKeysSetSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuqfbtjpb.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreKeysSetSize\e[0m\
    \ = gameScoreKeysSet.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreKeysSetSize is already defined as \e[33mvalue\e[0m\
    \ \e[35mgameScoreKeysSetSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpuqfbtjpb.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mguessesScoreKeysSetSize\e\
    [0m = guessesScoreKeysSet.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesScoreKeysSetSize is already defined as \e[33mvalue\e\
    [0m \e[35mguessesScoreKeysSetSize\e[0m"
  stdout: ''
  timestamp: 1659798045
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.map(x => if (x == 0) 0 else x)\n        val guessScores\
    \ = guess.map(x => if (x == 0) 0 else x)\n        val gameScore = gameScores.sum\n\
    \        val guessScore = guessScores.sum\n        val diffs = guessScores.zip(gameScores).map(x\
    \ => if (x._1 == x._2) 0 else abs(x._1 - x._2))\n        diffs.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797976
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val guesses = guess.toSet\n        val scores = game.toSet\n        val\
    \ result = new mutable.ArrayBuffer[Long]()\n        for(score <- scores) {\n \
    \           val guess = guesses.find(_ == score)\n            if(guess == None)\
    \ result += score\n            else result += (guess - score).abs.toLong\n   \
    \     }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong,\
    \ -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6cbxz2kw.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ArrayBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798035
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val guesses = guess.toList\n        val scores = game.toList\n        val\
    \ guessesCount = guesses.size\n        val scoresCount = scores.size\n       \
    \ val result = new Array[Long](guessesCount)\n        val guessesRemaining = guessesCount\
    \ - 1\n        val scoresRemaining = scoresCount - 1\n        var i = 0\n    \
    \    while (i < guessesCount) {\n            val guess = guesses(i)\n        \
    \    val score = scores(i)\n            val guessesRemainingCount = guessesRemaining\n\
    \            val scoresRemainingCount = scoresRemaining\n            val guessesRemainingIndex\
    \ = guessesRemaining\n            val scoresRemainingIndex = scoresRemaining\n\
    \            val guessesRemainingValue = guessesRemaining\n            val scoresRemainingValue\
    \ = scoresRemaining\n            val guessesRemainingValueIndex = guessesRemainingIndex\n\
    \            val scoresRemainingValueIndex = scoresRemainingIndex\n          \
    \  val guessesRemainingValueValue = guessesRemainingValue\n            val scoresRemainingValueValue\
    \ = scoresRemainingValue\n            val guessesRemainingValueValueIndex = guessesRemainingValueIndex\n\
    \            val scoresRemainingValueValueIndex = scoresRemainingValueIndex\n\
    \            val guessesRemainingValueValueValue = guessesRemainingValueValue\n\
    \            val scoresRemainingValueValueValue = scoresRemainingValueValue\n\
    \            val guessesRemainingValueValueValueIndex = guessesRemainingValueValueIndex\n\
    \            val scoresRemainingValueValueValueIndex = scoresRemainingValueValueIndex\n\
    \            val guessesRemainingValueValueValueValue = guessesRemainingValueValueValue\n\
    \            val scoresRemainingValueValueValueValue = scoresRemainingValueValueValue\n\
    \            val guessesRemainingValueValueValueValueIndex = guessesRemainingValueValueValueIndex\n\
    \            val scoresRemainingValueValueValueValueIndex = scoresRemainingValueValueValueIndex\n\
    \            val guessesRemainingValueValueValueValueValue = guessesRemainingValueValueValueValue\n\
    \            val scoresRemainingValueValueValueValueValue = scoresRemainingValueValueValueValueValue\n\
    \            val guessesRemainingValueValueValueValueValueIndex = guessesRemainingValueValueValueValueValueIndex\n\
    \            val scoresRemainingValueValueValueValueValueIndex = scoresRemainingValueValueValueValueValueIndex\n\
    \            val guessesRemainingValueValueValueValueValueValue = guessesRemainingValueValueValueValueValueValue\n\
    \            val scoresRemainingValueValueValueValueValueValue = scoresRemainingValueValueValueValueValueValue\n\
    \            val guessesRemainingValueValueValueValue\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdi11lw69.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdi11lw69.scala:62:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m62 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpdi11lw69.scala:47:59 ---------------------------\e[0m\e[0m\n\e\
    [31m47 |\e[0m            \e[33mval\e[0m \e[36mscoresRemainingValueValueValueValueValue\e\
    [0m = scoresRemainingValueValueValueValueValue\n\e[31m\e[31m   |\e[0m        \
    \                                                   ^\e[0m\n\e[31m   |\e[0m  \
    \   Recursive \e[33mvalue\e[0m \e[35mscoresRemainingValueValueValueValueValue\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpdi11lw69.scala:48:65\
    \ ---------------------------\e[0m\e[0m\n\e[31m48 |\e[0m            \e[33mval\e\
    [0m \e[36mguessesRemainingValueValueValueValueValueIndex\e[0m = guessesRemainingValueValueValueValueValueIndex\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \         ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mguessesRemainingValueValueValueValueValueIndex\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpdi11lw69.scala:49:64\
    \ ---------------------------\e[0m\e[0m\n\e[31m49 |\e[0m            \e[33mval\e\
    [0m \e[36mscoresRemainingValueValueValueValueValueIndex\e[0m = scoresRemainingValueValueValueValueValueIndex\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \        ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mscoresRemainingValueValueValueValueValueIndex\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpdi11lw69.scala:50:65\
    \ ---------------------------\e[0m\e[0m\n\e[31m50 |\e[0m            \e[33mv"
  stdout: ''
  timestamp: 1659798045
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val guesses = guess.toSet\n        val scores = game.toSet\n        val\
    \ results = new mutable.ListBuffer[Long]()\n        for(score <- scores) {\n \
    \           val guess = guesses.find(_ == score)\n            if(guess == None)\
    \ results += score\n            else {\n                val diff = guess - score\n\
    \                if(diff > 0) results += diff\n                else if(diff <\
    \ 0) results += abs(diff)\n            }\n        }\n        results.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphubfwpyt.scala:17:26 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresults\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphubfwpyt.scala:22:33\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m                \e[33mval\e\
    [0m \e[36mdiff\e[0m = guess - score\n\e[31m\e[31m   |\e[0m                   \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue - is not a member of Option[Long],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659798045
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap\
    \ = guessesScores.toMap\n        val guessesScoreKeys = guessesScoreMap.keys\n\
    \        val gameScoreKeys = gameScoreMap.keys\n        val guessesScoreValues\
    \ = guessesScoreMap.values.toList\n        val gameScoreValues = gameScoreMap.values.toList\n\
    \        val guessesScoreKeysAndValues = guessesScoreKeys.zip(guessesScoreValues)\n\
    \        val gameScoreKeysAndValues = gameScoreKeys.zip(gameScoreValues)\n   \
    \     val guessesScoreKeysAndValuesSortedByKey = guessesScoreKeysAndValues.sortBy(_._1)\n\
    \        val gameScoreKeysAndValuesSortedByKey = gameScoreKeysAndValues.sortBy(_._1)\n\
    \        val guessesScoreKeysAndValuesSortedByValue = guessesScoreKeysAndValues.sortBy(_._2)\n\
    \        val gameScoreKeysAndValuesSortedByValue = gameScoreKeysAndValues.sortBy(_._2)\n\
    \        val guessesScoreKeysAndValuesSortedByValueAndKey = guessesScoreKeysAndValues.sortBy(_._3)\n\
    \        val gameScoreKeysAndValuesSortedByValueAndKey = gameScoreKeysAndValues.sortBy(_._3)\n\
    \        val guessesScoreKeysAndValuesSortedByValueAndKeyAndValue = guessesScoreKeysAndValues.sortBy(_._4)\n\
    \        val gameScoreKeysAndValuesSortedByValueAndKeyAndValue = gameScoreKeysAndValues.sortBy(_._4)\n\
    \        val guessesScoreKeysAndValuesSortedByValueAndKeyAndValueAndKey = guessesScoreKeysAndValues.sortBy(_._5)\n\
    \        val gameScoreKeysAndValuesSortedByValueAndKeyAndValueAndKey = gameScoreKeysAndValues.sortBy(_._5)\n\
    \        val guessesScoreKeysAndValuesSortedByValueAndKeyAndValueAndKeyAndValue\
    \ = guessesScoreKeysAndValues.sortBy(_._6)\n        val gameScoreKeysAndValuesSortedByValueAndKeyAndValueAndKeyAndValue\
    \ = gameScoreKeysAndValues.sortBy(_._6)\n        val guessesScoreKeysAndValuesSortedByValueAndKeyAndValueAndKeyAndValueAndKeyAndValue\
    \ = guessesScoreKeysAndValues.sortBy(_._7)\n        val game\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpoc4suds2.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpoc4suds2.scala:15:30\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mgameScores\e[0m = game.zipWithIndex.map { \e[33mcase\e[0m (score, index) =>\
    \ score }\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue zipWithIndex is not a member of Null, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator asScala\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.set asScala\n\e\
    [31m   |\e[0m\n\e[31m\e[31m-- Error: /tmp/tmpoc4suds2.scala:18:49 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mguessesScoreMap\e[0m = guessesScores.toMap\n\
    \e[31m\e[31m   |\e[0m                                                 ^\e[0m\n\
    \e[31m   |\e[0m                                       Cannot prove that Long <:<\
    \ (K, V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                   \
    \    where:    K is a type variable\n\e[31m   |\e[0m                         \
    \                        V is a type variable\n\e[31m   |\e[0m               \
    \                        .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoc4suds2.scala:39:"
  stdout: ''
  timestamp: 1659798047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.map(x => if (x == 0) 0 else x)\n        val guessScores\
    \ = guess.map(x => if (x == 0) 0 else x)\n        val gameScoreCount = gameScores.distinct\n\
    \        val guessScoreCount = guessScores.distinct\n        val gameScoreCountMap\
    \ = gameScoreCount.toMap\n        val guessScoreCountMap = guessScoreCount.toMap\n\
    \        val gameScoreCountMapKeys = gameScoreCountMap.keys\n        val guessScoreCountMapKeys\
    \ = guessScoreCountMap.keys\n        val gameScoreCountMapValues = gameScoreCountMap.values.toList\n\
    \        val guessScoreCountMapValues = guessScoreCountMap.values.toList\n   \
    \     val gameScoreCountMapKeysSorted = gameScoreCountMapKeys.sortBy(x => x)\n\
    \        val guessScoreCountMapKeysSorted = guessScoreCountMapKeys.sortBy(x =>\
    \ x)\n        val gameScoreCountMapValuesSorted = gameScoreCountMapValues.sortBy(x\
    \ => x)\n        val guessScoreCountMapValuesSorted = guessScoreCountMapValues.sortBy(x\
    \ => x)\n        val gameScoreCountMapKeysSortedReversed = gameScoreCountMapKeys.sortBy(x\
    \ => x).reverse\n        val guessScoreCountMapKeysSortedReversed = guessScoreCountMapKeys.sortBy(x\
    \ => x).reverse\n        val gameScoreCountMapValuesSortedReversed = gameScoreCountMapValues.sortBy(x\
    \ => x).reverse\n        val guessScoreCountMapValuesSortedReversed = guessScoreCountMapValues.sortBy(x\
    \ => x).reverse\n        val gameScoreCountMapKeysSortedReversedMap = gameScoreCountMapKeysSortedReversed.map(x\
    \ => (x, gameScoreCountMapValuesSortedReversed(x)))\n        val guessScoreCountMapKeysSortedReversedMap\
    \ = guessScoreCountMapKeysSortedReversed.map(x => (x, guessScoreCountMapValuesSortedReversed(x)))\n\
    \        val gameScoreCountMapKeysSortedReversedMapKeys = gameScoreCountMapKeysSortedReversedMap.keys\n\
    \        val guessScoreCountMapKeysSortedReversedMapKeys = guessScoreCountMapKeysSortedReversedMap.keys\n\
    \        val gameScoreCountMapKeysSortedReversedMapValues = gameScoreCountMapKeysSortedReversedMapKeys.map(x\
    \ => gameScoreCountMapValuesSortedReversed(x))\n        val guessScoreCountMapKeysSortedReversedMapValues\
    \ = guessScoreCountMapKeysSortedReversedMapKeys.map(x => guessScoreCountMapValuesSortedReverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpg2f47oiy.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpg2f47oiy.scala:19:52\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \ \e[33mval\e[0m \e[36mgameScoreCountMap\e[0m = gameScoreCount.toMap\n\e[31m\e\
    [31m   |\e[0m                                                    ^\e[0m\n\e[31m\
    \   |\e[0m                                       Cannot prove that Long <:< (K,\
    \ V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                       where:\
    \    K is a type variable\n\e[31m   |\e[0m                                   \
    \              V is a type variable\n\e[31m   |\e[0m                         \
    \              .\n\e[31m\e[31m-- Error: /tmp/tmpg2f47oiy.scala:20:54 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mguessScoreCountMap\e[0m\
    \ = guessScoreCount.toMap\n\e[31m\e[31m   |\e[0m                             \
    \                         ^\e[0m\n\e[31m   |\e[0m                            \
    \           Cannot prove that Long <:< (K, V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \                                       where:    K is a type variable\n\e[31m\
    \   |\e[0m                                                 V is a type variable\n\
    \e[31m   |\e[0m                                       .\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpg2f47oiy.scala:39:5 ---------------------\e[0m\e\
    [0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659798045
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.zipWithIndex.map { case (score, index) => score ->\
    \ index }.toMap\n        val guessScores = guess.zipWithIndex.map { case (score,\
    \ index) => score -> index }.toMap\n        val guessesWithScores = guess.zip(game).map\
    \ { case (guess, score) => guess -> score }.toMap\n        val guessesWithIndexes\
    \ = guess.zip(game).map { case (guess, score) => guess -> index }.toMap\n    \
    \    val guessesWithScoreAndIndex = guess.zip(game).map { case (guess, score)\
    \ => guess -> score -> index }.toMap\n        val guessesWithScoreAndIndexAndScore\
    \ = guess.zip(game).map { case (guess, score) => guess -> score -> index -> score\
    \ }.toMap\n        val guessesWithScoreAndIndexAndScoreAndIndex = guess.zip(game).map\
    \ { case (guess, score) => guess -> score -> index -> score -> index }.toMap\n\
    \        val guessesWithScoreAndIndexAndScoreAndIndexAndScore = guess.zip(game).map\
    \ { case (guess, score) => guess -> score -> index -> score -> index -> score\
    \ }.toMap\n        val guessesWithScoreAndIndexAndScoreAndIndexAndScoreAndIndex\
    \ = guess.zip(game).map { case (guess, score) => guess -> score -> index -> score\
    \ -> index -> score -> index }.toMap\n        val guessesWithScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScore\
    \ = guess.zip(game).map { case (guess, score) => guess -> score -> index -> score\
    \ -> index -> score -> index -> score }.toMap\n        val guessesWithScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndex\
    \ = guess.zip(game).map { case (guess, score) => guess -> score -> index -> score\
    \ -> index -> score -> index -> score -> index }.toMap\n        val guessesWithScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScore\
    \ = guess.zip(game).map { case (guess, score) => guess -> score -> index -> score\
    \ -> index -> score -> index -> score -> index -> score -> index }.toMap\n   \
    \     val guessesWithScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndex\
    \ = guess.zip(game).map { case (guess, score) => guess -> score -> index -> score\
    \ -> index -> score -> index -> \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong,\
    \ -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpn11dac0g.scala:27:210 --------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mguessesWithScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndex\e\
    [0m = guess.zip(game).map { \e[33mcase\e[0m (guess, score) => guess -> score ->\
    \ index -> score -> index -> score -> index -> \n\e[31m\e[31m   |\e[0m       \
    \                                                                            \
    \                                                                            \
    \                                                   ^\e[0m\n\e[31m   |\e[0m  \
    \                                     expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpn11dac0g.scala:37:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m37 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpn11dac0g.scala:18:87 ------------------------\e[0m\e[0m\n\
    \e[31m18 |\e[0m        \e[33mval\e[0m \e[36mguessesWithIndexes\e[0m = guess.zip(game).map\
    \ { \e[33mcase\e[0m (guess, score) => guess -> index }.toMap\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \             ^^^^^\e[0m\n\e[31m   |\e[0m                                    \
    \                    Not found: index\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpn11dac0g.scala:19:102 -----------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mguessesWithScoreAndIndex\e[0m\
    \ = guess.zip(game).map { \e[33mcase\e[0m (guess, score) => guess -> score ->\
    \ index }.toMap\n\e[31m\e[31m   |\e[0m                                       \
    \                                                               ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                                        Not found:\
    \ index\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- ["
  stdout: ''
  timestamp: 1659798048
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val guesses = gues\n        val scores = game\n        val guessesCount\
    \ = guesses.size\n        val scoresCount = scores.size\n        val result =\
    \ new Array[Long](guessesCount)\n        var i = 0\n        while (i < guessesCount)\
    \ {\n            val guess = guesses(i)\n            val score = scores(i)\n \
    \           if (guess == score) {\n                result(i) = score\n       \
    \         i += 1\n            } else {\n                val diff = abs(guess -\
    \ score)\n                result(i) = diff\n                i += 1\n         \
    \   }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong,\
    \ -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7b20fqtp.scala:15:22 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mguesses\e[0m = gues\n\e\
    [31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m          \
    \            Not found: gues\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp7b20fqtp.scala:33:8 ---------------------\e[0m\e[0m\n\e[31m33\
    \ |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Found:    (result : Array[Long])\n\e[31m   |\e[0m        Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798044
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameLength = game.size\n        val guessLength = guess.size\n     \
    \   val result = new Array[Long](guessLength)\n        var i = 0\n        while\
    \ (i < guessLength) {\n            val gameScore = game(i)\n            val guessScore\
    \ = guess(i)\n            val diff = guessScore - gameScore\n            if (diff\
    \ < 0) {\n                diff = -diff\n            }\n            result(i) =\
    \ diff\n            i += 1\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpmefy2lwh.scala:24:21 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                diff = -diff\n\e[31m\e[31m   |\e[0m \
    \               ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val diff\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmefy2lwh.scala:29:8\
    \ ---------------------\e[0m\e[0m\n\e[31m29 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798044
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameLen = game.size\n        val guessLen = guess.size\n        val\
    \ result = new mutable.ArrayList[Long](guessLen)\n        var i = 0\n        while\
    \ (i < guessLen) {\n            var j = 0\n            while (j < gameLen) {\n\
    \                if (game(j) == guess(i)) {\n                    result(i) +=\
    \ 1\n                    j += 1\n                }\n                else {\n \
    \                   result(i) += abs(game(j) - guess(i))\n                   \
    \ j += 1\n                }\n            }\n            i += 1\n        }\n  \
    \      result\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7dff3lsn.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ArrayList[\e[35mLong\e[0m](guessLen)\n\e[31m\e[31m   |\e[0m      \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798039
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameLen = game.length\n        val guessLen = guess.length\n       \
    \ val result = new Array[Long](guessLen)\n        val gameScores = game.zipWithIndex.filter(_._1\
    \ == 0).map(_._2)\n        val guessScores = guess.zipWithIndex.filter(_._1 ==\
    \ 0).map(_._2)\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap\
    \ = guessScores.toMap\n        val gameScoreKeys = gameScoreMap.keySet\n     \
    \   val guessScoreKeys = guessScoreMap.keySet\n        val gameScoreValues = gameScoreMap.values.toList\n\
    \        val guessScoreValues = guessScoreMap.values.toList\n        var i = 0\n\
    \        while (i < guessLen) {\n            val guessScore = guessScoreValues(i)\n\
    \            val gameScore = gameScoreValues(i)\n            val gameScoreKey\
    \ = gameScoreKeys(i)\n            val guessScoreKey = guessScoreKeys(i)\n    \
    \        val gameScoreDiff = gameScore - guessScore\n            val guessScoreDiff\
    \ = guessScore - gameScore\n            if (gameScoreKey == guessScoreKey) {\n\
    \                result(i) = gameScoreDiff\n            } else {\n           \
    \     result(i) = Math.abs(guessScoreDiff)\n            }\n            i += 1\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong,\
    \ -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp7efzsqy3.scala:20:43 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.toMap\n\
    \e[31m\e[31m   |\e[0m                                           ^\e[0m\n\e[31m\
    \   |\e[0m                                        Cannot prove that Int <:< (K,\
    \ V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                       \
    \ where:    K is a type variable\n\e[31m   |\e[0m                            \
    \                      V is a type variable\n\e[31m   |\e[0m                 \
    \                       .\n\e[31m\e[31m-- Error: /tmp/tmp7efzsqy3.scala:21:45\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \
    \ \e[33mval\e[0m \e[36mguessScoreMap\e[0m = guessScores.toMap\n\e[31m\e[31m  \
    \ |\e[0m                                             ^\e[0m\n\e[31m   |\e[0m \
    \                                       Cannot prove that Int <:< (K, V)\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m                                        where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \          V is a type variable\n\e[31m   |\e[0m                             \
    \           .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7efzsqy3.scala:41:8\
    \ ---------------------\e[0m\e[0m\n\e[31m41 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameSize = game.size\n        val guessSize = guess.size\n        val\
    \ result = new mutable.ArrayList[Long](guessSize)\n        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => (index, score) }.toMap\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => (index, score) }.toMap\n        guessScores.foreach\
    \ { case (index, score) =>\n            val guess = guessScores.get(index)._1\n\
    \            val gameScore = gameScores.get(index)._1\n            val diff =\
    \ abs(guess - gameScore)\n            if (guess == gameScore) {\n            \
    \    result.add(0)\n            } else {\n                result.add(diff)\n \
    \           }\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1ux322e5.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ArrayList[\e[35mLong\e[0m](guessSize)\n\e[31m\e[31m   |\e[0m     \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1ux322e5.scala:21:47\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m\
    \ \e[36mguess\e[0m = guessScores.get(index)._1\n\e[31m\e[31m   |\e[0m        \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \           value _1 is not a member of Option[Long]\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp1ux322e5.scala:22:50 ------------------------\e[0m\e[0m\n\
    \e[31m22 |\e[0m            \e[33mval\e[0m \e[36mgameScore\e[0m = gameScores.get(index)._1\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            value _1 is not a member of Option[Long]\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659798048
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreCount = gameScores.count\n        val guessScoreCount\
    \ = guessScores.count\n        val gameScoreSum = gameScores.sum\n        val\
    \ guessScoreSum = guessScores.sum\n        val gameScoreDiff = gameScoreSum -\
    \ guessScoreSum\n        val guessScoreDiff = guessScoreSum - gameScoreSum\n \
    \       val gameScoreDiffs = gameScores.zip(guessScores).map { case (gameScore,\
    \ guessScore) =>\n            val diff = Math.abs(gameScore - guessScore)\n  \
    \          diff match {\n                case 0 => diff\n                case\
    \ diff if diff < 0 => diff + gameScoreDiff\n                case diff if diff\
    \ > 0 => diff - gameScoreDiff\n            }\n        }\n        gameScoreDiffs.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6xzw1s9x.scala:34)\n\tat Problem.main(tmp6xzw1s9x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798053
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.map(x => if (x == 0) 0 else x)\n        val guessScores\
    \ = guess.map(x => if (x == 0) 0 else x)\n        val gameScore = gameScores.sum\n\
    \        val guessScore = guessScores.sum\n        val gameDiff = gameScore -\
    \ guessScore\n        val guessedCorrectly = gameScores.forall(x => x == guessScore)\n\
    \        val diffs = guessScores.map(x => if (x == 0) 0 else abs(x - gameScore))\n\
    \        val correctGuesses = gameScores.filter(x => x == guessScore)\n      \
    \  val correctGuessesDiffs = correctGuesses.map(x => if (x == 0) 0 else abs(x\
    \ - gameScore))\n        val diffsCorrectGuesses = correctGuesses.map(x => if\
    \ (x == 0) 0 else abs(x - guessScore))\n        val diffsCorrectGuessesDiffs =\
    \ correctGuesses.map(x => if (x == 0) 0 else abs(x - guessScore))\n        val\
    \ diffsCorrectGuessesDiffsCorrectGuesses = correctGuesses.map(x => if (x == 0)\
    \ 0 else abs(x - guessScore))\n        val diffsCorrectGuessesDiffsCorrectGuessesDiffs\
    \ = correctGuesses.map(x => if (x == 0) 0 else abs(x - guessScore))\n        val\
    \ diffsCorrectGuessesDiffsCorrectGuessesDiffsCorrectGuesses = correctGuesses.map(x\
    \ => if (x == 0) 0 else abs(x - guessScore))\n        val diffsCorrectGuessesDiffsCorrectGuessesDiffsCorrectGuessesDiffs\
    \ = correctGuesses.map(x => if (x == 0) 0 else abs(x - guessScore))\n        val\
    \ diffsCorrectGuessesDiffsCorrectGuessesDiffsCorrectGuessesDiffsCorrectGuesses\
    \ = correctGuesses.map(x => if (x == 0) 0 else abs(x - guessScore))\n        val\
    \ diffsCorrectGuessesDiffsCorrectGuessesDiffsCorrectGuessesDiffsCorrectGuessesDiffs\
    \ = correctGuesses.map(x => if (x == 0) 0 else abs(x - guessScore))\n        val\
    \ diffsCorrectGuessesDiffsCorrectGuessesDiffsCorrectGuessesDiffsCorrectGuessesDiffsCorrectGuesses\
    \ = correctGuesses.map(x => if (x == 0) 0 else abs(x - guessScore))\n        val\
    \ diffsCorrectGuessesDiffsCorrectGuessesDiffsCorrectGuessesDiffsCorrectG\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqc12ds79.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpqc12ds79.scala:34:5 ---------------------\e[0m\e[0m\n\e[31m34 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798048
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreCount = gameScores.count\n        val guessScoreCount\
    \ = guessScores.count\n        val gameScoreDiff = gameScoreCount - guessScoreCount\n\
    \        val guessScoreDiff = guessScoreCount - gameScoreCount\n        val gameScoreDiffs\
    \ = gameScores.zip(guessScores).map { case (gameScore, guessScore) => abs(gameScore\
    \ - guessScore) }\n        val guessScoreDiffs = guessScores.zip(gameScores).map\
    \ { case (guessScore, gameScore) => abs(guessScore - gameScore) }\n        gameScoreDiffs.zip(guessScoreDiffs).map\
    \ { case (gameScoreDiff, guessScoreDiff) => gameScoreDiff + guessScoreDiff }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjq51ckwo.scala:19:43 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiff\e[0m = gameScoreCount\
    \ - guessScoreCount\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue - is not a member of (Long => Boolean) => Int, but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpjq51ckwo.scala:20:45 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mguessScoreDiff\e[0m = guessScoreCount\
    \ - gameScoreCount\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue - is not a member of (Long => Boolean) => Int, but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659798059
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameLen = game.length\n        val guessLen = guess.length\n       \
    \ val result = new Array[Long](guessLen)\n        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score -> index }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score -> index }\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreArray =\
    \ gameScores.toArray\n        val guessScoreArray = guessScores.toArray\n    \
    \    val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreArray = gameScores.toArray\n        val guessScoreArray\
    \ = guessScores.toArray\n        val gameScoreMap = gameScores.toMap\n       \
    \ val guessScoreMap = guessScores.toMap\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreArray =\
    \ gameScores.toArray\n        val guessScoreArray = guessScores.toArray\n    \
    \    val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreArray = gameScores.toArray\n        val guessScoreArray\
    \ = guessScores.toArray\n        val gameScore\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbb92ijhm.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbb92ijhm.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreMap\e[0m = gameScores.toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreMap is already defined as \e[33mvalue\e[0m \e[35mgameScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbb92ijhm.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mguessScoreMap\e[0m = guessScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mguessScoreMap is already defined as \e[33mvalue\e[0m \e[35mguessScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbb92ijhm.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mgameScoreSet\e[0m = gameScores.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreSet is already defined as \e[33mvalue\e[0m \e[35mgameScoreSet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbb92ijhm.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mguessScoreSet\e[0m = guessScores.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mguessScoreSet is already defined as \e[33mvalue\e[0m \e[35mguessScoreSet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbb92ijhm.scala:32:12 ----------"
  stdout: ''
  timestamp: 1659798058
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.map(x => if (x == 0) 0 else x)\n        val guessScores\
    \ = guess.map(x => if (x == 0) 0 else x)\n        val gameScore = gameScores.sum\n\
    \        val guessScore = guessScores.sum\n        val gameDiff = gameScore -\
    \ guessScore\n        val guessDiff = guessScore - gameScore\n        gameDiff.map(x\
    \ => if (x == 0) 0 else x)\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong,\
    \ -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpekhbas0x.scala:21:17 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        gameDiff.map(\e[36mx\e[0m => \e[33mif\e[0m (x\
    \ == \e[31m0\e[0m) \e[31m0\e[0m \e[33melse\e[0m x)\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value map is not a member of Long\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659798058
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameLen = game.size\n        val guessLen = guess.size\n        val\
    \ result = new Array[Long](guessLen)\n        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => (index, score) }.toMap\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => (index, score) }.toMap\n        guessScores.foreach\
    \ { case (index, score) =>\n            val guess = guessScores.filter(_._1 ==\
    \ index).map(_._2).head\n            val gameScore = gameScores.getOrElse(index,\
    \ 0)\n            val diff = abs(guess - score)\n            if (diff == 0) result(0)\
    \ = 0\n            else result(index) = diff\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2jdll6_2.scala:27:8\
    \ ---------------------\e[0m\e[0m\n\e[31m27 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798059
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameLen = game.length\n        val guessLen = guess.length\n       \
    \ val result = new mutable.ArrayBuffer[Long]()\n        var i = 0\n        while\
    \ (i < gameLen) {\n            val gameScore = game(i)\n            val guessScore\
    \ = guess(i)\n            val diff = abs(guessScore - gameScore)\n           \
    \ if (gameScore == guessScore) {\n                result.append((gameScore - guessScore))\n\
    \                i += 1\n            } else {\n                result.append((guessScore\
    \ - gameScore))\n                i += 1\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxd2g3jhc.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ArrayBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798054
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameSet = game.distinct\n        val guessSet = guess.distinct\n   \
    \     val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val result = new mutable.ArrayList[Long]()\n        val gameSetIterator\
    \ = gameSet.iterator\n        val guessSetIterator = guessSet.iterator\n     \
    \   val gameSetIteratorSize = gameSetIterator.size\n        val guessSetIteratorSize\
    \ = guessSetIterator.size\n        var gameSetIteratorIndex = 0\n        var guessSetIteratorIndex\
    \ = 0\n        var gameSetIteratorValue = 0\n        var guessSetIteratorValue\
    \ = 0\n        var gameSetIteratorValueDiff = 0\n        var guessSetIteratorValueDiff\
    \ = 0\n        var gameSetIteratorValueDiffAbs = 0\n        var guessSetIteratorValueDiffAbs\
    \ = 0\n        var gameSetIteratorValueDiffAbsMax = 0\n        var guessSetIteratorValueDiffAbsMax\
    \ = 0\n        var gameSetIteratorValueDiffAbsMin = 0\n        var guessSetIteratorValueDiffAbsMin\
    \ = 0\n        var gameSetIteratorValueDiffAbsMaxMin = 0\n        var guessSetIteratorValueDiffAbsMaxMin\
    \ = 0\n        var gameSetIteratorValueDiffAbsMaxMinMin = 0\n        var guessSetIteratorValueDiffAbsMaxMinMin\
    \ = 0\n        var gameSetIteratorValueDiffAbsMaxMinMin = 0\n        var guessSetIteratorValueDiffAbsMaxMinMin\
    \ = 0\n        var gameSetIteratorValueDiffAbsMaxMinMin = 0\n        var guessSetIteratorValueDiffAbsMaxMinMin\
    \ = 0\n        var gameSetIteratorValueDiffAbsMaxMinMin = 0\n        var guessSetIteratorValueDiffAbsMaxMinMin\
    \ = 0\n        var gameSetIteratorValueDiffAbsMaxMinMin = 0\n        var guessSetIteratorValueDiffAbsMaxMinMin\
    \ = 0\n        var gameSetIteratorValueDiffAbsMaxMinMin = 0\n        var guessSetIteratorValueDiffAbsMaxMinMin\
    \ = 0\n        var gameSetIteratorValueDiffAbsMaxMinMin = 0\n        var guessSetIteratorValueDiffAbsMaxMinMin\
    \ = 0\n        var gameSetIteratorValueDiffAbsMaxMinMin = 0\n        var guessSetIteratorValueDiffAbsMaxMinMin\
    \ = 0\n        var gameSetIteratorValueDiffAbsMaxMinMin = 0\n        var guessSetIteratorValueDiffAbsMaxMinMin\
    \ = 0\n        var gameSetIteratorValueDiffAbsMaxMinMin = 0\n        var guessSetIteratorValueDiffAbsMaxMinMin\
    \ = 0\n        var gameSetIteratorValueDiffAbsMaxMinMin = 0\n        var guessSetIteratorValueDiffAbsMaxMinMin\
    \ = 0\n        var gameSetIteratorValue\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyx5sfgnh.scala:61:4 ----------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyx5sfgnh.scala:40:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m40 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mgameSetIteratorValueDiffAbsMaxMinMin\e[0m = \e[31m0\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mgameSetIteratorValueDiffAbsMaxMinMin is already defined as \e[33mvariable\e\
    [0m \e[35mgameSetIteratorValueDiffAbsMaxMinMin\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyx5sfgnh.scala:41:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m41 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mguessSetIteratorValueDiffAbsMaxMinMin\e[0m = \e[31m0\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mguessSetIteratorValueDiffAbsMaxMinMin is already defined as \e[33mvariable\e\
    [0m \e[35mguessSetIteratorValueDiffAbsMaxMinMin\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyx5sfgnh.scala:42:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m42 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mgameSetIteratorValueDiffAbsMaxMinMin\e[0m = \e[31m0\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mgameSetIteratorValueDiffAbsMaxMinMin is already defined as \e[33mvariable\e\
    [0m \e[35mgameSetIteratorValueDiffAbsMaxMinMin\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyx5sfgnh.scala:43:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m43 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mguessSetIteratorValueDiffAbsMaxMinMin\e[0m = \e[31m0\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mguessSet"
  stdout: ''
  timestamp: 1659798061
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap =\
    \ guessScores.toMap\n        val gameScoreList = gameScores.toList\n        val\
    \ guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guess\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbsn9xo79.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreMap is already defined as \e[33mvalue\e[0m \e[35mgameScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbsn9xo79.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mguessScoreMap\e[0m = guessScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mguessScoreMap is already defined as \e[33mvalue\e[0m \e[35mguessScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbsn9xo79.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = gameScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreList is already defined as \e[33mvalue\e[0m \e[35mgameScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbsn9xo79.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessScoreList\e[0m = guessScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mguessScoreList is already defined as \e[33mvalue\e[0m \e[35mguessScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbsn9xo79.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreSet\e[0m = gameScores.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0"
  stdout: ''
  timestamp: 1659798018
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.zipWithIndex.map{case (score, index) => score}\n \
    \       val guessesScores = guess.zipWithIndex.map{case (score, index) => score}\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n\
    \        val gameScores = gameScoreMap.values.toList\n        val guessesScores\
    \ = guessesScoreMap.values.toList\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessesScoreMap = guessesScores.toMap\n        val gameScores = gameScoreMap.values.toList\n\
    \        val guessesScores = guessesScoreMap.values.toList\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n    \
    \    val gameScores = gameScoreMap.values.toList\n        val guessesScores =\
    \ guessesScoreMap.values.toList\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessesScoreMap = guessesScores.toMap\n        val gameScores = gameScoreMap.values.toList\n\
    \        val guessesScores = guessesScoreMap.values.toList\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n    \
    \    val gameScores = gameScoreMap.values.toList\n        val guessesScores =\
    \ guessesScoreMap.values.toList\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessesScoreMap = guessesScores.toMap\n        val gameScores = gameScoreMap.values.toList\n\
    \        val guessesScores = guessesScoreMap.values.toList\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n    \
    \    val gameScores = gameScoreMap.values.toList\n        val guessesScores =\
    \ guessesScoreMap.values.toList\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessesScoreMap = guessesScores.toMap\n        val gameScores = gameScoreMap.values.toList\n\
    \        val guessesScores = guessesScoreMap.values.toList\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n    \
    \    val gameScores = gameScoreMap.values.toList\n        val guessesScores =\
    \ guessesScoreMap.values.toList\n        val \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpbzng65n3.scala:53:11 ---------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpbzng65n3.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = gameScoreMap.values.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mgameScores is already defined as \e[33mvalue\e[0m \e[35mgameScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbzng65n3.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mguessesScores\e[0m = guessesScoreMap.values.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesScores is already defined as \e[33mvalue\e[0m \e[35mguessesScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbzng65n3.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreMap is already defined as \e[33mvalue\e[0m \e[35mgameScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbzng65n3.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mguessesScoreMap\e[0m = guessesScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mguessesScoreMap is already defined as \e[33mvalue\e[0m \e[35mguessesScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that"
  stdout: ''
  timestamp: 1659798066
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameLen = game.size\n        val guessLen = guess.size\n        val\
    \ result = new Array[Long](guessLen)\n        val gameScores = game.zipWithIndex.map{\
    \ case (score, index) => score }\n        val guessScores = guess.zipWithIndex.map{\
    \ case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreKeys = gameScoreMap.keySet\n\
    \        val guessScoreKeys = guessScoreMap.keySet\n        val gameScoreValues\
    \ = gameScoreMap.values.toList\n        val guessScoreValues = guessScoreMap.values.toList\n\
    \        val gameScoreKeySet = gameScoreKeys.toSet\n        val guessScoreKeySet\
    \ = guessScoreKeys.toSet\n        val gameScoreValueSet = gameScoreValues.toSet\n\
    \        val guessScoreValueSet = guessScoreValues.toSet\n        val gameScoreKeySet\
    \ = gameScoreKeys.toSet\n        val guessScoreKeySet = guessScoreKeys.toSet\n\
    \        val gameScoreValueSet = gameScoreValues.toSet\n        val guessScoreValueSet\
    \ = guessScoreValues.toSet\n        val gameScoreKeySet = gameScoreKeys.toSet\n\
    \        val guessScoreKeySet = guessScoreKeys.toSet\n        val gameScoreValueSet\
    \ = gameScoreValues.toSet\n        val guessScoreValueSet = guessScoreValues.toSet\n\
    \        val gameScoreKeySet = gameScoreKeys.toSet\n        val guessScoreKeySet\
    \ = guessScoreKeys.toSet\n        val gameScoreValueSet = gameScoreValues.toSet\n\
    \        val guessScoreValueSet = guessScoreValues.toSet\n        val gameScoreKeySet\
    \ = gameScoreKeys.toSet\n        val guessScoreKeySet = guessScoreKeys.toSet\n\
    \        val gameScoreValueSet = gameScoreValues.toSet\n        val guessScoreValueSet\
    \ = guessScoreValues.toSet\n        val gameScoreKeySet = gameScoreKeys.toSet\n\
    \        val guessScoreKeySet = guessScoreKeys.toSet\n        val gameScoreValueSet\
    \ = gameScoreValues.toSet\n        val guessScoreValueSet = guessScoreValues.toSet\n\
    \        val gameScoreKeySet = gameScoreKeys.toSet\n        val guessScoreKeySet\
    \ = guessScoreKeys.toSet\n        val gameScoreValueSet = gameScoreValues.toSet\n\
    \        val guessScore\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpw9pj6dbx.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw9pj6dbx.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreKeySet\e[0m = gameScoreKeys.toSet\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mgameScoreKeySet\
    \ is already defined as \e[33mvalue\e[0m \e[35mgameScoreKeySet\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw9pj6dbx.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessScoreKeySet\e[0m = guessScoreKeys.toSet\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mguessScoreKeySet\
    \ is already defined as \e[33mvalue\e[0m \e[35mguessScoreKeySet\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpw9pj6dbx.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mgameScoreValueSet\e[0m = gameScoreValues.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mgameScoreValueSet is already defined as \e[33mvalue\e[0m \e[35mgameScoreValueSet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw9pj6dbx.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mguessScoreValueSet\e[0m = guessScoreValues.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreValueSet is already defined as \e[33mvalue\e[0m\
    \ \e[35mguessScoreValueSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group o"
  stdout: ''
  timestamp: 1659798066
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val guesses = guess.toSet\n        val scores = game.toSet\n        val\
    \ guessesCount = guesses.size\n        val scoresCount = scores.size\n       \
    \ val result = new mutable.ArrayBuffer[Long]()\n        var i = 0\n        while\
    \ (i < guessesCount) {\n            val guess = guesses(i)\n            val score\
    \ = scores(i)\n            val difference = abs(guess - score)\n            if\
    \ (difference == 0) {\n                result.add(i)\n            } else {\n \
    \               result.add(difference)\n            }\n            i += 1\n  \
    \      }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong,\
    \ -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp745mccqw.scala:19:25 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ArrayBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp745mccqw.scala:24:39\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m\
    \ \e[36mdifference\e[0m = abs(guess - score)\n\e[31m\e[31m   |\e[0m          \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue - is not a member of\
    \ Boolean, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mOne of the following imports might make progress towards fixing\
    \ the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659798067
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameLength = game.length\n        val guessLength = guess.length\n \
    \       val result = new Array[Long](guessLength)\n        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val gameScore = gameScores.foldLeft(0L)\
    \ { (sum, score) => sum + score }\n        val guessScore = guessScores.foldLeft(0L)\
    \ { (sum, score) => sum + score }\n        val difference = gameScore - guessScore\n\
    \        guess.zipWithIndex.foreach { case (score, index) =>\n            if (gameScores(index)\
    \ == guessScores(index)) {\n                result(index) = difference\n     \
    \       } else {\n                result(index) = abs(score - gameScores(index))\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpbfn327c7.scala:20:70 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mgameScore\e[0m = gameScores.foldLeft(\e\
    [31m0L\e[0m) { (\e[36msum\e[0m, \e[36mscore\e[0m) => sum + score }\n\e[31m\e[31m\
    \   |\e[0m                                                                  ^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35m+\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x:\
    \ Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long):\
    \ Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m\
    \   |\e[0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0m\
    \ (x: String): String\n\e[31m   |\e[0mmatch arguments ((score : (Long, Int)))\n\
    \e[31m\e[31m-- [E134] Type Error: /tmp/tmpbfn327c7.scala:21:72 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mguessScore\e[0m = guessScores.foldLeft(\e\
    [31m0L\e[0m) { (\e[36msum\e[0m, \e[36mscore\e[0m) => sum + score }\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \ ^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e\
    [0m \e[35m+\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\e[31m   |\e\
    [0m (x: Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x:\
    \ Long): Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\
    \e[31m   |\e[0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e\
    [0m (x: String): String\n\e[31m   |\e[0mmatch arguments ((score : (Long, Int)))\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbfn327c7.scala:30:8 ---------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\e[31m   |\e[0m\
    \        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798066
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val guesses = guess.toSet\n        val scores = game.toSet\n        val\
    \ results = new mutable.ArrayBuffer[Long]()\n        for(score <- scores) {\n\
    \            val guess = guesses.find(_ == score)\n            if (guess == None)\
    \ results += score\n            else results += guess - score\n        }\n   \
    \     results\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp43l4qktf.scala:17:26 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresults\e[0m = \e[33mnew\e\
    [0m mutable.ArrayBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798058
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val guesses = gues\n        val scores = game\n        val result = new\
    \ mutable.ArrayList[Long]()\n        val guessesCount = guesses.size\n       \
    \ val scoresCount = scores.size\n        val diff = new mutable.ArrayList[Long](guessesCount)\n\
    \        val diffCount = guessesCount\n        var i = 0\n        while(i < guessesCount)\
    \ {\n            val guess = guesses(i)\n            val score = scores(i)\n \
    \           val diffIndex = i\n            val diffValue = score\n           \
    \ while(i < guessesCount && guesses(i) == guess) {\n                i += 1\n \
    \               diffIndex += 1\n                diffValue += scores(i)\n     \
    \       }\n            diff(i) = diffValue\n            i += 1\n        }\n  \
    \      result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaikskuji.scala:15:22 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mguesses\e[0m = gues\n\e\
    [31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m          \
    \            Not found: gues\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpaikskuji.scala:17:25 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e[0m mutable.ArrayList[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpaikskuji.scala:20:23 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mdiff\e[0m = \e[33mnew\e\
    [0m mutable.ArrayList[\e[35mLong\e[0m](guessesCount)\n\e[31m\e[31m   |\e[0m  \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpaikskuji.scala:30:26\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m                diffIndex\
    \ += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m            value += is not a member of Int - did you mean diffIndex.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpaikskuji.scala:31:26 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                diffValue += scores(i)\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           value +=\
    \ is not a member of Long - did you mean diffValue.!=?\n5 errors found\n"
  stdout: ''
  timestamp: 1659798068
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.zipWithIndex.map { case (score, index) => (index,\
    \ score) }\n        val guessesScores = guess.zipWithIndex.map { case (score,\
    \ index) => (index, score) }\n        val gameScoreSet = gameScores.toSet\n  \
    \      val guessesScoreSet = guessesScores.toSet\n        val gameScoreList =\
    \ gameScores.toList\n        val guessesScoreList = guessesScores.toList\n   \
    \     val gameScoreSetSize = gameScoreSet.size\n        val guessesScoreSetSize\
    \ = guessesScoreSet.size\n        val gameScoreSetIterator = gameScoreSet.iterator\n\
    \        val guessesScoreSetIterator = guessesScoreSet.iterator\n        val gameScoreSetIteratorSize\
    \ = gameScoreSetIterator.size\n        val guessesScoreSetIteratorSize = guessesScoreSetIterator.size\n\
    \        val gameScoreSetIteratorIterator = gameScoreSetIterator.iterator\n  \
    \      val guessesScoreSetIteratorIterator = guessesScoreSetIterator.iterator\n\
    \        val gameScoreSetIteratorIteratorSize = gameScoreSetIteratorIterator.size\n\
    \        val guessesScoreSetIteratorIteratorSize = guessesScoreSetIteratorIterator.size\n\
    \        val gameScoreSetIteratorIteratorIterator = gameScoreSetIteratorIterator.iterator\n\
    \        val guessesScoreSetIteratorIteratorIterator = guessesScoreSetIteratorIterator.iterator\n\
    \        val gameScoreSetIteratorIteratorIteratorSize = gameScoreSetIteratorIteratorIterator.size\n\
    \        val guessesScoreSetIteratorIteratorIteratorSize = guessesScoreSetIteratorIteratorIterator.size\n\
    \        val gameScoreSetIteratorIteratorIteratorIterator = gameScoreSetIteratorIteratorIterator.iterator\n\
    \        val guessesScoreSetIteratorIteratorIteratorIterator = guessesScoreSetIteratorIteratorIterator.iterator\n\
    \        val gameScoreSetIteratorIteratorIteratorIteratorSize = gameScoreSetIteratorIteratorIteratorIterator.size\n\
    \        val guessesScoreSetIteratorIteratorIteratorIteratorSize = guessesScoreSetIteratorIteratorIteratorIterator.size\n\
    \        val gameScoreSetIteratorIteratorIteratorIteratorIterator = gameScoreSetIteratorIteratorIteratorIterator.iterator\n\
    \        val guessesScoreSetIteratorIteratorIteratorIteratorIterator = guessesScoreSetIteratorIteratorIteratorIterator.iterator\n\
    \        val gameScoreSetIteratorIteratorIteratorIteratorIteratorSize = gameScoreSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val guessesScoreSetIteratorIteratorIteratorIteratorSize = guessesScoreSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val gameScoreSetIteratorIteratorIteratorIteratorIteratorIterator = gameScoreSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0eaigp2e.scala:42:12 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mguessesScoreSetIteratorIteratorIteratorIteratorSize\e\
    [0m = guessesScoreSetIteratorIteratorIteratorIteratorIterator.size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesScoreSetIteratorIteratorIteratorIteratorSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mguessesScoreSetIteratorIteratorIteratorIteratorSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp0eaigp2e.scala:45:5 ---------------------\e[0m\e[0m\n\
    \e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659798066
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.map(x => if (x == 0) 0 else x)\n        val guessesScores\
    \ = guess.map(x => if (x == 0) 0 else x)\n        val diffs = guessesScores.zip(gameScores).map(x\
    \ => if (x._1 == x._2) 0 else abs(x._1 - x._2))\n        diffs.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798043
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameLen = game.length\n        val guessLen = guess.length\n       \
    \ val result = new Array[Long](guessLen)\n        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreKeys = gameScoreMap.keys\n\
    \        val guessScoreKeys = guessScoreMap.keys\n        val gameScoreValues\
    \ = gameScoreMap.values.toList\n        val guessScoreValues = guessScoreMap.values.toList\n\
    \        val gameScoreKeySet = gameScoreKeys.toSet\n        val guessScoreKeySet\
    \ = guessScoreKeys.toSet\n        val gameScoreValueSet = gameScoreValues.toSet\n\
    \        val guessScoreValueSet = guessScoreValues.toSet\n        val gameScoreKeySet\
    \ = gameScoreKeys.toSet\n        val guessScoreKeySet = guessScoreKeys.toSet\n\
    \        val gameScoreValueSet = gameScoreValues.toSet\n        val guessScoreValueSet\
    \ = guessScoreValues.toSet\n        val gameScoreKeySet = gameScoreKeys.toSet\n\
    \        val guessScoreKeySet = guessScoreKeys.toSet\n        val gameScoreValueSet\
    \ = gameScoreValues.toSet\n        val guessScoreValueSet = guessScoreValues.toSet\n\
    \        val gameScoreKeySet = gameScoreKeys.toSet\n        val guessScoreKeySet\
    \ = guessScoreKeys.toSet\n        val gameScoreValueSet = gameScoreValues.toSet\n\
    \        val guessScoreValueSet = guessScoreValues.toSet\n        val gameScoreKeySet\
    \ = gameScoreKeys.toSet\n        val guessScoreKeySet = guessScoreKeys.toSet\n\
    \        val gameScoreValueSet = gameScoreValues.toSet\n        val guessScoreValueSet\
    \ = guessScoreValues.toSet\n        val gameScoreKeySet = gameScoreKeys.toSet\n\
    \        val guessScoreKeySet = guessScoreKeys.toSet\n        val gameScoreValueSet\
    \ = gameScoreValues.toSet\n        val guessScoreValueSet = guessScoreValues.toSet\n\
    \        val gameScoreKeySet = gameScoreKeys.toSet\n        val guessScoreKeySet\
    \ = guessScoreKeys.toSet\n        val gameScoreValueSet = gameScoreValues.toSet\n\
    \        val guessScoreValueSet\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong,\
    \ -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8vqywsxs.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8vqywsxs.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreKeySet\e[0m = gameScoreKeys.toSet\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mgameScoreKeySet\
    \ is already defined as \e[33mvalue\e[0m \e[35mgameScoreKeySet\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8vqywsxs.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessScoreKeySet\e[0m = guessScoreKeys.toSet\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mguessScoreKeySet\
    \ is already defined as \e[33mvalue\e[0m \e[35mguessScoreKeySet\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp8vqywsxs.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mgameScoreValueSet\e[0m = gameScoreValues.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mgameScoreValueSet is already defined as \e[33mvalue\e[0m \e[35mgameScoreValueSet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8vqywsxs.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mguessScoreValueSet\e[0m = guessScoreValues.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreValueSet is already defined as \e[33mvalue\e[0m\
    \ \e[35mguessScoreValueSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group o"
  stdout: ''
  timestamp: 1659798069
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.zipWithIndex.map(x => x._2 - x._1).toList\n      \
    \  val guessesScores = guess.zipWithIndex.map(x => x._2 - x._1).toList\n     \
    \   val guessesDiff = guessesScores.zip(gameScores).map(x => if (x._1 == 0) 0\
    \ else x._1 - x._2)\n        val guessesDiffList = guessesDiff.toList\n      \
    \  val guessesDiffListSorted = guessesDiffList.sortBy(x => x)\n        val guessesDiffListSortedReversed\
    \ = guessesDiffListSorted.reverse\n        val guessesDiffListSortedReversedSorted\
    \ = guessesDiffListSortedReversed.sortBy(x => x)\n        val guessesDiffListSortedReversedSortedSorted:\
    \ Seq[Long] = guessesDiffListSortedReversedSorted.take(guessesDiffListSortedReversedSortedSorted.length)\n\
    \        val guessesDiffListSortedReversedSortedSortedSorted: Seq[Long] = guessesDiffListSortedReversedSortedSorted.takeRight(guessesDiffListSortedReversedSortedSorted.length)\n\
    \        val guessesDiffListSortedReversedSortedSortedSortedSorted: Seq[Long]\
    \ = guessesDiffListSortedReversedSortedSortedSorted.take(guessesDiffListSortedReversedSortedSortedSorted.length)\n\
    \        val guessesDiffListSortedReversedSortedSortedSortedSorted: Seq[Long]\
    \ = guessesDiffListSortedReversedSortedSortedSorted.takeRight(guessesDiffListSortedReversedSortedSortedSorted.length)\n\
    \        val guessesDiffListSortedReversedSortedSortedSortedSorted: Seq[Long]\
    \ = guessesDiffListSortedReversedSortedSortedSorted.take(guessesDiffListSortedReversedSortedSortedSorted.length)\n\
    \        val guessesDiffListSortedReversedSortedSortedSortedSorted: Seq[Long]\
    \ = guessesDiffListSortedReversedSortedSortedSorted.takeRight(guessesDiffListSortedReversedSortedSortedSorted.length)\n\
    \        val guessesDiffListSortedReversedSortedSortedSortedSortedSorted: Seq[Long]\
    \ = guessesDiffListSortedReversedSortedSortedSortedSorted.take(guessesDiffListSortedReversedSortedSortedSortedSorted.length)\n\
    \        val guessesDiffListSortedReversedSortedSortedSortedSortedSorted: Seq[Long]\
    \ = guessesDiffListSortedReversedSortedSortedSortedSorted.takeRight(guessesDiffListSortedReversedSortedSortedSortedSorted.length)\n\
    \        val guessesDiffListSortedReversedSorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphrty4c0s.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphrty4c0s.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessesDiffListSortedReversedSortedSortedSortedSorted\e[0m: \e[35mSeq\e\
    [0m[\e[35mLong\e[0m] = guessesDiffListSortedReversedSortedSortedSorted.takeRight(guessesDiffListSortedReversedSortedSortedSorted.length)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesDiffListSortedReversedSortedSortedSortedSorted is already\
    \ defined as \e[33mvalue\e[0m \e[35mguessesDiffListSortedReversedSortedSortedSortedSorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphrty4c0s.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessesDiffListSortedReversedSortedSortedSortedSorted\e\
    [0m: \e[35mSeq\e[0m[\e[35mLong\e[0m] = guessesDiffListSortedReversedSortedSortedSorted.take(guessesDiffListSortedReversedSortedSortedSorted.length)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesDiffListSortedReversedSortedSortedSortedSorted is already\
    \ defined as \e[33mvalue\e[0m \e[35mguessesDiffListSortedReversedSortedSortedSortedSorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphrty4c0s.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mguessesDiffListSortedReversedSortedSortedSorted"
  stdout: ''
  timestamp: 1659798068
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap =\
    \ guessScores.toMap\n        val gameScoreKeys = gameScoreMap.keySet\n       \
    \ val guessScoreKeys = guessScoreMap.keySet\n        val gameScoreValues = gameScoreMap.values.toList\n\
    \        val guessScoreValues = guessScoreMap.values.toList\n        val gameScoreKeySet\
    \ = gameScoreKeys.toSet\n        val guessScoreKeySet = guessScoreKeys.toSet\n\
    \        val gameScoreValueSet = gameScoreValues.toSet\n        val guessScoreValueSet\
    \ = guessScoreValues.toSet\n        val gameScoreKeySetSize = gameScoreKeySet.size\n\
    \        val guessScoreKeySetSize = guessScoreKeySet.size\n        val gameScoreValueSetSize\
    \ = gameScoreValueSet.size\n        val guessScoreValueSetSize = guessScoreValueSet.size\n\
    \        val gameScoreKeySetSize = gameScoreKeySet.size\n        val guessScoreKeySetSize\
    \ = guessScoreKeySet.size\n        val gameScoreValueSetSize = gameScoreValueSet.size\n\
    \        val guessScoreValueSetSize = guessScoreValueSet.size\n        val gameScoreKeySetSize\
    \ = gameScoreKeySet.size\n        val guessScoreKeySetSize = guessScoreKeySet.size\n\
    \        val gameScoreValueSetSize = gameScoreValueSet.size\n        val guessScoreValueSetSize\
    \ = guessScoreValueSet.size\n        val gameScoreKeySetSize = gameScoreKeySet.size\n\
    \        val guessScoreKeySetSize = guessScoreKeySet.size\n        val gameScoreValueSetSize\
    \ = gameScoreValueSet.size\n        val guessScoreValueSetSize = guessScoreValueSet.size\n\
    \        val gameScoreKeySetSize = gameScoreKeySet.size\n        val guessScoreKeySetSize\
    \ = guessScoreKeySet.size\n        val gameScoreValueSetSize = gameScoreValueSet.size\n\
    \        val guessScoreValueSetSize = guessScoreValueSet.size\n        val gameScoreKeySetSize\
    \ = gameScoreKeySet.size\n        val guessScoreKeySetSize = guessScoreKeySet.size\n\
    \        val gameScoreValueSetSize = gameScoreValueSet.size\n        val guessScoreValueSetSize\
    \ = guessScoreValueSet.size\n        val gameScoreKeySetSize = gameScoreKeySet.size\n\
    \        val guessScoreKeySetSize = guessScoreKeySet.size\n        val gameScoreValue\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1oy5gc3s.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1oy5gc3s.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreKeySetSize\e[0m = gameScoreKeySet.size\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mgameScoreKeySetSize\
    \ is already defined as \e[33mvalue\e[0m \e[35mgameScoreKeySetSize\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp1oy5gc3s.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mguessScoreKeySetSize\e[0m = guessScoreKeySet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreKeySetSize is already defined as \e[33mvalue\e[0m\
    \ \e[35mguessScoreKeySetSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp1oy5gc3s.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgameScoreValueSetSize\e\
    [0m = gameScoreValueSet.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreValueSetSize is already defined as \e[33mvalue\e\
    [0m \e[35mgameScoreValueSetSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1oy5gc3s.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mguessScoreValueSetSize\e\
    [0m = guessScoreValueSet.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreValueSetSize is already defined as \e[33mvalue\e\
    [0m \e[35mguessScoreValueSetSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |"
  stdout: ''
  timestamp: 1659798070
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap =\
    \ guessScores.toMap\n        val gameScoreList = new mutable.ListBuffer[Long]()\n\
    \        val guessScoreList = new mutable.ListBuffer[Long]()\n        gameScoreMap.foreach\
    \ { case (score, index) => gameScoreList += score }\n        guessScoreMap.foreach\
    \ { case (score, index) => guessScoreList += score }\n        val gameScores =\
    \ gameScoreList.toList\n        val guessScores = guessScoreList.toList\n    \
    \    val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = new mutable.ListBuffer[Long]()\n        val guessScoreList\
    \ = new mutable.ListBuffer[Long]()\n        gameScoreMap.foreach { case (score,\
    \ index) => gameScoreList += score }\n        guessScoreMap.foreach { case (score,\
    \ index) => guessScoreList += score }\n        val gameScores = gameScoreList.toList\n\
    \        val guessScores = guessScoreList.toList\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = new\
    \ mutable.ListBuffer[Long]()\n        val guessScoreList = new mutable.ListBuffer[Long]()\n\
    \        gameScoreMap.foreach { case (score, index) => gameScoreList += score\
    \ }\n        guessScoreMap.foreach { case (score, index) => guessScoreList +=\
    \ score }\n        val gameScores = gameScoreList.toList\n        val guessScores\
    \ = guessScoreList.toList\n        val gameScoreMap = gameScores.toMap\n     \
    \   val guessScoreMap = guessScores.toMap\n        val gameScoreList = new mutable.ListBuffer[Long]()\n\
    \        val guessScoreList = new mutable.ListBuffer[Long]()\n        gameScoreMap.foreach\
    \ { case (score, index) => gameScoreList += score }\n        guessScoreMap.foreach\
    \ { case (score, index) => guessScoreList += score }\n        val gameScores =\
    \ gameScoreList.toList\n        val guessScores = guessScoreList.toList\n    \
    \    val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpres0yoem.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = gameScoreList.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScores is already defined as \e[33mvalue\e[0m \e[35mgameScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpres0yoem.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mguessScores\e[0m = guessScoreList.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mguessScores is already defined as \e[33mvalue\e[0m \e[35mguessScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpres0yoem.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreMap is already defined as \e[33mvalue\e[0m \e[35mgameScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpres0yoem.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessScoreMap\e[0m = guessScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mguessScoreMap is already defined as \e[33mvalue\e[0m \e[35mguessScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpres0yoem.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659798070
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameLength = game.length\n        val guessLength = guess.length\n \
    \       val result = new Array[Long](guessLength)\n        var i = 0\n       \
    \ while (i < guessLength) {\n            val gameScore = game(i)\n           \
    \ val guessScore = guess(i)\n            val diff = guessScore - gameScore\n \
    \           result(i) = if (diff < 0) -diff else diff\n            i += 1\n  \
    \      }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphx2hrlld.scala:26:8\
    \ ---------------------\e[0m\e[0m\n\e[31m26 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798068
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val guesses = guess.toList\n        val scores = game.toList\n        val\
    \ guessesWithScores = guesses.zip(scores)\n        val guessesWithScoresSortedByScore\
    \ = guessesWithScores.sortBy(_._2)\n        val guessesWithScoresSortedByScoreWithCorrectGuesses\
    \ = guessesWithScoresSortedByScore\n            .filter(_._1 == 0)\n         \
    \   .filter(_._2 > 0)\n        val guessesWithScoresSortedByScoreWithIncorrectGuesses\
    \ = guessesWithScoresSortedByScore\n            .filter(_._1 == 0)\n         \
    \   .filter(_._2 < 0)\n        val guessesWithScoresSortedByScoreWithCorrectGuessesAndIncorrectGuesses\
    \ = guessesWithScoresSortedByScoreWithCorrectGuesses\n            .union(guessesWithScoresSortedByScoreWithIncorrectGuesses)\n\
    \        val guessesWithScoresSortedByScoreWithCorrectGuessesAndIncorrectGuessesWithCorrectGuesses\
    \ = guessesWithScoresSortedByScoreWithCorrectGuessesAndIncorrectGuesses\n    \
    \        .filter(_._2 == 0)\n        val guessesWithScoresSortedByScoreWithCorrectGuessesAndIncorrectGuessesWithIncorrectGuesses\
    \ = guessesWithScoresSortedByScoreWithCorrectGuessesAndIncorrectGuesses\n    \
    \        .filter(_._2 < 0)\n        val guessesWithScoresSortedByScoreWithCorrectGuessesAndIncorrectGuessesWithCorrectGuessesAndIncorrectGuesses\
    \ = guessesWithScoresSortedByScoreWithCorrectGuessesAndIncorrectGuessesWithCorrectGuesses\n\
    \            .filter(_._2 == 0)\n            .filter(_._2 < 0)\n        val guessesWithScoresSortedByScoreWithCorrectGuessesAndIncorrectGuessesWithIncorrectGuessesAndCorrectGuesses\
    \ = guessesWithScoresSortedByScoreWithCorrectGuessesAndIncorrectGuessesWithIncorrectGuesses\n\
    \            .filter(_._2 < 0)\n            .filter(_._2 == 0)\n        val guessesWithScoresSortedByScoreWithCorrectGuessesAndIncorrectGuessesWithCorrectGuessesAndIncorrectGuessesAndCorrectGuesses\
    \ = guessesWithScoresSortedByScoreWithCorrectGuessesAndIncorrectGuessesWithCorrectGuessesAndIncorrectGuesses\n\
    \            .filter(_\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp13wpr5ci.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp13wpr5ci.scala:39:5 ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798070
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val guesses = guess.toSet\n        val scores = game.toSet\n        val\
    \ diffs = scores.map(x => if (guesses.contains(x)) 0 else abs(x - guess(x)))\n\
    \        diffs.toList\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy9gtoryc.scala:17:82\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mdiffs\e\
    [0m = scores.map(\e[36mx\e[0m => \e[33mif\e[0m (guesses.contains(x)) \e[31m0\e\
    [0m \e[33melse\e[0m abs(x - guess(x)))\n\e[31m\e[31m   |\e[0m                \
    \                                                                  ^\e[0m\n\e\
    [31m   |\e[0m                                                    Found:    (x\
    \ : Long)\n\e[31m   |\e[0m                                                   \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798070
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameSet = game.distinct\n        val guessSet = guess.distinct\n   \
    \     val result = gameSet.zip(guessSet).map { case (game, guess) =>\n       \
    \     if (game == guess) 0 else Math.abs(guess - game)\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnuj3c6j_.scala:23)\n\tat Problem.main(tmpnuj3c6j_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798075
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.zipWithIndex.map(x => x._1 - x._2)\n        val guessScores\
    \ = guess.zipWithIndex.map(x => x._1 - x._2)\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guess\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyl00w3f5.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreMap is already defined as \e[33mvalue\e[0m \e[35mgameScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyl00w3f5.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mguessScoreMap\e[0m = guessScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mguessScoreMap is already defined as \e[33mvalue\e[0m \e[35mguessScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyl00w3f5.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = gameScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreList is already defined as \e[33mvalue\e[0m \e[35mgameScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyl00w3f5.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessScoreList\e[0m = guessScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mguessScoreList is already defined as \e[33mvalue\e[0m \e[35mguessScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyl00w3f5.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreSet\e[0m = gameScores.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0"
  stdout: ''
  timestamp: 1659798073
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameSet = game.toSet\n        val guessSet = guess.toSet\n        val\
    \ result = new mutable.ArrayList[Long]\n        val gameSize = game.size\n   \
    \     val guessSize = guess.size\n        val gameIndex = 0\n        val guessIndex\
    \ = 0\n        val gameScore = game(gameIndex)\n        val guessScore = guess(guessIndex)\n\
    \        val gameScoreDiff = gameScore - guessScore\n        val guessScoreDiff\
    \ = guessScore - gameScore\n        while (gameIndex < gameSize && guessIndex\
    \ < guessSize) {\n            if (gameSet(gameIndex) == guessSet(guessIndex))\
    \ {\n                result.add(gameScoreDiff)\n                gameIndex += 1\n\
    \                guessIndex += 1\n            } else if (gameSet(gameIndex) <\
    \ guessSet(guessIndex)) {\n                result.add(guessScoreDiff)\n      \
    \          gameIndex += 1\n            } else {\n                result.add(gameScoreDiff)\n\
    \                guessIndex += 1\n            }\n        }\n        result\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp236imcq2.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ArrayList[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp236imcq2.scala:29:26\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m                gameIndex\
    \ += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m            value += is not a member of Int - did you mean gameIndex.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp236imcq2.scala:30:27 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                guessIndex += \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           value\
    \ += is not a member of Int - did you mean guessIndex.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp236imcq2.scala:33:26 ------------------------\e[0m\e\
    [0m\n\e[31m33 |\e[0m                gameIndex += \e[31m1\e[0m\n\e[31m\e[31m  \
    \ |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value +=\
    \ is not a member of Int - did you mean gameIndex.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp236imcq2.scala:36:27 ------------------------\e[0m\e[0m\n\
    \e[31m36 |\e[0m                guessIndex += \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           value += is not\
    \ a member of Int - did you mean guessIndex.!=?\n5 errors found\n"
  stdout: ''
  timestamp: 1659798078
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap =\
    \ guessScores.toMap\n        val gameScoreList = gameScoreMap.toList\n       \
    \ val guessScoreList = guessScoreMap.toList\n        val gameScoreSet = gameScoreList.distinct\n\
    \        val guessScoreSet = guessScoreList.distinct\n        val gameScoreSetSize\
    \ = gameScoreSet.size\n        val guessScoreSetSize = guessScoreSet.size\n  \
    \      val gameScoreSetIterator = gameScoreSet.iterator\n        val guessScoreSetIterator\
    \ = guessScoreSet.iterator\n        val gameScoreSetIteratorSize = gameScoreSetIterator.size\n\
    \        val guessScoreSetIteratorSize = guessScoreSetIterator.size\n        val\
    \ gameScoreSetIteratorIterator = gameScoreSetIterator.iterator\n        val guessScoreSetIteratorIterator\
    \ = guessScoreSetIterator.iterator\n        val gameScoreSetIteratorIteratorSize\
    \ = gameScoreSetIteratorIterator.size\n        val guessScoreSetIteratorIteratorSize\
    \ = guessScoreSetIteratorIterator.size\n        val gameScoreSetIteratorIteratorIterator\
    \ = gameScoreSetIteratorIterator.iterator\n        val guessScoreSetIteratorIteratorIterator\
    \ = guessScoreSetIteratorIterator.iterator\n        val gameScoreSetIteratorIteratorIteratorSize\
    \ = gameScoreSetIteratorIteratorIterator.size\n        val guessScoreSetIteratorIteratorIteratorSize\
    \ = guessScoreSetIteratorIteratorIterator.size\n        val gameScoreSetIteratorIteratorIteratorIterator\
    \ = gameScoreSetIteratorIteratorIterator.iterator\n        val guessScoreSetIteratorIteratorIteratorIterator\
    \ = guessScoreSetIteratorIteratorIterator.iterator\n        val gameScoreSetIteratorIteratorIteratorIteratorSize\
    \ = gameScoreSetIteratorIteratorIteratorIterator.size\n        val guessScoreSetIteratorIteratorIteratorIteratorSize\
    \ = guessScoreSetIteratorIteratorIteratorIterator.size\n        val gameScoreSetIteratorIteratorIteratorIteratorIterator\
    \ = gameScoreSetIteratorIteratorIteratorIterator.iterator\n        val guessScoreSetIteratorIteratorIteratorIteratorIterator\
    \ = guessScoreSetIteratorIteratorIteratorIterator.iterator\n        val gameScoreSetIteratorIteratorIteratorIteratorIteratorSize\
    \ = gameScoreSetIteratorIteratorIteratorIteratorIterator.size\n        val guessScoreSetIteratorIteratorIteratorIteratorIteratorSize\
    \ = guessScoreSetIteratorIteratorIteratorIteratorIterator.size\n        val gameScoreSetIteratorIteratorIteratorIteratorIteratorIterator\
    \ = gameScoreSetIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ guessScoreSetIteratorIteratorIteratorIteratorIteratorIterator = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpotbjj75z.scala:46:75 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36mguessScoreSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                                \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \             expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- Error: /tmp/tmpotbjj75z.scala:17:43 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.toMap\n\
    \e[31m\e[31m   |\e[0m                                           ^\e[0m\n\e[31m\
    \   |\e[0m                                       Cannot prove that Long <:< (K,\
    \ V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                       where:\
    \    K is a type variable\n\e[31m   |\e[0m                                   \
    \              V is a type variable\n\e[31m   |\e[0m                         \
    \              .\n\e[31m\e[31m-- Error: /tmp/tmpotbjj75z.scala:18:45 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mguessScoreMap\e[0m = guessScores.toMap\n\
    \e[31m\e[31m   |\e[0m                                             ^\e[0m\n\e[31m\
    \   |\e[0m                                       Cannot prove that Long <:< (K,\
    \ V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                       where:\
    \    K is a type variable\n\e[31m   |\e[0m                                   \
    \              V is a type variable\n\e[31m   |\e[0m                         \
    \              .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpotbjj75z.scala:47:5\
    \ ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798078
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.zipWithIndex.map { case (score, index) => (index,\
    \ score) }.toMap\n        val guessesScores = guess.zipWithIndex.map { case (score,\
    \ index) => (index, score) }.toMap\n        val guessesWithScores = guessesScores.map\
    \ { case (index, score) => (index, gameScores(index) - score) }\n        val guessesWithAbsScores\
    \ = guessesWithScores.map { case (index, score) => (index, Math.abs(score)) }\n\
    \        guessesWithAbsScores.map { case (index, score) => (index, gameScores(index)\
    \ - score) }.toList\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7csp7xaf.scala:19:95\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        guessesWithAbsScores.map\
    \ { \e[33mcase\e[0m (index, score) => (index, gameScores(index) - score) }.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31m(\e[0m\e[1m\e[31mInt\e[0m\e\
    [1m\e[31m,\e[0m\e[1m\e[31m \e[0mLong\e[1m\e[31m)\e[0m]\n\e[31m   |\e[0m      \
    \  Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798081
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val guesses = guess.toSet\n        val scores = game.toSet\n        val\
    \ result = new mutable.ArrayBuffer[Long]()\n        for (score <- scores) {\n\
    \            if (guesses.contains(score)) {\n                result.append((score\
    \ - guesses(score)).toLong)\n            } else {\n                result.append((score\
    \ - score).toLong)\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpspz97ctj.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ArrayBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798074
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val guesses = guess.toSet\n        val scores = game.toSet\n        val\
    \ result = new mutable.ListBuffer[Long]()\n        val scoreDiffs = scores.map(x\
    \ => Math.abs(x - guess(x)))\n        val guesseDiffs = guesses.map(x => Math.abs(x\
    \ - scores(x)))\n        guesseDiffs.zip(scoreDiffs).foreach { case (guess, scoreDiff)\
    \ =>\n            if (guess == 0) {\n                result.add(0)\n         \
    \   } else {\n                result.add(scoreDiff)\n            }\n        }\n\
    \        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_frwztft.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_frwztft.scala:18:60\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mscoreDiffs\e\
    [0m = scores.map(\e[36mx\e[0m => Math.abs(x - guess(x)))\n\e[31m\e[31m   |\e[0m\
    \                                                            ^\e[0m\n\e[31m  \
    \ |\e[0m                                                    Found:    (x : Long)\n\
    \e[31m   |\e[0m                                                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp_frwztft.scala:19:54 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mguesseDiffs\e[0m = guesses.map(\e\
    [36mx\e[0m => Math.abs(x - scores(x)))\n\e[31m\e[31m   |\e[0m                \
    \                                    ^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35m-\e[0m in \e[33mclass\e[0m \e[35mLong\e\
    [0m with types\n\e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e[0m (x: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m\
    \   |\e[0m (x: Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\e[31m   |\e[0m\
    \ (x: Byte): Long\n\e[31m   |\e[0mmatch arguments (Boolean)\n3 errors found\n"
  stdout: ''
  timestamp: 1659798080
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameLength = game.length\n        val guessLength = guess.length\n \
    \       val result = new mutable.ArrayList[Long](guessLength)\n        val gameScores\
    \ = game.zipWithIndex.map { case (score, index) => (index, score) }.toMap\n  \
    \      val guessScores = guess.zipWithIndex.map { case (score, index) => (index,\
    \ score) }.toMap\n        val gameScore = gameScores.map { case (index, score)\
    \ => (index, score) }.toMap\n        val guessScore = guessScores.map { case (index,\
    \ score) => (index, score) }.toMap\n        val gameScores = gameScores.map {\
    \ case (index, score) => (index, score) }.toMap\n        val guessScores = guessScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val gameScore = gameScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val guessScore = guessScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val gameScores = gameScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val guessScores = guessScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val gameScore = gameScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val guessScore = guessScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val gameScores = gameScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val guessScores = guessScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val gameScore = gameScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val guessScore = guessScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val gameScores = gameScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val guessScores = guessScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val gameScore = gameScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val guessScore = guessScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val gameScores = gameScores.map\
    \ { case (index, score) => (index, score\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyprxe7zp.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyprxe7zp.scala:48:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m48 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyprxe7zp.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = gameScores.map { \e\
    [33mcase\e[0m (index, score) => (index, score) }.toMap\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScores is already defined as \e[33mvalue\e[0m \e[35mgameScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyprxe7zp.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mguessScores\e[0m = guessScores.map {\
    \ \e[33mcase\e[0m (index, score) => (index, score) }.toMap\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScores is already defined as \e[33mvalue\e[0m \e[35mguessScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyprxe7zp.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mgameScore\e[0m = gameScores.map { \e\
    [33mcase\e[0m (index, score) => (index, score) }.toMap\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScore is already defined as \e[33mvalue\e[0m \e[35mgameScore\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyprxe7zp.scala:25:12 ------"
  stdout: ''
  timestamp: 1659798085
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameSize = game.size\n        val guessSize = guess.size\n        val\
    \ result = new Array[Long](guessSize)\n        var i = 0\n        while (i < guessSize)\
    \ {\n            val gameScore = game(i)\n            val guessScore = guess(i)\n\
    \            val diff = guessScore - gameScore\n            if (diff < 0) {\n\
    \                val temp = gameScore\n                gameScore = guessScore\n\
    \                guessScore = temp\n                diff = -diff\n           \
    \ }\n            result(i) = diff\n            i += 1\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpdzed679l.scala:25:26 -----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                gameScore = guessScore\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \         Reassignment to val gameScore\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmpdzed679l.scala:26:27 -----------------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m                guessScore = temp\n\e[31m\e[31m   |\e[0m \
    \               ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val guessScore\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpdzed679l.scala:27:21\
    \ -----------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                diff\
    \ = -diff\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                Reassignment to val diff\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpdzed679l.scala:32:8 ---------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\e[31m   |\e[0m\
    \        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798081
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameLen = game.length\n        val guessLen = guess.length\n       \
    \ val result = new Array[Long](guessLen)\n        val gameScores = game.zipWithIndex.map(_._2)\n\
    \        val guessScores = guess.zipWithIndex.map(_._2)\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n        guessScoreMap.foreach\
    \ { case (score, index) =>\n            val guessIndex = guessScoreMap.get(score)\n\
    \            if (guessIndex == None) result(0) = score\n            else result(0)\
    \ = abs(guessIndex.get._1 - index)\n        }\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp9mhl2j7l.scala:20:43 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.toMap\n\
    \e[31m\e[31m   |\e[0m                                           ^\e[0m\n\e[31m\
    \   |\e[0m                                        Cannot prove that Int <:< (K,\
    \ V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                       \
    \ where:    K is a type variable\n\e[31m   |\e[0m                            \
    \                      V is a type variable\n\e[31m   |\e[0m                 \
    \                       .\n\e[31m\e[31m-- Error: /tmp/tmp9mhl2j7l.scala:21:45\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \
    \ \e[33mval\e[0m \e[36mguessScoreMap\e[0m = guessScores.toMap\n\e[31m\e[31m  \
    \ |\e[0m                                             ^\e[0m\n\e[31m   |\e[0m \
    \                                       Cannot prove that Int <:< (K, V)\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m                                        where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \          V is a type variable\n\e[31m   |\e[0m                             \
    \           .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9mhl2j7l.scala:27:8\
    \ ---------------------\e[0m\e[0m\n\e[31m27 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798085
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameMap = game.zipWithIndex.toMap\n        val guessMap = guess.zipWithIndex.toMap\n\
    \        val gameScores = gameMap.map(_._2).distinct\n        val guessScores\
    \ = guessMap.map(_._2).distinct\n        val gameScoreMap = gameScores.zip(guessScores).map(x\
    \ => (x._1, x._2)).toMap\n        val gameScoreArray = gameScoreMap.values\n \
    \       val guessScoreArray = guessScoreMap.values\n        val gameScoreArrayLength\
    \ = gameScoreArray.length\n        val guessScoreArrayLength = guessScoreArray.length\n\
    \        val gameScoreArrayCopy = gameScoreArray.clone()\n        val guessScoreArrayCopy\
    \ = guessScoreArray.clone()\n        var gameScoreArrayCopyLength = gameScoreArrayCopy.length\n\
    \        var guessScoreArrayCopyLength = guessScoreArrayCopy.length\n        var\
    \ gameScoreArrayCopyIndex = 0\n        var guessScoreArrayCopyIndex = 0\n    \
    \    var gameScoreArrayCopyIndexLength = 0\n        var guessScoreArrayCopyIndexLength\
    \ = 0\n        var gameScoreArrayCopyIndexLength2 = 0\n        var guessScoreArrayCopyIndexLength2\
    \ = 0\n        var gameScoreArrayCopyIndexLength3 = 0\n        var guessScoreArrayCopyIndexLength3\
    \ = 0\n        var gameScoreArrayCopyIndexLength4 = 0\n        var guessScoreArrayCopyIndexLength4\
    \ = 0\n        var gameScoreArrayCopyIndexLength5 = 0\n        var guessScoreArrayCopyIndexLength5\
    \ = 0\n        var gameScoreArrayCopyIndexLength6 = 0\n        var guessScoreArrayCopyIndexLength6\
    \ = 0\n        var gameScoreArrayCopyIndexLength7 = 0\n        var guessScoreArrayCopyIndexLength7\
    \ = 0\n        var gameScoreArrayCopyIndexLength8 = 0\n        var guessScoreArrayCopyIndexLength8\
    \ = 0\n        var gameScoreArrayCopyIndexLength9 = 0\n        var guessScoreArrayCopyIndexLength9\
    \ = 0\n        var gameScoreArrayCopyIndexLength10 = 0\n        var guessScoreArrayCopyIndexLength10\
    \ = 0\n        var gameScoreArrayCopyIndexLength11 = 0\n        var guessScoreArrayCopyIndexLength11\
    \ = 0\n        var gameScoreArrayCopyIndexLength12 = 0\n        var guessScoreArrayCopyIndexLength12\
    \ = 0\n        var gameScoreArrayCopyIndexLength13 = 0\n        var guessScoreArrayCopyIndexLength13\
    \ = 0\n        var gameScoreArrayCopyIndexLength14 = 0\n        var guessScoreArrayCopyIndexLength14\
    \ = 0\n        var gameScoreArrayCopyIndexLength15 = 0\n        var guessScoreArrayCopyIndexLength15\
    \ = 0\n        var gameScoreArrayCopyIndexLength16 = 0\n        var guessScoreArrayCopyIndexLength16\
    \ = 0\n        var gameScoreArrayCopyIndexLength17 = 0\n        var guess\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6m_riz44.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6m_riz44.scala:16:29\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mguessMap\e[0m = guess.zipWithIndex.toMap\n\e[31m\e[31m   |\e[0m          \
    \             ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue zipWithIndex is not\
    \ a member of Null, but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\e[31m   |\e\
    [0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m  import collection.LazyZip3.lazyZip3ToIterable\n\
    \e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\e[31m   |\e[0m\
    \  import collection.convert.ImplicitConversions.list asScalaBuffer\n\e[31m  \
    \ |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator asScala\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.set asScala\n\e\
    [31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6m_riz44.scala:17:43\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mgameScores\e[0m = gameMap.map(_._2).distinct\n\e[31m\e[31m   |\e[0m      \
    \                   ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue distinct\
    \ is not a member of scala.collection.immutable.Iterable[Int]\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp6m_riz44.scala:21:30 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mguessScoreArray\e[0m = guessScoreMap.values\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Not found: guessScoreMap\n\e[31m   |\e\
    [0m\n\e[31m   |"
  stdout: ''
  timestamp: 1659798092
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameSet = game.distinct\n        val guessSet = guess.distinct\n   \
    \     val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val result = new mutable.ArrayList[Long]()\n        val gameSetIterator\
    \ = gameSet.iterator\n        val guessSetIterator = guessSet.iterator\n     \
    \   var gameSetIndex = 0\n        var guessSetIndex = 0\n        var gameSetScore\
    \ = 0\n        var guessSetScore = 0\n        var gameSetGuess = 0\n        var\
    \ guessSetGuess = 0\n        var gameSetGuessDiff = 0\n        var guessSetGuessDiff\
    \ = 0\n        var gameSetGuessDiffDiff = 0\n        var guessSetGuessDiffDiff\
    \ = 0\n        var gameSetGuessDiffDiffDiff = 0\n        var guessSetGuessDiffDiffDiff\
    \ = 0\n        var gameSetGuessDiffDiffDiffDiff = 0\n        var guessSetGuessDiffDiffDiffDiff\
    \ = 0\n        var gameSetGuessDiffDiffDiffDiffDiff = 0\n        var guessSetGuessDiffDiffDiffDiffDiff\
    \ = 0\n        var gameSetGuessDiffDiffDiffDiffDiffDiff = 0\n        var guessSetGuessDiffDiffDiffDiffDiffDiff\
    \ = 0\n        var gameSetGuessDiffDiffDiffDiffDiffDiff = 0\n        var guessSetGuessDiffDiffDiffDiffDiffDiff\
    \ = 0\n        var gameSetGuessDiffDiffDiffDiffDiffDiffDiff = 0\n        var guessSetGuessDiffDiffDiffDiffDiffDiff\
    \ = 0\n        var gameSetGuessDiffDiffDiffDiffDiffDiffDiff = 0\n        var guessSetGuessDiffDiffDiffDiffDiffDiffDiff\
    \ = 0\n        var gameSetGuessDiffDiffDiffDiffDiffDiffDiffDiff = 0\n        var\
    \ guessSetGuessDiffDiffDiffDiffDiffDiffDiffDiff = 0\n        var gameSetGuessDiffDiffDiffDiffDiffDiffDiffDiffDiff\
    \ = 0\n        var guessSetGuessDiffDiffDiffDiffDiffDiffDiffDiffDiff = 0\n   \
    \     var gameSetGuessDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = 0\n        var\
    \ guessSetGuessDiffDiffDiffDiffDiffDiffDiffDiffDiff = 0\n        var gameSetGuessDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff\
    \ = 0\n        var guessSetGuessDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = 0\n\
    \        var gameSetGuessDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = 0\n  \
    \      var guessSetGuessDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = 0\n       \
    \ var gameSetGuessDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = 0\n        var\
    \ guessSetGuessDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = 0\n\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpusqud4eg.scala:40:12 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mvar\e[0m \e[36mgameSetGuessDiffDiffDiffDiffDiffDiff\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameSetGuessDiffDiffDiffDiffDiffDiff is already defined as\
    \ \e[33mvariable\e[0m \e[35mgameSetGuessDiffDiffDiffDiffDiffDiff\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpusqud4eg.scala:41:12 ---------------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m        \e[33mvar\e[0m \e[36mguessSetGuessDiffDiffDiffDiffDiffDiff\e[0m\
    \ = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessSetGuessDiffDiffDiffDiffDiffDiff is already defined as\
    \ \e[33mvariable\e[0m \e[35mguessSetGuessDiffDiffDiffDiffDiffDiff\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpusqud4eg.scala:43:12 ---------------------------\e[0m\e[0m\n\e[31m43\
    \ |\e[0m        \e[33mvar\e[0m \e[36mguessSetGuessDiffDiffDiffDiffDiffDiff\e[0m\
    \ = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessSetGuessDiffDiffDiffDiffDiffDiff is already defined as\
    \ \e[33mvariable\e[0m \e[35mguessSetGuessDiffDiffDiffDiffDiffDiff\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpusqud4eg.scala:44:12 ---------------------------\e[0m\e[0m\n\e[31m44\
    \ |\e[0m        \e[33mvar\e[0m \e[36mgameSetGuessDiffDiffDiffDiffDiffDiffDiff\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameSetGuessDiffDiffDiffDiffDiffDiffDiff is already defined\
    \ as \e[33mvariable\e[0m \e[35mgameSetGuessDiffDiffDiffDiffDiffDiffDiff\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods mu"
  stdout: ''
  timestamp: 1659798087
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap =\
    \ guessScores.toMap\n        val gameScoreList = gameScores.toList\n        val\
    \ guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guess\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbsn9xo79.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreMap is already defined as \e[33mvalue\e[0m \e[35mgameScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbsn9xo79.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mguessScoreMap\e[0m = guessScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mguessScoreMap is already defined as \e[33mvalue\e[0m \e[35mguessScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbsn9xo79.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = gameScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreList is already defined as \e[33mvalue\e[0m \e[35mgameScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbsn9xo79.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessScoreList\e[0m = guessScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mguessScoreList is already defined as \e[33mvalue\e[0m \e[35mguessScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbsn9xo79.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreSet\e[0m = gameScores.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0"
  stdout: ''
  timestamp: 1659798018
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameSize = game.size\n        val guessSize = guess.size\n        val\
    \ result = new mutable.ArrayList[Long](guessSize)\n        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score + index * gameSize }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score + index * guessSize\
    \ }\n        val gameScoreSum = gameScores.sum\n        val guessScoreSum = guessScores.sum\n\
    \        val gameScoreDiff = gameScoreSum - guessScoreSum\n        val guessScoreDiff\
    \ = guessScoreSum - gameScoreSum\n        gameScores.zipWithIndex.foreach { case\
    \ (score, index) =>\n            val guessScore = guessScores(index)\n       \
    \     val gameScore = gameScores(index)\n            val diff = abs(guessScore\
    \ - gameScore)\n            if (diff == 0) {\n                result.add(0)\n\
    \            } else {\n                result.add(diff)\n            }\n     \
    \   }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong,\
    \ -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsvatjrb9.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ArrayList[\e[35mLong\e[0m](guessSize)\n\e[31m\e[31m   |\e[0m     \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798083
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.zipWithIndex.map(x => x._2 - x._1)\n        val guessScores\
    \ = guess.zipWithIndex.map(x => x._2 - x._1)\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScoreMap.values.toList\n\
    \        val guessScoreList = guessScoreMap.values.toList\n        val gameScoreSet\
    \ = gameScoreList.map(x => gameScoreMap(x))\n        val guessScoreSet = guessScoreList.map(x\
    \ => guessScoreMap(x))\n        val gameScoreSum = gameScoreSet.foldLeft(0)(_\
    \ + _)\n        val guessScoreSum = guessScoreSet.foldLeft(0)(_ + _)\n       \
    \ val gameScoreDiff = gameScoreSum - guessScoreSum\n        val guessScoreDiff\
    \ = guessScoreSum - gameScoreSum\n        val gameScoreDiffList = gameScoreDiff.toList\n\
    \        val guessScoreDiffList = guessScoreDiff.toList\n        val gameScoreDiffSet\
    \ = gameScoreDiffList.map(x => gameScoreDiffMap(x))\n        val guessScoreDiffSet\
    \ = guessScoreDiffList.map(x => guessScoreDiffMap(x))\n        val gameScoreDiffSum\
    \ = gameScoreDiffSet.foldLeft(0)(_ + _)\n        val guessScoreDiffSum = guessScoreDiffSet.foldLeft(0)(_\
    \ + _)\n        val gameScoreDiffDiff = gameScoreDiffSum - guessScoreDiffSum\n\
    \        val guessScoreDiffDiff = guessScoreDiffSum - gameScoreDiffSum\n     \
    \   val gameScoreDiffDiffList = gameScoreDiffDiff.toList\n        val guessScoreDiffDiffList\
    \ = guessScoreDiffDiff.toList\n        val gameScoreDiffDiffSet = gameScoreDiffDiffList.map(x\
    \ => gameScoreDiffDiffMap(x))\n        val guessScoreDiffDiffSet = guessScoreDiffDiffList.map(x\
    \ => guessScoreDiffDiffMap(x))\n        val gameScoreDiffDiffSum = gameScoreDiffDiffSet.foldLeft(0)(_\
    \ + _)\n        val guessScoreDiffDiffSum = guessScoreDiffDiffSet.foldLeft(0)(_\
    \ + _)\n        val gameScoreDiffDiffDiff = gameScoreDiffDiffSum - guessScoreDiffDiffSum\n\
    \        val guessScoreDiffDiffDiff = guessScoreDiffDiffSum - gameScoreDiffDiffSum\n\
    \        val gameScoreDiffDiffDiffList = gameScoreDiffDiffDiff.toList\n      \
    \  val guessScoreDiffDiffDiff\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong,\
    \ -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpj9dvoroq.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpj9dvoroq.scala:17:43\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m17 |\e[0m       \
    \ \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.toMap\n\e[31m\e[31m   |\e\
    [0m                                           ^\e[0m\n\e[31m   |\e[0m        \
    \                               Cannot prove that Long <:< (K, V)\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m                                       where:    K is a type\
    \ variable\n\e[31m   |\e[0m                                                 V\
    \ is a type variable\n\e[31m   |\e[0m                                       .\n\
    \e[31m\e[31m-- Error: /tmp/tmpj9dvoroq.scala:18:45 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mguessScoreMap\e[0m = guessScores.toMap\n\
    \e[31m\e[31m   |\e[0m                                             ^\e[0m\n\e[31m\
    \   |\e[0m                                       Cannot prove that Long <:< (K,\
    \ V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                       where:\
    \    K is a type variable\n\e[31m   |\e[0m                                   \
    \              V is a type variable\n\e[31m   |\e[0m                         \
    \              .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj9dvoroq.scala:45:5\
    \ ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798089
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.zipWithIndex.map(x => x._2)\n        val guessScores\
    \ = guess.zipWithIndex.map(x => x._2)\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9uvfn7ok.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreMap is already defined as \e[33mvalue\e[0m \e[35mgameScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9uvfn7ok.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mguessScoreMap\e[0m = guessScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mguessScoreMap is already defined as \e[33mvalue\e[0m \e[35mguessScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9uvfn7ok.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = gameScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreList is already defined as \e[33mvalue\e[0m \e[35mgameScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9uvfn7ok.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessScoreList\e[0m = guessScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mguessScoreList is already defined as \e[33mvalue\e[0m \e[35mguessScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9uvfn7ok.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreSet\e[0m = gameScores.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0"
  stdout: ''
  timestamp: 1659798093
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameMap = game.zipWithIndex.toMap\n        val guessMap = guess.zipWithIndex.toMap\n\
    \        val resultList = mutable.ArrayBuffer.empty[Long]\n        val gameSize\
    \ = game.size\n        val guessSize = guess.size\n        val gameKeys = gameMap.keySet\n\
    \        val guessKeys = guessMap.keySet\n        val gameValues = gameMap.values.toList\n\
    \        val guessValues = guessMap.values.toList\n        gameKeys.foreach(key\
    \ => {\n            val gameValue = gameMap.get(key)\n            val guessValue\
    \ = guessMap.get(key)\n            val diff = Math.abs(guessValue - gameValue)\n\
    \            resultList += diff\n        })\n        resultList.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9ce6u2pf.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresultList\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp9ce6u2pf.scala:27:43 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m \e[36mdiff\e[0m = Math.abs(guessValue\
    \ - gameValue)\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue - is not a member of Option[Int], but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might make progress towards fixing the problem:\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659798092
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameLen = game.length\n        val guessLen = guess.length\n       \
    \ val result = new mutable.ArrayList[Long](guessLen)\n        var i = 0\n    \
    \    var j = 0\n        while (i < gameLen && j < guessLen) {\n            if\
    \ (game(i) == guess(j)) {\n                result.add(0)\n                i +=\
    \ 1\n                j += 1\n            } else if (game(i) < guess(j)) {\n  \
    \              result.add(game(i) - guess(j))\n                i += 1\n      \
    \      } else {\n                result.add(guess(j) - game(i))\n            \
    \    j += 1\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpciut537x.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ArrayList[\e[35mLong\e[0m](guessLen)\n\e[31m\e[31m   |\e[0m      \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameLen = game.size\n        val guessLen = guess.size\n        val\
    \ result = new Array[Long](guessLen)\n        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreKeys = gameScoreMap.keys\n\
    \        val guessScoreKeys = guessScoreMap.keys\n        val gameScoreValues\
    \ = gameScoreMap.values.toList\n        val guessScoreValues = guessScoreMap.values.toList\n\
    \        val gameScoreKeySet = gameScoreKeys.toSet\n        val guessScoreKeySet\
    \ = guessScoreKeys.toSet\n        val gameScoreValueSet = gameScoreValues.toSet\n\
    \        val guessScoreValueSet = guessScoreValues.toSet\n        val gameScoreKeySet\
    \ = gameScoreKeys.toSet\n        val guessScoreKeySet = guessScoreKeys.toSet\n\
    \        val gameScoreValueSet = gameScoreValues.toSet\n        val guessScoreValueSet\
    \ = guessScoreValues.toSet\n        val gameScoreKeySet = gameScoreKeys.toSet\n\
    \        val guessScoreKeySet = guessScoreKeys.toSet\n        val gameScoreValueSet\
    \ = gameScoreValues.toSet\n        val guessScoreValueSet = guessScoreValues.toSet\n\
    \        val gameScoreKeySet = gameScoreKeys.toSet\n        val guessScoreKeySet\
    \ = guessScoreKeys.toSet\n        val gameScoreValueSet = gameScoreValues.toSet\n\
    \        val guessScoreValueSet = guessScoreValues.toSet\n        val gameScoreKeySet\
    \ = gameScoreKeys.toSet\n        val guessScoreKeySet = guessScoreKeys.toSet\n\
    \        val gameScoreValueSet = gameScoreValues.toSet\n        val guessScoreValueSet\
    \ = guessScoreValues.toSet\n        val gameScoreKeySet = gameScoreKeys.toSet\n\
    \        val guessScoreKeySet = guessScoreKeys.toSet\n        val gameScoreValueSet\
    \ = gameScoreValues.toSet\n        val guessScoreValueSet = guessScoreValues.toSet\n\
    \        val gameScoreKeySet = gameScoreKeys.toSet\n        val guessScoreKeySet\
    \ = guessScoreKeys.toSet\n        val gameScoreValueSet = gameScoreValues.toSet\n\
    \        val guessScoreValueSet\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong,\
    \ -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqfd5_t70.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqfd5_t70.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreKeySet\e[0m = gameScoreKeys.toSet\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mgameScoreKeySet\
    \ is already defined as \e[33mvalue\e[0m \e[35mgameScoreKeySet\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqfd5_t70.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessScoreKeySet\e[0m = guessScoreKeys.toSet\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mguessScoreKeySet\
    \ is already defined as \e[33mvalue\e[0m \e[35mguessScoreKeySet\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpqfd5_t70.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mgameScoreValueSet\e[0m = gameScoreValues.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mgameScoreValueSet is already defined as \e[33mvalue\e[0m \e[35mgameScoreValueSet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqfd5_t70.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mguessScoreValueSet\e[0m = guessScoreValues.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreValueSet is already defined as \e[33mvalue\e[0m\
    \ \e[35mguessScoreValueSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group o"
  stdout: ''
  timestamp: 1659798094
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap =\
    \ guessScores.toMap\n        val gameScoreKeys = gameScoreMap.keys\n        val\
    \ guessScoreKeys = guessScoreMap.keys\n        val gameScoreValues = gameScoreMap.values\n\
    \        val guessScoreValues = guessScoreMap.values\n        val gameScoreKeySet\
    \ = gameScoreKeys.toSet\n        val guessScoreKeySet = guessScoreKeys.toSet\n\
    \        val gameScoreValueSet = gameScoreValues.toSet\n        val guessScoreValueSet\
    \ = guessScoreValues.toSet\n        val gameScoreKeySetSize = gameScoreKeySet.size\n\
    \        val guessScoreKeySetSize = guessScoreKeySet.size\n        val gameScoreValueSetSize\
    \ = gameScoreValueSet.size\n        val guessScoreValueSetSize = guessScoreValueSet.size\n\
    \        val gameScoreKeySetSize = gameScoreKeySet.size\n        val guessScoreKeySetSize\
    \ = guessScoreKeySet.size\n        val gameScoreValueSetSize = gameScoreValueSet.size\n\
    \        val guessScoreValueSetSize = guessScoreValueSet.size\n        val gameScoreKeySetSize\
    \ = gameScoreKeySet.size\n        val guessScoreKeySetSize = guessScoreKeySet.size\n\
    \        val gameScoreValueSetSize = gameScoreValueSet.size\n        val guessScoreValueSetSize\
    \ = guessScoreValueSet.size\n        val gameScoreKeySetSize = gameScoreKeySet.size\n\
    \        val guessScoreKeySetSize = guessScoreKeySet.size\n        val gameScoreValueSetSize\
    \ = gameScoreValueSet.size\n        val guessScoreValueSetSize = guessScoreValueSet.size\n\
    \        val gameScoreKeySetSize = gameScoreKeySet.size\n        val guessScoreKeySetSize\
    \ = guessScoreKeySet.size\n        val gameScoreValueSetSize = gameScoreValueSet.size\n\
    \        val guessScoreValueSetSize = guessScoreValueSet.size\n        val gameScoreKeySetSize\
    \ = gameScoreKeySet.size\n        val guessScoreKeySetSize = guessScoreKeySet.size\n\
    \        val gameScoreValueSetSize = gameScoreValueSet.size\n        val guessScoreValueSetSize\
    \ = guessScoreValueSet.size\n        val gameScoreKeySetSize = gameScoreKeySet.size\n\
    \        val guessScoreKeySetSize = guessScoreKeySet.size\n        val gameScoreValueSetSize\
    \ = gameScoreValueSet.size\n\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong,\
    \ -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_86dgtpm.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mgameScoreKeySetSize\e[0m\
    \ = gameScoreKeySet.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreKeySetSize is already defined as \e[33mvalue\e[0m\
    \ \e[35mgameScoreKeySetSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp_86dgtpm.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mguessScoreKeySetSize\e[0m\
    \ = guessScoreKeySet.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreKeySetSize is already defined as \e[33mvalue\e[0m\
    \ \e[35mguessScoreKeySetSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp_86dgtpm.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgameScoreValueSetSize\e\
    [0m = gameScoreValueSet.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreValueSetSize is already defined as \e[33mvalue\e\
    [0m \e[35mgameScoreValueSetSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_86dgtpm.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mguessScoreValueSetSize\e\
    [0m = guessScoreValueSet.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreValueSetSize is already defined as \e[33mvalue\e\
    [0m \e[35mguessScoreValueSetSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_86dgtpm.scala:35:12 ---------------------------\e\
    [0m\e["
  stdout: ''
  timestamp: 1659798094
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.zipWithIndex.map { case (score, index) => (index,\
    \ score) }.toMap\n        val guessScores = guess.zipWithIndex.map { case (score,\
    \ index) => (index, score) }.toMap\n        val guessesWithScores = guessScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val guessesWithIndexes\
    \ = guessScores.map { case (index, score) => (index, index) }.toMap\n        val\
    \ guessesWithIndexesAndScores = guessScores.map { case (index, score) => (index,\
    \ score, gameScores(index)) }.toMap\n        val guessesWithIndexesAndScoresAndScores\
    \ = guessScores.map { case (index, score, gameScore) => (index, score, gameScore,\
    \ gameScores(index)) }.toMap\n        val guessesWithIndexesAndScoresAndScoresAndScores\
    \ = guessScores.map { case (index, score, gameScore, gameScore) => (index, score,\
    \ gameScore, gameScore, gameScores(index)) }.toMap\n        val guessesWithIndexesAndScoresAndScoresAndScoresAndScores\
    \ = guessScores.map { case (index, score, gameScore, gameScore, gameScore) =>\
    \ (index, score, gameScore, gameScore, gameScore, gameScores(index)) }.toMap\n\
    \        val guessesWithIndexesAndScoresAndScoresAndScoresAndScoresAndScores =\
    \ guessScores.map { case (index, score, gameScore, gameScore, gameScore, gameScore)\
    \ => (index, score, gameScore, gameScore, gameScore, gameScore, gameScores(index))\
    \ }.toMap\n        val guessesWithIndexesAndScoresAndScoresAndScoresAndScoresAndScoresAndScores\
    \ = guessScores.map { case (index, score, gameScore, gameScore, gameScore, gameScore,\
    \ gameScore) => (index, score, gameScore, gameScore, gameScore, gameScore, gameScore,\
    \ gameScores(index)) }.toMap\n        val guessesWithIndexesAndScoresAndScoresAndScoresAndScoresAndScoresAndScoresAndScores\
    \ = guessScores.map { case (index, score, gameScore, gameScore, gameScore, gameScore,\
    \ gameScore, gameScore) => (index, score, gameScore, gameScore, gameScore, gameScore,\
    \ gameScore, gameScore, gameScores(index)) }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpmico3n0m.scala:19:124 ----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mguessesWithIndexesAndScores\e\
    [0m = guessScores.map { \e[33mcase\e[0m (index, score) => (index, score, gameScores(index))\
    \ }.toMap\n\e[31m\e[31m   |\e[0m                                             \
    \                                                                            \
    \   ^\e[0m\n\e[31m   |\e[0m                          Cannot prove that (Int, Long,\
    \ Long) <:< (K, V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                         \
    \ where:    K is a type variable\n\e[31m   |\e[0m                            \
    \        V is a type variable\n\e[31m   |\e[0m                          .\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmico3n0m.scala:20:140 -------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mguessesWithIndexesAndScoresAndScores\e\
    [0m = guessScores.map { \e[33mcase\e[0m (index, score, gameScore) => (index, score,\
    \ gameScore, gameScores(index)) }.toMap\n\e[31m\e[31m   |\e[0m               \
    \                                                                            \
    \                                                 ^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                                 Found:    (index : Any)\n\e\
    [31m   |\e[0m                                                 Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpmico3n0m.scala:20:155 ----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mguessesWithIndexesAndScoresAndScores\e\
    [0m = guessScores.map { \e[33mcase\e[0m (index, score, gameScore) => (index, score,\
    \ gameScore, gameScores(index)) }.toMap\n\e[31m\e[31m   |\e[0m               \
    \                                                                            \
    \                                                                ^\e[0m\n\e[31m\
    \   |\e[0m                      Cannot prove that (Any, Any, Any, Long) <:< (K,\
    \ V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                      where:    K is a type\
    \ variable\n\e["
  stdout: ''
  timestamp: 1659798098
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.zipWithIndex.map { case (score, index) => score ->\
    \ index }\n        val guessesScores = guess.zipWithIndex.map { case (score, index)\
    \ => score -> index }\n        val gameScoreMap = gameScores.toMap\n        val\
    \ guessesScoreMap = guessesScores.toMap\n        val gameScoreList = gameScoreMap.values.toList\n\
    \        val guessesScoreList = guessesScoreMap.values.toList\n        val gameScoreSet\
    \ = gameScoreList.toSet\n        val guessesScoreSet = guessesScoreList.toSet\n\
    \        val gameScoreDiff = gameScoreList.map { case (score, index) => Math.abs(score\
    \ - gameScoreMap.get(index)) }\n        val guessesScoreDiff = guessesScoreList.map\
    \ { case (score, index) => Math.abs(score - guessesScoreMap.get(index)) }\n  \
    \      val gameScoreDiffSet = gameScoreDiff.toSet\n        val guessesScoreDiffSet\
    \ = guessesScoreDiff.toSet\n        val gameScoreDiffSet = gameScoreDiffSet.toList\n\
    \        val guessesScoreDiffSet = guessesScoreDiffSet.toList\n        val gameScoreDiffSet\
    \ = gameScoreDiffSet.toList\n        val guessesScoreDiffSet = guessesScoreDiffSet.toList\n\
    \        val gameScoreDiffSet = gameScoreDiffSet.toList\n        val guessesScoreDiffSet\
    \ = guessesScoreDiffSet.toList\n        val gameScoreDiffSet = gameScoreDiffSet.toList\n\
    \        val guessesScoreDiffSet = guessesScoreDiffSet.toList\n        val gameScoreDiffSet\
    \ = gameScoreDiffSet.toList\n        val guessesScoreDiffSet = guessesScoreDiffSet.toList\n\
    \        val gameScoreDiffSet = gameScoreDiffSet.toList\n        val guessesScoreDiffSet\
    \ = guessesScoreDiffSet.toList\n        val gameScoreDiffSet = gameScoreDiffSet.toList\n\
    \        val guessesScoreDiffSet = guessesScoreDiffSet.toList\n        val gameScoreDiffSet\
    \ = gameScoreDiffSet.toList\n        val guessesScoreDiffSet = guessesScoreDiffSet.toList\n\
    \        val gameScoreDiffSet = gameScoreDiffSet.toList\n        val guessesScoreDiffSet\
    \ = guessesScoreDiffSet.toList\n        val gameScoreDiffSet = gameScoreDiffSet.toList\n\
    \        val guessesScoreDiffSet = guessesScoreDiffSet.toList\n        val game\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphj5opte6.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphj5opte6.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreDiffSet\e[0m = gameScoreDiffSet.toList\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mgameScoreDiffSet\
    \ is already defined as \e[33mvalue\e[0m \e[35mgameScoreDiffSet\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmphj5opte6.scala:28:12 ---------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        \e[33mval\e[0m \e[36mguessesScoreDiffSet\e[0m = guessesScoreDiffSet.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesScoreDiffSet is already defined as \e[33mvalue\e[0m\
    \ \e[35mguessesScoreDiffSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmphj5opte6.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffSet\e[0m =\
    \ gameScoreDiffSet.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffSet is already defined as \e[33mvalue\e[0m \e\
    [35mgameScoreDiffSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmphj5opte6.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mguessesScoreDiffSet\e[0m\
    \ = guessesScoreDiffSet.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesScoreDiffSet is already defined as \e[33mvalue\e[0m\
    \ \e[35mguessesScoreDiffSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded"
  stdout: ''
  timestamp: 1659798097
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val guesses = guess.toList\n        val scores = game.toList\n        val\
    \ result = new mutable.ListBuffer[Long]()\n        val guessesCount = guesses.size\n\
    \        val scoresCount = scores.size\n        val guessesRemaining = guessesCount\
    \ - 1\n        val scoresRemaining = scoresCount - 1\n        val guessesRemainingIndex\
    \ = guessesRemaining\n        val scoresRemainingIndex = scoresRemaining\n   \
    \     val guessesRemainingScore = guesses(guessesRemainingIndex)\n        val\
    \ scoresRemainingScore = scores(scoresRemainingIndex)\n        val guessesRemainingGuess\
    \ = guesses(guessesRemainingIndex + 1)\n        val scoresRemainingGuess = scores(scoresRemainingIndex\
    \ + 1)\n        val guessesRemainingGuessIndex = guessesRemainingIndex + 1\n \
    \       val scoresRemainingGuessIndex = scoresRemainingIndex + 1\n        val\
    \ guessesRemainingGuessScore = guesses(guessesRemainingGuessIndex)\n        val\
    \ scoresRemainingGuessScore = scores(scoresRemainingGuessIndex)\n        val guessesRemainingGuessGuess\
    \ = guesses(guessesRemainingGuessIndex + 1)\n        val scoresRemainingGuessGuess\
    \ = scores(scoresRemainingGuessIndex + 1)\n        val guessesRemainingGuessGuessIndex\
    \ = guessesRemainingGuessIndex + 1\n        val scoresRemainingGuessGuessIndex\
    \ = scoresRemainingGuessIndex + 1\n        val guessesRemainingGuessGuessScore\
    \ = guesses(guessesRemainingGuessGuessIndex)\n        val scoresRemainingGuessGuessScore\
    \ = scores(scoresRemainingGuessGuessIndex)\n        val guessesRemainingGuessGuessGuess\
    \ = guesses(guessesRemainingGuessGuessIndex + 1)\n        val scoresRemainingGuessGuessGuess\
    \ = scores(scoresRemainingGuessGuessGuessIndex)\n        val guessesRemainingGuessGuessGuessIndex\
    \ = guessesRemainingGuessGuessIndex + 1\n        val scoresRemainingGuessGuessGuessIndex\
    \ = scoresRemainingGuessGuessIndex + 1\n        val guessesRemainingGuessGuessGuessScore\
    \ = guesses(guessesRemainingGuessGuessGuessIndex)\n        val scoresRemainingGuessGuessGuessScore\
    \ = scores(scoresRemainingGuessGuessGuessIndex)\n        val guessesRemainingGuess\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfqzg5v7x.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfqzg5v7x.scala:17:25\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpfqzg5v7x.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798092
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.map(x => if (x == 0) 0 else x)\n        val guessesScores\
    \ = guess.map(x => if (x == 0) 0 else x)\n        val diffs = guessesScores.zip(gameScores).map(x\
    \ => if (x._1 == 0) 0 else x._1 - x._2)\n        diffs.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0p47q6ti.scala:21)\n\tat Problem.main(tmp0p47q6ti.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798095
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameSet = game.distinct\n        val guessSet = guess.distinct\n   \
    \     val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val result = new mutable.ArrayList[Long](guessSetSize)\n        val gameSetIterator\
    \ = gameSet.iterator\n        val guessSetIterator = guessSet.iterator\n     \
    \   var gameSetIndex = 0\n        var guessSetIndex = 0\n        while (gameSetIndex\
    \ < gameSetSize && guessSetIndex < guessSetSize) {\n            val gameSetScore\
    \ = gameSetIterator.next\n            val guessSetScore = guessSetIterator.next\n\
    \            val gameSetGuess = gameSetIndex\n            val guessSetGuess =\
    \ guessSetIndex\n            val gameSetScoreDiff = gameSetScore - guessSetScore\n\
    \            val guessSetScoreDiff = guessSetScore - gameSetScore\n          \
    \  if (gameSetScoreDiff == guessSetScoreDiff) {\n                result.add(gameSetGuess)\n\
    \                result.add(guessSetGuess)\n                gameSetIndex += 1\n\
    \                guessSetIndex += 1\n            } else if (gameSetScoreDiff <\
    \ guessSetScoreDiff) {\n                result.add(gameSetGuess)\n           \
    \     result.add(guessSetGuess)\n                gameSetIndex += 1\n         \
    \   } else {\n                result.add(guessSetGuess)\n                result.add(gameSetGuess)\n\
    \                guessSetIndex += 1\n            }\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj9x0e24_.scala:19:25 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ArrayList[\e[35mLong\e[0m](guessSetSize)\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameLength = game.length\n        val guessLength = guess.length\n \
    \       val result = new Array[Long](guessLength)\n        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val gameScoreKeys =\
    \ gameScores.keySet\n        val guessScoreKeys = guessScores.keySet\n       \
    \ val gameScoreValues = gameScores.values\n        val guessScoreValues = guessScores.values\n\
    \        gameScoreKeys.foreach { key =>\n            val guessScore = guessScores.get(key)\n\
    \            val gameScore = gameScores.get(key)\n            val diff = guessScore\
    \ - gameScore\n            result(guessScoreKeys) = diff\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmputztnene.scala:27:34 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m \e[36mdiff\e[0m = guessScore\
    \ - gameScore\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue - is not a member of Option[Int], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmputztnene.scala:28:19 --------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m            result(guessScoreKeys) = diff\n\e[31m\e[31m  \
    \ |\e[0m                   ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \     Found:    (guessScoreKeys : Set[Long])\n\e[31m   |\e[0m                \
    \   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmputztnene.scala:30:8\
    \ ---------------------\e[0m\e[0m\n\e[31m30 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798099
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val guesses = guess.toList\n        val scores = game.toList\n        val\
    \ guessesCount = guesses.size\n        val scoresCount = scores.size\n       \
    \ val result = new mutable.ListBuffer[Long]()\n        var i = 0\n        while\
    \ (i < guessesCount) {\n            val guess = guesses(i)\n            val score\
    \ = scores(i)\n            val diff = Math.abs(guess - score)\n            if\
    \ (diff == 0) {\n                result.clear()\n                result.add(i)\n\
    \                result.add(diff)\n            } else {\n                result.add(diff)\n\
    \            }\n            i += 1\n        }\n        result.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpblxg_p_2.scala:19:25 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798093
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val guesses = guess.toList\n        val scores = game.toList\n        val\
    \ guessesCount = guesses.size\n        val scoresCount = scores.size\n       \
    \ val result = new mutable.ListBuffer[Long]()\n        var i = 0\n        while\
    \ (i < guessesCount) {\n            val guess = guesses(i)\n            val score\
    \ = scores(i)\n            val difference = guess - score\n            if (difference\
    \ < 0) {\n                result.add(-difference)\n            } else {\n    \
    \            result.add(difference)\n            }\n            i += 1\n     \
    \   }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong,\
    \ -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbkkfo0mp.scala:19:25 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798096
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap =\
    \ guessScores.toMap\n        val gameScoreSet = gameScores.toSet\n        val\
    \ guessScoreSet = guessScores.toSet\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreArray =\
    \ gameScores.toArray\n        val guessScoreArray = guessScores.toArray\n    \
    \    val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreArray = gameScores.toArray\n        val guessScoreArray\
    \ = guessScores.toArray\n        val gameScoreMap = gameScores.toMap\n       \
    \ val guessScoreMap = guessScores.toMap\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreArray =\
    \ gameScores.toArray\n        val guessScoreArray = guessScores.toArray\n    \
    \    val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreArray = gameScores.toArray\n        val guessScoreArray\
    \ = guessScores.toArray\n        val gameScoreMap = gameScores.toMap\n       \
    \ val guessScoreMap = guessScores.toMap\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreArray =\
    \ gameScores.toArray\n        val guessScoreArray = guessScores.toArray\n    \
    \    val gameScoreMap = gameScores.toMap\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmvsz3dh7.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreMap is already defined as \e[33mvalue\e[0m \e[35mgameScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmvsz3dh7.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessScoreMap\e[0m = guessScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mguessScoreMap is already defined as \e[33mvalue\e[0m \e[35mguessScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmvsz3dh7.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreSet\e[0m = gameScores.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreSet is already defined as \e[33mvalue\e[0m \e[35mgameScoreSet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmvsz3dh7.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mguessScoreSet\e[0m = guessScores.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mguessScoreSet is already defined as \e[33mvalue\e[0m \e[35mguessScoreSet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmvsz3dh7.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = gameScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameSco"
  stdout: ''
  timestamp: 1659798104
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameSet = game.toSet\n        val guessSet = guess.toSet\n        val\
    \ resultSet = guessSet.diff(gameSet)\n        resultSet.map(x => if (x == 0) 0\
    \ else abs(x - game(x)))\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjvedwbjr.scala:18:59\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        resultSet.map(\e[36mx\e\
    [0m => \e[33mif\e[0m (x == \e[31m0\e[0m) \e[31m0\e[0m \e[33melse\e[0m abs(x -\
    \ game(x)))\n\e[31m\e[31m   |\e[0m                                           \
    \                ^\e[0m\n\e[31m   |\e[0m                                     \
    \               Found:    (x : Long)\n\e[31m   |\e[0m                        \
    \                            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798103
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameSize = game.size\n        val guessSize = guess.size\n        val\
    \ result = new Array[Long](guessSize)\n        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        var i = 0\n        while (i < guessSize)\
    \ {\n            val gameScore = gameScores(i)\n            val guessScore = guessScores(i)\n\
    \            val diff = guessScore - gameScore\n            if (diff < 0) {\n\
    \                diff *= -1\n            }\n            result(i) = diff\n   \
    \         i += 1\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb5qve930.scala:26:21 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                diff *= -\e[31m1\e[0m\n\e[31m\e[31m \
    \  |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m                value *=\
    \ is not a member of Long - did you mean diff.!=?\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpb5qve930.scala:31:8 ---------------------\e[0m\e[0m\n\
    \e[31m31 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Found:    (result : Array[Long])\n\e[31m   |\e[0m        Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameSet = game.distinct\n        val guessSet = guess.distinct\n   \
    \     val gameSetSize = gameSet.size \n        val guessSetSize = guessSet.size\
    \ \n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpejqz9m0h.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mgameSetSize\e[0m = gameSetSize\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameSetSize is already defined as \e[33mvalue\e[0m \e[35mgameSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpejqz9m0h.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mguessSetSize\e[0m = guessSetSize + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessSetSize is already defined as \e[33mvalue\e[0m \e[35mguessSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpejqz9m0h.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mgameSetSize\e[0m = gameSetSize + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mgameSetSize is already defined as \e[33mvalue\e[0m \e[35mgameSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpejqz9m0h.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mguessSetSize\e[0m = guessSetSize + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessSetSize is already defined as \e[33mvalue\e[0m \e[35mguessSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpejqz9m0h.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mgameSetSize\e[0m = gameSetSize + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m  "
  stdout: ''
  timestamp: 1659798105
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameSize = game.size\n        val guessSize = guess.size\n        val\
    \ result = new Array[Long](guessSize)\n        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val gameScore = gameScores.map\
    \ { case (score, index) => score }.toSeq\n        val guessScore = guessScores.map\
    \ { case (score, index) => score }.toSeq\n        val gameScoreDiff = gameScore\
    \ diff guessScore\n        val gameScoreDiffIndex = gameScoreDiff.zipWithIndex.map\
    \ { case (score, index) => index }.toMap\n        val gameScoreDiffIndexSorted\
    \ = gameScoreDiffIndex.sortBy(_._1)\n        val gameScoreDiffIndexSortedReversed\
    \ = gameScoreDiffIndexSorted.reverse\n        val gameScoreDiffIndexSortedReversedSorted\
    \ = gameScoreDiffIndexSortedReversed.sortBy(_._1)\n        val gameScoreDiffIndexSortedReversedSortedReversed\
    \ = gameScoreDiffIndexSortedReversedSorted.reverse\n        val gameScoreDiffIndexSortedReversedSortedReversedSorted\
    \ = gameScoreDiffIndexSortedReversedSortedReversed.sortBy(_._1)\n        val gameScoreDiffIndexSortedReversedSortedReversedSortedReversed\
    \ = gameScoreDiffIndexSortedReversedSortedReversedSortedReversed.reverse\n   \
    \     val gameScoreDiffIndexSortedReversedSortedReversedSortedReversedSorted =\
    \ gameScoreDiffIndexSortedReversedSortedReversedSortedReversedSorted.sortBy(_._1)\n\
    \        val gameScoreDiffIndexSortedReversedSortedReversedSortedReversedSortedReversed\
    \ = gameScoreDiffIndexSortedReversedSortedReversedSortedReversedSortedReversed.reverse\n\
    \        val gameScoreDiffIndexSortedReversedSortedReversedSortedReversedSortedReversedSorted\
    \ = gameScoreDiffIndexSortedReversedSortedReversedSortedReversedSortedReversedSorted.sortBy(_._1)\n\
    \        val gameScoreDiffIndexSortedReversedSortedReversedSortedReversedSortedReversedSortedReversed\
    \ = gameScoreDiffIndexSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSorted.reverse\n\
    \        val gameScoreDiffIndexSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSorted\
    \ = gameScoreDiffIndexSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversed.sortBy(_._1)\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpph4vd267.scala:35:11 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- Error: /tmp/tmpph4vd267.scala:23:102 ----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffIndex\e[0m\
    \ = gameScoreDiff.zipWithIndex.map { \e[33mcase\e[0m (score, index) => index }.toMap\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                              ^\e[0m\n\e[31m   |\e[0m       \
    \                                 Cannot prove that Int <:< (K, V)\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m                                        where:    K is a type\
    \ variable\n\e[31m   |\e[0m                                                  V\
    \ is a type variable\n\e[31m   |\e[0m                                        .\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpph4vd267.scala:29:75 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffIndexSortedReversedSortedReversedSortedReversed\e\
    [0m = gameScoreDiffIndexSortedReversedSortedReversedSortedReversed.reverse\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                 ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mgameScoreDiffIndexSortedReversedSortedReversedSortedReversed\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpph4vd267.scala:30:81\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreDiffIndexSortedReversedSortedReversedSortedReversedSorted\e[0m\
    \ = gameScoreDiffIndexSortedReversedSortedReversedSortedReversedSorted.sortBy(_._1)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                         ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e\
    [35mgameScoreDiffIndexSortedReversedSortedRe"
  stdout: ''
  timestamp: 1659798108
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameLen = game.size\n        val guessLen = guess.size\n        val\
    \ result = new Array[Long](guessLen)\n        var i = 0\n        var j = 0\n \
    \       while (i < gameLen && j < guessLen) {\n            if (game(i) == guess(j))\
    \ {\n                result(j) = 0\n                i += 1\n                j\
    \ += 1\n            } else if (game(i) < guess(j)) {\n                result(j)\
    \ = 0\n                i += 1\n            } else {\n                result(j)\
    \ = abs(game(i) - guess(j))\n                i += 1\n                j += 1\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpks5gwh3y.scala:34:8\
    \ ---------------------\e[0m\e[0m\n\e[31m34 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap\
    \ = guessesScores.toMap\n        val gameScoreList = new mutable.ListBuffer[Long]()\n\
    \        val guessesScoreList = new mutable.ListBuffer[Long]()\n        gameScoreMap.foreach\
    \ { case (score, index) => gameScoreList.add(score) }\n        guessesScoreMap.foreach\
    \ { case (score, index) => guessesScoreList.add(score) }\n        val gameScores\
    \ = gameScoreList.toList\n        val guessesScores = guessesScoreList.toList\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n\
    \        val gameScoreList = new mutable.ListBuffer[Long]()\n        val guessesScoreList\
    \ = new mutable.ListBuffer[Long]()\n        gameScoreMap.foreach { case (score,\
    \ index) => gameScoreList.add(score) }\n        guessesScoreMap.foreach { case\
    \ (score, index) => guessesScoreList.add(score) }\n        val gameScores = gameScoreList.toList\n\
    \        val guessesScores = guessesScoreList.toList\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n    \
    \    val gameScoreList = new mutable.ListBuffer[Long]()\n        val guessesScoreList\
    \ = new mutable.ListBuffer[Long]()\n        gameScoreMap.foreach { case (score,\
    \ index) => gameScoreList.add(score) }\n        guessesScoreMap.foreach { case\
    \ (score, index) => guessesScoreList.add(score) }\n        val gameScores = gameScoreList.toList\n\
    \        val guessesScores = guessesScoreList.toList\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n    \
    \    val gameScoreList = new mutable.ListBuffer[Long]()\n        val guessesScoreList\
    \ = new mutable.ListBuffer[Long]()\n        gameScoreMap.foreach { case (score,\
    \ index) => gameScoreList.add(score) }\n        guessesScoreMap.foreach { case\
    \ (score, index) => guessesScoreList.add(score) }\n        val gameScores = gameScoreList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp681q7c_t.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = gameScoreList.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScores is already defined as \e[33mvalue\e[0m \e[35mgameScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp681q7c_t.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mguessesScores\e[0m = guessesScoreList.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mguessesScores is already defined as \e[33mvalue\e[0m \e[35mguessesScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp681q7c_t.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreMap is already defined as \e[33mvalue\e[0m \e[35mgameScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp681q7c_t.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessesScoreMap\e[0m = guessesScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mguessesScoreMap is already defined as \e[33mvalue\e[0m \e[35mguessesScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp681q7c_t.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^"
  stdout: ''
  timestamp: 1659798110
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val guessesDiff = guessesScores.zip(gameScores).map { case (guess,\
    \ game) => guess - game }\n        guessesDiff.zipWithIndex.map { case (guess,\
    \ index) => guess }\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq6kq05p7.scala:21)\n\tat Problem.main(tmpq6kq05p7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798112
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameSize = game.size\n        val guessSize = guess.size\n        val\
    \ result = new mutable.ArrayList[Long]()\n        var i = 0\n        var j = 0\n\
    \        var gameScore = 0\n        var guessScore = 0\n        while (i < gameSize\
    \ && j < guessSize) {\n            if (game(i) == guess(j)) {\n              \
    \  gameScore += 1\n                guessScore += 1\n                i += 1\n \
    \               j += 1\n            } else if (game(i) < guess(j)) {\n       \
    \         gameScore += 1\n                i += 1\n            } else {\n     \
    \           guessScore += 1\n                j += 1\n            }\n        }\n\
    \        if (i == gameSize) {\n            result.add(0)\n        } else if (j\
    \ == guessSize) {\n            result.add(0)\n        } else {\n            result.add(Math.abs(gameScore\
    \ - guessScore))\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0zvjyhoe.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ArrayList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798104
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameSize = game.size\n        val guessSize = guess.size\n        val\
    \ result = new mutable.ArrayList[Long](guessSize)\n        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val gameScore = gameScores.map\
    \ { case (score, index) => score }\n        val guessScore = guessScores.map {\
    \ case (score, index) => score }\n        val gameScoreDiff = gameScore diff guessScore\n\
    \        val gameScoreDiffMap = gameScoreDiff.zipWithIndex.map { case (score,\
    \ index) => score -> index }.toMap\n        val gameScoreDiffMap = gameScoreDiff.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val gameScoreDiffMap\
    \ = gameScoreDiff.zipWithIndex.map { case (score, index) => score -> index }.toMap\n\
    \        val gameScoreDiffMap = gameScoreDiff.zipWithIndex.map { case (score,\
    \ index) => score -> index }.toMap\n        val gameScoreDiffMap = gameScoreDiff.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val gameScoreDiffMap\
    \ = gameScoreDiff.zipWithIndex.map { case (score, index) => score -> index }.toMap\n\
    \        val gameScoreDiffMap = gameScoreDiff.zipWithIndex.map { case (score,\
    \ index) => score -> index }.toMap\n        val gameScoreDiffMap = gameScoreDiff.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val gameScoreDiffMap\
    \ = gameScoreDiff.zipWithIndex.map { case (score, index) => score -> index }.toMap\n\
    \        val gameScoreDiffMap = gameScoreDiff.zipWithIndex.map { case (score,\
    \ index) => score -> index }.toMap\n        val gameScoreDiffMap = gameScoreDiff.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val gameScoreDiffMap\
    \ = gameScoreDiff.zipWithIndex.map { case (score, index) => score -> index }.toMap\n\
    \        val gameScoreDiffMap = gameScoreDiff.zipWithIndex.map { case (score,\
    \ index) => score -> index }.toMap\n        val gameScoreDiffMap = gameScoreDiff.zipWithIndex.map\
    \ { case (score, index) => score \n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdczu_zok.scala:46:0 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdczu_zok.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreDiffMap\e[0m = gameScoreDiff.zipWithIndex.map { \e[33mcase\e\
    [0m (score, index) => score -> index }.toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffMap is already defined as \e[33mvalue\e[0m \e\
    [35mgameScoreDiffMap\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpdczu_zok.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffMap\e[0m =\
    \ gameScoreDiff.zipWithIndex.map { \e[33mcase\e[0m (score, index) => score ->\
    \ index }.toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffMap is already defined as \e[33mvalue\e[0m \e\
    [35mgameScoreDiffMap\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpdczu_zok.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffMap\e[0m =\
    \ gameScoreDiff.zipWithIndex.map { \e[33mcase\e[0m (score, index) => score ->\
    \ index }.toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffMap is already defined as \e[33mvalue\e[0m \e\
    [35mgameScoreDiffMap\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpdczu_zok.scala:27:12 ---------------------------\e\
    [0m"
  stdout: ''
  timestamp: 1659798116
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val guessesCorrect = guessesScores.zip(gameScores).map { case (guess,\
    \ gameScore) =>\n            if (guess == gameScore) 0 else Math.abs(guess - gameScore)\n\
    \        }\n        guessesCorrect.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798119
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameSize = game.size\n        val guessSize = guess.size\n        val\
    \ result = new Array[Long](guessSize)\n        val gameScores = game.zipWithIndex.map(_._2)\n\
    \        val guessScores = guess.zipWithIndex.map(_._2)\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n        val\
    \ gameScoreList = new ArrayList[Long]()\n        val guessScoreList = new ArrayList[Long]()\n\
    \        val gameScoreSet = new HashSet[Long]()\n        val guessScoreSet = new\
    \ HashSet[Long]()\n        val gameScoreListIterator = gameScoreList.iterator\n\
    \        val guessScoreListIterator = guessScoreList.iterator\n        val gameScoreSetIterator\
    \ = gameScoreSet.iterator\n        val guessScoreSetIterator = guessScoreSet.iterator\n\
    \        val gameScoreMapIterator = gameScoreMap.iterator\n        val guessScoreMapIterator\
    \ = guessScoreMap.iterator\n        val gameScoreSetIterator = gameScoreSet.iterator\n\
    \        val guessScoreSetIterator = guessScoreSet.iterator\n        val gameScoreMapIterator\
    \ = gameScoreMap.iterator\n        val guessScoreMapIterator = guessScoreMap.iterator\n\
    \        val gameScoreSetIterator = gameScoreSet.iterator\n        val guessScoreSetIterator\
    \ = guessScoreSet.iterator\n        val gameScoreMapIterator = gameScoreMap.iterator\n\
    \        val guessScoreMapIterator = guessScoreMap.iterator\n        val gameScoreSetIterator\
    \ = gameScoreSet.iterator\n        val guessScoreSetIterator = guessScoreSet.iterator\n\
    \        val gameScoreMapIterator = gameScoreMap.iterator\n        val guessScoreMapIterator\
    \ = guessScoreMap.iterator\n        val gameScoreSetIterator = gameScoreSet.iterator\n\
    \        val guessScoreSetIterator = guessScoreSet.iterator\n        val gameScoreMapIterator\
    \ = gameScoreMap.iterator\n        val guessScoreMapIterator = guessScoreMap.iterator\n\
    \        val gameScoreSetIterator = gameScoreSet.iterator\n        val guessScoreSetIterator\
    \ = guessScoreSet.iterator\n        val gameScoreMapIterator = gameScoreMap.iterator\n\
    \        val guessScoreMapIterator = guessScoreMap.iterator\n        val gameScoreSetIterator\
    \ = gameScoreSet.iterator\n        val guessScoreSetIterator = guessScoreSet.iterator\n\
    \        val gameScoreMapIterator = gameScoreMap.iterator\n        val guessScoreMapIterator\
    \ = guessScoreMap.iterator\n        val gameScoreSetIterator = gameScoreSet.iterator\n\
    \        val guessScoreSetIterator = guessScoreSet.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0a635v44.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp0a635v44.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mgameScoreSetIterator\e[0m = gameScoreSet.iterator\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreSetIterator is already defined as \e[33mvalue\e[0m\
    \ \e[35mgameScoreSetIterator\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp0a635v44.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mguessScoreSetIterator\e\
    [0m = guessScoreSet.iterator\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreSetIterator is already defined as \e[33mvalue\e\
    [0m \e[35mguessScoreSetIterator\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0a635v44.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMapIterator\e[0m\
    \ = gameScoreMap.iterator\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreMapIterator is already defined as \e[33mvalue\e[0m\
    \ \e[35mgameScoreMapIterator\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp0a635v44.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mguessScoreMapIterator\e\
    [0m = guessScoreMap.iterator\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreMapIterator is already defined as \e[33mvalue\e\
    [0m \e[35mguessScoreMapIterator\e[0m\n\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1659798117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val guesses = guess.toList\n        val scores = game.toList\n        val\
    \ guessesCount = guesses.size\n        val scoresCount = scores.size\n       \
    \ val result = new mutable.ArrayList[Long](guessesCount)\n        val guessesRemaining\
    \ = guessesCount - 1\n        val scoresRemaining = scoresCount - 1\n        val\
    \ guessesRemainingIndex = guessesRemaining - 1\n        val scoresRemainingIndex\
    \ = scoresRemaining - 1\n        val guessesRemainingScore = scores.get(guessesRemainingIndex)\n\
    \        val scoresRemainingScore = scores.get(scoresRemainingIndex)\n       \
    \ val guessesRemainingGuess = guesses.get(guessesRemainingIndex)\n        val\
    \ scoresRemainingGuess = guesses.get(scoresRemainingIndex)\n        var i = 0\n\
    \        while (i < guessesCount) {\n            val guessesRemainingScoreDiff\
    \ = abs(guessesRemainingScore - scoresRemainingScore)\n            val scoresRemainingGuessDiff\
    \ = abs(scoresRemainingGuess - guessesRemainingGuess)\n            if (scoresRemainingGuessDiff\
    \ < scoresRemainingScore) {\n                result(i) = guessesRemainingScoreDiff\n\
    \            } else {\n                result(i) = scoresRemainingGuessDiff\n\
    \            }\n            i += 1\n        }\n        result.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3x56lb1o.scala:19:25 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ArrayList[\e[35mLong\e[0m](guessesCount)\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3x56lb1o.scala:24:43\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mguessesRemainingScore\e[0m = scores.get(guessesRemainingIndex)\n\e[31m\e[31m\
    \   |\e[0m                                    ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \      value get is not a member of List[Long] - did you mean scores.seq?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp3x56lb1o.scala:25:42 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mscoresRemainingScore\e[0m\
    \ = scores.get(scoresRemainingIndex)\n\e[31m\e[31m   |\e[0m                  \
    \                 ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue get is not a member of\
    \ List[Long], but could be made available as an extension method.\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.seq\
    \ AsJavaList\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3x56lb1o.scala:26:44\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mguessesRemainingGuess\e[0m = guesses.get(guessesRemainingIndex)\n\e[31m\e\
    [31m   |\e[0m                                    ^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue get is not a member of List[Long], but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.seq\
    \ AsJavaList\n\e[31m   |\e[0m\n\e[3"
  stdout: ''
  timestamp: 1659798118
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val guesses = guess.toList\n        val scores = game.toList\n        val\
    \ guessesCount = guesses.size\n        val scoresCount = scores.size\n       \
    \ val guessesCorrect = guesses.zip(scores).filter(_._2 == 0).map(_._1).sum\n \
    \       val scoresCorrect = scores.zip(guesses).filter(_._2 == 0).map(_._1).sum\n\
    \        val guessesDiff = guessesCount - guessesCorrect\n        val scoresDiff\
    \ = scoresCount - scoresCorrect\n        guessesDiff.zip(scoresDiff).map { case\
    \ (guess, diff) => guess + diff }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo6onx9t8.scala:23:20 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        guessesDiff.zip(scoresDiff).map { \e[33mcase\e\
    [0m (guess, diff) => guess + diff }\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        value zip is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1659798114
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap =\
    \ guessScores.toMap\n        val gameScores = gameScoreMap.values.toList\n   \
    \     val guessScores = guessScoreMap.values.toList\n        val gameScoreMap\
    \ = gameScores.zipWithIndex.map { case (score, index) => index -> score }\n  \
    \      val guessScoreMap = guessScores.zipWithIndex.map { case (score, index)\
    \ => index -> score }\n        val gameScoreMap = gameScoreMap.map { case (index,\
    \ score) => index -> score }\n        val guessScoreMap = guessScoreMap.map {\
    \ case (index, score) => index -> score }\n        val gameScores = gameScoreMap.map\
    \ { case (index, score) => score }\n        val guessScores = guessScoreMap.map\
    \ { case (index, score) => score }\n        val gameScores = gameScores.toList\n\
    \        val guessScores = guessScores.toList\n        val gameScoreMap = gameScores.zipWithIndex.map\
    \ { case (score, index) => index -> score }\n        val guessScoreMap = guessScores.zipWithIndex.map\
    \ { case (score, index) => index -> score }\n        val gameScoreMap = gameScoreMap.map\
    \ { case (index, score) => index -> score }\n        val guessScoreMap = guessScoreMap.map\
    \ { case (index, score) => index -> score }\n        val gameScores = gameScoreMap.map\
    \ { case (index, score) => score }\n        val guessScores = guessScoreMap.map\
    \ { case (index, score) => score }\n        val gameScores = gameScores.toList\n\
    \        val guessScores = guessScores.toList\n        val gameScoreMap = gameScores.zipWithIndex.map\
    \ { case (score, index) => index -> score }\n        val guessScoreMap = guessScores.zipWithIndex.map\
    \ { case (score, index) => index -> score }\n        val gameScoreMap = gameScoreMap.map\
    \ { case (index, score) => index -> score }\n        val guessScoreMap = guessScoreMap.map\
    \ { case (index, score) => index -> score }\n        val gameScores = gameScoreMap.map\
    \ { case (index, score) => score }\n        val guessScores = guessScoreMap.map\
    \ { case (index, score) => score }\n        val gameScores = gameScore\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0ymngsk1.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = gameScoreMap.values.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mgameScores is already defined as \e[33mvalue\e[0m \e[35mgameScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0ymngsk1.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mguessScores\e[0m = guessScoreMap.values.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mguessScores is already defined as \e[33mvalue\e[0m \e[35mguessScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0ymngsk1.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.zipWithIndex.map\
    \ { \e[33mcase\e[0m (score, index) => index -> score }\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreMap is already defined as \e[33mvalue\e[0m \e[35mgameScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0ymngsk1.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mguessScoreMap\e[0m = guessScores.zipWithIndex.map\
    \ { \e[33mcase\e[0m (score, index) => index -> score }\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreMap is already defined as \e[33mvalue\e[0m \e[35mguessScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m"
  stdout: ''
  timestamp: 1659798118
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap\
    \ = guessesScores.toMap\n        val gameScoreList = gameScores.toList\n     \
    \   val guessesScoreList = guessesScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessesScoreSet = guessesScores.toSet\n        val gameScoreMap =\
    \ gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n      \
    \  val gameScoreList = gameScores.toList\n        val guessesScoreList = guessesScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessesScoreSet = guessesScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessesScoreList =\
    \ guessesScores.toList\n        val gameScoreSet = gameScores.toSet\n        val\
    \ guessesScoreSet = guessesScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessesScoreMap = guessesScores.toMap\n        val gameScoreList\
    \ = gameScores.toList\n        val guessesScoreList = guessesScores.toList\n \
    \       val gameScoreSet = gameScores.toSet\n        val guessesScoreSet = guessesScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessesScoreList =\
    \ guessesScores.toList\n        val gameScoreSet = gameScores.toSet\n        val\
    \ guessesScoreSet = guessesScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessesScoreMap = guessesScores.toMap\n        val gameScoreList\
    \ = gameScores.toList\n        val guessesScoreList = guessesScores.toList\n \
    \       val gameScoreSet = gameScores.toSet\n        val guessesScoreSet = guessesScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpxjvdxslc.scala:55:11 ---------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpxjvdxslc.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreMap is already defined as \e[33mvalue\e[0m \e[35mgameScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxjvdxslc.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mguessesScoreMap\e[0m = guessesScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mguessesScoreMap is already defined as \e[33mvalue\e[0m \e[35mguessesScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxjvdxslc.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = gameScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreList is already defined as \e[33mvalue\e[0m \e[35mgameScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxjvdxslc.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessesScoreList\e[0m = guessesScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mguessesScoreList is already defined as \e[33mvalue\e[0m \e[35mguessesScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded "
  stdout: ''
  timestamp: 1659798117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameLen = game.length\n        val guessLen = guess.length\n       \
    \ val result = new Array[Long](guessLen)\n        var i = 0\n        while (i\
    \ < guessLen) {\n            val gameScore = game(i)\n            val guessScore\
    \ = guess(i)\n            val diff = guessScore - gameScore\n            if (diff\
    \ < 0) {\n                diff = -diff\n            }\n            result(i) =\
    \ diff\n            i += 1\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpcos7dh4w.scala:24:21 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                diff = -diff\n\e[31m\e[31m   |\e[0m \
    \               ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val diff\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcos7dh4w.scala:29:8\
    \ ---------------------\e[0m\e[0m\n\e[31m29 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797997
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreCount = gameScores.count\n        val guessesScoreCount\
    \ = guessesScores.count\n        val gameScoreDiff = gameScoreCount - guessesScoreCount\n\
    \        val guessesScoreDiff = guessesScoreCount - gameScoreCount\n        val\
    \ guessesScoreDiffs = guessesScores.zipWithIndex.map { case (score, index) =>\
    \ (index, abs(score - guessesScores(index)))}\n        val guessesScoreDiffsSorted\
    \ = guessesScoreDiffs.sortBy(_._2)\n        val guessesScoreDiffsSortedSortedByIndex\
    \ = guessesScoreDiffsSorted.sortBy(_._1)\n        val guessesScoreDiffsSortedSortedByIndexReversed\
    \ = guessesScoreDiffsSortedSortedByIndex.reverse\n        val guessesScoreDiffsSortedSortedByIndexReversedSortedByIndex\
    \ = guessesScoreDiffsSortedSortedByIndexReversed.sortBy(_._1)\n        val guessesScoreDiffsSortedSortedByIndexReversedSortedByIndexReversed\
    \ = guessesScoreDiffsSortedSortedByIndexReversedSortedByIndex.reverse\n      \
    \  val guessesScoreDiffsSortedSortedByIndexReversedSortedByIndexReversedSortedByIndex\
    \ = guessesScoreDiffsSortedSortedByIndexReversedSortedByIndexReversedSortedByIndex.reverse\n\
    \        val guessesScoreDiffsSortedSortedByIndexReversedSortedByIndexReversedSortedByIndexReversed\
    \ = guessesScoreDiffsSortedSortedByIndexReversedSortedByIndexReversedSortedByIndex.reverse\n\
    \        val guessesScoreDiffsSortedSortedByIndexReversedSortedByIndexReversedSortedByIndexReversedSortedByIndex\
    \ = guessesScoreDiffsSortedSortedByIndexReversedSortedByIndexReversedSortedByIndexReversedSortedByIndex.reverse\n\
    \        val guessesScoreDiffsSortedSortedByIndexReversedSortedByIndexReversedSortedByIndexReversedSortedByIndexReversed\
    \ = guessesScoreDiffsSortedSortedByIndexReversedSortedByIndexReversedSortedByIndexReversedSortedByIndex.reverse\n\
    \        val guessesScoreDiffsSortedSortedByIndexReversedSortedByIndexReversedSortedByIndexReversedSortedByIndexReversedSortedByIndex\
    \ = guessesScoreDiffsSortedSortedByIndexReversedSortedByIndexReversedSortedByIndexReversedSortedBy\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn00q58eh.scala:19:43 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiff\e[0m = gameScoreCount\
    \ - guessesScoreCount\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue - is not a member of (Long => Boolean) => Int, but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpn00q58eh.scala:20:49 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mguessesScoreDiff\e[0m =\
    \ guessesScoreCount - gameScoreCount\n\e[31m\e[31m   |\e[0m                  \
    \             ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue - is not a member\
    \ of (Long => Boolean) => Int, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpn00q58eh.scala:27:93 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mguessesScoreDiffsSortedSortedByIndexReversedSortedByIndexReversedSortedByIndex\e\
    [0m = guessesScoreDiffsSortedSortedByIndexReversedSortedByIndexReversedSortedByIndex.reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                     ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  guessesScoreDiffsSortedSortedByIndexReversedSortedByIndexReversedSortedByIndex\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanat"
  stdout: ''
  timestamp: 1659798120
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameLen = game.length\n        val guessLen = guess.length\n       \
    \ val result = new mutable.ArrayList[Long](guessLen)\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }\n        val\
    \ guessScores = guess.zipWithIndex.map { case (score, index) => score -> index\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap =\
    \ guessScores.toMap\n        val gameScoreKeys = gameScoreMap.keys\n        val\
    \ guessScoreKeys = guessScoreMap.keys\n        val gameScoreValues = gameScoreMap.values\n\
    \        val guessScoreValues = guessScoreMap.values\n        val gameScoreKeySet\
    \ = gameScoreKeys.toSet\n        val guessScoreKeySet = guessScoreKeys.toSet\n\
    \        val gameScoreValueSet = gameScoreValues.toSet\n        val guessScoreValueSet\
    \ = guessScoreValues.toSet\n        val gameScoreKeySet = gameScoreKeys.toSet\n\
    \        val guessScoreKeySet = guessScoreKeys.toSet\n        val gameScoreValueSet\
    \ = gameScoreValues.toSet\n        val guessScoreValueSet = guessScoreValues.toSet\n\
    \        val gameScoreKeySet = gameScoreKeys.toSet\n        val guessScoreKeySet\
    \ = guessScoreKeys.toSet\n        val gameScoreValueSet = gameScoreValues.toSet\n\
    \        val guessScoreValueSet = guessScoreValues.toSet\n        val gameScoreKeySet\
    \ = gameScoreKeys.toSet\n        val guessScoreKeySet = guessScoreKeys.toSet\n\
    \        val gameScoreValueSet = gameScoreValues.toSet\n        val guessScoreValueSet\
    \ = guessScoreValues.toSet\n        val gameScoreKeySet = gameScoreKeys.toSet\n\
    \        val guessScoreKeySet = guessScoreKeys.toSet\n        val gameScoreValueSet\
    \ = gameScoreValues.toSet\n        val guessScoreValueSet = guessScoreValues.toSet\n\
    \        val gameScoreKeySet = gameScoreKeys.toSet\n        val guessScoreKeySet\
    \ = guessScoreKeys.toSet\n        val gameScoreValueSet = gameScoreValues.toSet\n\
    \        val guessScoreValueSet = guessScoreValues.toSet\n        val gameScoreKeySet\
    \ = gameScoreKeys.toSet\n        val guessScoreKeySet = guessScoreKeys.toSet\n\
    \        val gameScoreValueSet = gameScoreValues.toSet\n        val guessScoreValueSet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0yabz7s9.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0yabz7s9.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreKeySet\e[0m = gameScoreKeys.toSet\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mgameScoreKeySet\
    \ is already defined as \e[33mvalue\e[0m \e[35mgameScoreKeySet\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0yabz7s9.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessScoreKeySet\e[0m = guessScoreKeys.toSet\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mguessScoreKeySet\
    \ is already defined as \e[33mvalue\e[0m \e[35mguessScoreKeySet\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp0yabz7s9.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mgameScoreValueSet\e[0m = gameScoreValues.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mgameScoreValueSet is already defined as \e[33mvalue\e[0m \e[35mgameScoreValueSet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0yabz7s9.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mguessScoreValueSet\e[0m = guessScoreValues.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreValueSet is already defined as \e[33mvalue\e[0m\
    \ \e[35mguessScoreValueSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group o"
  stdout: ''
  timestamp: 1659798117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameSet = game.distinct\n        val guessSet = guess.distinct\n   \
    \     val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpngl9eprg.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mgameSetSize\e[0m = gameSetSize\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameSetSize is already defined as \e[33mvalue\e[0m \e[35mgameSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpngl9eprg.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mguessSetSize\e[0m = guessSetSize + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessSetSize is already defined as \e[33mvalue\e[0m \e[35mguessSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpngl9eprg.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mgameSetSize\e[0m = gameSetSize + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mgameSetSize is already defined as \e[33mvalue\e[0m \e[35mgameSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpngl9eprg.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mguessSetSize\e[0m = guessSetSize + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessSetSize is already defined as \e[33mvalue\e[0m \e[35mguessSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpngl9eprg.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mgameSetSize\e[0m = gameSetSize + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m  "
  stdout: ''
  timestamp: 1659798120
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap =\
    \ guessScores.toMap\n        val gameScoreList = gameScores.toList\n        val\
    \ guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guess\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbsn9xo79.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreMap is already defined as \e[33mvalue\e[0m \e[35mgameScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbsn9xo79.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mguessScoreMap\e[0m = guessScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mguessScoreMap is already defined as \e[33mvalue\e[0m \e[35mguessScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbsn9xo79.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = gameScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreList is already defined as \e[33mvalue\e[0m \e[35mgameScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbsn9xo79.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessScoreList\e[0m = guessScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mguessScoreList is already defined as \e[33mvalue\e[0m \e[35mguessScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbsn9xo79.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreSet\e[0m = gameScores.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0"
  stdout: ''
  timestamp: 1659798018
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val guesses = guess.map(x => x -> game(x))\n        val scores = game.map(x\
    \ => x -> x)\n        val guessesWithScores = guesses.toSeq.sortBy(_._2)\n   \
    \     val scoresWithGuesses = scores.toSeq.sortBy(_._2)\n        val guessesWithScoresWithGuesses\
    \ = guessesWithScores.toSeq.sortBy(_._1)\n        val scoresWithGuessesWithGuesses\
    \ = scoresWithGuesses.toSeq.sortBy(_._1)\n        val guessesWithScoresWithGuessesWithGuesses\
    \ = guessesWithScoresWithGuesses.toSeq.sortBy(_._1)\n        val scoresWithGuessesWithGuessesWithGuesses\
    \ = scoresWithGuessesWithGuesses.toSeq.sortBy(_._1)\n        val guessesWithScoresWithGuessesWithGuessesWithGuesses\
    \ = guessesWithScoresWithGuessesWithGuesses.toSeq.sortBy(_._1)\n        val scoresWithGuessesWithGuessesWithGuessesWithGuesses\
    \ = scoresWithGuessesWithGuessesWithGuesses.toSeq.sortBy(_._1)\n        val guessesWithScoresWithGuessesWithGuessesWithGuessesWithGuesses\
    \ = guessesWithScoresWithGuessesWithGuessesWithGuesses.toSeq.sortBy(_._1)\n  \
    \      val scoresWithGuessesWithGuessesWithGuessesWithGuessesWithGuesses = scoresWithGuessesWithGuessesWithGuessesWithGuesses.toSeq.sortBy(_._1)\n\
    \        val guessesWithScoresWithGuessesWithGuessesWithGuessesWithGuessesWithGuesses\
    \ = guessesWithScoresWithGuessesWithGuessesWithGuessesWithGuesses.toSeq.sortBy(_._1)\n\
    \        val scoresWithGuessesWithGuessesWithGuessesWithGuessesWithGuessesWithGuesses\
    \ = scoresWithGuessesWithGuessesWithGuessesWithGuessesWithGuesses.toSeq.sortBy(_._1)\n\
    \        val guessesWithScoresWithGuessesWithGuessesWithGuessesWith\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmah88mam.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpmah88mam.scala:15:47 --------------------\e[0m\e[0m\n\e[31m15 |\e[0m\
    \        \e[33mval\e[0m \e[36mguesses\e[0m = guess.map(\e[36mx\e[0m => x -> game(x))\n\
    \e[31m\e[31m   |\e[0m                                               ^\e[0m\n\e\
    [31m   |\e[0m                                               Found:    (x : Long)\n\
    \e[31m   |\e[0m                                               Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmah88mam.scala:30:5\
    \ ---------------------\e[0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798120
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameLen = game.length\n        val guessLen = guess.length\n       \
    \ val result = new Array[Long](guessLen)\n        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score -> index }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score -> index }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreSet = gameScoreMap.values.toSet\n\
    \        val guessScoreSet = guessScoreMap.values.toSet\n        val gameScoreList\
    \ = gameScoreMap.values.toList\n        val guessScoreList = guessScoreMap.values.toList\n\
    \        val gameScoreSetSet = gameScoreSet.intersect(guessScoreSet)\n       \
    \ val gameScoreListSet = gameScoreList.intersect(guessScoreList)\n        val\
    \ gameScoreSetListSet = gameScoreSetSet.intersect(guessScoreListSet)\n       \
    \ val gameScoreSetSetListSet = gameScoreSetSetListSet.intersect(guessScoreSetListSet)\n\
    \        val gameScoreSetSetListSetSet = gameScoreSetSetListSet.intersect(guessScoreSetListSet)\n\
    \        val gameScoreSetSetListSetSet = gameScoreSetSetListSet.intersect(guessScoreSetListSet)\n\
    \        val gameScoreSetSetListSetSet = gameScoreSetSetListSet.intersect(guessScoreSetListSet)\n\
    \        val gameScoreSetSetListSetSet = gameScoreSetSetListSet.intersect(guessScoreSetListSet)\n\
    \        val gameScoreSetSetListSetSet = gameScoreSetSetListSet.intersect(guessScoreSetListSet)\n\
    \        val gameScoreSetSetListSetSet = gameScoreSetSetListSet.intersect(guessScoreSetListSet)\n\
    \        val gameScoreSetSetListSetSet = gameScoreSetSetListSet.intersect(guessScoreSetListSet)\n\
    \        val gameScoreSetSetListSetSet = gameScoreSetSetListSet.intersect(guessScoreSetListSet)\n\
    \        val gameScoreSetSetListSetSet = gameScoreSetSetListSet.intersect(guessScoreSetListSet)\n\
    \        val gameScoreSetSetListSetSet = gameScoreSetSetListSet.intersect(guessScoreSetListSet)\n\
    \        val gameScoreSetSetListSetSet = gameScoreSetSetListSet.intersect(guessScore\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_ikxyled.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_ikxyled.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreSetSetListSetSet\e[0m = gameScoreSetSetListSet.intersect(guessScoreSetListSet)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreSetSetListSetSet is already defined as \e[33mvalue\e\
    [0m \e[35mgameScoreSetSetListSetSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_ikxyled.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mgameScoreSetSetListSetSet\e\
    [0m = gameScoreSetSetListSet.intersect(guessScoreSetListSet)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreSetSetListSetSet is already defined as \e[33mvalue\e\
    [0m \e[35mgameScoreSetSetListSetSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_ikxyled.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgameScoreSetSetListSetSet\e\
    [0m = gameScoreSetSetListSet.intersect(guessScoreSetListSet)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreSetSetListSetSet is already defined as \e[33mvalue\e\
    [0m \e[35mgameScoreSetSetListSetSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_ikxyled.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgameSc"
  stdout: ''
  timestamp: 1659798121
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameLength = game.length\n        val guessLength = guess.length\n \
    \       val result = new mutable.ArrayList[Long](guessLength)\n        val gameScores\
    \ = game.zipWithIndex.map { case (score, index) => score -> index }\n        val\
    \ guessScores = guess.zipWithIndex.map { case (score, index) => score -> index\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap =\
    \ guessScores.toMap\n        val gameScoreKeys = gameScoreMap.keys\n        val\
    \ guessScoreKeys = guessScoreMap.keys\n        val gameScoreKeysSet = gameScoreKeys.toSet\n\
    \        val guessScoreKeysSet = guessScoreKeys.toSet\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val guessScoreKeysSetSize = guessScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val gameScoreKeys\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmph_ywn5dm.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmph_ywn5dm.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreKeysSetSize\e[0m = gameScoreKeysSet.size\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mgameScoreKeysSetSize is already defined as \e[33mvalue\e[0m \e[35mgameScoreKeysSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmph_ywn5dm.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mgameScoreKeysSetSize\e[0m = gameScoreKeysSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreKeysSetSize is already defined as \e[33mvalue\e[0m\
    \ \e[35mgameScoreKeysSetSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmph_ywn5dm.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mgameScoreKeysSetSize\e[0m\
    \ = gameScoreKeysSet.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreKeysSetSize is already defined as \e[33mvalue\e[0m\
    \ \e[35mgameScoreKeysSetSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmph_ywn5dm.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mgameScoreKeysSetSize\e[0m\
    \ = gameScoreKeysSet.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreKeysSetSize is already defined as \e[33mvalue\e[0m\
    \ \e[35mgameScoreKeysSetSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote tha"
  stdout: ''
  timestamp: 1659798122
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameLen = game.length\n        val guessLen = guess.length\n       \
    \ val result = new Array[Long](guessLen)\n        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        guessScoreMap.foreach\
    \ { case (guess, score) =>\n            val gameScore = gameScoreMap.get(guess)\n\
    \            if (gameScore == null) {\n                result(index) = guess\n\
    \            } else {\n                result(index) = abs(guess - gameScore)\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp97lury68.scala:20:43 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.toMap\n\
    \e[31m\e[31m   |\e[0m                                           ^\e[0m\n\e[31m\
    \   |\e[0m                                       Cannot prove that Long <:< (K,\
    \ V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                       where:\
    \    K is a type variable\n\e[31m   |\e[0m                                   \
    \              V is a type variable\n\e[31m   |\e[0m                         \
    \              .\n\e[31m\e[31m-- Error: /tmp/tmp97lury68.scala:21:45 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mguessScoreMap\e[0m = guessScores.toMap\n\
    \e[31m\e[31m   |\e[0m                                             ^\e[0m\n\e[31m\
    \   |\e[0m                                       Cannot prove that Long <:< (K,\
    \ V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                       where:\
    \    K is a type variable\n\e[31m   |\e[0m                                   \
    \              V is a type variable\n\e[31m   |\e[0m                         \
    \              .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp97lury68.scala:30:8\
    \ ---------------------\e[0m\e[0m\n\e[31m30 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameSize = game.size\n        val guessSize = guess.size\n        val\
    \ result = new Array[Long](guessSize)\n        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val gameScore = gameScores.map\
    \ { case (score, index) => score }.toList\n        val guessScore = guessScores.map\
    \ { case (score, index) => score }.toList\n        val gameScoreDiff = gameScore\
    \ diff guessScore\n        val gameScoreDiffMap = gameScoreDiff.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val gameScoreDiffMapSorted\
    \ = gameScoreDiffMap.sortBy(_._1).reverse\n        val gameScoreDiffMapSortedReversed\
    \ = gameScoreDiffMapSorted.reverse\n        val gameScoreDiffMapSortedReversedIter\
    \ = gameScoreDiffMapSortedReversed.iterator\n        val gameScoreDiffMapSortedReversedIterNext\
    \ = gameScoreDiffMapSortedReversedIter.next\n        val gameScoreDiffMapSortedReversedIterNextValue\
    \ = gameScoreDiffMapSortedReversedIterNext._2._1\n        val gameScoreDiffMapSortedReversedIterNextKey\
    \ = gameScoreDiffMapSortedReversedIterNext._2._2\n        val gameScoreDiffMapSortedReversedIterNextKeyValue\
    \ = gameScoreDiffMapSortedReversedIterNext._2._3\n        val gameScoreDiffMapSortedReversedIterNextKeyValue\
    \ = gameScoreDiffMapSortedReversedIterNext._2._4\n        val gameScoreDiffMapSortedReversedIterNextKeyValue\
    \ = gameScoreDiffMapSortedReversedIterNext._2._5\n        val gameScoreDiffMapSortedReversedIterNextKeyValue\
    \ = gameScoreDiffMapSortedReversedIterNext._2._6\n        val gameScoreDiffMapSortedReversedIterNextKeyValue\
    \ = gameScoreDiffMapSortedReversedIterNext._2._7\n        val gameScoreDiffMapSortedReversedIterNextKeyValue\
    \ = gameScoreDiffMapSortedReversedIterNext._2._8\n        val gameScoreDiffMapSortedReversedIterNextKeyValue\
    \ = gameScoreDiffMapSortedReversedIterNext._2._9\n        val gameScoreDiffMapSortedReversedIterNextKeyValue\
    \ = gameScoreDiffMapSortedReversedIterNext._2._10\n        val gameScore\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpintqeuhg.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpintqeuhg.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreDiffMapSortedReversedIterNextKeyValue\e[0m = gameScoreDiffMapSortedReversedIterNext._2._4\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffMapSortedReversedIterNextKeyValue is already\
    \ defined as \e[33mvalue\e[0m \e[35mgameScoreDiffMapSortedReversedIterNextKeyValue\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpintqeuhg.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffMapSortedReversedIterNextKeyValue\e\
    [0m = gameScoreDiffMapSortedReversedIterNext._2._5\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffMapSortedReversedIterNextKeyValue is already\
    \ defined as \e[33mvalue\e[0m \e[35mgameScoreDiffMapSortedReversedIterNextKeyValue\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpintqeuhg.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffMapSortedReversedIterNextKeyValue\e\
    [0m = gameScoreDiffMapSortedReversedIterNext._2._6\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffMapSortedReversedIterNextKeyValue is already\
    \ defined as \e[33mvalue\e[0m \e[35mgameScoreDiffMapSortedReversedIterNextKeyValue\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ de"
  stdout: ''
  timestamp: 1659798128
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val guesses = guess.toSet\n        val scores = game.toSet\n        val\
    \ results = new mutable.ArrayBuffer[Long]()\n        for(score <- scores) {\n\
    \            val guess = guesses.find(_ == score)\n            if(guess == None)\
    \ results += score\n            else results += guess - score\n        }\n   \
    \     results\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo4a84eo4.scala:17:26 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresults\e[0m = \e[33mnew\e\
    [0m mutable.ArrayBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798120
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.zipWithIndex.map(x => x._1 + x._2)\n        val guessesScores\
    \ = guess.zipWithIndex.map(x => x._1 + x._2)\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessesScoreMap = guessesScores.toMap\n        val gameScoreList\
    \ = gameScoreMap.values.toList\n        val guessesScoreList = guessesScoreMap.values.toList\n\
    \        val gameScoreSet = gameScoreList.toSet\n        val guessesScoreSet =\
    \ guessesScoreList.toSet\n        val gameScoreList = gameScoreSet.map(x => gameScoreMap.get(x))\n\
    \        val guessesScoreList = guessesScoreSet.map(x => guessesScoreMap.get(x))\n\
    \        val gameScoreList = gameScoreList.map(x => Math.abs(x))\n        val\
    \ guessesScoreList = guessesScoreList.map(x => Math.abs(x))\n        val gameScoreList\
    \ = gameScoreList.map(x => if (x == 0) 0 else x)\n        val guessesScoreList\
    \ = guessesScoreList.map(x => if (x == 0) 0 else x)\n        val gameScoreList\
    \ = gameScoreList.map(x => if (x == 0) 0 else x)\n        val guessesScoreList\
    \ = guessesScoreList.map(x => if (x == 0) 0 else x)\n        val gameScoreList\
    \ = gameScoreList.map(x => if (x == 0) 0 else x)\n        val guessesScoreList\
    \ = guessesScoreList.map(x => if (x == 0) 0 else x)\n        val gameScoreList\
    \ = gameScoreList.map(x => if (x == 0) 0 else x)\n        val guessesScoreList\
    \ = guessesScoreList.map(x => if (x == 0) 0 else x)\n        val gameScoreList\
    \ = gameScoreList.map(x => if (x == 0) 0 else x)\n        val guessesScoreList\
    \ = guessesScoreList.map(x => if (x == 0) 0 else x)\n        val gameScoreList\
    \ = gameScoreList.map(x => if (x == 0) 0 else x)\n        val guessesScoreList\
    \ = guessesScoreList.map(x => if (x == 0) 0 else x)\n        val gameScoreList\
    \ = gameScoreList.map(x => if (x == 0) 0 else x)\n        val guessesScoreList\
    \ = guessesScoreList.map(x => if (x == 0) 0 else x)\n        val gameScoreList\
    \ = gameScoreList.map(x => if (x == 0) 0 else x)\n        val guessesScoreList\
    \ = guessesScoreList.map(x => if (x == 0) 0 else x)\n        val gameScoreList\
    \ = gameScoreList.map(x => if (x == 0) 0 else x)\n        val guessesScoreList\
    \ = guessesScoreList.map(x => if (x == 0) 0 else x)\n        \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppahe6hgi.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = gameScoreSet.map(\e\
    [36mx\e[0m => gameScoreMap.get(x))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreList is already defined as \e[33mvalue\e[0m \e[35mgameScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppahe6hgi.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mguessesScoreList\e[0m = guessesScoreSet.map(\e\
    [36mx\e[0m => guessesScoreMap.get(x))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesScoreList is already defined as \e[33mvalue\e[0m \e\
    [35mguessesScoreList\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmppahe6hgi.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = gameScoreList.map(\e\
    [36mx\e[0m => Math.abs(x))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreList is already defined as \e[33mvalue\e[0m \e[35mgameScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppahe6hgi.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessesScoreList\e[0m = guessesScoreList.map(\e\
    [36mx\e[0m => Math.abs(x))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesScoreList is already defined as \e[33mvalue\e[0m \e\
    [35mguessesScoreList\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e["
  stdout: ''
  timestamp: 1659798130
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.zipWithIndex.map{ case (score, index) => score }\n\
    \        val guessScores = guess.zipWithIndex.map{ case (score, index) => score\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap =\
    \ guessScores.toMap\n        val gameScoreList = gameScoreMap.values.toList\n\
    \        val guessScoreList = guessScoreMap.values.toList\n        val gameScoreSet\
    \ = gameScoreList.distinct\n        val guessScoreSet = guessScoreList.distinct\n\
    \        val gameScoreMap = gameScoreSet.zip(gameScoreList).map{ case (score,\
    \ index) => index -> score }.toMap\n        val guessScoreMap = guessScoreSet.zip(guessScoreList).map{\
    \ case (score, index) => index -> score }.toMap\n        val gameScoreList = gameScoreMap.values.toList\n\
    \        val guessScoreList = guessScoreMap.values.toList\n        val gameScoreSet\
    \ = gameScoreList.distinct\n        val guessScoreSet = guessScoreList.distinct\n\
    \        val gameScoreMap = gameScoreSet.zip(gameScoreList).map{ case (score,\
    \ index) => index -> score }.toMap\n        val guessScoreMap = guessScoreSet.zip(guessScoreList).map{\
    \ case (score, index) => index -> score }.toMap\n        val gameScoreList = gameScoreMap.values.toList\n\
    \        val guessScoreList = guessScoreMap.values.toList\n        val gameScoreSet\
    \ = gameScoreList.distinct\n        val guessScoreSet = guessScoreList.distinct\n\
    \        val gameScoreMap = gameScoreSet.zip(gameScoreList).map{ case (score,\
    \ index) => index -> score }.toMap\n        val guessScoreMap = guessScoreSet.zip(guessScoreList).map{\
    \ case (score, index) => index -> score }.toMap\n        val gameScoreList = gameScoreMap.values.toList\n\
    \        val guessScoreList = guessScoreMap.values.toList\n        val gameScoreSet\
    \ = gameScoreList.distinct\n        val guessScoreSet = guessScoreList.distinct\n\
    \        val gameScoreMap = gameScoreSet.zip(gameScoreList).map{ case (score,\
    \ index) => index -> score }.toMap\n        val guessScoreMap = guessScoreSet.zip(guessScoreList).map{\
    \ case (score, index) => index -> score }.toMap\n        val gameScoreList = gameScoreMap.values.toList\n\
    \        val guessScoreList = guessScoreMap.values.toList\n        val gameScoreSet\
    \ = gameScoreList.distinct\n        val guessScore\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgjrnpi_p.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgjrnpi_p.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreMap\e[0m = gameScoreSet.zip(gameScoreList).map{ \e[33mcase\e\
    [0m (score, index) => index -> score }.toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreMap is already defined as \e[33mvalue\e[0m \e[35mgameScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgjrnpi_p.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mguessScoreMap\e[0m = guessScoreSet.zip(guessScoreList).map{\
    \ \e[33mcase\e[0m (score, index) => index -> score }.toMap\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreMap is already defined as \e[33mvalue\e[0m \e[35mguessScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgjrnpi_p.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = gameScoreMap.values.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreList is already defined as \e[33mvalue\e[0m \e[35mgameScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgjrnpi_p.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessScoreList\e[0m = guessScoreMap.values.toList\n\
    \e[31m\e[31m   |\e[0m        ^"
  stdout: ''
  timestamp: 1659798130
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.map(x => if (x == 0) 0 else x)\n        val guessScores\
    \ = guess.map(x => if (x == 0) 0 else x)\n        val gameScoreCount = gameScores.count\n\
    \        val guessScoreCount = guessScores.count\n        val gameScoreSum = gameScores.sum\n\
    \        val guessScoreSum = guessScores.sum\n        val gameScoreDiff = gameScoreSum\
    \ - guessScoreSum\n        val guessScoreDiff = guessScoreSum - gameScoreSum\n\
    \        val gameScoreDiffs = gameScores.zip(guessScores).map(x => (x._1 - x._2))\n\
    \        val guessScoreDiffs = guessScores.zip(gameScores).map(x => (x._1 - x._2))\n\
    \        val gameScoreDiffsCount = gameScoreDiffs.count\n        val guessScoreDiffsCount\
    \ = guessScoreDiffs.count\n        val gameScoreDiffsSum = gameScoreDiffs.sum\n\
    \        val guessScoreDiffsSum = guessScoreDiffs.sum\n        val gameScoreDiffsDiff\
    \ = gameScoreDiffsSum - guessScoreDiffsSum\n        val guessScoreDiffsDiff =\
    \ guessScoreDiffsSum - gameScoreDiffsSum\n        val gameScoreDiffsDiffs = gameScoreDiffs.zip(guessScoreDiffs).map(x\
    \ => (x._1 - x._2))\n        val guessScoreDiffsDiffs = guessScoreDiffs.zip(gameScoreDiffs).map(x\
    \ => (x._1 - x._2))\n        val gameScoreDiffsDiffsCount = gameScoreDiffsDiffs.count\n\
    \        val guessScoreDiffsDiffsCount = guessScoreDiffsDiffs.count\n        val\
    \ gameScoreDiffsDiffsSum = gameScoreDiffsDiffs.sum\n        val guessScoreDiffsDiffsSum\
    \ = guessScoreDiffsDiffs.sum\n        val gameScoreDiffsDiffsDiff = gameScoreDiffsDiffsSum\
    \ - guessScoreDiffsDiffsSum\n        val guessScoreDiffsDiffsDiff = guessScoreDiffsDiffsSum\
    \ - gameScoreDiffsDiffsSum\n        val gameScoreDiffsDiffsDiffs = gameScoreDiffsDiffs.zip(guessScoreDiffsDiffs).map(x\
    \ => (x._1 - x._2))\n        val guessScoreDiffsDiffsDiffs = guessScoreDiffsDiffs.zip(gameScoreDiffsDiffs).map(x\
    \ => (x._1 - x._2))\n        val gameScoreDiffsDiffsDiffsCount = gameScoreDiffsDiffsDiffs.count\n\
    \        val guessScoreDiffs\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong,\
    \ -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpv3hubqmk.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpv3hubqmk.scala:43:5 ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798128
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.map(x => if (x == 0) 0 else x)\n        val guessScores\
    \ = guess.map(x => if (x == 0) 0 else x)\n        val diffs = gameScores zip guessScores\n\
    \        diffs.map(x => if (x._1 == x._2) 0 else abs(x._1 - x._2))\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.map(x => if (x == 0) 0 else x)\n        val guessScores\
    \ = guess.map(x => if (x == 0) 0 else x)\n        val gameScoreCount = gameScores.distinct\n\
    \        val guessScoreCount = guessScores.distinct\n        val gameScoreCountMap\
    \ = gameScoreCount.toMap\n        val guessScoreCountMap = guessScoreCount.toMap\n\
    \        val gameScoreCountMapKeys = gameScoreCountMap.keys\n        val guessScoreCountMapKeys\
    \ = guessScoreCountMap.keys\n        val gameScoreCountMapValues = gameScoreCountMap.values.toList\n\
    \        val guessScoreCountMapValues = guessScoreCountMap.values.toList\n   \
    \     val gameScoreCountMapValueCount = gameScoreCountMapValues.size\n       \
    \ val guessScoreCountMapValueCount = guessScoreCountMapValues.size\n        val\
    \ gameScoreCountMapValueCountMap = gameScoreCountMapValues.toMap\n        val\
    \ guessScoreCountMapValueCountMap = guessScoreCountMapValues.toMap\n        val\
    \ gameScoreCountMapValueCountMapKeys = gameScoreCountMapValueCountMap.keys\n \
    \       val guessScoreCountMapValueCountMapKeys = guessScoreCountMapValueCountMap.keys\n\
    \        val gameScoreCountMapValueCountMapValues = gameScoreCountMapValueCountMap.values.toList\n\
    \        val guessScoreCountMapValueCountMapValues = guessScoreCountMapValueCountMap.values.toList\n\
    \        val gameScoreCountMapValueCountMapValueCount = gameScoreCountMapValueCountMapValues.size\n\
    \        val guessScoreCountMapValueCountMapValueCount = guessScoreCountMapValueCountMapValues.size\n\
    \        val gameScoreCountMapValueCountMapValueCountMap = gameScoreCountMapValueCountMapValues.toMap\n\
    \        val guessScoreCountMapValueCountMapValueCountMap = guessScoreCountMapValueCountMapValues.toMap\n\
    \        val gameScoreCountMapValueCountMapValueCountMapKeys = gameScoreCountMapValueCountMapValueCountMap.keys\n\
    \        val guessScoreCountMapValueCountMapValueCountMapKeys = guessScoreCountMapValueCountMapValueCountMap.keys\n\
    \        val gameScoreCountMapValueCountMapValueCountMapValues = gameScoreCountMapValueCountMapValueCountMapValues.toList\n\
    \        val guessScoreCountMapValueCountMapValueCountMapValues = guessScoreCountMapValueCountMapValueCountMapValues.toList\n\
    \        val gameScoreCountMapValueCountMapValueCountMapValueCount = gameScoreCountMapValueCountMap\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpwhr30q4o.scala:19:52 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mgameScoreCountMap\e[0m =\
    \ gameScoreCount.toMap\n\e[31m\e[31m   |\e[0m                                \
    \                    ^\e[0m\n\e[31m   |\e[0m                                 \
    \      Cannot prove that Long <:< (K, V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m   \
    \                                    where:    K is a type variable\n\e[31m  \
    \ |\e[0m                                                 V is a type variable\n\
    \e[31m   |\e[0m                                       .\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpwhr30q4o.scala:20:54 -----------------------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mguessScoreCountMap\e[0m = guessScoreCount.toMap\n\
    \e[31m\e[31m   |\e[0m                                                      ^\e\
    [0m\n\e[31m   |\e[0m                                       Cannot prove that Long\
    \ <:< (K, V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                               \
    \        where:    K is a type variable\n\e[31m   |\e[0m                     \
    \                            V is a type variable\n\e[31m   |\e[0m           \
    \                            .\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpwhr30q4o.scala:39:64\
    \ ---------------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreCountMapValueCountMapValueCountMapValues\e[0m = gameScoreCountMapValueCountMapValueCountMapValues.toList\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \        ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mgameScoreCountMapValueCountMapValueCountMapValues\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpwhr30q4o.scala:40:65\
    \ ---------------------------\e[0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessScoreCountMapValueCountMapValueCountMapValues\e[0m = guessScoreCountMapValueCountMapValueCountMapValues.toList\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \         ^\e[0m\n\e[31m   |"
  stdout: ''
  timestamp: 1659798133
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameLen = game.size\n        val guessLen = guess.size\n        val\
    \ result = new Array[Long](guessLen)\n        var i = 0\n        var j = 0\n \
    \       var k = 0\n        var gameScore = 0\n        var guessScore = 0\n   \
    \     while (i < gameLen && j < guessLen) {\n            if (game(i) == guess(j))\
    \ {\n                gameScore += 1\n                i += 1\n                j\
    \ += 1\n            } else if (game(i) < guess(j)) {\n                gameScore\
    \ += 1\n                i += 1\n            } else {\n                guessScore\
    \ += 1\n                j += 1\n            }\n        }\n        if (i == gameLen)\
    \ {\n            result(k) = gameScore\n        } else if (j == guessLen) {\n\
    \            result(k) = guessScore\n        } else {\n            result(k) =\
    \ abs(gameScore - guessScore)\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoknx6org.scala:43:8\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798133
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameList = game.map(x => if (x == 0) 0 else x)\n        val guessList\
    \ = guess.map(x => if (x == 0) 0 else x)\n        val gameLength = game.length\n\
    \        val guessLength = guess.length\n        val gameScores = gameList.zipWithIndex.map(x\
    \ => (x._2, x._1))\n        val guessScores = guessList.zipWithIndex.map(x =>\
    \ (x._2, x._1))\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap\
    \ = guessScores.toMap\n        val gameScoreList = new mutable.ListBuffer[Long]()\n\
    \        val guessScoreList = new mutable.ListBuffer[Long]()\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n        for\
    \ (i <- 0 until guessLength) {\n            val guessScore = guessScoreMap.get(i)\n\
    \            val gameScore = gameScoreMap.get(i)\n            val diff = guessScore\
    \ - gameScore\n            if (gameScore != 0) {\n                gameScoreList.add(gameScore)\n\
    \                guessScoreList.add(guessScore)\n            }\n            guessScoreMap\
    \ += i -> diff\n            gameScoreMap += i -> diff\n        }\n        guessScoreList.map(x\
    \ => Math.abs(x))\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpm4smru0b.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreMap is already defined as \e[33mvalue\e[0m \e[35mgameScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpm4smru0b.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessScoreMap\e[0m = guessScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mguessScoreMap is already defined as \e[33mvalue\e[0m \e[35mguessScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpm4smru0b.scala:23:32 ------------------------\e[0m\e[0m\n\
    \e[31m23 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m               \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm4smru0b.scala:24:33\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mguessScoreList\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                                 ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpm4smru0b.scala:30:34 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            \e[33mval\e[0m \e[36mdiff\e[0m = guessScore\
    \ - gameScore\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue - is not a member of Option[Long], but could be made avail"
  stdout: ''
  timestamp: 1659798138
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.zipWithIndex.map { case (score, index) => score ->\
    \ index }.toMap\n        val guessesScores = guess.zipWithIndex.map { case (score,\
    \ index) => score -> index }.toMap\n        val guessesWithScores = guess.zip(game).map\
    \ { case (guess, score) => guess -> score }.toMap\n        val guessesWithIndexes\
    \ = guess.zip(game).map { case (guess, score) => guess -> index }.toMap\n    \
    \    val guessesWithIndexesWithScores = guess.zip(game).map { case (guess, score)\
    \ => guess -> index -> score }.toMap\n        val guessesWithIndexesWithScores\
    \ = guess.zip(game).map { case (guess, score) => guess -> index -> score }.toMap\n\
    \        val guessesWithIndexesWithScores = guess.zip(game).map { case (guess,\
    \ score) => guess -> index -> score }.toMap\n        val guessesWithIndexesWithScores\
    \ = guess.zip(game).map { case (guess, score) => guess -> index -> score }.toMap\n\
    \        val guessesWithIndexesWithScores = guess.zip(game).map { case (guess,\
    \ score) => guess -> index -> score }.toMap\n        val guessesWithIndexesWithScores\
    \ = guess.zip(game).map { case (guess, score) => guess -> index -> score }.toMap\n\
    \        val guessesWithIndexesWithScores = guess.zip(game).map { case (guess,\
    \ score) => guess -> index -> score }.toMap\n        val guessesWithIndexesWithScores\
    \ = guess.zip(game).map { case (guess, score) => guess -> index -> score }.toMap\n\
    \        val guessesWithIndexesWithScores = guess.zip(game).map { case (guess,\
    \ score) => guess -> index -> score }.toMap\n        val guessesWithIndexesWithScores\
    \ = guess.zip(game).map { case (guess, score) => guess -> index -> score }.toMap\n\
    \        val guessesWithIndexesWithScores = guess.zip(game).map { case (guess,\
    \ score) => guess -> index -> score }.toMap\n        val guessesWithIndexesWithScores\
    \ = guess.zip(game).map { case (guess, score) => guess -> index -> score }.toMap\n\
    \        val guessesWithIndexesWithScores = guess.zip(game).map { case (guess,\
    \ score) => guess \n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmt5v7fef.scala:41:0 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmt5v7fef.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessesWithIndexesWithScores\e[0m = guess.zip(game).map { \e[33mcase\e\
    [0m (guess, score) => guess -> index -> score }.toMap\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesWithIndexesWithScores is already defined as \e[33mvalue\e\
    [0m \e[35mguessesWithIndexesWithScores\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmt5v7fef.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mguessesWithIndexesWithScores\e\
    [0m = guess.zip(game).map { \e[33mcase\e[0m (guess, score) => guess -> index ->\
    \ score }.toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesWithIndexesWithScores is already defined as \e[33mvalue\e\
    [0m \e[35mguessesWithIndexesWithScores\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmt5v7fef.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mguessesWithIndexesWithScores\e\
    [0m = guess.zip(game).map { \e[33mcase\e[0m (guess, score) => guess -> index ->\
    \ score }.toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesWithIndexesWithScores is already defined as \e[33mvalue\e\
    [0m \e[35mguessesWithIndexesWithScores\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in t"
  stdout: ''
  timestamp: 1659798139
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.map(x => if (x == 0) 0 else x)\n        val guessScores\
    \ = guess.map(x => if (x == 0) 0 else x)\n        val diffs = gameScores zip guessScores\n\
    \        val correct = diffs.filter(x => x._1 == x._2).length\n        val wrong\
    \ = diffs.filter(x => x._1 != x._2).length\n        val result = new Array[Long](guess.length)\n\
    \        for (i<- 0 until guess.length) result(i) = if (correct == 0) 0 else Math.abs(guess(i)\
    \ - game(i))\n        result\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong,\
    \ -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0y80x0lo.scala:22:8\
    \ ---------------------\e[0m\e[0m\n\e[31m22 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798137
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameLen = game.size\n        val guessLen = guess.size\n        val\
    \ result = new Array[Long](guessLen)\n        var i = 0\n        while (i < guessLen)\
    \ {\n            var j = 0\n            while (j < gameLen) {\n              \
    \  if (game(j) == guess(i)) {\n                    result(j) = 0\n           \
    \         j++\n                } else {\n                    result(j) = abs(game(j)\
    \ - guess(i))\n                    j++\n                }\n            }\n   \
    \         i += 1\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpa1a_g_dy.scala:24:23 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                    j++\n\e[31m\e[31m   |\e[0m      \
    \                 ^\e[0m\n\e[31m   |\e[0m                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error:\
    \ /tmp/tmpa1a_g_dy.scala:27:23 ---------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m                    j++\n\e[31m\e[31m   |\e[0m                       ^\e\
    [0m\n\e[31m   |\e[0m                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa1a_g_dy.scala:32:8\
    \ ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798138
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameLen = game.length\n        val guessLen = guess.length\n       \
    \ val result = new mutable.ArrayList[Long]()\n        var i = 0\n        var j\
    \ = 0\n        var k = 0\n        var diff = 0\n        while (i < gameLen &&\
    \ j < guessLen) {\n            if (game(i) == guess(j)) {\n                result.add(game(i))\n\
    \                i += 1\n                j += 1\n            } else if (game(i)\
    \ < guess(j)) {\n                result.add(game(i))\n                i += 1\n\
    \            } else {\n                result.add(guess(j))\n                j\
    \ += 1\n            }\n        }\n        while (i < gameLen) {\n            result.add(game(i))\n\
    \            i += 1\n        }\n        while (j < guessLen) {\n            result.add(guess(j))\n\
    \            j += 1\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp46r2g7kf.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ArrayList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798133
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.zipWithIndex.map{ case (score, index) => score }.toList\n\
    \        val guessesScores = guess.zipWithIndex.map{ case (score, index) => score\
    \ }.toList\n        val gameScoreMap = gameScores.groupBy(x => x).mapValues(_.size)\n\
    \        val guessesScoreMap = guessesScores.groupBy(x => x).mapValues(_.size)\n\
    \        val gameScoreList = gameScoreMap.mapValues(_.toList).values.toList\n\
    \        val guessesScoreList = guessesScoreMap.mapValues(_.toList).values.toList\n\
    \        val gameScores = gameScoreList.zip(guessesScoreList).map{ case (gameScore,\
    \ guessesScore) =>\n            val gameScoreDiff = gameScore - guessesScore\n\
    \            val gameScoreDiffAbs = Math.abs(gameScoreDiff)\n            gameScoreDiffAbs\n\
    \        }\n        gameScores.toList.map(x => x._1).toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcuqm3t99.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = gameScoreList.zip(guessesScoreList).map{\
    \ \e[33mcase\e[0m (gameScore, guessesScore) =>\n\e[31m\e[31m   |\e[0m        ^\e\
    [0m\n\e[31m   |\e[0mgameScores is already defined as \e[33mvalue\e[0m \e[35mgameScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m22 |\e[0m         \
    \   \e[33mval\e[0m \e[36mgameScoreDiff\e[0m = gameScore - guessesScore\n\e[31m23\
    \ |\e[0m            \e[33mval\e[0m \e[36mgameScoreDiffAbs\e[0m = Math.abs(gameScoreDiff)\n\
    \e[31m24 |\e[0m            gameScoreDiffAbs\n\e[31m25 |\e[0m        }\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpcuqm3t99.scala:19:53 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = gameScoreMap.mapValues(_.toList).values.toList\n\
    \e[31m\e[31m   |\e[0m                                                   ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m           value toList is not a member of Int - did you mean\
    \ _$3.toInt?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcuqm3t99.scala:20:59\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mguessesScoreList\e[0m = guessesScoreMap.mapValues(_.toList).values.toList\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \ ^^^^^^^^\e[0m\n\e[31m   |\e[0m           value toList is not a member of Int\
    \ - did you mean _$4.toInt?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcuqm3t99.scala:26:37\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        gameScores.toList.map(\e\
    [36mx\e[0m => x._1).toList\n\e[31m\e[31m   |\e[0m                            \
    \       ^^^^\e[0m\n\e[31m   |\e[0m                                   value _1\
    \ is not a member of Long\n4 errors found\n"
  stdout: ''
  timestamp: 1659798139
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val guesses = guess.toSet\n        val scores = game.toSet\n        val\
    \ results = new mutable.ArrayList[Long]()\n        for(score <- scores) {\n  \
    \          val guess = guesses.find(_ == score)\n            if (guess == None)\
    \ {\n                results.add(score)\n            } else {\n              \
    \  val diff = guess - score\n                if (diff > 0) results.add(diff) else\
    \ results.add(Math.abs(diff))\n            }\n        }\n        results.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpihiht2f9.scala:17:26 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresults\e[0m = \e[33mnew\e\
    [0m mutable.ArrayList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m              \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpihiht2f9.scala:23:33\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m                \e[33mval\e\
    [0m \e[36mdiff\e[0m = guess - score\n\e[31m\e[31m   |\e[0m                   \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue - is not a member of Option[Long],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659798140
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val guesses = guess.map(x => Math.abs(x - game))\n        val correct =\
    \ game.zip(guesses).filter(_._1 == 0).map(_._2)\n        val wrong = game.zip(guesses).filter(_._1\
    \ == 0).map(_._2)\n        correct.toList ++ wrong.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpq33kg2jd.scala:15:48 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mguesses\e[0m = guess.map(\e\
    [36mx\e[0m => Math.abs(x - game))\n\e[31m\e[31m   |\e[0m                     \
    \                         ^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35m-\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\
    \e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m\
    \   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x:\
    \ Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\
    \e[31m   |\e[0mmatch arguments ((game : List[Long]))\n1 error found\n"
  stdout: ''
  timestamp: 1659798136
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameSize = game.size\n        val guessSize = guess.size\n        val\
    \ result = new Array[Long](guessSize)\n        var i = 0\n        while (i < guessSize)\
    \ {\n            val gameScore = game(i)\n            val guessScore = guess(i)\n\
    \            val diff = guessScore - gameScore\n            if (diff < 0) {\n\
    \                val temp = gameScore\n                gameScore = guessScore\n\
    \                guessScore = temp\n                diff = -diff\n           \
    \ }\n            result(i) = diff\n            i += 1\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpdzed679l.scala:25:26 -----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                gameScore = guessScore\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \         Reassignment to val gameScore\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmpdzed679l.scala:26:27 -----------------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m                guessScore = temp\n\e[31m\e[31m   |\e[0m \
    \               ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val guessScore\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpdzed679l.scala:27:21\
    \ -----------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                diff\
    \ = -diff\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                Reassignment to val diff\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpdzed679l.scala:32:8 ---------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\e[31m   |\e[0m\
    \        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798081
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val guesses = guess.map(x => Math.abs(x - game))\n        val correct =\
    \ game.zip(guesses).filter(_._1 == 0).map(_._2)\n        val wrong = game.zip(guesses).filter(_._1\
    \ == 1).map(_._2)\n        correct.toList ++ wrong.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp883bty46.scala:15:48 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mguesses\e[0m = guess.map(\e\
    [36mx\e[0m => Math.abs(x - game))\n\e[31m\e[31m   |\e[0m                     \
    \                         ^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35m-\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\
    \e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m\
    \   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x:\
    \ Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\
    \e[31m   |\e[0mmatch arguments ((game : List[Long]))\n1 error found\n"
  stdout: ''
  timestamp: 1659798137
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap =\
    \ guessScores.toMap\n        val gameScoreKeys = gameScoreMap.keys\n        val\
    \ guessScoreKeys = guessScoreMap.keys\n        val gameScoreValues = gameScoreMap.values.toList\n\
    \        val guessScoreValues = guessScoreMap.values.toList\n        val gameScoreKeySet\
    \ = gameScoreKeys.toSet\n        val guessScoreKeySet = guessScoreKeys.toSet\n\
    \        val gameScoreValueSet = gameScoreValues.toSet\n        val guessScoreValueSet\
    \ = guessScoreValues.toSet\n        val gameScoreKeySetSize = gameScoreKeySet.size\n\
    \        val guessScoreKeySetSize = guessScoreKeySet.size\n        val gameScoreValueSetSize\
    \ = gameScoreValueSet.size\n        val guessScoreValueSetSize = guessScoreValueSet.size\n\
    \        val gameScoreKeySetSize = gameScoreKeySet.size\n        val guessScoreKeySetSize\
    \ = guessScoreKeySet.size\n        val gameScoreValueSetSize = gameScoreValueSet.size\n\
    \        val guessScoreValueSetSize = guessScoreValueSet.size\n        val gameScoreKeySetSize\
    \ = gameScoreKeySet.size\n        val guessScoreKeySetSize = guessScoreKeySet.size\n\
    \        val gameScoreValueSetSize = gameScoreValueSet.size\n        val guessScoreValueSetSize\
    \ = guessScoreValueSet.size\n        val gameScoreKeySetSize = gameScoreKeySet.size\n\
    \        val guessScoreKeySetSize = guessScoreKeySet.size\n        val gameScoreValueSetSize\
    \ = gameScoreValueSet.size\n        val guessScoreValueSetSize = guessScoreValueSet.size\n\
    \        val gameScoreKeySetSize = gameScoreKeySet.size\n        val guessScoreKeySetSize\
    \ = guessScoreKeySet.size\n        val gameScoreValueSetSize = gameScoreValueSet.size\n\
    \        val guessScoreValueSetSize = guessScoreValueSet.size\n        val gameScoreKeySetSize\
    \ = gameScoreKeySet.size\n        val guessScoreKeySetSize = guessScoreKeySet.size\n\
    \        val gameScoreValueSetSize = gameScoreValueSet.size\n        val guessScoreValueSetSize\
    \ = guessScoreValueSet.size\n        val gameScoreKeySetSize = gameScoreKeySet.size\n\
    \        val guessScoreKeySetSize = guessScoreKeySet.size\n        val gameScoreValueSetSize\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp2zoagfn9.scala:53:35 ---------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m        \e[33mval\e[0m \e[36mgameScoreValueSetSize\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m\
    \   |\e[0m                                   expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2zoagfn9.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreKeySetSize\e[0m = gameScoreKeySet.size\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mgameScoreKeySetSize\
    \ is already defined as \e[33mvalue\e[0m \e[35mgameScoreKeySetSize\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp2zoagfn9.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mguessScoreKeySetSize\e[0m = guessScoreKeySet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreKeySetSize is already defined as \e[33mvalue\e[0m\
    \ \e[35mguessScoreKeySetSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp2zoagfn9.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgameScoreValueSetSize\e\
    [0m = gameScoreValueSet.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreValueSetSize is already defined as \e[33mvalue\e\
    [0m \e[35mgameScoreValueSetSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2zoagfn9.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mguessScoreValueSetSize\e\
    [0m = guessScoreValueSet.si"
  stdout: ''
  timestamp: 1659798010
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val guesses = guess.toList\n        val scores = game.toList\n        val\
    \ guesses_count = guesses.size\n        val scores_count = scores.size\n     \
    \   val result = new Array[Long](guesses_count)\n        var i = 0\n        while\
    \ (i < guesses_count) {\n            var j = 0\n            while (j < scores_count)\
    \ {\n                if (scores(j) == guesses(i)) {\n                    result(i)\
    \ = j\n                    j++\n                }\n                else {\n  \
    \                  result(i) = abs(scores(j) - guesses(i))\n                 \
    \   j++\n                }\n            }\n            i++\n        }\n      \
    \  result\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpee0zmug6.scala:26:23 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    j++\n\e[31m\e[31m   |\e[0m      \
    \                 ^\e[0m\n\e[31m   |\e[0m                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error:\
    \ /tmp/tmpee0zmug6.scala:30:23 ---------------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m                    j++\n\e[31m\e[31m   |\e[0m                       ^\e\
    [0m\n\e[31m   |\e[0m                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpee0zmug6.scala:33:15\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m            i++\n\e[31m\e\
    [31m   |\e[0m               ^\e[0m\n\e[31m   |\e[0m               expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpee0zmug6.scala:35:8 ---------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Found:    (result : Array[Long])\n\e[31m   |\e[0m        Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798140
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.zipWithIndex.map(x => x._2)\n        val guessesScores\
    \ = guess.zipWithIndex.map(x => x._2)\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessesScoreMap = guessesScores.toMap\n        val result = guessesScoreMap.map\
    \ { case (guess, score) =>\n            val gameScore = gameScoreMap.get(guess)\n\
    \            if (gameScore == null) {\n                0\n            } else {\n\
    \                Math.abs(score - gameScore)\n            }\n        }\n     \
    \   result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpbw5bm3n6.scala:17:43 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.toMap\n\
    \e[31m\e[31m   |\e[0m                                           ^\e[0m\n\e[31m\
    \   |\e[0m                                        Cannot prove that Int <:< (K,\
    \ V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                       \
    \ where:    K is a type variable\n\e[31m   |\e[0m                            \
    \                      V is a type variable\n\e[31m   |\e[0m                 \
    \                       .\n\e[31m\e[31m-- Error: /tmp/tmpbw5bm3n6.scala:18:49\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m18 |\e[0m       \
    \ \e[33mval\e[0m \e[36mguessesScoreMap\e[0m = guessesScores.toMap\n\e[31m\e[31m\
    \   |\e[0m                                                 ^\e[0m\n\e[31m   |\e\
    [0m                                        Cannot prove that Int <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                        where: \
    \   K is a type variable\n\e[31m   |\e[0m                                    \
    \              V is a type variable\n\e[31m   |\e[0m                         \
    \               .\n2 errors found\n"
  stdout: ''
  timestamp: 1659798141
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameLen = game.length\n        val guessLen = guess.length\n       \
    \ val result = new Array[Long](guessLen)\n        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => index -> score }.toMap\n        val gameScore = gameScores.toSeq.sortBy(_._1).reverse.head._2\n\
    \        val guessScore = guessScores.toSeq.sortBy(_._1).reverse.head._2\n   \
    \     var i = 0\n        while (i < guessLen) {\n            val guess = guess(i)\n\
    \            val gameScore = gameScores.toSeq.sortBy(_._1).reverse.head._2\n \
    \           val guessScore = guessScores.toSeq.sortBy(_._1).reverse.head._2\n\
    \            val diff = Math.abs(guess - gameScore)\n            val diff2 = Math.abs(guess\
    \ - guessScore)\n            if (diff == 0) {\n                result(i) = diff2\n\
    \            } else {\n                result(i) = diff\n            }\n     \
    \       i += 1\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpuwn18wj2.scala:24:24 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e[36mguess\e[0m = guess(i)\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvalue\e[0m \e[35mguess\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuwn18wj2.scala:36:8 ---------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\e[31m   |\e[0m\
    \        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798141
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.zipWithIndex.map { case (score, index) => score ->\
    \ index }.toMap\n        val guessScores = guess.zipWithIndex.map { case (score,\
    \ index) => score -> index }.toMap\n        val guessesWithScores = guess.zip(game).map\
    \ { case (guess, score) => (guess, score) }\n        val guessesWithScoreAndIndex\
    \ = guessesWithScores.zipWithIndex.map { case (guess, score, index) => (guess,\
    \ score, index) }\n        val guessesWithScoreAndIndexSorted = guessesWithScoreAndIndex.sortBy(_._2)\n\
    \        val guessesWithScoreAndIndexSortedWithIndex = guessesWithScoreAndIndexSorted.zipWithIndex.map\
    \ { case (guess, score, index) => (guess, score, index._2) }\n        val guessesWithScoreAndIndexSortedWithIndexSorted\
    \ = guessesWithScoreAndIndexSortedWithIndex.sortBy(_._2)\n        val guessesWithScoreAndIndexSortedWithIndexSortedWithIndex\
    \ = guessesWithScoreAndIndexSortedWithIndex.zipWithIndex.map { case (guess, score,\
    \ index) => (guess, score, index._2) }\n        val guessesWithScoreAndIndexSortedWithIndexSortedWithIndexSorted\
    \ = guessesWithScoreAndIndexSortedWithIndexSortedWithIndex.sortBy(_._2)\n    \
    \    val guessesWithScoreAndIndexSortedWithIndexSortedWithIndexSortedWithIndex\
    \ = guessesWithScoreAndIndexSortedWithIndexSortedWithIndexSortedWithIndex.zipWithIndex.map\
    \ { case (guess, score, index) => (guess, score, index._2) }\n        val guessesWithScoreAndIndexSortedWithIndexSortedWithIndexSortedWithIndexSorted\
    \ = guessesWithScoreAndIndexSortedWithIndexSortedWithIndexSortedWithIndex.sortBy(_._2)\n\
    \        val guessesWithScoreAndIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex\
    \ = guessesWithScoreAndIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex.zipWithIndex.map\
    \ { case (guess, score, index) => (guess, score, index._2) }\n        val guessesWithScoreAndIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSorted\
    \ = guessesWithScoreAndIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex.sortBy(_._2)\n\
    \        val guessesWithScoreAndIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr62ww6dx.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpr62ww6dx.scala:19:82\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \ \e[33mval\e[0m \e[36mguessesWithScoreAndIndexSorted\e[0m = guessesWithScoreAndIndex.sortBy(_._2)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                          ^\e[0m\n\e[31m   |\e[0mNo implicit Ordering defined\
    \ for Any..\n\e[31m   |\e[0mI found:\n\e[31m   |\e[0m\n\e[31m   |\e[0m    scala.math.Ordering.comparatorToOrdering[\e\
    [35mAny\e[0m](\n\e[31m   |\e[0m      /* missing */summon[java.util.Comparator[Any]]\n\
    \e[31m   |\e[0m    )\n\e[31m   |\e[0m\n\e[31m   |\e[0mBut no implicit values were\
    \ found that match type java.util.Comparator[Any].\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpr62ww6dx.scala:24:84 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mguessesWithScoreAndIndexSortedWithIndexSortedWithIndexSortedWithIndex\e\
    [0m = guessesWithScoreAndIndexSortedWithIndexSortedWithIndexSortedWithIndex.zipWithIndex.map\
    \ { \e[33mcase\e[0m (guess, score, index) => (guess, score, index._2) }\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                    ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mguessesWithScoreAndIndexSortedWithIndexSortedWithIndexSortedWithIndex\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpr62ww6dx.scala:26:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessesWithScoreAndIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex\e\
    [0m = guessesWithScoreAndIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex.zipWithIndex.map\
    \ { \e[33mcase\e[0m (guess, score, index) => (guess, score, index._2) }\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \              "
  stdout: ''
  timestamp: 1659798141
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val diffs = guessesScores.zip(gameScores).map { case (guess, game)\
    \ => math.abs(guess - game) }\n        diffs.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798142
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap =\
    \ guessScores.toMap\n        val gameScoreKeys = gameScoreMap.keySet\n       \
    \ val guessScoreKeys = guessScoreMap.keySet\n        val gameScoreValues = gameScoreMap.values.toList\n\
    \        val guessScoreValues = guessScoreMap.values.toList\n        val gameScoreKeysSet\
    \ = gameScoreKeys.toSet\n        val guessScoreKeysSet = guessScoreKeys.toSet\n\
    \        val gameScoreValuesSet = gameScoreValues.toSet\n        val guessScoreValuesSet\
    \ = guessScoreValues.toSet\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val guessScoreKeysSetSize = guessScoreKeysSet.size\n        val gameScoreValuesSetSize\
    \ = gameScoreValuesSet.size\n        val guessScoreValuesSetSize = guessScoreValuesSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val guessScoreKeysSetSize\
    \ = guessScoreKeysSet.size\n        val gameScoreValuesSetSize = gameScoreValuesSet.size\n\
    \        val guessScoreValuesSetSize = guessScoreValuesSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val guessScoreKeysSetSize = guessScoreKeysSet.size\n\
    \        val gameScoreValuesSetSize = gameScoreValuesSet.size\n        val guessScoreValuesSetSize\
    \ = guessScoreValuesSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val guessScoreKeysSetSize = guessScoreKeysSet.size\n        val gameScoreValuesSetSize\
    \ = gameScoreValuesSet.size\n        val guessScoreValuesSetSize = guessScoreValuesSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val guessScoreKeysSetSize\
    \ = guessScoreKeysSet.size\n        val gameScoreValuesSetSize = gameScoreValuesSet.size\n\
    \        val guessScoreValuesSetSize = guessScoreValuesSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val guessScoreKeysSetSize = guessScoreKeysSet.size\n\
    \        val gameScoreValuesSetSize = gameScoreValuesSet.size\n        val guessScoreValuesSetSize\
    \ = guessScoreValuesSet.size\n        val gameScoreKey\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpndm30rbi.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpndm30rbi.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreKeysSetSize\e[0m = gameScoreKeysSet.size\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mgameScoreKeysSetSize is already defined as \e[33mvalue\e[0m \e[35mgameScoreKeysSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpndm30rbi.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mguessScoreKeysSetSize\e[0m = guessScoreKeysSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreKeysSetSize is already defined as \e[33mvalue\e\
    [0m \e[35mguessScoreKeysSetSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpndm30rbi.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgameScoreValuesSetSize\e\
    [0m = gameScoreValuesSet.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreValuesSetSize is already defined as \e[33mvalue\e\
    [0m \e[35mgameScoreValuesSetSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpndm30rbi.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mguessScoreValuesSetSize\e\
    [0m = guessScoreValuesSet.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreValuesSetSize is already defined as \e[33mvalue\e\
    [0m \e[35mguessScoreValuesSetSize\e[0m"
  stdout: ''
  timestamp: 1659798142
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val guesses = guess.toSet\n        val scores = game.toSet\n        val\
    \ result = new mutable.ArrayList[Long]\n        val guessesWithScore = scores.toList.zip(guesses)\n\
    \        guessesWithScore.foreach { case (score, guess) =>\n            if (guess\
    \ == score) {\n                result.add(0)\n            } else {\n         \
    \       val difference = guess - score\n                result.add(difference)\n\
    \            }\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqgd22cl9.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ArrayList[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798140
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap =\
    \ guessScores.toMap\n        val gameScoreList = gameScoreMap.values.toList\n\
    \        val guessScoreList = guessScoreMap.values.toList\n        val gameScores\
    \ = gameScoreList.zipWithIndex.map { case (score, index) => score }\n        val\
    \ guessScores = guessScoreList.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap =\
    \ guessScores.toMap\n        val gameScoreList = gameScoreMap.values.toList\n\
    \        val guessScoreList = guessScoreMap.values.toList\n        val gameScores\
    \ = gameScoreList.zipWithIndex.map { case (score, index) => score }\n        val\
    \ guessScores = guessScoreList.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap =\
    \ guessScores.toMap\n        val gameScoreList = gameScoreMap.values.toList\n\
    \        val guessScoreList = guessScoreMap.values.toList\n        val gameScores\
    \ = gameScoreList.zipWithIndex.map { case (score, index) => score }\n        val\
    \ guessScores = guessScoreList.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap =\
    \ guessScores.toMap\n        val gameScoreList = gameScoreMap.values.toList\n\
    \        val guessScoreList = guessScoreMap.values.toList\n        val gameScores\
    \ = gameScoreList.zipWithIndex.map { case (score, index) => score }\n        val\
    \ guessScores = guessScoreList.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap =\
    \ guessScores.toMap\n        val gameScoreList = gameScoreMap.values.toList\n\
    \        val guessScoreList = guessScoreMap.values.toList\n        val gameScores\
    \ = gameScoreList.zipWithIndex.map { case (score, index) => score }\n        val\
    \ guessScores = guessScoreList.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreMap = gameScores.toMap\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnzassy11.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = gameScoreList.zipWithIndex.map\
    \ { \e[33mcase\e[0m (score, index) => score }\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScores is already defined as \e[33mvalue\e[0m \e[35mgameScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnzassy11.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mguessScores\e[0m = guessScoreList.zipWithIndex.map\
    \ { \e[33mcase\e[0m (score, index) => score }\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScores is already defined as \e[33mvalue\e[0m \e[35mguessScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnzassy11.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreMap is already defined as \e[33mvalue\e[0m \e[35mgameScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnzassy11.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mguessScoreMap\e[0m = guessScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mguessScoreMap is already defined as \e[33mvalue\e[0m \e[35mguessScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnzassy11.scala:25:12 -----------"
  stdout: ''
  timestamp: 1659798143
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val gameLen = game.size\n        val guessLen = guess.size\n        val\
    \ result = new Array[Long](guessLen)\n        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => (index, score) }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => (index, score) }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreKeys = gameScoreMap.keys\n\
    \        val guessScoreKeys = guessScoreMap.keys\n        val gameScoreValues\
    \ = gameScoreMap.values.toList\n        val guessScoreValues = guessScoreMap.values.toList\n\
    \        var i = 0\n        while (i < guessLen) {\n            val gameScore\
    \ = gameScoreValues(i)\n            val guessScore = guessScoreValues(i)\n   \
    \         val gameScoreKey = gameScoreKeys(i)\n            val guessScoreKey =\
    \ guessScoreKeys(i)\n            val gameScoreDiff = gameScore - guessScore\n\
    \            val guessScoreDiff = guessScore - gameScore\n            if (gameScoreKey\
    \ == guessScoreKey) {\n                result(i) = gameScoreDiff\n           \
    \ } else {\n                result(i) = Math.abs(gameScoreDiff)\n            }\n\
    \            i += 1\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmprr0ay__g.scala:30:31 -----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            \e[33mval\e[0m \e[36mgameScoreKey\e[0m =\
    \ gameScoreKeys(i)\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            \e[33mvalue\e[0m \e[35mgameScoreKeys\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error:\
    \ /tmp/tmprr0ay__g.scala:31:32 -----------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m            \e[33mval\e[0m \e[36mguessScoreKey\e[0m = guessScoreKeys(i)\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                           \e[33mvalue\e[0m \e[35mguessScoreKeys\e[0m\
    \ does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmprr0ay__g.scala:41:8 ---------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Found:    (result : Array[Long])\n\e[31m   |\e[0m        Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798143
