name: HumanEval_15_string_sequence
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return a string containing space-delimited numbers starting from 0 upto\
  \ n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
  \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
  0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
  0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
completions: ["        val s = mutable.StringBuilder()\n        for (i <- 0 until\
    \ n) s += i\n        s.toString", "        val result = new StringBuilder\n  \
    \      for (i <- 0 until n) {\n            result.append(i).append(\" \")\n  \
    \      }\n        return result.toString", "        val result = new StringBuilder\n\
    \        for (i <- 0 until n) {\n            result.append(i).append(\" \")\n\
    \        }\n        result.toString", "        var s = \"\"\n        for (i <-\
    \ 0 until n) {\n            s += i\n        }\n        s", "        val result\
    \ = new StringBuilder\n        val nums = Range(0, n).map(i => i.toString)\n \
    \       val spaces = nums.map(i => \" \").mkString\n        val spacedNums = nums.map(i\
    \ => i + spaces)\n        spacedNums.foreach(i => result.append(i).append(\" \"\
    ))\n        result.toString", "        val result = new StringBuilder\n      \
    \  for (i <- 0 until n) {\n            result.append(i).append(\" \")\n      \
    \  }\n        result.toString", "        val s = mutable.StringBuilder()\n   \
    \     for (i <- 0 until n) {\n            s += i\n        }\n        s.toString()",
  "        val result = new StringBuilder\n        for (i <- 0 until n) {\n      \
    \      result.append(i).append(\" \")\n        }\n        return result.toString",
  "        var result = \"\"\n        for (i <- 0 until n) {\n            result +=\
    \ i\n            result += \" \"\n        }\n        result", "        var result\
    \ = \"\"\n        for (i <- 0 until n) {\n            result += i\n          \
    \  result += \" \"\n        }\n        return result", "        var result = \"\
    \"\n        for (i <- 0 until n) {\n            result += i\n            result\
    \ += \" \"\n        }\n        result", "        val result = new StringBuilder\n\
    \        val digits = scala.collection.mutable.ArrayBuffer.fill(n / 10)(0)\n \
    \       val remainder = n % 10\n        digits.reverse.foreach(x => result.append(x))\n\
    \        result.append(remainder)\n        result.toString", "        val s =\
    \ mutable.StringBuilder()\n        for (i <- 0 until n) s += i\n        s.toString()",
  "        val result = new StringBuilder\n        for (i <- 0 until n) {\n      \
    \      result.append(i).append(\" \")\n        }\n        return result.toString()",
  "        var result = \"\"\n        for (i <- 0 until n) {\n            result +=\
    \ i\n            result += \" \"\n        }\n        return result", "       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s += i\n        }\n\
    \        s", "        val result = new StringBuilder\n        for(i <- 0 until\
    \ n) result.append(i).append(\" \")\n        result.toString()", "        val\
    \ s = mutable.StringBuilder()\n        for (i <- 0 until n) {\n            s +=\
    \ i\n        }\n        s.toString()", "        var s = \"\"\n        for (i <-\
    \ 0 until n) {\n            s += i\n        }\n        s", "        var result\
    \ = \"\"\n        for (i <- 0 until n) {\n            result += i\n          \
    \  result += \" \"\n        }\n        return result"]
stop_tokens:
- "\n    }\n"
