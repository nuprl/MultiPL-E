language: scala
name: HumanEval_126_is_sorted
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        var i = 0\n       \
    \ var j = 0\n        var isSorted = true\n        while (i < lst.size) {\n   \
    \         if (lst(i) > lst(j)) {\n                isSorted = false\n         \
    \       break\n            }\n            i += 1\n            j += 1\n       \
    \ }\n        return isSorted\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2dx0tdwv.scala:23:16 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(!set.contains(lst(i))) {\n\
    \                set.add(lst(i))\n                return true\n            }\n\
    \        }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv4grzl1t.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800768
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val hashSet = mutable.HashSet[Long]()\n\
    \        val hashSet2 = mutable.HashSet[Long]()\n        val hashSet3 = mutable.HashSet[Long]()\n\
    \        val hashSet4 = mutable.HashSet[Long]()\n        val hashSet5 = mutable.HashSet[Long]()\n\
    \        val hashSet6 = mutable.HashSet[Long]()\n        val hashSet7 = mutable.HashSet[Long]()\n\
    \        val hashSet8 = mutable.HashSet[Long]()\n        val hashSet9 = mutable.HashSet[Long]()\n\
    \        val hashSet10 = mutable.HashSet[Long]()\n        val hashSet11 = mutable.HashSet[Long]()\n\
    \        val hashSet12 = mutable.HashSet[Long]()\n        val hashSet13 = mutable.HashSet[Long]()\n\
    \        val hashSet14 = mutable.HashSet[Long]()\n        val hashSet15 = mutable.HashSet[Long]()\n\
    \        val hashSet16 = mutable.HashSet[Long]()\n        val hashSet17 = mutable.HashSet[Long]()\n\
    \        val hashSet18 = mutable.HashSet[Long]()\n        val hashSet19 = mutable.HashSet[Long]()\n\
    \        val hashSet20 = mutable.HashSet[Long]()\n        val hashSet21 = mutable.HashSet[Long]()\n\
    \        val hashSet22 = mutable.HashSet[Long]()\n        val hashSet23 = mutable.HashSet[Long]()\n\
    \        val hashSet24 = mutable.HashSet[Long]()\n        val hashSet25 = mutable.HashSet[Long]()\n\
    \        val hashSet26 = mutable.HashSet[Long]()\n        val hashSet27 = mutable.HashSet[Long]()\n\
    \        val hashSet28 = mutable.HashSet[Long]()\n        val hashSet29 = mutable.HashSet[Long]()\n\
    \        val hashSet30 = mutable.HashSet[Long]()\n        val hashSet31 = mutable.HashSet[Long]()\n\
    \        val hashSet32 = mutable.HashSet[Long]()\n        val hashSet33 = mutable.HashSet[Long]()\n\
    \        val hashSet34 = mutable.HashSet[Long]()\n        val hashSet35 = mutable.HashSet[Long]()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mhashSet\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mhashSet2\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:19:23 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mhashSet3\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:20:23 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mhashSet4\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mhashSet5\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:22:23 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mhas"
  stdout: ''
  timestamp: 1659800770
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp6n2ksgu.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        var i = 0\n       \
    \ var j = 1\n        var k = 0\n        var flag = true\n        while(i < lst.length\
    \ && j < lst.length) {\n            if(lst(i) < lst(j)) {\n                flag\
    \ = false\n                k = j\n                j++\n            } else {\n\
    \                k = i\n                i += 1\n            }\n        }\n   \
    \     if(flag && i == lst.length && j == lst.length) {\n            return true\n\
    \        }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpdodsopvj.scala:25:19 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                j++\n\e[31m\e[31m   |\e[0m          \
    \         ^\e[0m\n\e[31m   |\e[0m                   expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800768
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp6n2ksgu.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set += lst(i)\n    \
    \    }\n        return true\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi29jfr25.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            else {\n           \
    \     set.add(lst(i))\n            }\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpagrgk4ii.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        val list = lst.sortWith(_ < _)\n        list.foreach { x => set.add(x.toLong)\
    \ }\n        set.size == lst.size\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpssigt3xf.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800768
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val hashSet = mutable.HashSet[Long]()\n\
    \        val hashSet2 = mutable.HashSet[Long]()\n        val hashSet3 = mutable.HashSet[Long]()\n\
    \        val hashSet4 = mutable.HashSet[Long]()\n        val hashSet5 = mutable.HashSet[Long]()\n\
    \        val hashSet6 = mutable.HashSet[Long]()\n        val hashSet7 = mutable.HashSet[Long]()\n\
    \        val hashSet8 = mutable.HashSet[Long]()\n        val hashSet9 = mutable.HashSet[Long]()\n\
    \        val hashSet10 = mutable.HashSet[Long]()\n        val hashSet11 = mutable.HashSet[Long]()\n\
    \        val hashSet12 = mutable.HashSet[Long]()\n        val hashSet13 = mutable.HashSet[Long]()\n\
    \        val hashSet14 = mutable.HashSet[Long]()\n        val hashSet15 = mutable.HashSet[Long]()\n\
    \        val hashSet16 = mutable.HashSet[Long]()\n        val hashSet17 = mutable.HashSet[Long]()\n\
    \        val hashSet18 = mutable.HashSet[Long]()\n        val hashSet19 = mutable.HashSet[Long]()\n\
    \        val hashSet20 = mutable.HashSet[Long]()\n        val hashSet21 = mutable.HashSet[Long]()\n\
    \        val hashSet22 = mutable.HashSet[Long]()\n        val hashSet23 = mutable.HashSet[Long]()\n\
    \        val hashSet24 = mutable.HashSet[Long]()\n        val hashSet25 = mutable.HashSet[Long]()\n\
    \        val hashSet26 = mutable.HashSet[Long]()\n        val hashSet27 = mutable.HashSet[Long]()\n\
    \        val hashSet28 = mutable.HashSet[Long]()\n        val hashSet29 = mutable.HashSet[Long]()\n\
    \        val hashSet30 = mutable.HashSet[Long]()\n        val hashSet31 = mutable.HashSet[Long]()\n\
    \        val hashSet32 = mutable.HashSet[Long]()\n        val hashSet33 = mutable.HashSet[Long]()\n\
    \        val hashSet34 = mutable.HashSet[Long]()\n        val hashSet35 = mutable.HashSet[Long]()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mhashSet\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mhashSet2\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:19:23 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mhashSet3\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:20:23 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mhashSet4\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mhashSet5\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:22:23 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mhas"
  stdout: ''
  timestamp: 1659800770
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.length)\n            if(!set.contains(lst(i)))\n\
    \                set.add(lst(i))\n        set.size == lst.length\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2ehnx6zc.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800768
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set += lst(i)\n    \
    \    }\n        return true\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi29jfr25.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        val set2 = new mutable.HashSet[Long]()\n        val set3 = new mutable.HashSet[Long]()\n\
    \        val set4 = new mutable.HashSet[Long]()\n        val set5 = new mutable.HashSet[Long]()\n\
    \        val set6 = new mutable.HashSet[Long]()\n        val set7 = new mutable.HashSet[Long]()\n\
    \        val set8 = new mutable.HashSet[Long]()\n        val set9 = new mutable.HashSet[Long]()\n\
    \        val set10 = new mutable.HashSet[Long]()\n        val set11 = new mutable.HashSet[Long]()\n\
    \        val set12 = new mutable.HashSet[Long]()\n        val set13 = new mutable.HashSet[Long]()\n\
    \        val set14 = new mutable.HashSet[Long]()\n        val set15 = new mutable.HashSet[Long]()\n\
    \        val set16 = new mutable.HashSet[Long]()\n        val set17 = new mutable.HashSet[Long]()\n\
    \        val set18 = new mutable.HashSet[Long]()\n        val set19 = new mutable.HashSet[Long]()\n\
    \        val set20 = new mutable.HashSet[Long]()\n        val set21 = new mutable.HashSet[Long]()\n\
    \        val set22 = new mutable.HashSet[Long]()\n        val set23 = new mutable.HashSet[Long]()\n\
    \        val set24 = new mutable.HashSet[Long]()\n        val set25 = new mutable.HashSet[Long]()\n\
    \        val set26 = new mutable.HashSet[Long]()\n        val set27 = new mutable.HashSet[Long]()\n\
    \        val set28 = new mutable.HashSet[Long]()\n        val set29 = new mutable.HashSet[Long]()\n\
    \        val set30 = new mutable.HashSet[Long]()\n        val set31 = new mutable.HashSet[Long]()\n\
    \        val set32 = new mutable.HashSet[Long]()\n        val set33 = new mutable.HashSet[Long]()\n\
    \        val set34 = new mutable.HashSet[Long]()\n        val set35 = new mutable.HashSet[Long]()\n\
    \        val set36 = new mutable.HashSet[Long]()\n        val set37 = new mutable.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpra35pxy9.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpra35pxy9.scala:17:22 ------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpra35pxy9.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset2\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpra35pxy9.scala:19:23\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mset3\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpra35pxy9.scala:20:23 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m        \e[33mval\e[0m \e[36mset4\e[0m = \e[33mnew\e[0m mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpra35pxy9.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mset5\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       No"
  stdout: ''
  timestamp: 1659800771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        val set2 = new mutable.HashSet[Long]()\n        val set3 = new mutable.HashSet[Long]()\n\
    \        val set4 = new mutable.HashSet[Long]()\n        val set5 = new mutable.HashSet[Long]()\n\
    \        val set6 = new mutable.HashSet[Long]()\n        val set7 = new mutable.HashSet[Long]()\n\
    \        val set8 = new mutable.HashSet[Long]()\n        val set9 = new mutable.HashSet[Long]()\n\
    \        val set10 = new mutable.HashSet[Long]()\n        val set11 = new mutable.HashSet[Long]()\n\
    \        val set12 = new mutable.HashSet[Long]()\n        val set13 = new mutable.HashSet[Long]()\n\
    \        val set14 = new mutable.HashSet[Long]()\n        val set15 = new mutable.HashSet[Long]()\n\
    \        val set16 = new mutable.HashSet[Long]()\n        val set17 = new mutable.HashSet[Long]()\n\
    \        val set18 = new mutable.HashSet[Long]()\n        val set19 = new mutable.HashSet[Long]()\n\
    \        val set20 = new mutable.HashSet[Long]()\n        val set21 = new mutable.HashSet[Long]()\n\
    \        val set22 = new mutable.HashSet[Long]()\n        val set23 = new mutable.HashSet[Long]()\n\
    \        val set24 = new mutable.HashSet[Long]()\n        val set25 = new mutable.HashSet[Long]()\n\
    \        val set26 = new mutable.HashSet[Long]()\n        val set27 = new mutable.HashSet[Long]()\n\
    \        val set28 = new mutable.HashSet[Long]()\n        val set29 = new mutable.HashSet[Long]()\n\
    \        val set30 = new mutable.HashSet[Long]()\n        val set31 = new mutable.HashSet[Long]()\n\
    \        val set32 = new mutable.HashSet[Long]()\n        val set33 = new mutable.HashSet[Long]()\n\
    \        val set34 = new mutable.HashSet[Long]()\n        val set35 = new mutable.HashSet[Long]()\n\
    \        val set36 = new mutable.HashSet[Long]()\n        val set37 = new mutable.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpra35pxy9.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpra35pxy9.scala:17:22 ------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpra35pxy9.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset2\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpra35pxy9.scala:19:23\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mset3\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpra35pxy9.scala:20:23 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m        \e[33mval\e[0m \e[36mset4\e[0m = \e[33mnew\e[0m mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpra35pxy9.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mset5\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       No"
  stdout: ''
  timestamp: 1659800771
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        var i = 0\n       \
    \ var j = 1\n        var k = lst.length\n        while (i < k) {\n           \
    \ if (lst(i) > lst(j)) {\n                return false\n            }\n      \
    \      i += 1\n            j += 1\n        }\n        return true\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.isSorted(tmpfc2snhk0.scala:21)\n\tat Problem$.main(tmpfc2snhk0.scala:30)\n\
    \tat Problem.main(tmpfc2snhk0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800772
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(!set.contains(lst(i))) {\n\
    \                set.add(lst(i))\n            } else {\n                return\
    \ false\n            }\n        }\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgun1jtep.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800768
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        val len = lst.length\n        var i = 0\n        while (i < len) {\n\
    \            if (set.contains(lst(i))) {\n                return false\n     \
    \       }\n            set.add(lst(i))\n            i += 1\n        }\n      \
    \  return true\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu053xf1p.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800768
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val seen = mutable.HashSet[Long]()\n\
    \        val seenCount = mutable.HashMap[Long, Int]()\n        val len = lst.size\n\
    \        for(i <- 0 until len) {\n            val cur = lst(i)\n            if(!seen(cur))\
    \ {\n                seen(cur) = 1\n                seenCount(cur) = 1\n     \
    \       } else {\n                seenCount(cur) += 1\n            }\n       \
    \ }\n        val result = seenCount.values.toList.forall(x => x == len)\n    \
    \    seenCount.clear()\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm6xetcn2.scala:17:19 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mseen\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpm6xetcn2.scala:18:24 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mseenCount\e[0m = mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp6n2ksgu.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp6n2ksgu.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(!set.contains(lst(i))) {\n\
    \                set.add(lst(i))\n            } else {\n                return\
    \ false\n            }\n        }\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpywtjjgc1.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val hashSet = mutable.HashSet[Long]()\n\
    \        val hashSet2 = mutable.HashSet[Long]()\n        val hashSet3 = mutable.HashSet[Long]()\n\
    \        val hashSet4 = mutable.HashSet[Long]()\n        val hashSet5 = mutable.HashSet[Long]()\n\
    \        val hashSet6 = mutable.HashSet[Long]()\n        val hashSet7 = mutable.HashSet[Long]()\n\
    \        val hashSet8 = mutable.HashSet[Long]()\n        val hashSet9 = mutable.HashSet[Long]()\n\
    \        val hashSet10 = mutable.HashSet[Long]()\n        val hashSet11 = mutable.HashSet[Long]()\n\
    \        val hashSet12 = mutable.HashSet[Long]()\n        val hashSet13 = mutable.HashSet[Long]()\n\
    \        val hashSet14 = mutable.HashSet[Long]()\n        val hashSet15 = mutable.HashSet[Long]()\n\
    \        val hashSet16 = mutable.HashSet[Long]()\n        val hashSet17 = mutable.HashSet[Long]()\n\
    \        val hashSet18 = mutable.HashSet[Long]()\n        val hashSet19 = mutable.HashSet[Long]()\n\
    \        val hashSet20 = mutable.HashSet[Long]()\n        val hashSet21 = mutable.HashSet[Long]()\n\
    \        val hashSet22 = mutable.HashSet[Long]()\n        val hashSet23 = mutable.HashSet[Long]()\n\
    \        val hashSet24 = mutable.HashSet[Long]()\n        val hashSet25 = mutable.HashSet[Long]()\n\
    \        val hashSet26 = mutable.HashSet[Long]()\n        val hashSet27 = mutable.HashSet[Long]()\n\
    \        val hashSet28 = mutable.HashSet[Long]()\n        val hashSet29 = mutable.HashSet[Long]()\n\
    \        val hashSet30 = mutable.HashSet[Long]()\n        val hashSet31 = mutable.HashSet[Long]()\n\
    \        val hashSet32 = mutable.HashSet[Long]()\n        val hashSet33 = mutable.HashSet[Long]()\n\
    \        val hashSet34 = mutable.HashSet[Long]()\n        val hashSet35 = mutable.HashSet[Long]()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mhashSet\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mhashSet2\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:19:23 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mhashSet3\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:20:23 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mhashSet4\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mhashSet5\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:22:23 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mhas"
  stdout: ''
  timestamp: 1659800770
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set += lst(i)\n    \
    \    }\n        return true\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi29jfr25.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set += lst(i)\n    \
    \    }\n        return true\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi29jfr25.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.length){\n            if(set.contains(lst(i))){\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdl4gi0so.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800768
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        val len = lst.length\n        for(i <- 0 until len) {\n            if(set.contains(lst(i)))\
    \ {\n                return false\n            }\n            set.add(lst(i))\n\
    \        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm2p756l_.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set += lst(i)\n    \
    \    }\n        return true\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi29jfr25.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp6n2ksgu.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.length){\n            if(set.contains(lst(i))){\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxnh2aba6.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.length){\n            if(set.contains(lst(i))){\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxnh2aba6.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.length)\n            if(set.add(lst(i)))\n     \
    \           return false\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg8as319y.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800768
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        var i = 0\n       \
    \ var j = 1\n        var k = 0\n        var flag = false\n        while(i < lst.size)\
    \ {\n            while(j < lst.size && lst(i) < lst(j)) {\n                j +=\
    \ 1\n            }\n            k = j\n            while(j < lst.size && lst(i)\
    \ == lst(j)) {\n                j += 1\n            }\n            if(j == lst.size)\
    \ {\n                flag = true\n                break\n            }\n     \
    \       while(j < lst.size && lst(i) > lst(j)) {\n                j += 1\n   \
    \         }\n            if(j == lst.size) {\n                flag = true\n  \
    \              break\n            }\n            i += 1\n        }\n        if(flag)\
    \ {\n            return false\n        }\n        return true\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsc3_h7v0.scala:31:16 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsc3_h7v0.scala:38:16 ------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set += lst(i)\n    \
    \    }\n        return true\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi29jfr25.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp6n2ksgu.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.length){\n            if(set.contains(lst(i))){\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxnh2aba6.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set += lst(i)\n    \
    \    }\n        return true\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi29jfr25.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp6n2ksgu.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        val set2 = new mutable.HashSet[Long]()\n        val set3 = new mutable.HashSet[Long]()\n\
    \        val set4 = new mutable.HashSet[Long]()\n        val set5 = new mutable.HashSet[Long]()\n\
    \        val set6 = new mutable.HashSet[Long]()\n        val set7 = new mutable.HashSet[Long]()\n\
    \        val set8 = new mutable.HashSet[Long]()\n        val set9 = new mutable.HashSet[Long]()\n\
    \        val set10 = new mutable.HashSet[Long]()\n        val set11 = new mutable.HashSet[Long]()\n\
    \        val set12 = new mutable.HashSet[Long]()\n        val set13 = new mutable.HashSet[Long]()\n\
    \        val set14 = new mutable.HashSet[Long]()\n        val set15 = new mutable.HashSet[Long]()\n\
    \        val set16 = new mutable.HashSet[Long]()\n        val set17 = new mutable.HashSet[Long]()\n\
    \        val set18 = new mutable.HashSet[Long]()\n        val set19 = new mutable.HashSet[Long]()\n\
    \        val set20 = new mutable.HashSet[Long]()\n        val set21 = new mutable.HashSet[Long]()\n\
    \        val set22 = new mutable.HashSet[Long]()\n        val set23 = new mutable.HashSet[Long]()\n\
    \        val set24 = new mutable.HashSet[Long]()\n        val set25 = new mutable.HashSet[Long]()\n\
    \        val set26 = new mutable.HashSet[Long]()\n        val set27 = new mutable.HashSet[Long]()\n\
    \        val set28 = new mutable.HashSet[Long]()\n        val set29 = new mutable.HashSet[Long]()\n\
    \        val set30 = new mutable.HashSet[Long]()\n        val set31 = new mutable.HashSet[Long]()\n\
    \        val set32 = new mutable.HashSet[Long]()\n        val set33 = new mutable.HashSet[Long]()\n\
    \        val set34 = new mutable.HashSet[Long]()\n        val set35 = new mutable.HashSet[Long]()\n\
    \        val set36 = new mutable.HashSet[Long]()\n        val set37 = new mutable.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpra35pxy9.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpra35pxy9.scala:17:22 ------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpra35pxy9.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset2\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpra35pxy9.scala:19:23\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mset3\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpra35pxy9.scala:20:23 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m        \e[33mval\e[0m \e[36mset4\e[0m = \e[33mnew\e[0m mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpra35pxy9.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mset5\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       No"
  stdout: ''
  timestamp: 1659800771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val seen = mutable.HashSet[Long]()\n\
    \        val seenCount = mutable.HashMap[Long, Int]()\n        for (i <- 0 until\
    \ lst.size) {\n            val cur = lst(i)\n            if (seenCount(cur) ==\
    \ 0) {\n                seen += cur\n                seenCount(cur) = 1\n    \
    \        } else {\n                seenCount(cur) += 1\n            }\n      \
    \  }\n        val isSorted = seen.toSeq.size == lst.size\n        return isSorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuo648rkp.scala:17:19 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mseen\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpuo648rkp.scala:18:24 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mseenCount\e[0m = mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800768
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.length){\n            if(set.contains(lst(i))){\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxnh2aba6.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.length)\n            if(set.contains(lst(i)))\n\
    \                return false\n            else\n                set += lst(i)\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphna2iagr.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.length){\n            if(set.contains(lst(i))){\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxnh2aba6.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp6n2ksgu.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        var i = 0\n       \
    \ var j = 1\n        var k = lst.length\n        while (i < k) {\n           \
    \ if (lst(i) < lst(j)) {\n                return false\n            }\n      \
    \      i += 1\n            j += 1\n        }\n        return true\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.isSorted(tmpb15r2kro.scala:21)\n\tat Problem$.main(tmpb15r2kro.scala:30)\n\
    \tat Problem.main(tmpb15r2kro.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800772
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(!set.contains(lst(i))) {\n\
    \                set.add(lst(i))\n            } else {\n                return\
    \ false\n            }\n        }\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgun1jtep.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800768
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.length){\n            if(set.contains(lst(i))){\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxnh2aba6.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp6n2ksgu.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp6n2ksgu.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.length){\n            if(set.contains(lst(i))){\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxnh2aba6.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val hashSet = mutable.HashSet[Long]()\n\
    \        val hashSet2 = mutable.HashSet[Long]()\n        val hashSet3 = mutable.HashSet[Long]()\n\
    \        val hashSet4 = mutable.HashSet[Long]()\n        val hashSet5 = mutable.HashSet[Long]()\n\
    \        val hashSet6 = mutable.HashSet[Long]()\n        val hashSet7 = mutable.HashSet[Long]()\n\
    \        val hashSet8 = mutable.HashSet[Long]()\n        val hashSet9 = mutable.HashSet[Long]()\n\
    \        val hashSet10 = mutable.HashSet[Long]()\n        val hashSet11 = mutable.HashSet[Long]()\n\
    \        val hashSet12 = mutable.HashSet[Long]()\n        val hashSet13 = mutable.HashSet[Long]()\n\
    \        val hashSet14 = mutable.HashSet[Long]()\n        val hashSet15 = mutable.HashSet[Long]()\n\
    \        val hashSet16 = mutable.HashSet[Long]()\n        val hashSet17 = mutable.HashSet[Long]()\n\
    \        val hashSet18 = mutable.HashSet[Long]()\n        val hashSet19 = mutable.HashSet[Long]()\n\
    \        val hashSet20 = mutable.HashSet[Long]()\n        val hashSet21 = mutable.HashSet[Long]()\n\
    \        val hashSet22 = mutable.HashSet[Long]()\n        val hashSet23 = mutable.HashSet[Long]()\n\
    \        val hashSet24 = mutable.HashSet[Long]()\n        val hashSet25 = mutable.HashSet[Long]()\n\
    \        val hashSet26 = mutable.HashSet[Long]()\n        val hashSet27 = mutable.HashSet[Long]()\n\
    \        val hashSet28 = mutable.HashSet[Long]()\n        val hashSet29 = mutable.HashSet[Long]()\n\
    \        val hashSet30 = mutable.HashSet[Long]()\n        val hashSet31 = mutable.HashSet[Long]()\n\
    \        val hashSet32 = mutable.HashSet[Long]()\n        val hashSet33 = mutable.HashSet[Long]()\n\
    \        val hashSet34 = mutable.HashSet[Long]()\n        val hashSet35 = mutable.HashSet[Long]()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mhashSet\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mhashSet2\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:19:23 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mhashSet3\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:20:23 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mhashSet4\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mhashSet5\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:22:23 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mhas"
  stdout: ''
  timestamp: 1659800770
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(!set.contains(lst(i))) {\n\
    \                set.add(lst(i))\n                return true\n            }\n\
    \        }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv4grzl1t.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800768
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp6n2ksgu.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val hashSet = mutable.HashSet[Long]()\n\
    \        val hashSet2 = mutable.HashSet[Long]()\n        val hashSet3 = mutable.HashSet[Long]()\n\
    \        val hashSet4 = mutable.HashSet[Long]()\n        val hashSet5 = mutable.HashSet[Long]()\n\
    \        val hashSet6 = mutable.HashSet[Long]()\n        val hashSet7 = mutable.HashSet[Long]()\n\
    \        val hashSet8 = mutable.HashSet[Long]()\n        val hashSet9 = mutable.HashSet[Long]()\n\
    \        val hashSet10 = mutable.HashSet[Long]()\n        val hashSet11 = mutable.HashSet[Long]()\n\
    \        val hashSet12 = mutable.HashSet[Long]()\n        val hashSet13 = mutable.HashSet[Long]()\n\
    \        val hashSet14 = mutable.HashSet[Long]()\n        val hashSet15 = mutable.HashSet[Long]()\n\
    \        val hashSet16 = mutable.HashSet[Long]()\n        val hashSet17 = mutable.HashSet[Long]()\n\
    \        val hashSet18 = mutable.HashSet[Long]()\n        val hashSet19 = mutable.HashSet[Long]()\n\
    \        val hashSet20 = mutable.HashSet[Long]()\n        val hashSet21 = mutable.HashSet[Long]()\n\
    \        val hashSet22 = mutable.HashSet[Long]()\n        val hashSet23 = mutable.HashSet[Long]()\n\
    \        val hashSet24 = mutable.HashSet[Long]()\n        val hashSet25 = mutable.HashSet[Long]()\n\
    \        val hashSet26 = mutable.HashSet[Long]()\n        val hashSet27 = mutable.HashSet[Long]()\n\
    \        val hashSet28 = mutable.HashSet[Long]()\n        val hashSet29 = mutable.HashSet[Long]()\n\
    \        val hashSet30 = mutable.HashSet[Long]()\n        val hashSet31 = mutable.HashSet[Long]()\n\
    \        val hashSet32 = mutable.HashSet[Long]()\n        val hashSet33 = mutable.HashSet[Long]()\n\
    \        val hashSet34 = mutable.HashSet[Long]()\n        val hashSet35 = mutable.HashSet[Long]()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mhashSet\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mhashSet2\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:19:23 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mhashSet3\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:20:23 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mhashSet4\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mhashSet5\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:22:23 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mhas"
  stdout: ''
  timestamp: 1659800770
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(!set.contains(lst(i))) {\n\
    \                set.add(lst(i))\n                return true\n            }\n\
    \        }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv4grzl1t.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800768
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        val result = new mutable.ArrayBuffer[Long]()\n        for(i <- 0 until\
    \ lst.size) {\n            val value = lst(i)\n            if(set.contains(value))\
    \ {\n                return false\n            }\n            set += value\n \
    \           result += value\n        }\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcqr0vd3j.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcqr0vd3j.scala:18:25\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ArrayBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800775
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4wxwy_4k.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800775
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxq98zyui.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800776
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp6n2ksgu.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp6n2ksgu.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val hashSet = mutable.HashSet[Long]()\n\
    \        lst.foreach(x => hashSet.add(x))\n        lst.size < lst.count(x => hashSet.contains(x))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjv25q5xh.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mhashSet\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800775
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        var i = 0\n       \
    \ var j = 1\n        var k = 0\n        val n = lst.length\n        val m = lst.length\n\
    \        var isSorted = true\n        while (i < n && j < m) {\n            if\
    \ (lst(i) < lst(j)) {\n                isSorted = false\n                k = k\
    \ + 1\n            } else {\n                k = k + 1\n            }\n      \
    \      i = i + 1\n            j = j + 1\n        }\n        if (k == m) {\n  \
    \          isSorted = true\n        }\n        return isSorted\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzqhw8ali.scala:40)\n\tat Problem.main(tmpzqhw8ali.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800779
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        var i = 0\n       \
    \ var j = 1\n        var k = lst.length\n        while (i < k) {\n           \
    \ if (lst(i) < lst(j)) {\n                i += 1\n            } else if (lst(i)\
    \ > lst(j)) {\n                j += 1\n            } else {\n                i\
    \ += 1\n                j += 1\n            }\n        }\n        if (i == k)\
    \ {\n            return true\n        } else {\n            return false\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.isSorted(tmp8gii1du3.scala:21)\n\tat Problem$.main(tmp8gii1du3.scala:37)\n\
    \tat Problem.main(tmp8gii1du3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800779
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(!set.contains(lst(i))) {\n\
    \                set.add(lst(i))\n                return true\n            }\n\
    \        }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv4grzl1t.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800768
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(!set.contains(lst(i))) {\n\
    \                set.add(lst(i))\n                return true\n            }\n\
    \        }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv4grzl1t.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800768
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val map = new mutable.HashMap[Long,\
    \ Int]()\n        for(i <- 0 until lst.size) {\n            val key = lst(i)\n\
    \            if(!map.contains(key)) {\n                map.put(key, 1)\n     \
    \       } else {\n                map.put(key, map.get(key) + 1)\n           \
    \ }\n        }\n        val sorted = map.toSeq.sortWith((x, y) => x._2 < y._2)\n\
    \        sorted.size == lst.size && sorted.forall(x => lst(x._1) <= lst(x._2))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp35p8kudh.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800776
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        var i = 0\n       \
    \ var j = 0\n        var isSorted = true\n        while (i < lst.size) {\n   \
    \         if (lst(i) > lst(j)) {\n                isSorted = false\n         \
    \       break\n            }\n            i += 1\n            j += 1\n       \
    \ }\n        return isSorted\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2dx0tdwv.scala:23:16 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(!set.contains(lst(i))) {\n\
    \                set.add(lst(i))\n                return true\n            }\n\
    \        }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1eepicaj.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800775
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp6n2ksgu.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        val list = new mutable.ArrayBuffer[Long]()\n        for(i <- 0 until\
    \ lst.length){\n            if(!set.contains(lst(i))){\n                list +=\
    \ lst(i)\n                set += lst(i)\n            }\n        }\n        if(list.size\
    \ == lst.length){\n            return true\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0qo4c34e.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0qo4c34e.scala:18:23\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mlist\e[0m = \e[33mnew\e[0m mutable.ArrayBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800775
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        var i = 0\n       \
    \ var j = 1\n        var k = lst.length - 1\n        while (i < k) {\n       \
    \     if (lst(i) > lst(j)) {\n                return false\n            }\n  \
    \          i += 1\n            j += 1\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_uz2bl_e.scala:39)\n\tat Problem.main(tmp_uz2bl_e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800778
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val hashSet = mutable.HashSet[Long]()\n\
    \        val hashSet2 = mutable.HashSet[Long]()\n        val hashSet3 = mutable.HashSet[Long]()\n\
    \        val hashSet4 = mutable.HashSet[Long]()\n        val hashSet5 = mutable.HashSet[Long]()\n\
    \        val hashSet6 = mutable.HashSet[Long]()\n        val hashSet7 = mutable.HashSet[Long]()\n\
    \        val hashSet8 = mutable.HashSet[Long]()\n        val hashSet9 = mutable.HashSet[Long]()\n\
    \        val hashSet10 = mutable.HashSet[Long]()\n        val hashSet11 = mutable.HashSet[Long]()\n\
    \        val hashSet12 = mutable.HashSet[Long]()\n        val hashSet13 = mutable.HashSet[Long]()\n\
    \        val hashSet14 = mutable.HashSet[Long]()\n        val hashSet15 = mutable.HashSet[Long]()\n\
    \        val hashSet16 = mutable.HashSet[Long]()\n        val hashSet17 = mutable.HashSet[Long]()\n\
    \        val hashSet18 = mutable.HashSet[Long]()\n        val hashSet19 = mutable.HashSet[Long]()\n\
    \        val hashSet20 = mutable.HashSet[Long]()\n        val hashSet21 = mutable.HashSet[Long]()\n\
    \        val hashSet22 = mutable.HashSet[Long]()\n        val hashSet23 = mutable.HashSet[Long]()\n\
    \        val hashSet24 = mutable.HashSet[Long]()\n        val hashSet25 = mutable.HashSet[Long]()\n\
    \        val hashSet26 = mutable.HashSet[Long]()\n        val hashSet27 = mutable.HashSet[Long]()\n\
    \        val hashSet28 = mutable.HashSet[Long]()\n        val hashSet29 = mutable.HashSet[Long]()\n\
    \        val hashSet30 = mutable.HashSet[Long]()\n        val hashSet31 = mutable.HashSet[Long]()\n\
    \        val hashSet32 = mutable.HashSet[Long]()\n        val hashSet33 = mutable.HashSet[Long]()\n\
    \        val hashSet34 = mutable.HashSet[Long]()\n        val hashSet35 = mutable.HashSet[Long]()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mhashSet\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mhashSet2\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:19:23 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mhashSet3\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:20:23 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mhashSet4\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mhashSet5\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:22:23 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mhas"
  stdout: ''
  timestamp: 1659800770
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        for (i <- 0 until lst.size) {\n            if (set.contains(lst(i)))\
    \ {\n                return false\n            }\n            set += lst(i)\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpog44g2tj.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800775
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp6n2ksgu.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        val set2 = new mutable.HashSet[Long]()\n        for(i <- 0 until lst.length){\n\
    \            if(set.contains(lst(i))){\n                set2.add(lst(i))\n   \
    \         }else{\n                set.add(lst(i))\n            }\n        }\n\
    \        if(set2.size == lst.length){\n            return true\n        }else{\n\
    \            return false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa2zi9vd4.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa2zi9vd4.scala:18:23\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mset2\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800776
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp6n2ksgu.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        var i = 0\n       \
    \ var j = 0\n        var flag = true\n        while(i < lst.length && flag) {\n\
    \            flag = false\n            for(j < (lst.length - i); j++) {\n    \
    \            if(lst(i) > lst(j)) {\n                    flag = true\n        \
    \            break\n                }\n            }\n            i += 1\n   \
    \     }\n        return flag\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7ps21m40.scala:22:36 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mfor\e[0m(j < (lst.length - i); j++)\
    \ {\n\e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m \
    \  |\e[0m                                    ')' expected, but ';' found\n\e[31m\e\
    [31m-- [E032] Syntax Error: /tmp/tmp7ps21m40.scala:22:41 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mfor\e[0m(j < (lst.length - i); j++)\
    \ {\n\e[31m\e[31m   |\e[0m                                         ^\e[0m\n\e\
    [31m   |\e[0m                                         pattern expected\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800776
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp6n2ksgu.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val seen = mutable.HashSet[Long]()\n\
    \        val seenCount = mutable.HashMap[Long, Int]()\n        val len = lst.size\n\
    \        for(i <- 0 until len) {\n            val curr = lst(i)\n            if(seenCount(curr)\
    \ == 0) {\n                seen += curr\n                seenCount(curr) = seenCount(curr)\
    \ + 1\n            }\n            if(seenCount(curr) > 1) {\n                return\
    \ false\n            }\n        }\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe8wq4knf.scala:17:19 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mseen\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpe8wq4knf.scala:18:24 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mseenCount\e[0m = mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800776
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp6n2ksgu.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.length)\n            if(!set.contains(lst(i)))\n\
    \                set.add(lst(i))\n        set.size == lst.length\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2ehnx6zc.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800768
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.length){\n            if(set.contains(lst(i))){\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdl4gi0so.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800768
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val seen = mutable.HashSet[Long]()\n\
    \        val seenCount = mutable.HashMap[Long, Int]()\n        val len = lst.size\n\
    \        for(i <- 0 until len) {\n            val curr = lst(i)\n            val\
    \ count = seenCount(curr)\n            if(count == 0) {\n                seen\
    \ += curr\n                seenCount(curr) = 1\n            }\n            else\
    \ {\n                val prev = seen(count - 1)\n                if(curr < prev)\
    \ {\n                    return false\n                }\n                else\
    \ {\n                    seen(count) = curr\n                    seenCount(curr)\
    \ = count + 1\n                }\n            }\n        }\n        return true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbuo3i9ft.scala:17:19 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mseen\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbuo3i9ft.scala:18:24 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mseenCount\e[0m = mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800776
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.length){\n            if(!set.contains(lst(i))){\n\
    \                set.add(lst(i))\n            }\n        }\n        set.size ==\
    \ lst.length\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjaqiic0y.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800776
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val seen = mutable.HashSet[Long]()\n\
    \        val seenCount = mutable.HashMap[Long, Int]()\n        val result = lst.foldLeft(true){\
    \ (acc, x) => \n            if (seen(x)) {\n                false\n          \
    \  } else {\n                val count = seenCount.getOrElse(x, 0)\n         \
    \       seenCount.update(x, count + 1)\n                acc && count <= 1\n  \
    \          }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr9thdnm4.scala:17:19 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mseen\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpr9thdnm4.scala:18:24 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mseenCount\e[0m = mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800775
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.length)\n            if(set.contains(lst(i)))\n\
    \                return false\n            else\n                set.add(lst(i))\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvsk55nga.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800776
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp6n2ksgu.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val seen = mutable.HashSet[Long]()\n\
    \        val seenCount = mutable.HashMap[Long, Int]()\n        for (i <- 0 until\
    \ lst.size) {\n            val curr = lst(i)\n            if (seenCount(curr)\
    \ == 0) {\n                seen += curr\n                seenCount(curr) = 1\n\
    \            } else {\n                seenCount(curr) += 1\n            }\n \
    \       }\n        seenCount.values.toList.forall(i => i <= lst.size)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_o_65wpp.scala:17:19 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mseen\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_o_65wpp.scala:18:24 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mseenCount\e[0m = mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800776
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4wxwy_4k.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800775
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val hashSet = mutable.HashSet[Long]()\n\
    \        val hashSet2 = mutable.HashSet[Long]()\n        val hashSet3 = mutable.HashSet[Long]()\n\
    \        val hashSet4 = mutable.HashSet[Long]()\n        val hashSet5 = mutable.HashSet[Long]()\n\
    \        val hashSet6 = mutable.HashSet[Long]()\n        val hashSet7 = mutable.HashSet[Long]()\n\
    \        val hashSet8 = mutable.HashSet[Long]()\n        val hashSet9 = mutable.HashSet[Long]()\n\
    \        val hashSet10 = mutable.HashSet[Long]()\n        val hashSet11 = mutable.HashSet[Long]()\n\
    \        val hashSet12 = mutable.HashSet[Long]()\n        val hashSet13 = mutable.HashSet[Long]()\n\
    \        val hashSet14 = mutable.HashSet[Long]()\n        val hashSet15 = mutable.HashSet[Long]()\n\
    \        val hashSet16 = mutable.HashSet[Long]()\n        val hashSet17 = mutable.HashSet[Long]()\n\
    \        val hashSet18 = mutable.HashSet[Long]()\n        val hashSet19 = mutable.HashSet[Long]()\n\
    \        val hashSet20 = mutable.HashSet[Long]()\n        val hashSet21 = mutable.HashSet[Long]()\n\
    \        val hashSet22 = mutable.HashSet[Long]()\n        val hashSet23 = mutable.HashSet[Long]()\n\
    \        val hashSet24 = mutable.HashSet[Long]()\n        val hashSet25 = mutable.HashSet[Long]()\n\
    \        val hashSet26 = mutable.HashSet[Long]()\n        val hashSet27 = mutable.HashSet[Long]()\n\
    \        val hashSet28 = mutable.HashSet[Long]()\n        val hashSet29 = mutable.HashSet[Long]()\n\
    \        val hashSet30 = mutable.HashSet[Long]()\n        val hashSet31 = mutable.HashSet[Long]()\n\
    \        val hashSet32 = mutable.HashSet[Long]()\n        val hashSet33 = mutable.HashSet[Long]()\n\
    \        val hashSet34 = mutable.HashSet[Long]()\n        val hashSet35 = mutable.HashSet[Long]()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mhashSet\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mhashSet2\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:19:23 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mhashSet3\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:20:23 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mhashSet4\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mhashSet5\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:22:23 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mhas"
  stdout: ''
  timestamp: 1659800770
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val hashSet = mutable.HashSet[Long]()\n\
    \        val hashSet2 = mutable.HashSet[Long]()\n        val hashSet3 = mutable.HashSet[Long]()\n\
    \        val hashSet4 = mutable.HashSet[Long]()\n        val hashSet5 = mutable.HashSet[Long]()\n\
    \        val hashSet6 = mutable.HashSet[Long]()\n        val hashSet7 = mutable.HashSet[Long]()\n\
    \        val hashSet8 = mutable.HashSet[Long]()\n        val hashSet9 = mutable.HashSet[Long]()\n\
    \        val hashSet10 = mutable.HashSet[Long]()\n        val hashSet11 = mutable.HashSet[Long]()\n\
    \        val hashSet12 = mutable.HashSet[Long]()\n        val hashSet13 = mutable.HashSet[Long]()\n\
    \        val hashSet14 = mutable.HashSet[Long]()\n        val hashSet15 = mutable.HashSet[Long]()\n\
    \        val hashSet16 = mutable.HashSet[Long]()\n        val hashSet17 = mutable.HashSet[Long]()\n\
    \        val hashSet18 = mutable.HashSet[Long]()\n        val hashSet19 = mutable.HashSet[Long]()\n\
    \        val hashSet20 = mutable.HashSet[Long]()\n        val hashSet21 = mutable.HashSet[Long]()\n\
    \        val hashSet22 = mutable.HashSet[Long]()\n        val hashSet23 = mutable.HashSet[Long]()\n\
    \        val hashSet24 = mutable.HashSet[Long]()\n        val hashSet25 = mutable.HashSet[Long]()\n\
    \        val hashSet26 = mutable.HashSet[Long]()\n        val hashSet27 = mutable.HashSet[Long]()\n\
    \        val hashSet28 = mutable.HashSet[Long]()\n        val hashSet29 = mutable.HashSet[Long]()\n\
    \        val hashSet30 = mutable.HashSet[Long]()\n        val hashSet31 = mutable.HashSet[Long]()\n\
    \        val hashSet32 = mutable.HashSet[Long]()\n        val hashSet33 = mutable.HashSet[Long]()\n\
    \        val hashSet34 = mutable.HashSet[Long]()\n        val hashSet35 = mutable.HashSet[Long]()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mhashSet\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mhashSet2\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:19:23 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mhashSet3\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:20:23 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mhashSet4\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mhashSet5\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:22:23 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mhas"
  stdout: ''
  timestamp: 1659800770
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4wxwy_4k.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800775
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(!set.contains(lst(i))) {\n\
    \                set.add(lst(i))\n                return true\n            }\n\
    \        }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv4grzl1t.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800768
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.length){\n            if(!set.contains(lst(i))){\n\
    \                set.add(lst(i))\n            }\n        }\n        if(lst.length\
    \ == set.size){\n            return true\n        }\n        return false\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplvgt8fpc.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800777
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val map = new mutable.HashMap[Long,\
    \ Int]()\n        for(i <- 0 until lst.length){\n            val key = lst(i)\n\
    \            if(map.contains(key)){\n                map.update(key, map.get(key)\
    \ + 1)\n            }else{\n                map.update(key, 1)\n            }\n\
    \        }\n        val result = map.values.toList.forall(x => x == lst.length)\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp20zrlazk.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800779
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val map = new mutable.HashMap[Long,\
    \ Int]()\n        val set = new mutable.HashSet[Long]()\n        for(i <- 0 until\
    \ lst.length){\n            val key = lst(i)\n            if(!map.contains(key)){\n\
    \                map.put(key, 1)\n                set.add(key)\n            }\n\
    \            else{\n                map.put(key, map.get(key) + 1)\n         \
    \   }\n        }\n        for(i <- 0 until lst.length){\n            val key =\
    \ lst(i)\n            if(map.get(key) != 1){\n                return false\n \
    \           }\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_29fv3js.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_29fv3js.scala:18:22\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mset\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800779
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4wxwy_4k.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800775
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val hashSet = mutable.HashSet[Long]()\n\
    \        val hashSet2 = mutable.HashSet[Long]()\n        val hashSet3 = mutable.HashSet[Long]()\n\
    \        val hashSet4 = mutable.HashSet[Long]()\n        val hashSet5 = mutable.HashSet[Long]()\n\
    \        val hashSet6 = mutable.HashSet[Long]()\n        val hashSet7 = mutable.HashSet[Long]()\n\
    \        val hashSet8 = mutable.HashSet[Long]()\n        val hashSet9 = mutable.HashSet[Long]()\n\
    \        val hashSet10 = mutable.HashSet[Long]()\n        val hashSet11 = mutable.HashSet[Long]()\n\
    \        val hashSet12 = mutable.HashSet[Long]()\n        val hashSet13 = mutable.HashSet[Long]()\n\
    \        val hashSet14 = mutable.HashSet[Long]()\n        val hashSet15 = mutable.HashSet[Long]()\n\
    \        val hashSet16 = mutable.HashSet[Long]()\n        val hashSet17 = mutable.HashSet[Long]()\n\
    \        val hashSet18 = mutable.HashSet[Long]()\n        val hashSet19 = mutable.HashSet[Long]()\n\
    \        val hashSet20 = mutable.HashSet[Long]()\n        val hashSet21 = mutable.HashSet[Long]()\n\
    \        val hashSet22 = mutable.HashSet[Long]()\n        val hashSet23 = mutable.HashSet[Long]()\n\
    \        val hashSet24 = mutable.HashSet[Long]()\n        val hashSet25 = mutable.HashSet[Long]()\n\
    \        val hashSet26 = mutable.HashSet[Long]()\n        val hashSet27 = mutable.HashSet[Long]()\n\
    \        val hashSet28 = mutable.HashSet[Long]()\n        val hashSet29 = mutable.HashSet[Long]()\n\
    \        val hashSet30 = mutable.HashSet[Long]()\n        val hashSet31 = mutable.HashSet[Long]()\n\
    \        val hashSet32 = mutable.HashSet[Long]()\n        val hashSet33 = mutable.HashSet[Long]()\n\
    \        val hashSet34 = mutable.HashSet[Long]()\n        val hashSet35 = mutable.HashSet[Long]()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mhashSet\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mhashSet2\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:19:23 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mhashSet3\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:20:23 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mhashSet4\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mhashSet5\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:22:23 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mhas"
  stdout: ''
  timestamp: 1659800770
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        val set2 = new mutable.HashSet[Long]()\n        val set3 = new mutable.HashSet[Long]()\n\
    \        val set4 = new mutable.HashSet[Long]()\n        val set5 = new mutable.HashSet[Long]()\n\
    \        val set6 = new mutable.HashSet[Long]()\n        val set7 = new mutable.HashSet[Long]()\n\
    \        val set8 = new mutable.HashSet[Long]()\n        val set9 = new mutable.HashSet[Long]()\n\
    \        val set10 = new mutable.HashSet[Long]()\n        val set11 = new mutable.HashSet[Long]()\n\
    \        val set12 = new mutable.HashSet[Long]()\n        val set13 = new mutable.HashSet[Long]()\n\
    \        val set14 = new mutable.HashSet[Long]()\n        val set15 = new mutable.HashSet[Long]()\n\
    \        val set16 = new mutable.HashSet[Long]()\n        val set17 = new mutable.HashSet[Long]()\n\
    \        val set18 = new mutable.HashSet[Long]()\n        val set19 = new mutable.HashSet[Long]()\n\
    \        val set20 = new mutable.HashSet[Long]()\n        val set21 = new mutable.HashSet[Long]()\n\
    \        val set22 = new mutable.HashSet[Long]()\n        val set23 = new mutable.HashSet[Long]()\n\
    \        val set24 = new mutable.HashSet[Long]()\n        val set25 = new mutable.HashSet[Long]()\n\
    \        val set26 = new mutable.HashSet[Long]()\n        val set27 = new mutable.HashSet[Long]()\n\
    \        val set28 = new mutable.HashSet[Long]()\n        val set29 = new mutable.HashSet[Long]()\n\
    \        val set30 = new mutable.HashSet[Long]()\n        val set31 = new mutable.HashSet[Long]()\n\
    \        val set32 = new mutable.HashSet[Long]()\n        val set33 = new mutable.HashSet[Long]()\n\
    \        val set34 = new mutable.HashSet[Long]()\n        val set35 = new mutable.HashSet[Long]()\n\
    \        val set36 = new mutable.HashSet[Long]()\n        val set37 = new mutable.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpra35pxy9.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpra35pxy9.scala:17:22 ------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpra35pxy9.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset2\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpra35pxy9.scala:19:23\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mset3\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpra35pxy9.scala:20:23 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m        \e[33mval\e[0m \e[36mset4\e[0m = \e[33mnew\e[0m mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpra35pxy9.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mset5\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       No"
  stdout: ''
  timestamp: 1659800771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val seen = mutable.HashSet[Long]()\n\
    \        val sorted = lst.sortWith((x, y) => x < y)\n        val duplicates =\
    \ lst.groupBy(x => x).filter(_._2.size > 1).map(_._1)\n        val duplicatesCount\
    \ = duplicates.size\n        val duplicatesSum = duplicates.map(_.size).sum\n\
    \        val duplicatesSumOfSquares = duplicatesSum * duplicatesSum\n        val\
    \ duplicatesSumOfSquaresCount = duplicatesSumOfSquares.size\n        val duplicatesSumOfSquaresSum\
    \ = duplicatesSumOfSquares.map(_.size).sum\n        val duplicatesSumOfSquaresSumOfSquares\
    \ = duplicatesSumOfSquaresSum * duplicatesSumOfSquaresSum\n        val duplicatesSumOfSquaresSumOfSquaresCount\
    \ = duplicatesSumOfSquaresSumOfSquares.size\n        val duplicatesSumOfSquaresSumOfSquaresSum\
    \ = duplicatesSumOfSquaresSumOfSquares.map(_.size).sum\n        val duplicatesSumOfSquaresSumOfSquaresSumOfSquares\
    \ = duplicatesSumOfSquaresSumOfSquaresSum * duplicatesSumOfSquaresSumOfSquaresSum\n\
    \        val duplicatesSumOfSquaresSumOfSquaresSumOfSquaresCount = duplicatesSumOfSquaresSumOfSquaresSumOfSquares.size\n\
    \        val duplicatesSumOfSquaresSumOfSquaresSumOfSquaresSum = duplicatesSumOfSquaresSumOfSquaresSumOfSquares.map(_.size).sum\n\
    \        val duplicatesSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquares = duplicatesSumOfSquaresSumOfSquaresSumOfSquaresSum\
    \ * duplicatesSumOfSquaresSumOfSquaresSumOfSquaresSum\n        val duplicatesSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresCount\
    \ = duplicatesSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquares.size\n        val\
    \ duplicatesSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresSum = duplicatesSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquares.map(_.size).sum\n\
    \        val duplicatesSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquares\
    \ = duplicatesSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquares * duplicatesSumOfSquaresSumOfSquaresSum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjvpf2rk7.scala:17:19 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mseen\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpjvpf2rk7.scala:21:45 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mduplicatesSum\e[0m = duplicates.map(_.size).sum\n\
    \e[31m\e[31m   |\e[0m                                           ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                      value size is not a member\
    \ of Long\n\e[31m\e[31m-- Error: /tmp/tmpjvpf2rk7.scala:21:54 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mduplicatesSum\e[0m = duplicates.map(_.size).sum\n\
    \e[31m\e[31m   |\e[0m                                                      ^\e\
    [0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mByteIsIntegral\e\
    [0m in \e[33mobject\e[0m \e[35mNumeric\e[0m and \e[33mobject\e[0m \e[35mLongIsIntegral\e\
    [0m in \e[33mobject\e[0m \e[35mNumeric\e[0m match type Numeric[B] of parameter\
    \ num of \e[33mmethod\e[0m \e[35msum\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e\
    [0m\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpjvpf2rk7.scala:34:85 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mduplicatesSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquares\e\
    [0m = duplicatesSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquares *\
    \ duplicatesSumOfSquaresSumOfSquaresSum\n\e[31m\e[31m   |\e[0m               \
    \                                                                      ^\e[0m\n\
    \e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mduplicatesSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquares\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjvpf2rk7.scala:35:5\
    \ ---------------------\e[0m\e[0m\n\e[31m3"
  stdout: ''
  timestamp: 1659800783
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val hashSet = mutable.HashSet[Long]()\n\
    \        val hashSet2 = mutable.HashSet[Long]()\n        val hashSet3 = mutable.HashSet[Long]()\n\
    \        val hashSet4 = mutable.HashSet[Long]()\n        val hashSet5 = mutable.HashSet[Long]()\n\
    \        val hashSet6 = mutable.HashSet[Long]()\n        val hashSet7 = mutable.HashSet[Long]()\n\
    \        val hashSet8 = mutable.HashSet[Long]()\n        val hashSet9 = mutable.HashSet[Long]()\n\
    \        val hashSet10 = mutable.HashSet[Long]()\n        val hashSet11 = mutable.HashSet[Long]()\n\
    \        val hashSet12 = mutable.HashSet[Long]()\n        val hashSet13 = mutable.HashSet[Long]()\n\
    \        val hashSet14 = mutable.HashSet[Long]()\n        val hashSet15 = mutable.HashSet[Long]()\n\
    \        val hashSet16 = mutable.HashSet[Long]()\n        val hashSet17 = mutable.HashSet[Long]()\n\
    \        val hashSet18 = mutable.HashSet[Long]()\n        val hashSet19 = mutable.HashSet[Long]()\n\
    \        val hashSet20 = mutable.HashSet[Long]()\n        val hashSet21 = mutable.HashSet[Long]()\n\
    \        val hashSet22 = mutable.HashSet[Long]()\n        val hashSet23 = mutable.HashSet[Long]()\n\
    \        val hashSet24 = mutable.HashSet[Long]()\n        val hashSet25 = mutable.HashSet[Long]()\n\
    \        val hashSet26 = mutable.HashSet[Long]()\n        val hashSet27 = mutable.HashSet[Long]()\n\
    \        val hashSet28 = mutable.HashSet[Long]()\n        val hashSet29 = mutable.HashSet[Long]()\n\
    \        val hashSet30 = mutable.HashSet[Long]()\n        val hashSet31 = mutable.HashSet[Long]()\n\
    \        val hashSet32 = mutable.HashSet[Long]()\n        val hashSet33 = mutable.HashSet[Long]()\n\
    \        val hashSet34 = mutable.HashSet[Long]()\n        val hashSet35 = mutable.HashSet[Long]()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mhashSet\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mhashSet2\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:19:23 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mhashSet3\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:20:23 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mhashSet4\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mhashSet5\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:22:23 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mhas"
  stdout: ''
  timestamp: 1659800770
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.length){\n            if(set.contains(lst(i))){\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxnh2aba6.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp6n2ksgu.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val seen = mutable.HashSet[Long]()\n\
    \        val sorted = lst.sortWith(_ < _)\n        val duplicates = lst.groupBy(x\
    \ => x).filter(_._2.size > 1).map(_._1)\n        val duplicatesSorted = duplicates.sortWith(_\
    \ < _)\n        val duplicatesSortedSize = duplicatesSorted.size\n        val\
    \ duplicatesSortedSize = duplicatesSortedSize + 1\n        val duplicatesSortedSize\
    \ = duplicatesSortedSize + 1\n        val duplicatesSortedSize = duplicatesSortedSize\
    \ + 1\n        val duplicatesSortedSize = duplicatesSortedSize + 1\n        val\
    \ duplicatesSortedSize = duplicatesSortedSize + 1\n        val duplicatesSortedSize\
    \ = duplicatesSortedSize + 1\n        val duplicatesSortedSize = duplicatesSortedSize\
    \ + 1\n        val duplicatesSortedSize = duplicatesSortedSize + 1\n        val\
    \ duplicatesSortedSize = duplicatesSortedSize + 1\n        val duplicatesSortedSize\
    \ = duplicatesSortedSize + 1\n        val duplicatesSortedSize = duplicatesSortedSize\
    \ + 1\n        val duplicatesSortedSize = duplicatesSortedSize + 1\n        val\
    \ duplicatesSortedSize = duplicatesSortedSize + 1\n        val duplicatesSortedSize\
    \ = duplicatesSortedSize + 1\n        val duplicatesSortedSize = duplicatesSortedSize\
    \ + 1\n        val duplicatesSortedSize = duplicatesSortedSize + 1\n        val\
    \ duplicatesSortedSize = duplicatesSortedSize + 1\n        val duplicatesSortedSize\
    \ = duplicatesSortedSize + 1\n        val duplicatesSortedSize = duplicatesSortedSize\
    \ + 1\n        val duplicatesSortedSize = duplicatesSortedSize + 1\n        val\
    \ duplicatesSortedSize = duplicatesSortedSize + 1\n        val duplicatesSortedSize\
    \ = duplicatesSortedSize + 1\n        val duplicatesSortedSize = duplicatesSortedSize\
    \ + 1\n        val duplicatesSortedSize = duplicatesSortedSize + 1\n        val\
    \ duplicatesSortedSize = duplicatesSortedSize + 1\n        val duplicatesSortedSize\
    \ = duplicatesSortedSize + 1\n        val duplicatesSortedSize = duplicatesSortedSize\
    \ + 1\n        val duplicatesSortedSize = duplicatesSortedSize + 1\n        val\
    \ duplicatesSortedSize = duplicatesSortedSize + 1\n        val duplicatesSortedSize\
    \ = duplicatesSortedSize + 1\n        val duplicatesSortedSize = duplicatesSortedSize\
    \ + 1\n        val duplicatesSortedSize = duplicatesSortedSize + 1\n        val\
    \ duplicatesSortedSize = duplicatesSortedSize + 1\n        val duplicatesSortedSize\
    \ = duplicatesSortedSize + 1\n        val duplicatesSortedSize = duplicatesSortedSize\
    \ + 1\n        val duplicatesSortedSize = duplicatesSortedSize + 1\n        val\
    \ duplicatesSorted\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpc58vuwuq.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpc58vuwuq.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mduplicatesSortedSize\e[0m = duplicatesSortedSize + \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mduplicatesSortedSize is already defined as \e[33mvalue\e[0m \e\
    [35mduplicatesSortedSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpc58vuwuq.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mduplicatesSortedSize\e[0m\
    \ = duplicatesSortedSize + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mduplicatesSortedSize is already defined as \e[33mvalue\e[0m\
    \ \e[35mduplicatesSortedSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpc58vuwuq.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mduplicatesSortedSize\e[0m\
    \ = duplicatesSortedSize + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mduplicatesSortedSize is already defined as \e[33mvalue\e[0m\
    \ \e[35mduplicatesSortedSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpc58vuwuq.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mduplicatesSortedSize\e[0m\
    \ = duplicatesSortedSize + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mduplicatesSortedSize is already defined as \e[33mvalue\e[0m\
    \ \e[35m"
  stdout: ''
  timestamp: 1659800787
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp6n2ksgu.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            else {\n           \
    \     set += lst(i)\n            }\n        }\n        return true\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfiejwzs5.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800782
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp6n2ksgu.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val seen = mutable.HashSet[Long]()\n\
    \        val sorted = lst.sortWith(_ < _)\n        val duplicates = lst.count(x\
    \ => seen.contains(x))\n        val duplicatesLessThan = lst.count(x => seen.contains(x)\
    \ && x < _)\n        val duplicatesLessThanOrEqual = lst.count(x => seen.contains(x)\
    \ && x <= _)\n        val duplicatesGreaterThan = lst.count(x => seen.contains(x)\
    \ && _ > x)\n        val duplicatesGreaterThanOrEqual = lst.count(x => seen.contains(x)\
    \ && _ >= x)\n        val duplicatesEqual = lst.count(x => seen.contains(x) &&\
    \ x == _)\n        val duplicatesNotEqual = lst.count(x => seen.contains(x) &&\
    \ x != _)\n        val duplicatesLessThanEqual = lst.count(x => seen.contains(x)\
    \ && x < _ && x == _)\n        val duplicatesLessThanNotEqual = lst.count(x =>\
    \ seen.contains(x) && x < _ && x != _)\n        val duplicatesGreaterThanEqual\
    \ = lst.count(x => seen.contains(x) && _ > x && x == _)\n        val duplicatesGreaterThanNotEqual\
    \ = lst.count(x => seen.contains(x) && _ > x && x != _)\n        val duplicatesEqualEqual\
    \ = lst.count(x => seen.contains(x) && x == _ && x == _)\n        val duplicatesNotEqualEqual\
    \ = lst.count(x => seen.contains(x) && x != _ && x == _)\n        val duplicatesLessThanEqualEqual\
    \ = lst.count(x => seen.contains(x) && x < _ && x == _ && x == _)\n        val\
    \ duplicatesLessThanNotEqualEqual = lst.count(x => seen.contains(x) && x < _ &&\
    \ x != _ && x == _)\n        val duplicatesGreaterThanEqualEqual = lst.count(x\
    \ => seen.contains(x) && _ > x && x == _ && x == _)\n        val duplicatesGreaterThanNotEqualEqual\
    \ = lst.count(x => seen.contains(x) && _ > x && x != _ && x == _)\n        val\
    \ duplicatesEqualEqualEqual = lst.count(x => seen.contains(x) && x == _ && x ==\
    \ _ && x == _)\n        val duplicatesNotEqualEqualEqual = lst.count(x => seen.contains(x)\
    \ && x != _ && x == _ && x == _)\n\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_hmtzrds.scala:17:19 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mseen\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E081] Type Error: /tmp/tmp_hmtzrds.scala:20:72 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mduplicatesLessThan\e[0m\
    \ = lst.count(\e[36mx\e[0m => seen.contains(x) && x < _)\n\e[31m\e[31m   |\e[0m\
    \                                                                        ^\e[0m\n\
    \e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I\
    \ could not infer the type of the parameter _$3 of expanded function:\n\e[31m\
    \   |\e[0m   _$3 => seen.contains(x) && x < _$3.\n\e[31m\e[31m-- [E081] Type Error:\
    \ /tmp/tmp_hmtzrds.scala:21:80 -----------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mduplicatesLessThanOrEqual\e[0m = lst.count(\e\
    [36mx\e[0m => seen.contains(x) && x <= _)\n\e[31m\e[31m   |\e[0m             \
    \                                                                   ^\e[0m\n\e\
    [31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could\
    \ not infer the type of the parameter _$4 of expanded function:\n\e[31m   |\e\
    [0m   _$4 => seen.contains(x) && x <= _$4.\n\e[31m\e[31m-- [E081] Type Error:\
    \ /tmp/tmp_hmtzrds.scala:22:71 -----------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mduplicatesGreaterThan\e[0m = lst.count(\e\
    [36mx\e[0m => seen.contains(x) && _ > x)\n\e[31m\e[31m   |\e[0m              \
    \                                                         ^\e[0m\n\e[31m   |\e\
    [0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer\
    \ the type of the parameter _$5 of expanded function:\n\e[31m   |\e[0m   _$5 =>\
    \ seen.contains(x) && _$5 > x.\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmp_hmtzrds.scala:23:78\
    \ -----------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e\
    [0m \e[36mduplicatesGreaterT"
  stdout: ''
  timestamp: 1659800786
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val seen = mutable.HashSet[Long]()\n\
    \        val sorted = lst.sortWith(_ < _)\n        val duplicates = lst.count(x\
    \ => seen.contains(x))\n        val duplicate = lst.count(x => seen.contains(x)\
    \ && seen.add(x))\n        val duplicates = lst.count(x => seen.contains(x) &&\
    \ seen.add(x))\n        val duplicate = lst.count(x => seen.contains(x) && seen.add(x))\n\
    \        val duplicates = lst.count(x => seen.contains(x) && seen.add(x))\n  \
    \      val duplicate = lst.count(x => seen.contains(x) && seen.add(x))\n     \
    \   val duplicates = lst.count(x => seen.contains(x) && seen.add(x))\n       \
    \ val duplicate = lst.count(x => seen.contains(x) && seen.add(x))\n        val\
    \ duplicates = lst.count(x => seen.contains(x) && seen.add(x))\n        val duplicate\
    \ = lst.count(x => seen.contains(x) && seen.add(x))\n        val duplicates =\
    \ lst.count(x => seen.contains(x) && seen.add(x))\n        val duplicate = lst.count(x\
    \ => seen.contains(x) && seen.add(x))\n        val duplicates = lst.count(x =>\
    \ seen.contains(x) && seen.add(x))\n        val duplicate = lst.count(x => seen.contains(x)\
    \ && seen.add(x))\n        val duplicates = lst.count(x => seen.contains(x) &&\
    \ seen.add(x))\n        val duplicate = lst.count(x => seen.contains(x) && seen.add(x))\n\
    \        val duplicates = lst.count(x => seen.contains(x) && seen.add(x))\n  \
    \      val duplicate = lst.count(x => seen.contains(x) && seen.add(x))\n     \
    \   val duplicates = lst.count(x => seen.contains(x) && seen.add(x))\n       \
    \ val duplicate = lst.count(x => seen.contains(x) && seen.add(x))\n        val\
    \ duplicates = lst.count(x => seen.contains(x) && seen.add(x))\n        val duplicate\
    \ = lst.count(x => seen.contains(x) && seen.add(x))\n        val duplicates =\
    \ lst.count(x => seen.contains(x) && seen.add(x))\n        val duplicate = lst.count(x\
    \ => seen.contains(x) && seen.add(x))\n        val duplicates = lst.count(x =>\
    \ seen.contains(x) && seen.add(x))\n        val duplicate = lst.count(x => seen.contains(x)\
    \ && seen.add(x))\n        val duplicates = lst.count(x => seen.contains(x) &&\
    \ seen.add(x))\n        val duplicate = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpxexszzir.scala:46:23 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36mduplicate\e[0m = \n\e[31m\e\
    [31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m                  \
    \     expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpxexszzir.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mduplicates\e[0m = lst.count(\e\
    [36mx\e[0m => seen.contains(x) && seen.add(x))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mduplicates is already defined as \e[33mvalue\e[0m \e[35mduplicates\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxexszzir.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mduplicate\e[0m = lst.count(\e[36mx\e\
    [0m => seen.contains(x) && seen.add(x))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mduplicate is already defined as \e[33mvalue\e[0m \e[35mduplicate\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxexszzir.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mduplicates\e[0m = lst.count(\e[36mx\e\
    [0m => seen.contains(x) && seen.add(x))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mduplicates is already defined as \e[33mvalue\e[0m \e[35mduplicates\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxexszzir.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mduplicate\e[0m = lst.count(\e"
  stdout: ''
  timestamp: 1659800786
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val map = new mutable.HashMap[Long,\
    \ Int]()\n        val set = new mutable.HashSet[Long]()\n        for(i <- 0 until\
    \ lst.size) {\n            if(map.contains(lst(i))) {\n                map.remove(lst(i))\n\
    \            } else {\n                map.put(lst(i), i)\n                set.add(lst(i))\n\
    \            }\n        }\n        set.size == lst.size && set.size == map.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmv2jszq5.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmv2jszq5.scala:18:22\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mset\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800783
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val map = new mutable.HashMap[Long,\
    \ Int]()\n        for (i <- 0 until lst.size) {\n            val value = lst(i)\n\
    \            if (map.contains(value)) {\n                map.updated(value, map.get(value)\
    \ + 1)\n            } else {\n                map.updated(value, 1)\n        \
    \    }\n        }\n        map.size == lst.size && map.forall { case (k, v) =>\
    \ v == 1 }\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4wh9a582.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800783
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val seen = mutable.HashSet[Long]()\n\
    \        val sorted = lst.sortWith(_ < _)\n        val duplicates = lst.count(x\
    \ => seen.contains(x))\n        if (duplicates > 1) false\n        else sorted.forall(x\
    \ => seen.add(x))\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp61apxz_h.scala:17:19 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mseen\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800782
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val hashSet = mutable.HashSet[Long]()\n\
    \        val hashSet2 = mutable.HashSet[Long]()\n        val hashSet3 = mutable.HashSet[Long]()\n\
    \        val hashSet4 = mutable.HashSet[Long]()\n        val hashSet5 = mutable.HashSet[Long]()\n\
    \        val hashSet6 = mutable.HashSet[Long]()\n        val hashSet7 = mutable.HashSet[Long]()\n\
    \        val hashSet8 = mutable.HashSet[Long]()\n        val hashSet9 = mutable.HashSet[Long]()\n\
    \        val hashSet10 = mutable.HashSet[Long]()\n        val hashSet11 = mutable.HashSet[Long]()\n\
    \        val hashSet12 = mutable.HashSet[Long]()\n        val hashSet13 = mutable.HashSet[Long]()\n\
    \        val hashSet14 = mutable.HashSet[Long]()\n        val hashSet15 = mutable.HashSet[Long]()\n\
    \        val hashSet16 = mutable.HashSet[Long]()\n        val hashSet17 = mutable.HashSet[Long]()\n\
    \        val hashSet18 = mutable.HashSet[Long]()\n        val hashSet19 = mutable.HashSet[Long]()\n\
    \        val hashSet20 = mutable.HashSet[Long]()\n        val hashSet21 = mutable.HashSet[Long]()\n\
    \        val hashSet22 = mutable.HashSet[Long]()\n        val hashSet23 = mutable.HashSet[Long]()\n\
    \        val hashSet24 = mutable.HashSet[Long]()\n        val hashSet25 = mutable.HashSet[Long]()\n\
    \        val hashSet26 = mutable.HashSet[Long]()\n        val hashSet27 = mutable.HashSet[Long]()\n\
    \        val hashSet28 = mutable.HashSet[Long]()\n        val hashSet29 = mutable.HashSet[Long]()\n\
    \        val hashSet30 = mutable.HashSet[Long]()\n        val hashSet31 = mutable.HashSet[Long]()\n\
    \        val hashSet32 = mutable.HashSet[Long]()\n        val hashSet33 = mutable.HashSet[Long]()\n\
    \        val hashSet34 = mutable.HashSet[Long]()\n        val hashSet35 = mutable.HashSet[Long]()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mhashSet\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mhashSet2\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:19:23 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mhashSet3\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:20:23 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mhashSet4\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mhashSet5\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:22:23 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mhas"
  stdout: ''
  timestamp: 1659800770
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val hashSet = mutable.HashSet[Long]()\n\
    \        val hashSet2 = mutable.HashSet[Long]()\n        val hashSet3 = mutable.HashSet[Long]()\n\
    \        val hashSet4 = mutable.HashSet[Long]()\n        val hashSet5 = mutable.HashSet[Long]()\n\
    \        val hashSet6 = mutable.HashSet[Long]()\n        val hashSet7 = mutable.HashSet[Long]()\n\
    \        val hashSet8 = mutable.HashSet[Long]()\n        val hashSet9 = mutable.HashSet[Long]()\n\
    \        val hashSet10 = mutable.HashSet[Long]()\n        val hashSet11 = mutable.HashSet[Long]()\n\
    \        val hashSet12 = mutable.HashSet[Long]()\n        val hashSet13 = mutable.HashSet[Long]()\n\
    \        val hashSet14 = mutable.HashSet[Long]()\n        val hashSet15 = mutable.HashSet[Long]()\n\
    \        val hashSet16 = mutable.HashSet[Long]()\n        val hashSet17 = mutable.HashSet[Long]()\n\
    \        val hashSet18 = mutable.HashSet[Long]()\n        val hashSet19 = mutable.HashSet[Long]()\n\
    \        val hashSet20 = mutable.HashSet[Long]()\n        val hashSet21 = mutable.HashSet[Long]()\n\
    \        val hashSet22 = mutable.HashSet[Long]()\n        val hashSet23 = mutable.HashSet[Long]()\n\
    \        val hashSet24 = mutable.HashSet[Long]()\n        val hashSet25 = mutable.HashSet[Long]()\n\
    \        val hashSet26 = mutable.HashSet[Long]()\n        val hashSet27 = mutable.HashSet[Long]()\n\
    \        val hashSet28 = mutable.HashSet[Long]()\n        val hashSet29 = mutable.HashSet[Long]()\n\
    \        val hashSet30 = mutable.HashSet[Long]()\n        val hashSet31 = mutable.HashSet[Long]()\n\
    \        val hashSet32 = mutable.HashSet[Long]()\n        val hashSet33 = mutable.HashSet[Long]()\n\
    \        val hashSet34 = mutable.HashSet[Long]()\n        val hashSet35 = mutable.HashSet[Long]()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mhashSet\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mhashSet2\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:19:23 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mhashSet3\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:20:23 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mhashSet4\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mhashSet5\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:22:23 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mhas"
  stdout: ''
  timestamp: 1659800770
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        val set2 = new mutable.HashSet[Long]()\n        val set3 = new mutable.HashSet[Long]()\n\
    \        val set4 = new mutable.HashSet[Long]()\n        val set5 = new mutable.HashSet[Long]()\n\
    \        val set6 = new mutable.HashSet[Long]()\n        val set7 = new mutable.HashSet[Long]()\n\
    \        val set8 = new mutable.HashSet[Long]()\n        val set9 = new mutable.HashSet[Long]()\n\
    \        val set10 = new mutable.HashSet[Long]()\n        val set11 = new mutable.HashSet[Long]()\n\
    \        val set12 = new mutable.HashSet[Long]()\n        val set13 = new mutable.HashSet[Long]()\n\
    \        val set14 = new mutable.HashSet[Long]()\n        val set15 = new mutable.HashSet[Long]()\n\
    \        val set16 = new mutable.HashSet[Long]()\n        val set17 = new mutable.HashSet[Long]()\n\
    \        val set18 = new mutable.HashSet[Long]()\n        val set19 = new mutable.HashSet[Long]()\n\
    \        val set20 = new mutable.HashSet[Long]()\n        val set21 = new mutable.HashSet[Long]()\n\
    \        val set22 = new mutable.HashSet[Long]()\n        val set23 = new mutable.HashSet[Long]()\n\
    \        val set24 = new mutable.HashSet[Long]()\n        val set25 = new mutable.HashSet[Long]()\n\
    \        val set26 = new mutable.HashSet[Long]()\n        val set27 = new mutable.HashSet[Long]()\n\
    \        val set28 = new mutable.HashSet[Long]()\n        val set29 = new mutable.HashSet[Long]()\n\
    \        val set30 = new mutable.HashSet[Long]()\n        val set31 = new mutable.HashSet[Long]()\n\
    \        val set32 = new mutable.HashSet[Long]()\n        val set33 = new mutable.HashSet[Long]()\n\
    \        val set34 = new mutable.HashSet[Long]()\n        val set35 = new mutable.HashSet[Long]()\n\
    \        val set36 = new mutable.HashSet[Long]()\n        val set37 = new mutable.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpra35pxy9.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpra35pxy9.scala:17:22 ------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpra35pxy9.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset2\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpra35pxy9.scala:19:23\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mset3\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpra35pxy9.scala:20:23 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m        \e[33mval\e[0m \e[36mset4\e[0m = \e[33mnew\e[0m mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpra35pxy9.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mset5\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       No"
  stdout: ''
  timestamp: 1659800771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        var i = 0\n       \
    \ var j = 1\n        var isSorted = true\n        while (i < lst.size) {\n   \
    \         if (lst(i) < lst(j)) {\n                isSorted = false\n         \
    \       break\n            }\n            i += 1\n            j += 1\n       \
    \ }\n        return isSorted\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa8o2md70.scala:23:16 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659800783
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for (i <- 0 until lst.size) {\n            if (set.contains(lst(i)))\
    \ {\n                return false\n            }\n            set += lst(i)\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptxv4qfib.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800783
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp6n2ksgu.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(!set.contains(lst(i))) {\n\
    \                set.add(lst(i))\n                return true\n            }\n\
    \        }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv4grzl1t.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800768
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp6n2ksgu.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp6n2ksgu.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for (i <- 0 until lst.size) {\n            if (set.contains(lst(i)))\
    \ {\n                return false\n            }\n            set += lst(i)\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptxv4qfib.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800783
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val map = new mutable.HashMap[Long,\
    \ Int]()\n        val map2 = new mutable.HashMap[Long, Int]()\n        val map3\
    \ = new mutable.HashMap[Long, Int]()\n        val map4 = new mutable.HashMap[Long,\
    \ Int]()\n        val map5 = new mutable.HashMap[Long, Int]()\n        val map6\
    \ = new mutable.HashMap[Long, Int]()\n        val map7 = new mutable.HashMap[Long,\
    \ Int]()\n        val map8 = new mutable.HashMap[Long, Int]()\n        val map9\
    \ = new mutable.HashMap[Long, Int]()\n        val map10 = new mutable.HashMap[Long,\
    \ Int]()\n        val map11 = new mutable.HashMap[Long, Int]()\n        val map12\
    \ = new mutable.HashMap[Long, Int]()\n        val map13 = new mutable.HashMap[Long,\
    \ Int]()\n        val map14 = new mutable.HashMap[Long, Int]()\n        val map15\
    \ = new mutable.HashMap[Long, Int]()\n        val map16 = new mutable.HashMap[Long,\
    \ Int]()\n        val map17 = new mutable.HashMap[Long, Int]()\n        val map18\
    \ = new mutable.HashMap[Long, Int]()\n        val map19 = new mutable.HashMap[Long,\
    \ Int]()\n        val map20 = new mutable.HashMap[Long, Int]()\n        val map21\
    \ = new mutable.HashMap[Long, Int]()\n        val map22 = new mutable.HashMap[Long,\
    \ Int]()\n        val map23 = new mutable.HashMap[Long, Int]()\n        val map24\
    \ = new mutable.HashMap[Long, Int]()\n        val map25 = new mutable.HashMap[Long,\
    \ Int]()\n        val map26 = new mutable.HashMap[Long, Int]()\n        val map27\
    \ = new mutable.HashMap[Long, Int]()\n        val map28 = new mutable.HashMap[Long,\
    \ Int]()\n        val map29 = new mutable.HashMap[Long, Int]()\n        val map30\
    \ = new mutable.HashMap[Long, Int]()\n        val map31 = new mutable.HashMap[Long,\
    \ Int]()\n        val map32 = new mutable.HashMap[Long, Int]()\n        val map33\
    \ = new mutable.HashMap[Long, Int]()\n        val map34 = new mutable.HashMap[Long,\
    \ Int]()\n        \n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnnhliokj.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnnhliokj.scala:18:23\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mmap2\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpnnhliokj.scala:19:23 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmap3\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnnhliokj.scala:20:23 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnnhliokj.scala:21:23\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mmap5\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Fo"
  stdout: ''
  timestamp: 1659800786
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val seen = mutable.HashSet[Long]()\n\
    \        val sorted = lst.sortWith(_ < _)\n        val duplicates = lst.groupBy(x\
    \ => x).filter(_._2.size > 1).map(_._2)\n        val duplicatesCount = duplicates.size\n\
    \        val notSorted = lst.filter(_ < 0)\n        val notSortedCount = notSorted.size\n\
    \        val notSortedNotDuplicates = notSorted.filter(_ != duplicates.head._1)\n\
    \        val notSortedNotDuplicatesCount = notSortedNotDuplicates.size\n     \
    \   val notSortedNotDuplicatesNotSorted = notSortedNotDuplicates.filter(_ != sorted.head._1)\n\
    \        val notSortedNotDuplicatesNotSortedCount = notSortedNotDuplicatesNotSorted.size\n\
    \        val notSortedNotDuplicatesNotSortedNotDuplicates = notSortedNotDuplicatesNotSorted.filter(_\
    \ != duplicates.head._1)\n        val notSortedNotDuplicatesNotSortedNotDuplicatesCount\
    \ = notSortedNotDuplicatesNotSortedNotDuplicates.size\n        val notSortedNotDuplicatesNotSortedNotDuplicatesNotSorted\
    \ = notSortedNotDuplicatesNotSortedNotDuplicates.filter(_ != sorted.head._1)\n\
    \        val notSortedNotDuplicatesNotSortedNotDuplicatesNotSortedCount = notSortedNotDuplicatesNotSortedNotDuplicatesNotSorted.size\n\
    \        val notSortedNotDuplicatesNotSortedNotDuplicatesNotSortedNotDuplicates\
    \ = notSortedNotDuplicatesNotSortedNotDuplicatesNotSorted.filter(_ != duplicates.head._1)\n\
    \        val notSortedNotDuplicatesNotSortedNotDuplicatesNotSortedNotDuplicatesCount\
    \ = notSortedNotDuplicatesNotSortedNotDuplicatesNotSortedNotDuplicates.size\n\
    \        val notSortedNotDuplicatesNotSortedNotDuplicatesNotSortedNotDuplicatesNotSorted\
    \ = notSortedNotDuplicatesNotSortedNotDuplicatesNotSortedNotDuplicates.filter(_\
    \ != sorted.head._1)\n        val notSortedNotDuplicatesNotSortedNotDuplicatesNotSortedNotDuplicatesNotSortedCount\
    \ = notSortedNotDuplicatesNotSortedNotDuplicatesNotSortedNotDuplicatesNotSorted.size\n\
    \        val notSortedNotDuplicatesNotSortedNotDuplicatesNotSortedNotDuplicatesNotSortedNotDuplicates\
    \ = notSortedNotDuplicatesNotSortedNotDuplicatesNotSortedNotDuplicatesNotSortedNotDuplicatesNotSorted.filter(_\
    \ != duplicates.head._1)\n        val notSortedNotDuplicatesNotSortedNotDuplicatesNotSortedNotDuplicatesNotSortedNotDuplicatesCount\
    \ = notSortedNotDuplicatesNot\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu6t6yg4x.scala:17:19 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mseen\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpu6t6yg4x.scala:23:75 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnotSortedNotDuplicates\e\
    [0m = notSorted.filter(_ != duplicates.head._1)\n\e[31m\e[31m   |\e[0m       \
    \                                                    ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  value _1 is not a member of List[Long]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu6t6yg4x.scala:25:93 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mnotSortedNotDuplicatesNotSorted\e\
    [0m = notSortedNotDuplicates.filter(_ != sorted.head._1)\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \     ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                   \
    \     value _1 is not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpu6t6yg4x.scala:27:119 -----------------------\e[0m\e[0m\n\e[31m27 |\e\
    [0m        \e[33mval\e[0m \e[36mnotSortedNotDuplicatesNotSortedNotDuplicates\e\
    [0m = notSortedNotDuplicatesNotSorted.filter(_ != duplicates.head._1)\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                       ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                  value _1 is not a member of List[Long]\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpu6t6yg4x.scala:29:137 -----------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mnotSortedNotDuplicatesNotSortedNotDuplicatesNotSorted\e\
    [0m = notSortedNotDuplicatesNotSortedNotDuplicates.filter(_ != sorted.head._1)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                        "
  stdout: ''
  timestamp: 1659800787
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.length){\n            if(!set.contains(lst(i))){\n\
    \                set.add(lst(i))\n                return true\n            }\n\
    \        }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcpq_8hhm.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800783
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val hashSet = mutable.HashSet[Long]()\n\
    \        val hashSet2 = mutable.HashSet[Long]()\n        val hashSet3 = mutable.HashSet[Long]()\n\
    \        val hashSet4 = mutable.HashSet[Long]()\n        val hashSet5 = mutable.HashSet[Long]()\n\
    \        val hashSet6 = mutable.HashSet[Long]()\n        val hashSet7 = mutable.HashSet[Long]()\n\
    \        val hashSet8 = mutable.HashSet[Long]()\n        val hashSet9 = mutable.HashSet[Long]()\n\
    \        val hashSet10 = mutable.HashSet[Long]()\n        val hashSet11 = mutable.HashSet[Long]()\n\
    \        val hashSet12 = mutable.HashSet[Long]()\n        val hashSet13 = mutable.HashSet[Long]()\n\
    \        val hashSet14 = mutable.HashSet[Long]()\n        val hashSet15 = mutable.HashSet[Long]()\n\
    \        val hashSet16 = mutable.HashSet[Long]()\n        val hashSet17 = mutable.HashSet[Long]()\n\
    \        val hashSet18 = mutable.HashSet[Long]()\n        val hashSet19 = mutable.HashSet[Long]()\n\
    \        val hashSet20 = mutable.HashSet[Long]()\n        val hashSet21 = mutable.HashSet[Long]()\n\
    \        val hashSet22 = mutable.HashSet[Long]()\n        val hashSet23 = mutable.HashSet[Long]()\n\
    \        val hashSet24 = mutable.HashSet[Long]()\n        val hashSet25 = mutable.HashSet[Long]()\n\
    \        val hashSet26 = mutable.HashSet[Long]()\n        val hashSet27 = mutable.HashSet[Long]()\n\
    \        val hashSet28 = mutable.HashSet[Long]()\n        val hashSet29 = mutable.HashSet[Long]()\n\
    \        val hashSet30 = mutable.HashSet[Long]()\n        val hashSet31 = mutable.HashSet[Long]()\n\
    \        val hashSet32 = mutable.HashSet[Long]()\n        val hashSet33 = mutable.HashSet[Long]()\n\
    \        val hashSet34 = mutable.HashSet[Long]()\n        val hashSet35 = mutable.HashSet[Long]()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mhashSet\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mhashSet2\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:19:23 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mhashSet3\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:20:23 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mhashSet4\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mhashSet5\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:22:23 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mhas"
  stdout: ''
  timestamp: 1659800770
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set += lst(i)\n    \
    \    }\n        return true\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi29jfr25.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        val list = new mutable.ArrayBuffer[Long]()\n        for(i <- 0 until\
    \ lst.length){\n            if(set.contains(lst(i))){\n                return\
    \ false\n            }\n            list += lst(i)\n            set += lst(i)\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm93vz5ql.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm93vz5ql.scala:18:23\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mlist\e[0m = \e[33mnew\e[0m mutable.ArrayBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800783
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.length)\n            if(set.contains(lst(i)))\n\
    \                return false\n            else\n                set += lst(i)\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphna2iagr.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        var i = 0\n       \
    \ var j = 0\n        var isSorted = true\n        while (i < lst.length && j <\
    \ lst.length) {\n            if (lst(i) > lst(j)) {\n                isSorted\
    \ = false\n                break\n            }\n            i += 1\n        \
    \    j += 1\n        }\n        return isSorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpda8f8u6m.scala:23:16 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659800784
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp6n2ksgu.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        val map = new mutable.HashMap[Long, Int]()\n        for(i <- 0 until\
    \ lst.length){\n            val num = lst(i)\n            if(!map.contains(num)){\n\
    \                map.put(num, 1)\n            }else{\n                map.put(num,\
    \ map.get(num) + 1)\n            }\n        }\n        for(i <- 0 until map.size){\n\
    \            val num = map.get(i)\n            if(num > 1){\n                return\
    \ false\n            }\n        }\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwumg3d6s.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwumg3d6s.scala:18:22\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mmap\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800783
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val seen = mutable.HashSet[Long]()\n\
    \        val seenCount = mutable.HashMap[Long, Int]()\n        val result = lst.foldLeft(true){\
    \ (result, elem) =>\n            if (seen.contains(elem)) {\n                false\n\
    \            } else {\n                seen.add(elem)\n                seenCount(elem)\
    \ += 1\n                if (seenCount(elem) == 1) {\n                    true\n\
    \                } else {\n                    false\n                }\n    \
    \        }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmperp85wrm.scala:17:19 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mseen\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmperp85wrm.scala:18:24 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mseenCount\e[0m = mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800783
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp6n2ksgu.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.length)\n            if(set.contains(lst(i)))\n\
    \                return false\n            else\n                set += lst(i)\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphna2iagr.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp6n2ksgu.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp6n2ksgu.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val seen = new mutable.HashSet[Long]()\n\
    \        val sorted = lst.sortWith((x, y) => x < y)\n        val duplicates =\
    \ lst.groupBy(x => x).filter(_._2.size > 1).map(_._1)\n        val duplicatesCount\
    \ = duplicates.size\n        val notDuplicates = lst.filterNot(x => seen.contains(x))\n\
    \        val notDuplicatesCount = notDuplicates.size\n        val notDuplicatesCount\
    \ = notDuplicatesCount + duplicatesCount\n        val notDuplicatesCount = notDuplicatesCount\
    \ + lst.size\n        val notDuplicatesCount = notDuplicatesCount + lst.size -\
    \ duplicatesCount\n        val notDuplicatesCount = notDuplicatesCount + lst.size\
    \ - duplicatesCount - notDuplicatesCount\n        val notDuplicatesCount = notDuplicatesCount\
    \ + lst.size - duplicatesCount - notDuplicatesCount - lst.size\n        val notDuplicatesCount\
    \ = notDuplicatesCount + lst.size - duplicatesCount - notDuplicatesCount - lst.size\
    \ - duplicatesCount\n        val notDuplicatesCount = notDuplicatesCount + lst.size\
    \ - duplicatesCount - notDuplicatesCount - lst.size - duplicatesCount - notDuplicatesCount\n\
    \        val notDuplicatesCount = notDuplicatesCount + lst.size - duplicatesCount\
    \ - notDuplicatesCount - lst.size - duplicatesCount - notDuplicatesCount - lst.size\n\
    \        val notDuplicatesCount = notDuplicatesCount + lst.size - duplicatesCount\
    \ - notDuplicatesCount - lst.size - duplicatesCount - notDuplicatesCount - lst.size\
    \ - duplicatesCount\n        val notDuplicatesCount = notDuplicatesCount + lst.size\
    \ - duplicatesCount - notDuplicatesCount - lst.size - duplicatesCount - notDuplicatesCount\
    \ - lst.size - duplicatesCount - notDuplicatesCount\n        val notDuplicatesCount\
    \ = notDuplicatesCount + lst.size - duplicatesCount - notDuplicatesCount - lst.size\
    \ - duplicatesCount - notDuplicatesCount - lst.size - duplicatesCount - notDuplicatesCount\
    \ - lst.size\n        val notDuplicatesCount = notDuplicatesCount + lst.size -\
    \ duplicatesCount - notDuplicatesCount - lst.size - duplicatesCount - notDuplicatesCount\
    \ - lst.size - duplicatesCount - notDuplicatesCount - lst.size - duplicatesCount\n\
    \        val notDuplicatesCount = notDuplicatesCount + lst.size - duplicatesCount\
    \ - notDuplicatesCount - lst.size - duplicatesCount - notDuplicate\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4mrmdipi.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnotDuplicatesCount\e[0m\
    \ = notDuplicatesCount + duplicatesCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotDuplicatesCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mnotDuplicatesCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp4mrmdipi.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mnotDuplicatesCount\e[0m\
    \ = notDuplicatesCount + lst.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotDuplicatesCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mnotDuplicatesCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp4mrmdipi.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mnotDuplicatesCount\e[0m\
    \ = notDuplicatesCount + lst.size - duplicatesCount\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotDuplicatesCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mnotDuplicatesCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp4mrmdipi.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mnotDuplicatesCount\e[0m\
    \ = notDuplicatesCount + lst.size - duplicatesCount - notDuplicatesCount\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotDuplicatesCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mnotDuplicatesCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all b"
  stdout: ''
  timestamp: 1659800787
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp6n2ksgu.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        val result = new mutable.ArrayBuffer[Long]()\n        lst.foreach(x =>\
    \ if (set.contains(x)) result.add(x) else set.add(x))\n        result.size ==\
    \ lst.size && result.forall(x => x == lst(0))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp12c9it6_.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp12c9it6_.scala:18:25\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ArrayBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800785
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.length)\n            set.add(lst(i))\n        set.size\
    \ == lst.length\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpffiria0q.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800787
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val map = new mutable.HashMap[Long,\
    \ Int]()\n        for(i <- 0 until lst.length){\n            val key = lst(i)\n\
    \            if(map.contains(key)){\n                map.update(key, map.get(key)\
    \ + 1)\n            }else{\n                map.update(key, 1)\n            }\n\
    \        }\n        val result = map.values.toList.forall(x => x == lst.length)\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp20zrlazk.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800779
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp6n2ksgu.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        val len = lst.length\n        for(i <- 0 until len) {\n            if(set.contains(lst(i)))\
    \ {\n                return false\n            }\n            set.add(lst(i))\n\
    \        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm2p756l_.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.length)\n            if(set.contains(lst(i)))\n\
    \                return false\n            else\n                set += lst(i)\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphna2iagr.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp6n2ksgu.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.length){\n            if(set.contains(lst(i))){\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxnh2aba6.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        var i = 0\n       \
    \ var j = 0\n        var isSorted = true\n        while (i < lst.size) {\n   \
    \         if (lst(i) > lst(j)) {\n                isSorted = false\n         \
    \       break\n            }\n            i += 1\n            j += 1\n       \
    \ }\n        return isSorted\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2dx0tdwv.scala:23:16 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp6n2ksgu.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val map = new mutable.HashMap[Long,\
    \ Int]()\n        val set = new mutable.HashSet[Long]()\n        for(i <- 0 until\
    \ lst.size) {\n            val key = lst(i)\n            if(map.contains(key))\
    \ {\n                map.get(key) += 1\n            } else {\n               \
    \ map.put(key, 1)\n                set.add(key)\n            }\n        }\n  \
    \      if(set.size == lst.size) {\n            true\n        } else {\n      \
    \      false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9l8l1c2s.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9l8l1c2s.scala:18:22\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mset\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800787
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp6n2ksgu.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        for (i <- 0 until lst.size) {\n            if (set(i) == lst(i)) {\n\
    \                return false\n            }\n            set += lst(i)\n    \
    \    }\n        return true\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprxkogshs.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800787
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val map = new mutable.HashMap[Long,\
    \ Int]()\n        val set = new mutable.HashSet[Long]()\n        for(i <- 0 until\
    \ lst.length){\n            val key = lst(i)\n            if(!map.contains(key)){\n\
    \                map.put(key, 1)\n                set.add(key)\n            }else{\n\
    \                map.put(key, map.get(key) + 1)\n            }\n        }\n  \
    \      for(i <- 0 until lst.length){\n            val key = lst(i)\n         \
    \   if(map.get(key) == 1){\n                return false\n            }\n    \
    \    }\n        return true\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphfti38zn.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphfti38zn.scala:18:22\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mset\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800788
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        val set2 = new mutable.HashSet[Long]()\n        for(i <- 0 until lst.size)\
    \ {\n            if(set.contains(lst(i))) {\n                set2.add(lst(i))\n\
    \            }\n            else {\n                set.add(lst(i))\n        \
    \    }\n        }\n        if(set2.size == lst.size) {\n            return true\n\
    \        }\n        else {\n            return false\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3o6sca_2.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3o6sca_2.scala:18:23\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mset2\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800789
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val seen = mutable.HashSet[Long]()\n\
    \        val sorted = lst.sortWith(_ < _)\n        val duplicates = lst.groupBy(x\
    \ => x).filter(_._2.size > 1).map(_._1)\n        val duplicatesCount = duplicates.size\n\
    \        val notDuplicates = lst.filterNot(x => seen.contains(x))\n        val\
    \ notDuplicatesCount = notDuplicates.size\n        val notDuplicatesCount2 = notDuplicates.groupBy(x\
    \ => x).filter(_._2.size > 1).map(_._1).size\n        val notDuplicatesCount3\
    \ = notDuplicates.groupBy(x => x).filter(_._2.size > 1).map(_._1).size\n     \
    \   val notDuplicatesCount4 = notDuplicates.groupBy(x => x).filter(_._2.size >\
    \ 1).map(_._1).size\n        val notDuplicatesCount5 = notDuplicates.groupBy(x\
    \ => x).filter(_._2.size > 1).map(_._1).size\n        val notDuplicatesCount6\
    \ = notDuplicates.groupBy(x => x).filter(_._2.size > 1).map(_._1).size\n     \
    \   val notDuplicatesCount7 = notDuplicates.groupBy(x => x).filter(_._2.size >\
    \ 1).map(_._1).size\n        val notDuplicatesCount8 = notDuplicates.groupBy(x\
    \ => x).filter(_._2.size > 1).map(_._1).size\n        val notDuplicatesCount9\
    \ = notDuplicates.groupBy(x => x).filter(_._2.size > 1).map(_._1).size\n     \
    \   val notDuplicatesCount10 = notDuplicates.groupBy(x => x).filter(_._2.size\
    \ > 1).map(_._1).size\n        val notDuplicatesCount11 = notDuplicates.groupBy(x\
    \ => x).filter(_._2.size > 1).map(_._1).size\n        val notDuplicatesCount12\
    \ = notDuplicates.groupBy(x => x).filter(_._2.size > 1).map(_._1).size\n     \
    \   val notDuplicatesCount13 = notDuplicates.groupBy(x => x).filter(_._2.size\
    \ > 1).map(_._1).size\n        val notDuplicatesCount14 = notDuplicates.groupBy(x\
    \ => x).filter(_._2.size > 1).map(_._1).size\n        val notDuplicatesCount15\
    \ = notDuplicates.groupBy(x => x).filter(_._2.size > 1).map(_._1).size\n     \
    \   val notDuplicatesCount16 = notDuplicates.groupBy(x => x).filter(_._2.size\
    \ > 1).map(_._1).size\n        val notDuplicatesCount17 = notDuplicates.groupBy(x\
    \ => x).filter(_._2.\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz3vzi8d6.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpz3vzi8d6.scala:17:19 ------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mseen\e[0m = mutable.HashSet[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpz3vzi8d6.scala:39:5 ---------------------\e[0m\e\
    [0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659800792
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val map = new mutable.HashMap[Long,\
    \ Int]()\n        val listSize = lst.length\n        var i = 0\n        while\
    \ (i < listSize) {\n            val curr = lst(i)\n            val count = map.getOrElseUpdate(curr,\
    \ 0)\n            map.put(curr, count + 1)\n            i += 1\n        }\n  \
    \      val isSorted = map.size == listSize\n        return isSorted\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaovbvxu0.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800790
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(!set.isEmpty && lst(i) !=\
    \ set.last)\n                return false\n            set += lst(i)\n       \
    \ }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjkdxe9i_.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800790
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(!set.contains(lst(i))) {\n\
    \                set.add(lst(i))\n                return true\n            }\n\
    \        }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1eepicaj.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800775
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        val set2 = new mutable.HashSet[Long]()\n        val set3 = new mutable.HashSet[Long]()\n\
    \        val set4 = new mutable.HashSet[Long]()\n        val set5 = new mutable.HashSet[Long]()\n\
    \        val set6 = new mutable.HashSet[Long]()\n        val set7 = new mutable.HashSet[Long]()\n\
    \        val set8 = new mutable.HashSet[Long]()\n        val set9 = new mutable.HashSet[Long]()\n\
    \        val set10 = new mutable.HashSet[Long]()\n        val set11 = new mutable.HashSet[Long]()\n\
    \        val set12 = new mutable.HashSet[Long]()\n        val set13 = new mutable.HashSet[Long]()\n\
    \        val set14 = new mutable.HashSet[Long]()\n        val set15 = new mutable.HashSet[Long]()\n\
    \        val set16 = new mutable.HashSet[Long]()\n        val set17 = new mutable.HashSet[Long]()\n\
    \        val set18 = new mutable.HashSet[Long]()\n        val set19 = new mutable.HashSet[Long]()\n\
    \        val set20 = new mutable.HashSet[Long]()\n        val set21 = new mutable.HashSet[Long]()\n\
    \        val set22 = new mutable.HashSet[Long]()\n        val set23 = new mutable.HashSet[Long]()\n\
    \        val set24 = new mutable.HashSet[Long]()\n        val set25 = new mutable.HashSet[Long]()\n\
    \        val set26 = new mutable.HashSet[Long]()\n        val set27 = new mutable.HashSet[Long]()\n\
    \        val set28 = new mutable.HashSet[Long]()\n        val set29 = new mutable.HashSet[Long]()\n\
    \        val set30 = new mutable.HashSet[Long]()\n        val set31 = new mutable.HashSet[Long]()\n\
    \        val set32 = new mutable.HashSet[Long]()\n        val set33 = new mutable.HashSet[Long]()\n\
    \        val set34 = new mutable.HashSet[Long]()\n        val set35 = new mutable.HashSet[Long]()\n\
    \        val set36 = new mutable.HashSet[Long]()\n        val set37 = new mutable.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpra35pxy9.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpra35pxy9.scala:17:22 ------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpra35pxy9.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset2\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpra35pxy9.scala:19:23\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mset3\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpra35pxy9.scala:20:23 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m        \e[33mval\e[0m \e[36mset4\e[0m = \e[33mnew\e[0m mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpra35pxy9.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mset5\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       No"
  stdout: ''
  timestamp: 1659800771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val map = new mutable.HashMap[Long,\
    \ Int]()\n        val map2 = new mutable.HashMap[Long, Int]()\n        val map3\
    \ = new mutable.HashMap[Long, Int]()\n        val map4 = new mutable.HashMap[Long,\
    \ Int]()\n        val map5 = new mutable.HashMap[Long, Int]()\n        val map6\
    \ = new mutable.HashMap[Long, Int]()\n        val map7 = new mutable.HashMap[Long,\
    \ Int]()\n        val map8 = new mutable.HashMap[Long, Int]()\n        val map9\
    \ = new mutable.HashMap[Long, Int]()\n        val map10 = new mutable.HashMap[Long,\
    \ Int]()\n        val map11 = new mutable.HashMap[Long, Int]()\n        val map12\
    \ = new mutable.HashMap[Long, Int]()\n        val map13 = new mutable.HashMap[Long,\
    \ Int]()\n        val map14 = new mutable.HashMap[Long, Int]()\n        val map15\
    \ = new mutable.HashMap[Long, Int]()\n        val map16 = new mutable.HashMap[Long,\
    \ Int]()\n        val map17 = new mutable.HashMap[Long, Int]()\n        val map18\
    \ = new mutable.HashMap[Long, Int]()\n        val map19 = new mutable.HashMap[Long,\
    \ Int]()\n        val map20 = new mutable.HashMap[Long, Int]()\n        val map21\
    \ = new mutable.HashMap[Long, Int]()\n        val map22 = new mutable.HashMap[Long,\
    \ Int]()\n        val map23 = new mutable.HashMap[Long, Int]()\n        val map24\
    \ = new mutable.HashMap[Long, Int]()\n        val map25 = new mutable.HashMap[Long,\
    \ Int]()\n        val map26 = new mutable.HashMap[Long, Int]()\n        val map27\
    \ = new mutable.HashMap[Long, Int]()\n        val map28 = new mutable.HashMap[Long,\
    \ Int]()\n        val map29 = new mutable.HashMap[Long, Int]()\n        val map30\
    \ = new mutable.HashMap[Long, Int]()\n        val map31 = new mutable.HashMap[Long,\
    \ Int]()\n        val map32 = new mutable.HashMap[Long, Int]()\n        val map33\
    \ = new mutable.HashMap[Long, Int]()\n        val map34 = new mutable.HashMap[Long,\
    \ Int]()\n        \n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnnhliokj.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnnhliokj.scala:18:23\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mmap2\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpnnhliokj.scala:19:23 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmap3\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnnhliokj.scala:20:23 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnnhliokj.scala:21:23\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mmap5\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Fo"
  stdout: ''
  timestamp: 1659800786
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val map = new mutable.HashMap[Long,\
    \ Int]()\n        for(i <- 0 until lst.length){\n            val key = lst(i)\n\
    \            if(!map.contains(key)){\n                map.put(key, 0)\n      \
    \      }\n            map.put(key, map.get(key) + 1)\n        }\n        val keys\
    \ = map.keys\n        val values = map.values\n        val isSorted = keys.toList.sortWith(_\
    \ < _).forall(x => values(x) == 1)\n        if(isSorted){\n            true\n\
    \        }else{\n            false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp422pq_sx.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800791
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val map = new mutable.HashMap[Long,\
    \ Int]()\n        val set = new mutable.HashSet[Long]()\n        val map2 = new\
    \ mutable.HashMap[Long, Int]()\n        val set2 = new mutable.HashSet[Long]()\n\
    \        val map3 = new mutable.HashMap[Long, Int]()\n        val set3 = new mutable.HashSet[Long]()\n\
    \        val map4 = new mutable.HashMap[Long, Int]()\n        val set4 = new mutable.HashSet[Long]()\n\
    \        val map5 = new mutable.HashMap[Long, Int]()\n        val set5 = new mutable.HashSet[Long]()\n\
    \        val map6 = new mutable.HashMap[Long, Int]()\n        val set6 = new mutable.HashSet[Long]()\n\
    \        val map7 = new mutable.HashMap[Long, Int]()\n        val set7 = new mutable.HashSet[Long]()\n\
    \        val map8 = new mutable.HashMap[Long, Int]()\n        val set8 = new mutable.HashSet[Long]()\n\
    \        val map9 = new mutable.HashMap[Long, Int]()\n        val set9 = new mutable.HashSet[Long]()\n\
    \        val map10 = new mutable.HashMap[Long, Int]()\n        val set10 = new\
    \ mutable.HashSet[Long]()\n        val map11 = new mutable.HashMap[Long, Int]()\n\
    \        val set11 = new mutable.HashSet[Long]()\n        val map12 = new mutable.HashMap[Long,\
    \ Int]()\n        val set12 = new mutable.HashSet[Long]()\n        val map13 =\
    \ new mutable.HashMap[Long, Int]()\n        val set13 = new mutable.HashSet[Long]()\n\
    \        val map14 = new mutable.HashMap[Long, Int]()\n        val set14 = new\
    \ mutable.HashSet[Long]()\n        val map15 = new mutable.HashMap[Long, Int]()\n\
    \        val set15 = new mutable.HashSet[Long]()\n        val map16 = new mutable.HashMap[Long,\
    \ Int]()\n        val set16 = new mutable.HashSet[Long]()\n        val map17 =\
    \ new mutable.HashMap[Long, Int]()\n        val set17 = new mutable.HashSet[Long]()\n\
    \        val map18 = new mutable.HashMap[Long, Int]()\n        val set18 = new\
    \ mut\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg1xla8wk.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg1xla8wk.scala:18:22\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mset\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpg1xla8wk.scala:19:23 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m        \e[33mval\e[0m \e[36mmap2\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg1xla8wk.scala:20:23 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mset2\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg1xla8wk.scala:21:23\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mmap3\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpg1xla8wk.sca"
  stdout: ''
  timestamp: 1659800792
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp6n2ksgu.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.length){\n            if(set.contains(lst(i))){\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxnh2aba6.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for (i <- 0 until lst.size) {\n            if (set.contains(lst(i)))\
    \ {\n                return false\n            }\n            set += lst(i)\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptxv4qfib.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800783
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(!set.contains(lst(i))) {\n\
    \                set.add(lst(i))\n            } else {\n                return\
    \ false\n            }\n        }\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpywtjjgc1.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp6n2ksgu.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set += lst(i)\n    \
    \    }\n        return true\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi29jfr25.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val map = new mutable.HashMap[Long,\
    \ Int]()\n        val set = new mutable.HashSet[Long]()\n        for(i <- 0 until\
    \ lst.size) {\n            val key = lst(i)\n            if(map.contains(key))\
    \ {\n                map.get(key) += 1\n            } else {\n               \
    \ map.put(key, 1)\n                set.add(key)\n            }\n        }\n  \
    \      val isSorted = (0 until lst.size).forall(i => map.getOrElse(lst(i), 0)\
    \ == map.get(lst(i)))\n        if(set.size == lst.size) {\n            true\n\
    \        } else {\n            false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpucw66x98.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpucw66x98.scala:18:22\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mset\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800791
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set += lst(i)\n    \
    \    }\n        return true\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi29jfr25.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        val list = lst.sortWith(_ < _)\n        list.foreach(x => set += x)\n\
    \        set.size == lst.size\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_tcnzjwv.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800790
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for (i <- 0 until lst.size) {\n            if (set.contains(lst(i)))\
    \ {\n                return false\n            }\n            set += lst(i)\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptxv4qfib.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800783
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.length){\n            if(set.contains(lst(i))){\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxnh2aba6.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        val len = lst.length\n        for(i <- 0 until len) {\n            if(!set.contains(lst(i)))\
    \ {\n                set.add(lst(i))\n                return true\n          \
    \  }\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_zvqrnlu.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800791
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        var i = 0\n       \
    \ var j = 0\n        var isSorted = true\n        while (i < lst.size && isSorted)\
    \ {\n            isSorted = false\n            while (j < lst.size && lst(i) <\
    \ lst(j)) {\n                j += 1\n            }\n            if (j < lst.size)\
    \ {\n                isSorted = true\n                i += 1\n            }\n\
    \        }\n        return isSorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnsth7_xn.scala:35)\n\tat Problem.main(tmpnsth7_xn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            else {\n           \
    \     set.add(lst(i))\n            }\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpagrgk4ii.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        var i = 0\n       \
    \ var j = 0\n        var isSorted = true\n        while (i < lst.size) {\n   \
    \         if (lst(i) < lst(j)) {\n                isSorted = false\n         \
    \       break\n            }\n            i += 1\n            j += 1\n       \
    \ }\n        return isSorted\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_uat0pyz.scala:23:16 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659800791
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        val set2 = new mutable.HashSet[Long]()\n        for(i <- 0 until lst.size)\
    \ {\n            if(set.contains(lst(i))) {\n                set2.add(lst(i))\n\
    \            }\n            else {\n                set.add(lst(i))\n        \
    \    }\n        }\n        if(set2.size == lst.size) {\n            return true\n\
    \        }\n        else {\n            return false\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3o6sca_2.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3o6sca_2.scala:18:23\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mset2\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800789
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        var i = 0\n       \
    \ var j = 0\n        var isSorted = true\n        while(i < lst.size && isSorted)\
    \ {\n            isSorted = false\n            for(j <- i to lst.size - 1) {\n\
    \                if(lst(j) < lst(j + 1)) {\n                    isSorted = true\n\
    \                    break\n                }\n            }\n            i +=\
    \ 1\n        }\n        return isSorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbybn_8mv.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800792
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp6n2ksgu.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val hashSet = mutable.HashSet[Long]()\n\
    \        val hashSet2 = mutable.HashSet[Long]()\n        val hashSet3 = mutable.HashSet[Long]()\n\
    \        val hashSet4 = mutable.HashSet[Long]()\n        val hashSet5 = mutable.HashSet[Long]()\n\
    \        val hashSet6 = mutable.HashSet[Long]()\n        val hashSet7 = mutable.HashSet[Long]()\n\
    \        val hashSet8 = mutable.HashSet[Long]()\n        val hashSet9 = mutable.HashSet[Long]()\n\
    \        val hashSet10 = mutable.HashSet[Long]()\n        val hashSet11 = mutable.HashSet[Long]()\n\
    \        val hashSet12 = mutable.HashSet[Long]()\n        val hashSet13 = mutable.HashSet[Long]()\n\
    \        val hashSet14 = mutable.HashSet[Long]()\n        val hashSet15 = mutable.HashSet[Long]()\n\
    \        val hashSet16 = mutable.HashSet[Long]()\n        val hashSet17 = mutable.HashSet[Long]()\n\
    \        val hashSet18 = mutable.HashSet[Long]()\n        val hashSet19 = mutable.HashSet[Long]()\n\
    \        val hashSet20 = mutable.HashSet[Long]()\n        val hashSet21 = mutable.HashSet[Long]()\n\
    \        val hashSet22 = mutable.HashSet[Long]()\n        val hashSet23 = mutable.HashSet[Long]()\n\
    \        val hashSet24 = mutable.HashSet[Long]()\n        val hashSet25 = mutable.HashSet[Long]()\n\
    \        val hashSet26 = mutable.HashSet[Long]()\n        val hashSet27 = mutable.HashSet[Long]()\n\
    \        val hashSet28 = mutable.HashSet[Long]()\n        val hashSet29 = mutable.HashSet[Long]()\n\
    \        val hashSet30 = mutable.HashSet[Long]()\n        val hashSet31 = mutable.HashSet[Long]()\n\
    \        val hashSet32 = mutable.HashSet[Long]()\n        val hashSet33 = mutable.HashSet[Long]()\n\
    \        val hashSet34 = mutable.HashSet[Long]()\n        val hashSet35 = mutable.HashSet[Long]()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mhashSet\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mhashSet2\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:19:23 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mhashSet3\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:20:23 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mhashSet4\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mhashSet5\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:22:23 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mhas"
  stdout: ''
  timestamp: 1659800770
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp6n2ksgu.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp6n2ksgu.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val seen = mutable.HashSet[Long]()\n\
    \        val seenCount = mutable.HashMap[Long, Int]()\n        val result = lst.foldLeft(true)\
    \ {\n            (res, x) => {\n                if (seen(x)) {\n             \
    \       false\n                } else {\n                    val count = seenCount.get(x)\n\
    \                    if (count == null) {\n                        seenCount.put(x,\
    \ 1)\n                    } else {\n                        seenCount.put(x, count\
    \ + 1)\n                    }\n                    true\n                }\n \
    \           }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzgdoowih.scala:17:19 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mseen\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpzgdoowih.scala:18:24 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mseenCount\e[0m = mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800792
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val seen = mutable.HashSet[Long]()\n\
    \        val sorted = lst.sortWith(_ < _)\n        val duplicates = lst.groupBy(x\
    \ => x).filter(_._2.size > 1).map(_._2)\n        val duplicated = duplicates.map(x\
    \ => lst.count(_ == x))\n        val duplicated = duplicated.filter(_ > 1)\n \
    \       val duplicated = duplicated.map(_ / lst.size)\n        val duplicated\
    \ = duplicated.filter(_ > 1)\n        val duplicated = duplicated.map(_ / lst.size)\n\
    \        val duplicated = duplicated.filter(_ > 1)\n        val duplicated = duplicated.map(_\
    \ / lst.size)\n        val duplicated = duplicated.filter(_ > 1)\n        val\
    \ duplicated = duplicated.map(_ / lst.size)\n        val duplicated = duplicated.filter(_\
    \ > 1)\n        val duplicated = duplicated.map(_ / lst.size)\n        val duplicated\
    \ = duplicated.filter(_ > 1)\n        val duplicated = duplicated.map(_ / lst.size)\n\
    \        val duplicated = duplicated.filter(_ > 1)\n        val duplicated = duplicated.map(_\
    \ / lst.size)\n        val duplicated = duplicated.filter(_ > 1)\n        val\
    \ duplicated = duplicated.map(_ / lst.size)\n        val duplicated = duplicated.filter(_\
    \ > 1)\n        val duplicated = duplicated.map(_ / lst.size)\n        val duplicated\
    \ = duplicated.filter(_ > 1)\n        val duplicated = duplicated.map(_ / lst.size)\n\
    \        val duplicated = duplicated.filter(_ > 1)\n        val duplicated = duplicated.map(_\
    \ / lst.size)\n        val duplicated = duplicated.filter(_ > 1)\n        val\
    \ duplicated = duplicated.map(_ / lst.size)\n        val duplicated = duplicated.filter(_\
    \ > 1)\n        val duplicated = duplicated.map(_ / lst.size)\n        val duplicated\
    \ = duplicated.filter(_ > 1)\n        val duplicated = duplicated.map(_ / lst.size)\n\
    \        val duplicated = duplicated.filter(_ > 1)\n        val duplicated = duplicated.map(_\
    \ / lst.size)\n        val duplicated = duplicated.filter(_ > 1)\n        val\
    \ duplicated = duplicated.map(_ / lst.size)\n        val duplicated = duplicated.filter(_\
    \ > 1)\n        val duplicated = duplicated.map(_ / lst.size)\n        val duplicated\
    \ = duplicated.filter(_ > 1)\n        val duplicated = duplicated.map(_ / lst.size)\n\
    \        val duplicated = duplicated.filter(_ > 1)\n        val duplicated = duplicate\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3v70fytm.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mduplicated\e[0m = duplicated.filter(_\
    \ > \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mduplicated is already defined as \e[33mvalue\e[0m \e[35mduplicated\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3v70fytm.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mduplicated\e[0m = duplicated.map(_ /\
    \ lst.size)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mduplicated is already defined as \e[33mvalue\e[0m \e[35mduplicated\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3v70fytm.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mduplicated\e[0m = duplicated.filter(_\
    \ > \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mduplicated is already defined as \e[33mvalue\e[0m \e[35mduplicated\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3v70fytm.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mduplicated\e[0m = duplicated.map(_ /\
    \ lst.size)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mduplicated is already defined as \e[33mvalue\e[0m \e[35mduplicated\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3v70fytm.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mduplicated\e[0m = duplicated.filter(_\
    \ > \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   "
  stdout: ''
  timestamp: 1659800793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        val result = lst.foldLeft(false)((acc, x) => {\n            if (set.contains(x))\
    \ {\n                false\n            } else {\n                set.add(x)\n\
    \                acc && true\n            }\n        })\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyhfrg9g6.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800792
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set += lst(i)\n    \
    \    }\n        return true\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi29jfr25.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(!set.contains(lst(i))) {\n\
    \                set.add(lst(i))\n                return true\n            }\n\
    \        }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv4grzl1t.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800768
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val seen = new mutable.HashSet[Long]()\n\
    \        val sorted = lst.sortWith(_.compareTo(_) < 0)\n        val duplicates\
    \ = lst.groupBy(x => x).filter(_._2.size > 1).map(_._1)\n        val duplicatesCount\
    \ = duplicates.size\n        val notSorted = lst.filterNot(x => seen.contains(x))\n\
    \        val notSortedCount = notSorted.size\n        val notSortedNotDuplicates\
    \ = notSorted.filterNot(x => duplicates.contains(x))\n        val notSortedNotDuplicatesCount\
    \ = notSortedNotDuplicates.size\n        val notSortedNotDuplicatesNotSorted =\
    \ notSortedNotDuplicates.filterNot(x => sorted.contains(x))\n        val notSortedNotDuplicatesNotSortedCount\
    \ = notSortedNotDuplicatesNotSorted.size\n        val notSortedNotDuplicatesNotSortedNotDuplicates\
    \ = notSortedNotDuplicatesNotSorted.filterNot(x => duplicates.contains(x))\n \
    \       val notSortedNotDuplicatesNotSortedNotDuplicatesCount = notSortedNotDuplicatesNotSortedNotDuplicates.size\n\
    \        val notSortedNotDuplicatesNotSortedNotDuplicatesNotSorted = notSortedNotDuplicatesNotSortedNotDuplicates.filterNot(x\
    \ => sorted.contains(x))\n        val notSortedNotDuplicatesNotSortedNotDuplicatesNotSortedCount\
    \ = notSortedNotDuplicatesNotSortedNotDuplicatesNotSorted.size\n        val notSortedNotDuplicatesNotSortedNotDuplicatesNotSortedNotDuplicates\
    \ = notSortedNotDuplicatesNotSortedNotDuplicatesNotSorted.filterNot(x => duplicates.contains(x))\n\
    \        val notSortedNotDuplicatesNotSortedNotDuplicatesNotSortedNotDuplicatesCount\
    \ = notSortedNotDuplicatesNotSortedNotDuplicatesNotSortedNotDuplicates.size\n\
    \        val notSortedNotDuplicatesNotSortedNotDuplicatesNotSortedNotDuplicatesNotSorted\
    \ = notSortedNotDuplicatesNotSortedNotDuplicatesNotSortedNotDuplicates.filterNot(x\
    \ => sorted.contains(x))\n        val notSortedNotDuplicatesNotSortedNotDuplicatesNotSortedNotDuplicatesNotSortedCount\
    \ = notSortedNotDuplicatesNotSortedNotDuplicatesNotSortedNotDuplicatesNotSorted.size\n\
    \        val notSortedNotDuplicatesNotSortedNotDuplicatesNotSortedNotDuplicatesNotSortedNotDuplicates\
    \ = notSortedNotDuplicatesNotSortedNotDuplicatesNotSortedNotDuplicatesNotSortedNotDuplicatesNotSorted.size\n\
    \        val notSortedNotDuplicatesNotSortedNotDuplicatesNotSortedNotDuplicatesNotSortedNotDuplicates\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9s541b_j.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9s541b_j.scala:17:23\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mseen\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp9s541b_j.scala:23:73 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m        \e[33mval\e[0m \e[36mnotSortedNotDuplicates\e[0m = notSorted.filterNot(\e\
    [36mx\e[0m => duplicates.contains(x))\n\e[31m\e[31m   |\e[0m                 \
    \                                             ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue contains is not a member of scala.collection.immutable.Iterable[Long]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9s541b_j.scala:27:117 -----------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mnotSortedNotDuplicatesNotSortedNotDuplicates\e\
    [0m = notSortedNotDuplicatesNotSorted.filterNot(\e[36mx\e[0m => duplicates.contains(x))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                  ^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue contains is not a member of scala.collection.immutable.Iterable[Long],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.collection asJava\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.collection\
    \ asJava\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9s541b_j.scala:31:161\
    \ -----------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e\
    [36mnotSortedNotDuplicatesNotSortedNotDuplicatesNotSortedNotDuplicates\e[0m =\
    \ notSort"
  stdout: ''
  timestamp: 1659800794
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val seen = mutable.HashSet[Long]()\n\
    \        val sorted = lst.sortWith(_ < _)\n        val duplicates = lst.groupBy(x\
    \ => x).filter(_._2.size > 1).map(_._1)\n        val duplicatesCount = duplicates.size\n\
    \        val notDuplicates = lst.filterNot(x => seen.contains(x))\n        val\
    \ notDuplicatesCount = notDuplicates.size\n        val notDuplicatesCountWithDuplicates\
    \ = notDuplicatesCount + duplicatesCount\n        val notDuplicatesCountWithDuplicatesIsSorted\
    \ = notDuplicatesCountWithDuplicates == sorted.size\n        val notDuplicatesCountWithDuplicatesIsSortedWithDuplicates\
    \ = notDuplicatesCountWithDuplicatesIsSorted && duplicatesCount == duplicates.size\n\
    \        val notDuplicatesCountWithDuplicatesIsSortedWithDuplicatesIsSorted =\
    \ notDuplicatesCountWithDuplicatesIsSorted && duplicatesCount == sorted.size\n\
    \        val notDuplicatesCountWithDuplicatesIsSortedWithDuplicatesIsSortedWithDuplicates\
    \ = notDuplicatesCountWithDuplicatesIsSortedWithDuplicatesIsSorted && duplicatesCount\
    \ == sorted.size\n        val notDuplicatesCountWithDuplicatesIsSortedWithDuplicatesIsSortedWithDuplicatesIsSorted\
    \ = notDuplicatesCountWithDuplicatesIsSortedWithDuplicatesIsSorted && duplicatesCount\
    \ == sorted.size\n        val notDuplicatesCountWithDuplicatesIsSortedWithDuplicatesIsSortedWithDuplicatesIsSortedWithDuplicates\
    \ = notDuplicatesCountWithDuplicatesIsSortedWithDuplicatesIsSortedWithDuplicatesIsSorted\
    \ && duplicatesCount == sorted.size\n        val notDuplicatesCountWithDuplicatesIsSortedWithDuplicatesIsSortedWithDuplicatesIsSortedWithDuplicatesIsSortedWithDuplicates\
    \ = notDuplicatesCountWithDuplicatesIsSortedWithDuplicatesIsSortedWithDuplicatesIsSortedWithDuplicatesIsSorted\
    \ && duplicatesCount == sorted.size\n        val notDuplicatesCountWithDuplicatesIsSortedWithDuplicatesIsSortedWithDuplicatesIsSortedWithDuplicatesIsSortedWithDuplicatesIsSortedWithDuplicates\
    \ = notDuplicatesCountWithDuplicatesIsSortedWithDuplicatesIsSortedWithDuplicatesIsSortedWithDuplicatesIsSortedWithDuplicatesIsSortedWithDuplicatesIsSorted\
    \ && duplicatesCount == sorted.size\n        val notDuplicatesCountWithDuplicatesIsSortedWithDuplicatesIsSortedWithDuplicatesIsSortedWithDuplicatesIsSortedWithDuplicatesIsSortedWithDuplicatesIsSortedWith\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp22ia4u6f.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp22ia4u6f.scala:17:19\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mseen\e[0m = mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m    \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp22ia4u6f.scala:30:135\
    \ -----------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mnotDuplicatesCountWithDuplicatesIsSortedWithDuplicatesIsSortedWithDuplicatesIsSortedWithDuplicatesIsSortedWithDuplicates\e\
    [0m = notDuplicatesCountWithDuplicatesIsSortedWithDuplicatesIsSortedWithDuplicatesIsSortedWithDuplicatesIsSorted\
    \ && duplicatesCount == sorted.size\n\e[31m\e[31m   |\e[0m                   \
    \                                                                            \
    \                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: notDuplicatesCountWithDuplicatesIsSortedWithDuplicatesIsSortedWithDuplicatesIsSortedWithDuplicatesIsSorted\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp22ia4u6f.scala:31:157\
    \ -----------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e\
    [36mnotDuplicatesCountWithDuplicatesIsSortedWithDuplicatesIsSortedWithDuplicatesIsSortedWithDuplicatesIsSortedWithDuplicatesIsSortedWithDuplicates\e\
    [0m = notDuplicatesCountWithDuplicatesIsSortedWithDuplicatesIsSortedWithDuplicatesIsSortedWithDuplicatesIsSortedWithDuplicatesIsSortedWithDuplicatesIsSorted\
    \ && duplicatesCount == sorted.size\n\e[31m\e[31m   |\e[0m                   \
    \                                                                            \
    \             "
  stdout: ''
  timestamp: 1659800793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(!set.contains(lst(i))) {\n\
    \                set.add(lst(i))\n                return true\n            }\n\
    \        }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv4grzl1t.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800768
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val hashSet = mutable.HashSet[Long]()\n\
    \        val hashSet2 = mutable.HashSet[Long]()\n        val hashSet3 = mutable.HashSet[Long]()\n\
    \        val hashSet4 = mutable.HashSet[Long]()\n        val hashSet5 = mutable.HashSet[Long]()\n\
    \        val hashSet6 = mutable.HashSet[Long]()\n        val hashSet7 = mutable.HashSet[Long]()\n\
    \        val hashSet8 = mutable.HashSet[Long]()\n        val hashSet9 = mutable.HashSet[Long]()\n\
    \        val hashSet10 = mutable.HashSet[Long]()\n        val hashSet11 = mutable.HashSet[Long]()\n\
    \        val hashSet12 = mutable.HashSet[Long]()\n        val hashSet13 = mutable.HashSet[Long]()\n\
    \        val hashSet14 = mutable.HashSet[Long]()\n        val hashSet15 = mutable.HashSet[Long]()\n\
    \        val hashSet16 = mutable.HashSet[Long]()\n        val hashSet17 = mutable.HashSet[Long]()\n\
    \        val hashSet18 = mutable.HashSet[Long]()\n        val hashSet19 = mutable.HashSet[Long]()\n\
    \        val hashSet20 = mutable.HashSet[Long]()\n        val hashSet21 = mutable.HashSet[Long]()\n\
    \        val hashSet22 = mutable.HashSet[Long]()\n        val hashSet23 = mutable.HashSet[Long]()\n\
    \        val hashSet24 = mutable.HashSet[Long]()\n        val hashSet25 = mutable.HashSet[Long]()\n\
    \        val hashSet26 = mutable.HashSet[Long]()\n        val hashSet27 = mutable.HashSet[Long]()\n\
    \        val hashSet28 = mutable.HashSet[Long]()\n        val hashSet29 = mutable.HashSet[Long]()\n\
    \        val hashSet30 = mutable.HashSet[Long]()\n        val hashSet31 = mutable.HashSet[Long]()\n\
    \        val hashSet32 = mutable.HashSet[Long]()\n        val hashSet33 = mutable.HashSet[Long]()\n\
    \        val hashSet34 = mutable.HashSet[Long]()\n        val hashSet35 = mutable.HashSet[Long]()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mhashSet\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mhashSet2\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:19:23 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mhashSet3\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:20:23 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mhashSet4\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mhashSet5\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:22:23 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mhas"
  stdout: ''
  timestamp: 1659800770
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val seen = new mutable.HashSet[Long]()\n\
    \        val sorted = lst.sortWith(_ < _)\n        val duplicates = lst.count(x\
    \ => seen.contains(x))\n        val isSorted = sorted == lst\n        val isSorted\
    \ = isSorted && duplicates == 0\n        val isSorted = isSorted && duplicates\
    \ == 1\n        val isSorted = isSorted && duplicates == 2\n        val isSorted\
    \ = isSorted && duplicates == 3\n        val isSorted = isSorted && duplicates\
    \ == 4\n        val isSorted = isSorted && duplicates == 5\n        val isSorted\
    \ = isSorted && duplicates == 6\n        val isSorted = isSorted && duplicates\
    \ == 7\n        val isSorted = isSorted && duplicates == 8\n        val isSorted\
    \ = isSorted && duplicates == 9\n        val isSorted = isSorted && duplicates\
    \ == 10\n        val isSorted = isSorted && duplicates == 11\n        val isSorted\
    \ = isSorted && duplicates == 12\n        val isSorted = isSorted && duplicates\
    \ == 13\n        val isSorted = isSorted && duplicates == 14\n        val isSorted\
    \ = isSorted && duplicates == 15\n        val isSorted = isSorted && duplicates\
    \ == 16\n        val isSorted = isSorted && duplicates == 17\n        val isSorted\
    \ = isSorted && duplicates == 18\n        val isSorted = isSorted && duplicates\
    \ == 19\n        val isSorted = isSorted && duplicates == 20\n        val isSorted\
    \ = isSorted && duplicates == 21\n        val isSorted = isSorted && duplicates\
    \ == 22\n        val isSorted = isSorted && duplicates == 23\n        val isSorted\
    \ = isSorted && duplicates == 24\n        val isSorted = isSorted && duplicates\
    \ == 25\n        val isSorted = isSorted && duplicates == 26\n        val isSorted\
    \ = isSorted && duplicates == 27\n        val isSorted = isSorted && duplicates\
    \ == 28\n        val isSorted = isSorted && duplicates == 29\n        val isSorted\
    \ = isSorted && duplicates == 30\n        val isSorted = isSorted && duplicates\
    \ == 31\n        val isSorted = isSorted && duplicates == 32\n        val isSorted\
    \ = isSorted && duplicates == 33\n        val isSorted = isSorted && duplicates\
    \ == 34\n        val isSorted = isSorted \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe2xt5wc7.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36misSorted\e[0m = isSorted\
    \ && duplicates == \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misSorted is already defined as \e[33mvalue\e[0m \e[35misSorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpe2xt5wc7.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36misSorted\e[0m = isSorted && duplicates\
    \ == \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misSorted is already defined as \e[33mvalue\e[0m \e[35misSorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpe2xt5wc7.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36misSorted\e[0m = isSorted && duplicates\
    \ == \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misSorted is already defined as \e[33mvalue\e[0m \e[35misSorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpe2xt5wc7.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36misSorted\e[0m = isSorted && duplicates\
    \ == \e[31m3\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misSorted is already defined as \e[33mvalue\e[0m \e[35misSorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpe2xt5wc7.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36misSorted\e[0m = isSorted && duplicates\
    \ == \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m        "
  stdout: ''
  timestamp: 1659800794
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp6n2ksgu.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp6n2ksgu.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp6n2ksgu.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp6n2ksgu.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val map = new mutable.HashMap[Long,\
    \ Int]()\n        val map2 = new mutable.HashMap[Long, Int]()\n        val map3\
    \ = new mutable.HashMap[Long, Int]()\n        val map4 = new mutable.HashMap[Long,\
    \ Int]()\n        val map5 = new mutable.HashMap[Long, Int]()\n        val map6\
    \ = new mutable.HashMap[Long, Int]()\n        val map7 = new mutable.HashMap[Long,\
    \ Int]()\n        val map8 = new mutable.HashMap[Long, Int]()\n        val map9\
    \ = new mutable.HashMap[Long, Int]()\n        val map10 = new mutable.HashMap[Long,\
    \ Int]()\n        val map11 = new mutable.HashMap[Long, Int]()\n        val map12\
    \ = new mutable.HashMap[Long, Int]()\n        val map13 = new mutable.HashMap[Long,\
    \ Int]()\n        val map14 = new mutable.HashMap[Long, Int]()\n        val map15\
    \ = new mutable.HashMap[Long, Int]()\n        val map16 = new mutable.HashMap[Long,\
    \ Int]()\n        val map17 = new mutable.HashMap[Long, Int]()\n        val map18\
    \ = new mutable.HashMap[Long, Int]()\n        val map19 = new mutable.HashMap[Long,\
    \ Int]()\n        val map20 = new mutable.HashMap[Long, Int]()\n        val map21\
    \ = new mutable.HashMap[Long, Int]()\n        val map22 = new mutable.HashMap[Long,\
    \ Int]()\n        val map23 = new mutable.HashMap[Long, Int]()\n        val map24\
    \ = new mutable.HashMap[Long, Int]()\n        val map25 = new mutable.HashMap[Long,\
    \ Int]()\n        val map26 = new mutable.HashMap[Long, Int]()\n        val map27\
    \ = new mutable.HashMap[Long, Int]()\n        val map28 = new mutable.HashMap[Long,\
    \ Int]()\n        val map29 = new mutable.HashMap[Long, Int]()\n        val map30\
    \ = new mutable.HashMap[Long, Int]()\n        val map31 = new mutable.HashMap[Long,\
    \ Int]()\n        val map32 = new mutable.HashMap[Long, Int]()\n        val map33\
    \ = new mutable.HashMap[Long, Int]()\n        val map34 = new mutable.HashMap[Long,\
    \ Int]()\n        \n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnnhliokj.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnnhliokj.scala:18:23\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mmap2\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpnnhliokj.scala:19:23 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmap3\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnnhliokj.scala:20:23 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnnhliokj.scala:21:23\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mmap5\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Fo"
  stdout: ''
  timestamp: 1659800786
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        val len = lst.length\n        for(i <- 0 until len) {\n            val\
    \ x = lst(i)\n            if(set.contains(x)) {\n                return false\n\
    \            }\n            set += x\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgkha4_x5.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800792
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp6n2ksgu.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return False. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
    \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    def isSorted(lst : List[Long]) : Boolean = {\n        val hashSet = mutable.HashSet[Long]()\n\
    \        val hashSet2 = mutable.HashSet[Long]()\n        val hashSet3 = mutable.HashSet[Long]()\n\
    \        val hashSet4 = mutable.HashSet[Long]()\n        val hashSet5 = mutable.HashSet[Long]()\n\
    \        val hashSet6 = mutable.HashSet[Long]()\n        val hashSet7 = mutable.HashSet[Long]()\n\
    \        val hashSet8 = mutable.HashSet[Long]()\n        val hashSet9 = mutable.HashSet[Long]()\n\
    \        val hashSet10 = mutable.HashSet[Long]()\n        val hashSet11 = mutable.HashSet[Long]()\n\
    \        val hashSet12 = mutable.HashSet[Long]()\n        val hashSet13 = mutable.HashSet[Long]()\n\
    \        val hashSet14 = mutable.HashSet[Long]()\n        val hashSet15 = mutable.HashSet[Long]()\n\
    \        val hashSet16 = mutable.HashSet[Long]()\n        val hashSet17 = mutable.HashSet[Long]()\n\
    \        val hashSet18 = mutable.HashSet[Long]()\n        val hashSet19 = mutable.HashSet[Long]()\n\
    \        val hashSet20 = mutable.HashSet[Long]()\n        val hashSet21 = mutable.HashSet[Long]()\n\
    \        val hashSet22 = mutable.HashSet[Long]()\n        val hashSet23 = mutable.HashSet[Long]()\n\
    \        val hashSet24 = mutable.HashSet[Long]()\n        val hashSet25 = mutable.HashSet[Long]()\n\
    \        val hashSet26 = mutable.HashSet[Long]()\n        val hashSet27 = mutable.HashSet[Long]()\n\
    \        val hashSet28 = mutable.HashSet[Long]()\n        val hashSet29 = mutable.HashSet[Long]()\n\
    \        val hashSet30 = mutable.HashSet[Long]()\n        val hashSet31 = mutable.HashSet[Long]()\n\
    \        val hashSet32 = mutable.HashSet[Long]()\n        val hashSet33 = mutable.HashSet[Long]()\n\
    \        val hashSet34 = mutable.HashSet[Long]()\n        val hashSet35 = mutable.HashSet[Long]()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mhashSet\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mhashSet2\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:19:23 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mhashSet3\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:20:23 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mhashSet4\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mhashSet5\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsecfj8_k.scala:22:23 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mhas"
  stdout: ''
  timestamp: 1659800770
