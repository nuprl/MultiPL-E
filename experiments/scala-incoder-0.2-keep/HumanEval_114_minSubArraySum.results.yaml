language: scala
name: HumanEval_114_minSubArraySum
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsMap = nums.toMap\n        val numsSet\
    \ = nums.toSet\n        val numsArray = nums.toArray\n        val numsArrayList\
    \ = nums.toList\n        val numsArrayBuffer = nums.toBuffer\n        val numsArrayIterator\
    \ = nums.toIterator\n        val numsArrayEnumerator = nums.toEnumerator\n   \
    \     val numsArraySeq = nums.toSeq\n        val numsArraySeqIterator = nums.toSeqIterator\n\
    \        val numsArraySeqEnumerator = nums.toSeqEnumerator\n        val numsArraySeqView\
    \ = nums.toSeqView\n        val numsArraySeqViewIterator = nums.toSeqViewIterator\n\
    \        val numsArraySeqViewEnumerator = nums.toSeqViewEnumerator\n        val\
    \ numsArraySeqViewSet = nums.toSeqViewSet\n        val numsArraySeqViewSetIterator\
    \ = nums.toSeqViewSetIterator\n        val numsArraySeqViewSetEnumerator = nums.toSeqViewSetEnumerator\n\
    \        val numsArraySeqViewSetView = nums.toSeqViewSetView\n        val numsArraySeqViewSetViewIterator\
    \ = nums.toSeqViewSetViewIterator\n        val numsArraySeqViewSetViewEnumerator\
    \ = nums.toSeqViewSetViewEnumerator\n        val numsArraySeqViewSetViewSet =\
    \ nums.toSeqViewSetViewSet\n        val numsArraySeqViewSetViewSetIterator = nums.toSeqViewSetViewSetIterator\n\
    \        val numsArraySeqViewSetViewSetEnumerator = nums.toSeqViewSetViewSetEnumerator\n\
    \        val numsArraySeqViewSetViewSetView = nums.toSeqViewSetViewSetView\n \
    \       val numsArraySeqViewSetViewSetViewIterator = nums.toSeqViewSetViewSetViewIterator\n\
    \        val numsArraySeqViewSetViewSetViewEnumerator = nums.toSeqViewSetViewSetViewEnumerator\n\
    \        val numsArraySeqViewSetViewSetViewSet = nums.toSeqViewSetViewSetViewSet\n\
    \        val numsArraySeqViewSetViewSetViewSetIterator = nums.toSeqViewSetViewSetViewSetIterator\n\
    \        val numsArraySeqViewSetViewSetViewSetEnumerator = nums.toSeqViewSetViewSetViewSetEnumerator\n\
    \        val numsArraySeqViewSetViewSetViewSetView = nums.toSeqView\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpc3ed0doi.scala:10:32 -----------------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnumsMap\e[0m = nums.toMap\n\
    \e[31m\e[31m   |\e[0m                                ^\e[0m\n\e[31m   |\e[0m \
    \                               Cannot prove that Long <:< (K, V)\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m                                where:    K is a type variable\n\
    \e[31m   |\e[0m                                          V is a type variable\n\
    \e[31m   |\e[0m                                .\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpc3ed0doi.scala:16:39 ------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsArrayEnumerator\e[0m = nums.toEnumerator\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                        value toEnumerator is not a member of List[Long]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc3ed0doi.scala:18:40 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnumsArraySeqIterator\e[0m\
    \ = nums.toSeqIterator\n\e[31m\e[31m   |\e[0m                                \
    \   ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toSeqIterator is not a member\
    \ of List[Long] - did you mean nums.toIterator?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpc3ed0doi.scala:19:42 ------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsArraySeqEnumerator\e[0m = nums.toSeqEnumerator\n\
    \e[31m\e[31m   |\e[0m                                     ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     value toSeqEnumerator is not a member\
    \ of List[Long]\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc3ed0doi.scala:20:36\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mnumsArraySeqView\e[0m = nums.toSeqView\n\e[31m\e[31m   |\e[0m            \
    \                   ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \      value toSeqView is not a member of List[Long]\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpc3ed0doi.scala:21:44 ------------------------\e[0m\e[0m\n\
    \e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnumsArraySeqViewIt"
  stdout: ''
  timestamp: 1659805631
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsCopy = nums.toList\n        val minSum\
    \ = numsCopy.foldLeft(0L) { (sum, num) =>\n            val newSum = sum + num\n\
    \            if (newSum < minSum) newSum else minSum\n        }\n        minSum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpn_xncf_p.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpn_xncf_p.scala:13:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805619
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSorted = nums.sortWith(_ < _)\n  \
    \      val sums = numsSorted.scanLeft(0L)(_ + _)\n        val minSum = sums.min\n\
    \        val minSumIndex = sums.indexOf(minSum)\n        sums(minSumIndex - 1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.minSubArraySum(tmp0a_oybjk.scala:14)\n\tat Problem$.main(tmp0a_oybjk.scala:17)\n\
    \tat Problem.main(tmp0a_oybjk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805630
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSetSize\
    \ = numsSet.size\n        val numsSetIterator = numsSet.iterator\n        val\
    \ numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp650e39z7.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp650e39z7.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSetIteratorIteratorIteratorIteratorIterator\e[0m = numsSetIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIterator is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIterator\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp650e39z7.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIterator.iterator\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ is already defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp650e39z7.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIterator.iterator\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorI"
  stdout: ''
  timestamp: 1659805625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSetSize\
    \ = numsSet.size\n        val numsSetIterator = numsSet.iterator\n        val\
    \ numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n \
    \       val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = num\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgcd2jfyu.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgcd2jfyu.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorIterator is\
    \ already defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpgcd2jfyu.scala:26:78 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgcd2jfyu.scala:"
  stdout: ''
  timestamp: 1659805626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSetSize\
    \ = numsSet.size\n        val numsSetIterator = numsSet.iterator\n        val\
    \ numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n \
    \       val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = num\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgcd2jfyu.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgcd2jfyu.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorIterator is\
    \ already defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpgcd2jfyu.scala:26:78 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgcd2jfyu.scala:"
  stdout: ''
  timestamp: 1659805626
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsMap = nums.groupBy(x => x).mapValues(_.size)\n\
    \        val minSum = numsMap.minBy(_._2)._2\n        val minSumList = numsMap.filter(_._2\
    \ == minSum).map(_._1)\n        val minSumSum = minSumList.sum\n        minSumSum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp68s7jxil.scala:17)\n\tat Problem.main(tmp68s7jxil.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805631
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSorted = nums.sortBy(_.toInt)\n  \
    \      val sums = numsSorted.scanLeft(0)(_ + _)\n        sums.min\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy59o5uef.scala:11:42\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36msums\e\
    [0m = numsSorted.scanLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m   |\e[0m        \
    \                                  ^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                           Found:    Long\n\e[31m   |\e[0m                  \
    \                        Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSetSize\
    \ = numsSet.size\n        val numsSetIterator = numsSet.iterator\n        val\
    \ numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n \
    \       val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = num\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgcd2jfyu.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgcd2jfyu.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorIterator is\
    \ already defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpgcd2jfyu.scala:26:78 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgcd2jfyu.scala:"
  stdout: ''
  timestamp: 1659805626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsArray = nums.toArray\n        val\
    \ numsArrayLen = numsArray.length\n        val numsArraySum = numsArray.reduce((x,\
    \ y) => x + y)\n        val numsArraySumLen = numsArraySum.toLong\n        val\
    \ numsArraySumLenMinusOne = numsArraySumLen - 1\n        val numsArraySumLenMinusTwo\
    \ = numsArraySumLen - 2\n        val numsArraySumLenMinusThree = numsArraySumLen\
    \ - 3\n        val numsArraySumLenMinusFour = numsArraySumLen - 4\n        val\
    \ numsArraySumLenMinusFive = numsArraySumLen - 5\n        val numsArraySumLenMinusSix\
    \ = numsArraySumLen - 6\n        val numsArraySumLenMinusSeven = numsArraySumLen\
    \ - 7\n        val numsArraySumLenMinusEight = numsArraySumLen - 8\n        val\
    \ numsArraySumLenMinusNine = numsArraySumLen - 9\n        val numsArraySumLenMinusTen\
    \ = numsArraySumLen - 10\n        val numsArraySumLenMinusEleven = numsArraySumLen\
    \ - 11\n        val numsArraySumLenMinusTwelve = numsArraySumLen - 12\n      \
    \  val numsArraySumLenMinusThirteen = numsArraySumLen - 13\n        val numsArraySumLenMinusFourteen\
    \ = numsArraySumLen - 14\n        val numsArraySumLenMinusFifteen = numsArraySumLen\
    \ - 15\n        val numsArraySumLenMinusSixteen = numsArraySumLen - 16\n     \
    \   val numsArraySumLenMinusSeventeen = numsArraySumLen - 17\n        val numsArraySumLenMinusEighteen\
    \ = numsArraySumLen - 18\n        val numsArraySumLenMinusNineteen = numsArraySumLen\
    \ - 19\n        val numsArraySumLenMinusTwenty = numsArraySumLen - 20\n      \
    \  val numsArraySumLenMinusThirty = numsArraySumLen - 30\n        val numsArraySumLenMinusFourty\
    \ = numsArraySumLen - 40\n        val numsArraySumLenMinusFifty = numsArraySum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy_90cz_f.scala:37:5\
    \ ---------------------\e[0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805627
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsArray = nums.toArray\n        val\
    \ numsArrayLength = numsArray.length\n        val numsArraySum = numsArray.reduceLeft(_\
    \ + _)\n        val numsArraySumLength = numsArraySum.length\n        val numsArraySumArray\
    \ = numsArraySum.toArray\n        val numsArraySumArrayLength = numsArraySumArray.length\n\
    \        val numsArraySumArraySum = numsArraySumArray.reduceLeft(_ + _)\n    \
    \    val numsArraySumArraySumLength = numsArraySumArraySum.length\n        val\
    \ numsArraySumArraySumArray = numsArraySumArraySum.toArray\n        val numsArraySumArraySumArrayLength\
    \ = numsArraySumArraySumArray.length\n        val numsArraySumArraySumArraySum\
    \ = numsArraySumArraySumArray.reduceLeft(_ + _)\n        val numsArraySumArraySumArrayLength\
    \ = numsArraySumArraySumArrayLength.length\n        val numsArraySumArraySumArraySumArray\
    \ = numsArraySumArraySumArraySum.toArray\n        val numsArraySumArraySumArraySumArrayLength\
    \ = numsArraySumArraySumArraySumArrayLength.length\n        val numsArraySumArraySumArraySumArraySum\
    \ = numsArraySumArraySumArraySumArray.reduceLeft(_ + _)\n        val numsArraySumArraySumArraySumArrayLength\
    \ = numsArraySumArraySumArraySumArrayLength.length\n        val numsArraySumArraySumArraySumArraySumArray\
    \ = numsArraySumArraySumArraySumArraySum.toArray\n        val numsArraySumArraySumArraySumArraySumArrayLength\
    \ = numsArraySumArraySumArraySumArraySumArrayLength.length\n        val numsArraySumArraySumArraySumArraySumArraySum\
    \ = numsArraySumArraySumArraySumArraySumArray.reduceLeft(_ + _)\n        val numsArraySumArraySumArraySumArraySumArrayLength\
    \ = numsArraySumArraySumArraySumArraySumArrayLength.length\n        val numsArraySumArraySumArraySumArraySumArraySumArray\
    \ = numsArraySumArraySumArraySumArraySumArraySumArray.reduceLeft(_ + _)\n    \
    \    val numsArraySumArraySumArraySumArraySumArraySumArrayLength = numsArraySumArraySumArraySumArraySumArrayLength.length\n\
    \        val numsArraySumArraySumArray\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpppgscl4j.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpppgscl4j.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsArraySumArraySumArrayLength\e[0m = numsArraySumArraySumArrayLength.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsArraySumArraySumArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mnumsArraySumArraySumArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpppgscl4j.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsArraySumArraySumArraySumArrayLength\e[0m = numsArraySumArraySumArraySumArrayLength.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsArraySumArraySumArraySumArrayLength is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsArraySumArraySumArraySumArrayLength\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpppgscl4j.scala:29:12 ---------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsArraySumArraySumArraySumArraySumArrayLength\e\
    [0m = numsArraySumArraySumArraySumArraySumArrayLength.length\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsArraySumArraySumArraySumArraySumArrayLength is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsArraySumArraySumArraySumArraySumArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not "
  stdout: ''
  timestamp: 1659805629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSetSize\
    \ = numsSet.size\n        val numsSetIterator = numsSet.iterator\n        val\
    \ numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n \
    \       val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = num\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgcd2jfyu.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgcd2jfyu.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorIterator is\
    \ already defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpgcd2jfyu.scala:26:78 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgcd2jfyu.scala:"
  stdout: ''
  timestamp: 1659805626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSetSize\
    \ = numsSet.size\n        val numsSetIterator = numsSet.iterator\n        val\
    \ numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n \
    \       val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n   \
    \     val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIterator\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp856934ku.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp856934ku.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorIterator is\
    \ already defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmp856934ku.scala:26:78 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp856934ku.scala:"
  stdout: ''
  timestamp: 1659805626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSorted = nums.sortWith(_ < _)\n  \
    \      val numsSortedLength = numsSorted.length\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        var minSum = Long.MaxValue\n        var minSumIndex = 0\n        var\
    \ sum = 0\n        var i = 0\n        var j = 0\n        while (i < numsSortedLength)\
    \ {\n            sum = sum + numsSorted(i)\n            if (sum < minSum) {\n\
    \                minSum = sum\n                minSumIndex = i\n            }\n\
    \            i = i + 1\n        }\n        val numsSortedLength = numsSorted.length\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        var minSum = Long.MaxValue\n\
    \        var minSumIndex = 0\n        var sum = 0\n        var i = 0\n       \
    \ var j = 0\n        while (i < numsSortedLength) {\n            sum = sum + numsSorted(i)\n\
    \            if (sum < minSum) {\n                minSum = sum\n             \
    \   minSumIndex = i\n            }\n            i = i + 1\n        }\n       \
    \ return minSum\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw33f5925.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mnumsSortedLength\e[0m =\
    \ numsSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSortedLength is already defined as \e[33mvalue\e[0m \e\
    [35mnumsSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpw33f5925.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36msums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msums is already defined as \e[33mvalue\e[0m \e[35msums\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpw33f5925.scala:28:12 ---------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        \e[33mvar\e[0m \e[36mminSum\e[0m = Long.MaxValue\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mminSum is already\
    \ defined as \e[33mvariable\e[0m \e[35mminSum\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw33f5925.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mminSumIndex\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mminSumIndex is already defined as \e[33mvariable\e[0m \e[35mminSumIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw33f5925.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mvar\e[0m \e[36msum\e[0m = \e[31m0\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0msum is already defined as \e\
    [33mvariable\e[0m \e[35msum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNo"
  stdout: ''
  timestamp: 1659805628
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSortedSet\
    \ = nums.sortBy(x => x)\n        val numsSortedSetIterator = numsSortedSet.iterator\n\
    \        var sum = 0L\n        var minSum = Long.MaxValue\n        var minSumIndex\
    \ = 0\n        var minSumIndexIterator = numsSortedSetIterator.dropWhile(_ < 0).iterator\n\
    \        while (sum < minSum) {\n            val nextSum = numsSortedSetIterator.dropWhile(_\
    \ < 0).sum\n            if (nextSum < sum) {\n                minSum = nextSum\n\
    \                minSumIndex = nextSumIndex\n            }\n            sum +=\
    \ nextSum\n            minSumIndexIterator = numsSortedSetIterator.dropWhile(_\
    \ < 0).iterator\n        }\n        minSumIndexIterator = numsSortedSetIterator.dropWhile(_\
    \ < 0).iterator\n        while (sum > minSum) {\n            val nextSum = numsSortedSetIterator.dropWhile(_\
    \ < 0).sum\n            if (nextSum > sum) {\n                minSum = nextSum\n\
    \                minSumIndex = nextSumIndex\n            }\n            sum -=\
    \ nextSum\n            minSumIndexIterator = numsSortedSetIterator.dropWhile(_\
    \ < 0).iterator\n        }\n        minSumIndex\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppxmu86t3.scala:21:30 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                minSumIndex = nextSumIndex\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              Not found: nextSumIndex\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmppxmu86t3.scala:31:30 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                minSumIndex = nextSumIndex\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              Not found: nextSumIndex\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659805623
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsArray\
    \ = nums.toArray\n        val numsArraySet = numsArray.toSet\n        val numsArrayArray\
    \ = numsArray.toArray\n        val numsArrayArraySet = numsArrayArray.toSet\n\
    \        val numsArrayArrayArray = numsArrayArray.toArray\n        val numsArrayArrayArraySet\
    \ = numsArrayArrayArray.toSet\n        val numsArrayArrayArrayArray = numsArrayArrayArray.toArray\n\
    \        val numsArrayArrayArrayArraySet = numsArrayArrayArrayArray.toSet\n  \
    \      val numsArrayArrayArrayArrayArray = numsArrayArrayArrayArray.toArray\n\
    \        val numsArrayArrayArrayArrayArraySet = numsArrayArrayArrayArrayArray.toSet\n\
    \        val numsArrayArrayArrayArrayArrayArray = numsArrayArrayArrayArrayArray.toArray\n\
    \        val numsArrayArrayArrayArrayArrayArraySet = numsArrayArrayArrayArrayArrayArray.toSet\n\
    \        val numsArrayArrayArrayArrayArrayArrayArray = numsArrayArrayArrayArrayArrayArray.toArray\n\
    \        val numsArrayArrayArrayArrayArrayArrayArraySet = numsArrayArrayArrayArrayArrayArrayArray.toSet\n\
    \        val numsArrayArrayArrayArrayArrayArrayArrayArray = numsArrayArrayArrayArrayArrayArrayArray.toArray\n\
    \        val numsArrayArrayArrayArrayArrayArrayArrayArraySet = numsArrayArrayArrayArrayArrayArrayArrayArrayArray.toSet\n\
    \        val numsArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = numsArrayArrayArrayArrayArrayArrayArrayArrayArray.toArray\n\
    \        val numsArrayArrayArrayArrayArrayArrayArrayArrayArraySet = numsArrayArrayArrayArrayArrayArrayArrayArrayArray.toSet\n\
    \        val numsArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = numsArrayArrayArrayArrayArrayArrayArrayArrayArray.toArray\n\
    \        val numsArrayArrayArrayArrayArrayArrayArrayArrayArrayArraySet = numsArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray.toSet\n\
    \        val numsArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = numsArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray.toArray\n\
    \        val numsArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArraySet =\
    \ numsArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray.toSet\n        val\
    \ numsArrayArrayArrayArrayArrayArrayArrayArray\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1rpga1e7.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1rpga1e7.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsArrayArrayArrayArrayArrayArrayArrayArrayArrayArray\e[0m = numsArrayArrayArrayArrayArrayArrayArrayArrayArray.toArray\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsArrayArrayArrayArrayArrayArrayArrayArrayArrayArray is\
    \ already defined as \e[33mvalue\e[0m \e[35mnumsArrayArrayArrayArrayArrayArrayArrayArrayArrayArray\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp1rpga1e7.scala:26:62 ------------------------\e[0m\e[0m\n\
    \e[31m26 |\e[0m        \e[33mval\e[0m \e[36mnumsArrayArrayArrayArrayArrayArrayArrayArraySet\e\
    [0m = numsArrayArrayArrayArrayArrayArrayArrayArrayArray.toSet\n\e[31m\e[31m  \
    \ |\e[0m                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Not found: numsArrayArrayArrayArrayArrayArrayArrayArrayArray\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1rpga1e7.scala:27:69\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mnumsArrayArrayArrayArrayArrayArrayArrayArrayArrayArray\e[0m = numsArrayArrayArrayArrayArrayArrayArrayArrayArray.toArray\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m            Not found: numsArrayArrayArrayArrayArrayArrayArrayArrayArray\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:"
  stdout: ''
  timestamp: 1659805628
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsArray = nums.toArray\n        val\
    \ numsArrayLen = numsArray.length\n        val numsArraySum = numsArray.foldLeft(0L){\
    \ (sum, num) => sum + num }\n        val numsArraySumLen = numsArraySum.length\n\
    \        val numsArraySumLenMinusOne = numsArraySumLen - 1\n        val numsArraySumLenMinusTwo\
    \ = numsArraySumLen - 2\n        val numsArraySumLenMinusThree = numsArraySumLen\
    \ - 3\n        val numsArraySumLenMinusFour = numsArraySumLen - 4\n        val\
    \ numsArraySumLenMinusFive = numsArraySumLen - 5\n        val numsArraySumLenMinusSix\
    \ = numsArraySumLen - 6\n        val numsArraySumLenMinusSeven = numsArraySumLen\
    \ - 7\n        val numsArraySumLenMinusEight = numsArraySumLen - 8\n        val\
    \ numsArraySumLenMinusNine = numsArraySumLen - 9\n        val numsArraySumLenMinusTen\
    \ = numsArraySumLen - 10\n        val numsArraySumLenMinusEleven = numsArraySumLen\
    \ - 11\n        val numsArraySumLenMinusTwelve = numsArraySumLen - 12\n      \
    \  val numsArraySumLenMinusThirteen = numsArraySumLen - 13\n        val numsArraySumLenMinusFourteen\
    \ = numsArraySumLen - 14\n        val numsArraySumLenMinusFifteen = numsArraySumLen\
    \ - 15\n        val numsArraySumLenMinusSixteen = numsArraySumLen - 16\n     \
    \   val numsArraySumLenMinusSeventeen = numsArraySumLen - 17\n        val numsArraySumLenMinusEighteen\
    \ = numsArraySumLen - 18\n        val numsArraySumLenMinusNineteen = numsArraySumLen\
    \ - 19\n        val numsArraySumLenMinusTwenty = numsArraySumLen - 20\n      \
    \  val numsArraySumLenMinusThirty = numsArraySumLen - 30\n        val numsArraySumLenMinusFourty\
    \ = numsArraySumLen - 40\n        val numsArraySumLenMinus\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong,\
    \ 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpm5ynfodr.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm5ynfodr.scala:13:43\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mnumsArraySumLen\e[0m = numsArraySum.length\n\e[31m\e[31m   |\e[0m        \
    \                      ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                 value length is not a member of Long\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpm5ynfodr.scala:37:5 ---------------------\e[0m\e\
    [0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659805628
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsArray = nums.toArray\n        val\
    \ numsArrayLen = numsArray.length\n        val numsArraySum = numsArray.reduceLeft(_\
    \ + _)\n        val numsArraySumLen = numsArraySum.length\n        val numsArraySumMinus1\
    \ = numsArraySum.drop(1)\n        val numsArraySumMinus1Len = numsArraySumMinus1.length\n\
    \        val numsArraySumMinus1Minus1 = numsArraySumMinus1.drop(1)\n        val\
    \ numsArraySumMinus1Minus1Len = numsArraySumMinus1Minus1.length\n        val numsArraySumMinus1Minus1Minus1\
    \ = numsArraySumMinus1Minus1.drop(1)\n        val numsArraySumMinus1Minus1Minus1Len\
    \ = numsArraySumMinus1Minus1Minus1.length\n        val numsArraySumMinus1Minus1Minus1Minus1\
    \ = numsArraySumMinus1Minus1Minus1.drop(1)\n        val numsArraySumMinus1Minus1Minus1Minus1Len\
    \ = numsArraySumMinus1Minus1Minus1Minus1.length\n        val numsArraySumMinus1Minus1Minus1Minus1Minus1\
    \ = numsArraySumMinus1Minus1Minus1Minus1.drop(1)\n        val numsArraySumMinus1Minus1Minus1Minus1Minus1Len\
    \ = numsArraySumMinus1Minus1Minus1Minus1Minus1.length\n        val numsArraySumMinus1Minus1Minus1Minus1Minus1Minus1\
    \ = numsArraySumMinus1Minus1Minus1Minus1Minus1.drop(1)\n        val numsArraySumMinus1Minus1Minus1Minus1Minus1Minus1Len\
    \ = numsArraySumMinus1Minus1Minus1Minus1Minus1Minus1.length\n        val numsArraySumMinus1Minus1Minus1Minus1Minus1Minus1Minus1\
    \ = numsArraySumMinus1Minus1Minus1Minus1Minus1Minus1Len.drop(1)\n        val nums\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1ytv72hu.scala:28:4 ----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1ytv72hu.scala:10:29\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mnumsArray\e[0m = nums.toArray\n\e[31m\e[31m   |\e[0m                     \
    \   ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toArray is not a member of Null, but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mOne of the following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m  import Option.option2Iterable\n\e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\
    \e[31m   |\e[0m  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip4.lazyZip4ToIterable\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.buffer\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.list\
    \ asScalaBuffer\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties\
    \ AsScalaMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration\
    \ AsScalaIterator\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator\
    \ asScala\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.map\
    \ AsScalaConcurrentMap\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp1ytv72hu.scala:28:5 ---------------------\e[0m\e[0m\n\e[31m28 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659805630
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsMap = nums.groupBy(x => x).mapValues(_.size)\n\
    \        val minSum = numsMap.foldLeft(0L) { (sum, num) =>\n            val newSum\
    \ = sum + num\n            if (newSum < 0) newSum\n            else newSum\n \
    \       }\n        minSum\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpoz76hytj.scala:12:29 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mval\e[0m \e[36mnewSum\e[0m = sum +\
    \ num\n\e[31m\e[31m   |\e[0m                         ^^^^^\e[0m\n\e[31m   |\e\
    [0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35m+\e[0m in \e\
    [33mclass\e[0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Double): Double\n\
    \e[31m   |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e\
    [0m (x: Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m   |\e[0m (x: Short):\
    \ Long\n\e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0m (x: String): String\n\
    \e[31m   |\e[0mmatch arguments ((num : (Long, Int)))\n1 error found\n"
  stdout: ''
  timestamp: 1659805621
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSetSize\
    \ = numsSet.size\n        val numsSetIterator = numsSet.iterator\n        val\
    \ numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n \
    \       val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = num\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgcd2jfyu.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgcd2jfyu.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorIterator is\
    \ already defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpgcd2jfyu.scala:26:78 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgcd2jfyu.scala:"
  stdout: ''
  timestamp: 1659805626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsCopy = nums.toList\n        val minSum\
    \ = numsCopy.foldLeft(0L){ (sum, num) =>\n            val newSum = sum + num\n\
    \            if(newSum < minSum) newSum else minSum\n        }\n        minSum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp97n_y9_m.scala:13:24 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m(newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                        ^\e[0m\n\e\
    [31m   |\e[0m                        Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp97n_y9_m.scala:13:44\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e\
    [0m(newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m    \
    \                                        ^\e[0m\n\e[31m   |\e[0m             \
    \                          Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSetIterator\
    \ = numsSet.iterator\n        val numsSetIteratorNext = numsSetIterator.next\n\
    \        val numsSetIteratorNextValue = numsSetIteratorNext.get\n        val numsSetIteratorNextNext\
    \ = numsSetIteratorNext.next\n        val numsSetIteratorNextNextValue = numsSetIteratorNextNext.get\n\
    \        val numsSetIteratorNextNextNext = numsSetIteratorNextNext.next\n    \
    \    val numsSetIteratorNextNextNextValue = numsSetIteratorNextNextNext.get\n\
    \        val numsSetIteratorNextNextNextNext = numsSetIteratorNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextValue = numsSetIteratorNextNextNextNext.get\n\
    \        val numsSetIteratorNextNextNextNextNext = numsSetIteratorNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNext.get\n\
    \        val numsSetIteratorNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNextNext.get\n\
    \        val numsSetIteratorNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNextNextNext.get\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNextNextNextNextNext.get\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNextNextNextNextNextNext.get\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextNextValue = numsSetIteratorNextNextNextNext\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7rlcinpe.scala:13:59 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorNextValue\e\
    [0m = numsSetIteratorNext.get\n\e[31m\e[31m   |\e[0m                         \
    \              ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                      value get is not a member of Long\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp7rlcinpe.scala:14:58 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorNextNext\e[0m\
    \ = numsSetIteratorNext.next\n\e[31m\e[31m   |\e[0m                          \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \                    value next is not a member of Long\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp7rlcinpe.scala:24:58 ---------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorNextNextNextNextNextNextNext\e\
    [0m = numsSetIteratorNextNextNextNextNextNextNext.next\n\e[31m\e[31m   |\e[0m\
    \                                                          ^\e[0m\n\e[31m   |\e\
    [0m  Recursive \e[33mvalue\e[0m \e[35mnumsSetIteratorNextNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp7rlcinpe.scala:26:62\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSetIteratorNextNextNextNextNextNextNextNext\e[0m = numsSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7rlcinpe.scala:30:70\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mnumsSetIteratorNextNextNextNextNextNextNextNextNextNext\e[0m = numsSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m "
  stdout: ''
  timestamp: 1659805628
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsArray = nums.toArray\n        val\
    \ numsArrayLength = numsArray.length\n        val numsArraySum = numsArray.sum\n\
    \        val numsArraySumLength = numsArraySum.length\n        val numsArraySumMinusOne\
    \ = numsArraySum - numsArray(0)\n        val numsArraySumMinusOneLength = numsArraySumMinusOne.length\n\
    \        val numsArraySumMinusOneArray = numsArraySumMinusOne.toArray\n      \
    \  val numsArraySumMinusOneArrayLength = numsArraySumMinusOneArray.length\n  \
    \      val numsArraySumMinusOneArraySum = numsArraySumMinusOneArray.sum\n    \
    \    val numsArraySumMinusOneArraySumLength = numsArraySumMinusOneArraySum.length\n\
    \        val numsArraySumMinusOneArraySumMinusOne = numsArraySumMinusOneArraySum\
    \ - numsArraySumMinusOneArray(0)\n        val numsArraySumMinusOneArraySumMinusOneLength\
    \ = numsArraySumMinusOneArraySumMinusOne.length\n        val numsArraySumMinusOneArraySumMinusOneArray\
    \ = numsArraySumMinusOneArraySumMinusOne.toArray\n        val numsArraySumMinusOneArraySumMinusOneArrayLength\
    \ = numsArraySumMinusOneArraySumMinusOneArray.length\n        val numsArraySumMinusOneArraySumMinusOneArraySum\
    \ = numsArraySumMinusOneArraySumMinusOneArray.sum\n        val numsArraySumMinusOneArraySumMinusOneArraySumLength\
    \ = numsArraySumMinusOneArraySumMinusOneArraySum.length\n        val numsArraySumMinusOneArraySumMinusOneArraySumMinusOne\
    \ = numsArraySumMinusOneArraySumMinusOneArraySum - numsArraySumMinusOneArraySumMinusOneArray(0)\n\
    \        val numsArraySumMinusOneArraySumMinusOneArraySumMinusOneLength = numsArraySumMinusOneArraySumMinusOneArraySumMinusOne.length\n\
    \        val numsArraySumMinusOneArraySumMinusOneArraySumMinusOneArray = numsArraySumMinusOneArraySumMinusOneArraySumMinusOne.toArray\n\
    \        val numsArraySumMinusOneArraySumMinusOneArraySumMinus\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8_pegdbh.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8_pegdbh.scala:13:46\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mnumsArraySumLength\e[0m = numsArraySum.length\n\e[31m\e[31m   |\e[0m     \
    \                            ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                          value length is not a member of Long\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp8_pegdbh.scala:15:62 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnumsArraySumMinusOneLength\e\
    [0m = numsArraySumMinusOne.length\n\e[31m\e[31m   |\e[0m                     \
    \                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                             value length is not a member of Long\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp8_pegdbh.scala:16:61 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnumsArraySumMinusOneArray\e\
    [0m = numsArraySumMinusOne.toArray\n\e[31m\e[31m   |\e[0m                    \
    \                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                             value toArray is not a member of Long\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp8_pegdbh.scala:30:5 ---------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n5 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659805630
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsMap = nums.groupBy(x => x).mapValues(_.size).asInstanceOf[Map[Long,\
    \ Int]]\n        val minSum = numsMap.filter(_._2 > 0).map(_._1).sum\n       \
    \ val maxSum = numsMap.filter(_._2 > 0).map(_._1).max\n        minSum + maxSum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ClassCastException: class scala.collection.MapView$MapValues\
    \ cannot be cast to class scala.collection.mutable.Map (scala.collection.MapView$MapValues\
    \ and scala.collection.mutable.Map are in unnamed module of loader java.net.URLClassLoader\
    \ @dc24521)\n\tat Problem$.minSubArraySum(tmpblx57j7x.scala:10)\n\tat Problem$.main(tmpblx57j7x.scala:16)\n\
    \tat Problem.main(tmpblx57j7x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805631
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsCopy = nums.toList\n        val result\
    \ = numsCopy.foldLeft(0L)((sum, num) => {\n            val newSum = sum + num\n\
    \            if (newSum < 0) newSum\n            else newSum\n        })\n   \
    \     result\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy7z5air4.scala:19)\n\tat Problem.main(tmpy7z5air4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805630
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsCopy = nums.toList\n        val minSum\
    \ = numsCopy.foldLeft(0L)((sum, num) => {\n            val newSum = sum + num\n\
    \            if (newSum < minSum) newSum else minSum\n        })\n        minSum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp72n5rnme.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp72n5rnme.scala:13:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val minSum = math.Long.MaxValue\n        val\
    \ numsSet = nums.toSet\n        val numsSetIterator = numsSet.iterator\n     \
    \   val numsSetIteratorNext = numsSetIterator.next\n        val numsSetIteratorNextValue\
    \ = numsSetIteratorNext.asInstanceOf[Long]\n        val numsSetIteratorNextNext\
    \ = numsSetIteratorNext.next\n        val numsSetIteratorNextNextValue = numsSetIteratorNextNext.asInstanceOf[Long]\n\
    \        val numsSetIteratorNextNextNext = numsSetIteratorNextNext.next\n    \
    \    val numsSetIteratorNextNextNextValue = numsSetIteratorNextNextNext.asInstanceOf[Long]\n\
    \        val numsSetIteratorNextNextNextValue = numsSetIteratorNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNext = numsSetIteratorNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextValue = numsSetIteratorNextNextNextNext.asInstanceOf[Long]\n\
    \        val numsSetIteratorNextNextNextNextNext = numsSetIteratorNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNext.asInstanceOf[Long]\n\
    \        val numsSetIteratorNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNextNext.asInstanceOf[Long]\n\
    \        val numsSetIteratorNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNextNextNext.asInstanceOf[Long]\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNextNextNextNext.asInstanceOf[Long]\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNext\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpivraz3ww.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorNextNextNextValue\e\
    [0m = numsSetIteratorNextNextNext.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorNextNextNextValue is already defined as \e\
    [33mvalue\e[0m \e[35mnumsSetIteratorNextNextNextValue\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpivraz3ww.scala:10:26\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mminSum\e[0m = math.Long.MaxValue\n\e[31m\e[31m   |\e[0m                  \
    \   ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     value Long is not a member\
    \ of math\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpivraz3ww.scala:15:58\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mnumsSetIteratorNextNext\e[0m = numsSetIteratorNext.next\n\e[31m\e[31m   |\e\
    [0m                                      ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                      value next is not a member of\
    \ Long\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpivraz3ww.scala:28:62 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m = numsSetIteratorNextNextNextNextNextNextNextNext.next\n\e[31m\e[31m   |\e\
    [0m                                                              ^\e[0m\n\e[31m\
    \   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpivraz3ww.scala:30:66\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSetIteratorNextNextNextNextNextNextNextNextNext\e[0m = numsSetIteratorNextNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m                                         "
  stdout: ''
  timestamp: 1659805630
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val minSum = nums.foldLeft(0L)((sum, num)\
    \ => {\n            val newSum = sum + num\n            if (newSum < minSum) newSum\
    \ else minSum\n        })\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpupb2d0jn.scala:12:25 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpupb2d0jn.scala:12:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m12 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805635
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsCopy = nums.toList\n        val minSum\
    \ = numsCopy.foldLeft(numsCopy(0)) { (sum, num) =>\n            val newSum = sum\
    \ + num\n            if (newSum < 0) newSum\n            else newSum\n       \
    \ }\n        minSum\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjvn1gedt.scala:19)\n\tat Problem.main(tmpjvn1gedt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805646
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val minSum\
    \ = nums.foldLeft(0L) { (sum, num) =>\n            val newSum = sum + num\n  \
    \          if (numsSet.contains(newSum)) {\n                newSum\n         \
    \   } else {\n                sum\n            }\n        }\n        minSum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0bw7p3ex.scala:22)\n\tat Problem.main(tmp0bw7p3ex.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805647
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsArray\
    \ = nums.toArray\n        val numsArraySet = numsArray.toSet\n        val numsArrayArray\
    \ = numsArray.toArray\n        val numsArraySetArray = numsArraySet.toArray\n\
    \        val numsArrayArraySet = numsArrayArray.toSet\n        val numsArraySetArraySet\
    \ = numsArraySetArray.toSet\n        val numsArraySetArraySet = numsArraySetArray.toSet\n\
    \        val numsArraySetArraySetArray = numsArraySetArraySet.toArray\n      \
    \  val numsArraySetArraySetArray = numsArraySetArraySet.toArray\n        val numsArraySetArraySetArraySet\
    \ = numsArraySetArraySet.toSet\n        val numsArraySetArraySetArraySet = numsArraySetArraySet.toSet\n\
    \        val numsArraySetArraySetArraySet = numsArraySetArraySet.toSet\n     \
    \   val numsArraySetArraySetArraySetArray = numsArraySetArraySetArray.toArray\n\
    \        val numsArraySetArraySetArrayArray = numsArraySetArraySetArray.toArray\n\
    \        val numsArraySetArraySetArraySetArray = numsArraySetArraySetArray.toSet\n\
    \        val numsArraySetArraySetArraySetArray = numsArraySetArraySetArray.toSet\n\
    \        val numsArraySetArraySetArraySetArraySet = numsArraySetArraySetArraySet.toSet\n\
    \        val numsArraySetArraySetArraySetArraySet = numsArraySetArraySetArraySet.toSet\n\
    \        val numsArraySetArraySetArraySetArraySet = numsArraySetArraySetArraySet.toSet\n\
    \        val numsArraySetArraySetArraySetArraySet = numsArraySetArraySetArraySet.toSet\n\
    \        val numsArraySetArraySetArraySetArraySet = numsArraySetArraySetArraySet.toSet\n\
    \        val numsArraySetArraySetArraySetArraySet = numsArraySetArraySetArraySet.toSet\n\
    \        val numsArraySetArraySetArraySetArraySet = numsArraySetArraySetArraySet.toSet\n\
    \        val numsArraySetArraySetArraySetArraySet = numsArraySetArraySetArraySet.toSet\n\
    \        val numsArraySetArraySetArraySetArraySet = numsArraySetArraySetArraySet.toSet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0x0xfh5w.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mnumsArraySetArraySet\e[0m\
    \ = numsArraySetArray.toSet\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsArraySetArraySet is already defined as \e[33mvalue\e[0m\
    \ \e[35mnumsArraySetArraySet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp0x0xfh5w.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnumsArraySetArraySetArray\e\
    [0m = numsArraySetArraySet.toArray\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsArraySetArraySetArray is already defined as \e[33mvalue\e\
    [0m \e[35mnumsArraySetArraySetArray\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0x0xfh5w.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnumsArraySetArraySetArraySet\e\
    [0m = numsArraySetArraySet.toSet\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsArraySetArraySetArraySet is already defined as \e[33mvalue\e\
    [0m \e[35mnumsArraySetArraySetArraySet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0x0xfh5w.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mnumsArraySetArraySetArraySet\e\
    [0m = numsArraySetArraySet.toSet\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsArraySetArraySetArraySet is already defined as \e[33mvalue\e\
    [0m \e[35mnumsArraySetArraySetArraySet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of topleve"
  stdout: ''
  timestamp: 1659805643
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsMap = nums.groupBy(x => x).mapValues(_.size)\n\
    \        val maxSum = numsMap.maxBy(_._2)._2\n        val minSum = numsMap.minBy(_._2)._2\n\
    \        val sums = numsMap.mapValues(x => x - minSum + maxSum)\n        sums.min\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp83x9lsso.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        sums.min\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31m(\e\
    [0mLong\e[1m\e[31m,\e[0m\e[1m\e[31m \e[0m\e[1m\e[31mInt\e[0m\e[1m\e[31m)\e[0m\n\
    \e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805645
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSorted = nums.sortWith(_ < _)\n  \
    \      val sums = mutable.ArrayBuffer.empty[Long]\n        val minSum = Long.MaxValue\n\
    \        for(i <- 0 until numsSorted.length){\n            val sum = numsSorted.take(i).sum\n\
    \            sums += sum\n            if(sum < minSum){\n                minSum\
    \ = sum\n            }\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjfls2_lj.scala:11:19 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36msums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpjfls2_lj.scala:17:23 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                minSum = sum\n\e[31m\e[31m   |\e[0m \
    \               ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val minSum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805641
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSetSize\
    \ = numsSet.size\n        val numsSetIterator = numsSet.iterator\n        val\
    \ numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n \
    \       val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = num\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgcd2jfyu.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgcd2jfyu.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorIterator is\
    \ already defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpgcd2jfyu.scala:26:78 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgcd2jfyu.scala:"
  stdout: ''
  timestamp: 1659805626
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val minSum\
    \ = nums.foldLeft(0L)((sum, num) => {\n            val newSum = sum + num\n  \
    \          if (numsSet.contains(newSum)) {\n                newSum\n         \
    \   } else {\n                num\n            }\n        })\n        minSum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp61xx20co.scala:22)\n\tat Problem.main(tmp61xx20co.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805651
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsCopy = nums.toList\n        val minSum\
    \ = numsCopy.foldLeft(0L) { (sum, elem) =>\n            val newSum = sum + elem\n\
    \            if (newSum < minSum) newSum else minSum\n        }\n        minSum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp2nioe03_.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp2nioe03_.scala:13:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805640
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSorted = nums.sortWith(_ < _)\n  \
    \      val sums = numsSorted.scanLeft(0)(_ + _)\n        sums.min\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2zflji06.scala:11:42\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36msums\e\
    [0m = numsSorted.scanLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m   |\e[0m        \
    \                                  ^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                           Found:    Long\n\e[31m   |\e[0m                  \
    \                        Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805646
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsCopy = nums.toList\n        val result\
    \ = numsCopy.foldLeft(0L) { (sum, num) =>\n            val newSum = sum + num\n\
    \            if (newSum < 0) newSum\n            else newSum\n        }\n    \
    \    result\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfd4cu81f.scala:19)\n\tat Problem.main(tmpfd4cu81f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805650
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSortedSet\
    \ = nums.sort\n        val numsSortedSetSize = numsSortedSet.size\n        val\
    \ numsSortedSetIterator = numsSortedSet.iterator\n        val numsSortedSetIteratorSize\
    \ = numsSortedSetIterator.size\n        val numsSortedSetIteratorIterator = numsSortedSetIterator.iterator\n\
    \        val numsSortedSetIteratorIteratorSize = numsSortedSetIteratorIterator.size\n\
    \        val numsSortedSetIteratorIteratorIterator = numsSortedSetIteratorIterator.iterator\n\
    \        val numsSortedSetIteratorIteratorIteratorSize = numsSortedSetIteratorIteratorIterator.size\n\
    \        val numsSortedSetIteratorIteratorIteratorSize = numsSortedSetIteratorIteratorIterator.size\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorSize = numsSortedSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorSize = numsSortedSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorSize = numsSortedSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorSize = numsSortedSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorSize = numsSortedSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorSize = numsSortedSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorSize = numsSortedSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorSize = numsSortedSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorSize = numsSortedSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorSize = numsSortedSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorIteratorSize = numsSortedSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorIteratorSize = numsSortedSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorIteratorSize = numsSortedSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorIteratorSize = numsSortedSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorIteratorSize = numsSortedSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorIteratorSize = nums\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4qzxiw63.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnumsSortedSetIteratorIteratorIteratorSize\e\
    [0m = numsSortedSetIteratorIteratorIterator.size\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSortedSetIteratorIteratorIteratorSize is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsSortedSetIteratorIteratorIteratorSize\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp4qzxiw63.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsSortedSetIteratorIteratorIteratorIteratorSize\e\
    [0m = numsSortedSetIteratorIteratorIteratorIterator.size\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSortedSetIteratorIteratorIteratorIteratorSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSortedSetIteratorIteratorIteratorIteratorSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4qzxiw63.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mnumsSortedSetIteratorIteratorIteratorIteratorSize\e\
    [0m = numsSortedSetIteratorIteratorIteratorIterator.size\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSortedSetIteratorIteratorIteratorIteratorSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSortedSetIteratorIteratorIteratorIteratorSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4qzxiw63.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m       "
  stdout: ''
  timestamp: 1659805649
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsCopy = nums.toList\n        val minSum\
    \ = numsCopy.foldLeft(0L){ (sum, num) =>\n            val newSum = sum + num\n\
    \            if (newSum < minSum) newSum else minSum\n        }\n        minSum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpml1hxout.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpml1hxout.scala:13:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805641
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSetSize\
    \ = numsSet.size\n        val numsSetIterator = numsSet.iterator\n        val\
    \ numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n \
    \       val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = num\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgcd2jfyu.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgcd2jfyu.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorIterator is\
    \ already defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpgcd2jfyu.scala:26:78 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgcd2jfyu.scala:"
  stdout: ''
  timestamp: 1659805626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val minSum\
    \ = math.min(nums.toList.map(x => math.abs(x)).sum)\n        val maxSum = math.max(nums.toList.map(x\
    \ => math.abs(x)).sum)\n        val sums = mutable.HashSet[Long]()\n        val\
    \ numsSetIterator = numsSet.iterator\n        while(numsSetIterator.hasNext) {\n\
    \            val curSum = math.abs(numsSetIterator.next())\n            sums +=\
    \ curSum\n            if(curSum < minSum) {\n                minSum = curSum\n\
    \            }\n            if(curSum > maxSum) {\n                maxSum = curSum\n\
    \            }\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp1ypqlnqc.scala:11:26 -----------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mminSum\e[0m = math.min(nums.toList.map(\e\
    [36mx\e[0m => math.abs(x)).sum)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35mmin\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m with types\n\e[31m  \
    \ |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m (x: Float, y: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m   |\e[0m (x: Int, y:\
    \ Int): Int\n\e[31m   |\e[0mmatch arguments (Long)\n\e[31m\e[31m-- [E134] Type\
    \ Error: /tmp/tmp1ypqlnqc.scala:12:26 -----------------------------\e[0m\e[0m\n\
    \e[31m12 |\e[0m        \e[33mval\e[0m \e[36mmaxSum\e[0m = math.max(nums.toList.map(\e\
    [36mx\e[0m => math.abs(x)).sum)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m with types\n\e[31m  \
    \ |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m (x: Float, y: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m   |\e[0m (x: Int, y:\
    \ Int): Int\n\e[31m   |\e[0mmatch arguments (Long)\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp1ypqlnqc.scala:13:19 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36msums\e[0m = mutable.HashSet[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmp1ypqlnqc.scala:19:23 -----------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m                minSum = curSum\n\e[31m\e[31m   |\e[0m   \
    \             ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val minSum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp1ypqlnqc.scala:22:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m22 |\e[0m                maxSum\
    \ = curSum\n\e[31m\e[31m  "
  stdout: ''
  timestamp: 1659805644
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSetSize\
    \ = numsSet.size\n        val numsSetIterator = numsSet.iterator\n        val\
    \ numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n \
    \       val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = num\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgcd2jfyu.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgcd2jfyu.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorIterator is\
    \ already defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpgcd2jfyu.scala:26:78 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgcd2jfyu.scala:"
  stdout: ''
  timestamp: 1659805626
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val minSum\
    \ = nums.foldLeft(0L)((sum, num) => {\n            val newSum = sum + num\n  \
    \          if (numsSet.contains(newSum)) {\n                newSum\n         \
    \   } else {\n                sum\n            }\n        })\n        minSum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpakmmfuax.scala:22)\n\tat Problem.main(tmpakmmfuax.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805652
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsCopy = nums.toList\n        val minSum\
    \ = numsCopy.foldLeft(0L){ (sum, num) =>\n            val newSum = sum + num\n\
    \            if (newSum < minSum) newSum else minSum\n        }\n        minSum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpml1hxout.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpml1hxout.scala:13:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805641
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsCopy = nums.toList\n        val minSum\
    \ = numsCopy.foldLeft(numsCopy(0)) { (sum, num) =>\n            if (num > sum)\
    \ num\n            else sum\n        }\n        minSum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong,\
    \ 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbw4rbvnv.scala:18)\n\tat Problem.main(tmpbw4rbvnv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805652
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSortedSet\
    \ = nums.sort\n        val numsSortedSetSet = numsSortedSet.toSet\n        val\
    \ numsSortedSetSetSet = numsSortedSetSet.toSet\n        val numsSortedSetSetSetSet\
    \ = numsSortedSetSetSet.toSet\n        val numsSortedSetSetSetSetSet = numsSortedSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSet = numsSortedSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSet = numsSortedSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSet = numsSortedSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSet = numsSortedSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSetSet.toSet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpq1mqepvw.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mnumsSortedSetSetSetSetSetSet\e\
    [0m = numsSortedSetSetSetSetSet.toSet\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSortedSetSetSetSetSetSet is already defined as \e[33mvalue\e\
    [0m \e[35mnumsSortedSetSetSetSetSetSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpq1mqepvw.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnumsSortedSetSetSetSetSetSet\e\
    [0m = numsSortedSetSetSetSetSet.toSet\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSortedSetSetSetSetSetSet is already defined as \e[33mvalue\e\
    [0m \e[35mnumsSortedSetSetSetSetSetSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpq1mqepvw.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnumsSortedSetSetSetSetSetSet\e\
    [0m = numsSortedSetSetSetSetSet.toSet\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSortedSetSetSetSetSetSet is already defined as \e[33mvalue\e\
    [0m \e[35mnumsSortedSetSetSetSetSetSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpq1mqepvw.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mnumsSortedSetSetSetSetSetSetSetSet\e\
    [0m = numsSortedSetSetSetSetSetSet.toSet\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSortedSetSetSetSetSetSetSetSet is already defined as \e\
    [33mvalue\e[0m \e[35mnumsSortedSetSetSetSetSetSe"
  stdout: ''
  timestamp: 1659805652
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSorted = nums.sortWith(_ < _)\n  \
    \      val sums = numsSorted.scanLeft(0)(_ + _)\n        val min = sums.min\n\
    \        val max = sums.max\n        if (min == max) min\n        else min - max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnucgthiv.scala:11:42\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36msums\e\
    [0m = numsSorted.scanLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m   |\e[0m        \
    \                                  ^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                           Found:    Long\n\e[31m   |\e[0m                  \
    \                        Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805649
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSetIterator\
    \ = numsSet.iterator\n        val numsSetIteratorResult = numsSetIterator.next\n\
    \        val numsSetIteratorResultSet = numsSetIterator.next\n        val numsSetIteratorResultSetIterator\
    \ = numsSetIteratorResultSet.iterator\n        val numsSetIteratorResultSetIteratorResult\
    \ = numsSetIteratorResultSetIterator.next\n        val numsSetIteratorResultSetIteratorResultSet\
    \ = numsSetIteratorResultSetIterator.next\n        val numsSetIteratorResultSetIteratorResultSetIterator\
    \ = numsSetIteratorResultSetIteratorResultSet.iterator\n        val numsSetIteratorResultSetIteratorResultSetIteratorResult\
    \ = numsSetIteratorResultSetIteratorResultSetIterator.next\n        val numsSetIteratorResultSetIteratorResultSetIteratorResultSet\
    \ = numsSetIteratorResultSetIteratorResultSetIterator.next\n        val numsSetIteratorResultSetIteratorResultSetIteratorResultSetIterator\
    \ = numsSetIteratorResultSetIteratorResultSetIteratorResultSet.iterator\n    \
    \    val numsSetIteratorResultSetIteratorResultSetIteratorResultSetIteratorResult\
    \ = numsSetIteratorResultSetIteratorResultSetIteratorResultSetIterator.next\n\
    \        val numsSetIteratorResultSetIteratorResultSetIteratorResultSetIteratorResultSet\
    \ = numsSetIteratorResultSetIteratorResultSetIteratorResultSetIterator.next\n\
    \        val numsSetIteratorResultSetIteratorResultSetIteratorResultSetIteratorResultSetIterator\
    \ = numsSetIteratorResultSetIteratorResultSetIteratorResultSetIteratorResultSet.iterator\n\
    \        val numsSetIteratorResultSetIteratorResultSetIteratorResultSetIteratorResultSetIteratorResult\
    \ = numsSetIteratorResultSetIteratorResultSetIteratorResultSetIteratorResultSetIterator.next\n\
    \        val numsSetIteratorResultSetIteratorResultSetIteratorResultSetIteratorResultSetIteratorResultSet\
    \ = numsSetIteratorResultSetIteratorResultSetIteratorResultSetIteratorResultSetIterator.next\n\
    \        val numsSetIteratorResultSetIteratorResultSetIteratorResultSetIteratorResultSetIteratorResultSetIterator\
    \ = numsSetIteratorResultSetIteratorResultSetIteratorResultSetIteratorResultSetIteratorResultSetIterator.next\n\
    \        val numsSetIteratorResultSetIteratorResultSetIteratorResultSetIteratorResultSetIteratorResultSetIteratorResult\
    \ = numsSetIteratorResultSetIteratorResultSetIteratorResultSetIteratorResultSetIteratorResultSetIterator.next\n\
    \        val numsSetIteratorResultSetIteratorResultSetIteratorResultSetIteratorResultSet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8srzew48.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8srzew48.scala:14:72\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mnumsSetIteratorResultSetIterator\e[0m = numsSetIteratorResultSet.iterator\n\
    \e[31m\e[31m   |\e[0m                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  value iterator is not a\
    \ member of Long\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8srzew48.scala:26:115\
    \ --------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSetIteratorResultSetIteratorResultSetIteratorResultSetIteratorResultSetIteratorResultSetIterator\e\
    [0m = numsSetIteratorResultSetIteratorResultSetIteratorResultSetIteratorResultSetIteratorResultSetIterator.next\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  numsSetIteratorResultSetIteratorResultSetIteratorResultSetIteratorResultSetIteratorResultSetIterator\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp8srzew48.scala:29:5 ---------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659805651
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSortedSet\
    \ = nums.toSeq.sortBy(x => x)\n        val numsSortedSetSet = numsSortedSet.toSet\n\
    \        val numsSortedSetSetSize = numsSortedSetSet.size\n        val numsSortedSetSetIterator\
    \ = numsSortedSetSet.iterator\n        val numsSortedSetSetIteratorSize = numsSortedSetSetIterator.size\n\
    \        val numsSortedSetSetIteratorIterator = numsSortedSetSetIterator.iterator\n\
    \        val numsSortedSetSetIteratorIteratorSize = numsSortedSetSetIteratorIterator.size\n\
    \        val numsSortedSetSetIteratorIteratorIterator = numsSortedSetSetIteratorIterator.iterator\n\
    \        val numsSortedSetSetIteratorIteratorIteratorSize = numsSortedSetSetIteratorIteratorIterator.size\n\
    \        val numsSortedSetSetIteratorIteratorIteratorIterator = numsSortedSetSetIteratorIteratorIterator.iterator\n\
    \        val numsSortedSetSetIteratorIteratorIteratorIteratorSize = numsSortedSetSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSortedSetSetIteratorIteratorIteratorIteratorIterator = numsSortedSetSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSortedSetSetIteratorIteratorIteratorIteratorIteratorSize = numsSortedSetSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSortedSetSetIteratorIteratorIteratorIteratorIterator.iterator\n      \
    \  val numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorSize =\
    \ numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIterator.size\n    \
    \    val numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp_ye03hdo.scala:32:11 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp_ye03hdo.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mnumsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ is already defined as \e[33mvalue\e[0m \e[35mnumsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_ye03hdo.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mnumsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmp_ye03hdo.scala:31:12 -------"
  stdout: ''
  timestamp: 1659805651
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val minSum = math.min(nums.sum)\n        val\
    \ subArray = nums.filter(_ < minSum)\n        minSubArraySum(subArray)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpqw_4pw8a.scala:10:26 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mminSum\e[0m = math.min(nums.sum)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of\
    \ the overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments (Long)\n1 error found\n"
  stdout: ''
  timestamp: 1659805648
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val minSum\
    \ = nums.foldLeft(0L)((sum, num) => sum + num)\n        val minSumSet = numsSet.foldLeft(0L)((sum,\
    \ num) => sum + num)\n        minSumSet.min\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphvu6rlgn.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        minSumSet.min\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    Long\
    \ => Long\n\e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805651
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSorted = nums.sortWith(_ < _)\n  \
    \      val sums = numsSorted.scanLeft(0)(_ + _)\n        val minSum = sums.min\n\
    \        val minSumIndex = sums.indexWhere(_ == minSum)\n        sums(minSumIndex)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_8va3m2g.scala:11:42\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36msums\e\
    [0m = numsSorted.scanLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m   |\e[0m        \
    \                                  ^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                           Found:    Long\n\e[31m   |\e[0m                  \
    \                        Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805651
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSetIterator\
    \ = numsSet.iterator\n        val numsSetIteratorNext = numsSetIterator.next\n\
    \        val numsSetIteratorNextNext = numsSetIteratorNext.next\n        val numsSetIteratorNextNextNext\
    \ = numsSetIteratorNextNext.next\n        val numsSetIteratorNextNextNextNext\
    \ = numsSetIteratorNextNextNext.next\n        val numsSetIteratorNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNext.next\n        val numsSetIteratorNextNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNextNext.next\n        val numsSetIteratorNextNextNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNextNext.next\n        val numsSetIteratorNextNextNextNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNextNextNext.next\n        val numsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNextNextNextNext.next\n        val numsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNextNextNextNextNext.next\n        val numsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n        val\
    \ numsSetIteratorNextNextNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext =\
    \ numsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n     \
    \   val numsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext =\
    \ numsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n \
    \       val numsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext =\
    \ numsSetIteratorNextNextNextNextNextNextNextNext\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7sw503vk.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = numsSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7sw503vk.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = numsSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7sw503vk.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = numsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorNextNextNextNe"
  stdout: ''
  timestamp: 1659805652
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val minSum\
    \ = math.min(nums.toList.map(x => math.abs(x)).sum)\n        val minSubArray =\
    \ nums.filter(x => numsSet.contains(x)).map(x => math.abs(x)).sum\n        minSubArray\
    \ < minSum ? minSubArray : minSum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp_g0zujg3.scala:11:26 -----------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mminSum\e[0m = math.min(nums.toList.map(\e\
    [36mx\e[0m => math.abs(x)).sum)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35mmin\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m with types\n\e[31m  \
    \ |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m (x: Float, y: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m   |\e[0m (x: Int, y:\
    \ Int): Int\n\e[31m   |\e[0mmatch arguments (Long)\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp_g0zujg3.scala:13:45 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        minSubArray < minSum ? minSubArray : \e[35mminSum\e[0m\n\
    \e[31m\e[31m   |\e[0m                                             ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                             Not found: type minSum\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805653
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val sums\
    \ = mutable.HashMap[Long, Long]()\n        val minSum = Long.MaxValue\n      \
    \  for(i <- 0 until nums.size) {\n            val sum = nums.filter(_ != i).sum\n\
    \            sums += (sum -> i)\n            if(sum < minSum) {\n            \
    \    minSum = sum\n            }\n        }\n        minSum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong,\
    \ 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph7shjh5j.scala:11:19 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36msums\e[0m = mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmph7shjh5j.scala:17:23 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                minSum = sum\n\e[31m\e[31m   |\e[0m \
    \               ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val minSum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805656
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSetIterator\
    \ = numsSet.iterator\n        val numsSetIteratorResult = numsSetIterator.next\n\
    \        val numsSetIteratorResultNext = numsSetIterator.next\n        val numsSetIteratorResultNextNext\
    \ = numsSetIterator.next\n        val numsSetIteratorResultNextNextNext = numsSetIterator.next\n\
    \        val numsSetIteratorResultNextNextNextNext = numsSetIterator.next\n  \
    \      val numsSetIteratorResultNextNextNextNextNext = numsSetIterator.next\n\
    \        val numsSetIteratorResultNextNextNextNextNextNext = numsSetIterator.next\n\
    \        val numsSetIteratorResultNextNextNextNextNextNext = numsSetIterator.next\n\
    \        val numsSetIteratorResultNextNextNextNextNextNextNext = numsSetIterator.next\n\
    \        val numsSetIteratorResultNextNextNextNextNextNextNextNext = numsSetIterator.next\n\
    \        val numsSetIteratorResultNextNextNextNextNextNextNextNextNext = numsSetIterator.next\n\
    \        val numsSetIteratorResultNextNextNextNextNextNextNextNextNext = numsSetIterator.next\n\
    \        val numsSetIteratorResultNextNextNextNextNextNextNextNextNextNext = numsSetIterator.next\n\
    \        val numsSetIteratorResultNextNextNextNextNextNextNextNextNextNext = numsSetIterator.next\n\
    \        val numsSetIteratorResultNextNextNextNextNextNextNextNextNextNext = numsSetIterator.next\n\
    \        val numsSetIteratorResultNextNextNextNextNextNextNextNextNextNext = numsSetIterator.next\n\
    \        val numsSetIteratorResultNextNextNextNextNextNextNextNextNextNextNext\
    \ = numsSetIterator.next\n        val numsSetIteratorResultNextNextNextNextNextNextNextNextNextNextNext\
    \ = numsSetIterator.next\n        val numsSetIteratorResultNextNextNextNextNextNextNextNextNextNextNext\
    \ = numsSetIterator.next\n        val numsSetIteratorResultNextNextNextNextNextNextNextNextNextNextNext\
    \ = numsSetIterator.next\n        val numsSetIteratorResultNextNextNextNextNextNextNextNextNextNextNext\
    \ = numsSetIterator.next\n        val numsSetIteratorResultNextNextNextNextNextNextNextNextNextNextNextNext\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpck_tvuls.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpck_tvuls.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSetIteratorResultNextNextNextNextNextNext\e[0m = numsSetIterator.next\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorResultNextNextNextNextNextNext is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsSetIteratorResultNextNextNextNextNextNext\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpck_tvuls.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorResultNextNextNextNextNextNextNextNextNext\e\
    [0m = numsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorResultNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorResultNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpck_tvuls.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorResultNextNextNextNextNextNextNextNextNextNext\e\
    [0m = numsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorResultNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorResultNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definiti"
  stdout: ''
  timestamp: 1659805660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsCopy = nums.toList\n        val minSum\
    \ = numsCopy.foldLeft(0L){ (sum, num) =>\n            val newSum = sum + num\n\
    \            if (newSum < minSum) newSum else minSum\n        }\n        minSum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpml1hxout.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpml1hxout.scala:13:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805641
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSetSize\
    \ = numsSet.size\n        val numsSetIterator = numsSet.iterator\n        val\
    \ numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n \
    \       val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n   \
    \     val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIterator\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp856934ku.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp856934ku.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorIterator is\
    \ already defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmp856934ku.scala:26:78 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp856934ku.scala:"
  stdout: ''
  timestamp: 1659805626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsCopy = nums.toList\n        val minSum\
    \ = numsCopy.foldLeft(0L){ (sum, num) =>\n            val newSum = sum + num\n\
    \            if (newSum < minSum) newSum else minSum\n        }\n        minSum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpml1hxout.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpml1hxout.scala:13:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805641
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val minSum = nums.foldLeft(0L) { (sum, num)\
    \ =>\n            val newSum = sum + num\n            if (newSum < minSum) newSum\
    \ else minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmptryi4qdu.scala:12:25 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmptryi4qdu.scala:12:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m12 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805656
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSetSize\
    \ = numsSet.size\n        val numsSetIterator = numsSet.iterator\n        val\
    \ numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n \
    \       val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = num\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgcd2jfyu.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgcd2jfyu.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorIterator is\
    \ already defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpgcd2jfyu.scala:26:78 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgcd2jfyu.scala:"
  stdout: ''
  timestamp: 1659805626
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSorted = nums.sortWith(_ < _)\n  \
    \      val sums = numsSorted.scanLeft(0L)(_ + _)\n        val min = sums.min\n\
    \        val index = sums.indexWhere(_ == min)\n        sums(index - 1)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.minSubArraySum(tmp5eciojad.scala:14)\n\tat Problem$.main(tmp5eciojad.scala:17)\n\
    \tat Problem.main(tmp5eciojad.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805669
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSetSize\
    \ = numsSet.size\n        val numsSetIterator = numsSet.iterator\n        val\
    \ numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n \
    \       val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIterator\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9454r3df.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9454r3df.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorIterator is\
    \ already defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9454r3df.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  n"
  stdout: ''
  timestamp: 1659805666
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsCopy = nums.toList\n        val minSum\
    \ = numsCopy.foldLeft(0L) { (sum, num) =>\n            val newSum = sum + num\n\
    \            if (newSum < minSum) newSum else minSum\n        }\n        minSum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpn_xncf_p.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpn_xncf_p.scala:13:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805619
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsCopy = nums.toList\n        val minSum\
    \ = numsCopy.foldLeft(0L){ (sum, num) => sum + num }\n        val subArray = numsCopy.filter(_\
    \ < minSum)\n        minSubArraySum(subArray)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659805671
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSetSize\
    \ = numsSet.size\n        val numsSetIterator = numsSet.iterator\n        val\
    \ numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n \
    \       val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = num\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgcd2jfyu.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgcd2jfyu.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorIterator is\
    \ already defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpgcd2jfyu.scala:26:78 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgcd2jfyu.scala:"
  stdout: ''
  timestamp: 1659805626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSetIterator\
    \ = numsSet.iterator\n        val numsSetIteratorNext = numsSetIterator.next\n\
    \        val numsSetIteratorNextValue = numsSetIteratorNext.get\n        val numsSetIteratorNextNext\
    \ = numsSetIteratorNext.next\n        val numsSetIteratorNextNextValue = numsSetIteratorNextNext.get\n\
    \        val numsSetIteratorNextNextNext = numsSetIteratorNextNext.next\n    \
    \    val numsSetIteratorNextNextNextValue = numsSetIteratorNextNextNext.get\n\
    \        val numsSetIteratorNextNextNextNext = numsSetIteratorNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextValue = numsSetIteratorNextNextNextNext.get\n\
    \        val numsSetIteratorNextNextNextNextNext = numsSetIteratorNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNext.get\n\
    \        val numsSetIteratorNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNextNext.get\n\
    \        val numsSetIteratorNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNextNextNextNext.get\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNextNextNextNextNextNext.get\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNextNextNextNextNextNextNext.get\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextNextValue = numsSet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb9dazcye.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m = numsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorNextNextNextNextNextNextNextNextNext is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpb9dazcye.scala:13:59 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorNextValue\e[0m = numsSetIteratorNext.get\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                       value get is not a\
    \ member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb9dazcye.scala:14:58\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mnumsSetIteratorNextNext\e[0m = numsSetIteratorNext.next\n\e[31m\e[31m   |\e\
    [0m                                      ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                      value next is not a member of\
    \ Long\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpb9dazcye.scala:24:58 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorNextNextNextNextNextNextNext\e\
    [0m = numsSetIteratorNextNextNextNextNextNextNext.next\n\e[31m\e[31m   |\e[0m\
    \                                                          ^\e[0m\n\e[31m   |\e\
    [0m  Recursive \e[33mvalue\e[0m \e[35mnumsSetIteratorNextNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb9dazcye.scala:28:66\
    \ ------------------------\e[0m\e[0m\n\e[31m28"
  stdout: ''
  timestamp: 1659805669
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsArray = nums.toArray\n        val\
    \ numsArrayLength = numsArray.length\n        val numsArraySum = numsArray.reduceLeft(_\
    \ + _)\n        val numsArraySumLength = numsArraySum.length\n        val numsArraySumArray\
    \ = numsArraySum.toArray\n        val numsArraySumArrayLength = numsArraySumArray.length\n\
    \        val numsArraySumArraySum = numsArraySumArray.reduceLeft(_ + _)\n    \
    \    val numsArraySumArraySumLength = numsArraySumArraySum.length\n        val\
    \ numsArraySumArraySumArray = numsArraySumArraySum.toArray\n        val numsArraySumArraySumArrayLength\
    \ = numsArraySumArraySumArray.length\n        val numsArraySumArraySumArraySum\
    \ = numsArraySumArraySumArray.reduceLeft(_ + _)\n        val numsArraySumArraySumArraySumLength\
    \ = numsArraySumArraySumArraySum.length\n        val numsArraySumArraySumArraySumArray\
    \ = numsArraySumArraySumArraySum.toArray\n        val numsArraySumArraySumArraySumArrayLength\
    \ = numsArraySumArraySumArraySumArray.length\n        val numsArraySumArraySumArraySumArraySum\
    \ = numsArraySumArraySumArraySumArray.reduceLeft(_ + _)\n        val numsArraySumArraySumArraySumArrayLength\
    \ = numsArraySumArraySumArraySumArraySumArray.length\n        val numsArraySumArraySumArraySumArraySum\
    \ = numsArraySumArraySumArraySumArraySum.reduceLeft(_ + _)\n        val numsArraySumArraySumArraySumArraySumLength\
    \ = numsArraySumArraySumArraySumArraySumArray.length\n        val numsArraySumArraySumArraySumArraySumArray\
    \ = numsArraySumArraySumArraySumArraySumArray.toArray\n        val numsArraySumArraySumArraySumArraySumArrayLength\
    \ = numsArraySumArraySumArraySumArraySumArrayArray.length\n        val numsArraySumArraySumArraySumArraySumArraySum\
    \ = numsArraySumArraySumArraySumArraySumArraySum.reduceLeft(_ + _)\n        val\
    \ numsArraySumArraySumArraySumArraySumArraySumLength = numsArraySumArraySumArraySumArraySumArraySumArray.length\n\
    \        val numsArraySumArraySumArraySumArraySumArraySum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong,\
    \ 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz8zepyyq.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpz8zepyyq.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsArraySumArraySumArraySumArrayLength\e[0m = numsArraySumArraySumArraySumArraySumArray.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsArraySumArraySumArraySumArrayLength is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsArraySumArraySumArraySumArrayLength\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpz8zepyyq.scala:26:12 ---------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsArraySumArraySumArraySumArraySum\e[0m\
    \ = numsArraySumArraySumArraySumArraySum.reduceLeft(_ + _)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsArraySumArraySumArraySumArraySum is already defined as\
    \ \e[33mvalue\e[0m \e[35mnumsArraySumArraySumArraySumArraySum\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz8zepyyq.scala:13:46\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mnumsArraySumLength\e[0m = numsArraySum.length\n\e[31m\e[31m   |\e[0m     \
    \                            ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                          value length is not a member of Long\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpz8zepyyq.scala:14:45 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mnumsArraySumArray\e[0m =\
    \ numsArraySum.toArray\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m               "
  stdout: ''
  timestamp: 1659805672
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSetSize\
    \ = numsSet.size\n        val numsSetIterator = numsSet.iterator\n        val\
    \ numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n \
    \       val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = num\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgcd2jfyu.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgcd2jfyu.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorIterator is\
    \ already defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpgcd2jfyu.scala:26:78 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgcd2jfyu.scala:"
  stdout: ''
  timestamp: 1659805626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSetSize\
    \ = numsSet.size\n        val numsSetIterator = numsSet.iterator\n        val\
    \ numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n \
    \       val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = num\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgcd2jfyu.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgcd2jfyu.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorIterator is\
    \ already defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpgcd2jfyu.scala:26:78 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgcd2jfyu.scala:"
  stdout: ''
  timestamp: 1659805626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSortedSet\
    \ = nums.sortBy(_)\n        val numsSortedSetSize = numsSortedSet.size\n     \
    \   val numsSortedSetIterator = numsSortedSet.iterator\n        val numsSortedSetIteratorSize\
    \ = numsSortedSetIterator.size\n        val numsSortedSetIteratorIterator = numsSortedSetIterator.iterator\n\
    \        val numsSortedSetIteratorIteratorIterator = numsSortedSetIteratorIterator.iterator\n\
    \        val numsSortedSetIteratorIteratorIteratorIterator = numsSortedSetIteratorIteratorIterator.iterator\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorIterator = numsSortedSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorIterator = numsSortedSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorIteratorIterator = numsSortedSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSortedSetIteratorIteratorIteratorIterator.iterator\n        val numsSortedSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSortedSetIteratorIteratorIteratorIterator.iterator\n        val numsSortedSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSortedSetIteratorIteratorIteratorIterator.iterator\n        val numsSortedSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSortedSetIteratorIteratorIterator.iterator\n        val numsSortedSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSortedSetIteratorIteratorIterator.iterator\n        val numsSortedSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSortedSetIteratorIteratorIterator.iterator\n        val numsSortedSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSortedSetIteratorIteratorIterator.iterator\n        val numsSortedSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSortedSetIteratorIteratorIterator.iterator\n        val numsSortedSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSortedSetIteratorIteratorIterator.iterator\n        val numsSortedSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSortedSetIteratorIteratorIterator.iterator\n        val numsSortedSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSortedSetIteratorIteratorIterator.iterator\n        val numsSortedSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSortedSet\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp62nd2tny.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnumsSortedSetIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSortedSetIteratorIteratorIteratorIterator.iterator\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSortedSetIteratorIteratorIteratorIteratorIterator is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSortedSetIteratorIteratorIteratorIteratorIterator\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp62nd2tny.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mnumsSortedSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSortedSetIteratorIteratorIteratorIterator.iterator\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSortedSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ is already defined as \e[33mvalue\e[0m \e[35mnumsSortedSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp62nd2tny.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mnumsSortedSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSortedSetIteratorIteratorIterator.iterator\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSortedSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  numsSortedSetIteratorIteratorIteratorIt"
  stdout: ''
  timestamp: 1659805671
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSetSize\
    \ = numsSet.size\n        val numsSetIterator = numsSet.iterator\n        val\
    \ numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n \
    \       val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = num\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgcd2jfyu.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgcd2jfyu.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorIterator is\
    \ already defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpgcd2jfyu.scala:26:78 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgcd2jfyu.scala:"
  stdout: ''
  timestamp: 1659805626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSetSize\
    \ = numsSet.size\n        val numsSetIterator = numsSet.iterator\n        val\
    \ numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n \
    \       val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = num\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgcd2jfyu.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgcd2jfyu.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorIterator is\
    \ already defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpgcd2jfyu.scala:26:78 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgcd2jfyu.scala:"
  stdout: ''
  timestamp: 1659805626
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSorted = nums.sortWith(_ < _)\n  \
    \      val numsSum = numsSorted.foldLeft(0L) { (sum, num) =>\n            val\
    \ newSum = sum + num\n            if (newSum > 0) newSum else num\n        }\n\
    \        numsSorted.foldLeft(0L) { (sum, num) =>\n            val newSum = sum\
    \ + num\n            if (newSum > 0) newSum else num\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6bwjk0dw.scala:21)\n\tat Problem.main(tmp6bwjk0dw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805673
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSetIterator\
    \ = numsSet.iterator\n        val numsSetIteratorIterator = numsSetIterator.iterator\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwjr9wm7v.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwjr9wm7v.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e[0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorIterator is\
    \ already defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwjr9wm7v.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpwjr9wm7v.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIterat"
  stdout: ''
  timestamp: 1659805671
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsMap = nums.groupBy(x => x).mapValues(_.size)\n\
    \        val minSum = numsMap.minBy(_._2)._2\n        val subArray = numsMap.filter(_._2\
    \ == minSum)\n        val subArraySum = subArray.map(_._1).sum\n        minSum\
    \ + subArraySum\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9kmxyagd.scala:17)\n\tat Problem.main(tmp9kmxyagd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805676
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsCopy = nums.toList\n        val minSum\
    \ = numsCopy.foldLeft(0L){ (sum, num) =>\n            val newSum = sum + num\n\
    \            if (newSum < minSum) newSum else minSum\n        }\n        minSum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpml1hxout.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpml1hxout.scala:13:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805641
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSetSize\
    \ = numsSet.size\n        val numsSetIterator = numsSet.iterator\n        val\
    \ numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n \
    \       val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = num\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgcd2jfyu.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgcd2jfyu.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorIterator is\
    \ already defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpgcd2jfyu.scala:26:78 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgcd2jfyu.scala:"
  stdout: ''
  timestamp: 1659805626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val sums\
    \ = mutable.HashSet[Long]()\n        val minSum = Long.MaxValue\n        for(i\
    \ <- 0 until nums.size) {\n            val subArray = nums.slice(i+1, nums.size).filter(_\
    \ != nums(i))\n            val subArraySum = subArray.sum\n            sums +=\
    \ subArraySum\n            if(subArraySum < minSum) {\n                minSum\
    \ = subArraySum\n            }\n        }\n        minSum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong,\
    \ 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuxe451sc.scala:11:19 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36msums\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpuxe451sc.scala:18:23 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                minSum = subArraySum\n\e[31m\e[31m  \
    \ |\e[0m                ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \     Reassignment to val minSum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805667
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsCopy = nums.toList\n        val minSum\
    \ = numsCopy.foldLeft(0L) { (sum, num) =>\n            val newSum = sum + num\n\
    \            if (newSum < minSum) newSum else minSum\n        }\n        minSum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpn_xncf_p.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpn_xncf_p.scala:13:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsCopy = nums.toList\n        val minSum\
    \ = numsCopy.foldLeft(0L){ (sum, num) =>\n            val newSum = sum + num\n\
    \            if (newSum < minSum) newSum else minSum\n        }\n        minSum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpml1hxout.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpml1hxout.scala:13:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805641
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSetSize\
    \ = numsSet.size\n        val numsSetIterator = numsSet.iterator\n        val\
    \ numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n \
    \       val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIter\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv6mrdg6z.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpv6mrdg6z.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorIterator is\
    \ already defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpv6mrdg6z.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  numsSetIteratorIt"
  stdout: ''
  timestamp: 1659805672
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsMap = nums.groupBy(x => x).mapValues(_.size).asInstanceOf[Map[Long,\
    \ Int]]\n        val numsMapSorted = numsMap.sortBy(_._2).reverse\n        val\
    \ sums = numsMapSorted.map(x => x._2).sum\n        val minSum = sums.min\n   \
    \     minSum\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg_tw3_7m.scala:11:36 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mnumsMapSorted\e[0m = numsMap.sortBy(_._2).reverse\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m       value sortBy is not a member of collection.mutable.Map[Long, Int]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805672
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsCopy = nums.toList\n        val numsCopyCopy\
    \ = numsCopy.toList\n        val numsCopyCopyCopy = numsCopyCopy.toList\n    \
    \    val numsCopyCopyCopyCopy = numsCopyCopyCopy.toList\n        val numsCopyCopyCopyCopyCopy\
    \ = numsCopyCopyCopyCopy.toList\n        val numsCopyCopyCopyCopyCopyCopy = numsCopyCopyCopyCopyCopy.toList\n\
    \        val numsCopyCopyCopyCopyCopyCopyCopy = numsCopyCopyCopyCopyCopyCopy.toList\n\
    \        val numsCopyCopyCopyCopyCopyCopyCopy = numsCopyCopyCopyCopyCopyCopyCopy.toList\n\
    \        val numsCopyCopyCopyCopyCopyCopyCopy = numsCopyCopyCopyCopyCopyCopyCopyCopy.toList\n\
    \        val numsCopyCopyCopyCopyCopyCopyCopyCopy = numsCopyCopyCopyCopyCopyCopyCopyCopyCopy.toList\n\
    \        val numsCopyCopyCopyCopyCopyCopyCopyCopyCopy = numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy.toList\n\
    \        val numsCopyCopyCopyCopyCopyCopyCopyCopyCopy = numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy.toList\n\
    \        val numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy = numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy.toList\n\
    \        val numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy = numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy.toList\n\
    \        val numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy = numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy.toList\n\
    \        val numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy = numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy.toList\n\
    \        val numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\
    \ = numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy.toList\n\
    \        val numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\
    \ = numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy.toList\n\
    \        val numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\
    \ = numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong,\
    \ 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp35ckyrv1.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mnumsCopyCopyCopyCopyCopyCopyCopy\e\
    [0m = numsCopyCopyCopyCopyCopyCopyCopy.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsCopyCopyCopyCopyCopyCopyCopy is already defined as \e\
    [33mvalue\e[0m \e[35mnumsCopyCopyCopyCopyCopyCopyCopy\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp35ckyrv1.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsCopyCopyCopyCopyCopyCopyCopy\e[0m = numsCopyCopyCopyCopyCopyCopyCopyCopy.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsCopyCopyCopyCopyCopyCopyCopy is already defined as \e\
    [33mvalue\e[0m \e[35mnumsCopyCopyCopyCopyCopyCopyCopy\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp35ckyrv1.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsCopyCopyCopyCopyCopyCopyCopyCopyCopy\e[0m = numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsCopyCopyCopyCopyCopyCopyCopyCopyCopy is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsCopyCopyCopyCopyCopyCopyCopyCopyCopy\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp35ckyrv1.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\e\
    [0m = numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy.toList\n\e\
    [31"
  stdout: ''
  timestamp: 1659805673
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsMap = nums.groupBy(x => x).mapValues(_.size)\n\
    \        val numsMapSorted = numsMap.sortBy(_._1).reverse\n        val numsMapSortedKeys\
    \ = numsMapSorted.keys\n        val numsMapSortedValues = numsMapSorted.values\n\
    \        val numsMapSortedKeysSum = numsMapSortedKeys.sum\n        val numsMapSortedValuesSum\
    \ = numsMapSortedValues.sum\n        val numsMapSortedKeysSumMin = numsMapSortedKeysSum\
    \ - numsMapSortedKeysSum\n        val numsMapSortedValuesSumMin = numsMapSortedValuesSum\
    \ - numsMapSortedValuesSum\n        val numsMapSortedKeysSumMax = numsMapSortedKeysSum\
    \ + numsMapSortedKeysSum\n        val numsMapSortedValuesSumMax = numsMapSortedValuesSum\
    \ + numsMapSortedValuesSum\n        val numsMapSortedKeysSumMinMax = numsMapSortedKeysSumMin\
    \ - numsMapSortedKeysSumMax\n        val numsMapSortedValuesSumMinMax = numsMapSortedValuesSumMin\
    \ - numsMapSortedValuesSumMax\n        val numsMapSortedKeysSumMinMaxMin = numsMapSortedKeysSumMinMax\
    \ - numsMapSortedKeysSumMin\n        val numsMapSortedValuesSumMinMaxMin = numsMapSortedValuesSumMinMax\
    \ - numsMapSortedValuesSumMinMax\n        val numsMapSortedKeysSumMinMaxMinMinMax\
    \ = numsMapSortedKeysSumMinMaxMin - numsMapSortedKeysSumMinMax\n        val numsMapSortedValuesSumMinMaxMinMax\
    \ = numsMapSortedValuesSumMinMaxMin - numsMapSortedValuesSumMinMax\n        val\
    \ numsMapSortedKeysSumMinMaxMinMaxMinMax = numsMapSortedKeysSumMinMaxMinMax -\
    \ numsMapSortedKeysSumMinMaxMinMax\n        val numsMapSortedValuesSumMinMaxMinMaxMinMax\
    \ = numsMapSortedValuesSumMinMaxMinMax - numsMapSortedValuesSumMinMaxMinMax\n\
    \        val numsMapSortedKeysSumMinMaxMinMaxMinMaxMin = numsMapSortedKeysSumMinMaxMinMaxMin\
    \ - numsMapSortedKeysSumMinMaxMinMaxMinMax\n        val nums\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong,\
    \ 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqkvm0f68.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqkvm0f68.scala:10:27\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mnumsMap\e[0m = nums.groupBy(\e[36mx\e[0m => x).mapValues(_.size)\n\e[31m\e\
    [31m   |\e[0m                      ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue groupBy\
    \ is not a member of Null, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\e[31m   |\e\
    [0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m  import collection.LazyZip3.lazyZip3ToIterable\n\
    \e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\e[31m   |\e[0m\
    \  import collection.convert.ImplicitConversions.list asScalaBuffer\n\e[31m  \
    \ |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.set asScala\n\e\
    [31m   |\e[0m  import collection.convert.ImplicitConversionsToScala.list asScalaBuffer\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversionsToScala.map AsScalaConcurrentMap\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqkvm0f68.scala:26:53\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mnumsMapSortedKeysSumMinMaxMinMaxMinMax\e[0m = numsMapSortedKeysSumMinMaxMinMax\
    \ - numsMapSortedKeysSumMinMaxMinMax\n\e[31m\e[31m   |\e[0m                  \
    \                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                             Not found: numsMapSortedKeysSumMinMaxMinMax\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqkvm0f68.scala:28:56\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mv"
  stdout: ''
  timestamp: 1659805676
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val minSum = nums.foldLeft(0L)((sum, num)\
    \ => sum + num)\n        val subArray = nums.filter(x => x >= minSum)\n      \
    \  minSubArraySum(subArray)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659805678
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSorted = nums.sortWith(_ < _)\n  \
    \      val numsSortedLength = numsSorted.length\n        val numsSortedSum = numsSorted.sum\n\
    \        val numsSortedSumLength = numsSortedSum.length\n        val numsSortedSumLastIndex\
    \ = numsSortedSumLength - 1\n        val numsSortedSumLastElement = numsSortedSum(numsSortedSumLastIndex)\n\
    \        val numsSortedSumLastElementLength = numsSortedSumLastElement.length\n\
    \        val numsSortedSumLastElementLastIndex = numsSortedSumLastElementLength\
    \ - 1\n        val numsSortedSumLastElementLastElement = numsSortedSumLastElement(numsSortedSumLastElementLastIndex)\n\
    \        val numsSortedSumLastElementLastElementLength = numsSortedSumLastElementLastElement.length\n\
    \        val numsSortedSumLastElementLastElementLastIndex = numsSortedSumLastElementLastElementLength\
    \ - 1\n        val numsSortedSumLastElementLastElementLastElement = numsSortedSumLastElementLastElement(numsSortedSumLastElementLastElementLastIndex)\n\
    \        val numsSortedSumLastElementLastElementLastElementLength = numsSortedSumLastElementLastElementLastElement.length\n\
    \        val numsSortedSumLastElementLastElementLastElementLastIndex = numsSortedSumLastElementLastElementLastElementLength\
    \ - 1\n        val numsSortedSumLastElementLastElementLastElementLastElement =\
    \ numsSortedSumLastElementLastElementLastElement(numsSortedSumLastElementLastElementLastElementLastIndex)\n\
    \        val numsSortedSumLastElementLastElementLastElementLastElementLength =\
    \ numsSortedSumLastElementLastElementLastElementLastElement.length\n        val\
    \ numsSortedSumLastElementLastElementLastElementLastElementLastIndex = numsSortedSumLastElementLastElementLastElementLastElementLength\
    \ - 1\n        val numsSortedSumLastElementLastElementLastElementLastElementLastElement\
    \ = numsSortedSumLastElementLastElementLastElementLastElement(numsSortedSumLastElementLastElementLastElementLastElementLastIndex)\n\
    \        val numsSortedSumLastElementLastElementLastElementLastElementLastElementLength\
    \ = numsSortedSumLastElementLastElementLastElementLastElementLastElement.length\n\
    \        val numsSortedSumLastElementLastElementLastElementLastElementLastElementLastIndex\
    \ = numsSortedSumLastElementLastElementLastElementLastElementLastElementLastElementLength\
    \ - 1\n        val numsSortedSumLastElementLastElementLastElementLastElementLastElementLastElement\
    \ = nums\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppalbroh0.scala:13:48 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnumsSortedSumLength\e[0m\
    \ = numsSortedSum.length\n\e[31m\e[31m   |\e[0m                              \
    \    ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \    value length is not a member of Long\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmppalbroh0.scala:15:39\
    \ -----------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e\
    [0m \e[36mnumsSortedSumLastElement\e[0m = numsSortedSum(numsSortedSumLastIndex)\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            \e[33mvalue\e[0m \e[35mnumsSortedSum\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmppalbroh0.scala:29:92 ------------------------\e[0m\e[0m\n\e[31m29 |\e\
    [0m        \e[33mval\e[0m \e[36mnumsSortedSumLastElementLastElementLastElementLastElementLastElementLastIndex\e\
    [0m = numsSortedSumLastElementLastElementLastElementLastElementLastElementLastElementLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                                      \
    \                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: numsSortedSumLastElementLastElementLastElementLastElementLastElementLastElementLength\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppalbroh0.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659805676
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSetIterator\
    \ = numsSet.iterator\n        val numsSetIteratorNext = numsSetIterator.next\n\
    \        val numsSetIteratorNextValue = numsSetIteratorNext.toLong\n        val\
    \ numsSetIteratorNextNext = numsSetIteratorNext.next\n        val numsSetIteratorNextNextValue\
    \ = numsSetIteratorNextNext.toLong\n        val numsSetIteratorNextNextNext =\
    \ numsSetIteratorNextNext.next\n        val numsSetIteratorNextNextNextValue =\
    \ numsSetIteratorNextNextNext.toLong\n        val numsSetIteratorNextNextNextNext\
    \ = numsSetIteratorNextNextNext.next\n        val numsSetIteratorNextNextNextNextValue\
    \ = numsSetIteratorNextNextNextNext.toLong\n        val numsSetIteratorNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNext.next\n        val numsSetIteratorNextNextNextNextNextValue\
    \ = numsSetIteratorNextNextNextNextNext.toLong\n        val numsSetIteratorNextNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNextNext.next\n        val numsSetIteratorNextNextNextNextNextNextValue\
    \ = numsSetIteratorNextNextNextNextNextNext.toLong\n        val numsSetIteratorNextNextNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNextNextNext.next\n        val numsSetIteratorNextNextNextNextNextNextNextValue\
    \ = numsSetIteratorNextNextNextNextNextNextNext.toLong\n        val numsSetIteratorNextNextNextNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNextNextNextNextNext.next\n        val numsSetIteratorNextNextNextNextNextNextNextNextValue\
    \ = numsSetIteratorNextNextNextNextNextNextNextNext.toLong\n        val numsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNextNextNextNextNextNext.next\n        val numsSetIteratorNextNextNextNextNextNextNextNextNextValue\
    \ = numsSetIteratorNextNextNextNextNextNextNextNextNext.toLong\n        val numsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n        val\
    \ numsSetIteratorNextNextNextNextNextNextNextNextNextValue = numsSetIteratorNextNext\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp360yejyk.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m = numsSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorNextNextNextNextNextNextNextNextNext is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp360yejyk.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorNextNextNextNextNextNextNextNextNextValue\e\
    [0m = numsSetIteratorNextNext\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorNextNextNextNextNextNextNextNextNextValue is\
    \ already defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorNextNextNextNextNextNextNextNextNextValue\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp360yejyk.scala:14:58 ------------------------\e[0m\e[0m\n\
    \e[31m14 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorNextNext\e[0m = numsSetIteratorNext.next\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      value next is not a\
    \ member of Long\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp360yejyk.scala:26:62\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSetIteratorNextNextNextNextNextNextNextNext\e[0m = numsSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue"
  stdout: ''
  timestamp: 1659805675
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSetSize\
    \ = numsSet.size\n        val numsSetIterator = numsSet.iterator\n        val\
    \ numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n \
    \       val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = num\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgcd2jfyu.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgcd2jfyu.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorIterator is\
    \ already defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpgcd2jfyu.scala:26:78 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgcd2jfyu.scala:"
  stdout: ''
  timestamp: 1659805626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsCopy = nums.toList\n        val minSum\
    \ = numsCopy.foldLeft(0L) { (sum, num) =>\n            val newSum = sum + num\n\
    \            if (newSum < minSum) newSum else minSum\n        }\n        minSum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpn_xncf_p.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpn_xncf_p.scala:13:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSetSize\
    \ = numsSet.size\n        val numsSetIterator = numsSet.iterator\n        val\
    \ numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n \
    \       val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = num\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgcd2jfyu.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgcd2jfyu.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorIterator is\
    \ already defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpgcd2jfyu.scala:26:78 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgcd2jfyu.scala:"
  stdout: ''
  timestamp: 1659805626
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsCopy = nums.toList\n        val minSum\
    \ = numsCopy.foldLeft(0L)((sum, num) => sum + num)\n        val subArray = numsCopy.filter(num\
    \ => num < minSum)\n        minSum - subArray.foldLeft(0L)((sum, num) => sum +\
    \ num)\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdpnnpbyh.scala:16)\n\tat Problem.main(tmpdpnnpbyh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805676
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsCopy = nums.toList\n        val minSum\
    \ = numsCopy.foldLeft(0L){ (sum, num) =>\n            val newSum = sum + num\n\
    \            if (newSum < minSum) newSum else minSum\n        }\n        minSum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpml1hxout.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpml1hxout.scala:13:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805641
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsCopy = nums.toList\n        val numsCopyCopy\
    \ = numsCopy.toList\n        val numsCopyCopyCopy = numsCopyCopy.toList\n    \
    \    val numsCopyCopyCopyCopy = numsCopyCopyCopy.toList\n        val numsCopyCopyCopyCopyCopy\
    \ = numsCopyCopyCopyCopy.toList\n        val numsCopyCopyCopyCopyCopyCopy = numsCopyCopyCopyCopyCopy.toList\n\
    \        val numsCopyCopyCopyCopyCopyCopyCopy = numsCopyCopyCopyCopyCopyCopy.toList\n\
    \        val numsCopyCopyCopyCopyCopyCopyCopy = numsCopyCopyCopyCopyCopyCopyCopy.toList\n\
    \        val numsCopyCopyCopyCopyCopyCopyCopy = numsCopyCopyCopyCopyCopyCopyCopyCopy.toList\n\
    \        val numsCopyCopyCopyCopyCopyCopyCopyCopy = numsCopyCopyCopyCopyCopyCopyCopyCopyCopy.toList\n\
    \        val numsCopyCopyCopyCopyCopyCopyCopyCopyCopy = numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy.toList\n\
    \        val numsCopyCopyCopyCopyCopyCopyCopyCopyCopy = numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy.toList\n\
    \        val numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy = numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy.toList\n\
    \        val numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy = numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy.toList\n\
    \        val numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy = numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy.toList\n\
    \        val numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy = numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy.toList\n\
    \        val numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\
    \ = numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy.toList\n\
    \        val numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\
    \ = numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy.toList\n\
    \        val numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\
    \ = numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_201ajlp.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mnumsCopyCopyCopyCopyCopyCopyCopy\e\
    [0m = numsCopyCopyCopyCopyCopyCopyCopy.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsCopyCopyCopyCopyCopyCopyCopy is already defined as \e\
    [33mvalue\e[0m \e[35mnumsCopyCopyCopyCopyCopyCopyCopy\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_201ajlp.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsCopyCopyCopyCopyCopyCopyCopy\e[0m = numsCopyCopyCopyCopyCopyCopyCopyCopy.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsCopyCopyCopyCopyCopyCopyCopy is already defined as \e\
    [33mvalue\e[0m \e[35mnumsCopyCopyCopyCopyCopyCopyCopy\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_201ajlp.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsCopyCopyCopyCopyCopyCopyCopyCopyCopy\e[0m = numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsCopyCopyCopyCopyCopyCopyCopyCopyCopy is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsCopyCopyCopyCopyCopyCopyCopyCopyCopy\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp_201ajlp.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\e\
    [0m = numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy.toList\n\e\
    [31"
  stdout: ''
  timestamp: 1659805674
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsMap = nums.groupBy(x => x).mapValues(_.size)\n\
    \        val numsMapSorted = numsMap.sortBy(_._2).reverse\n        val numsMapSortedKeys\
    \ = numsMapSorted.keys\n        val numsMapSortedValues = numsMapSorted.values\n\
    \        val numsMapSortedKeysAndValues = numsMapSorted.zip(numsMapSortedValues)\n\
    \        val numsMapSortedKeysAndValuesAndSum = numsMapSortedKeysAndValues.map(x\
    \ => (x._1, x._2 + x._1))\n        val numsMapSortedKeysAndValuesAndSumAndMin\
    \ = numsMapSortedKeysAndValuesAndSum.minBy(x => x._2)\n        val numsMapSortedKeysAndValuesAndSumAndMinValue\
    \ = numsMapSortedKeysAndValuesAndSumAndMin._1\n        val numsMapSortedKeysAndValuesAndSumAndMinKeys\
    \ = numsMapSortedKeysAndValuesAndSumAndMin._2\n        val numsMapSortedKeysAndValuesAndSumAndMinKeysAndSum\
    \ = numsMapSortedKeysAndValuesAndSumAndMinKeys.map(x => (x._1, x._2 + x._1))\n\
    \        val numsMapSortedKeysAndValuesAndSumAndMinKeysAndSumAndMin = numsMapSortedKeysAndValuesAndSumAndMinKeysAndSum.minBy(x\
    \ => x._2)\n        val numsMapSortedKeysAndValuesAndSumAndMinKeysAndSumAndMinValue\
    \ = numsMapSortedKeysAndValuesAndSumAndMinKeysAndSumAndMin._1\n        val numsMapSortedKeysAndValuesAndSumAndMinKeysAndSumAndMinKeys\
    \ = numsMapSortedKeysAndValuesAndSumAndMinKeysAndSumAndMin._2\n        val numsMapSortedKeysAndValuesAndSumAndMinKeysAndSumAndMinKeysAndSum\
    \ = numsMapSortedKeysAndValuesAndSumAndMinKeysAndSumAndMinKeysAndSum.map(x =>\
    \ (x._1, x._2 + x._1))\n        val numsMapSortedKeysAndValuesAndSumAndMinKeysAndSumAndMinKeysAndSumAndMin\
    \ = numsMapSortedKeysAndValuesAndSumAndMinKeysAndSumAndMinKeysAndSum.minBy(x =>\
    \ x._2)\n        val numsMapSortedKeysAndValuesAndSumAndMinKeysAndSumAndMinKeysAndSumAndMinValue\
    \ = numsMapSortedKeysAndValuesAndSumAndMin\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptecn1981.scala:11:36 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mnumsMapSorted\e[0m = numsMap.sortBy(_._2).reverse\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m     value sortBy is not a member of scala.collection.MapView[Long, Int]\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmptecn1981.scala:23:79 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsMapSortedKeysAndValuesAndSumAndMinKeysAndSumAndMinKeysAndSum\e\
    [0m = numsMapSortedKeysAndValuesAndSumAndMinKeysAndSumAndMinKeysAndSum.map(\e\
    [36mx\e[0m => (x._1, x._2 + x._1))\n\e[31m\e[31m   |\e[0m                    \
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0mRecursive \e[33mvalue\e[0m \e[35mnumsMapSortedKeysAndValuesAndSumAndMinKeysAndSumAndMinKeysAndSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptecn1981.scala:26:5\
    \ ---------------------\e[0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659805676
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsArray\
    \ = nums.toArray\n        val numsArrayLen = numsArray.length\n        val numsArraySet\
    \ = numsArray.toSet\n        val numsArrayArray = numsArray.toArray\n        val\
    \ numsArraySetLen = numsArraySet.length\n        val numsArrayArrayLen = numsArrayArray.length\n\
    \        val numsArraySetSet = numsArraySet.toSet\n        val numsArrayArraySet\
    \ = numsArrayArray.toSet\n        val numsArraySetSetLen = numsArraySetSet.length\n\
    \        val numsArrayArraySetLen = numsArrayArraySet.length\n        val numsArraySetSetSetLen\
    \ = numsArraySetSetLen\n        val numsArrayArraySetSetLen = numsArrayArraySetLen\n\
    \        val numsArraySetSetSetLen = numsArraySetSetLen\n        val numsArrayArraySetSetLen\
    \ = numsArrayArraySetLen\n        val numsArraySetSetSetLen = numsArraySetSetLen\n\
    \        val numsArrayArraySetSetLen = numsArrayArraySetLen\n        val numsArraySetSetSetLen\
    \ = numsArraySetSetLen\n        val numsArrayArraySetSetLen = numsArrayArraySetLen\n\
    \        val numsArraySetSetSetLen = numsArraySetSetLen\n        val numsArrayArraySetSetLen\
    \ = numsArrayArraySetLen\n        val numsArraySetSetSetLen = numsArraySetSetLen\n\
    \        val numsArrayArraySetSetLen = numsArrayArraySetLen\n        val numsArraySetSetSetLen\
    \ = numsArraySetSetLen\n        val numsArrayArraySetSetLen = numsArrayArraySetLen\n\
    \        val numsArraySetSetSetLen = numsArraySetSetLen\n        val numsArrayArraySetSetLen\
    \ = numsArrayArraySetLen\n        val numsArraySetSetSetLen = numsArraySetSetLen\n\
    \        val numsArrayArraySetSetLen = numsArrayArraySetLen\n        val numsArraySetSetSetLen\
    \ = numsArraySetSetLen\n        val numsArrayArraySetSetLen = numsArrayArraySetLen\n\
    \        val numsArraySetSetSetLen = numsArraySetSetLen\n        val numsArray\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzd7_y989.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzd7_y989.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsArraySetSetSetLen\e[0m = numsArraySetSetLen\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mnumsArraySetSetSetLen\
    \ is already defined as \e[33mvalue\e[0m \e[35mnumsArraySetSetSetLen\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpzd7_y989.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsArrayArraySetSetLen\e[0m = numsArrayArraySetLen\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsArrayArraySetSetLen is already defined as \e[33mvalue\e\
    [0m \e[35mnumsArrayArraySetSetLen\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzd7_y989.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mnumsArraySetSetSetLen\e\
    [0m = numsArraySetSetLen\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsArraySetSetSetLen is already defined as \e[33mvalue\e\
    [0m \e[35mnumsArraySetSetSetLen\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzd7_y989.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mnumsArrayArraySetSetLen\e\
    [0m = numsArrayArraySetLen\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsArrayArraySetSetLen is already defined as \e[33mvalue\e\
    [0m \e[35mnumsArrayArraySetSetLen\e[0m\n\e[31m   |\e[0m\n\e[31m"
  stdout: ''
  timestamp: 1659805680
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsCopy = nums.toList\n        val minSum\
    \ = numsCopy.foldLeft(0L){ (sum, num) =>\n            val newSum = sum + num\n\
    \            if (newSum < minSum) newSum else minSum\n        }\n        minSum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpml1hxout.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpml1hxout.scala:13:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805641
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSortedSet\
    \ = nums.sortWith(_ < _)\n        val numsSortedSetSet = numsSortedSet.toSet\n\
    \        val numsSortedSetSetSize = numsSortedSetSet.size\n        val numsSortedSetSetIterator\
    \ = numsSortedSetSet.iterator\n        val numsSortedSetSetIteratorSize = numsSortedSetSetIterator.size\n\
    \        val numsSortedSetSetIteratorIterator = numsSortedSetSetIterator.iterator\n\
    \        val numsSortedSetSetIteratorIteratorSize = numsSortedSetSetIteratorIterator.size\n\
    \        val numsSortedSetSetIteratorIteratorIterator = numsSortedSetSetIteratorIterator.iterator\n\
    \        val numsSortedSetSetIteratorIteratorIteratorSize = numsSortedSetSetIteratorIteratorIterator.size\n\
    \        val numsSortedSetSetIteratorIteratorIteratorIterator = numsSortedSetSetIteratorIteratorIterator.iterator\n\
    \        val numsSortedSetSetIteratorIteratorIteratorIteratorSize = numsSortedSetSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSortedSetSetIteratorIteratorIteratorIteratorIterator = numsSortedSetSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSortedSetSetIteratorIteratorIteratorIteratorIteratorSize = numsSortedSetSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSortedSetSetIteratorIteratorIteratorIteratorIterator.iterator\n      \
    \  val numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorSize =\
    \ numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIterator.size\n    \
    \    val numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp60tsvcqk.scala:27:91 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mnumsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp60tsvcqk.scala:28:103\
    \ -----------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mnumsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp60tsvcqk.scala:29:99\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mnumsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-exp"
  stdout: ''
  timestamp: 1659805679
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSetSize\
    \ = numsSet.size\n        val numsSetIterator = numsSet.iterator\n        val\
    \ numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n \
    \       val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIter\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv6mrdg6z.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpv6mrdg6z.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorIterator is\
    \ already defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpv6mrdg6z.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  numsSetIteratorIt"
  stdout: ''
  timestamp: 1659805672
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val minSum = nums.foldLeft(0L)((sum, num)\
    \ => sum + num)\n        val subArray = nums.filter(_ > minSum)\n        minSubArraySum(subArray)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659805687
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsCopy = nums.toList\n        val minSum\
    \ = numsCopy.foldLeft(0L) { (sum, num) =>\n            val newSum = sum + num\n\
    \            if (newSum < minSum) newSum else minSum\n        }\n        minSum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpn_xncf_p.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpn_xncf_p.scala:13:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805619
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsCopy = nums.toList\n        val minSum\
    \ = numsCopy.foldLeft(numsCopy(0)) { (sum, num) =>\n            val newSum = sum\
    \ + num\n            if (newSum < sum) newSum else sum\n        }\n        minSum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4ok4aknj.scala:18)\n\tat Problem.main(tmp4ok4aknj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val minSum\
    \ = nums.foldLeft(0L)((sum, num) => sum + num)\n        val numsSetIterator =\
    \ numsSet.iterator\n        val numsSetIteratorNext = numsSetIterator.next\n \
    \       val numsSetIteratorNextNext = numsSetIteratorNext.next\n        val numsSetIteratorNextNextNext\
    \ = numsSetIteratorNextNext.next\n        val numsSetIteratorNextNextNextNext\
    \ = numsSetIteratorNextNextNext.next\n        val numsSetIteratorNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNext.next\n        val numsSetIteratorNextNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNextNext.next\n        val numsSetIteratorNextNextNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNextNextNext.next\n        val numsSetIteratorNextNextNextNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNextNextNextNext.next\n        val numsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNextNextNextNextNext.next\n        val numsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNextNextNextNextNextNext.next\n        val numsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n        val\
    \ numsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n   \
    \     val numsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5alwyuh2.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = numsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5alwyuh2.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = numsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5alwyuh2.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = numsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorNextNextNextNextNextNextNe"
  stdout: ''
  timestamp: 1659805689
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val minSum\
    \ = nums.foldLeft(0L) { (sum, num) =>\n            val newSum = sum + num\n  \
    \          if (numsSet.contains(newSum)) {\n                newSum\n         \
    \   } else {\n                sum\n            }\n        }\n        minSum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0bw7p3ex.scala:22)\n\tat Problem.main(tmp0bw7p3ex.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805647
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSorted = nums.sortWith(_ < _)\n  \
    \      val sums = numsSorted.scanLeft(0L)(_ + _)\n        sums.min\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgu03b54_.scala:15)\n\tat Problem.main(tmpgu03b54_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805695
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsMap = nums.toMap\n        val minSum\
    \ = nums.foldLeft(0L) { (sum, num) =>\n            val sum = sum + num\n     \
    \       val key = numsMap.get(sum)\n            if (key == None) sum else key.get\n\
    \        }\n        minSum\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmptbd4sq12.scala:10:32 -----------------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnumsMap\e[0m = nums.toMap\n\
    \e[31m\e[31m   |\e[0m                                ^\e[0m\n\e[31m   |\e[0m \
    \                               Cannot prove that Long <:< (K, V)\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m                                where:    K is a type variable\n\
    \e[31m   |\e[0m                                          V is a type variable\n\
    \e[31m   |\e[0m                                .\n1 error found\n"
  stdout: ''
  timestamp: 1659805690
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsCopy = nums.toList\n        val minSum\
    \ = numsCopy.foldLeft(0L)((sum, num) => sum + num)\n        val maxSum = numsCopy.foldRight(0L)((sum,\
    \ num) => sum + num)\n        val minSumSubArray = numsCopy.foldLeft(0L)((sum,\
    \ num) => {\n            val subArray = numsCopy.filter(_ != num)\n          \
    \  val newSum = sum + num\n            if (newSum < minSum) {\n              \
    \  minSum = newSum\n                minSumSubArray = subArray\n            } else\
    \ if (newSum > maxSum) {\n                maxSum = newSum\n                minSumSubArray\
    \ = subArray\n            }\n            newSum\n        })\n        minSumSubArray\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpjmi1ebuo.scala:17:23 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                minSum = newSum\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val minSum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpjmi1ebuo.scala:18:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m                minSumSubArray\
    \ = subArray\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m   \
    \             Recursive \e[33mvalue\e[0m \e[35mminSumSubArray\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpjmi1ebuo.scala:20:23 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                maxSum = newSum\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val maxSum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpjmi1ebuo.scala:21:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                minSumSubArray\
    \ = subArray\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m   \
    \             Recursive \e[33mvalue\e[0m \e[35mminSumSubArray\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659805686
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsCopy = nums.toList\n        val minSum\
    \ = numsCopy.foldLeft(0L) { (sum, num) =>\n            val newSum = sum + num\n\
    \            if (newSum < minSum) newSum else minSum\n        }\n        minSum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpn_xncf_p.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpn_xncf_p.scala:13:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val minSum = math.min(nums.sum)\n        val\
    \ subArray = nums.filter(x => x >= minSum)\n        minSubArraySum(subArray)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp71d3sc4j.scala:10:26 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mminSum\e[0m = math.min(nums.sum)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of\
    \ the overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments (Long)\n1 error found\n"
  stdout: ''
  timestamp: 1659805689
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsCopy = nums.toList\n        val minSum\
    \ = numsCopy.foldLeft(0L)((sum, num) => {\n            val newSum = sum + num\n\
    \            if (newSum < minSum) {\n                minSum = newSum\n       \
    \     }\n            newSum\n        })\n        minSum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong,\
    \ 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpjvlwfgx4.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (newSum < minSum) {\n\e[31m\e\
    [31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m                \
    \         Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpjvlwfgx4.scala:14:16 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                minSum = newSum\n\e[31m\e[31m   |\e[0m\
    \                ^\e[0m\n\e[31m   |\e[0m                Recursive \e[33mvalue\e\
    [0m \e[35mminSum\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805686
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsArray = nums.toArray\n        val\
    \ numsArrayLength = numsArray.length\n        val numsArraySum = numsArray.sum\n\
    \        val numsArraySumLength = numsArraySum.length\n        val numsArraySumMinusOne\
    \ = numsArraySum - 1\n        val numsArraySumMinusOneLength = numsArraySumMinusOne.length\n\
    \        val numsArraySumMinusOneArray = numsArraySumMinusOne.toArray\n      \
    \  val numsArraySumMinusOneArrayLength = numsArraySumMinusOneArray.length\n  \
    \      val numsArraySumMinusOneArraySum = numsArraySumMinusOneArray.sum\n    \
    \    val numsArraySumMinusOneArraySumLength = numsArraySumMinusOneArraySum.length\n\
    \        val numsArraySumMinusOneArraySumMinusOne = numsArraySumMinusOneArraySum\
    \ - 1\n        val numsArraySumMinusOneArraySumMinusOneLength = numsArraySumMinusOneArraySumMinusOne.length\n\
    \        val numsArraySumMinusOneArraySumMinusOneArray = numsArraySumMinusOneArraySumMinusOne.toArray\n\
    \        val numsArraySumMinusOneArraySumMinusOneArrayLength = numsArraySumMinusOneArraySumMinusOneArray.length\n\
    \        val numsArraySumMinusOneArraySumMinusOneArraySum = numsArraySumMinusOneArraySumMinusOneArray.sum\n\
    \        val numsArraySumMinusOneArraySumMinusOneArraySumLength = numsArraySumMinusOneArraySumMinusOneArraySum.length\n\
    \        val numsArraySumMinusOneArraySumMinusOneArraySumMinusOne = numsArraySumMinusOneArraySumMinusOneArraySum\
    \ - 1\n        val numsArraySumMinusOneArraySumMinusOneArraySumMinusOneLength\
    \ = numsArraySumMinusOneArraySumMinusOneArraySumMinusOne.length\n        val numsArraySumMinusOneArraySumMinusOneArraySumMinusOneArray\
    \ = numsArraySumMinusOneArraySumMinusOneArraySumMinusOne.toArray\n        val\
    \ numsArraySumMinusOneArraySumMinusOneArraySumMinusOneArrayLength = numsArraySumMinusOneArraySumMinusOneArraySumMinusOneArray.length\n\
    \        val nums\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpp6wmj_8l.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp6wmj_8l.scala:10:29\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mnumsArray\e[0m = nums.toArray\n\e[31m\e[31m   |\e[0m                     \
    \   ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toArray is not a member of Null, but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mOne of the following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m  import Option.option2Iterable\n\e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\
    \e[31m   |\e[0m  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip4.lazyZip4ToIterable\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.buffer\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.list\
    \ asScalaBuffer\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties\
    \ AsScalaMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration\
    \ AsScalaIterator\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator\
    \ asScala\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.map\
    \ AsScalaConcurrentMap\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpp6wmj_8l.scala:31:5 ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659805695
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSorted = nums.sortWith(_ < _)\n  \
    \      val minSum = numsSorted.head\n        val minSumIndex = numsSorted.indexWhere(_\
    \ == minSum)\n        val minSumSubArray = numsSorted.take(minSumIndex + 1)\n\
    \        val minSumSubArraySum = minSumSubArray.sum\n        minSumSubArraySum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpodwb0g2l.scala:19)\n\tat Problem.main(tmpodwb0g2l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805698
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsCopy = nums.toList\n        val sums\
    \ = mutable.ArrayBuffer.empty[Long]\n        val minSum = Long.MaxValue\n    \
    \    for(i <- 0 until numsCopy.size) {\n            val curSum = numsCopy(i) +\
    \ sums.last\n            sums += curSum\n            if(curSum < minSum) {\n \
    \               minSum = curSum\n            }\n        }\n        minSum\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1us8h2zv.scala:11:19 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36msums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmp1us8h2zv.scala:17:23 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                minSum = curSum\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val minSum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805688
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsCopy = nums.toList\n        val minSum\
    \ = numsCopy.foldLeft(0L)((sum, num) => {\n            val newSum = sum + num\n\
    \            if (newSum < minSum) newSum else minSum\n        })\n        minSum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp72n5rnme.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp72n5rnme.scala:13:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsCopy = nums.toList\n        val sums\
    \ = mutable.HashMap.empty[Long, Long]\n        val minSum = Long.MaxValue\n  \
    \      for(i <- 0 until numsCopy.size) {\n            val curSum = numsCopy(i)\
    \ + sums.getOrElse(numsCopy(i), 0L)\n            sums.put(numsCopy(i), curSum)\n\
    \            if(curSum < minSum) {\n                minSum = curSum\n        \
    \    }\n        }\n        minSum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfxbg8_po.scala:11:19 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36msums\e[0m = mutable.HashMap.empty[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmpfxbg8_po.scala:17:23 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                minSum = curSum\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val minSum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805688
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsCopy = nums.toList\n        val minSum\
    \ = numsCopy.foldLeft(0L)((sum, num) => {\n            val newSum = sum + num\n\
    \            if (newSum < minSum) newSum else minSum\n        })\n        minSum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp72n5rnme.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp72n5rnme.scala:13:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val minSum = math.min(nums.sum)\n        val\
    \ minSubArray = nums.filter(x => x >= minSum).map(x => x - minSum).sorted\n  \
    \      minSubArray.foldLeft(math.min(nums.sum)) { (sum, elem) => sum + elem }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp_pyniz4l.scala:10:26 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mminSum\e[0m = math.min(nums.sum)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of\
    \ the overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments (Long)\n\e[31m\e[31m-- Error: /tmp/tmp_pyniz4l.scala:11:83 -----------------------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mminSubArray\e[0m = nums.filter(\e\
    [36mx\e[0m => x >= minSum).map(\e[36mx\e[0m => x - minSum).sorted\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e\
    [0m \e[35mBigDecimal\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e\
    [0m \e[35mInt\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B]\
    \ of parameter ord of \e[33mmethod\e[0m \e[35msorted\e[0m in \e[33mtrait\e[0m\
    \ \e[35mStrictOptimizedSeqOps\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659805692
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSetIterator\
    \ = numsSet.iterator\n        val numsSetIteratorNext = numsSetIterator.next\n\
    \        val numsSetIteratorNextValue = numsSetIteratorNext.asInstanceOf[Long]\n\
    \        val numsSetIteratorNextNext = numsSetIteratorNext.next\n        val numsSetIteratorNextNextValue\
    \ = numsSetIteratorNextNext.asInstanceOf[Long]\n        val numsSetIteratorNextNextNext\
    \ = numsSetIteratorNextNext.next\n        val numsSetIteratorNextNextNextValue\
    \ = numsSetIteratorNextNextNext.asInstanceOf[Long]\n        val numsSetIteratorNextNextNextNext\
    \ = numsSetIteratorNextNextNext.next\n        val numsSetIteratorNextNextNextNextValue\
    \ = numsSetIteratorNextNextNextNext.asInstanceOf[Long]\n        val numsSetIteratorNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNext.next\n        val numsSetIteratorNextNextNextNextNextValue\
    \ = numsSetIteratorNextNextNextNextNext.asInstanceOf[Long]\n        val numsSetIteratorNextNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNextNext.next\n        val numsSetIteratorNextNextNextNextNextNextValue\
    \ = numsSetIteratorNextNextNextNextNextNext.asInstanceOf[Long]\n        val numsSetIteratorNextNextNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNextNextNext.next\n        val numsSetIteratorNextNextNextNextNextNextNextValue\
    \ = numsSetIteratorNextNextNextNextNextNextNext.asInstanceOf[Long]\n        val\
    \ numsSetIteratorNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNextNextNextNextNext.asInstanceOf[Long]\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNextNextNextNextNext.asInstanceOf[Long]\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNext = numsSet\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4z80zzjs.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorNextNextNextNextNextNextNextNextValue\e\
    [0m = numsSetIteratorNextNextNextNextNextNextNextNextNext.asInstanceOf[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorNextNextNextNextNextNextNextNextValue is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorNextNextNextNextNextNextNextNextValue\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4z80zzjs.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m = numsSet\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorNextNextNextNextNextNextNextNextNext is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp4z80zzjs.scala:14:58 ------------------------\e[0m\e[0m\n\
    \e[31m14 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorNextNext\e[0m = numsSetIteratorNext.next\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      value next is not a\
    \ member of Long\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp4z80zzjs.scala:26:62\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSetIteratorNextNextNextNextNextNextNextNext\e[0m = numsSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsSetIt"
  stdout: ''
  timestamp: 1659805697
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSetIterator\
    \ = numsSet.iterator\n        val numsSetIteratorNext = numsSetIterator.next\n\
    \        val numsSetIteratorNextValue = numsSetIteratorNext.get\n        val numsSetIteratorNextNext\
    \ = numsSetIteratorNext.next\n        val numsSetIteratorNextNextValue = numsSetIteratorNextNext.get\n\
    \        val numsSetIteratorNextNextNext = numsSetIteratorNextNext.next\n    \
    \    val numsSetIteratorNextNextNextValue = numsSetIteratorNextNextNext.get\n\
    \        val numsSetIteratorNextNextNextNext = numsSetIteratorNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextValue = numsSetIteratorNextNextNextNext.get\n\
    \        val numsSetIteratorNextNextNextNextNext = numsSetIteratorNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNext.get\n\
    \        val numsSetIteratorNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNextNext.get\n\
    \        val numsSetIteratorNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNextNextNext.get\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNextNextNextNextNext.get\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNextNextNextNextNextNext.get\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextNextValue = numsSetIteratorNextNextNextNext\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7rlcinpe.scala:13:59 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorNextValue\e\
    [0m = numsSetIteratorNext.get\n\e[31m\e[31m   |\e[0m                         \
    \              ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                      value get is not a member of Long\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp7rlcinpe.scala:14:58 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorNextNext\e[0m\
    \ = numsSetIteratorNext.next\n\e[31m\e[31m   |\e[0m                          \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \                    value next is not a member of Long\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp7rlcinpe.scala:24:58 ---------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorNextNextNextNextNextNextNext\e\
    [0m = numsSetIteratorNextNextNextNextNextNextNext.next\n\e[31m\e[31m   |\e[0m\
    \                                                          ^\e[0m\n\e[31m   |\e\
    [0m  Recursive \e[33mvalue\e[0m \e[35mnumsSetIteratorNextNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp7rlcinpe.scala:26:62\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSetIteratorNextNextNextNextNextNextNextNext\e[0m = numsSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7rlcinpe.scala:30:70\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mnumsSetIteratorNextNextNextNextNextNextNextNextNextNext\e[0m = numsSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m "
  stdout: ''
  timestamp: 1659805628
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSorted = nums.sortWith(_ < _)\n  \
    \      val numsSortedLength = numsSorted.length\n        val numsSortedSum = numsSorted.sum\n\
    \        val numsSortedSumLength = numsSortedSum.length\n        val numsSortedSumMinusOne\
    \ = numsSortedSum - numsSortedSumLength\n        val numsSortedSumMinusOneLength\
    \ = numsSortedSumMinusOne.length\n        val numsSortedSumMinusOneMinusOne =\
    \ numsSortedSumMinusOne - numsSortedSumMinusOneLength\n        val numsSortedSumMinusOneMinusOneLength\
    \ = numsSortedSumMinusOneMinusOne.length\n        val numsSortedSumMinusOneMinusOneMinusOne\
    \ = numsSortedSumMinusOneMinusOne - numsSortedSumMinusOneMinusOneLength\n    \
    \    val numsSortedSumMinusOneMinusOneMinusOneLength = numsSortedSumMinusOneMinusOneMinusOne.length\n\
    \        val numsSortedSumMinusOneMinusOneMinusOneMinusOne = numsSortedSumMinusOneMinusOneMinusOne\
    \ - numsSortedSumMinusOneMinusOneMinusOneLength\n        val numsSortedSumMinusOneMinusOneMinusOneMinusOneLength\
    \ = numsSortedSumMinusOneMinusOneMinusOneMinusOne.length\n        val numsSortedSumMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = numsSortedSumMinusOneMinusOneMinusOneMinusOneMinusOneLength - numsSortedSumMinusOneMinusOneMinusOneMinusOneMinusOneLength\n\
    \        val numsSortedSumMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = numsSortedSumMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneLength\
    \ - numsSortedSumMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneLength\n    \
    \    val numsSortedSumMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneLength\
    \ = numsSortedSumMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneLength\
    \ - numsSortedSumMinusOneMinusOneMinusOneMinusOneMin\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong,\
    \ 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp04je32wd.scala:13:48 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnumsSortedSumLength\e[0m\
    \ = numsSortedSum.length\n\e[31m\e[31m   |\e[0m                              \
    \    ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \    value length is not a member of Long\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp04je32wd.scala:22:68 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36mnumsSortedSumMinusOneMinusOneMinusOneMinusOneMinusOne\e\
    [0m = numsSortedSumMinusOneMinusOneMinusOneMinusOneMinusOneLength - numsSortedSumMinusOneMinusOneMinusOneMinusOneMinusOneLength\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m  Not found: numsSortedSumMinusOneMinusOneMinusOneMinusOneMinusOneLength\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp04je32wd.scala:23:76\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mnumsSortedSumMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\e[0m = numsSortedSumMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneLength\
    \ - numsSortedSumMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneLength\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: numsSortedSumMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneLength\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp04je32wd.scala:24:90\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSortedSumMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneLength\e\
    [0m = numsSortedSumMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneLength\
    \ - numsSortedSumMinusOneMinusOneMinusOneMinusOneMin\n\e[31m\e[31m   |\e[0m   "
  stdout: ''
  timestamp: 1659805698
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSorted = nums.sortWith(_ < _)\n  \
    \      val sums = numsSorted.scanLeft(0)(_ + _)\n        val minSum = sums.min\n\
    \        val minSumIndex = sums.indexOf(minSum)\n        sums(minSumIndex)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4e3xojl8.scala:11:42\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36msums\e\
    [0m = numsSorted.scanLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m   |\e[0m        \
    \                                  ^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                           Found:    Long\n\e[31m   |\e[0m                  \
    \                        Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805698
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSetSize\
    \ = numsSet.size\n        val numsSetIterator = numsSet.iterator\n        val\
    \ numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n \
    \       val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = num\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgcd2jfyu.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgcd2jfyu.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorIterator is\
    \ already defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpgcd2jfyu.scala:26:78 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgcd2jfyu.scala:"
  stdout: ''
  timestamp: 1659805626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSetSize\
    \ = numsSet.size\n        val numsSetIterator = numsSet.iterator\n        val\
    \ numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n \
    \       val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = num\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgcd2jfyu.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgcd2jfyu.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorIterator is\
    \ already defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpgcd2jfyu.scala:26:78 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgcd2jfyu.scala:"
  stdout: ''
  timestamp: 1659805626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsCopy = nums.toList\n        val numsCopyLength\
    \ = numsCopy.length\n        val numsCopyMin = numsCopy.min\n        val numsCopyMax\
    \ = numsCopy.max\n        val numsCopySum = numsCopy.sum\n        val numsCopySumMin\
    \ = numsCopySum.min\n        val numsCopySumMax = numsCopySum.max\n        val\
    \ numsCopySumSum = numsCopySum.sum\n        val numsCopySumSumMin = numsCopySumSum.min\n\
    \        val numsCopySumSumMax = numsCopySumSum.max\n        val numsCopySumSumSum\
    \ = numsCopySumSum.sum\n        val numsCopySumSumSumMin = numsCopySumSumSum.min\n\
    \        val numsCopySumSumSumMax = numsCopySumSumSum.max\n        val numsCopySumSumSumSum\
    \ = numsCopySumSumSum.sum\n        val numsCopySumSumSumSumMin = numsCopySumSumSumSum.min\n\
    \        val numsCopySumSumSumSumMax = numsCopySumSumSumSum.max\n        val numsCopySumSumSumSumSum\
    \ = numsCopySumSumSumSum.sum\n        val numsCopySumSumSumSumMin = numsCopySumSumSumSum.min\n\
    \        val numsCopySumSumSumSumMax = numsCopySumSumSumSum.max\n        val numsCopySumSumSumSumSum\
    \ = numsCopySumSumSumSum.sum\n        val numsCopySumSumSumSumSumMin = numsCopySumSumSumSumSum.min\n\
    \        val numsCopySumSumSumSumMax = numsCopySumSumSumSum.max\n        val numsCopySumSumSumSumSum\
    \ = numsCopySumSumSumSum.sum\n        val numsCopySumSumSumSumSumMin = numsCopySumSumSumSumSum.min\n\
    \        val numsCopySumSumSumSumSumMax = numsCopySumSumSumSumSum.max\n      \
    \  val numsCopySumSumSumSumSum = numsCopySumSumSumSumSum.sum\n        val numsCopySumSumSumSumSumMin\
    \ = numsCopySumSumSumSumSum.min\n        val numsCopySumSumSumSumSumMax = numsCopySum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf9aipxmb.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mnumsCopySumSumSumSumMin\e\
    [0m = numsCopySumSumSumSum.min\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsCopySumSumSumSumMin is already defined as \e[33mvalue\e\
    [0m \e[35mnumsCopySumSumSumSumMin\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf9aipxmb.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mnumsCopySumSumSumSumMax\e\
    [0m = numsCopySumSumSumSum.max\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsCopySumSumSumSumMax is already defined as \e[33mvalue\e\
    [0m \e[35mnumsCopySumSumSumSumMax\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf9aipxmb.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mnumsCopySumSumSumSumSum\e\
    [0m = numsCopySumSumSumSum.sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsCopySumSumSumSumSum is already defined as \e[33mvalue\e\
    [0m \e[35mnumsCopySumSumSumSumSum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf9aipxmb.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mnumsCopySumSumSumSumMax\e\
    [0m = numsCopySumSumSumSum.max\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsCopySumSumSumSumMax is already defined as \e[33mvalue\e\
    [0m \e[35mnumsCopySumSumSumSumMax\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /t"
  stdout: ''
  timestamp: 1659805699
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsArray\
    \ = nums.toArray\n        val numsArraySet = numsArray.toSet\n        val numsArrayArray\
    \ = numsArray.toArray\n        val numsArraySetArray = numsArraySet.toArray\n\
    \        val numsArrayArraySet = numsArrayArray.toSet\n        val numsArrayArrayArray\
    \ = numsArrayArray.toArray\n        val numsArraySetArraySet = numsArraySetArray.toSet\n\
    \        val numsArrayArrayArraySet = numsArrayArrayArray.toSet\n        val numsArraySetArrayArraySet\
    \ = numsArraySetArray.toArray\n        val numsArrayArrayArraySet = numsArrayArrayArray.toSet\n\
    \        val numsArraySetArrayArrayArraySet = numsArraySetArrayArray.toArray\n\
    \        val numsArrayArrayArraySetArray = numsArrayArrayArraySet.toSet\n    \
    \    val numsArraySetArrayArrayArraySetArray = numsArraySetArrayArrayArraySet.toArray\n\
    \        val numsArraySetArrayArrayArraySetArrayArraySet = numsArraySetArrayArrayArraySet.toSet\n\
    \        val numsArrayArrayArraySetArrayArraySetArrayArraySet = numsArrayArrayArraySet.toArray\n\
    \        val numsArraySetArrayArrayArraySetArrayArraySetArraySet = numsArraySetArrayArrayArraySet.toSet\n\
    \        val numsArrayArrayArraySetArrayArraySetArraySetArraySetArraySet = numsArrayArrayArraySet.toArray\n\
    \        val numsArraySetArrayArrayArraySetArraySetArraySetArraySetArraySet =\
    \ numsArraySetArrayArraySet.toSet\n        val numsArrayArrayArraySetArraySetArraySetArraySetArraySetArraySet\
    \ = numsArrayArrayArraySet.toArray\n        val numsArraySetArrayArrayArraySetArraySetArraySetArraySetArraySetArraySet\
    \ = numsArraySetArrayArraySet.toSet\n        val numsArrayArrayArraySetArraySetArraySetArraySetArraySetArraySetArraySetArraySet\
    \ = numsArrayArrayArraySet.toArray\n        val numsArraySetArrayArrayArraySetArraySetArraySetArraySetArraySetArraySetArraySet\
    \ = numsArraySetArrayArraySet.toSet\n        val numsArrayArrayArraySetArraySetArraySetArraySetArraySetArraySetArraySetArraySetArraySet\
    \ = numsArrayArrayArraySet.to\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps77sho_n.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnumsArrayArrayArraySet\e\
    [0m = numsArrayArrayArray.toSet\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsArrayArrayArraySet is already defined as \e[33mvalue\e\
    [0m \e[35mnumsArrayArrayArraySet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps77sho_n.scala:21:45 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnumsArraySetArrayArrayArraySet\e\
    [0m = numsArraySetArrayArray.toArray\n\e[31m\e[31m   |\e[0m                  \
    \                           ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                                  Not found: numsArraySetArrayArray\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps77sho_n.scala:34:5 ---------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659805699
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSetSize\
    \ = numsSet.size\n        val numsSetIterator = numsSet.iterator\n        val\
    \ numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n \
    \       val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = num\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgcd2jfyu.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgcd2jfyu.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorIterator is\
    \ already defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpgcd2jfyu.scala:26:78 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgcd2jfyu.scala:"
  stdout: ''
  timestamp: 1659805626
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val minSum\
    \ = nums.foldLeft(0L) { (sum, num) =>\n            val newSum = sum + num\n  \
    \          if (numsSet.contains(newSum)) {\n                newSum\n         \
    \   } else {\n                sum\n            }\n        }\n        minSum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0bw7p3ex.scala:22)\n\tat Problem.main(tmp0bw7p3ex.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805647
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val minSum\
    \ = nums.foldLeft(0L) { (sum, num) =>\n            val newSum = sum + num\n  \
    \          if (numsSet.contains(newSum)) {\n                newSum\n         \
    \   } else {\n                sum\n            }\n        }\n        minSum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0bw7p3ex.scala:22)\n\tat Problem.main(tmp0bw7p3ex.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805647
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsCopy = nums.toList\n        val minSum\
    \ = numsCopy.foldLeft(numsCopy(0)) { (sum, num) =>\n            val newSum = sum\
    \ + num\n            if (newSum < 0) newSum\n            else newSum\n       \
    \ }\n        minSum\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjvn1gedt.scala:19)\n\tat Problem.main(tmpjvn1gedt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805646
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSortedSet\
    \ = nums.sortWith(_ < _)\n        val numsSortedSetSize = numsSortedSet.size\n\
    \        val numsSortedSetIterator = numsSortedSet.iterator\n        val numsSortedSetIteratorSize\
    \ = numsSortedSetIterator.size\n        val numsSortedSetIteratorIterator = numsSortedSetIterator.iterator\n\
    \        val numsSortedSetIteratorIteratorSize = numsSortedSetIteratorIterator.size\n\
    \        val numsSortedSetIteratorIteratorIterator = numsSortedSetIteratorIterator.iterator\n\
    \        val numsSortedSetIteratorIteratorIteratorSize = numsSortedSetIteratorIteratorIterator.size\n\
    \        val numsSortedSetIteratorIteratorIterator = numsSortedSetIteratorIteratorIterator.iterator\n\
    \        val numsSortedSetIteratorIteratorIteratorSize = numsSortedSetIteratorIteratorIterator.size\n\
    \        val numsSortedSetIteratorIteratorIteratorIterator = numsSortedSetIteratorIteratorIterator.iterator\n\
    \        val numsSortedSetIteratorIteratorIteratorSize = numsSortedSetIteratorIteratorIterator.size\n\
    \        val numsSortedSetIteratorIteratorIteratorIterator = numsSortedSetIteratorIteratorIterator.iterator\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorSize = numsSortedSetIteratorIteratorIterator.size\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorIterator = numsSortedSetIteratorIteratorIterator.iterator\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorSize = numsSortedSetIteratorIteratorIterator.size\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorIterator = numsSortedSetIteratorIteratorIterator.iterator\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorSize = numsSortedSetIteratorIteratorIterator.size\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorIterator = numsSortedSetIteratorIteratorIterator.iterator\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorSize = numsSortedSetIteratorIteratorIterator.size\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorIterator = numsSortedSetIteratorIteratorIterator.iterator\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorSize = numsSortedSetIteratorIteratorIterator.size\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorIterator = numsSortedSetIteratorIteratorIterator.iterator\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorSize = numsSortedSetIteratorIteratorIterator.size\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorIterator = numsSortedSetIteratorIteratorIterator.iterator\n\
    \        val numsSortedSetIteratorIterator\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0jfdkjv9.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0jfdkjv9.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSortedSetIteratorIteratorIterator\e[0m = numsSortedSetIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSortedSetIteratorIteratorIterator is already defined as\
    \ \e[33mvalue\e[0m \e[35mnumsSortedSetIteratorIteratorIterator\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0jfdkjv9.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSortedSetIteratorIteratorIteratorSize\e[0m = numsSortedSetIteratorIteratorIterator.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSortedSetIteratorIteratorIteratorSize is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsSortedSetIteratorIteratorIteratorSize\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp0jfdkjv9.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsSortedSetIteratorIteratorIteratorSize\e\
    [0m = numsSortedSetIteratorIteratorIterator.size\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSortedSetIteratorIteratorIteratorSize is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsSortedSetIteratorIteratorIteratorSize\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error"
  stdout: ''
  timestamp: 1659805698
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsArray = nums.toArray\n        val\
    \ numsArrayLen = numsArray.length\n        val minSum = numsArray(0)\n       \
    \ val minSumIndex = numsArrayLen - 1\n        val minSumArray = Array.ofDim[Long](numsArrayLen)\n\
    \        val numsArrayCopy = numsArray.clone()\n        val numsArrayCopyLen =\
    \ numsArrayCopy.length\n        val numsArrayCopyCopy = numsArrayCopy.clone()\n\
    \        val numsArrayCopyCopyLen = numsArrayCopyCopy.length\n        val numsArrayCopyCopyCopy\
    \ = numsArrayCopyCopy.clone()\n        val numsArrayCopyCopyCopyLen = numsArrayCopyCopyCopy.length\n\
    \        val numsArrayCopyCopyCopyCopy = numsArrayCopyCopyCopy.clone()\n     \
    \   val numsArrayCopyCopyCopyCopyLen = numsArrayCopyCopyCopyCopy.length\n    \
    \    val numsArrayCopyCopyCopyCopyCopy = numsArrayCopyCopyCopyCopy.clone()\n \
    \       val numsArrayCopyCopyCopyCopyLen = numsArrayCopyCopyCopyCopyLen.clone()\n\
    \        val numsArrayCopyCopyCopyCopyCopy = numsArrayCopyCopyCopyCopyCopy.clone()\n\
    \        val numsArrayCopyCopyCopyCopyCopyLen = numsArrayCopyCopyCopyCopyCopyLen.clone()\n\
    \        val numsArrayCopyCopyCopyCopyCopyCopy = numsArrayCopyCopyCopyCopyCopyCopy.clone()\n\
    \        val numsArrayCopyCopyCopyCopyCopyLen = numsArrayCopyCopyCopyCopyCopyLen.clone()\n\
    \        val numsArrayCopyCopyCopyCopyCopy = numsArrayCopyCopyCopyCopyCopy.clone()\n\
    \        val numsArrayCopyCopyCopyCopyCopyLen = numsArrayCopyCopyCopyCopyCopyLen.clone()\n\
    \        val numsArrayCopyCopyCopyCopyCopyCopy = numsArrayCopyCopyCopyCopyCopyCopy.clone()\n\
    \        val numsArrayCopyCopyCopyCopyCopyCopyLen = numsArrayCopyCopyCopyCopyCopyCopyLen.clone()\n\
    \        val numsArrayCopyCopyCopyCopyCopyCopy = numsArrayCopyCopyCopyCopyCopyCopy.clone()\n\
    \        val numsArrayCopyCopyCopyCopyCopyLen = numsArrayCopyCopyCopyCopyCopyLen.clone()\n\
    \        val numsArrayCopyCopyCopyCopyCopy = numsArrayCopyCopyCopyCopyCopyCopy.clone()\n\
    \        val numsArrayCopyCopyCopyCopyCopyLen = numsArray\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong,\
    \ 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmvhgfawu.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mnumsArrayCopyCopyCopyCopyLen\e\
    [0m = numsArrayCopyCopyCopyCopyLen.clone()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsArrayCopyCopyCopyCopyLen is already defined as \e[33mvalue\e\
    [0m \e[35mnumsArrayCopyCopyCopyCopyLen\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmvhgfawu.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mnumsArrayCopyCopyCopyCopyCopy\e\
    [0m = numsArrayCopyCopyCopyCopyCopy.clone()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsArrayCopyCopyCopyCopyCopy is already defined as \e[33mvalue\e\
    [0m \e[35mnumsArrayCopyCopyCopyCopyCopy\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmvhgfawu.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mnumsArrayCopyCopyCopyCopyCopyLen\e\
    [0m = numsArrayCopyCopyCopyCopyCopyLen.clone()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsArrayCopyCopyCopyCopyCopyLen is already defined as \e\
    [33mvalue\e[0m \e[35mnumsArrayCopyCopyCopyCopyCopyLen\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmvhgfawu.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsArrayCopyCopyCopyCopyCopy\e[0m = numsArrayCopyCopyCopyCopyCopy.clone()\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsArrayCopyCopyCopyCopyCopy is already defined"
  stdout: ''
  timestamp: 1659805698
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSetSize\
    \ = numsSet.size\n        val numsSetIterator = numsSet.iterator\n        val\
    \ numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n \
    \       val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = num\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgcd2jfyu.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgcd2jfyu.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorIterator is\
    \ already defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpgcd2jfyu.scala:26:78 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgcd2jfyu.scala:"
  stdout: ''
  timestamp: 1659805626
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsCopy = nums.toList\n        val minSum\
    \ = numsCopy.foldLeft(numsCopy.head) { (sum, num) =>\n            if (num > sum)\
    \ num\n            else sum\n        }\n        minSum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong,\
    \ 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppfx3uea1.scala:18)\n\tat Problem.main(tmppfx3uea1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805703
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSortedSet\
    \ = nums.sort\n        val numsSortedSetSize = numsSortedSet.size\n        val\
    \ numsSortedSetIterator = numsSortedSet.iterator\n        val numsSortedSetIteratorSize\
    \ = numsSortedSetIterator.size\n        val numsSortedSetIteratorIterator = numsSortedSetIterator.iterator\n\
    \        val numsSortedSetIteratorIteratorSize = numsSortedSetIteratorIterator.size\n\
    \        val numsSortedSetIteratorIteratorIterator = numsSortedSetIteratorIterator.iterator\n\
    \        val numsSortedSetIteratorIteratorIteratorSize = numsSortedSetIteratorIteratorIterator.size\n\
    \        val numsSortedSetIteratorIteratorIteratorSize = numsSortedSetIteratorIteratorIterator.size\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorSize = numsSortedSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorSize = numsSortedSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorSize = numsSortedSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorSize = numsSortedSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorIteratorSize = numsSortedSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorIteratorSize = numsSortedSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorIteratorSize = numsSortedSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorIteratorSize = numsSortedSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorIteratorSize = numsSortedSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSortedSetIteratorIteratorIteratorIteratorIteratorIterator.size\n     \
    \   val numsSortedSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSortedSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSortedSetIteratorIteratorIteratorIteratorIteratorIterator.size\n     \
    \   val numsSortedSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSortedSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSortedSetIteratorIteratorIteratorIteratorIteratorIterator.size\n     \
    \   val numsSortedSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = num\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp56b62pfv.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnumsSortedSetIteratorIteratorIteratorSize\e\
    [0m = numsSortedSetIteratorIteratorIterator.size\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSortedSetIteratorIteratorIteratorSize is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsSortedSetIteratorIteratorIteratorSize\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp56b62pfv.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsSortedSetIteratorIteratorIteratorIteratorSize\e\
    [0m = numsSortedSetIteratorIteratorIteratorIterator.size\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSortedSetIteratorIteratorIteratorIteratorSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSortedSetIteratorIteratorIteratorIteratorSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp56b62pfv.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mnumsSortedSetIteratorIteratorIteratorIteratorSize\e\
    [0m = numsSortedSetIteratorIteratorIteratorIterator.size\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSortedSetIteratorIteratorIteratorIteratorSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSortedSetIteratorIteratorIteratorIteratorSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp56b62pfv.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m       "
  stdout: ''
  timestamp: 1659805703
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSetSize\
    \ = numsSet.size\n        val numsSetIterator = numsSet.iterator\n        val\
    \ numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n \
    \       val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = num\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgcd2jfyu.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgcd2jfyu.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorIterator is\
    \ already defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpgcd2jfyu.scala:26:78 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgcd2jfyu.scala:"
  stdout: ''
  timestamp: 1659805626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSetSize\
    \ = numsSet.size\n        val numsSetIterator = numsSet.iterator\n        val\
    \ numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n \
    \       val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = num\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgcd2jfyu.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgcd2jfyu.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorIterator is\
    \ already defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpgcd2jfyu.scala:26:78 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgcd2jfyu.scala:"
  stdout: ''
  timestamp: 1659805626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSetSize\
    \ = numsSet.size\n        val numsSetIterator = numsSet.iterator\n        val\
    \ numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n \
    \       val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = num\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgcd2jfyu.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgcd2jfyu.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorIterator is\
    \ already defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpgcd2jfyu.scala:26:78 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgcd2jfyu.scala:"
  stdout: ''
  timestamp: 1659805626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSetSize\
    \ = numsSet.size\n        val numsSetIterator = numsSet.iterator\n        val\
    \ numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n \
    \       val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = num\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgcd2jfyu.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgcd2jfyu.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorIterator is\
    \ already defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpgcd2jfyu.scala:26:78 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgcd2jfyu.scala:"
  stdout: ''
  timestamp: 1659805626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsArray = nums.toArray\n        val\
    \ numsArrayLen = numsArray.length\n        val minSum = numsArray(0)\n       \
    \ val minSumIndex = 0\n        val minSumIndexArray = Array.fill[Int](numsArrayLen)(0)\n\
    \        val minSumIndexArrayLen = numsArrayLen\n        val minSumIndexArrayCopy\
    \ = numsArrayCopy.asInstanceOf[Array[Int]]\n        val minSumIndexArrayCopyLen\
    \ = numsArrayCopyLen\n        val minSumIndexArrayCopyCopy = numsArrayCopyCopy.asInstanceOf[Array[Int]]\n\
    \        val minSumIndexArrayCopyCopyLen = numsArrayCopyCopyLen\n        val minSumIndexArrayCopyCopyCopy\
    \ = numsArrayCopyCopy.asInstanceOf[Array[Int]]\n        val minSumIndexArrayCopyCopyCopyLen\
    \ = numsArrayCopyCopyLen\n        val minSumIndexArrayCopyCopyCopyCopy = numsArrayCopyCopy.asInstanceOf[Array[Int]]\n\
    \        val minSumIndexArrayCopyCopyCopyCopyLen = numsArrayCopyCopyLen\n    \
    \    val minSumIndexArrayCopyCopyCopyCopy = numsArrayCopyCopy.asInstanceOf[Array[Int]]\n\
    \        val minSumIndexArrayCopyCopyCopyCopyLen = numsArrayCopyCopyLen\n    \
    \    val minSumIndexArrayCopyCopyCopyCopyCopy = numsArrayCopyCopy.asInstanceOf[Array[Int]]\n\
    \        val minSumIndexArrayCopyCopyCopyCopyLen = numsArrayCopyCopyLen\n    \
    \    val minSumIndexArrayCopyCopyCopyCopy = numsArrayCopyCopy.asInstanceOf[Array[Int]]\n\
    \        val minSumIndexArrayCopyCopyCopyCopyLen = numsArrayCopyCopyLen\n    \
    \    val minSumIndexArrayCopyCopyCopyCopy = numsArrayCopyCopy.asInstanceOf[Array[Int]]\n\
    \        val minSumIndexArrayCopyCopyCopyCopyLen = numsArrayCopyCopyLen\n    \
    \    val minSumIndexArrayCopyCopyCopyCopy = numsArrayCopyCopy.asInstanceOf[Array[Int]]\n\
    \        val minSumIndexArrayCopyCopyCopyCopyLen = numsArrayCopyCopyLen\n    \
    \    val minSumIndexArrayCopyCopyCopyCopy = numsArrayCopyCopy.asInstanceOf[Array[Int]]\n\
    \        val minSumIndexArrayCopyCopyCopyCopyLen = numsArrayCopyCopyLen\n    \
    \    val min\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwryko01f.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwryko01f.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mminSumIndexArrayCopyCopyCopyCopy\e[0m = numsArrayCopyCopy.asInstanceOf[\e\
    [35mArray\e[0m[\e[35mInt\e[0m]]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mminSumIndexArrayCopyCopyCopyCopy is already defined as \e\
    [33mvalue\e[0m \e[35mminSumIndexArrayCopyCopyCopyCopy\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwryko01f.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mminSumIndexArrayCopyCopyCopyCopyLen\e[0m = numsArrayCopyCopyLen\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mminSumIndexArrayCopyCopyCopyCopyLen is already defined as\
    \ \e[33mvalue\e[0m \e[35mminSumIndexArrayCopyCopyCopyCopyLen\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwryko01f.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mminSumIndexArrayCopyCopyCopyCopyLen\e[0m = numsArrayCopyCopyLen\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mminSumIndexArrayCopyCopyCopyCopyLen is already defined as\
    \ \e[33mvalue\e[0m \e[35mminSumIndexArrayCopyCopyCopyCopyLen\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwryko01f.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mminSumIndexArrayCopyCopyCopyCopy\e[0m = n"
  stdout: ''
  timestamp: 1659805703
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsCopy = nums.toList\n        val minSum\
    \ = numsCopy.foldLeft(0L)((sum, num) => sum + num)\n        val numsCopy2 = numsCopy.filterNot(_\
    \ == minSum)\n        val minSum2 = numsCopy2.foldLeft(0L)((sum, num) => sum +\
    \ num)\n        val numsCopy3 = numsCopy2.filterNot(_ == minSum2)\n        val\
    \ minSum3 = numsCopy3.foldLeft(0L)((sum, num) => sum + num)\n        minSum3\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgof6wysf.scala:19)\n\tat Problem.main(tmpgof6wysf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805713
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val minSum\
    \ = nums.foldLeft(0L) { (sum, num) =>\n            val newSum = sum + num\n  \
    \          if (numsSet.contains(newSum)) {\n                newSum\n         \
    \   } else {\n                sum\n            }\n        }\n        minSum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0bw7p3ex.scala:22)\n\tat Problem.main(tmp0bw7p3ex.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805647
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val minSum = math.min(nums.sum, math.max(nums.sum))\n\
    \        val subArray = nums.filter(_ > minSum)\n        val subArraySum = subArray.sum\n\
    \        if (subArraySum == 0) minSum\n        else minSum - subArraySum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpiaoasgbn.scala:10:45 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mminSum\e[0m = math.min(nums.sum,\
    \ math.max(nums.sum))\n\e[31m\e[31m   |\e[0m                                 \
    \       ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e\
    [33mmethod\e[0m \e[35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m with\
    \ types\n\e[31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m (x: Float,\
    \ y: Float): Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m   |\e[0m\
    \ (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch arguments (Long)\n1 error found\n"
  stdout: ''
  timestamp: 1659805705
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSetSize\
    \ = numsSet.size\n        val numsSetIterator = numsSet.iterator\n        val\
    \ numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n       \
    \ val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n       \
    \ val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIterator\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmw7ahqf0.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\e[31m\e[31m \
    \  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIterator is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIterator\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmw7ahqf0.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ is already defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmw7ahqf0.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIterator"
  stdout: ''
  timestamp: 1659805709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSorted = nums.sortWith(_ < _)\n  \
    \      val numsSortedLength = numsSorted.length\n        val numsSortedSum = numsSorted.sum\n\
    \        val numsSortedSumLength = numsSortedSum.length\n        val numsSortedSumArray\
    \ = numsSortedSum.toArray\n        val numsSortedSumArrayLength = numsSortedSumArray.length\n\
    \        val numsSortedSumArraySum = numsSortedSumArray.sum\n        val numsSortedSumArraySumLength\
    \ = numsSortedSumArraySum.length\n        val numsSortedSumArraySumArray = numsSortedSumArraySum.toArray\n\
    \        val numsSortedSumArraySumArrayLength = numsSortedSumArraySumArray.length\n\
    \        val numsSortedSumArraySumArraySum = numsSortedSumArraySumArray.sum\n\
    \        val numsSortedSumArraySumArraySumLength = numsSortedSumArraySumArraySum.length\n\
    \        val numsSortedSumArraySumArraySumArray = numsSortedSumArraySumArraySum.toArray\n\
    \        val numsSortedSumArraySumArraySumArrayLength = numsSortedSumArraySumArraySumArray.length\n\
    \        val numsSortedSumArraySumArraySumArraySum = numsSortedSumArraySumArraySumArray.sum\n\
    \        val numsSortedSumArraySumArraySumArraySumLength = numsSortedSumArraySumArraySumArraySum.length\n\
    \        val numsSortedSumArraySumArraySumArraySumArray = numsSortedSumArraySumArraySumArraySum.toArray\n\
    \        val numsSortedSumArraySumArraySumArraySumArrayLength = numsSortedSumArraySumArraySumArraySumArray.length\n\
    \        val numsSortedSumArraySumArraySumArraySumArraySum = numsSortedSumArraySumArraySumArraySum.sum\n\
    \        val numsSortedSumArraySumArraySumArraySumArraySumLength = numsSortedSumArraySumArraySumArraySumArraySumArray.length\n\
    \        val numsSortedSumArraySumArraySumArraySumArraySumArray = numsSortedSumArraySumArraySumArraySumArraySum.toArray\n\
    \        val numsSortedSumArraySumArraySumArraySumArraySumArrayLength = numsSortedSumArraySumArraySumArraySumArraySumArray.length\n\
    \        val numsSortedSumArraySumArraySumArraySumArraySumArraySum = numsSortedSumArraySumArraySumArraySumArraySum.sum\n\
    \        val numsSortedSumArraySumArraySumArraySumArraySumArrayLength = \n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpnn96fdz9.scala:33:70 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mnumsSortedSumArraySumArraySumArraySumArraySumArrayLength\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                                \
    \                      ^\e[0m\n\e[31m   |\e[0m                               \
    \        expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpnn96fdz9.scala:13:48 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnumsSortedSumLength\e[0m\
    \ = numsSortedSum.length\n\e[31m\e[31m   |\e[0m                              \
    \    ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \    value length is not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpnn96fdz9.scala:14:47 ------------------------\e[0m\e[0m\n\e[31m14 |\e\
    [0m        \e[33mval\e[0m \e[36mnumsSortedSumArray\e[0m = numsSortedSum.toArray\n\
    \e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value toArray is not a member\
    \ of Long\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnn96fdz9.scala:34:5\
    \ ---------------------\e[0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659805714
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val minSum\
    \ = nums.foldLeft(0L)((sum, num) => sum + num)\n        val minSumSet = numsSet.foldLeft(0L)((sum,\
    \ num) => sum + num)\n        minSum - minSumSet\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu0d_9yv1.scala:16)\n\tat Problem.main(tmpu0d_9yv1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805716
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSortedSet\
    \ = nums.sortBy(math.abs)\n        val numsSortedSetSet = numsSortedSet.toSet\n\
    \        val numsSortedSetSetSet = numsSortedSetSet.toSet\n        val numsSortedSetSetSetSet\
    \ = numsSortedSetSetSet.toSet\n        val numsSortedSetSetSetSetSet = numsSortedSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSet = numsSortedSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSet = numsSortedSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSet = numsSortedSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSet = numsSortedSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSet\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0gfty9wl.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0gfty9wl.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSortedSetSetSetSetSetSet\e[0m = numsSortedSetSetSetSetSet.toSet\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSortedSetSetSetSetSetSet is already defined as \e[33mvalue\e\
    [0m \e[35mnumsSortedSetSetSetSetSetSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0gfty9wl.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnumsSortedSetSetSetSetSetSet\e\
    [0m = numsSortedSetSetSetSetSet.toSet\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSortedSetSetSetSetSetSet is already defined as \e[33mvalue\e\
    [0m \e[35mnumsSortedSetSetSetSetSetSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0gfty9wl.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnumsSortedSetSetSetSetSetSet\e\
    [0m = numsSortedSetSetSetSetSet.toSet\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSortedSetSetSetSetSetSet is already defined as \e[33mvalue\e\
    [0m \e[35mnumsSortedSetSetSetSetSetSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0gfty9wl.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mnumsSortedSetSetSetSetSetSetSetSet\e\
    [0m = numsSortedSetSetSetSetSetSet.toSet\n\e[31m\e[31m   |\e[0m        ^^^^^^"
  stdout: ''
  timestamp: 1659805712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSetIterator\
    \ = numsSet.iterator\n        val numsSetIteratorNext = numsSetIterator.next\n\
    \        val numsSetIteratorNextValue = numsSetIteratorNext.get\n        val numsSetIteratorNextNext\
    \ = numsSetIteratorNext.next\n        val numsSetIteratorNextNextValue = numsSetIteratorNextNext.get\n\
    \        val numsSetIteratorNextNextNext = numsSetIteratorNextNext.next\n    \
    \    val numsSetIteratorNextNextNextValue = numsSetIteratorNextNextNext.get\n\
    \        val numsSetIteratorNextNextNextNext = numsSetIteratorNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextValue = numsSetIteratorNextNextNextNext.get\n\
    \        val numsSetIteratorNextNextNextNextNext = numsSetIteratorNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNext.get\n\
    \        val numsSetIteratorNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNextNext.get\n\
    \        val numsSetIteratorNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNextNextNext.get\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNextNextNextNextNext.get\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNextNextNextNextNextNext.get\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextNextValue = numsSetIteratorNextNextNextNext\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7rlcinpe.scala:13:59 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorNextValue\e\
    [0m = numsSetIteratorNext.get\n\e[31m\e[31m   |\e[0m                         \
    \              ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                      value get is not a member of Long\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp7rlcinpe.scala:14:58 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorNextNext\e[0m\
    \ = numsSetIteratorNext.next\n\e[31m\e[31m   |\e[0m                          \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \                    value next is not a member of Long\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp7rlcinpe.scala:24:58 ---------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorNextNextNextNextNextNextNext\e\
    [0m = numsSetIteratorNextNextNextNextNextNextNext.next\n\e[31m\e[31m   |\e[0m\
    \                                                          ^\e[0m\n\e[31m   |\e\
    [0m  Recursive \e[33mvalue\e[0m \e[35mnumsSetIteratorNextNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp7rlcinpe.scala:26:62\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSetIteratorNextNextNextNextNextNextNextNext\e[0m = numsSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7rlcinpe.scala:30:70\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mnumsSetIteratorNextNextNextNextNextNextNextNextNextNext\e[0m = numsSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m "
  stdout: ''
  timestamp: 1659805628
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSetSize\
    \ = numsSet.size\n        val numsSetIterator = numsSet.iterator\n        val\
    \ numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n \
    \       val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = num\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgcd2jfyu.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgcd2jfyu.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorIterator is\
    \ already defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpgcd2jfyu.scala:26:78 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgcd2jfyu.scala:"
  stdout: ''
  timestamp: 1659805626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSetSize\
    \ = numsSet.size\n        val numsSetIterator = numsSet.iterator\n        val\
    \ numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp650e39z7.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp650e39z7.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSetIteratorIteratorIteratorIteratorIterator\e[0m = numsSetIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIterator is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIterator\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp650e39z7.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIterator.iterator\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ is already defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp650e39z7.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIterator.iterator\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorI"
  stdout: ''
  timestamp: 1659805625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsArray\
    \ = nums.toArray\n        val numsArrayLen = numsArray.length\n        val numsSetLen\
    \ = numsSet.length\n        val numsArraySum = numsArray.foldLeft(0L){ (sum, num)\
    \ => sum + num }\n        val numsSetSum = numsSet.foldLeft(0L){ (sum, num) =>\
    \ sum + num }\n        val numsSetSumMin = numsSet.foldLeft(0L){ (sum, num) =>\
    \ if (sum < num) sum else num }\n        val numsSetSumMax = numsSet.foldLeft(0L){\
    \ (sum, num) => if (sum > num) sum else num }\n        val numsSetSumMinMax =\
    \ numsSet.foldLeft(0L){ (sum, num) => if (sum < num && sum > num) sum else num\
    \ }\n        val numsSetSumMinMax2 = numsSet.foldLeft(0L){ (sum, num) => if (sum\
    \ < num || sum > num) sum else num }\n        val numsSetSumMinMax3 = numsSet.foldLeft(0L){\
    \ (sum, num) => if (sum < num && sum > num) sum else num }\n        val numsSetSumMinMax4\
    \ = numsSet.foldLeft(0L){ (sum, num) => if (sum < num || sum > num) sum else num\
    \ }\n        val numsSetSumMinMax5 = numsSet.foldLeft(0L){ (sum, num) => if (sum\
    \ < num && sum > num) sum else num }\n        val numsSetSumMinMax6 = numsSet.foldLeft(0L){\
    \ (sum, num) => if (sum < num || sum > num) sum else num }\n        val numsSetSumMinMax7\
    \ = numsSet.foldLeft(0L){ (sum, num) => if (sum < num && sum > num) sum else num\
    \ }\n        val numsSetSumMinMax8 = numsSet.foldLeft(0L){ (sum, num) => if (sum\
    \ < num || sum > num) sum else num }\n        val numsSetSumMinMax9 = numsSet.foldLeft(0L){\
    \ (sum, num) => if (sum < num && sum > num) sum else num }\n        val nums\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpi96okedw.scala:28:4 ----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi96okedw.scala:10:27\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mnumsSet\e[0m = nums.toSet\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue toSet is not a member of Null, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator asScala\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.set asScala\n\e\
    [31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi96okedw.scala:11:29\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mnumsArray\e[0m = nums.toArray\n\e[31m\e[31m   |\e[0m                     \
    \   ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toArray is not a member of Null, but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mOne of the following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m  import Option.option2Iterable\n\e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\
    \e[31m   |\e[0m  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip4.lazyZip4ToIterable\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.b"
  stdout: ''
  timestamp: 1659805717
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsArray = nums.toArray\n        val\
    \ numsArrayLength = numsArray.length\n        val numsArraySum = numsArray.foldLeft(0L)\
    \ { (sum, elem) => sum + elem }\n        val numsArraySumLength = numsArraySum.length\n\
    \        val numsArraySumSubArray = numsArray.foldLeft(0L) { (sum, elem) => sum\
    \ + elem }\n        val numsArraySumSubArrayLength = numsArraySumSubArray.length\n\
    \        val numsArraySumSubArraySubArray = numsArray.foldLeft(0L) { (sum, elem)\
    \ => sum + elem }\n        val numsArraySumSubArraySubArrayLength = numsArraySumSubArraySubArray.length\n\
    \        val numsArraySumSubArraySubArraySubArray = numsArray.foldLeft(0L) { (sum,\
    \ elem) => sum + elem }\n        val numsArraySumSubArraySubArraySubArrayLength\
    \ = numsArraySumSubArraySubArraySubArray.length\n        val numsArraySumSubArraySubArraySubArraySubArray\
    \ = numsArray.foldLeft(0L) { (sum, elem) => sum + elem }\n        val numsArraySumSubArraySubArraySubArraySubArrayLength\
    \ = numsArraySumSubArraySubArraySubArray.length\n        val numsArraySumSubArraySubArraySubArraySubArraySubArray\
    \ = numsArray.foldLeft(0L) { (sum, elem) => sum + elem }\n        val numsArraySumSubArraySubArraySubArraySubArraySubArrayLength\
    \ = numsArraySumSubArraySubArraySubArraySubArray.length\n        val numsArraySumSubArraySubArraySubArraySubArraySubArraySubArrayLength\
    \ = numsArraySumSubArraySubArraySubArraySubArraySubArray.length\n        val numsArraySumSubArraySubArraySubArraySubArraySubArraySubArrayLength\
    \ = numsArraySumSubArraySubArraySubArraySubArraySubArray.length\n        val numsArraySumSubArraySubArraySubArraySubArraySubArraySubArrayLength\
    \ = numsArraySumSubArraySubArraySubArraySubArraySubArraySubArray.length\n    \
    \    val numsArraySumSubArraySubArraySubArraySubArraySubArraySubArraySubArrayLength\
    \ = numsArraySumSubArraySubArraySubArraySubArraySubArraySubArray.length\n    \
    \    val numsArraySumSubArraySubArraySubArraySubArraySubArraySubArray\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpl_uh_ir5.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpl_uh_ir5.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsArraySumSubArraySubArraySubArraySubArraySubArraySubArrayLength\e[0m\
    \ = numsArraySumSubArraySubArraySubArraySubArraySubArray.length\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsArraySumSubArraySubArraySubArraySubArraySubArraySubArrayLength\
    \ is already defined as \e[33mvalue\e[0m \e[35mnumsArraySumSubArraySubArraySubArraySubArraySubArraySubArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpl_uh_ir5.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mnumsArraySumSubArraySubArraySubArraySubArraySubArraySubArrayLength\e\
    [0m = numsArraySumSubArraySubArraySubArraySubArraySubArraySubArray.length\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsArraySumSubArraySubArraySubArraySubArraySubArraySubArrayLength\
    \ is already defined as \e[33mvalue\e[0m \e[35mnumsArraySumSubArraySubArraySubArraySubArraySubArraySubArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpl_uh_ir5.scala:13:46 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnumsArraySumLength\e[0m = numsArraySum.length\n\
    \e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                 value length is not a member of\
    \ Long\n\e[31m\e[31m"
  stdout: ''
  timestamp: 1659805718
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsCopy = nums.toList\n        val minSum\
    \ = numsCopy.foldLeft(numsCopy(0)) { (sum, num) =>\n            val newSum = sum\
    \ + num\n            if (newSum < sum) newSum else sum\n        }\n        minSum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4ok4aknj.scala:18)\n\tat Problem.main(tmp4ok4aknj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val minSum = math.Long.MaxValue\n        val\
    \ numsCopy = nums.toList\n        val numsCopyLength = numsCopy.length\n     \
    \   val numsCopyIterator = numsCopy.iterator\n        val numsCopyIteratorLength\
    \ = numsCopyIterator.length\n        val numsCopyIteratorNext = numsCopyIterator.next\n\
    \        val numsCopyIteratorNextLength = numsCopyIteratorNext.length\n      \
    \  val numsCopyIteratorNextNext = numsCopyIteratorNext.next\n        val numsCopyIteratorNextNextLength\
    \ = numsCopyIteratorNextNext.length\n        val numsCopyIteratorNextNextNext\
    \ = numsCopyIteratorNextNext.next\n        val numsCopyIteratorNextNextNextLength\
    \ = numsCopyIteratorNextNextNext.length\n        val numsCopyIteratorNextNextNextNext\
    \ = numsCopyIteratorNextNextNext.next\n        val numsCopyIteratorNextNextNextNextLength\
    \ = numsCopyIteratorNextNextNextNext.length\n        val numsCopyIteratorNextNextNextNextNext\
    \ = numsCopyIteratorNextNextNextNext.next\n        val numsCopyIteratorNextNextNextNextNextLength\
    \ = numsCopyIteratorNextNextNextNextNext.length\n        val numsCopyIteratorNextNextNextNextNextNext\
    \ = numsCopyIteratorNextNextNextNextNext.next\n        val numsCopyIteratorNextNextNextNextNextNextLength\
    \ = numsCopyIteratorNextNextNextNextNextNext.length\n        val numsCopyIteratorNextNextNextNextNextNextNext\
    \ = numsCopyIteratorNextNextNextNextNextNext.next\n        val numsCopyIteratorNextNextNextNextNextNextNextLength\
    \ = numsCopyIteratorNextNextNextNextNextNextNext.length\n        val numsCopyIteratorNextNextNextNextNextNextNextNext\
    \ = numsCopyIteratorNextNextNextNextNextNextNextNext.next\n        val numsCopyIteratorNextNextNextNextNextNextNextNextLength\
    \ = numsCopyIteratorNextNextNextNextNextNextNextNextNext.length\n        val numsCopyIteratorNextNextNextNextNextNextNextNextNext\
    \ = numsCopyIteratorNextNextNextNextNextNextNextNextNextNext.next\n        val\
    \ numsCopyIteratorNextNextNextNextNextNextNextNextNextLength = numsCopyIteratorNextNextNextNextNextNextNextNextNextNext.length\n\
    \        val numsCopyIteratorNextNextNextNextNextNextNextNextNextNext = numsCopyIteratorNextNextNextNext\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphvq7wsjo.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mminSum\e[0m = math.Long.MaxValue\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                 value Long is not a member of math\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmphvq7wsjo.scala:16:62 ------------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnumsCopyIteratorNextLength\e[0m =\
    \ numsCopyIteratorNext.length\n\e[31m\e[31m   |\e[0m                         \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                         value length is not a member of Long\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmphvq7wsjo.scala:17:60 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mnumsCopyIteratorNextNext\e\
    [0m = numsCopyIteratorNext.next\n\e[31m\e[31m   |\e[0m                       \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                         value next is not a member of Long\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmphvq7wsjo.scala:29:63 ---------------------------\e[0m\e\
    [0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mnumsCopyIteratorNextNextNextNextNextNextNextNext\e\
    [0m = numsCopyIteratorNextNextNextNextNextNextNextNext.next\n\e[31m\e[31m   |\e\
    [0m                                                               ^\e[0m\n\e[31m\
    \   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsCopyIteratorNextNextNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphvq7wsjo.scala:34:5\
    \ ---------------------\e[0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659805716
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsMap = nums.groupBy(x => x).mapValues(_.size)\n\
    \        val numsMapSorted = numsMap.sortBy(_._2).reverse\n        val minSum\
    \ = numsMapSorted.head._2\n        val minSumList = numsMapSorted.filter(_._2\
    \ == minSum).map(_._1)\n        minSumList.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcje7vdg2.scala:11:36 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mnumsMapSorted\e[0m = numsMap.sortBy(_._2).reverse\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m     value sortBy is not a member of scala.collection.MapView[Long, Int]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805716
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSetSize\
    \ = numsSet.size\n        val numsSetIterator = numsSet.iterator\n        val\
    \ numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n \
    \       val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIterator\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg79vzvwp.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpg79vzvwp.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorIterator is\
    \ already defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpg79vzvwp.scala:26:78 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpg79vzvwp.scala:"
  stdout: ''
  timestamp: 1659805718
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSetSize\
    \ = numsSet.size\n        val numsSetIterator = numsSet.iterator\n        val\
    \ numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n \
    \       val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n   \
    \     val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIterator\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp856934ku.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp856934ku.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorIterator is\
    \ already defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmp856934ku.scala:26:78 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp856934ku.scala:"
  stdout: ''
  timestamp: 1659805626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSorted = nums.sortWith(_ < _)\n  \
    \      val numsSum = numsSorted.foldLeft(0L)((sum, num) => sum + num)\n      \
    \  val numsSumList = numsSorted.toList\n        val numsSumListLength = numsSumList.length\n\
    \        val numsSumListLength = numsSumListLength - 1\n        val numsSumListLength\
    \ = numsSumListLength - 1\n        val numsSumListLength = numsSumListLength -\
    \ 1\n        val numsSumListLength = numsSumListLength - 1\n        val numsSumListLength\
    \ = numsSumListLength - 1\n        val numsSumListLength = numsSumListLength -\
    \ 1\n        val numsSumListLength = numsSumListLength - 1\n        val numsSumListLength\
    \ = numsSumListLength - 1\n        val numsSumListLength = numsSumListLength -\
    \ 1\n        val numsSumListLength = numsSumListLength - 1\n        val numsSumListLength\
    \ = numsSumListLength - 1\n        val numsSumListLength = numsSumListLength -\
    \ 1\n        val numsSumListLength = numsSumListLength - 1\n        val numsSumListLength\
    \ = numsSumListLength - 1\n        val numsSumListLength = numsSumListLength -\
    \ 1\n        val numsSumListLength = numsSumListLength - 1\n        val numsSumListLength\
    \ = numsSumListLength - 1\n        val numsSumListLength = numsSumListLength -\
    \ 1\n        val numsSumListLength = numsSumListLength - 1\n        val numsSumListLength\
    \ = numsSumListLength - 1\n        val numsSumListLength = numsSumListLength -\
    \ 1\n        val numsSumListLength = numsSumListLength - 1\n        val numsSumListLength\
    \ = numsSumListLength - 1\n        val numsSumListLength = numsSumListLength -\
    \ 1\n        val numsSumListLength = numsSumListLength - 1\n        val numsSumListLength\
    \ = numsSumListLength - 1\n        val numsSumListLength = numsSumListLength -\
    \ 1\n        val numsSumListLength = numsSumListLength - 1\n        val numsSumListLength\
    \ = numsSumListLength - 1\n        val numsSumListLength = numsSumListLength -\
    \ 1\n        val numsSumListLength = numsSumListLength - 1\n        val numsSumListLength\
    \ = numsSumListLength\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_36vjrlh.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mnumsSumListLength\e[0m =\
    \ numsSumListLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSumListLength is already defined as \e[33mvalue\e[0m \e\
    [35mnumsSumListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp_36vjrlh.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnumsSumListLength\e[0m =\
    \ numsSumListLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSumListLength is already defined as \e[33mvalue\e[0m \e\
    [35mnumsSumListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp_36vjrlh.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnumsSumListLength\e[0m =\
    \ numsSumListLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSumListLength is already defined as \e[33mvalue\e[0m \e\
    [35mnumsSumListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp_36vjrlh.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mnumsSumListLength\e[0m =\
    \ numsSumListLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSumListLength is already defined as \e[33mvalue\e[0m \e\
    [35mnumsSumListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp_36vjrlh.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        "
  stdout: ''
  timestamp: 1659805720
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsCopy = nums.toList\n        val minSum\
    \ = numsCopy.foldLeft(0L) { (sum, num) =>\n            val newSum = sum + num\n\
    \            if (newSum < minSum) newSum else minSum\n        }\n        minSum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpn_xncf_p.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpn_xncf_p.scala:13:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsCopy = nums.toList\n        val numsCopySize\
    \ = numsCopy.size\n        val numsCopyCopy = numsCopy.toList\n        val numsCopyCopySize\
    \ = numsCopyCopy.size\n        val numsCopyCopyCopy = numsCopyCopy.toList\n  \
    \      val numsCopyCopyCopySize = numsCopyCopyCopy.size\n        val numsCopyCopyCopyCopy\
    \ = numsCopyCopyCopy.toList\n        val numsCopyCopyCopyCopySize = numsCopyCopyCopyCopy.size\n\
    \        val numsCopyCopyCopyCopyCopy = numsCopyCopyCopyCopy.toList\n        val\
    \ numsCopyCopyCopyCopyCopySize = numsCopyCopyCopyCopyCopy.size\n        val numsCopyCopyCopyCopyCopyCopy\
    \ = numsCopyCopyCopyCopyCopy.toList\n        val numsCopyCopyCopyCopyCopyCopySize\
    \ = numsCopyCopyCopyCopyCopyCopy.size\n        val numsCopyCopyCopyCopyCopyCopyCopy\
    \ = numsCopyCopyCopyCopyCopyCopyCopy.toList\n        val numsCopyCopyCopyCopyCopyCopyCopySize\
    \ = numsCopyCopyCopyCopyCopyCopyCopyCopy.size\n        val numsCopyCopyCopyCopyCopyCopyCopyCopy\
    \ = numsCopyCopyCopyCopyCopyCopyCopyCopyCopy.toList\n        val numsCopyCopyCopyCopyCopyCopyCopyCopySize\
    \ = numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy.size\n        val numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\
    \ = numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy.toList\n        val numsCopyCopyCopyCopyCopyCopyCopyCopyCopySize\
    \ = numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy.size\n        val numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\
    \ = numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy.toList\n        val numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopySize\
    \ = numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy.size\n        val\
    \ numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy = numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy.toList\n\
    \        val numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopySize = numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy.size\n\
    \        val numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopySize\
    \ = nums\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8bd4zha2.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mnumsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\e\
    [0m = numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy.toList\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp8bd4zha2.scala:22:47 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsCopyCopyCopyCopyCopyCopyCopy\e[0m = numsCopyCopyCopyCopyCopyCopyCopy.toList\n\
    \e[31m\e[31m   |\e[0m                                               ^\e[0m\n\e\
    [31m   |\e[0m             Recursive \e[33mvalue\e[0m \e[35mnumsCopyCopyCopyCopyCopyCopyCopy\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8bd4zha2.scala:24:51\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mnumsCopyCopyCopyCopyCopyCopyCopyCopy\e[0m = numsCopyCopyCopyCopyCopyCopyCopyCopyCopy.toList\n\
    \e[31m\e[31m   |\e[0m                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: numsCopyCopyCopyCopyCopyCopyCopyCopyCopy\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8bd4zha2.scala:26:59\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mnumsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\e[0m = numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy.toList\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \   "
  stdout: ''
  timestamp: 1659805720
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsCopy = nums.toList\n        val minSum\
    \ = numsCopy.foldLeft(0L) { (sum, num) =>\n            val newSum = sum + num\n\
    \            if (newSum < minSum) newSum else minSum\n        }\n        minSum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpn_xncf_p.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpn_xncf_p.scala:13:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805619
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsMap = nums.groupBy(x => x).mapValues(_.size)\n\
    \        val minSum = numsMap.minBy(_._2)._2\n        val minSumList = numsMap.filter(_._2\
    \ == minSum).map(_._1)\n        minSumList.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpch5yxgbv.scala:16)\n\tat Problem.main(tmpch5yxgbv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805726
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsCopy = nums.toList\n        val minSum\
    \ = numsCopy.foldLeft(0L) { (sum, elem) => sum + elem }\n        val minSubArray\
    \ = numsCopy.filter(elem => sum - elem < minSum)\n        minSubArray.foldLeft(0L)\
    \ { (sum, elem) => sum + elem }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpko_o1qo0.scala:12:50 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mminSubArray\e[0m = numsCopy.filter(\e\
    [36melem\e[0m => sum - elem < minSum)\n\e[31m\e[31m   |\e[0m                 \
    \                                 ^^^\e[0m\n\e[31m   |\e[0m                  \
    \                                Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805715
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSetIterator\
    \ = numsSet.iterator\n        val numsSetIteratorNext = numsSetIterator.next\n\
    \        val numsSetIteratorNextValue = numsSetIteratorNext.toLong\n        val\
    \ numsSetIteratorNextNext = numsSetIteratorNext.next\n        val numsSetIteratorNextNextValue\
    \ = numsSetIteratorNextNext.toLong\n        val numsSetIteratorNextNextNext =\
    \ numsSetIteratorNextNext.next\n        val numsSetIteratorNextNextNextValue =\
    \ numsSetIteratorNextNextNext.toLong\n        val numsSetIteratorNextNextNextNext\
    \ = numsSetIteratorNextNextNext.next\n        val numsSetIteratorNextNextNextNextValue\
    \ = numsSetIteratorNextNextNextNext.toLong\n        val numsSetIteratorNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNext.next\n        val numsSetIteratorNextNextNextNextNextValue\
    \ = numsSetIteratorNextNextNextNextNext.toLong\n        val numsSetIteratorNextNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNextNext.next\n        val numsSetIteratorNextNextNextNextNextNextValue\
    \ = numsSetIteratorNextNextNextNextNextNext.toLong\n        val numsSetIteratorNextNextNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNextNextNext.next\n        val numsSetIteratorNextNextNextNextNextNextNextValue\
    \ = numsSetIteratorNextNextNextNextNextNextNext.toLong\n        val numsSetIteratorNextNextNextNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNextNextNextNextNext.next\n        val numsSetIteratorNextNextNextNextNextNextNextNextValue\
    \ = numsSetIteratorNextNextNextNextNextNextNextNext.toLong\n        val numsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n        val\
    \ numsSetIteratorNextNextNextNextNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNextNextNextNextNextNext.toLong\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextValue = numsSet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv6mx0tze.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m = numsSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorNextNextNextNextNextNextNextNextNext is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpv6mx0tze.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorNextNextNextNextNextNextNextNextNextValue\e\
    [0m = numsSet\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorNextNextNextNextNextNextNextNextNextValue is\
    \ already defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorNextNextNextNextNextNextNextNextNextValue\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpv6mx0tze.scala:14:58 ------------------------\e[0m\e[0m\n\
    \e[31m14 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorNextNext\e[0m = numsSetIteratorNext.next\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      value next is not a\
    \ member of Long\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpv6mx0tze.scala:26:62\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSetIteratorNextNextNextNextNextNextNextNext\e[0m = numsSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsSetIterato"
  stdout: ''
  timestamp: 1659805723
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSetIterator\
    \ = numsSet.iterator\n        val numsSetIteratorNext = numsSetIterator.next\n\
    \        val numsSetIteratorNextValue = numsSetIteratorNext.asInstanceOf[Long]\n\
    \        val numsSetIteratorNextNext = numsSetIteratorNext.next\n        val numsSetIteratorNextNextValue\
    \ = numsSetIteratorNextNext.asInstanceOf[Long]\n        val numsSetIteratorNextNextNext\
    \ = numsSetIteratorNextNext.next\n        val numsSetIteratorNextNextNextValue\
    \ = numsSetIteratorNextNextNext.asInstanceOf[Long]\n        val numsSetIteratorNextNextNextNext\
    \ = numsSetIteratorNextNextNext.next\n        val numsSetIteratorNextNextNextNextValue\
    \ = numsSetIteratorNextNextNextNext.asInstanceOf[Long]\n        val numsSetIteratorNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNext.next\n        val numsSetIteratorNextNextNextNextNextValue\
    \ = numsSetIteratorNextNextNextNextNext.asInstanceOf[Long]\n        val numsSetIteratorNextNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNextNext.next\n        val numsSetIteratorNextNextNextNextNextNextValue\
    \ = numsSetIteratorNextNextNextNextNextNext.asInstanceOf[Long]\n        val numsSetIteratorNextNextNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNextNextNext.next\n        val numsSetIteratorNextNextNextNextNextNextNextValue\
    \ = numsSetIteratorNextNextNextNextNextNextNext.asInstanceOf[Long]\n        val\
    \ numsSetIteratorNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNextNextNextNextNext.asInstanceOf[Long]\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNextNextNextNextNext.asInstanceOf[Long]\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNext = numsSet\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4z80zzjs.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorNextNextNextNextNextNextNextNextValue\e\
    [0m = numsSetIteratorNextNextNextNextNextNextNextNextNext.asInstanceOf[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorNextNextNextNextNextNextNextNextValue is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorNextNextNextNextNextNextNextNextValue\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4z80zzjs.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m = numsSet\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorNextNextNextNextNextNextNextNextNext is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp4z80zzjs.scala:14:58 ------------------------\e[0m\e[0m\n\
    \e[31m14 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorNextNext\e[0m = numsSetIteratorNext.next\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      value next is not a\
    \ member of Long\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp4z80zzjs.scala:26:62\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSetIteratorNextNextNextNextNextNextNextNext\e[0m = numsSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsSetIt"
  stdout: ''
  timestamp: 1659805697
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsCopy = nums.toList\n        val minSum\
    \ = numsCopy.foldLeft(0L){ (sum, num) =>\n            val newSum = sum + num\n\
    \            if (newSum < minSum) newSum else minSum\n        }\n        minSum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpml1hxout.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpml1hxout.scala:13:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805641
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSorted = nums.sortWith(_ < _)\n  \
    \      val numsSortedLength = numsSorted.length\n        val minSum = numsSortedLength\n\
    \        val minSumIndex = numsSortedLength\n        val minSumIndexSet = mutable.HashSet[Int]()\n\
    \        val numsSortedLength = numsSorted.length\n        for ( i <- 0 until\
    \ numsSortedLength ) {\n            val currentSum = numsSorted(i)\n         \
    \   if ( currentSum < minSum ) {\n                minSum = currentSum\n      \
    \          minSumIndex = i\n            }\n            val currentSumSet = numsSortedIndexSet(i)\n\
    \            if ( currentSumSet.contains(minSumIndex) ) {\n                minSumIndexSet\
    \ = currentSumSet\n            }\n        }\n        minSum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong,\
    \ 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzig_mv9r.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnumsSortedLength\e[0m =\
    \ numsSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSortedLength is already defined as \e[33mvalue\e[0m \e\
    [35mnumsSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpzig_mv9r.scala:14:29 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mminSumIndexSet\e[0m = mutable.HashSet[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzig_mv9r.scala:19:25 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                minSum = currentSum\n\e[31m\e[31m   |\e\
    [0m                         ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \        Found:    (currentSum : Long)\n\e[31m   |\e[0m                      \
    \   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpzig_mv9r.scala:20:28\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m                minSumIndex\
    \ = i\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                Reassignment to val minSumIndex\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpzig_mv9r.scala:22:32 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mcurrentSumSet\e[0m =\
    \ numsSortedIndexSet(i)\n\e[31m\e[31m   |\e[0m                               \
    \ ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                Not\
    \ found: numsSortedIndexSet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e["
  stdout: ''
  timestamp: 1659805722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSetSize\
    \ = numsSet.size\n        val numsSetIterator = numsSet.iterator\n        val\
    \ numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n \
    \       val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = num\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgcd2jfyu.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgcd2jfyu.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorIterator is\
    \ already defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpgcd2jfyu.scala:26:78 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgcd2jfyu.scala:"
  stdout: ''
  timestamp: 1659805626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSetIterator\
    \ = numsSet.iterator\n        val numsSetIteratorNext = numsSetIterator.next\n\
    \        val numsSetIteratorNextValue = numsSetIteratorNext.asInstanceOf[Long]\n\
    \        val numsSetIteratorNextNext = numsSetIteratorNext.next\n        val numsSetIteratorNextNextValue\
    \ = numsSetIteratorNextNext.asInstanceOf[Long]\n        val numsSetIteratorNextNextNext\
    \ = numsSetIteratorNextNext.next\n        val numsSetIteratorNextNextNextValue\
    \ = numsSetIteratorNextNextNext.asInstanceOf[Long]\n        val numsSetIteratorNextNextNextNext\
    \ = numsSetIteratorNextNextNext.next\n        val numsSetIteratorNextNextNextNextValue\
    \ = numsSetIteratorNextNextNextNext.asInstanceOf[Long]\n        val numsSetIteratorNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNext.next\n        val numsSetIteratorNextNextNextNextNextValue\
    \ = numsSetIteratorNextNextNextNextNext.asInstanceOf[Long]\n        val numsSetIteratorNextNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNextNext.next\n        val numsSetIteratorNextNextNextNextNextNextValue\
    \ = numsSetIteratorNextNextNextNextNextNext.asInstanceOf[Long]\n        val numsSetIteratorNextNextNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNextNextNext.next\n        val numsSetIteratorNextNextNextNextNextNextNextValue\
    \ = numsSetIteratorNextNextNextNextNextNextNext.asInstanceOf[Long]\n        val\
    \ numsSetIteratorNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNextNextNextNextNext.asInstanceOf[Long]\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNextNextNextNextNext.asInstanceOf[Long]\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNext = numsSet\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4z80zzjs.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorNextNextNextNextNextNextNextNextValue\e\
    [0m = numsSetIteratorNextNextNextNextNextNextNextNextNext.asInstanceOf[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorNextNextNextNextNextNextNextNextValue is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorNextNextNextNextNextNextNextNextValue\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4z80zzjs.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m = numsSet\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorNextNextNextNextNextNextNextNextNext is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp4z80zzjs.scala:14:58 ------------------------\e[0m\e[0m\n\
    \e[31m14 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorNextNext\e[0m = numsSetIteratorNext.next\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      value next is not a\
    \ member of Long\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp4z80zzjs.scala:26:62\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSetIteratorNextNextNextNextNextNextNextNext\e[0m = numsSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsSetIt"
  stdout: ''
  timestamp: 1659805697
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsMap = nums.toMap\n        val numsSet\
    \ = nums.toSet\n        val numsArray = nums.toArray\n        val numsArrayBuilder\
    \ = new mutable.ArrayBuilder[Long]\n        numsArray.foreach(x => numsArrayBuilder.append(x))\n\
    \        val numsArrayBuilderBuilder = new mutable.ArrayBuilder[Long]\n      \
    \  numsSet.foreach(x => numsArrayBuilderBuilder.append(x))\n        val numsArrayBuilderBuilderBuilder\
    \ = new mutable.ArrayBuilder[Long]\n        numsMap.foreach(x => numsArrayBuilderBuilderBuilder.append(x))\n\
    \        val numsArrayBuilderBuilderBuilderBuilder = new mutable.ArrayBuilder[Long]\n\
    \        numsArrayBuilder.foreach(x => numsArrayBuilderBuilderBuilder.append(x))\n\
    \        val numsArrayBuilderBuilderBuilderBuilder = new mutable.ArrayBuilder[Long]\n\
    \        numsArrayBuilderBuilder.foreach(x => numsArrayBuilderBuilderBuilderBuilder.append(x))\n\
    \        val numsArrayBuilderBuilderBuilderBuilderBuilder = new mutable.ArrayBuilder[Long]\n\
    \        numsArrayBuilderBuilderBuilder.foreach(x => numsArrayBuilderBuilderBuilderBuilder.append(x))\n\
    \        val numsArrayBuilderBuilderBuilderBuilderBuilder = new mutable.ArrayBuilder[Long]\n\
    \        numsArrayBuilderBuilderBuilder.foreach(x => numsArrayBuilderBuilderBuilderBuilder.append(x))\n\
    \        val numsArrayBuilderBuilderBuilderBuilderBuilderBuilder = new mutable.ArrayBuilder[Long]\n\
    \        numsArrayBuilderBuilderBuilderBuilder.foreach(x => numsArrayBuilderBuilderBuilderBuilderBuilder.append(x))\n\
    \        val numsArrayBuilderBuilderBuilderBuilderBuilderBuilder = new mutable.ArrayBuilder[Long]\n\
    \        numsArrayBuilderBuilderBuilderBuilder.foreach(x => numsArrayBuilderBuilderBuilderBuilder.append(x))\n\
    \        val numsArrayBuilderBuilderBuilderBuilderBuilderBuilder = new mutable.ArrayBuilder[Long]\n\
    \        numsArrayBuilderBuilderBuilderBuilder.foreach(x => numsArrayBuilderBuilderBuilderBuilder.append(x))\n\
    \        val numsArrayBuilderBuilderBuilderBuilderBuilderBuilder = new mutable.ArrayBuilder[Long]\n\
    \        numsArrayBuilderBuilderBuilderBuilder.foreach(x => numsArrayBuilderBuilderBuilderBuilder.append(x))\n\
    \        val numsArrayBuilderBuilderBuilderBuilderBuilderBuilder = new mutable.ArrayBuilder[Long]\n\
    \        numsArrayBuilderBuilderBuilderBuilder.foreach(x => numsArrayBuilderBuilderBuilderBuilder.append(x))\n\
    \        val numsArrayBuilderBuilderBuilderBuilderBuilder\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong,\
    \ 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpti594no5.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpti594no5.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsArrayBuilderBuilderBuilderBuilder\e[0m = \e[33mnew\e[0m mutable.ArrayBuilder[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsArrayBuilderBuilderBuilderBuilder is already defined as\
    \ \e[33mvalue\e[0m \e[35mnumsArrayBuilderBuilderBuilderBuilder\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpti594no5.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsArrayBuilderBuilderBuilderBuilderBuilder\e[0m = \e[33mnew\e[0m mutable.ArrayBuilder[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsArrayBuilderBuilderBuilderBuilderBuilder is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsArrayBuilderBuilderBuilderBuilderBuilder\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpti594no5.scala:29:12 ---------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsArrayBuilderBuilderBuilderBuilderBuilderBuilder\e\
    [0m = \e[33mnew\e[0m mutable.ArrayBuilder[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsArrayBuilderBuilderBuilderBuilderBuilderBuilder is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsArrayBuilderBuilderBuilderBuilderBuilderBuilder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e"
  stdout: ''
  timestamp: 1659805722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSorted = nums.sortWith(_ < _)\n  \
    \      val sums = numsSorted.scanLeft(0)(_ + _)\n        sums.min\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2zflji06.scala:11:42\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36msums\e\
    [0m = numsSorted.scanLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m   |\e[0m        \
    \                                  ^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                           Found:    Long\n\e[31m   |\e[0m                  \
    \                        Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805646
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsCopy = nums.toList\n        val numsCopySize\
    \ = numsCopy.size\n        val numsCopyMin = numsCopy.min\n        val numsCopyMax\
    \ = numsCopy.max\n        val numsCopySum = numsCopy.sum\n        val numsCopySumMin\
    \ = numsCopySum.min\n        val numsCopySumMax = numsCopySum.max\n        val\
    \ numsCopySumSum = numsCopySum.sum\n        val numsCopySumSumMin = numsCopySumSum.min\n\
    \        val numsCopySumSumMax = numsCopySumSum.max\n        val numsCopySumSumSum\
    \ = numsCopySumSum.sum\n        val numsCopySumSumSumMin = numsCopySumSumSum.min\n\
    \        val numsCopySumSumSumMax = numsCopySumSumSum.max\n        val numsCopySumSumSumSum\
    \ = numsCopySumSumSum.sum\n        val numsCopySumSumSumSumMin = numsCopySumSumSumSum.min\n\
    \        val numsCopySumSumSumSumMax = numsCopySumSumSumSum.max\n        val numsCopySumSumSumSumSum\
    \ = numsCopySumSumSumSum.sum\n        val numsCopySumSumSumSumMin = numsCopySumSumSumSum.min\n\
    \        val numsCopySumSumSumSumMax = numsCopySumSumSumSumSum.max\n        val\
    \ numsCopySumSumSumSumSum = numsCopySumSumSumSumSum.sum\n        val numsCopySumSumSumSumSumMin\
    \ = numsCopySumSumSumSumSum.min\n        val numsCopySumSumSumSumMax = numsCopySumSumSumSumSum.max\n\
    \        val numsCopySumSumSumSumSum = numsCopySumSumSumSumSum.sum\n        val\
    \ numsCopySumSumSumSumSumMin = numsCopySumSumSumSumSum.min\n        val numsCopySumSumSumSumSumMax\
    \ = numsCopySumSumSumSumSum.max\n        val numsCopySumSumSumSumSumSum = numsCopySumSumSumSumSum.sum\n\
    \        val numsCopySumSumSumSumSumMin = numsCopySumSumSumSumSum.min\n      \
    \  val numsCopySumSumSumSumSumMax\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbs2lzhre.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbs2lzhre.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsCopySumSumSumSumMin\e[0m = numsCopySumSumSumSum.min\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mnumsCopySumSumSumSumMin is already defined as \e[33mvalue\e[0m\
    \ \e[35mnumsCopySumSumSumSumMin\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbs2lzhre.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mnumsCopySumSumSumSumMax\e\
    [0m = numsCopySumSumSumSumSum.max\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsCopySumSumSumSumMax is already defined as \e[33mvalue\e\
    [0m \e[35mnumsCopySumSumSumSumMax\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbs2lzhre.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mnumsCopySumSumSumSumSum\e\
    [0m = numsCopySumSumSumSumSum.sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsCopySumSumSumSumSum is already defined as \e[33mvalue\e\
    [0m \e[35mnumsCopySumSumSumSumSum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbs2lzhre.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mnumsCopySumSumSumSumMax\e\
    [0m = numsCopySumSumSumSumSum.max\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsCopySumSumSumSumMax is already defi"
  stdout: ''
  timestamp: 1659805723
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val sums\
    \ = nums.map(x => numsSet.count(_ == x))\n        val minSum = math.min(sums)\n\
    \        val minSumIndex = sums.indexOf(minSum)\n        sums(minSumIndex)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpdk1p0e28.scala:12:26 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mminSum\e[0m = math.min(sums)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of\
    \ the overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments ((sums : List[Int]))\n1 error found\n"
  stdout: ''
  timestamp: 1659805719
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsMap = nums.toMap\n        val numsSet\
    \ = nums.toSet\n        val numsArray = nums.toArray\n        val numsArrayList\
    \ = nums.toList\n        val numsArrayIterator = nums.iterator\n        val numsArrayIteratorList\
    \ = nums.toIterator\n        val numsArrayIteratorSet = nums.toIterator.toSet\n\
    \        val numsArrayIteratorMap = nums.toIterator.toMap\n        val numsArrayIteratorArray\
    \ = nums.toIterator.toArray\n        val numsArrayIteratorArrayList = nums.toIterator.toList\n\
    \        val numsArrayIteratorArrayIterator = nums.toIterator.toIterator\n   \
    \     val numsArrayIteratorArrayIteratorList = nums.toIterator.toIterator.toList\n\
    \        val numsArrayIteratorArrayIteratorSet = nums.toIterator.toIterator.toSet\n\
    \        val numsArrayIteratorArrayIteratorMap = nums.toIterator.toIterator.toMap\n\
    \        val numsArrayIteratorArrayIteratorArray = nums.toIterator.toIterator.toArray\n\
    \        val numsArrayIteratorArrayIteratorArrayList = nums.toIterator.toIterator.toList\n\
    \        val numsArrayIteratorArrayIteratorArraySet = nums.toIterator.toIterator.toSet\n\
    \        val numsArrayIteratorArrayIteratorArrayMap = nums.toIterator.toIterator.toMap\n\
    \        val numsArrayIteratorArrayIteratorArrayArray = nums.toIterator.toIterator.toArray\n\
    \        val numsArrayIteratorArrayIteratorArrayArrayList = nums.toIterator.toIterator.toList\n\
    \        val numsArrayIteratorArrayIteratorArrayArraySet = nums.toIterator.toIterator.toSet\n\
    \        val numsArrayIteratorArrayIteratorArrayArrayMap = nums.toIterator.toIterator.toMap\n\
    \        val numsArrayIteratorArrayIteratorArrayArrayArray = nums.toIterator.toIterator.toArray\n\
    \        val numsArrayIteratorArrayIteratorArrayArrayList = nums.toIterator.toIterator.toList\n\
    \        val numsArrayIteratorArrayIteratorArrayArraySet = nums.toIterator.toIterator.toSet\n\
    \        val numsArrayIteratorArrayIteratorArrayArrayMap = nums.toIterator.toIterator.toMap\n\
    \        val numsArrayIteratorArrayIteratorArrayArrayArray = nums.toIterator.toIterator.toArray\n\
    \        val numsArrayIteratorArrayIteratorArrayArrayList = nums.toIterator.toIterator.toList\n\
    \        val numsArrayIteratorArrayIteratorArrayArraySet = nums.toIterator.toIterator.toSet\n\
    \        val numsArrayIteratorArrayIteratorArrayArrayMap = nums.to\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxfcqulvg.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mnumsArrayIteratorArrayIteratorArrayArrayList\e\
    [0m = nums.toIterator.toIterator.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsArrayIteratorArrayIteratorArrayArrayList is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsArrayIteratorArrayIteratorArrayArrayList\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpxfcqulvg.scala:34:12 ---------------------------\e[0m\e[0m\n\e[31m34\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsArrayIteratorArrayIteratorArrayArraySet\e\
    [0m = nums.toIterator.toIterator.toSet\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsArrayIteratorArrayIteratorArrayArraySet is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsArrayIteratorArrayIteratorArrayArraySet\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpxfcqulvg.scala:35:12 ---------------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsArrayIteratorArrayIteratorArrayArrayMap\e\
    [0m = nums.toIterator.toIterator.toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsArrayIteratorArrayIteratorArrayArrayMap is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsArrayIteratorArrayIteratorArrayArrayMap\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpxfcqulvg.scala:36:12 ---------------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsArrayIteratorArrayIteratorArrayArrayArray\e\
    [0m = nums.toIterator.toIterator.toArray\n\e[31m\e[31m   |\e[0m  "
  stdout: ''
  timestamp: 1659805730
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSetSize\
    \ = numsSet.size\n        val numsSetIterator = numsSet.iterator\n        val\
    \ numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n \
    \       val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = num\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgcd2jfyu.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgcd2jfyu.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorIterator is\
    \ already defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpgcd2jfyu.scala:26:78 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgcd2jfyu.scala:"
  stdout: ''
  timestamp: 1659805626
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsMap = nums.groupBy(x => x).mapValues(_.size)\n\
    \        val minSum = numsMap.minBy(_._2)._2\n        val minSumList = numsMap.filter(_._2\
    \ == minSum).map(_._1)\n        minSumList.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpch5yxgbv.scala:16)\n\tat Problem.main(tmpch5yxgbv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805726
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSetSize\
    \ = numsSet.size\n        val numsSetIterator = numsSet.iterator\n        val\
    \ numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n \
    \       val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = num\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgcd2jfyu.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgcd2jfyu.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorIterator is\
    \ already defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpgcd2jfyu.scala:26:78 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgcd2jfyu.scala:"
  stdout: ''
  timestamp: 1659805626
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val minSum\
    \ = nums.foldLeft(0L)((sum, num) => sum + num)\n        val minSumSet = numsSet.foldLeft(0L)((sum,\
    \ num) => sum + num)\n        minSum - minSumSet\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu0d_9yv1.scala:16)\n\tat Problem.main(tmpu0d_9yv1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805716
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSetSize\
    \ = numsSet.size\n        val numsSetIterator = numsSet.iterator\n        val\
    \ numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n \
    \       val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = num\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgcd2jfyu.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgcd2jfyu.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorIterator is\
    \ already defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpgcd2jfyu.scala:26:78 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgcd2jfyu.scala:"
  stdout: ''
  timestamp: 1659805626
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsCopy = nums.toList\n        val result\
    \ = numsCopy.foldLeft(0L){ (sum, num) =>\n            val newSum = sum + num\n\
    \            if (newSum < 0) newSum\n            else newSum\n        }\n    \
    \    result\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzo8lt1am.scala:19)\n\tat Problem.main(tmpzo8lt1am.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805729
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSetSize\
    \ = numsSet.size\n        val numsSetIterator = numsSet.iterator\n        val\
    \ numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n \
    \       val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = num\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgcd2jfyu.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgcd2jfyu.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorIterator is\
    \ already defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpgcd2jfyu.scala:26:78 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgcd2jfyu.scala:"
  stdout: ''
  timestamp: 1659805626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSetSize\
    \ = numsSet.size\n        val numsSetIterator = numsSet.iterator\n        val\
    \ numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n \
    \       val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = num\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgcd2jfyu.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgcd2jfyu.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorIterator is\
    \ already defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpgcd2jfyu.scala:26:78 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgcd2jfyu.scala:"
  stdout: ''
  timestamp: 1659805626
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val minSum = nums.foldLeft(0L){ (sum, num)\
    \ =>\n            val newSum = sum + num\n            if (newSum < sum) newSum\
    \ else sum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcw121ulj.scala:17)\n\tat Problem.main(tmpcw121ulj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805730
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSorted = nums.sortWith(_ < _)\n  \
    \      val minSum = numsSorted.foldLeft(numsSorted.head) { (sum, num) =>\n   \
    \         val newSum = sum + num\n            if (newSum < 0) newSum\n       \
    \     else newSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfxaqnz3j.scala:19)\n\tat Problem.main(tmpfxaqnz3j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSetSize\
    \ = numsSet.size\n        val numsSetIterator = numsSet.iterator\n        val\
    \ numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n \
    \       val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = num\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgcd2jfyu.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgcd2jfyu.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorIterator is\
    \ already defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpgcd2jfyu.scala:26:78 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgcd2jfyu.scala:"
  stdout: ''
  timestamp: 1659805626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsArray = nums.toArray\n        val\
    \ numsArrayLen = numsArray.length\n        val minSum = numsArray(0)\n       \
    \ val minSumIndex = 0\n        val minSumArray = Array.ofDim[Long](numsArrayLen)\n\
    \        val minSumArrayLen = minSumArray.length\n        val minSumArrayIndex\
    \ = Array.ofDim[Int](minSumArrayLen)\n        val minSumArrayLenIndex = Array.ofDim[Int](minSumArrayLen)\n\
    \        val minSumArrayIndexLen = Array.ofDim[Int](minSumArrayLen)\n        val\
    \ minSumArrayIndexLenIndex = Array.ofDim[Int](minSumArrayLen)\n        val minSumArrayIndexLenIndexLen\
    \ = Array.ofDim[Int](minSumArrayLen)\n        val minSumArrayIndexLenIndexLenIndex\
    \ = Array.ofDim[Int](minSumArrayLen)\n        val minSumArrayIndexLenIndexLenIndexLen\
    \ = Array.ofDim[Int](minSumArrayLen)\n        val minSumArrayIndexLenIndexLenIndexLenIndex\
    \ = Array.ofDim[Int](minSumArrayLen)\n        val minSumArrayIndexLenIndexLenIndexLenIndexLen\
    \ = Array.ofDim[Int](minSumArrayLen)\n        val minSumArrayIndexLenIndexLenIndexLenIndexLenIndex\
    \ = Array.ofDim[Int](minSumArrayLen)\n        val minSumArrayIndexLenIndexLenIndexLenIndexLenIndexLen\
    \ = Array.ofDim[Int](minSumArrayLen)\n        val minSumArrayIndexLenIndexLenIndexLenIndexLenIndexLenIndex\
    \ = Array.ofDim[Int](minSumArrayLen)\n        val minSumArrayIndexLenIndexLenIndexLenIndexLenIndexLenIndexLen\
    \ = Array.ofDim[Int](minSumArrayLen)\n        val minSumArrayIndexLenIndexLenIndexLenIndexLenIndexLenIndexLenIndex\
    \ = Array.ofDim[Int](minSumArrayLen)\n        val minSumArrayIndexLenIndexLenIndexLenIndexLenIndexLenIndexLenIndexLen\
    \ = Array.ofDim[Int](minSumArrayLen)\n        val minSumArrayIndexLenIndexLenIndexLenIndexLenIndexLenIndexLenIndexLenIndex\
    \ = Array.ofDim[Int](minSumArrayLen)\n        val minSumArrayIndexLenIndexLenIndexLenIndexLenIndexLenIndexLenIndexLenIndexLen\
    \ = Array.ofDim[Int](minSumArrayLen)\n        val minSumArrayIndexLen\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0p9izzpx.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0p9izzpx.scala:34:5 ---------------------\e[0m\e[0m\n\e[31m34 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSorted = nums.sortWith(_ < _)\n  \
    \      val sums = mutable.ArrayBuffer.empty[Long]\n        val sumsIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val numsIndex = mutable.ArrayBuffer.empty[Int]\n        var sum = 0L\n\
    \        var index = 0\n        var sumIndex = 0\n        var numsIndex = 0\n\
    \        var numsIndexMax = numsSorted.length - 1\n        var sumIndexMax = 0\n\
    \        var sumIndexMin = 0\n        var sumIndexMaxSum = 0\n        var sumIndexMinSum\
    \ = 0\n        var sumIndexMaxSumMin = 0\n        var sumIndexMinSumMin = 0\n\
    \        var sumIndexMaxSumMinMin = 0\n        var sumIndexMinSumMinMin = 0\n\
    \        var sumIndexMaxSumMinMin = 0\n        var sumIndexMinSumMinMin = 0\n\
    \        var sumIndexMaxSumMinMinMin = 0\n        var sumIndexMinSumMinMinMin\
    \ = 0\n        var sumIndexMaxSumMinMinMin = 0\n        var sumIndexMinSumMinMinMin\
    \ = 0\n        var sumIndexMaxSumMinMinMin = 0\n        var sumIndexMinSumMinMinMin\
    \ = 0\n        var sumIndexMaxSumMinMinMin = 0\n        var sumIndexMinSumMinMinMin\
    \ = 0\n        var sumIndexMaxSumMinMinMin = 0\n        var sumIndexMinSumMinMinMin\
    \ = 0\n        var sumIndexMaxSumMinMinMin = 0\n        var sumIndexMinSumMinMinMin\
    \ = 0\n        var sumIndexMaxSumMinMinMin = 0\n        var sumIndexMinSumMinMinMin\
    \ = 0\n        var sumIndexMaxSumMinMinMin = 0\n        var sumIndexMinSumMinMinMin\
    \ = 0\n        var sumIndexMaxSumMinMinMin = 0\n        var sumIndexMinSumMinMinMin\
    \ = 0\n        var sumIndexMaxSumMinMinMin = 0\n        var sumIndexMinSumMinMinMin\
    \ = 0\n        var sumIndexMaxSumMinMinMin = 0\n        var sumIndexMinSumMinMinMin\
    \ = 0\n        var sumIndexMaxSumMinMinMin = 0\n        var sumIndexMinSumMinMinMin\
    \ = 0\n        var sumIndexMaxSumMinMinMin = 0\n        var sumIndexMinSumMinMinMin\
    \ = 0\n        var sumIndexMaxSumMinMinMin = 0\n        var sumIndexMinSumMinMinMin\
    \ = 0\n        var sumIndexMaxSumMinMinMin = 0\n        var sumIndexMinSumMinMinMin\
    \ = 0\n        var sumIndexMaxSumMinMinMin = 0\n        var sumIndexMinSumMinMinMin\
    \ = 0\n        var sumIndexMaxSumMinMinMin = 0\n        var sumIndexMinSumMinMinMin\
    \ = 0\n        var sumIndexMaxSum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphqn4q6ok.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphqn4q6ok.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mnumsIndex\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsIndex is already defined as \e[33mvalue\e[0m \e[35mnumsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphqn4q6ok.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mvar\e[0m \e[36msumIndexMaxSumMinMin\e[0m = \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0msumIndexMaxSumMinMin is already defined as \e[33mvariable\e[0m \e[35msumIndexMaxSumMinMin\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphqn4q6ok.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mvar\e[0m \e[36msumIndexMinSumMinMin\e[0m = \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0msumIndexMinSumMinMin is already defined as \e[33mvariable\e[0m \e[35msumIndexMinSumMinMin\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphqn4q6ok.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mvar\e[0m \e[36msumIndexMaxSumMinMinMin\e[0m = \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0msumIndexMaxSumMinMinMin is already defined as \e[33mvariable\e[0m \e\
    [35msumIndexMaxSumMinMinMin\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmphqn4q6ok.scala:32:12 -"
  stdout: ''
  timestamp: 1659805734
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSetIterator\
    \ = numsSet.iterator\n        var minSum = numsSet.head\n        var minSumIndex\
    \ = 0\n        var minSumIndexIterator = numsSetIterator.iterator\n        while\
    \ (true) {\n            if (minSumIndexIterator.hasNext) {\n                val\
    \ currentSum = numsSetIterator.next().toLong\n                if (currentSum <\
    \ minSum) {\n                    minSum = currentSum\n                    minSumIndex\
    \ = minSumIndexIterator.next()\n                }\n            }\n           \
    \ if (minSumIndexIterator.hasNext) {\n                val currentSum = numsSetIterator.next().toLong\n\
    \                if (currentSum < minSum) {\n                    minSum = currentSum\n\
    \                    minSumIndex = minSumIndexIterator.next()\n              \
    \  }\n            }\n            if (minSumIndexIterator.hasNext) {\n        \
    \        val currentSum = numsSetIterator.next().toLong\n                if (currentSum\
    \ < minSum) {\n                    minSum = currentSum\n                    minSumIndex\
    \ = minSumIndexIterator.next()\n                }\n            }\n           \
    \ if (minSumIndexIterator.hasNext) {\n                val currentSum = numsSetIterator.next().toLong\n\
    \                if (currentSum < minSum) {\n                    minSum = currentSum\n\
    \                    minSumIndex = minSumIndexIterator.next()\n              \
    \  }\n            }\n            if (minSumIndexIterator.hasNext) {\n        \
    \        val currentSum = numsSetIterator.next().toLong\n                if (currentSum\
    \ < minSum) {\n                    minSum = currentSum\n                    minSumIndex\
    \ = minSumIndexIterator.next()\n                }\n            }\n           \
    \ if (minSumIndexIterator.hasNext) {\n                val currentSum = numsSetIterator.next().toLong\n\
    \                if (currentSum < minSum) {\n                    minSum = currentSum\n\
    \                    minSumIndex = minSumIndexIterator.next()\n              \
    \  }\n            }\n            if (minSumIndexIterator.hasNext) {\n        \
    \        val currentSum = numsSetIterator.next().toLong\n                if (currentSum\
    \ < minSum) {\n                    minSum = currentSum\n                    minSumIndex\
    \ = minSumIndexIterator.next()\n                }\n            }\n           \
    \ if (minSumIndexIterator.hasNext) {\n                val currentSum = numsSetIterator.next().toLong\n\
    \                if (currentSum < minSum) {\n                    minSum = currentSum\n\
    \                    minSumIndex = minSumIndexIterator.next()\n              \
    \  }\n            }\n            if (minSumIndexIterator.hasNext) {\n        \
    \        val currentSum = numsSetIterator.next().toLong\n                if (current\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfewu87v5.scala:75:4 ----------------------------\e\
    [0m\e[0m\n\e[31m75 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfewu87v5.scala:92:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m92 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpfewu87v5.scala:20:58 --------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m                    minSumIndex = minSumIndexIterator.next()\n\e\
    [31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    Long\n\e[31m \
    \  |\e[0m                                  Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfewu87v5.scala:27:58 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                    minSumIndex = minSumIndexIterator.next()\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    Long\n\e[31m \
    \  |\e[0m                                  Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfewu87v5.scala:34:58 --------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m                    minSumIndex = minSumIndexIterator.next()\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    Long\n\e[31m \
    \  |\e[0m                                  Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfewu87v5.scala:41:58 --------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m                    minSumIndex = minSumIndexIterator.next()\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m         "
  stdout: ''
  timestamp: 1659805735
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSetIterator\
    \ = numsSet.iterator\n        val numsSetIteratorNext = numsSetIterator.next\n\
    \        val numsSetIteratorNextValue = numsSetIteratorNext.toLong\n        val\
    \ numsSetIteratorNextNext = numsSetIteratorNext.next\n        val numsSetIteratorNextNextValue\
    \ = numsSetIteratorNextNext.toLong\n        val numsSetIteratorNextNextNext =\
    \ numsSetIteratorNextNext.next\n        val numsSetIteratorNextNextNextValue =\
    \ numsSetIteratorNextNextNext.toLong\n        val numsSetIteratorNextNextNextNext\
    \ = numsSetIteratorNextNextNext.next\n        val numsSetIteratorNextNextNextNextValue\
    \ = numsSetIteratorNextNextNextNext.toLong\n        val numsSetIteratorNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNext.next\n        val numsSetIteratorNextNextNextNextNextValue\
    \ = numsSetIteratorNextNextNextNextNext.toLong\n        val numsSetIteratorNextNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNextNext.next\n        val numsSetIteratorNextNextNextNextNextNextValue\
    \ = numsSetIteratorNextNextNextNextNextNext.toLong\n        val numsSetIteratorNextNextNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNextNextNext.next\n        val numsSetIteratorNextNextNextNextNextNextNextValue\
    \ = numsSetIteratorNextNextNextNextNextNextNext.toLong\n        val numsSetIteratorNextNextNextNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNextNextNextNextNext.next\n        val numsSetIteratorNextNextNextNextNextNextNextNextValue\
    \ = numsSetIteratorNextNextNextNextNextNextNextNext.toLong\n        val numsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNextNextNextNextNextNext.next\n        val numsSetIteratorNextNextNextNextNextNextNextNextNextValue\
    \ = numsSetIteratorNextNextNextNextNextNextNextNextNext.toLong\n        val numsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n        val\
    \ numsSetIteratorNextNextNextNextNextNextNextNextNextValue = numsSetIteratorNextNext\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp360yejyk.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m = numsSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorNextNextNextNextNextNextNextNextNext is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp360yejyk.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorNextNextNextNextNextNextNextNextNextValue\e\
    [0m = numsSetIteratorNextNext\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorNextNextNextNextNextNextNextNextNextValue is\
    \ already defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorNextNextNextNextNextNextNextNextNextValue\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp360yejyk.scala:14:58 ------------------------\e[0m\e[0m\n\
    \e[31m14 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorNextNext\e[0m = numsSetIteratorNext.next\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      value next is not a\
    \ member of Long\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp360yejyk.scala:26:62\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSetIteratorNextNextNextNextNextNextNextNext\e[0m = numsSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue"
  stdout: ''
  timestamp: 1659805675
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSorted = nums.sortWith(_ < _)\n  \
    \      val sums = mutable.ArrayBuffer.empty[Long]\n        val minSum = Long.MaxValue\n\
    \        for(i <- 0 until numsSorted.length){\n            val currentSum = numsSorted(i)\n\
    \            val nextSum = numsSorted(i+1)\n            val currentMinSum = sums.min\n\
    \            val nextMinSum = sums.min\n            if(currentSum > 0 && nextSum\
    \ > 0){\n                sums += currentSum + nextSum\n                if(currentMinSum\
    \ < sums.min){\n                    minSum = sums.min\n                }\n   \
    \         }\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgd4h9c5f.scala:11:19 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36msums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpgd4h9c5f.scala:21:27 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                    minSum = sums.min\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \           Reassignment to val minSum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805731
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSetIterator\
    \ = numsSet.iterator\n        val numsSetIteratorResult = numsSetIterator.next\n\
    \        val numsSetIteratorResultSet = numsSetIterator.next\n        val numsSetIteratorResultSetIterator\
    \ = numsSetIteratorResultSet.iterator\n        val numsSetIteratorResultSetIteratorResult\
    \ = numsSetIteratorResultSetIterator.next\n        val numsSetIteratorResultSetIteratorResultSet\
    \ = numsSetIteratorResultSetIterator.next\n        val numsSetIteratorResultSetIteratorResultSetIterator\
    \ = numsSetIteratorResultSetIteratorResult.iterator\n        val numsSetIteratorResultSetIteratorResultSetIteratorResult\
    \ = numsSetIteratorResultSetIteratorResultSet.iterator\n        val numsSetIteratorResultSetIteratorResultSetIteratorResultSet\
    \ = numsSetIteratorResultSetIteratorResultSetIterator.next\n        val numsSetIteratorResultSetIteratorResultSetIteratorResultSetIterator\
    \ = numsSetIteratorResultSetIteratorResultSetIteratorResult.iterator\n       \
    \ val numsSetIteratorResultSetIteratorResultSetIteratorResultSetIteratorResult\
    \ = numsSetIteratorResultSetIteratorResultSetIteratorResultSet.iterator\n    \
    \    val numsSetIteratorResultSetIteratorResultSetIteratorResultSetIteratorResult\
    \ = numsSetIteratorResultSetIteratorResultSetIteratorResultSetIterator.next\n\
    \        val numsSetIteratorResultSetIteratorResultSetIteratorResultSetIteratorResultSetIterator\
    \ = numsSetIteratorResultSetIteratorResultSetIteratorResultSetIteratorResult.iterator\n\
    \        val numsSetIteratorResultSetIteratorResultSetIteratorResultSetIteratorResultSetIteratorResult\
    \ = numsSetIteratorResultSetIteratorResultSetIteratorResultSetIteratorResultSetIterator.next\n\
    \        val numsSetIteratorResultSetIteratorResultSetIteratorResultSetIteratorResultSetIteratorResultSetIterator\
    \ = numsSetIteratorResultSetIteratorResultSetIteratorResultSetIteratorResultSetIteratorResult.iterator\n\
    \        val numsSetIteratorResultSetIteratorResultSetIteratorResultSetIteratorResultSetIteratorResultSetIteratorResult\
    \ = numsSetIteratorResultSetIteratorResultSetIteratorResultSetIteratorResultSetIteratorResultSetIterator.next\n\
    \        val numsSetIteratorResultSetIteratorResultSetIteratorResultSetIteratorResultSetIteratorResultSetIteratorResultSetIteratorResult\
    \ = numsSetIteratorResultSetIteratorResultSetIteratorResultSetIteratorResultSetIteratorResultSetIteratorResultSetIterator.next\n\
    \        val numsSetIteratorResultSetIteratorResultSetIteratorResultSetIteratorResultSet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpge2crzvz.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpge2crzvz.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSetIteratorResultSetIteratorResultSetIteratorResultSetIteratorResult\e\
    [0m = numsSetIteratorResultSetIteratorResultSetIteratorResultSetIterator.next\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorResultSetIteratorResultSetIteratorResultSetIteratorResult\
    \ is already defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorResultSetIteratorResultSetIteratorResultSetIteratorResult\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpge2crzvz.scala:14:72 ------------------------\e[0m\e[0m\n\
    \e[31m14 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorResultSetIterator\e\
    [0m = numsSetIteratorResultSet.iterator\n\e[31m\e[31m   |\e[0m               \
    \                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                  value iterator is not a member of\
    \ Long\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpge2crzvz.scala:27:138 -----------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorResultSetIteratorResultSetIteratorResultSetIteratorResultSetIteratorResultSetIteratorResultSetIteratorResult\e\
    [0m = numsSetIteratorResultSetIteratorResultSetIteratorResultSetIteratorResultSetIteratorResultSetIteratorResultSetIterator.next\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659805735
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSorted = nums.sortWith(_ < _)\n  \
    \      var sum = 0L\n        var minSum = Long.MaxValue\n        var minSumIndex\
    \ = 0\n        for (i <- 0 until numsSorted.length) {\n            val currentSum\
    \ = numsSorted(i)\n            if (currentSum > 0) {\n                sum += currentSum\n\
    \                if (sum < minSum) {\n                    minSum = sum\n     \
    \               minSumIndex = i\n                }\n            }\n        }\n\
    \        minSum\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2una8f3g.scala:28)\n\tat Problem.main(tmp2una8f3g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805736
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsCopy = nums.toList\n        var minSum\
    \ = Long.MaxValue\n        var minSumIndex = 0\n        var minSumIndex2 = 0\n\
    \        var minSumIndex3 = 0\n        var minSumIndex4 = 0\n        var minSumIndex5\
    \ = 0\n        var minSumIndex6 = 0\n        var minSumIndex7 = 0\n        var\
    \ minSumIndex8 = 0\n        var minSumIndex9 = 0\n        var minSumIndex10 =\
    \ 0\n        var minSumIndex11 = 0\n        var minSumIndex12 = 0\n        var\
    \ minSumIndex13 = 0\n        var minSumIndex14 = 0\n        var minSumIndex15\
    \ = 0\n        var minSumIndex16 = 0\n        var minSumIndex17 = 0\n        var\
    \ minSumIndex18 = 0\n        var minSumIndex19 = 0\n        var minSumIndex20\
    \ = 0\n        var minSumIndex21 = 0\n        var minSumIndex22 = 0\n        var\
    \ minSumIndex23 = 0\n        var minSumIndex24 = 0\n        var minSumIndex25\
    \ = 0\n        var minSumIndex26 = 0\n        var minSumIndex27 = 0\n        var\
    \ minSumIndex28 = 0\n        var minSumIndex29 = 0\n        var minSumIndex30\
    \ = 0\n        var minSumIndex31 = 0\n        var minSumIndex32 = 0\n        var\
    \ minSumIndex33 = 0\n        var minSumIndex34 = 0\n        var minSumIndex35\
    \ = 0\n        var minSumIndex36 = 0\n        var minSumIndex37 = 0\n        var\
    \ minSumIndex38 = 0\n        var minSumIndex39 = 0\n        var minSumIndex40\
    \ = 0\n        var minSumIndex41 = 0\n        var minSumIndex42 = 0\n        var\
    \ minSumIndex43 = 0\n        var minSumIndex44 = 0\n        var minSumIndex45\
    \ = 0\n        var minSumIndex46 = 0\n        var minSumIndex47 = 0\n        var\
    \ minSumIndex48 = 0\n        var minSumIndex49 = 0\n        var minSumIndex50\
    \ = 0\n        var minSumIndex51 = 0\n        var minSumIndex52 = 0\n        var\
    \ minSumIndex53 = 0\n        var minSumIndex54 = 0\n        var minSumIndex55\
    \ = 0\n        var minSumIndex56 = 0\n        var minSumIndex57 = 0\n        var\
    \ minSumIndex58 = 0\n        var minSumIndex59 = 0\n        var minSumIndex60\
    \ = 0\n        var minSumIndex61 = 0\n        var minSumIndex62 = 0\n        var\
    \ minSumIndex63 = 0\n        var minSumIndex64 = 0\n        var minSumIndex65\
    \ = 0\n        var minSumIndex66 = 0\n        var minSumIndex67 = 0\n        var\
    \ minSumIndex68 = 0\n        var minSumIndex69 = 0\n        var minSumIndex70\
    \ = 0\n        var minSum\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmexuwk5a.scala:83:4 ----------------------------\e\
    [0m\e[0m\n\e[31m83 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpmexuwk5a.scala:83:5 ---------------------\e[0m\e[0m\n\e[31m83 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805734
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSetIterator\
    \ = numsSet.iterator\n        var minSum = numsSet.head\n        var minSumIndex\
    \ = 0\n        var minSumIndexIterator = numsSetIterator.next()\n        var minSumIterator\
    \ = numsSetIterator.next()\n        var minSumIterator2 = numsSetIterator.next()\n\
    \        var minSumIterator3 = numsSetIterator.next()\n        var minSumIterator4\
    \ = numsSetIterator.next()\n        var minSumIterator5 = numsSetIterator.next()\n\
    \        var minSumIterator6 = numsSetIterator.next()\n        var minSumIterator7\
    \ = numsSetIterator.next()\n        var minSumIterator8 = numsSetIterator.next()\n\
    \        var minSumIterator9 = numsSetIterator.next()\n        var minSumIterator10\
    \ = numsSetIterator.next()\n        var minSumIterator11 = numsSetIterator.next()\n\
    \        var minSumIterator12 = numsSetIterator.next()\n        var minSumIterator13\
    \ = numsSetIterator.next()\n        var minSumIterator14 = numsSetIterator.next()\n\
    \        var minSumIterator15 = numsSetIterator.next()\n        var minSumIterator16\
    \ = numsSetIterator.next()\n        var minSumIterator17 = numsSetIterator.next()\n\
    \        var minSumIterator18 = numsSetIterator.next()\n        var minSumIterator19\
    \ = numsSetIterator.next()\n        var minSumIterator20 = numsSetIterator.next()\n\
    \        var minSumIterator21 = numsSetIterator.next()\n        var minSumIterator22\
    \ = numsSetIterator.next()\n        var minSumIterator23 = numsSetIterator.next()\n\
    \        var minSumIterator24 = numsSetIterator.next()\n        var minSumIterator25\
    \ = numsSetIterator.next()\n        var minSumIterator26 = numsSetIterator.next()\n\
    \        var minSumIterator27 = numsSetIterator.next()\n        var minSumIterator28\
    \ = numsSetIterator.next()\n        var minSumIterator29 = numsSetIterator.next()\n\
    \        var minSumIterator30 = numsSetIterator.next()\n        var minSumIterator31\
    \ = numsSetIterator.next()\n        var minSumIterator32 = numsSetIterator.next()\n\
    \        var minSumIterator33 = numsSetIterator.next()\n        var minSumIterator34\
    \ = numsSetIterator.next()\n        var minSumIterator35 = numsSetIterator.next()\n\
    \        var minSumIterator36 = numsSetIterator.next()\n        var minSumIterator37\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkbjjzd4r.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpkbjjzd4r.scala:52:5 ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805735
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsCopy = nums.toList\n        val numsCopy2\
    \ = numsCopy.sortWith(_ < _)\n        val numsCopy3 = numsCopy2.foldLeft(0)((sum,\
    \ num) => sum + num)\n        val numsCopy4 = numsCopy3.foldLeft((numsCopy3.head))((sum,\
    \ num) => sum + num)\n        val numsCopy5 = numsCopy4.foldLeft((numsCopy4.head))((sum,\
    \ num) => sum + num)\n        val numsCopy6 = numsCopy5.foldLeft((numsCopy5.head))((sum,\
    \ num) => sum + num)\n        val numsCopy7 = numsCopy6.foldLeft((numsCopy6.head))((sum,\
    \ num) => sum + num)\n        val numsCopy8 = numsCopy7.foldLeft((numsCopy7.head))((sum,\
    \ num) => sum + num)\n        val numsCopy9 = numsCopy8.foldLeft((numsCopy8.head))((sum,\
    \ num) => sum + num)\n        val numsCopy10 = numsCopy9.foldLeft((numsCopy9.head))((sum,\
    \ num) => sum + num)\n        val numsCopy11 = numsCopy10.foldLeft((numsCopy10.head))((sum,\
    \ num) => sum + num)\n        val numsCopy12 = numsCopy11.foldLeft((numsCopy11.head))((sum,\
    \ num) => sum + num)\n        val numsCopy13 = numsCopy12.foldLeft((numsCopy12.head))((sum,\
    \ num) => sum + num)\n        val numsCopy14 = numsCopy13.foldLeft((numsCopy13.head))((sum,\
    \ num) => sum + num)\n        val numsCopy15 = numsCopy14.foldLeft((numsCopy14.head))((sum,\
    \ num) => sum + num)\n        val numsCopy16 = numsCopy15.foldLeft((numsCopy15.head))((sum,\
    \ num) => sum + num)\n        val numsCopy17 = numsCopy16.foldLeft((numsCopy16.head))((sum,\
    \ num) => sum + num)\n        val numsCopy18 = numsCopy17.foldLeft((numsCopy17.head))((sum,\
    \ num) => sum + num)\n        val numsCopy19 = numsCopy18.foldLeft((numsCopy18.head))((sum,\
    \ num) => sum + num)\n        val numsCopy\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5cfoslzg.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp5cfoslzg.scala:12:60 --------------------\e[0m\e[0m\n\e[31m12 |\e[0m\
    \        \e[33mval\e[0m \e[36mnumsCopy3\e[0m = numsCopy2.foldLeft(\e[31m0\e[0m)((\e\
    [36msum\e[0m, \e[36mnum\e[0m) => sum + num)\n\e[31m\e[31m   |\e[0m           \
    \                                                 ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                                          Found:    Long\n\e\
    [31m   |\e[0m                                                          Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5cfoslzg.scala:13:34\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mnumsCopy4\e[0m = numsCopy3.foldLeft((numsCopy3.head))((\e[36msum\e[0m, \e\
    [36mnum\e[0m) => sum + num)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        value foldLeft is not a member of\
    \ Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5cfoslzg.scala:13:54 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnumsCopy4\e[0m = numsCopy3.foldLeft((numsCopy3.head))((\e\
    [36msum\e[0m, \e[36mnum\e[0m) => sum + num)\n\e[31m\e[31m   |\e[0m           \
    \                                 ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                                value head is not a member of Int\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp5cfoslzg.scala:30:5 ---------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n5 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659805736
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSetSize\
    \ = numsSet.size\n        val numsSetIterator = numsSet.iterator\n        val\
    \ numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n \
    \       val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = num\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgcd2jfyu.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgcd2jfyu.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorIterator is\
    \ already defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpgcd2jfyu.scala:26:78 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgcd2jfyu.scala:"
  stdout: ''
  timestamp: 1659805626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSetSize\
    \ = numsSet.size\n        val numsSetIterator = numsSet.iterator\n        val\
    \ numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n \
    \       val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n   \
    \     val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIterator\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp856934ku.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp856934ku.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorIterator is\
    \ already defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmp856934ku.scala:26:78 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp856934ku.scala:"
  stdout: ''
  timestamp: 1659805626
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsSet = nums.toSet\n        val numsSetIterator\
    \ = numsSet.iterator\n        var min = Long.MaxValue\n        var sum = 0L\n\
    \        var i = 0\n        while (i < numsSet.size) {\n            val curr =\
    \ numsSetIterator.next()\n            sum += curr\n            val newSum = sum\n\
    \            if (newSum < min) {\n                min = newSum\n            }\n\
    \            i += 1\n        }\n        min\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi3for7ss.scala:27)\n\tat Problem.main(tmpi3for7ss.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805737
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val numsCopy = nums.toList\n        val minSum\
    \ = numsCopy.foldLeft(numsCopy.head) { (sum, num) =>\n            if (numsCopy.contains(sum\
    \ + num)) sum + num\n            else sum\n        }\n        minSum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpucl9agh6.scala:18)\n\tat Problem.main(tmpucl9agh6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805737
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums\
    \ : List[Long]) : Long = {\n        val n = nums.length\n        val sum = mutable.ArrayBuffer.empty[Long]\n\
    \        val minSum = math.Long.MinValue\n        val minSumIndex = math.Long.MinValue\n\
    \        val minSumIndex2 = math.Long.MinValue\n        val minSumIndex3 = math.Long.MinValue\n\
    \        val minSumIndex4 = math.Long.MinValue\n        val minSumIndex5 = math.Long.MinValue\n\
    \        val minSumIndex6 = math.Long.MinValue\n        val minSumIndex7 = math.Long.MinValue\n\
    \        val minSumIndex8 = math.Long.MinValue\n        val minSumIndex9 = math.Long.MinValue\n\
    \        val minSumIndex10 = math.Long.MinValue\n        val minSumIndex11 = math.Long.MinValue\n\
    \        val minSumIndex12 = math.Long.MinValue\n        val minSumIndex13 = math.Long.MinValue\n\
    \        val minSumIndex14 = math.Long.MinValue\n        val minSumIndex15 = math.Long.MinValue\n\
    \        val minSumIndex16 = math.Long.MinValue\n        val minSumIndex17 = math.Long.MinValue\n\
    \        val minSumIndex18 = math.Long.MinValue\n        val minSumIndex19 = math.Long.MinValue\n\
    \        val minSumIndex20 = math.Long.MinValue\n        val minSumIndex21 = math.Long.MinValue\n\
    \        val minSumIndex22 = math.Long.MinValue\n        val minSumIndex23 = math.Long.MinValue\n\
    \        val minSumIndex24 = math.Long.MinValue\n        val minSumIndex25 = math.Long.MinValue\n\
    \        val minSumIndex26 = math.Long.MinValue\n        val minSumIndex27 = math.Long.MinValue\n\
    \        val minSumIndex28 = math.Long.MinValue\n        val minSumIndex29 = math.Long.MinValue\n\
    \        val minSumIndex30 = math.Long.MinValue\n        val minSumIndex31 = math.Long.MinValue\n\
    \        val minSumIndex32 = math.Long.MinValue\n        val minSumIndex33 = math.Long.MinValue\n\
    \        val minSumIndex34 = math.Long.MinValue\n        val minSumIndex35 = math.Long.MinValue\n\
    \        val minSumIndex36 = math.Long.MinValue\n        val minSumIndex37 = math.Long.MinValue\n\
    \        val minSumIndex38 = math.Long.MinValue\n        val \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp9efi2b2y.scala:51:11 ---------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp9efi2b2y.scala:11:18 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36msum\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp9efi2b2y.scala:12:26 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mminSum\e[0m = math.Long.MinValue\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                 value Long is not a member of math\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp9efi2b2y.scala:13:31 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36mminSumIndex\e[0m = math.Long.MinValue\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                          value Long is not a member of math\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp9efi2b2y.scala:14:32 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mminSumIndex2\e[0m = math.Long.MinValue\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                           value Long is not a member of math\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp9efi2b2y.scala:15:32 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mminSumIndex3\e[0m = math.Long.MinValue\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                           value Long is not a member of math\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp9efi2b2y.scala:16:32 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mminSumIndex4\e[0m ="
  stdout: ''
  timestamp: 1659805738
