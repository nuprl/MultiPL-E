name: HumanEval_106_f
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Implement the function f that takes n as a parameter,\n    // and returns\
  \ a list of size n, such that the value of the element at index i is the factorial\
  \ of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    //\
  \ i starts from 1.\n    // the factorial of i is the multiplication of the numbers\
  \ from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // f(5) == [1, 2, 6, 24,\
  \ 15]\n    def f(n : Long) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
  \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
  \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n \
  \   assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
  \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
completions: ["        val factorials = mutable.ListBuffer[Long]()\n        factorials\
    \ += 1\n        factorials += factorials.head * factorials.tail.head\n       \
    \ factorials += factorials.head * factorials.tail.tail.head\n        factorials\
    \ += factorials.head * factorials.tail.tail.tail.head\n        factorials += factorials.head\
    \ * factorials.tail.tail.tail.tail.head\n        factorials += factorials.head\
    \ * factorials.tail.tail.tail.tail.tail.head\n        factorials += factorials.head\
    \ * factorials.tail.tail.tail.tail.tail.tail.tail.head\n        factorials +=\
    \ factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.",
  "        val factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n\
    \        factorials += factorials.last * 2\n        factorials += factorials.last\
    \ * factorials.last * 3\n        factorials += factorials.last * factorials.last\
    \ * factorials.last * 4\n        factorials += factorials.last * factorials.last\
    \ * factorials.last * factorials.last * 5\n        factorials += factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * 6\n\
    \        factorials += factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * 7\n        factorials\
    \ += factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * 8\n\
    \        factorials += factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * 9\n        factorials\
    \ += factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factori", "        val factorials = mutable.ArrayBuffer.empty[Long]\n    \
    \    for (i <- 1 to n) {\n            if (i % 2 == 0) {\n                factorials\
    \ += i\n            } else {\n                factorials += factorials.sum + i\n\
    \            }\n        }\n        factorials.toList", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        var factorial = 1\n        var sum = 1\n\
    \        var i = 2\n        while (i <= n) {\n            if (i % 2 == 0) {\n\
    \                factorial *= i\n                factorials += factorial\n   \
    \         } else {\n                sum += i\n                factorials += sum\n\
    \            }\n            i += 1\n        }\n        factorials", "        val\
    \ factorials = mutable.ArrayBuffer.empty[Long]\n        for(i <- 1 to n) {\n \
    \           if(i%2 == 0) {\n                factorials += i\n            } else\
    \ {\n                factorials += (i * (i + 1))\n            }\n        }\n \
    \       factorials.toList", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        var sum = 0L\n        for (i <- 1 to n) {\n            if (i % 2 == 0)\
    \ {\n                factorials += i\n                sum += i\n            }\
    \ else {\n                factorials += (factorials.last * i)\n              \
    \  sum += factorials.last\n            }\n        }\n        factorials.toList",
  "        val factorials = mutable.ArrayBuffer.empty[Long]\n        for(i <- 1 to\
    \ n){\n            if(i%2 == 0){\n                factorials += i\n          \
    \  }else{\n                factorials += factorials.sum + i\n            }\n \
    \       }\n        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val sumOfNumbers = mutable.ListBuffer[Long]()\n        val factorial\
    \ = 1\n        for(i <- 1 to n) {\n            if(i%2 == 0) {\n              \
    \  factorial *= i\n                factorials += factorial\n            } else\
    \ {\n                sumOfNumbers += i\n            }\n        }\n        factorials.toList",
  "        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials +=\
    \ 1\n        factorials += factorials.last * 2\n        factorials += factorials.last\
    \ * factorials.last\n        factorials.take(n)", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        var i = 1L\n        while (i <= n) {\n        \
    \    if (i % 2 == 0) {\n                factorials += i\n                sum +=\
    \ i\n            } else {\n                factorials += sum\n               \
    \ sum += i\n            }\n            i += 1\n        }\n        factorials.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n\
    \        factorials += 2\n        factorials += 3\n        factorials += 4\n \
    \       factorials += 5\n        factorials += 6\n        factorials += 7\n  \
    \      factorials += 8\n        factorials += 9\n        factorials += 10\n  \
    \      factorials += 11\n        factorials += 12\n        factorials += 13\n\
    \        factorials += 14\n        factorials += 15\n        factorials += 16\n\
    \        factorials += 17\n        factorials += 18\n        factorials += 19\n\
    \        factorials += 20\n        factorials += 21\n        factorials += 22\n\
    \        factorials += 23\n        factorials += 24\n        factorials += 25\n\
    \        factorials += 26\n        factorials += 27\n        factorials += 28\n\
    \        factorials += 29\n        factorials += 30\n        factorials += 31\n\
    \        factorials += 32\n        factorials += 33\n        factorials += 34\n\
    \        factorials += 35\n        factorials += 36\n        factorials += 37\n\
    \        factorials += 38\n        factorials += 39\n        factorials += 40\n\
    \        factorials += 41\n        factorials += 42\n        factorials += 43\n\
    \        factorials += 44\n        factorials += 45\n        factorials += 46\n\
    \        factorials += 47\n        factorials += 48\n        factorials += 49\n\
    \        factorials += 50\n        factorials += 51\n        factorials += 52\n\
    \        factorials += 53\n        factorials += 54\n        factorials += 55\n\
    \        factorials += 56\n        factorials += 57\n        factorials += 58\n\
    \        factorials += 59\n        factorials += 60\n        factorials += 61\n\
    \        factorials += 62\n        factorials += 63\n        factorials += 64\n\
    \        factorials += 65\n        factorials += 66\n        factorials += 67\n\
    \        factorials += 68\n        factorials += 69\n        factorials += 70\n\
    \        factorials += 71\n        factorials += 72\n        factorials += 73\n\
    \        factorials += 74\n        factorials += 75\n        factorials += 76\n\
    \        factorials += 77\n        factorials += 78\n        factorials += 79\n\
    \        factorials += 80\n        factorials += 81\n        factorials += 82\n\
    \        factorials += 83\n", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        for(i <- 1 to n) {\n            factorials += factorial\n\
    \            sums += sum\n            factorial *= i\n            sum += i\n \
    \       }\n        factorials", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        for(i <- 1 to n){\n            if(i%2 == 0){\n \
    \               factorials += factorial\n                sums += sum\n       \
    \     }\n            else{\n                factorial *= i\n                sum\
    \ += i\n            }\n        }\n        factorials ++= factorial\n        sums\
    \ ++= sum\n        factorials", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        for(i <- 1 to n) {\n            factorials += factorial\n\
    \            sums += sum\n            factorial *= i\n            sum += i\n \
    \       }\n        factorials", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials += 1\n        factorials += factorials.head * factorials.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.head\n        factorials\
    \ += factorials.head * factorials.tail.tail.tail.head\n        factorials += factorials.head\
    \ * factorials.tail.tail.tail.tail.head\n        factorials += factorials.head\
    \ * factorials.tail.tail.tail.tail.tail.head\n        factorials += factorials.head\
    \ * factorials.tail.tail.tail.tail.tail.tail.tail.head\n        factorials +=\
    \ factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.",
  "        val factorials = mutable.ArrayBuffer.empty[Long]\n        var sum = 0L\n\
    \        for (i <- 1 to n) {\n            if (i % 2 == 0) {\n                factorials\
    \ += i\n            } else {\n                sum += i\n            }\n      \
    \  }\n        factorials.toList", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val sum = 1\n   \
    \     val i = 2\n        while (i <= n) {\n            if (i % 2 == 0) {\n   \
    \             factorials += i\n                sums += sum\n            } else\
    \ {\n                sum += i\n            }\n            i += 1\n        }\n\
    \        factorials.toList", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        factorials += 1\n        factorials += factorials(0) * factorials(1)\n\
    \        factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factori", "        val\
    \ factorials = mutable.ArrayBuffer.empty[Long]\n        var sum = 0L\n       \
    \ var i = 1L\n        while (i <= n) {\n            if (i % 2 == 0) {\n      \
    \          factorials += i\n                sum += i\n            } else {\n \
    \               factorials += sum\n                sum += i\n            }\n \
    \           i += 1\n        }\n        factorials.toList", "        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        val evens = mutable.ArrayBuffer.empty[Long]\n        val odds = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenFactorials = mutable.ArrayBuffer.empty[Long]\n        val oddFactorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvens = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumOdds = mutable.ArrayBuffer.empty[Long]\n        val evenSums =\
    \ mutable.ArrayBuffer.empty[Long]\n        val oddSums = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumEvens = mutable.ArrayBuffer.empty[Long]\n        val evenSumOdds\
    \ = mutable.ArrayBuffer.empty[Long]\n        val oddSumEvens = mutable.ArrayBuffer.empty[Long]\n\
    \        val oddSumOdds = mutable.ArrayBuffer.empty[Long]\n        val evenSumEvenOdds\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumOddEvens = mutable.ArrayBuffer.empty[Long]\n\
    \        val oddSumEvenOdds = mutable.ArrayBuffer.empty[Long]\n        val oddSumOddEvens\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumEvenOddEvens = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumOddEvenOdds = mutable.ArrayBuffer.empty[Long]\n        val\
    \ oddSumEvenOddEvens = mutable.ArrayBuffer.empty[Long]\n        val oddSumOddEvenOdds\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumEvenOddEvenOdds = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumOddEvenOddEvens = mutable.ArrayBuffer.empty[Long]\n      \
    \  val oddSumEvenOddEvenOdds = mutable.ArrayBuffer.empty[Long]\n        val oddSumOddEvenOddEvens\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumEvenOddEvenOddEvens =\
    \ mutable.ArrayBuffer.empty[Long]\n        val evenSumOddEvenOddEvenOdds = mutable.ArrayBuffer.empty[Long]\n\
    \        val oddSumEvenOddEvenOddEvenOdds = mutable.ArrayBuffer.empty[Long]\n\
    \        val oddSumOddEvenOddEvenOddEvens = mutable.ArrayBuffer.empty[", "   \
    \     val factorials = mutable.ListBuffer[Long]()\n        var sum = 0L\n    \
    \    var i = 1L\n        while (i <= n) {\n            if (i % 2 == 0) {\n   \
    \             factorials += i\n                sum += i\n            } else {\n\
    \                factorials += sum\n                sum += i\n            }\n\
    \            i += 1\n        }\n        factorials.toList", "        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials ++= 1 to n\n        factorials.filter(_\
    \ % 2 == 0).map(_ * _)", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        for(i <- 1 to n){\n            if(i%2 == 0){\n \
    \               factorials += factorial\n                sums += sum\n       \
    \     }\n            else{\n                factorial = factorial*i\n        \
    \        sum = sum + i\n            }\n        }\n        factorials += factorial\n\
    \        sums += sum\n        factorials", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        factorials += 1\n        factorials += factorials.last * 2\n        factorials\
    \ += factorials.last * factorials.last\n        factorials += factorials.last\
    \ * factorials.last * factorials.last\n        factorials += factorials.last *\
    \ factorials.last * factorials.last * factorials.last\n        factorials += factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last\n  \
    \      factorials += factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last\n  \
    \      factorials += factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last\n  \
    \      factorials += factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last", "        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        for (i <- 1 to n) {\n           \
    \ if (i % 2 == 0) {\n                factorials += i\n            } else {\n \
    \               factorials += factorials.sum + i\n            }\n        }\n \
    \       factorials.toList", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val evens = mutable.ArrayBuffer.empty[Long]\n\
    \        val odds = mutable.ArrayBuffer.empty[Long]\n        val evenFactorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val oddFactorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSums = mutable.ArrayBuffer.empty[Long]\n        val oddSums =\
    \ mutable.ArrayBuffer.empty[Long]\n        val evenSumsSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val oddSumsSum = mutable.ArrayBuffer.empty[Long]\n        val evenSumsSumEven\
    \ = mutable.ArrayBuffer.empty[Long]\n        val oddSumsSumEven = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumsSumOdd = mutable.ArrayBuffer.empty[Long]\n        val oddSumsSumOdd\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsSumEvenOdd = mutable.ArrayBuffer.empty[Long]\n\
    \        val oddSumsSumEvenOdd = mutable.ArrayBuffer.empty[Long]\n        val\
    \ evenSumsSumEvenOddOdd = mutable.ArrayBuffer.empty[Long]\n        val oddSumsSumEvenOddOdd\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsSumEvenOddOddOdd = mutable.ArrayBuffer.empty[Long]\n\
    \        val oddSumsSumEvenOddOddOdd = mutable.ArrayBuffer.empty[Long]\n     \
    \   val evenSumsSumEvenOddOddOddOdd = mutable.ArrayBuffer.empty[Long]\n      \
    \  val oddSumsSumEvenOddOddOddOdd = mutable.ArrayBuffer.empty[Long]\n        val\
    \ evenSumsSumEvenOddOddOddOddOdd = mutable.ArrayBuffer.empty[Long]\n        val\
    \ oddSumsSumEvenOddOddOddOddOdd = mutable.ArrayBuffer.empty[Long]\n        val\
    \ evenSumsSumEvenOddOddOddOddOddOdd = mutable.ArrayBuffer.empty[Long]\n      \
    \  val oddSumsSumEvenOddOddOddOddOddOdd = mutable.ArrayBuffer.empty[Long]\n  \
    \      val evenSumsSumEvenOdd", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- 1 to n) {\n            if (i % 2 == 0) {\n                factorials\
    \ += factorial(i) * i\n            } else {\n                factorials += i\n\
    \            }\n        }\n        factorials.toList", "        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        for (i <- 1 to n) {\n           \
    \ if (i % 2 == 0) {\n                factorials += i\n            } else {\n \
    \               factorials += factorials.sum + i\n            }\n        }\n \
    \       factorials.toList", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val evens = mutable.ArrayBuffer.empty[Long]\n\
    \        val odds = mutable.ArrayBuffer.empty[Long]\n        val evenFactorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val oddFactorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSums = mutable.ArrayBuffer.empty[Long]\n        val oddSums =\
    \ mutable.ArrayBuffer.empty[Long]\n        val evenSumsSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val oddSumsSum = mutable.ArrayBuffer.empty[Long]\n        val evenFactorialsSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val oddFactorialsSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumsSumSum = mutable.ArrayBuffer.empty[Long]\n        val oddSumsSumSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenFactorialsSumSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val oddFactorialsSumSum = mutable.ArrayBuffer.empty[Long]\n        val\
    \ evenSumsSumSumSum = mutable.ArrayBuffer.empty[Long]\n        val oddSumsSumSumSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenFactorialsSumSumSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val oddFactorialsSumSumSum = mutable.ArrayBuffer.empty[Long]\n      \
    \  val evenSumsSumSumSumSum = mutable.ArrayBuffer.empty[Long]\n        val oddSumsSumSumSumSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenFactorialsSumSumSumSum =\
    \ mutable.ArrayBuffer.empty[Long]\n        val oddFactorialsSumSumSumSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumsSumSumSumSumSum = mutable.ArrayBuffer.empty[Long]\n     \
    \   val oddSumsSumSumSumSumSum = mutable.ArrayBuffer.empty[Long]\n        val\
    \ evenFactorialsSumSumSumSumSum = mutable.ArrayBuffer.empty[Long]\n        val\
    \ oddFactorialsSumSumSumSumSum = mutable.ArrayBuffer.empty[Long]\n        val\
    \ evenSumsSumSumSumSumSumSum = mutable.ArrayBuffer.empty[Long]\n        val oddSumsSumSumSum",
  "        val factorials = mutable.ArrayBuffer.empty[Long]\n        val numbers =\
    \ mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val number\
    \ = 0\n        for (i <- 1 to n) {\n            if (i % 2 == 0) {\n          \
    \      factorial *= i\n                factorials += factorial\n            }\
    \ else {\n                number += 1\n                numbers += number\n   \
    \         }\n        }\n        factorials", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        for(i <- 1 to n) {\n            if(i%2 == 0) {\n                factorials\
    \ += i\n            } else {\n                factorials += (i*(i+1))\n      \
    \      }\n        }\n        factorials.toList", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sum = 0L\n        for(i <- 1 to n) {\n            val factorial =\
    \ factorials.foldLeft(1L)((acc, x) => acc * x)\n            factorials += factorial\n\
    \            sum += factorial\n        }\n        factorials.toList", "      \
    \  val factorials = mutable.ListBuffer[Long]()\n        val sums = mutable.ListBuffer[Long]()\n\
    \        val i = 1 // i is always 1\n        factorials += i\n        sums +=\
    \ i\n        while (i <= n) {\n            if (i % 2 == 0) {\n               \
    \ factorials += i\n                sums += i\n            }\n            else\
    \ {\n                factorials += i + 1\n                sums += i + 1\n    \
    \        }\n            i += 1\n        }\n        factorials.toList", "     \
    \   val factorials = mutable.ArrayBuffer.empty[Long]\n        var i = 1\n    \
    \    while (i <= n) {\n            if (i % 2 == 0) {\n                factorials\
    \ += i\n            } else {\n                factorials += factorials.sum + i\n\
    \            }\n            i += 1\n        }\n        factorials", "        val\
    \ factorials = mutable.ArrayBuffer.empty[Long]\n        val numbers = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorial = 1\n        val number = 1\n        val sum = 0\n    \
    \    val even = 1\n        val odd = 1\n        val evenFactorial = 1\n      \
    \  val oddFactorial = 1\n        val evenSum = 0\n        val oddSum = 0\n   \
    \     val evenSumFactorial = 1\n        val oddSumFactorial = 1\n        val evenSumNumber\
    \ = 0\n        val oddSumNumber = 0\n        val evenSumNumberFactorial = 1\n\
    \        val oddSumNumberFactorial = 1\n        val evenSumNumberNumber = 0\n\
    \        val oddSumNumberNumber = 0\n        val evenSumNumberNumberFactorial\
    \ = 1\n        val oddSumNumberNumberFactorial = 1\n        val evenSumNumberNumberNumber\
    \ = 0\n        val oddSumNumberNumberNumber = 0\n        val evenSumNumberNumberNumberFactorial\
    \ = 1\n        val oddSumNumberNumberNumberFactorial = 1\n        val evenSumNumberNumberNumberNumber\
    \ = 0\n        val oddSumNumberNumberNumberNumber = 0\n        val evenSumNumberNumberNumberNumberFactorial\
    \ = 1\n        val oddSumNumberNumberNumberFactorial = 1\n        val evenSumNumberNumberNumberNumberNumber\
    \ = 0\n        val oddSumNumberNumberNumberNumber = 0\n        val evenSumNumberNumberNumberNumberNumberFactorial\
    \ = 1\n        val oddSumNumberNumberNumberNumberFactorial = 1\n        val evenSumNumberNumberNumberNumberNumberNumber\
    \ = 0\n        val oddSumNumberNumberNumberNumberNumber = 0\n        val evenSumNumberNumberNumberNumberNumberNumberFactorial\
    \ = 1\n        val oddSumNumberNumberNumberNumberFactorial = 1\n        val evenSumNumberNumberNumberNumberNumberNumber\
    \ = 0\n        val oddSumNumberNumberNumberNumberNumber = 0\n        val evenSumNumberNumberNumberNumberNumberNumberFactorial\
    \ = 1\n        val oddSumNumberNumberNumberNumberFactorial = 1\n        val evenSumNumberNumberNumberNumberNumberNumber\
    \ = 0\n        val oddSumNumberNumberNumberNumberNumber = 0\n        val evenSumNumberNumberNumberNumberNumberNumberFactorial\
    \ = 1\n        val oddSumNumberNumberNumberNumberFactorial = 1\n        val evenSumNumberNumberNumberNumberNumberNumber\
    \ = 0\n        val oddSumNumberNumberNumberNumberNumber = 0\n        val evenSumNumberNumberNumberNumberNumberNumberFactorial\
    \ = 1\n        val oddSumNumberNumberNumberNumberFactorial = 1\n        ", " \
    \       val factorials = mutable.ArrayBuffer.empty[Long]\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        val evens = mutable.ArrayBuffer.empty[Long]\n        val odds = mutable.ArrayBuffer.empty[Long]\n\
    \        val i = 1 // i starts from 1\n        while (i <= n) {\n            if\
    \ (i % 2 == 0) {\n                evens += i\n            } else {\n         \
    \       odds += i\n            }\n            factorials += i\n            sums\
    \ += i\n            i += 1\n        }\n        evens.toList", "        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials ++= 1 to n\n        factorials.filter(_\
    \ % 2 == 0).map(x => x * factorials.indexOf(x)).take(n)", "        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += factorials.last * 2\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last * factorials.last\n \
    \       factorials.take(n)", "        val factorials = mutable.ArrayBuffer(1L)\n\
    \        for (i <- 1 to n) {\n            if (i % 2 == 0) {\n                factorials\
    \ += factorials.head * i\n            } else {\n                factorials +=\
    \ i\n            }\n        }\n        factorials.toList", "        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorial = 1\n        val sum = 1\n        for(i <- 1 to n) {\n\
    \            factorials += factorial\n            sums += sum\n            factorial\
    \ *= i\n            sum += i\n        }\n        factorials", "        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val numbers = mutable.ArrayBuffer.empty[Long]\n\
    \        val sum = 0L\n        val even = 1L\n        val odd = 1L\n        val\
    \ i = 2L\n        while (i <= n) {\n            if (i % 2 == 0) {\n          \
    \      factorials += even\n                numbers += 1L\n                sum\
    \ += even\n            } else {\n                factorials += odd\n         \
    \       numbers += i\n                sum += odd\n            }\n            i\
    \ += 1\n        }\n        factorials.toList", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val numbers = mutable.ArrayBuffer.empty[Long]\n        val sum = 0\n\
    \        val even = 1\n        val odd = 1\n        val i = 2\n        while (i\
    \ <= n) {\n            if (i % 2 == 0) {\n                factorials += even\n\
    \                numbers += i\n                sum += even\n            } else\
    \ {\n                factorials += odd\n                numbers += i\n       \
    \         sum += odd\n            }\n            i += 1\n        }\n        factorials.toList",
  "        val factorials = mutable.ArrayBuffer.empty[Long]\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorial = 1\n        val sum = 1\n        for(i <- 1 to n){\n \
    \           if(i % 2 == 0){\n                factorials += factorial\n       \
    \         sums += sum\n            }\n            factorial *= i\n           \
    \ sum += i\n        }\n        factorials ++= factorial\n        sums ++= sum\n\
    \        factorials.toList", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        for(i <- 1 to n){\n            if(i%2 == 0){\n                factorials\
    \ += i\n            }\n            else{\n                factorials += factorials.sum\
    \ + i\n            }\n        }\n        factorials.toList", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        factorials += 1\n        factorials +=\
    \ factorials.head * factorials.tail.head\n        factorials += factorials.head\
    \ * factorials.tail.tail.head\n        factorials += factorials.head * factorials.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.",
  "        val factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n\
    \        factorials += factorials.head * factorials.tail.head\n        factorials\
    \ += factorials.head * factorials.tail.tail.head\n        factorials += factorials.head\
    \ * factorials.tail.tail.tail.head\n        factorials += factorials.head * factorials.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.",
  "        val factorials = mutable.ListBuffer[Long]()\n        for (i <- 1 to n)\
    \ {\n            if (i % 2 == 0) {\n                factorials += i * factorials.last\n\
    \            } else {\n                factorials += factorials.last + i\n   \
    \         }\n        }\n        factorials.toList", "        val factorials =\
    \ mutable.ArrayBuffer.empty[Long]\n        val numbers = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorial = 1\n        val number = 1\n        val sum = 0\n    \
    \    val even = 1\n        val odd = 1\n        val evenFactorial = 1\n      \
    \  val oddFactorial = 1\n        val evenSum = 1\n        val oddSum = 1\n   \
    \     val evenSumFactorial = 1\n        val oddSumFactorial = 1\n        val evenSumSum\
    \ = 1\n        val oddSumSum = 1\n        val evenSumSumFactorial = 1\n      \
    \  val oddSumSumFactorial = 1\n        val evenSumSumSum = 1\n        val oddSumSumSum\
    \ = 1\n        val evenSumSumSumFactorial = 1\n        val oddSumSumSumFactorial\
    \ = 1\n        val evenSumSumSumSum = 1\n        val oddSumSumSumSum = 1\n   \
    \     val evenSumSumSumSumFactorial = 1\n        val oddSumSumSumSumFactorial\
    \ = 1\n        val evenSumSumSumSumSum = 1\n        val oddSumSumSumSumSum = 1\n\
    \        val evenSumSumSumSumSumFactorial = 1\n        val oddSumSumSumSumSumFactorial\
    \ = 1\n        val evenSumSumSumSumSumSum = 1\n        val oddSumSumSumSumSumSum\
    \ = 1\n        val evenSumSumSumSumSumSumFactorial = 1\n        val oddSumSumSumSumSumSumFactorial\
    \ = 1\n        val evenSumSumSumSumSumSumSum = 1\n        val oddSumSumSumSumSumSumSum\
    \ = 1\n        val evenSumSumSumSumSumSumFactorial = 1\n        val oddSumSumSumSumSumSumFactorial\
    \ = 1\n        val evenSumSumSumSumSumSumSum = 1\n        val oddSumSumSumSumSumSumSum\
    \ = 1\n        val evenSumSumSumSumSumSumFactorial = 1\n        val oddSumSumSumSumSumSumFactorial\
    \ = 1\n        val evenSumSumSumSumSumSumSum = 1\n        val oddSumSumSumSumSumSumSumSum\
    \ = 1\n        val evenSumSumSumSumSumSumSumFactorial = 1\n        val oddSumSumSumSumSumSumFactorial\
    \ = 1\n        val evenSumSumSumSumSumSumSum = 1\n        val oddSumSumSumSumSumSumSum\
    \ = 1\n        val evenSumSumSumSumSumSumSumFactorial = 1\n        val oddSumSum",
  "        val factorials = mutable.ArrayBuffer.empty[Long]\n        for (i <- 1 to\
    \ n) {\n            if (i % 2 == 0) {\n                factorials += i\n     \
    \       } else {\n                factorials += factorials.head * i\n        \
    \    }\n        }\n        factorials.toList", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        factorials += 1\n        factorials += factorials.last * 2\n        factorials\
    \ += factorials.last * factorials.last\n        factorials += factorials.last\
    \ * factorials.last * factorials.last\n        factorials += factorials.last *\
    \ factorials.last * factorials.last * factorials.last\n        factorials += factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last\n  \
    \      factorials += factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last\n  \
    \      factorials += factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last\n  \
    \      factorials += factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factori", "        val factorials = mutable.ArrayBuffer.empty[Long]\n    \
    \    var sum = 0L\n        for(i <- 1 to n) {\n            sum += i\n        \
    \    factorials += sum\n        }\n        factorials", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        factorials += 1\n        factorials +=\
    \ n * factorials.last\n        factorials.reverse", "        val factorials =\
    \ mutable.ListBuffer[Long]()\n        factorials ++= 1 to n\n        factorials\
    \ ++= factorials.map(x => x * x)\n        factorials.toList", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        val factorial = 1\n        for(i <- 1\
    \ to n){\n            factorials += factorial\n            factorial *= i\n  \
    \      }\n        factorials", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        factorials += 1\n        factorials += factorials.last * 2\n        factorials\
    \ += factorials.last * factorials.last\n        factorials += factorials.last\
    \ * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factori", "        val factorials = mutable.ListBuffer[Long]()\n        val\
    \ numbers = mutable.ListBuffer[Long]()\n        val factorial = 1\n        val\
    \ number = 1\n        val factorials = mutable.ListBuffer[Long]()\n        val\
    \ numbers = mutable.ListBuffer[Long]()\n        val factorial = 1\n        val\
    \ number = 1\n        val factorials = mutable.ListBuffer[Long]()\n        val\
    \ numbers = mutable.ListBuffer[Long]()\n        val factorial = 1\n        val\
    \ number = 1\n        val factorials = mutable.ListBuffer[Long]()\n        val\
    \ numbers = mutable.ListBuffer[Long]()\n        val factorial = 1\n        val\
    \ number = 1\n        val factorials = mutable.ListBuffer[Long]()\n        val\
    \ numbers = mutable.ListBuffer[Long]()\n        val factorial = 1\n        val\
    \ number = 1\n        val factorials = mutable.ListBuffer[Long]()\n        val\
    \ numbers = mutable.ListBuffer[Long]()\n        val factorial = 1\n        val\
    \ number = 1\n        val factorials = mutable.ListBuffer[Long]()\n        val\
    \ numbers = mutable.ListBuffer[Long]()\n        val factorial = 1\n        val\
    \ number = 1\n        val factorials = mutable.ListBuffer[Long]()\n        val\
    \ numbers = mutable.ListBuffer[Long]()\n        val factorial = 1\n        val\
    \ number = 1\n        val factorials = mutable.ListBuffer[Long]()\n        val\
    \ numbers = mutable.ListBuffer[Long]()\n        val factorial = 1\n        val\
    \ number = 1\n        val factorials = mutable.ListBuffer[Long]()\n        val\
    \ numbers = mutable.ListBuffer[Long]()\n        val factorial = 1\n        val\
    \ number = 1\n        val factorials = mutable.ListBuffer[Long]()\n        val\
    \ numbers = mutable.ListBuffer[Long]()\n        val factorial = 1\n        val\
    \ number = 1\n        val factorials = mutable.ListBuffer[Long]()\n        val\
    \ numbers = mutable.ListBuffer[Long]()\n        val factorial = 1\n        val\
    \ number = 1\n        val factorials = mutable.ListBuffer[Long]()\n        val\
    \ numbers = mutable.ListBuffer[Long]()\n        val factorial = 1\n        val\
    \ number = 1\n        val factorials = mutable.ListBuffer[Long]()\n        val\
    \ numbers = ", "        val factorials = mutable.ArrayBuffer.empty[Long]\n   \
    \     for (i <- 1 to n) {\n            if (i % 2 == 0) {\n                factorials\
    \ += i\n            } else {\n                factorials += factorials.head *\
    \ i\n            }\n        }\n        factorials.toList", "        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        for (i <- 1 to n) {\n           \
    \ if (i % 2 == 0) {\n                factorials += i\n            } else {\n \
    \               factorials += factorials.sum + i\n            }\n        }\n \
    \       factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        var factorial = 1\n        var i = 1\n        while(i <= n){\n      \
    \      if(i % 2 == 0){\n                factorial *= i\n                factorials\
    \ += factorial\n            }else{\n                factorials += factorial\n\
    \                factorial *= i\n            }\n            i += 1\n        }\n\
    \        factorials", "        val factorials = mutable.ListBuffer[Long]()\n \
    \       val sums = mutable.ListBuffer[Long]()\n        val i = 1 // i starts from\
    \ 1\n        while (i <= n) {\n            if (i % 2 == 0) {\n               \
    \ factorials += i\n            } else {\n                sums += i\n         \
    \   }\n            i += 1\n        }\n        factorials.toList", "        val\
    \ factorials = mutable.ArrayBuffer.empty[Long]\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        val evens = mutable.ArrayBuffer.empty[Long]\n        val odds = mutable.ArrayBuffer.empty[Long]\n\
    \        val i = 1 // i is 1 because factorials starts from 1\n        factorials\
    \ += i\n        sums += i\n        evens += i\n        odds += i\n        i <-\
    \ 1 to n\n        if (i % 2 == 0) {\n            factorials += i\n           \
    \ sums += i\n            evens += i\n            odds += i\n        }\n      \
    \  else {\n            factorials += i\n            sums += i\n            evens\
    \ += i\n            odds += i\n        }\n        factorials.toList", "      \
    \  val factorials = mutable.ListBuffer[Long]()\n        val sums = mutable.ListBuffer[Long]()\n\
    \        val factorial = 1\n        val sum = 1\n        for(i <- 1 to n) {\n\
    \            factorials += factorial\n            sums += sum\n            factorial\
    \ *= i\n            sum += i\n        }\n        factorials.toList", "       \
    \ val factorials = mutable.ArrayBuffer.empty[Long]\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorial = 1\n        val sum = 1\n        for(i <- 1 to n) {\n\
    \            if(i%2 == 0) {\n                factorials += factorial\n       \
    \         sums += sum\n            }\n            else {\n                factorial\
    \ *= i\n                sum += i\n            }\n        }\n        factorials\
    \ ++= factorial\n        sums ++= sum\n        factorials.toList", "        val\
    \ factorials = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n    \
    \    factorials += factorials.last * 2\n        factorials += factorials.last\
    \ * factorials.last\n        factorials += factorials.last * factorials.last *\
    \ factorials.last\n        factorials += factorials.last * factorials.last * factorials.last\
    \ * factorials.last\n        factorials += factorials.last * factorials.last *\
    \ factorials.last * factorials.last * factorials.last\n        factorials += factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last\n  \
    \      factorials += factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last\n        factorials += factorials.last * factorials.last *\
    \ factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last\n  \
    \      factorials += factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.",
  "        val factorials = mutable.ListBuffer[Long]()\n        var sum = 0L\n   \
    \     var i = 1L\n        while (i <= n) {\n            if (i % 2 == 0) {\n  \
    \              factorials += i\n                sum += i\n            } else {\n\
    \                factorials += sum\n                sum += i\n            }\n\
    \            i += 1\n        }\n        factorials.toList", "        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val numbers = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorial = 1\n        val number = 1\n        val factorialSum =\
    \ 0\n        val numberSum = 0\n        val factorialSumArray = mutable.ArrayBuffer.empty[Long]\n\
    \        val numberSumArray = mutable.ArrayBuffer.empty[Long]\n        val factorialSumArray\
    \ = mutable.ArrayBuffer.empty[Long]\n        val numberSumArray = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorialSumArray = mutable.ArrayBuffer.empty[Long]\n        val\
    \ numberSumArray = mutable.ArrayBuffer.empty[Long]\n        val factorialSumArray\
    \ = mutable.ArrayBuffer.empty[Long]\n        val numberSumArray = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorialSumArray = mutable.ArrayBuffer.empty[Long]\n        val\
    \ numberSumArray = mutable.ArrayBuffer.empty[Long]\n        val factorialSumArray\
    \ = mutable.ArrayBuffer.empty[Long]\n        val numberSumArray = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorialSumArray = mutable.ArrayBuffer.empty[Long]\n        val\
    \ numberSumArray = mutable.ArrayBuffer.empty[Long]\n        val factorialSumArray\
    \ = mutable.ArrayBuffer.empty[Long]\n        val numberSumArray = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorialSumArray = mutable.ArrayBuffer.empty[Long]\n        val\
    \ numberSumArray = mutable.ArrayBuffer.empty[Long]\n        val factorialSumArray\
    \ = mutable.ArrayBuffer.empty[Long]\n        val numberSumArray = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorialSumArray = mutable.ArrayBuffer.empty[Long]\n        val\
    \ numberSumArray = mutable.ArrayBuffer.empty[Long]\n        val factorialSumArray\
    \ = mutable.ArrayBuffer.empty[Long]\n        val numberSumArray = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorialSumArray = mutable.ArrayBuffer.empty[Long]\n        val\
    \ numberSumArray = mutable.ArrayBuffer.empty[Long]\n        val factorialSumArray\
    \ = mutable.ArrayBuffer.empty[Long]\n        val numberSumArray = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorialSumArray = mutable.ArrayBuffer.empty[Long]\n        val\
    \ numberSumArray = mutable.ArrayBuffer.empty", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials += 1\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factori", " \
    \       val factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n\
    \        factorials += n * factorials.last\n        factorials filter (_ % 2 ==\
    \ 0)", "        val factorials = mutable.ArrayBuffer.empty[Long]\n        val\
    \ sums = mutable.ArrayBuffer.empty[Long]\n        val evens = mutable.ArrayBuffer.empty[Long]\n\
    \        val odds = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val even = 1\n        val odd = 1\n        val evenSum\
    \ = 1\n        val oddSum = 1\n        val evenFactorial = 1\n        val oddFactorial\
    \ = 1\n        val evenSumFactorial = 1\n        val oddSumFactorial = 1\n   \
    \     val evenSumOddFactorial = 1\n        val oddSumOddFactorial = 1\n      \
    \  val evenSumEvenFactorial = 1\n        val oddSumEvenFactorial = 1\n       \
    \ val evenSumOddSumFactorial = 1\n        val oddSumOddSumFactorial = 1\n    \
    \    val evenSumEvenSumFactorial = 1\n        val oddSumEvenSumFactorial = 1\n\
    \        val evenSumOddEvenSumFactorial = 1\n        val oddSumOddEvenSumFactorial\
    \ = 1\n        val evenSumEvenEvenSumFactorial = 1\n        val oddSumEvenEvenSumFactorial\
    \ = 1\n        val evenSumOddOddSumFactorial = 1\n        val oddSumOddOddSumFactorial\
    \ = 1\n        val evenSumEvenOddSumFactorial = 1\n        val oddSumEvenOddSumFactorial\
    \ = 1\n        val evenSumEvenEvenSumFactorial = 1\n        val oddSumEvenEvenSumFactorial\
    \ = 1\n        val evenSumOddEvenSumFactorial = 1\n        val oddSumOddEvenSumFactorial\
    \ = 1\n        val evenSumEvenOddSumFactorial = 1\n        val oddSumEvenOddSumFactorial\
    \ = 1\n        val evenSumEvenEvenSumFactorial = 1\n        val oddSumEvenEvenSumFactorial\
    \ = 1\n        val evenSumOddOddSumFactorial = 1\n        val oddSumOddOddSumFactorial\
    \ = 1\n        val evenSumEvenOddSumFactorial = 1\n        val oddSumEvenOddSumFactorial\
    \ = 1\n        val evenSumEvenEvenSumFactorial = 1\n        val oddSumEvenEvenSumFactorial\
    \ = 1\n        val evenSumOddEvenSumFactorial = 1\n        val oddSumOddEvenSum",
  "        val factorials = mutable.ArrayBuffer.empty[Long]\n        val numbers =\
    \ mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val number\
    \ = 1\n        for(i <- 1 to n) {\n            if(i%2 == 0) {\n              \
    \  factorials += factorial\n                numbers += number\n            } else\
    \ {\n                factorial *= i\n                number += 1\n           \
    \ }\n        }\n        factorials ++= factorial\n        numbers ++= number\n\
    \        factorials", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        for(i <- 1 to n) {\n            factorials += factorial\n\
    \            sums += sum\n            factorial *= i\n            sum += i\n \
    \       }\n        factorials", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val sums = mutable.ListBuffer[Long]()\n        val factorial = 1\n  \
    \      val sum = 1\n        val i = 2\n        while (i <= n) {\n            if\
    \ (i % 2 == 0) {\n                factorials += factorial\n                sums\
    \ += sum\n            }\n            factorial *= i\n            sum += i\n  \
    \          i += 1\n        }\n        factorials ++= factorial\n        sums ++=\
    \ sum\n        factorials.toList", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val i = 2\n        while (i <= n) {\n          \
    \  if (i % 2 == 0) {\n                factorials += factorial\n              \
    \  sums += sum\n            }\n            else {\n                factorial *=\
    \ i\n                sum += i\n            }\n            i += 1\n        }\n\
    \        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val sums = mutable.ListBuffer[Long]()\n        val i = 1 // start from\
    \ 1\n        while (i <= n) {\n            if (i % 2 == 0) {\n               \
    \ factorials += i\n            } else {\n                sums += i\n         \
    \   }\n            i += 1\n        }\n        factorials.toList ++ sums.toList",
  "        val factorials = mutable.ArrayBuffer(1L)\n        for (i <- 1 to n) {\n\
    \            if (i % 2 == 0) {\n                factorials += factorials.head\
    \ * i\n            } else {\n                factorials += factorials.head + i\n\
    \            }\n        }\n        factorials.toList", "        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        for(i <- 1 to n) {\n            if(i%2\
    \ == 0) {\n                factorials += i\n            } else {\n           \
    \     factorials += (i * (i + 1))\n            }\n        }\n        factorials.toList",
  "        val factorials = mutable.ArrayBuffer.empty[Long]\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorial = 1\n        val sum = 1\n        val i = 2\n        while\
    \ (i <= n) {\n            if (i % 2 == 0) {\n                factorials += factorial\n\
    \                sums += sum\n            }\n            factorial *= i\n    \
    \        sum += i\n            i += 1\n        }\n        factorials ++ sums",
  "        val factorials = mutable.ArrayBuffer.empty[Long]\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        val evens = mutable.ArrayBuffer.empty[Long]\n        val odds = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorial = 1\n        val sum = 1\n        val even = 1\n      \
    \  val odd = 1\n        val i = 2\n        while (i <= n) {\n            if (i\
    \ % 2 == 0) {\n                evens += even\n                even += even\n \
    \           } else {\n                odds += odd\n                odd += odd\n\
    \            }\n            factorials += factorial\n            factorial *=\
    \ i\n            sums += sum\n            sum += i\n            i += 2\n     \
    \   }\n        evens.toList", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val numbers = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val number = 1\n        val factorialSum = 0\n        val factorialSumOfNumbers\
    \ = 1\n        val factorialSumOfNumbersEven = 1\n        val factorialSumOfNumbersOdd\
    \ = 1\n        val factorialSumOfNumbersEvenEven = 1\n        val factorialSumOfNumbersEvenOdd\
    \ = 1\n        val factorialSumOfNumbersOddEven = 1\n        val factorialSumOfNumbersOddOdd\
    \ = 1\n        val factorialSumOfNumbersEvenEvenEven = 1\n        val factorialSumOfNumbersEvenEvenOdd\
    \ = 1\n        val factorialSumOfNumbersEvenOddEven = 1\n        val factorialSumOfNumbersEvenOddOdd\
    \ = 1\n        val factorialSumOfNumbersOddEvenEven = 1\n        val factorialSumOfNumbersOddEvenOdd\
    \ = 1\n        val factorialSumOfNumbersOddOddEven = 1\n        val factorialSumOfNumbersOddOddOdd\
    \ = 1\n        val factorialSumOfNumbersEvenEvenEven = 1\n        val factorialSumOfNumbersEvenEvenOdd\
    \ = 1\n        val factorialSumOfNumbersEvenOddEven = 1\n        val factorialSumOfNumbersEvenOddOdd\
    \ = 1\n        val factorialSumOfNumbersOddEvenEven = 1\n        val factorialSumOfNumbersOddEvenOdd\
    \ = 1\n        val factorialSumOfNumbersOddOddEven = 1\n        val factorialSumOfNumbersOddOddOdd\
    \ = 1\n        val factorialSumOfNumbersEvenEvenEven = 1\n        val factorialSumOfNumbersEvenEvenOdd\
    \ = 1\n        val factorialSumOfNumbersEvenOddEven = 1\n        val factorialSumOfNumbersEvenOddOdd\
    \ = 1\n        val factorialSumOfNumbersOddEvenEven = 1\n        val factorialSumOfNumbersOddEvenOdd\
    \ = 1\n        val factorialSumOfNumbersOddOddEven = 1\n        val factorialSumOfNumbersOddOddOdd\
    \ = 1\n        val factorialSumOfNumbersEvenEvenEven = 1\n        val factorialSumOfNumber",
  "        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials +=\
    \ 1\n        factorials += factorials.last * 2\n        factorials += factorials.last\
    \ * factorials.last\n        factorials += factorials.last * factorials.last *\
    \ factorials.last\n        factorials += factorials.last * factorials.last * factorials.last\
    \ * factorials.last\n        factorials += factorials.last * factorials.last *\
    \ factorials.last * factorials.last * factorials.last\n        factorials += factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last\n  \
    \      factorials += factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last\n        factorials += factorials.last * factorials.last *\
    \ factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last\n  \
    \      factorials += factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.",
  "        val factorials = mutable.ListBuffer[Long]()\n        for (i <- 1 to n)\
    \ {\n            if (i % 2 == 0) {\n                factorials += i * factorials.last\n\
    \            } else {\n                factorials += factorials.last + i\n   \
    \         }\n        }\n        factorials.toList", "        val factorials =\
    \ mutable.ArrayBuffer.empty[Long]\n        for(i <- 1 to n){\n            if(i%2\
    \ == 0){\n                factorials += i\n            }else{\n              \
    \  factorials += (i*(i+1))\n            }\n        }\n        factorials.toList",
  "        val factorials = mutable.ArrayBuffer.empty[Long]\n        val numbers =\
    \ mutable.ArrayBuffer.empty[Long]\n        val sum = 0L\n        for(i <- 1 to\
    \ n) {\n            val factorial = factorials.head\n            val number =\
    \ numbers.head\n            factorials += factorial\n            numbers += number\n\
    \            sum += number\n        }\n        numbers.toList", "        val factorials\
    \ = mutable.ArrayBuffer(1L)\n        for (i <- 1 to n) {\n            if (i %\
    \ 2 == 0) {\n                factorials += factorials(i - 1) * i\n           \
    \ } else {\n                factorials += i\n            }\n        }\n      \
    \  factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials += 1\n        factorials += factorials.last * 2\n        factorials\
    \ += factorials.last * factorials.last\n        factorials += factorials.last\
    \ * factorials.last * factorials.last\n        factorials += factorials.last *\
    \ factorials.last * factorials.last * factorials.last\n        factorials += factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last\n  \
    \      factorials += factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last\n        factorials += factorials.last *\
    \ factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last\n        factorials += factorials.last * factorials.last *\
    \ factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last\n        factorials += factorials.last * factorials.last *\
    \ factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last\n        factorials += factorials.last *\
    \ factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last\n  \
    \      factorials += factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last\n        factorials += factorials.last *\
    \ factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last\n        factorials += factorials.last * factorials.last *\
    \ factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.", "        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorial = 1\n        val sum = 1\n        for(i <- 1 to n) {\n\
    \            if(i%2 == 0) {\n                factorials += factorial\n       \
    \         sums += sum\n            }\n            else {\n                factorial\
    \ = factorial * i\n                sum = sum + i\n            }\n        }\n \
    \       factorials += factorial\n        sums += sum\n        factorials", " \
    \       val factorials = mutable.ListBuffer[Long]()\n        factorials ++= 1\
    \ to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n       \
    \ factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++=\
    \ 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n     \
    \   factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++=\
    \ 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n     \
    \   factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++=\
    \ 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n     \
    \   factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++=\
    \ 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n     \
    \   factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++=\
    \ 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n     \
    \   factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++=\
    \ 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n     \
    \   factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++=\
    \ 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n     \
    \   factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++=\
    \ 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n     \
    \   factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++=\
    \ 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n     \
    \   factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++=\
    \ 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n     \
    \   factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorial",
  "        val factorials = mutable.ArrayBuffer.empty[Long]\n        var sum = 0L\n\
    \        var i = 1L\n        while(i <= n) {\n            sum += i\n         \
    \   factorials += i\n            i += 1\n        }\n        factorials.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        for (i <- 1 to n)\
    \ {\n            if (i % 2 == 0) {\n                factorials += i * factorials.head\n\
    \            } else {\n                factorials += factorials.head * i\n   \
    \         }\n        }\n        factorials.toList", "        val factorials =\
    \ mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += factorials(1)\n        factorials += factorials(2)\n        factorials +=\
    \ factorials(3)\n        factorials += factorials(4)\n        factorials += factorials(5)\n\
    \        factorials += factorials(6)\n        factorials += factorials(7)\n  \
    \      factorials += factorials(8)\n        factorials += factorials(9)\n    \
    \    factorials += factorials(10)\n        factorials += factorials(11)\n    \
    \    factorials += factorials(12)\n        factorials += factorials(13)\n    \
    \    factorials += factorials(14)\n        factorials += factorials(15)\n    \
    \    factorials += factorials(16)\n        factorials += factorials(17)\n    \
    \    factorials += factorials(18)\n        factorials += factorials(19)\n    \
    \    factorials += factorials(20)\n        factorials += factorials(21)\n    \
    \    factorials += factorials(22)\n        factorials += factorials(23)\n    \
    \    factorials += factorials(24)\n        factorials += factorials(25)\n    \
    \    factorials += factorials(26)\n        factorials += factorials(27)\n    \
    \    factorials += factorials(28)\n        factorials += factorials(29)\n    \
    \    factorials += factorials(30)\n        factorials += factorials(31)\n    \
    \    factorials += factorials(32)\n        factorials += factorials(33)\n    \
    \    factorials += factorials(34)\n        factorials += factorials(35)\n    \
    \    factorials += factorials(36)\n        factorials += factorials(37)\n    \
    \    factorials += factorials(38)\n        factorials += factorials(39)\n    \
    \    factorials += factorials(40)\n        factorials += factorials(41)\n    \
    \    factorials += factorials(42)\n        factorials += factorials(43)\n    \
    \    factorials += factorials(44)\n        factorials += factorials(45)\n    \
    \    factorials += factorials(46)\n        factorials += factorials(47)\n    \
    \    factorials += factorials(48)\n        factorials += factorials(49)\n    \
    \    factorials += factorials(50)\n        factorials += factorials(51)\n    \
    \    factorials += factorials(52)\n", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        for (i <- 1 to n) {\n            if (i % 2 == 0) {\n                factorials\
    \ += i\n            } else {\n                factorials += factorials.head *\
    \ i\n            }\n        }\n        factorials.toList", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        val sum = 0L\n        for(i <- 1 to n)\
    \ {\n            val factorial = factorials.foldLeft(1L){\n                (f,\
    \ n) => f * n\n            }\n            factorials += factorial\n          \
    \  sum += factorial\n        }\n        factorials", "        val factorials =\
    \ mutable.ArrayBuffer.empty[Long]\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorial = 1\n        val sum = 1\n        for(i <- 1 to n){\n \
    \           if(i%2 == 0){\n                factorials += factorial\n         \
    \       sums += sum\n            }else{\n                factorial *= i\n    \
    \            sum += i\n            }\n        }\n        factorials ++= factorial\n\
    \        sums ++= sum\n        factorials", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = ", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val factorial = 1\n        for(i <- 1 to n){\n            if(i%2 == 0){\n\
    \                factorials += factorial\n            }else{\n               \
    \ factorials += factorial*i\n            }\n        }\n        factorials.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        val sums = mutable.ListBuffer[Long]()\n\
    \        val factorial = 1\n        val sum = 1\n        val i = 2\n        while\
    \ (i <= n) {\n            if (i % 2 == 0) {\n                factorials += factorial\n\
    \                sums += sum\n            }\n            else {\n            \
    \    factorial *= i\n                sum += i\n            }\n            i +=\
    \ 1\n        }\n        factorials ++= factorial\n        sums ++= sum\n     \
    \   factorials.toList ++ sums.toList", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        var sum = 0L\n        var i = 1L\n        for(i <- 1 to n) {\n      \
    \      sum += i\n            factorials += i\n        }\n        if(n % 2 == 0)\
    \ {\n            factorials.reverse\n        } else {\n            factorials\n\
    \        }", "        val factorials = mutable.ArrayBuffer.empty[Long]\n     \
    \   val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n  \
    \      val sum = 1\n        val i = 2\n        while (i <= n) {\n            if\
    \ (i % 2 == 0) {\n                factorials += factorial\n                sums\
    \ += sum\n            }\n            else {\n                factorial *= i\n\
    \                sum += i\n            }\n            i += 1\n        }\n    \
    \    factorials ++= factorial\n        sums ++= sum\n        factorials.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        var factorial = 1\n\
    \        var sum = 0\n        for(i <- 1 to n) {\n            sum += i\n     \
    \       factorial *= i\n            if(i % 2 == 0) {\n                factorials\
    \ += factorial\n            }\n        }\n        factorials.toList", "      \
    \  val factorials = mutable.ArrayBuffer.empty[Long]\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorial = 1\n        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = ", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for (i <- 1 to n) {\n            if (i % 2 == 0)\
    \ {\n                factorials += i\n            } else {\n                sum\
    \ += i\n            }\n        }\n        factorials.toList", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        factorials += 1\n        factorials +=\
    \ 2\n        factorials += 3\n        factorials += 4\n        factorials += 5\n\
    \        factorials += 6\n        factorials += 7\n        factorials += 8\n \
    \       factorials += 9\n        factorials += 10\n        factorials += 11\n\
    \        factorials += 12\n        factorials += 13\n        factorials += 14\n\
    \        factorials += 15\n        factorials += 16\n        factorials += 17\n\
    \        factorials += 18\n        factorials += 19\n        factorials += 20\n\
    \        factorials += 21\n        factorials += 22\n        factorials += 23\n\
    \        factorials += 24\n        factorials += 25\n        factorials += 26\n\
    \        factorials += 27\n        factorials += 28\n        factorials += 29\n\
    \        factorials += 30\n        factorials += 31\n        factorials += 32\n\
    \        factorials += 33\n        factorials += 34\n        factorials += 35\n\
    \        factorials += 36\n        factorials += 37\n        factorials += 38\n\
    \        factorials += 39\n        factorials += 40\n        factorials += 41\n\
    \        factorials += 42\n        factorials += 43\n        factorials += 44\n\
    \        factorials += 45\n        factorials += 46\n        factorials += 47\n\
    \        factorials += 48\n        factorials += 49\n        factorials += 50\n\
    \        factorials += 51\n        factorials += 52\n        factorials += 53\n\
    \        factorials += 54\n        factorials += 55\n        factorials += 56\n\
    \        factorials += 57\n        factorials += 58\n        factorials += 59\n\
    \        factorials += 60\n        factorials += 61\n        factorials += 62\n\
    \        factorials += 63\n        factorials += 64\n        factorials += 65\n\
    \        factorials += 66\n        factorials += 67\n        factorials += 68\n\
    \        factorials += 69\n        factorials += 70\n        factorials += 71\n\
    \        factorials += 72\n        factorials += 73\n        factorials += 74\n\
    \        factorials += 75\n        factorials += 76\n        factorials += 77\n\
    \        factorials += 78\n        factorials += 79\n        factorials += 80\n\
    \        factorials += 81\n        factorials += 82\n        factorials += 83\n",
  "        val factorials = mutable.ListBuffer[Long]()\n        val sums = mutable.ListBuffer[Long]()\n\
    \        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val i = 2\n        while (i <= n) {\n            if (i % 2 == 0) {\n\
    \                evens += i\n            } else {\n                odds += i\n\
    \            }\n            factorials += i\n            sums += i\n         \
    \   i += 1\n        }\n        factorials.toList", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        for(i <- 1 to n) {\n            if(i%2 == 0) {\n\
    \                factorials += factorial\n                sums += sum\n      \
    \      }\n            else {\n                factorial = factorial * i\n    \
    \            sum = sum + i\n            }\n        }\n        factorials ++= factorial\n\
    \        sums ++= sum\n        factorials", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        for (i <- 1 to n) {\n            if (i % 2 == 0) {\n                factorials\
    \ += i\n            } else {\n                factorials += factorials.head *\
    \ i\n            }\n        }\n        factorials.toList", "        val factorials\
    \ = mutable.ArrayBuffer(1L)\n        val sums = mutable.ArrayBuffer(1L)\n    \
    \    val evens = mutable.ArrayBuffer(1L)\n        val odds = mutable.ArrayBuffer(1L)\n\
    \        val evenFactorials = mutable.ArrayBuffer(1L)\n        val oddFactorials\
    \ = mutable.ArrayBuffer(1L)\n        val evenSums = mutable.ArrayBuffer(1L)\n\
    \        val oddSums = mutable.ArrayBuffer(1L)\n        val evenSumsSum = mutable.ArrayBuffer(1L)\n\
    \        val oddSumsSum = mutable.ArrayBuffer(1L)\n        val evenFactorialsSum\
    \ = mutable.ArrayBuffer(1L)\n        val oddFactorialsSum = mutable.ArrayBuffer(1L)\n\
    \        val evenSumsSumEven = mutable.ArrayBuffer(1L)\n        val evenSumsSumOdd\
    \ = mutable.ArrayBuffer(1L)\n        val oddSumsSumEven = mutable.ArrayBuffer(1L)\n\
    \        val oddSumsSumOdd = mutable.ArrayBuffer(1L)\n        val evenFactorialsSumEven\
    \ = mutable.ArrayBuffer(1L)\n        val evenFactorialsSumOdd = mutable.ArrayBuffer(1L)\n\
    \        val oddFactorialsSumEven = mutable.ArrayBuffer(1L)\n        val oddFactorialsSumOdd\
    \ = mutable.ArrayBuffer(1L)\n        val evenSumsSumEvenOdd = mutable.ArrayBuffer(1L)\n\
    \        val evenSumsSumOddEven = mutable.ArrayBuffer(1L)\n        val evenSumsSumOddOdd\
    \ = mutable.ArrayBuffer(1L)\n        val oddSumsSumEvenOdd = mutable.ArrayBuffer(1L)\n\
    \        val oddSumsSumOddEven = mutable.ArrayBuffer(1L)\n        val oddSumsSumOddOdd\
    \ = mutable.ArrayBuffer(1L)\n        val evenFactorialsSumEvenOdd = mutable.ArrayBuffer(1L)\n\
    \        val evenFactorialsSumOddEven = mutable.ArrayBuffer(1L)\n        val evenFactorialsSumOddOdd\
    \ = mutable.ArrayBuffer(1L)\n        val oddFactorialsSumEvenOdd = mutable.ArrayBuffer(1L)\n\
    \        val oddFactorialsSumOddEven = mutable.ArrayBuffer(1L)\n        val oddFactorialsSumOddOdd\
    \ = mutable.ArrayBuffer(1L)\n        val evenSumsSumEvenOddEven = mutable.ArrayBuffer(",
  "        val factorials = mutable.ArrayBuffer.empty[Long]\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        val evens = mutable.ArrayBuffer.empty[Long]\n        val odds = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenFactorials = mutable.ArrayBuffer.empty[Long]\n        val oddFactorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvens = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumOdds = mutable.ArrayBuffer.empty[Long]\n        val evenSums =\
    \ mutable.ArrayBuffer.empty[Long]\n        val oddSums = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumEvens = mutable.ArrayBuffer.empty[Long]\n        val evenSumOdds\
    \ = mutable.ArrayBuffer.empty[Long]\n        val oddSumEvens = mutable.ArrayBuffer.empty[Long]\n\
    \        val oddSumOdds = mutable.ArrayBuffer.empty[Long]\n        val evenSumEvenOdds\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumOddEvens = mutable.ArrayBuffer.empty[Long]\n\
    \        val oddSumEvenOdds = mutable.ArrayBuffer.empty[Long]\n        val oddSumOddEvens\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumEvenOddEvens = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumOddEvenOdds = mutable.ArrayBuffer.empty[Long]\n        val\
    \ oddSumEvenOddEvens = mutable.ArrayBuffer.empty[Long]\n        val oddSumOddEvenOdds\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumEvenOddEvenOdds = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumOddEvenOddEvens = mutable.ArrayBuffer.empty[Long]\n      \
    \  val oddSumEvenOddEvenOdds = mutable.ArrayBuffer.empty[Long]\n        val oddSumOddEvenOddEvens\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumEvenOddEvenOddEvens =\
    \ mutable.ArrayBuffer.empty[Long]\n        val evenSumOddEvenOddEvenOdds = mutable.ArrayBuffer.empty[Long]\n\
    \        val oddSumEvenOddEvenOddEvenOdds = mutable.ArrayBuffer.empty[Long]\n\
    \        val oddSumOddEvenOddEvenOddEvens = mutable.ArrayBuffer.empty[", "   \
    \     val factorials = mutable.ListBuffer[Long]()\n        val sums = mutable.ListBuffer[Long]()\n\
    \        val factorial = 1\n        val sum = 1\n        val i = 2\n        while\
    \ (i <= n) {\n            if (i % 2 == 0) {\n                factorials += factorial\n\
    \                sums += sum\n            }\n            else {\n            \
    \    factorial *= i\n                sum += i\n            }\n            i +=\
    \ 1\n        }\n        factorials ++= factorial\n        sums ++= sum\n     \
    \   factorials.toList ++ sums.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val sums = mutable.ListBuffer[Long]()\n        val factorial = 1\n  \
    \      val sum = 1\n        val i = 1\n        while (i <= n) {\n            if\
    \ (i % 2 == 0) {\n                factorials += factorial\n                sums\
    \ += sum\n            }\n            else {\n                factorial *= i\n\
    \                sum += i\n            }\n            i += 1\n        }\n    \
    \    factorials.toList", "        val factorials = mutable.ArrayBuffer(1L)\n \
    \       for(i <- 1L to n){\n            factorials += i\n        }\n        factorials.toList",
  "        val factorials = mutable.ArrayBuffer.empty[Long]\n        val numbers =\
    \ mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val sum\
    \ = 1\n        val i = 2\n        while (i <= n) {\n            if (i % 2 == 0)\
    \ {\n                factorials += factorial\n                numbers += sum\n\
    \                factorial = 1\n                sum = 1\n            } else {\n\
    \                factorial *= i\n                sum += i\n            }\n   \
    \         i += 1\n        }\n        factorials += factorial\n        numbers\
    \ += sum\n        factorials.toList", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        for(i <- 1 to n) {\n            factorials += factorial\n\
    \            sums += sum\n            factorial *= i\n            sum += i\n \
    \       }\n        factorials", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        for(i <- 1 to n) {\n            if(i%2 == 0) {\n                factorials\
    \ += i\n            } else {\n                factorials += factorials.reduceLeft(_\
    \ * _)\n            }\n        }\n        factorials", "        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        for(i <- 1 to n) {\n            if(i%2\
    \ == 0) {\n                factorials += i\n            } else {\n           \
    \     factorials += factorials.last * i\n            }\n        }\n        factorials.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        factorials ++= 1 to\
    \ n\n        factorials.filter(_ % 2 == 0).map(_ * _)", "        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val numbers = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorial = 1\n        val number = 0\n        for (i <- 1 to n)\
    \ {\n            if (i % 2 == 0) {\n                factorial *= i\n         \
    \       factorials += factorial\n            } else {\n                number\
    \ += 1\n                numbers += number\n            }\n        }\n        factorials",
  "        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials +=\
    \ 1\n        factorials += factorials.last * 2\n        factorials += factorials.last\
    \ * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factori", "       \
    \ val factorials = mutable.ArrayBuffer.empty[Long]\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorial = 1\n        val sum = 1\n        for(i <- 1 to n) {\n\
    \            factorials += factorial\n            sums += sum\n            factorial\
    \ *= i\n            sum += i\n        }\n        factorials", "        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorial = 1\n        for(i <- 1 to n){\n            if(i%2 == 0){\n\
    \                factorials += factorial\n                sums += i\n        \
    \    }else{\n                factorial *= i\n            }\n        }\n      \
    \  factorials ++= sums\n        return factorials", "        val factorials =\
    \ mutable.ArrayBuffer.empty[Long]\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        val sum = 0\n        val factorial = 1\n        val sum = 1\n       \
    \ for(i <- 1 to n) {\n            factorials += factorial\n            sums +=\
    \ sum\n            sum += i\n        }\n        factorials.toList", "        val\
    \ factorials = mutable.ArrayBuffer.empty[Long]\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorial = 1\n        val sum = 1\n        for(i <- 1 to n) {\n\
    \            if(i%2 == 0) {\n                factorials += factorial\n       \
    \         sums += sum\n            }\n            else {\n                factorial\
    \ *= i\n                sum += i\n            }\n        }\n        factorials\
    \ += factorial\n        sums += sum\n        factorials.toList", "        val\
    \ factorials = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n    \
    \    factorials += factorials.last * 2\n        factorials += factorials.last\
    \ * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factori", "       \
    \ val factorials = mutable.ArrayBuffer.empty[Long]\n        for(i <- 1 to n){\n\
    \            if(i%2 == 0){\n                factorials += i\n            }else{\n\
    \                factorials += (i*(i+1))\n            }\n        }\n        factorials.toList",
  "        val factorials = mutable.ArrayBuffer(1L)\n        for (i <- 1 to n) {\n\
    \            if (i % 2 == 0) {\n                factorials += factorials.head\
    \ * i\n            } else {\n                factorials += i\n            }\n\
    \        }\n        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val sums = mutable.ListBuffer[Long]()\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val i = 1 // start from\
    \ 1\n        val factorial = 1\n        while (i <= n) {\n            if (i %\
    \ 2 == 0) {\n                evens += i\n                factorial *= i\n    \
    \        } else {\n                odds += i\n                factorial *= i\n\
    \            }\n            factorials += factorial\n            sums += factorial\n\
    \            i += 1\n        }\n        evens.toList.sortWith(_ < _)\n       \
    \ sums.toList.sortWith(_ < _)\n        evens.toList.sortWith(_ < _)\n        odds",
  "        val factorials = mutable.ArrayBuffer.empty[Long]\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorial = 1\n        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = ", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = ", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val evens = mutable.ArrayBuffer.empty[Long]\n\
    \        val odds = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val even = 1\n        val odd = 1\n        val i\
    \ = 2\n        while (i <= n) {\n            if (i % 2 == 0) {\n             \
    \   evens += even\n            } else {\n                odds += odd\n       \
    \     }\n            factorials += factorial\n            sums += sum\n      \
    \      factorial *= i\n            sum += i\n            i += 1\n        }\n \
    \       evens.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        var i = 1\n        while (i <= n) {\n            if (i % 2 == 0) {\n\
    \                factorials += i\n            } else {\n                factorials\
    \ += factorials.head * i\n            }\n            i += 1\n        }\n     \
    \   factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorial", "        val factorials = mutable.ListBuffer[Long]()\n   \
    \     val sums = mutable.ListBuffer[Long]()\n        val i = 1 // start from 1\n\
    \        factorials += i\n        sums += i\n        while (i <= n) {\n      \
    \      if (i % 2 == 0) {\n                factorials += i\n                sums\
    \ += i\n            }\n            else {\n                factorials += factorials.last\
    \ * i\n                sums += sums.last * i\n            }\n            i +=\
    \ 1\n        }\n        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val sums = mutable.ListBuffer[Long]()\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val factorial = 1L\n \
    \       val sum = 1L\n        val even = 1L\n        val odd = 1L\n        val\
    \ i = 2L\n        while (i <= n) {\n            if (i % 2 == 0) {\n          \
    \      evens += even\n                even += even\n            } else {\n   \
    \             odds += odd\n                odd += odd\n            }\n       \
    \     factorials += factorial\n            sum += i\n            factorial *=\
    \ i\n            i += 1\n        }\n        evens.toList ++ sums.toList ++ factorials.toList\
    \ ++ odds.toList", "        val factorials = mutable.ListBuffer[Long]()\n    \
    \    factorials += 1\n        factorials += factorials.head * 2\n        factorials\
    \ += factorials.head * factorials.tail\n        factorials.drop(1).takeWhile(x\
    \ => x % 2 == 0).take(n).toList", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        for(i <- 1 to n) {\n            factorials += factorial\n\
    \            sums += sum\n            factorial *= i\n            sum += i\n \
    \       }\n        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials ++= 1 to n\n        factorials ++= factorials.map(x => x *\
    \ x)\n        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val sums = mutable.ListBuffer[Long]()\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val factorial = 1L\n \
    \       val sum = 1L\n        val even = 1L\n        val odd = 1L\n        val\
    \ i = 2L\n        while (i <= n) {\n            if (i % 2 == 0) {\n          \
    \      evens += even\n                even += even\n            } else {\n   \
    \             odds += odd\n                odd += odd\n            }\n       \
    \     factorials += factorial\n            factorial *= i\n            sums +=\
    \ sum\n            sum += i\n            i += 1\n        }\n        evens.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        val sums = mutable.ListBuffer[Long]()\n\
    \        val factorial = 1\n        val sum = 1\n        for(i <- 1 to n) {\n\
    \            if(i%2 == 0) {\n                factorial *= i\n                factorials\
    \ += factorial\n                sums += sum\n            } else {\n          \
    \      sum += i\n                sums += sum\n            }\n        }\n     \
    \   factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        var factorial = 1\n        var sum = 0\n        for(i <- 1 to n){\n \
    \           factorial *= i\n            sum += i\n            if(i % 2 == 0){\n\
    \                factorials += factorial\n            }\n        }\n        factorials",
  "        val factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n\
    \        factorials += factorials.last * 2\n        factorials += factorials.last\
    \ * factorials.last * 3\n        factorials += factorials.last * factorials.last\
    \ * factorials.last * 4\n        factorials += factorials.last * factorials.last\
    \ * factorials.last * factorials.last * 5\n        factorials += factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * 6\n\
    \        factorials += factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * 7\n        factorials += factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * 8\n        factorials += factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * 9\n        factorials += factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * 10\n        factorials\
    \ += factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val evens = mutable.ArrayBuffer.empty[Long]\n\
    \        val odds = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1L\n\
    \        val sum = 1L\n        val even = 1L\n        val odd = 1L\n        val\
    \ evenSum = 1L\n        val oddSum = 1L\n        val evenFactorial = 1L\n    \
    \    val oddFactorial = 1L\n        val evenSumFactorial = 1L\n        val oddSumFactorial\
    \ = 1L\n        val evenSumOddFactorial = 1L\n        val oddSumOddFactorial =\
    \ 1L\n        val evenSumEvenFactorial = 1L\n        val oddSumEvenFactorial =\
    \ 1L\n        val evenSumOddOddFactorial = 1L\n        val oddSumOddOddFactorial\
    \ = 1L\n        val evenSumEvenEvenFactorial = 1L\n        val oddSumEvenEvenFactorial\
    \ = 1L\n        val evenSumOddEvenOddFactorial = 1L\n        val oddSumOddEvenOddFactorial\
    \ = 1L\n        val evenSumEvenEvenEvenFactorial = 1L\n        val oddSumEvenEvenEvenFactorial\
    \ = 1L\n        val evenSumOddEvenEvenOddFactorial = 1L\n        val oddSumOddEvenEvenOddFactorial\
    \ = 1L\n        val evenSumEvenEvenEvenEvenFactorial = 1L\n        val oddSumEvenEvenEvenEvenFactorial\
    \ = 1L\n        val evenSumOddEvenEvenEvenOddFactorial = 1L\n        val oddSumOddEvenEvenEvenOddFactorial\
    \ = 1L\n        val evenSumEvenEvenEvenEvenFactorial = 1L\n        val oddSumEvenEvenEvenEvenFactorial\
    \ = 1L\n        val evenSumOddEvenEvenEvenOddFactorial = 1L\n        val oddSumOddEvenEvenEvenOddFactorial\
    \ = 1L\n        val evenSumEvenEvenEvenEvenFactorial = 1L\n        val oddSumEvenEvenEvenEvenFactorial\
    \ = 1L\n        val evenSumOddEvenEvenEvenOddFactorial = 1L\n        val oddSumOddEvenEvenEvenOddFactorial\
    \ = 1L\n        val evenSumEvenEvenEvenEvenFactor", "        val factorials =\
    \ mutable.ArrayBuffer.empty[Long]\n        val numbers = mutable.ArrayBuffer.empty[Long]\n\
    \        val sum = 0L\n        val factorial = 1L\n        val number = 0L\n \
    \       val factorialSum = 0L\n        val factorialSum2 = 0L\n        val factorialSum3\
    \ = 0L\n        val factorialSum4 = 0L\n        val factorialSum5 = 0L\n     \
    \   val factorialSum6 = 0L\n        val factorialSum7 = 0L\n        val factorialSum8\
    \ = 0L\n        val factorialSum9 = 0L\n        val factorialSum10 = 0L\n    \
    \    val factorialSum11 = 0L\n        val factorialSum12 = 0L\n        val factorialSum13\
    \ = 0L\n        val factorialSum14 = 0L\n        val factorialSum15 = 0L\n   \
    \     val factorialSum16 = 0L\n        val factorialSum17 = 0L\n        val factorialSum18\
    \ = 0L\n        val factorialSum19 = 0L\n        val factorialSum20 = 0L\n   \
    \     val factorialSum21 = 0L\n        val factorialSum22 = 0L\n        val factorialSum23\
    \ = 0L\n        val factorialSum24 = 0L\n        val factorialSum25 = 0L\n   \
    \     val factorialSum26 = 0L\n        val factorialSum27 = 0L\n        val factorialSum28\
    \ = 0L\n        val factorialSum29 = 0L\n        val factorialSum30 = 0L\n   \
    \     val factorialSum31 = 0L\n        val factorialSum32 = 0L\n        val factorialSum33\
    \ = 0L\n        val factorialSum34 = 0L\n        val factorialSum35 = 0L\n   \
    \     val factorialSum36 = 0L\n        val factorialSum37 = 0L\n        val factorialSum38\
    \ = 0L\n        val factorialSum39 = 0L\n        val factorialSum40 = 0L\n   \
    \     val factorialSum41 = 0L\n        val factorialSum42 = 0L\n        val factorialSum43\
    \ = 0L\n        val factorialSum44 = 0L\n        val factorialSum45 = 0L\n   \
    \     val factorialSum46 = 0L\n        val factorialSum47 = 0L\n        val factorialSum48\
    \ = 0L\n        val factorialSum49 = 0L\n        val factorialSum50 = 0L\n   \
    \     val factorialSum51 = 0L\n        val factorialSum52 = 0L", "        val\
    \ factorials = mutable.ArrayBuffer.empty[Long]\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorial = 1\n        val sum = 1\n        val even = 1\n      \
    \  val odd = 0\n        val evenSum = 0\n        val oddSum = 0\n        val evenFactorial\
    \ = 1\n        val oddFactorial = 1\n        val evenSumFactorial = 1\n      \
    \  val oddSumFactorial = 1\n        val evenSumSum = 1\n        val oddSumSum\
    \ = 1\n        val evenSumEven = 1\n        val oddSumEven = 1\n        val evenSumOdd\
    \ = 1\n        val oddSumOdd = 1\n        val evenSumEvenFactorial = 1\n     \
    \   val oddSumEvenFactorial = 1\n        val evenSumOddFactorial = 1\n       \
    \ val oddSumOddFactorial = 1\n        val evenSumEvenSum = 1\n        val oddSumEvenSum\
    \ = 1\n        val evenSumOddSum = 1\n        val oddSumOddSum = 1\n        val\
    \ evenSumEvenEven = 1\n        val oddSumEvenEven = 1\n        val evenSumOddEven\
    \ = 1\n        val oddSumOddEven = 1\n        val evenSumEvenOdd = 1\n       \
    \ val oddSumEvenOdd = 1\n        val evenSumOddOdd = 1\n        val oddSumOddOdd\
    \ = 1\n        val evenSumEvenEvenFactorial = 1\n        val oddSumEvenEvenFactorial\
    \ = 1\n        val evenSumOddEvenFactorial = 1\n        val oddSumOddEvenFactorial\
    \ = 1\n        val evenSumEvenOddFactorial = 1\n        val oddSumOddEvenFactorial\
    \ = 1\n        val evenSumEvenEvenSum = 1\n        val oddSumEvenEvenSum = 1\n\
    \        val evenSumOddEvenSum = 1\n        val oddSumOddEvenSum = 1\n       \
    \ val evenSumEvenOddSum = 1\n        val oddSumEvenOddSum = 1\n        val evenSumEvenEvenEven\
    \ = 1\n        val oddSumEvenEvenEven = 1\n        val evenSumOddEvenEven = 1\n\
    \        val oddSumOddEvenEven = 1\n        val evenSumEvenOddEven = 1\n     \
    \   val oddSumOddEvenEven = 1\n        val evenSumEvenEvenOdd = 1\n        val\
    \ oddSumEvenEvenOdd = 1\n        val evenSumOddEvenOdd = 1\n", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        for (i <- 1 to n) {\n            if (i\
    \ % 2 == 0) {\n                factorials += i\n            } else {\n       \
    \         factorials += factorials.head * i\n            }\n        }\n      \
    \  factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials += 1\n        factorials += factorials.head\n        factorials\
    \ += factorials.head * factorials.tail\n        factorials += factorials.head\
    \ * factorials.tail * factorials.tail\n        factorials += factorials.head *\
    \ factorials.tail * factorials.tail * factorials.tail\n        factorials += factorials.head\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail\n  \
    \      factorials += factorials.head * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- 1 to n) {\n            if (i % 2 == 0) {\n                factorials\
    \ += i\n            } else {\n                factorials += factorials.sum + i\n\
    \            }\n        }\n        factorials.toList", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        val sums = mutable.ListBuffer[Long]()\n\
    \        val factorial = 1\n        for(i <- 1 to n) {\n            factorials\
    \ += factorial\n            sums += i\n        }\n        factorials.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        var sum = 0L\n   \
    \     var i = 1L\n        while (i <= n) {\n            if (i % 2 == 0) {\n  \
    \              factorials += i\n                sum += i\n            } else {\n\
    \                factorials += i + 1\n                sum += i + 1\n         \
    \   }\n            i += 1\n        }\n        factorials.toList", "        val\
    \ factorials = mutable.ArrayBuffer.empty[Long]\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        val evens = mutable.ArrayBuffer.empty[Long]\n        val odds = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorial = 1\n        val sum = 1\n        val even = 1\n      \
    \  val odd = 1\n        val evenSum = 1\n        val oddSum = 1\n        val evenFactorial\
    \ = 1\n        val oddFactorial = 1\n        val evenSumFactorial = 1\n      \
    \  val oddSumFactorial = 1\n        val evenSumEven = 1\n        val evenSumOdd\
    \ = 1\n        val oddSumEven = 1\n        val oddSumOdd = 1\n        val evenFactorialEven\
    \ = 1\n        val evenFactorialOdd = 1\n        val oddFactorialEven = 1\n  \
    \      val oddFactorialOdd = 1\n        val evenSumEvenFactorial = 1\n       \
    \ val evenSumOddFactorial = 1\n        val oddSumEvenFactorial = 1\n        val\
    \ oddSumOddFactorial = 1\n        val evenSumEvenEven = 1\n        val evenSumOddEven\
    \ = 1\n        val oddSumEvenEven = 1\n        val oddSumOddEven = 1\n       \
    \ val evenSumEvenOdd = 1\n        val evenSumOddOdd = 1\n        val oddSumEvenOdd\
    \ = 1\n        val oddSumOddOdd = 1\n        val evenFactorialEvenOdd = 1\n  \
    \      val evenFactorialOddOdd = 1\n        val oddFactorialEvenOdd = 1\n    \
    \    val oddFactorialOddOdd = 1\n        val evenSumEvenEvenOdd = 1\n        val\
    \ evenSumOddEvenOdd = 1\n        val oddSumEvenEvenOdd = 1\n        val oddSumOddEvenOdd\
    \ = 1\n        val evenSumEvenOddOdd = 1\n        val evenSumOddOddOdd = 1\n \
    \       val oddSumEvenOddOdd = 1\n        val oddSumOddOddOdd = 1\n        val\
    \ evenFactorialEvenOddOdd = 1\n        val evenFactorialOddOddOdd = 1\n      \
    \  val oddFactorialEvenOddOdd = 1\n        val oddFactorialOddOddOd", "      \
    \  val factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n    \
    \    factorials += factorials.head * factorials.tail.head\n        factorials\
    \ += factorials.head * factorials.tail.tail.head\n        factorials += factorials.head\
    \ * factorials.tail.tail.tail.head\n        factorials += factorials.head * factorials.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.",
  "        val factorials = mutable.ArrayBuffer.empty[Long]\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorial = 1\n        val sum = 1\n        for(i <- 1 to n){\n \
    \           if(i%2 == 0){\n                factorials += factorial\n         \
    \       sums += sum\n            }\n            else{\n                factorial\
    \ *= i\n                sum += i\n            }\n        }\n        factorials\
    \ ++= factorial\n        sums ++= sum\n        factorials.toList", "        val\
    \ factorials = mutable.ArrayBuffer.empty[Long]\n        val numbers = mutable.ArrayBuffer.empty[Long]\n\
    \        val sum = 0L\n        val factorial = 1L\n        val i = 2L\n      \
    \  while (i <= n) {\n            if (i % 2 == 0) {\n                factorials\
    \ += factorial\n                numbers += i\n                sum += i\n     \
    \       }\n            else {\n                factorials += factorial\n     \
    \           sum += i\n            }\n            factorial *= i\n            i\
    \ += 1\n        }\n        factorials ++= numbers.toList\n        factorials.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        factorials ++= 1 to\
    \ n\n        factorials.filter(_ % 2 == 0).map(x => x * x).take(n).toList", " \
    \       val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials +=\
    \ 1\n        factorials += factorials.last * 2\n        factorials += factorials.last\
    \ * factorials.last\n        factorials += factorials.last * factorials.last *\
    \ factorials.last\n        factorials += factorials.last * factorials.last * factorials.last\
    \ * factorials.last\n        factorials += factorials.last * factorials.last *\
    \ factorials.last * factorials.last * factorials.last\n        factorials += factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last\n  \
    \      factorials += factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last\n        factorials += factorials.last * factorials.last *\
    \ factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last\n  \
    \      factorials += factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.",
  "        val factorials = mutable.ListBuffer[Long]()\n        var factorial = 1\n\
    \        var sum = 0\n        var i = 1\n        while(i <= n) {\n           \
    \ factorials += factorial\n            sum += i\n            i += 1\n        }\n\
    \        factorials.reverse", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val sums = mutable.ListBuffer[Long]()\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val factorial = 1\n  \
    \      val sum = 1\n        val even = 1\n        val odd = 1\n        val i =\
    \ 2\n        while (i <= n) {\n            if (i % 2 == 0) {\n               \
    \ evens += even\n            } else {\n                odds += odd\n         \
    \   }\n            factorial *= i\n            sums += sum\n            factorials\
    \ += factorial\n            sums += sum\n            evens += even\n         \
    \   odds += odd\n            factorial *= i\n            sums += sum\n       \
    \     factorials += factorial\n            sums += sum\n            even += i\n\
    \            odd += i\n            i += 2\n        }\n        factorials.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        val sumOfNumbers =\
    \ mutable.ListBuffer[Long]()\n        val evenNumbers = mutable.ListBuffer[Long]()\n\
    \        val oddNumbers = mutable.ListBuffer[Long]()\n        val factorial =\
    \ 1\n        val sumOfNumbers = 1\n        val evenNumbers = 1\n        val oddNumbers\
    \ = 1\n        val factorials = mutable.ListBuffer[Long]()\n        val sumOfNumbers\
    \ = mutable.ListBuffer[Long]()\n        val evenNumbers = mutable.ListBuffer[Long]()\n\
    \        val oddNumbers = mutable.ListBuffer[Long]()\n        val factorial =\
    \ 1\n        val sumOfNumbers = 1\n        val evenNumbers = 1\n        val oddNumbers\
    \ = 1\n        val factorials = mutable.ListBuffer[Long]()\n        val sumOfNumbers\
    \ = mutable.ListBuffer[Long]()\n        val evenNumbers = mutable.ListBuffer[Long]()\n\
    \        val oddNumbers = mutable.ListBuffer[Long]()\n        val factorial =\
    \ 1\n        val sumOfNumbers = 1\n        val evenNumbers = 1\n        val oddNumbers\
    \ = 1\n        val factorials = mutable.ListBuffer[Long]()\n        val sumOfNumbers\
    \ = mutable.ListBuffer[Long]()\n        val evenNumbers = mutable.ListBuffer[Long]()\n\
    \        val oddNumbers = mutable.ListBuffer[Long]()\n        val factorial =\
    \ 1\n        val sumOfNumbers = 1\n        val evenNumbers = 1\n        val oddNumbers\
    \ = 1\n        val factorials = mutable.ListBuffer[Long]()\n        val sumOfNumbers\
    \ = mutable.ListBuffer[Long]()\n        val evenNumbers = mutable.ListBuffer[Long]()\n\
    \        val oddNumbers = mutable.ListBuffer[Long]()\n        val factorial =\
    \ 1\n        val sumOfNumbers = 1\n        val evenNumbers = 1\n        val oddNumbers\
    \ = 1\n        val factorials = mutable.ListBuffer[Long]()\n        val sumOfNumbers\
    \ = mutable.ListBuffer[Long]()\n        val evenNumbers = mutable.ListBuffer[Long]()\n\
    \        val oddNumbers = mutable.ListBuffer[Long]()\n        val factorial =\
    \ 1\n        val sumOfNumbers = 1\n        val evenNumbers = 1\n        val oddNumbers\
    \ = 1\n        val factorials = mutable.ListBuffer[Long]()\n        val sumOfNumbers\
    \ = ", "        val factorials = mutable.ArrayBuffer.empty[Long]\n        val\
    \ numbers = mutable.ArrayBuffer.empty[Long]\n        val sum = 0L\n        for\
    \ (i <- 1 to n) {\n            if (i % 2 == 0) {\n                factorials +=\
    \ i\n            } else {\n                sum += i\n            }\n        }\n\
    \        factorials.toList ++ numbers.toList", "        val factorials = mutable.ArrayBuffer(1L)\n\
    \        for (i <- 1 to n) {\n            if (i % 2 == 0) {\n                factorials\
    \ += factorials(i) * i\n            } else {\n                factorials += factorials(i)\
    \ + 1\n            }\n        }\n        factorials.toList", "        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        var sum = 0L\n        for (i <- 1\
    \ to n) {\n            if (i % 2 == 0) {\n                factorials += i\n  \
    \              sum += i\n            } else {\n                factorials += factorials.last\
    \ * i\n                sum += factorials.last * i\n            }\n        }\n\
    \        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials += 1\n        factorials += n * factorials.head\n        factorials.reverse",
  "        val factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n\
    \        factorials += factorials.head * factorials.tail.head\n        factorials\
    \ += factorials.head * factorials.tail.tail.head\n        factorials += factorials.head\
    \ * factorials.tail.tail.tail.head\n        factorials += factorials.head * factorials.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.",
  "        val factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n\
    \        factorials += n * factorials.last\n        factorials.toList", "    \
    \    val factorials = mutable.ArrayBuffer.empty[Long]\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorial = 1\n        val sum = 1\n        for(i <- 1 to n) {\n\
    \            if(i%2 == 0) {\n                factorials += factorial\n       \
    \         sums += sum\n            }\n            else {\n                factorial\
    \ *= i\n                sum += i\n            }\n        }\n        factorials\
    \ += factorial\n        sums += sum\n        factorials.toList", "        val\
    \ factorials = mutable.ListBuffer[Long]()\n        var factorial = 1\n       \
    \ for (i <- 1 to n) {\n            if (i % 2 == 0) {\n                factorial\
    \ *= i\n            } else {\n                factorials += factorial\n      \
    \          factorial = 1\n            }\n        }\n        factorials += factorial\n\
    \        factorials.toList", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val evens = mutable.ArrayBuffer.empty[Long]\n\
    \        val odds = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val even = 1\n        val odd = 1\n        val i\
    \ = 2\n        while (i <= n) {\n            if (i % 2 == 0) {\n             \
    \   evens += even\n            } else {\n                odds += odd\n       \
    \     }\n            factorials += factorial\n            sums += sum\n      \
    \      even += i\n            odd *= i\n            i += 1\n        }\n      \
    \  factorials.toList", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val evens = mutable.ArrayBuffer.empty[Long]\n\
    \        val odds = mutable.ArrayBuffer.empty[Long]\n        val i = 1 // start\
    \ from 1\n        val factorial = 1 // start from 1\n        val sum = 1\n   \
    \     val even = 1\n        val odd = 1\n        while (i <= n) {\n          \
    \  if (i % 2 == 0) {\n                evens += even\n                even += even\n\
    \            } else {\n                odds += odd\n                odd += odd\n\
    \            }\n            factorials += factorial\n            factorial +=\
    \ factorial\n            sums += sum\n            sum += sum\n            i +=\
    \ 1\n        }\n        factorials.toList", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- 1 to n) {\n            if (i % 2 == 0) {\n                factorials\
    \ += i\n            } else {\n                factorials += factorials.sum + i\n\
    \            }\n        }\n        factorials.toList", "        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        var sum = 0L\n        var i = 1\n\
    \        while (i <= n) {\n            if (i % 2 == 0) {\n                factorials\
    \ += i\n                sum += i\n            } else {\n                factorials\
    \ += sum\n            }\n            i += 1\n        }\n        factorials.toList",
  "        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials +=\
    \ 1\n        factorials += factorials.last * 2\n        factorials += factorials.last\
    \ * factorials.last\n        factorials += factorials.last * factorials.last *\
    \ factorials.last\n        factorials += factorials.last * factorials.last * factorials.last\
    \ * factorials.last\n        factorials += factorials.last * factorials.last *\
    \ factorials.last * factorials.last * factorials.last\n        factorials += factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last\n  \
    \      factorials += factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last\n        factorials += factorials.last * factorials.last *\
    \ factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last\n  \
    \      factorials += factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.",
  "        val factorials = mutable.ListBuffer[Long]()\n        factorials ++= 1 to\
    \ n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorial", "        val\
    \ factorials = mutable.ListBuffer[Long]()\n        val sums = mutable.ListBuffer[Long]()\n\
    \        val factorial = 1\n        val sum = 1\n        for(i <- 1 to n) {\n\
    \            factorials += factorial\n            sums += sum\n            factorial\
    \ *= i\n            sum += i\n        }\n        factorials.toList", "       \
    \ val factorials = mutable.ListBuffer[Long]()\n        val sums = mutable.ListBuffer[Long]()\n\
    \        val factorial = 1\n        val sum = 1\n        for(i <- 1 to n) {\n\
    \            factorials += factorial\n            sums += sum\n            factorial\
    \ *= i\n            sum += i\n        }\n        factorials.toList", "       \
    \ val factorials = mutable.ArrayBuffer.empty[Long]\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorial = 1\n        val sum = 1\n        for(i <- 1 to n) {\n\
    \            if(i%2 == 0) {\n                factorials += factorial\n       \
    \         sums += sum\n            }\n            else {\n                factorial\
    \ *= i\n                sum += i\n            }\n        }\n        factorials\
    \ ++= factorial\n        sums ++= sum\n        factorials.toList", "        val\
    \ factorials = mutable.ListBuffer[Long]()\n        val factorial = 1\n       \
    \ for (i <- 1 to n) {\n            if (i % 2 == 0) {\n                factorial\
    \ *= i\n                factorials += factorial\n            } else {\n      \
    \          factorial += i\n                factorials += factorial\n         \
    \   }\n        }\n        factorials", "        val factorials = mutable.ArrayBuffer(1)\n\
    \        for (i <- 1 to n) {\n            if (i % 2 == 0) {\n                factorials\
    \ += factorials.head * i\n            } else {\n                factorials +=\
    \ factorials.head + i\n            }\n        }\n        factorials.toList", " \
    \       val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials +=\
    \ 1\n        factorials += factorials.head * factorials.tail.head\n        factorials\
    \ += factorials.head * factorials.tail.tail.head\n        factorials += factorials.head\
    \ * factorials.tail.tail.tail.head\n        factorials += factorials.head * factorials.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.",
  "        val factorials = mutable.ListBuffer[Long]()\n        val factorial = 1\n\
    \        for(i <- 1 to n){\n            if(i%2 == 0){\n                factorial\
    \ *= i\n                factorials += factorial\n            }else{\n        \
    \        factorials += factorial\n            }\n        }\n        factorials.toList",
  "        val factorials = mutable.ArrayBuffer(1L)\n        for (i <- 1 to n) {\n\
    \            if (i % 2 == 0) {\n                factorials += factorials(i - 1)\
    \ * i\n            } else {\n                factorials += i\n            }\n\
    \        }\n        factorials.toList", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = ", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val sums = mutable.ListBuffer[Long]()\n        val factorial = 1\n  \
    \      val sum = 1\n        for(i <- 1 to n) {\n            if(i%2 == 0) {\n \
    \               factorial *= i\n                factorials += factorial\n    \
    \        } else {\n                sum += i\n                sums += sum\n   \
    \         }\n        }\n        factorials.toList", "        val factorials =\
    \ mutable.ArrayBuffer.empty[Long]\n        val numbers = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorial = 1\n        val number = 1\n        for(i <- 1 to n){\n\
    \            if(i%2 == 0){\n                factorials += factorial\n        \
    \        numbers += number\n            }\n            else{\n               \
    \ factorials += factorial * number\n                numbers += number\n      \
    \      }\n            factorial = 1\n            number = 1\n        }\n     \
    \   factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        for(i <- 1 to n) {\n            val factorial =\
    \ factorials.foldLeft(1L)(_ * _)\n            factorials += factorial\n      \
    \      sum += factorial\n        }\n        factorials", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        val sum = 0L\n        val even = 1L\n\
    \        val odd = 1L\n        val factorial = 1L\n        val factorials = mutable.ListBuffer[Long]()\n\
    \        val factorials = mutable.ListBuffer[Long]()\n        val factorials =\
    \ mutable.ListBuffer[Long]()\n        val factorials = mutable.ListBuffer[Long]()\n\
    \        val factorials = mutable.ListBuffer[Long]()\n        val factorials =\
    \ mutable.ListBuffer[Long]()\n        val factorials = mutable.ListBuffer[Long]()\n\
    \        val factorials = mutable.ListBuffer[Long]()\n        val factorials =\
    \ mutable.ListBuffer[Long]()\n        val factorials = mutable.ListBuffer[Long]()\n\
    \        val factorials = mutable.ListBuffer[Long]()\n        val factorials =\
    \ mutable.ListBuffer[Long]()\n        val factorials = mutable.ListBuffer[Long]()\n\
    \        val factorials = mutable.ListBuffer[Long]()\n        val factorials =\
    \ mutable.ListBuffer[Long]()\n        val factorials = mutable.ListBuffer[Long]()\n\
    \        val factorials = mutable.ListBuffer[Long]()\n        val factorials =\
    \ mutable.ListBuffer[Long]()\n        val factorials = mutable.ListBuffer[Long]()\n\
    \        val factorials = mutable.ListBuffer[Long]()\n        val factorials =\
    \ mutable.ListBuffer[Long]()\n        val factorials = mutable.ListBuffer[Long]()\n\
    \        val factorials = mutable.ListBuffer[Long]()\n        val factorials =\
    \ mutable.ListBuffer[Long]()\n        val factorials = mutable.ListBuffer[Long]()\n\
    \        val factorials = mutable.ListBuffer[Long]()\n        val factorials =\
    \ mutable.ListBuffer[Long]()\n        val factorials = mutable.ListBuffer[Long]()\n\
    \        val factorials = mutable.ListBuffer[Long]()\n        val factorials =\
    \ mutable.ListBuffer[Long]()\n        val factorials = mutable.ListBuffer[Long]()\n\
    \        val factorials = mutable.ListBuffer[Long]()\n        val factorials =\
    \ mutable.ListBuffer[Long]()\n        val factorials = mutable.ListBuffer[", " \
    \       val factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n\
    \        factorials += factorials.head * factorials.tail\n        factorials.take(n)",
  "        val factorials = mutable.ArrayBuffer.empty[Long]\n        for(i <- 1 to\
    \ n) {\n            if(i%2 == 0) {\n                factorials += i\n        \
    \    } else {\n                factorials += factorials.sum + i\n            }\n\
    \        }\n        factorials.toList", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val evens = mutable.ArrayBuffer.empty[Long]\n\
    \        val odds = mutable.ArrayBuffer.empty[Long]\n        val sumEvens = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumOdds = mutable.ArrayBuffer.empty[Long]\n        val evenSumOdds\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumEvens = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumOddEvens = mutable.ArrayBuffer.empty[Long]\n        val evenSumEvenOdds\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumOddEvenOdds = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumEvenOddEvens = mutable.ArrayBuffer.empty[Long]\n        val\
    \ evenSumOddEvenOddEvens = mutable.ArrayBuffer.empty[Long]\n        val evenSumEvenOddEvenOdds\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumOddEvenOddEvenOdds = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumEvenOddEvenOddEvens = mutable.ArrayBuffer.empty[Long]\n  \
    \      val evenSumOddEvenOddEvenOdds = mutable.ArrayBuffer.empty[Long]\n     \
    \   val evenSumEvenOddEvenOddEvenOdds = mutable.ArrayBuffer.empty[Long]\n    \
    \    val evenSumEvenOddEvenOddEvenOddEvens = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumOddEvenOddEvenOddEvenOdds = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumEvenOddEvenOddEvenOddEvenOdds = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumEvenOddEvenOddEvenOddEvenOddEvens = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumOddEvenOddEvenOddEvenOddEvenOdds = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumEvenOddEvenOddEvenOddEvenOddEvenOdds = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumEvenOddEvenOddEvenOddEvenOddEvenOddEvens = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumOddEvenOddEvenO", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        factorials += 1\n        factorials += factorials.last * 2\n        factorials\
    \ += factorials.last * factorials.last\n        factorials.take(n)", "       \
    \ val factorials = mutable.ListBuffer[Long]()\n        var sum = 0\n        var\
    \ i = 0\n        while (i < n) {\n            if (i % 2 == 0) {\n            \
    \    factorials += factorial(i) * i\n                sum += factorial(i)\n   \
    \         }\n            else {\n                factorials += factorial(i) *\
    \ (i + 1)\n                sum += factorial(i)\n            }\n            i +=\
    \ 1\n        }\n        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials ++= 1 to n\n        factorials ++= factorials.filter(_ % 2\
    \ == 0).map(_ * _)\n        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        for(i <- 1 to n){\n            if(i%2 == 0){\n                factorials\
    \ += i\n            }else{\n                factorials += factorials.last * i\n\
    \            }\n        }\n        factorials.toList", "        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val numbers = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorial = 1\n        val number = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val numbers = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val number = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val numbers = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val number = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val numbers = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val number = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val numbers = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val number = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val numbers = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val number = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val numbers = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val number = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val numbers = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val number = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val numbers = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val number = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val numbers = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val number = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val numbers = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val number = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val numbers = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val number = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val numbers = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val number = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val numbers = ", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        for(i <- 1 to n) {\n            if(i%2 == 0) {\n                factorials\
    \ += i\n            } else {\n                factorials += factorials.reduceLeft(_\
    \ * _)\n            }\n        }\n        factorials.toList", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        factorials += 1\n        factorials +=\
    \ 2\n        factorials += 3\n        factorials += 4\n        factorials += 5\n\
    \        factorials += 6\n        factorials += 7\n        factorials += 8\n \
    \       factorials += 9\n        factorials += 10\n        factorials += 11\n\
    \        factorials += 12\n        factorials += 13\n        factorials += 14\n\
    \        factorials += 15\n        factorials += 16\n        factorials += 17\n\
    \        factorials += 18\n        factorials += 19\n        factorials += 20\n\
    \        factorials += 21\n        factorials += 22\n        factorials += 23\n\
    \        factorials += 24\n        factorials += 25\n        factorials += 26\n\
    \        factorials += 27\n        factorials += 28\n        factorials += 29\n\
    \        factorials += 30\n        factorials += 31\n        factorials += 32\n\
    \        factorials += 33\n        factorials += 34\n        factorials += 35\n\
    \        factorials += 36\n        factorials += 37\n        factorials += 38\n\
    \        factorials += 39\n        factorials += 40\n        factorials += 41\n\
    \        factorials += 42\n        factorials += 43\n        factorials += 44\n\
    \        factorials += 45\n        factorials += 46\n        factorials += 47\n\
    \        factorials += 48\n        factorials += 49\n        factorials += 50\n\
    \        factorials += 51\n        factorials += 52\n        factorials += 53\n\
    \        factorials += 54\n        factorials += 55\n        factorials += 56\n\
    \        factorials += 57\n        factorials += 58\n        factorials += 59\n\
    \        factorials += 60\n        factorials += 61\n        factorials += 62\n\
    \        factorials += 63\n        factorials += 64\n        factorials += 65\n\
    \        factorials += 66\n        factorials += 67\n        factorials += 68\n\
    \        factorials += 69\n        factorials += 70\n        factorials += 71\n\
    \        factorials += 72\n        factorials += 73\n        factorials += 74\n\
    \        factorials += 75\n        factorials += 76\n        factorials += 77\n\
    \        factorials += 78\n        factorials += 79\n        factorials += 80\n\
    \        factorials += 81\n        factorials += 82\n        factorials += 83\n",
  "        val factorials = mutable.ArrayBuffer.empty[Long]\n        val numbers =\
    \ mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val number\
    \ = 0\n        for(i <- 1 to n){\n            if(i%2 == 0){\n                factorials\
    \ += factorial\n                numbers += number\n            }else{\n      \
    \          factorial = factorial * i\n                number = number+1\n    \
    \        }\n        }\n        factorials += factorial\n        numbers += number\n\
    \        numbers.toList", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- 1 to n) {\n            if (i % 2 == 0) {\n                factorials\
    \ += i\n            } else {\n                factorials += factorials.sum + i\n\
    \            }\n        }\n        factorials.toList", "        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += factorials.head\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail * factorials.tail\n \
    \       factorials += factorials.head * factorials.tail * factorials.tail * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail\n        factorials += factorials.head * factorials.tail *\
    \ factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        for(i <- 1 to n) {\n            if(i%2 == 0) {\n                factorials\
    \ += i\n            } else {\n                factorials += factorials.last *\
    \ i\n            }\n        }\n        factorials.toList", "        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorial = 1\n        for(i <- 1 to n) {\n            factorials\
    \ += factorial\n            sums += i\n        }\n        factorials.toList",
  "        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials +=\
    \ 1\n        factorials += factorials.last * 2\n        factorials += factorials.last\
    \ * factorials.last\n        factorials += factorials.last * factorials.last /\
    \ 2\n        factorials += factorials.last * factorials.last / 3\n        factorials\
    \ += factorials.last * factorials.last / 4\n        factorials += factorials.last\
    \ * factorials.last / 5\n        factorials += factorials.last * factorials.last\
    \ / 6\n        factorials += factorials.last * factorials.last / 7\n        factorials\
    \ += factorials.last * factorials.last / 8\n        factorials += factorials.last\
    \ * factorials.last / 9\n        factorials += factorials.last * factorials.last\
    \ / 10\n        factorials += factorials.last * factorials.last / 11\n       \
    \ factorials += factorials.last * factorials.last / 12\n        factorials +=\
    \ factorials.last * factorials.last / 13\n        factorials += factorials.last\
    \ * factorials.last / 14\n        factorials += factorials.last * factorials.last\
    \ / 15\n        factorials += factorials.last * factorials.last / 16\n       \
    \ factorials += factorials.last * factorials.last / 17\n        factorials +=\
    \ factorials.last * factorials.last / 18\n        factorials += factorials.last\
    \ * factorials.last / 19\n        factorials += factorials.last * factorials.last\
    \ / 20\n        factorials += factorials.last * factorials.last / 21\n       \
    \ factorials += factorials.last * factorials.last / 22\n        factorials +=\
    \ factorials.last * factorials.last / 23\n        factorials += factorials.last\
    \ * factorials.last / 24\n        factorials += factorials.last * factorials.last\
    \ / 25\n        factorials += factorials.last * factorials.last / 26\n       \
    \ factorials += factorials.last * factorials.last / 27\n        factorials +=\
    \ factorials.last * factorials.last / 28\n        factorials += factorials.last\
    \ * factorials.last / 29\n        factorials += factorials.last * factorials.last\
    \ / 30\n        factorial", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials += 1\n        factorials += factorials.head * factorials.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.head\n        factorials\
    \ += factorials.head * factorials.tail.tail.tail.head\n        factorials += factorials.head\
    \ * factorials.tail.tail.tail.tail.head\n        factorials += factorials.head\
    \ * factorials.tail.tail.tail.tail.tail.head\n        factorials += factorials.head\
    \ * factorials.tail.tail.tail.tail.tail.tail.tail.head\n        factorials +=\
    \ factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail."]
stop_tokens:
- "\n    }\n"
