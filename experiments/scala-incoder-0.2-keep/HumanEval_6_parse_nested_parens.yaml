name: HumanEval_6_parse_nested_parens
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Input to this function is a string represented multiple groups for nested\
  \ parentheses separated by spaces.\n    // For each of the group, output the deepest\
  \ level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of\
  \ nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((()))\
  \ () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string :\
  \ String) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
  (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
  \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
  )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
completions: ["        val paren_stack = mutable.Stack[String]()\n        val paren_stack_map\
    \ = mutable.Map[String, mutable.Stack[String]]()\n        val paren_stack_map_keys\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_values_updated = mutable.Map[String, Long]()\n\
    \        val paren_stack_map_values_updated_keys = mutable.Map[String, Long]()\n\
    \        val paren_stack_map_values_updated_values = mutable.Map[String, Long]()\n\
    \        val paren_stack_map_values_updated_keys_updated = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_values_updated_values_updated = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_values_updated_keys_updated_updated = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_values_updated_values_updated_updated =\
    \ mutable.Map[String, Long]()\n        val paren_stack_map_values_updated_keys_updated_updated_updated\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_updated_values_updated_updated_updated\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_updated_keys_updated_updated_updated_updated\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_updated_values_updated_updated_updated_updated\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_updated_keys_updated_updated_updated_updated_updated\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_updated_values_updated_updated_updated_updated_updated\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_updated_keys_updated_updated_updated_updated_updated_updated\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_updated_values_updated_updated_updated_updated_updated_updated\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_updated_keys_updated_updated_updated_updated_updated_updated_updated\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_updated_values_updated_updated_updated_updated_updated_updated_updated\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_updated_keys_updated_updated_updated_updated_updated_updated_updated_updated\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_updated_values_updated_updated_updated_updated_updated_updated_updated_updated\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_updated_keys_updated_updated_updated_updated_updated_updated_updated_updated_updated_updated\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_updated_values_updated_updated_",
  "        val paren_stack = mutable.Stack[Long]()\n        val paren_queue = mutable.Queue[Long]()\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.en", "        val paren_stack\
    \ = mutable.Stack[String]()\n        val paren_stack_map = mutable.HashMap[String,\
    \ Long]()\n        paren_stack.push(paren_string)\n        paren_stack_map.put(paren_string,\
    \ 0)\n        val max_level = 0\n        while(paren_stack.nonEmpty) {\n     \
    \       val paren_string = paren_stack.pop()\n            val level = paren_stack_map.get(paren_string)\n\
    \            if (level == null) {\n                paren_stack_map.put(paren_string,\
    \ paren_stack_map.get(paren_string) + 1)\n            } else {\n             \
    \   paren_stack_map.put(paren_string, level + 1)\n                if (level >\
    \ max_level) {\n                    max_level = level\n                }\n   \
    \         }\n            val groups = paren_string.split(\" \")\n            for(i\
    \ <- 0 until groups.length - 1) {\n                val group = groups(i)\n   \
    \             val next_group = groups(i + 1)\n                val next_level =\
    \ paren_stack_map.get(next_group)\n                if (next_level == null) {\n\
    \                    paren_stack.push(next_group)\n                    paren_stack_map.put(next_group,\
    \ paren_stack_map.get(next_group) + 1)\n                } else {\n           \
    \         paren_stack.push(next_group)\n                    paren_stack_map.put(next_group,\
    \ next_level + 1)\n                }\n            }\n        }\n        max_level",
  "        val paren_stack = mutable.Stack[String]()\n        val paren_stack_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_count = mutable.Stack[Long]()\n        val\
    \ paren_stack_top_count_count_size = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_count_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_count_count_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n", "        val paren_array = paren_string.split(\"\
    \ \")\n        val paren_array_size = paren_array.length\n        val max_level\
    \ = 0\n        val max_level_size = 0\n        val max_level_array = new Array[Long](paren_array_size)\n\
    \        val paren_array_index = 0\n        val paren_array_index_size = paren_array_size\n\
    \        val paren_array_index_index = 0\n        val paren_array_index_index_size\
    \ = paren_array_size\n        val paren_array_index_index_index = 0\n        val\
    \ paren_array_index_index_index_size = paren_array_size\n        val paren_array_index_index_index_index\
    \ = 0\n        val paren_array_index_index_index_index_size = paren_array_size\n\
    \        val paren_array_index_index_index_index_index = 0\n        val paren_array_index_index_index_index_index_size\
    \ = paren_array_size\n        val paren_array_index_index_index_index_index_index\
    \ = 0\n        val paren_array_index_index_index_index_index_index_size = paren_array_size\n\
    \        val paren_array_index_index_index_index_index_index_index = 0\n     \
    \   val paren_array_index_index_index_index_index_index_index_size = paren_array_size\n\
    \        val paren_array_index_index_index_index_index_index_index_index = 0\n\
    \        val paren_array_index_index_index_index_index_index_index_index_size\
    \ = paren_array_size\n        val paren_array_index_index_index_index_index_index_index_index_index\
    \ = 0\n        val paren_array_index_index_index_index_index_index_index_index_index_size\
    \ = paren_array_size\n        val paren_array_index_index_index_index_index_index_index_index_index_index\
    \ = 0\n        val paren_array_index_index_index_index_index_index_index_index_index_index_size\
    \ = paren_array_size\n        val paren_array_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0\n        val paren_array_index_index_index_index_index_index_index_index_index_index_index_size\
    \ = paren_array_size\n        val paren_array_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0\n        val paren_array_index_index_index_index_index_index_index_index_index_index_index_size\
    \ = paren_array_size\n        val paren_array_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0\n        val paren_array_index_index_index_index_index_index_index_index_index_index_index_index_size\
    \ = paren_array_size\n        val paren_array_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0\n        val paren_array_index_index_index_index_index_index_index_index_index_index_index_index_index_size\
    \ = paren_array_size\n        val paren_array_index_index_", "        val paren_stack\
    \ = mutable.Stack[Long]()\n        val paren_levels = mutable.ListBuffer[Long]()\n\
    \        val paren_level = 0\n        val paren_open = paren_string match {\n\
    \            case \"\" => 0\n            case x => x.indexOf('(')\n        }\n\
    \        val paren_close = paren_string match {\n            case \"\" => 0\n\
    \            case x => x.indexOf(')')\n        }\n        val paren_len = paren_close\
    \ - paren_open\n        val paren_len = paren_len / 2\n        val paren_len =\
    \ math.min(paren_len, paren_stack.size)\n        paren_stack.push(paren_len)\n\
    \        paren_levels += paren_level\n        paren_string match {\n         \
    \   case \"\" => paren_levels\n            case x => {\n                val paren_len\
    \ = x.indexOf('(') - x.indexOf(')')\n                val paren_len = math.min(paren_len,\
    \ paren_stack.size)\n                paren_stack.push(paren_len)\n           \
    \     paren_levels += paren_level\n                parseNestedParens(x)\n    \
    \        }\n        }", "        val paren_groups = paren_string.split(\" \").map(_.toLong)\n\
    \        val max_levels = paren_groups.foldLeft(0)((max, group) => max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max ", " \
    \       val paren_stack = mutable.Stack[String]()\n        val paren_stack_counter\
    \ = mutable.Stack[Long]()\n        val paren_stack_counter_size = mutable.Stack[Long]()\n\
    \        val paren_stack_counter_size_sizes = mutable.Stack[Long]()\n        val\
    \ paren_stack_counter_size_sizes_sizes = mutable.Stack[Long]()\n        val paren_stack_counter_size_sizes_sizes_sizes\
    \ = mutable.Stack[Long]()\n        val paren_stack_counter_size_sizes_sizes_sizes_sizes\
    \ = mutable.Stack[Long]()\n        val paren_stack_counter_size_sizes_sizes_sizes_sizes_sizes\
    \ = mutable.Stack[Long]()\n        val paren_stack_counter_size_sizes_sizes_sizes_sizes_sizes_sizes\
    \ = mutable.Stack[Long]()\n        val paren_stack_counter_size_sizes_sizes_sizes_sizes_sizes_sizes_sizes\
    \ = mutable.Stack[Long]()\n        val paren_stack_counter_size_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes\
    \ = mutable.Stack[Long]()\n        val paren_stack_counter_size_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes\
    \ = mutable.Stack[Long]()\n        val paren_stack_counter_size_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes\
    \ = mutable.Stack[Long]()\n        val paren_stack_counter_size_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes\
    \ = mutable.Stack[Long]()\n        val paren_stack_counter_size_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes\
    \ = mutable.Stack[Long]()\n        val paren_stack_counter_size_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes\
    \ = mutable.Stack[Long]()\n        val paren_stack_counter_size_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes\
    \ = mutable.Stack[Long]()\n        val paren_stack_counter_size_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_size",
  "        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_map =\
    \ mutable.Map[Long, Long]()\n        val paren_stack_map_keys = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_values = mutable.Map[Long, Long]()\n  \
    \      val paren_stack_map_values_keys = mutable.Map[Long, Long]()\n        val\
    \ paren_stack_map_values_values = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_keys_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_keys_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_keys_values_values_values_keys_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_",
  "        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_map =\
    \ mutable.Map[Long, Long]()\n        val paren_stack_map_keys = mutable.Set[Long]()\n\
    \        val paren_stack_map_values = mutable.Set[Long]()\n        val paren_stack_map_values_count\
    \ = mutable.Set[Long]()\n        val paren_stack_map_values_count_max = mutable.Set[Long]()\n\
    \        val paren_stack_map_values_count_max_index = mutable.Set[Long]()\n  \
    \      val paren_stack_map_values_count_max_value = mutable.Set[Long]()\n    \
    \    val paren_stack_map_values_count_max_key = None\n        val paren_stack_map_values_count_max_key_index\
    \ = None\n        val paren_stack_map_values_count_max_value_index = None\n  \
    \      val paren_stack_map_values_count_max_value = None\n        val paren_stack_map_values_count_max_key\
    \ = None\n        val paren_stack_map_values_count_max_key_index = None\n    \
    \    val paren_stack_map_values_count_max_value_index = None\n        val paren_stack_map_values_count_max_value\
    \ = None\n        val paren_stack_map_values_count_max_key = None\n        val\
    \ paren_stack_map_values_count_max_key_index = None\n        val paren_stack_map_values_count_max_value_index\
    \ = None\n        val paren_stack_map_values_count_max_value = None\n        val\
    \ paren_stack_map_values_count_max_key = None\n        val paren_stack_map_values_count_max_key_index\
    \ = None\n        val paren_stack_map_values_count_max_value_index = None\n  \
    \      val paren_stack_map_values_count_max_value = None\n        val paren_stack_map_values_count_max_key\
    \ = None\n        val paren_stack_map_values_count_max_key_index = None\n    \
    \    val paren_stack_map_values_count_max_value_index = None\n        val paren_stack_map_values_count_max_value\
    \ = None\n        val paren_stack_map_values_count_max_key = None\n        val\
    \ paren_stack_map_values_count_max_key_index = None\n        val paren_stack_map_values_count_max_value_index\
    \ = None\n        val paren_stack_map_values_count_max_value = None\n        val\
    \ paren_stack_map_values_count_max_key = None\n        val paren_stack_map_values_count_max_key_index\
    \ = None\n        val paren_stack_map_values_count_max_value_index = None\n  \
    \      val paren_stack_map_values_count_max_value = None\n        val paren_stack_map_values_count_max_key\
    \ = None\n        val paren_stack_map_values_count_max_key_index = None\n    \
    \    val paren_stack_map_values_count_max_", "        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        ", "        val paren_groups\
    \ = paren_string.split(\" \")\n        val paren_groups_with_paren = paren_groups.map(x\
    \ => if (x.equals(\"(\")) 1 else 0)\n        val paren_groups_with_paren_sum =\
    \ paren_groups_with_paren.sum\n        val paren_groups_with_paren_max = paren_groups_with_paren_sum\
    \ / paren_groups_with_paren_sum\n        val paren_groups_with_paren_max_index\
    \ = paren_groups_with_paren.indexOf(paren_groups_with_paren_max)\n        val\
    \ paren_groups_with_paren_max_index_plus_1 = paren_groups_with_paren_max_index\
    \ + 1\n        val paren_groups_with_paren_max_index_minus_1 = paren_groups_with_paren_max_index\
    \ - 1\n        val paren_groups_with_paren_max_index_minus_2 = paren_groups_with_paren_max_index\
    \ - 2\n        val paren_groups_with_paren_max_index_minus_3 = paren_groups_with_paren_max_index\
    \ - 3\n        val paren_groups_with_paren_max_index_minus_4 = paren_groups_with_paren_max_index\
    \ - 4\n        val paren_groups_with_paren_max_index_minus_5 = paren_groups_with_paren_max_index\
    \ - 5\n        val paren_groups_with_paren_max_index_minus_6 = paren_groups_with_paren_max_index\
    \ - 6\n        val paren_groups_with_paren_max_index_minus_7 = paren_groups_with_paren_max_index\
    \ - 7\n        val paren_groups_with_paren_max_index_minus_8 = paren_groups_with_paren_max_index\
    \ - 8\n        val paren_groups_with_paren_max_index_minus_9 = paren_groups_with_paren_max_index\
    \ - 9\n        val paren_groups_with_paren_max_index_minus_10 = paren_groups_with_paren_max_index\
    \ - 10\n        val paren_groups_with_paren_max_index_minus_11 = paren_groups_with_paren_max_index\
    \ - 11\n        val paren_groups_with_paren_max_index_minus_12 = paren_groups_with_paren_max_index\
    \ - 12\n        val paren_groups_with_paren_max_index_minus_13 = paren_groups_with_paren_max_index\
    \ - 13\n        val paren_groups_with_paren_max_index_minus_14 = paren_groups_with_paren_max_index\
    \ - 14\n        val paren_groups_with_paren_max_index_minus_15 = paren_groups_with_paren_max_index\
    \ - 15\n        val paren_groups_with_paren_max_index_minus_16 = paren_groups_with_paren_max_index\
    \ - 16\n        val ", "        val paren_stack = mutable.Stack[String]()\n  \
    \      val paren_stack_string = mutable.Stack[String]()\n        val paren_stack_level\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_string = mutable.Stack[Int]()\n\
    \        val paren_stack_level_string2 = mutable.Stack[Int]()\n        val paren_stack_level_string3\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_string4 = mutable.Stack[Int]()\n\
    \        val paren_stack_level_string5 = mutable.Stack[Int]()\n        val paren_stack_level_string6\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_string7 = mutable.Stack[Int]()\n\
    \        val paren_stack_level_string8 = mutable.Stack[Int]()\n        val paren_stack_level_string9\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_string10 = mutable.Stack[Int]()\n\
    \        val paren_stack_level_string11 = mutable.Stack[Int]()\n        val paren_stack_level_string12\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_string13 = mutable.Stack[Int]()\n\
    \        val paren_stack_level_string14 = mutable.Stack[Int]()\n        val paren_stack_level_string15\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_string16 = mutable.Stack[Int]()\n\
    \        val paren_stack_level_string17 = mutable.Stack[Int]()\n        val paren_stack_level_string18\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_string19 = mutable.Stack[Int]()\n\
    \        val paren_stack_level_string20 = mutable.Stack[Int]()\n        val paren_stack_level_string21\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_string22 = mutable.Stack[Int]()\n\
    \        val paren_stack_level_string23 = mutable.Stack[Int]()\n        val paren_stack_level_string24\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_string25 = mutable.Stack[Int]()\n\
    \        val paren_stack_level_string26 = mutable.Stack[Int]()\n        val paren_stack_level_string27\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_string28 = mutable.Stack[Int]()\n\
    \        val paren_stack_", "        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_queue = mutable.Queue[Long]()\n        val paren_levels = mutable.Map[Long,\
    \ Long]()\n        val paren_levels_map = mutable.Map[Long, Long]()\n        val\
    \ paren_levels_map_reverse = mutable.Map[Long, Long]()\n        val paren_levels_map_reverse2\
    \ = mutable.Map[Long, Long]()\n        val paren_levels_map_reverse3 = mutable.Map[Long,\
    \ Long]()\n        val paren_levels_map_reverse4 = mutable.Map[Long, Long]()\n\
    \        val paren_levels_map_reverse5 = mutable.Map[Long, Long]()\n        val\
    \ paren_levels_map_reverse6 = mutable.Map[Long, Long]()\n        val paren_levels_map_reverse7\
    \ = mutable.Map[Long, Long]()\n        val paren_levels_map_reverse8 = mutable.Map[Long,\
    \ Long]()\n        val paren_levels_map_reverse9 = mutable.Map[Long, Long]()\n\
    \        val paren_levels_map_reverse10 = mutable.Map[Long, Long]()\n        val\
    \ paren_levels_map_reverse11 = mutable.Map[Long, Long]()\n        val paren_levels_map_reverse12\
    \ = mutable.Map[Long, Long]()\n        val paren_levels_map_reverse13 = mutable.Map[Long,\
    \ Long]()\n        val paren_levels_map_reverse14 = mutable.Map[Long, Long]()\n\
    \        val paren_levels_map_reverse15 = mutable.Map[Long, Long]()\n        val\
    \ paren_levels_map_reverse16 = mutable.Map[Long, Long]()\n        val paren_levels_map_reverse17\
    \ = mutable.Map[Long, Long]()\n        val paren_levels_map_reverse18 = mutable.Map[Long,\
    \ Long]()\n        val paren_levels_map_reverse19 = mutable.Map[Long, Long]()\n\
    \        val paren_levels_map_reverse20 = mutable.Map[Long, Long]()\n        val\
    \ paren_levels_map_reverse21 = mutable.Map[Long, Long]()\n        val paren_levels_map_reverse22\
    \ = mutable.Map[Long, Long]()\n        val paren_levels_map_reverse23 = mutable.Map[Long,\
    \ Long]()\n        val paren_levels_map_reverse24 = mutable.Map[Long, Long]()\n\
    \        val paren_levels_map_reverse25 = ", "        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth = mutable.Stack[Long]()\n        val paren_stack_max_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_size = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_depth_pos_depth = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth =\
    \ mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth_depth_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth_depth_depth_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth_depth_depth_size\
    \ = mutable.Stack[Long", "        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_map = mutable.Map[String, List[Long]]()\n        paren_string.split(\"\
    \\\\s+\").foreach(s => {\n            val paren_str = if (s.startsWith(\"(\"))\
    \ \"(\" + s else s\n            val paren_str = if (paren_stack.last.startsWith(\"\
    )\")) paren_str + \")\" else paren_str\n            paren_stack.push(paren_str)\n\
    \            paren_stack_map.update(paren_str, mutable.List())\n        })\n \
    \       paren_stack_map.values.flatten.foldLeft(0L) { (max, list) => if (list.size\
    \ >= max) max else list.size }", "        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_levels = mutable.Stack[Long]()\n        paren_stack.push(paren_string)\n\
    \        paren_levels.push(0)\n        val paren_levels_size = paren_levels.size\n\
    \        val paren_levels_limit = paren_levels_size + 1\n        while(paren_stack.nonEmpty)\
    \ {\n            val paren_string = paren_stack.pop()\n            val paren_level\
    \ = paren_levels.pop()\n            val paren_levels_size = paren_levels.size\n\
    \            val paren_levels_limit = paren_levels_size + 1\n            val paren_levels_limit\
    \ = if (paren_levels_size > paren_levels_limit) paren_levels_limit else paren_levels_size\n\
    \            val paren_levels_limit = if (paren_levels_size > paren_levels_limit)\
    \ paren_levels_limit else paren_levels_size\n            val paren_levels_limit\
    \ = if (paren_levels_size > paren_levels_limit) paren_levels_limit else paren_levels_size\n\
    \            val paren_levels_limit = if (paren_levels_size > paren_levels_limit)\
    \ paren_levels_limit else paren_levels_size\n            val paren_levels_limit\
    \ = if (paren_levels_size > paren_levels_limit) paren_levels_limit else paren_levels_size\n\
    \            val paren_levels_limit = if (paren_levels_size > paren_levels_limit)\
    \ paren_levels_limit else paren_levels_size\n            val paren_levels_limit\
    \ = if (paren_levels_size > paren_levels_limit) paren_levels_limit else paren_levels_size\n\
    \            val paren_levels_limit = if (paren_levels_size > paren_levels_limit)\
    \ paren_levels_limit else paren_levels_size\n            val paren_levels_limit\
    \ = if (paren_levels_size > paren_levels_limit) paren_levels_limit else paren_levels_size\n\
    \            val paren_levels_limit = if (paren_levels_size > paren_levels_limit)\
    \ paren_levels_limit else paren_levels_size\n            val paren_levels_limit\
    \ = if (paren_levels_size > paren_levels_limit) paren_levels_limit else paren_levels_size\n\
    \            val paren_levels_limit = if (paren_levels_size > paren_levels_limit)\
    \ paren_levels_limit else paren_levels_size\n            val paren_levels_limit\
    \ = if (paren_levels_size > paren", "        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_string = mutable.Stack[String]()\n        val paren_stack_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_string = mutable.Stack[String]()\n\
    \        val paren_stack_level_count = mutable.Stack[Long]()\n        val paren_stack_level_count_string\
    \ = mutable.Stack[String]()\n        val paren_stack_level_count_long = mutable.Stack[Long]()\n\
    \        val paren_stack_level_count_long_string = mutable.Stack[String]()\n \
    \       val paren_stack_level_count_long_string = mutable.Stack[String]()\n  \
    \      val paren_stack_level_count_long_string = mutable.Stack[String]()\n   \
    \     val paren_stack_level_count_long_string = mutable.Stack[String]()\n    \
    \    val paren_stack_level_count_long_string = mutable.Stack[String]()\n     \
    \   val paren_stack_level_count_long_string = mutable.Stack[String]()\n      \
    \  val paren_stack_level_count_long_string = mutable.Stack[String]()\n       \
    \ val paren_stack_level_count_long_string = mutable.Stack[String]()\n        val\
    \ paren_stack_level_count_long_string = mutable.Stack[String]()\n        val paren_stack_level_count_long_string\
    \ = mutable.Stack[String]()\n        val paren_stack_level_count_long_string =\
    \ mutable.Stack[String]()\n        val paren_stack_level_count_long_string = mutable.Stack[String]()\n\
    \        val paren_stack_level_count_long_string = mutable.Stack[String]()\n \
    \       val paren_stack_level_count_long_string = mutable.Stack[String]()\n  \
    \      val paren_stack_level_count_long_string = mutable.Stack[String]()\n   \
    \     val paren_stack_level_count_long_string = mutable.Stack[String]()\n    \
    \    val paren_stack_level_count_long_string = mutable.Stack[String]()\n     \
    \   val paren_stack_level_count_long_string = mutable.Stack[String]()\n      \
    \  val paren_stack_level_count_long_string = mutable.Stack[String]()\n       \
    \ val paren_stack_level_count_long_string = mutable.Stack[String]()\n        val\
    \ paren_stack_level_count_long_string = mutable.Stack[String]()\n        val paren_stack_level_count_long_string\
    \ = mutable.Stack[String]()\n        val paren_stack_level_count_long", "    \
    \    val paren_stack = mutable.Stack[String]()\n        val paren_stack_size =\
    \ mutable.Stack[Int]()\n        val paren_stack_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_top\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top = mutable.Stack[Long]()\n        val paren_stack_top_top_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_size = mutable.Stack[Int]()\n       \
    \ val paren_stack_top_top_top_top_top = mutable.Stack[Long]()\n        val paren_stack_top_top_top_top_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_", "        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_top = paren_stack.size\n        val paren_stack_max_level\
    \ = paren_stack_top\n        val paren_stack_max_level_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_max_level_stack_top = paren_stack_max_level_stack.size\n\
    \        val paren_stack_max_level_stack_max_level = paren_stack_max_level_stack_top\n\
    \        val paren_stack_max_level_stack_max_level_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_max_level_stack_max_level_stack_top = paren_stack_max_level_stack_max_level_stack.size\n\
    \        val paren_stack_max_level_stack_max_level_stack_max_level = paren_stack_max_level_stack_max_level_stack_top\n\
    \        val paren_stack_max_level_stack_max_level_stack_max_level_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_max_level_stack_max_level_stack_max_level_stack_top =\
    \ paren_stack_max_level_stack_max_level_stack_max_level_stack.size\n        val\
    \ paren_stack_max_level_stack_max_level_stack_max_level_stack_max_level = paren_stack_max_level_stack_max_level_stack_max_level_stack_top\n\
    \        val paren_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_top\
    \ = paren_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack.size\n\
    \        val paren_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_max_level\
    \ = paren_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_top\n\
    \        val paren_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_top\
    \ = paren_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack.size\n\
    \        val paren_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_max_level\
    \ = paren_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_top\n\
    \        val paren_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_top\
    \ = paren_stack_max_level_stack_"]
stop_tokens:
- "\n    }\n"
