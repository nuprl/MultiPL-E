name: HumanEval_6_parse_nested_parens
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Input to this function is a string represented multiple groups for nested\
  \ parentheses separated by spaces.\n    // For each of the group, output the deepest\
  \ level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of\
  \ nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((()))\
  \ () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string :\
  \ String) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
  (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
  \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
  )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
completions: ["        val paren_stack = mutable.Stack[String]()\n        val paren_stack_map\
    \ = mutable.Map[String, mutable.Stack[String]]()\n        val paren_stack_map_keys\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_values_updated = mutable.Map[String, Long]()\n\
    \        val paren_stack_map_values_updated_keys = mutable.Map[String, Long]()\n\
    \        val paren_stack_map_values_updated_values = mutable.Map[String, Long]()\n\
    \        val paren_stack_map_values_updated_keys_updated = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_values_updated_values_updated = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_values_updated_keys_updated_updated = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_values_updated_values_updated_updated =\
    \ mutable.Map[String, Long]()\n        val paren_stack_map_values_updated_keys_updated_updated_updated\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_updated_values_updated_updated_updated\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_updated_keys_updated_updated_updated_updated\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_updated_values_updated_updated_updated_updated\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_updated_keys_updated_updated_updated_updated_updated\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_updated_values_updated_updated_updated_updated_updated\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_updated_keys_updated_updated_updated_updated_updated_updated\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_updated_values_updated_updated_updated_updated_updated_updated\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_updated_keys_updated_updated_updated_updated_updated_updated_updated\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_updated_values_updated_updated_updated_updated_updated_updated_updated\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_updated_keys_updated_updated_updated_updated_updated_updated_updated_updated\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_updated_values_updated_updated_updated_updated_updated_updated_updated_updated\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_updated_keys_updated_updated_updated_updated_updated_updated_updated_updated_updated_updated\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_updated_values_updated_updated_",
  "        val paren_stack = mutable.Stack[Long]()\n        val paren_queue = mutable.Queue[Long]()\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.en", "        val paren_stack\
    \ = mutable.Stack[String]()\n        val paren_stack_map = mutable.HashMap[String,\
    \ Long]()\n        paren_stack.push(paren_string)\n        paren_stack_map.put(paren_string,\
    \ 0)\n        val max_level = 0\n        while(paren_stack.nonEmpty) {\n     \
    \       val paren_string = paren_stack.pop()\n            val level = paren_stack_map.get(paren_string)\n\
    \            if (level == null) {\n                paren_stack_map.put(paren_string,\
    \ paren_stack_map.get(paren_string) + 1)\n            } else {\n             \
    \   paren_stack_map.put(paren_string, level + 1)\n                if (level >\
    \ max_level) {\n                    max_level = level\n                }\n   \
    \         }\n            val groups = paren_string.split(\" \")\n            for(i\
    \ <- 0 until groups.length - 1) {\n                val group = groups(i)\n   \
    \             val next_group = groups(i + 1)\n                val next_level =\
    \ paren_stack_map.get(next_group)\n                if (next_level == null) {\n\
    \                    paren_stack.push(next_group)\n                    paren_stack_map.put(next_group,\
    \ paren_stack_map.get(next_group) + 1)\n                } else {\n           \
    \         paren_stack.push(next_group)\n                    paren_stack_map.put(next_group,\
    \ next_level + 1)\n                }\n            }\n        }\n        max_level",
  "        val paren_stack = mutable.Stack[String]()\n        val paren_stack_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_count = mutable.Stack[Long]()\n        val\
    \ paren_stack_top_count_count_size = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_count_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_count_count_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n", "        val paren_array = paren_string.split(\"\
    \ \")\n        val paren_array_size = paren_array.length\n        val max_level\
    \ = 0\n        val max_level_size = 0\n        val max_level_array = new Array[Long](paren_array_size)\n\
    \        val paren_array_index = 0\n        val paren_array_index_size = paren_array_size\n\
    \        val paren_array_index_index = 0\n        val paren_array_index_index_size\
    \ = paren_array_size\n        val paren_array_index_index_index = 0\n        val\
    \ paren_array_index_index_index_size = paren_array_size\n        val paren_array_index_index_index_index\
    \ = 0\n        val paren_array_index_index_index_index_size = paren_array_size\n\
    \        val paren_array_index_index_index_index_index = 0\n        val paren_array_index_index_index_index_index_size\
    \ = paren_array_size\n        val paren_array_index_index_index_index_index_index\
    \ = 0\n        val paren_array_index_index_index_index_index_index_size = paren_array_size\n\
    \        val paren_array_index_index_index_index_index_index_index = 0\n     \
    \   val paren_array_index_index_index_index_index_index_index_size = paren_array_size\n\
    \        val paren_array_index_index_index_index_index_index_index_index = 0\n\
    \        val paren_array_index_index_index_index_index_index_index_index_size\
    \ = paren_array_size\n        val paren_array_index_index_index_index_index_index_index_index_index\
    \ = 0\n        val paren_array_index_index_index_index_index_index_index_index_index_size\
    \ = paren_array_size\n        val paren_array_index_index_index_index_index_index_index_index_index_index\
    \ = 0\n        val paren_array_index_index_index_index_index_index_index_index_index_index_size\
    \ = paren_array_size\n        val paren_array_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0\n        val paren_array_index_index_index_index_index_index_index_index_index_index_index_size\
    \ = paren_array_size\n        val paren_array_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0\n        val paren_array_index_index_index_index_index_index_index_index_index_index_index_size\
    \ = paren_array_size\n        val paren_array_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0\n        val paren_array_index_index_index_index_index_index_index_index_index_index_index_index_size\
    \ = paren_array_size\n        val paren_array_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0\n        val paren_array_index_index_index_index_index_index_index_index_index_index_index_index_index_size\
    \ = paren_array_size\n        val paren_array_index_index_", "        val paren_stack\
    \ = mutable.Stack[Long]()\n        val paren_levels = mutable.ListBuffer[Long]()\n\
    \        val paren_level = 0\n        val paren_open = paren_string match {\n\
    \            case \"\" => 0\n            case x => x.indexOf('(')\n        }\n\
    \        val paren_close = paren_string match {\n            case \"\" => 0\n\
    \            case x => x.indexOf(')')\n        }\n        val paren_len = paren_close\
    \ - paren_open\n        val paren_len = paren_len / 2\n        val paren_len =\
    \ math.min(paren_len, paren_stack.size)\n        paren_stack.push(paren_len)\n\
    \        paren_levels += paren_level\n        paren_string match {\n         \
    \   case \"\" => paren_levels\n            case x => {\n                val paren_len\
    \ = x.indexOf('(') - x.indexOf(')')\n                val paren_len = math.min(paren_len,\
    \ paren_stack.size)\n                paren_stack.push(paren_len)\n           \
    \     paren_levels += paren_level\n                parseNestedParens(x)\n    \
    \        }\n        }", "        val paren_groups = paren_string.split(\" \").map(_.toLong)\n\
    \        val max_levels = paren_groups.foldLeft(0)((max, group) => max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max ", " \
    \       val paren_stack = mutable.Stack[String]()\n        val paren_stack_counter\
    \ = mutable.Stack[Long]()\n        val paren_stack_counter_size = mutable.Stack[Long]()\n\
    \        val paren_stack_counter_size_sizes = mutable.Stack[Long]()\n        val\
    \ paren_stack_counter_size_sizes_sizes = mutable.Stack[Long]()\n        val paren_stack_counter_size_sizes_sizes_sizes\
    \ = mutable.Stack[Long]()\n        val paren_stack_counter_size_sizes_sizes_sizes_sizes\
    \ = mutable.Stack[Long]()\n        val paren_stack_counter_size_sizes_sizes_sizes_sizes_sizes\
    \ = mutable.Stack[Long]()\n        val paren_stack_counter_size_sizes_sizes_sizes_sizes_sizes_sizes\
    \ = mutable.Stack[Long]()\n        val paren_stack_counter_size_sizes_sizes_sizes_sizes_sizes_sizes_sizes\
    \ = mutable.Stack[Long]()\n        val paren_stack_counter_size_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes\
    \ = mutable.Stack[Long]()\n        val paren_stack_counter_size_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes\
    \ = mutable.Stack[Long]()\n        val paren_stack_counter_size_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes\
    \ = mutable.Stack[Long]()\n        val paren_stack_counter_size_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes\
    \ = mutable.Stack[Long]()\n        val paren_stack_counter_size_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes\
    \ = mutable.Stack[Long]()\n        val paren_stack_counter_size_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes\
    \ = mutable.Stack[Long]()\n        val paren_stack_counter_size_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes\
    \ = mutable.Stack[Long]()\n        val paren_stack_counter_size_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_size",
  "        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_map =\
    \ mutable.Map[Long, Long]()\n        val paren_stack_map_keys = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_values = mutable.Map[Long, Long]()\n  \
    \      val paren_stack_map_values_keys = mutable.Map[Long, Long]()\n        val\
    \ paren_stack_map_values_values = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_keys_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_keys_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_keys_values_values_values_keys_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_",
  "        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_map =\
    \ mutable.Map[Long, Long]()\n        val paren_stack_map_keys = mutable.Set[Long]()\n\
    \        val paren_stack_map_values = mutable.Set[Long]()\n        val paren_stack_map_values_count\
    \ = mutable.Set[Long]()\n        val paren_stack_map_values_count_max = mutable.Set[Long]()\n\
    \        val paren_stack_map_values_count_max_index = mutable.Set[Long]()\n  \
    \      val paren_stack_map_values_count_max_value = mutable.Set[Long]()\n    \
    \    val paren_stack_map_values_count_max_key = None\n        val paren_stack_map_values_count_max_key_index\
    \ = None\n        val paren_stack_map_values_count_max_value_index = None\n  \
    \      val paren_stack_map_values_count_max_value = None\n        val paren_stack_map_values_count_max_key\
    \ = None\n        val paren_stack_map_values_count_max_key_index = None\n    \
    \    val paren_stack_map_values_count_max_value_index = None\n        val paren_stack_map_values_count_max_value\
    \ = None\n        val paren_stack_map_values_count_max_key = None\n        val\
    \ paren_stack_map_values_count_max_key_index = None\n        val paren_stack_map_values_count_max_value_index\
    \ = None\n        val paren_stack_map_values_count_max_value = None\n        val\
    \ paren_stack_map_values_count_max_key = None\n        val paren_stack_map_values_count_max_key_index\
    \ = None\n        val paren_stack_map_values_count_max_value_index = None\n  \
    \      val paren_stack_map_values_count_max_value = None\n        val paren_stack_map_values_count_max_key\
    \ = None\n        val paren_stack_map_values_count_max_key_index = None\n    \
    \    val paren_stack_map_values_count_max_value_index = None\n        val paren_stack_map_values_count_max_value\
    \ = None\n        val paren_stack_map_values_count_max_key = None\n        val\
    \ paren_stack_map_values_count_max_key_index = None\n        val paren_stack_map_values_count_max_value_index\
    \ = None\n        val paren_stack_map_values_count_max_value = None\n        val\
    \ paren_stack_map_values_count_max_key = None\n        val paren_stack_map_values_count_max_key_index\
    \ = None\n        val paren_stack_map_values_count_max_value_index = None\n  \
    \      val paren_stack_map_values_count_max_value = None\n        val paren_stack_map_values_count_max_key\
    \ = None\n        val paren_stack_map_values_count_max_key_index = None\n    \
    \    val paren_stack_map_values_count_max_", "        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        ", "        val paren_groups\
    \ = paren_string.split(\" \")\n        val paren_groups_with_paren = paren_groups.map(x\
    \ => if (x.equals(\"(\")) 1 else 0)\n        val paren_groups_with_paren_sum =\
    \ paren_groups_with_paren.sum\n        val paren_groups_with_paren_max = paren_groups_with_paren_sum\
    \ / paren_groups_with_paren_sum\n        val paren_groups_with_paren_max_index\
    \ = paren_groups_with_paren.indexOf(paren_groups_with_paren_max)\n        val\
    \ paren_groups_with_paren_max_index_plus_1 = paren_groups_with_paren_max_index\
    \ + 1\n        val paren_groups_with_paren_max_index_minus_1 = paren_groups_with_paren_max_index\
    \ - 1\n        val paren_groups_with_paren_max_index_minus_2 = paren_groups_with_paren_max_index\
    \ - 2\n        val paren_groups_with_paren_max_index_minus_3 = paren_groups_with_paren_max_index\
    \ - 3\n        val paren_groups_with_paren_max_index_minus_4 = paren_groups_with_paren_max_index\
    \ - 4\n        val paren_groups_with_paren_max_index_minus_5 = paren_groups_with_paren_max_index\
    \ - 5\n        val paren_groups_with_paren_max_index_minus_6 = paren_groups_with_paren_max_index\
    \ - 6\n        val paren_groups_with_paren_max_index_minus_7 = paren_groups_with_paren_max_index\
    \ - 7\n        val paren_groups_with_paren_max_index_minus_8 = paren_groups_with_paren_max_index\
    \ - 8\n        val paren_groups_with_paren_max_index_minus_9 = paren_groups_with_paren_max_index\
    \ - 9\n        val paren_groups_with_paren_max_index_minus_10 = paren_groups_with_paren_max_index\
    \ - 10\n        val paren_groups_with_paren_max_index_minus_11 = paren_groups_with_paren_max_index\
    \ - 11\n        val paren_groups_with_paren_max_index_minus_12 = paren_groups_with_paren_max_index\
    \ - 12\n        val paren_groups_with_paren_max_index_minus_13 = paren_groups_with_paren_max_index\
    \ - 13\n        val paren_groups_with_paren_max_index_minus_14 = paren_groups_with_paren_max_index\
    \ - 14\n        val paren_groups_with_paren_max_index_minus_15 = paren_groups_with_paren_max_index\
    \ - 15\n        val paren_groups_with_paren_max_index_minus_16 = paren_groups_with_paren_max_index\
    \ - 16\n        val ", "        val paren_stack = mutable.Stack[String]()\n  \
    \      val paren_stack_string = mutable.Stack[String]()\n        val paren_stack_level\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_string = mutable.Stack[Int]()\n\
    \        val paren_stack_level_string2 = mutable.Stack[Int]()\n        val paren_stack_level_string3\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_string4 = mutable.Stack[Int]()\n\
    \        val paren_stack_level_string5 = mutable.Stack[Int]()\n        val paren_stack_level_string6\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_string7 = mutable.Stack[Int]()\n\
    \        val paren_stack_level_string8 = mutable.Stack[Int]()\n        val paren_stack_level_string9\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_string10 = mutable.Stack[Int]()\n\
    \        val paren_stack_level_string11 = mutable.Stack[Int]()\n        val paren_stack_level_string12\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_string13 = mutable.Stack[Int]()\n\
    \        val paren_stack_level_string14 = mutable.Stack[Int]()\n        val paren_stack_level_string15\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_string16 = mutable.Stack[Int]()\n\
    \        val paren_stack_level_string17 = mutable.Stack[Int]()\n        val paren_stack_level_string18\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_string19 = mutable.Stack[Int]()\n\
    \        val paren_stack_level_string20 = mutable.Stack[Int]()\n        val paren_stack_level_string21\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_string22 = mutable.Stack[Int]()\n\
    \        val paren_stack_level_string23 = mutable.Stack[Int]()\n        val paren_stack_level_string24\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_string25 = mutable.Stack[Int]()\n\
    \        val paren_stack_level_string26 = mutable.Stack[Int]()\n        val paren_stack_level_string27\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_string28 = mutable.Stack[Int]()\n\
    \        val paren_stack_", "        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_queue = mutable.Queue[Long]()\n        val paren_levels = mutable.Map[Long,\
    \ Long]()\n        val paren_levels_map = mutable.Map[Long, Long]()\n        val\
    \ paren_levels_map_reverse = mutable.Map[Long, Long]()\n        val paren_levels_map_reverse2\
    \ = mutable.Map[Long, Long]()\n        val paren_levels_map_reverse3 = mutable.Map[Long,\
    \ Long]()\n        val paren_levels_map_reverse4 = mutable.Map[Long, Long]()\n\
    \        val paren_levels_map_reverse5 = mutable.Map[Long, Long]()\n        val\
    \ paren_levels_map_reverse6 = mutable.Map[Long, Long]()\n        val paren_levels_map_reverse7\
    \ = mutable.Map[Long, Long]()\n        val paren_levels_map_reverse8 = mutable.Map[Long,\
    \ Long]()\n        val paren_levels_map_reverse9 = mutable.Map[Long, Long]()\n\
    \        val paren_levels_map_reverse10 = mutable.Map[Long, Long]()\n        val\
    \ paren_levels_map_reverse11 = mutable.Map[Long, Long]()\n        val paren_levels_map_reverse12\
    \ = mutable.Map[Long, Long]()\n        val paren_levels_map_reverse13 = mutable.Map[Long,\
    \ Long]()\n        val paren_levels_map_reverse14 = mutable.Map[Long, Long]()\n\
    \        val paren_levels_map_reverse15 = mutable.Map[Long, Long]()\n        val\
    \ paren_levels_map_reverse16 = mutable.Map[Long, Long]()\n        val paren_levels_map_reverse17\
    \ = mutable.Map[Long, Long]()\n        val paren_levels_map_reverse18 = mutable.Map[Long,\
    \ Long]()\n        val paren_levels_map_reverse19 = mutable.Map[Long, Long]()\n\
    \        val paren_levels_map_reverse20 = mutable.Map[Long, Long]()\n        val\
    \ paren_levels_map_reverse21 = mutable.Map[Long, Long]()\n        val paren_levels_map_reverse22\
    \ = mutable.Map[Long, Long]()\n        val paren_levels_map_reverse23 = mutable.Map[Long,\
    \ Long]()\n        val paren_levels_map_reverse24 = mutable.Map[Long, Long]()\n\
    \        val paren_levels_map_reverse25 = ", "        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth = mutable.Stack[Long]()\n        val paren_stack_max_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_size = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_depth_pos_depth = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth =\
    \ mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth_depth_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth_depth_depth_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth_depth_depth_size\
    \ = mutable.Stack[Long", "        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_map = mutable.Map[String, List[Long]]()\n        paren_string.split(\"\
    \\\\s+\").foreach(s => {\n            val paren_str = if (s.startsWith(\"(\"))\
    \ \"(\" + s else s\n            val paren_str = if (paren_stack.last.startsWith(\"\
    )\")) paren_str + \")\" else paren_str\n            paren_stack.push(paren_str)\n\
    \            paren_stack_map.update(paren_str, mutable.List())\n        })\n \
    \       paren_stack_map.values.flatten.foldLeft(0L) { (max, list) => if (list.size\
    \ >= max) max else list.size }", "        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_levels = mutable.Stack[Long]()\n        paren_stack.push(paren_string)\n\
    \        paren_levels.push(0)\n        val paren_levels_size = paren_levels.size\n\
    \        val paren_levels_limit = paren_levels_size + 1\n        while(paren_stack.nonEmpty)\
    \ {\n            val paren_string = paren_stack.pop()\n            val paren_level\
    \ = paren_levels.pop()\n            val paren_levels_size = paren_levels.size\n\
    \            val paren_levels_limit = paren_levels_size + 1\n            val paren_levels_limit\
    \ = if (paren_levels_size > paren_levels_limit) paren_levels_limit else paren_levels_size\n\
    \            val paren_levels_limit = if (paren_levels_size > paren_levels_limit)\
    \ paren_levels_limit else paren_levels_size\n            val paren_levels_limit\
    \ = if (paren_levels_size > paren_levels_limit) paren_levels_limit else paren_levels_size\n\
    \            val paren_levels_limit = if (paren_levels_size > paren_levels_limit)\
    \ paren_levels_limit else paren_levels_size\n            val paren_levels_limit\
    \ = if (paren_levels_size > paren_levels_limit) paren_levels_limit else paren_levels_size\n\
    \            val paren_levels_limit = if (paren_levels_size > paren_levels_limit)\
    \ paren_levels_limit else paren_levels_size\n            val paren_levels_limit\
    \ = if (paren_levels_size > paren_levels_limit) paren_levels_limit else paren_levels_size\n\
    \            val paren_levels_limit = if (paren_levels_size > paren_levels_limit)\
    \ paren_levels_limit else paren_levels_size\n            val paren_levels_limit\
    \ = if (paren_levels_size > paren_levels_limit) paren_levels_limit else paren_levels_size\n\
    \            val paren_levels_limit = if (paren_levels_size > paren_levels_limit)\
    \ paren_levels_limit else paren_levels_size\n            val paren_levels_limit\
    \ = if (paren_levels_size > paren_levels_limit) paren_levels_limit else paren_levels_size\n\
    \            val paren_levels_limit = if (paren_levels_size > paren_levels_limit)\
    \ paren_levels_limit else paren_levels_size\n            val paren_levels_limit\
    \ = if (paren_levels_size > paren", "        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_string = mutable.Stack[String]()\n        val paren_stack_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_string = mutable.Stack[String]()\n\
    \        val paren_stack_level_count = mutable.Stack[Long]()\n        val paren_stack_level_count_string\
    \ = mutable.Stack[String]()\n        val paren_stack_level_count_long = mutable.Stack[Long]()\n\
    \        val paren_stack_level_count_long_string = mutable.Stack[String]()\n \
    \       val paren_stack_level_count_long_string = mutable.Stack[String]()\n  \
    \      val paren_stack_level_count_long_string = mutable.Stack[String]()\n   \
    \     val paren_stack_level_count_long_string = mutable.Stack[String]()\n    \
    \    val paren_stack_level_count_long_string = mutable.Stack[String]()\n     \
    \   val paren_stack_level_count_long_string = mutable.Stack[String]()\n      \
    \  val paren_stack_level_count_long_string = mutable.Stack[String]()\n       \
    \ val paren_stack_level_count_long_string = mutable.Stack[String]()\n        val\
    \ paren_stack_level_count_long_string = mutable.Stack[String]()\n        val paren_stack_level_count_long_string\
    \ = mutable.Stack[String]()\n        val paren_stack_level_count_long_string =\
    \ mutable.Stack[String]()\n        val paren_stack_level_count_long_string = mutable.Stack[String]()\n\
    \        val paren_stack_level_count_long_string = mutable.Stack[String]()\n \
    \       val paren_stack_level_count_long_string = mutable.Stack[String]()\n  \
    \      val paren_stack_level_count_long_string = mutable.Stack[String]()\n   \
    \     val paren_stack_level_count_long_string = mutable.Stack[String]()\n    \
    \    val paren_stack_level_count_long_string = mutable.Stack[String]()\n     \
    \   val paren_stack_level_count_long_string = mutable.Stack[String]()\n      \
    \  val paren_stack_level_count_long_string = mutable.Stack[String]()\n       \
    \ val paren_stack_level_count_long_string = mutable.Stack[String]()\n        val\
    \ paren_stack_level_count_long_string = mutable.Stack[String]()\n        val paren_stack_level_count_long_string\
    \ = mutable.Stack[String]()\n        val paren_stack_level_count_long", "    \
    \    val paren_stack = mutable.Stack[String]()\n        val paren_stack_size =\
    \ mutable.Stack[Int]()\n        val paren_stack_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_top\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top = mutable.Stack[Long]()\n        val paren_stack_top_top_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_size = mutable.Stack[Int]()\n       \
    \ val paren_stack_top_top_top_top_top = mutable.Stack[Long]()\n        val paren_stack_top_top_top_top_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_", "        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_top = paren_stack.size\n        val paren_stack_max_level\
    \ = paren_stack_top\n        val paren_stack_max_level_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_max_level_stack_top = paren_stack_max_level_stack.size\n\
    \        val paren_stack_max_level_stack_max_level = paren_stack_max_level_stack_top\n\
    \        val paren_stack_max_level_stack_max_level_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_max_level_stack_max_level_stack_top = paren_stack_max_level_stack_max_level_stack.size\n\
    \        val paren_stack_max_level_stack_max_level_stack_max_level = paren_stack_max_level_stack_max_level_stack_top\n\
    \        val paren_stack_max_level_stack_max_level_stack_max_level_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_max_level_stack_max_level_stack_max_level_stack_top =\
    \ paren_stack_max_level_stack_max_level_stack_max_level_stack.size\n        val\
    \ paren_stack_max_level_stack_max_level_stack_max_level_stack_max_level = paren_stack_max_level_stack_max_level_stack_max_level_stack_top\n\
    \        val paren_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_top\
    \ = paren_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack.size\n\
    \        val paren_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_max_level\
    \ = paren_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_top\n\
    \        val paren_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_top\
    \ = paren_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack.size\n\
    \        val paren_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_max_level\
    \ = paren_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_top\n\
    \        val paren_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_top\
    \ = paren_stack_max_level_stack_", "        val paren_array = paren_string.split(\"\
    \ \")\n        val paren_array_size = paren_array.length\n        val paren_array_max_size\
    \ = paren_array_size - 1\n        val paren_array_max_size_array = paren_array_max_size.map(x\
    \ => paren_array(x))\n        val paren_array_max_size_array_size = paren_array_max_size_array.map(x\
    \ => x.length)\n        val paren_array_max_size_array_max_size = paren_array_max_size_array_size.max\n\
    \        val paren_array_max_size_array_max_size_array_max_size = paren_array_max_size_array_max_size.max\n\
    \        val paren_array_max_size_array_max_size_array_max_size_array_max_size\
    \ = paren_array_max_size_array_max_size_array_max_size.max\n        val paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size\
    \ = paren_array_max_size_array_max_size_array_max_size_array_max_size.max\n  \
    \      val paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size\
    \ = paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size.max\n\
    \        val paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size\
    \ = paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size.max\n\
    \        val paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size\
    \ = paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size.max\n\
    \        val paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size\
    \ = paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size.max\n\
    \        val paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size\
    \ = paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size.max\n\
    \        val paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size\
    \ = paren_array_max_size_array_max_size_array_max_", "        val paren_stack\
    \ = mutable.Stack[String]()\n        val paren_stack_len = mutable.Stack[Long]()\n\
    \        val paren_stack_len_max = mutable.Stack[Long]()\n        val paren_stack_len_max_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max = mutable.Stack[Long]()\n\
    \        val paren_stack_len_max_len_max_max = mutable.Stack[Long]()\n       \
    \ val paren_stack_len_max_len_max_max_max = mutable.Stack[Long]()\n        val\
    \ paren_stack_len_max_len_max_max_max_max = mutable.Stack[Long]()\n        val\
    \ paren_stack_len_max_len_max_max_max_max_max = mutable.Stack[Long]()\n      \
    \  val paren_stack_len_max_len_max_max_max_max_max_max = mutable.Stack[Long]()\n\
    \        val paren_stack_len_max_len_max_max_max_max_max_max_max = mutable.Stack[Long]()\n\
    \        val paren_stack_len_max_len_max_max_max_max_max_max_max_max = mutable.Stack[Long]()\n\
    \        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max = mutable.Stack[Long]()\n\
    \        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max =\
    \ mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_", "        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_levels = mutable.Stack[Int]()\n        val paren_level = 0\n\
    \        val paren_level_count = mutable.Stack[Int]()\n        val paren_level_count_max\
    \ = mutable.Stack[Int]()\n        val paren_level_count_max_index = mutable.Stack[Int]()\n\
    \        val paren_level_count_max_index2 = mutable.Stack[Int]()\n        val\
    \ paren_level_count_max_index3 = mutable.Stack[Int]()\n        val paren_level_count_max_index4\
    \ = mutable.Stack[Int]()\n        val paren_level_count_max_index5 = mutable.Stack[Int]()\n\
    \        val paren_level_count_max_index6 = mutable.Stack[Int]()\n        val\
    \ paren_level_count_max_index7 = mutable.Stack[Int]()\n        val paren_level_count_max_index8\
    \ = mutable.Stack[Int]()\n        val paren_level_count_max_index9 = mutable.Stack[Int]()\n\
    \        val paren_level_count_max_index10 = mutable.Stack[Int]()\n        val\
    \ paren_level_count_max_index11 = mutable.Stack[Int]()\n        val paren_level_count_max_index12\
    \ = mutable.Stack[Int]()\n        val paren_level_count_max_index13 = mutable.Stack[Int]()\n\
    \        val paren_level_count_max_index14 = mutable.Stack[Int]()\n        val\
    \ paren_level_count_max_index15 = mutable.Stack[Int]()\n        val paren_level_count_max_index16\
    \ = mutable.Stack[Int]()\n        val paren_level_count_max_index17 = mutable.Stack[Int]()\n\
    \        val paren_level_count_max_index18 = mutable.Stack[Int]()\n        val\
    \ paren_level_count_max_index19 = mutable.Stack[Int]()\n        val paren_level_count_max_index20\
    \ = mutable.Stack[Int]()\n        val paren_level_count_max_index21 = mutable.Stack[Int]()\n\
    \        val paren_level_count_max_index22 = mutable.Stack[Int]()\n        val\
    \ paren_level_count_max_index23 = mutable.Stack[Int]()\n        val paren_level_count_max_index24\
    \ = mutable.Stack[Int]()\n        val paren_level_count_max_index25 = mutable.Stack[Int]()\n\
    \        val paren_level_count_max_index26 = ", "        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_max_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos = mutable.Stack[Long]()\n        val paren_stack_max_depth_neg\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_neg = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_neg_pos = mutable.Stack[Long]()\n     \
    \   val paren_stack_max_depth_pos_neg_neg = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_depth_pos_neg_pos_neg = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_neg_neg_pos\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_neg_neg_neg =\
    \ mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_neg_neg_pos_neg\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_neg_neg_neg_pos\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_neg_neg_neg_neg\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_neg_neg_neg_pos_neg\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_neg_neg_neg_pos_neg\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_neg_neg_neg_pos_neg_pos\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_neg_neg_neg_pos_neg_neg\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_neg_neg_neg_pos_neg_neg_pos\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_neg_neg_neg_pos_neg_neg_neg\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_neg_neg_neg_pos_neg_neg_pos\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_neg_neg_neg_pos_neg_neg_neg\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_neg_neg_neg_pos_neg_neg_neg_pos\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_neg_neg_neg_pos_neg_neg_neg_neg\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_neg_neg_neg_pos_neg_neg_neg_pos_neg\
    \ = mutable.Stack[Long]()\n", "        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max = mutable.Stack[Long]()\n\
    \        val paren_stack_level_max_size = mutable.Stack[Long]()\n        val paren_stack_level_max_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_level_size = mutable.Stack[Long]()\n\
    \        val paren_stack_level_max_level_level = mutable.Stack[Long]()\n     \
    \   val paren_stack_level_max_level_level_size = mutable.Stack[Long]()\n     \
    \   val paren_stack_level_max_level_level_level = mutable.Stack[Long]()\n    \
    \    val paren_stack_level_max_level_level_level_size = mutable.Stack[Long]()\n\
    \        val paren_stack_level_max_level_level_level_level = mutable.Stack[Long]()\n\
    \        val paren_stack_level_max_level_level_level_level_size = mutable.Stack[Long]()\n\
    \        val paren_stack_level_max_level_level_level_level_level = mutable.Stack[Long]()\n\
    \        val paren_stack_level_max_level_level_level_level_level_size = mutable.Stack[Long]()\n\
    \        val paren_stack_level_max_level_level_level_level_level_level = mutable.Stack[Long]()\n\
    \        val paren_stack_level_max_level_level_level_level_level_level_size =\
    \ mutable.Stack[Long]()\n        val paren_stack_level_max_level_level_level_level_level_level_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_level_level_level_level_level_level_level_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_level_level_level_level_level_level_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_level_level_level_level_level_level_level_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_level_level_level_level_level_level_level_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_level_level_level_level_level_level_level_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_level_level_level_level_level_level_level_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_level_level_level_level_level_level_level_level_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_level_level_level_level_level_level_level_level_level\
    \ = mutable.Stack[Long]()\n        val paren_", "        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_max = mutable.Stack[Long]()\n        val paren_stack_max_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len_max_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len_max_depth = mutable.Stack[Long]()\n   \
    \     val paren_stack_max_depth_len_max_depth_len = mutable.Stack[Long]()\n  \
    \      val paren_stack_max_depth_len_max_depth_len_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len_max_depth_len_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len_max_depth_len_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len_max_depth_len_depth_len_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len_max_depth_len_depth_len_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len_max_depth_len_depth_len_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len_max_depth_len_depth_len_depth_len_max =\
    \ mutable.Stack[Long]()\n        val paren_stack_max_depth_len_max_depth_len_depth_len_depth_len_max_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len_max_depth_len_depth_len_depth_len_max_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len_max_depth_len_depth_len_depth_len_max_depth_len_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len_max_depth_len_depth_len_depth_len_max_depth_len_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len_max_depth_len_depth_len_depth_len_max_depth_len_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len_max_depth_len_depth_len_depth_len_max_depth_len_depth_len_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len_max_depth_len_depth_len_depth_len_max_depth_len_depth_len_max_size\
    \ = mutable.Stack[Long]()\n        val paren_", "        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_max_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_length = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_depth_length = mutable.Stack[Long]()\n        val paren_stack_max_depth_length\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_length = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_length = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_depth_length = mutable.Stack[Long]()\n        val paren_stack_max_depth_length\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_length = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_length = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_depth_length = mutable.Stack[Long]()\n        val paren_stack_max_depth_length\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_length = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_length = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_depth_length = mutable.Stack[Long]()\n        val paren_stack_max_depth_length\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_length = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_length = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_depth_length = mutable.Stack[Long]()\n        val paren_stack_max_depth_length\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_length = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_length = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_depth_length = mutable.Stack[Long]()\n        val paren_stack_max_depth_length\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_length = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_length = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_depth_length = mutable.Stack[Long]()\n        val paren_stack_max_depth_length\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_length = mutable.Stack[Long]()\n\
    \        val paren_stack_", "        val paren_chars = paren_string.split(\" \"\
    ).map(_.toChar)\n        val paren_chars_count = paren_chars.map(_.length).sum\n\
    \        val paren_chars_count_with_paren = paren_chars_count + 1\n        val\
    \ paren_chars_count_with_paren_plus_one = paren_chars_count_with_paren + 1\n \
    \       val paren_chars_count_with_paren_plus_two = paren_chars_count_with_paren_plus_one\
    \ + 1\n        val paren_chars_count_with_paren_plus_three = paren_chars_count_with_paren_plus_two\
    \ + 1\n        val paren_chars_count_with_paren_plus_four = paren_chars_count_with_paren_plus_three\
    \ + 1\n        val paren_chars_count_with_paren_plus_five = paren_chars_count_with_paren_plus_four\
    \ + 1\n        val paren_chars_count_with_paren_plus_six = paren_chars_count_with_paren_plus_five\
    \ + 1\n        val paren_chars_count_with_paren_plus_seven = paren_chars_count_with_paren_plus_six\
    \ + 1\n        val paren_chars_count_with_paren_plus_eight = paren_chars_count_with_paren_plus_seven\
    \ + 1\n        val paren_chars_count_with_paren_plus_nine = paren_chars_count_with_paren_plus_eight\
    \ + 1\n        val paren_chars_count_with_paren_plus_ten = paren_chars_count_with_paren_plus_nine\
    \ + 1\n        val paren_chars_count_with_paren_plus_eleven = paren_chars_count_with_paren_plus_ten\
    \ + 1\n        val paren_chars_count_with_paren_plus_twelve = paren_chars_count_with_paren_plus_eleven\
    \ + 1\n        val paren_chars_count_with_paren_plus_thirteen = paren_chars_count_with_paren_plus_twelve\
    \ + 1\n        val paren_chars_count_with_paren_plus_fourteen = paren_chars_count_with_paren_plus_thirteen\
    \ + 1\n        val paren_chars_count_with_paren_plus_fifteen = paren_chars_count_with_paren_plus_fourteen\
    \ + 1\n        val paren_chars_count_with_paren_plus_sixteen = paren_chars_count_with_paren_plus_fifteen\
    \ + 1\n        val paren_chars_count_with_paren_plus_seventeen = paren_chars_count_with_paren_plus_sixteen\
    \ + 1\n        val paren_chars_count_with_", "        val paren_chars = paren_string.toCharArray\n\
    \        val paren_chars_size = paren_chars.length\n        val paren_chars_map\
    \ = mutable.HashMap[Char, Long]()\n        val paren_chars_stack = mutable.Stack[Char]()\n\
    \        var paren_char_index = 0\n        var paren_char_index2 = 0\n       \
    \ var paren_char_index3 = 0\n        var paren_char_index4 = 0\n        var paren_char_index5\
    \ = 0\n        var paren_char_index6 = 0\n        var paren_char_index7 = 0\n\
    \        var paren_char_index8 = 0\n        var paren_char_index9 = 0\n      \
    \  var paren_char_index10 = 0\n        var paren_char_index11 = 0\n        var\
    \ paren_char_index12 = 0\n        var paren_char_index13 = 0\n        var paren_char_index14\
    \ = 0\n        var paren_char_index15 = 0\n        var paren_char_index16 = 0\n\
    \        var paren_char_index17 = 0\n        var paren_char_index18 = 0\n    \
    \    var paren_char_index19 = 0\n        var paren_char_index20 = 0\n        var\
    \ paren_char_index21 = 0\n        var paren_char_index22 = 0\n        var paren_char_index23\
    \ = 0\n        var paren_char_index24 = 0\n        var paren_char_index25 = 0\n\
    \        var paren_char_index26 = 0\n        var paren_char_index27 = 0\n    \
    \    var paren_char_index28 = 0\n        var paren_char_index29 = 0\n        var\
    \ paren_char_index30 = 0\n        var paren_char_index31 = 0\n        var paren_char_index32\
    \ = 0\n        var paren_char_index33 = 0\n        var paren_char_index34 = 0\n\
    \        var paren_char_index35 = 0\n        var paren_char_index36 = 0\n    \
    \    var paren_char_index37 = 0\n        var paren_char_index38 = 0\n        var\
    \ paren_char_index39 = 0\n        var paren_char_index40 = 0\n        var paren_char_index41\
    \ = 0\n        var paren_char_index42 = 0\n        var paren_char_index43 = 0\n\
    \        var paren_char_index44 = 0\n        var paren_char_index45 = 0\n    \
    \    var paren_char_index46 = 0\n        var paren_char_index47 = 0\n        var\
    \ paren_char_index48 = 0\n        var paren_char_index49 = 0\n        var paren_char_index50\
    \ = 0\n        var paren_char_index51 = 0\n        var paren_char_index52 = 0\n\
    \        var paren_char_index53 = 0\n        var paren_char_index54 = 0\n    \
    \    var paren_char_index55 = 0\n        var paren_char_index56 = 0\n        var\
    \ paren_char_index57 = 0\n", "        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_queue = mutable.Queue[String]()\n        paren_queue.enqueue(paren_string)\n\
    \        paren_stack.push(paren_queue.dequeue)\n        val paren_levels = mutable.ListBuffer[Long]()\n\
    \        while (paren_stack.nonEmpty) {\n            val paren_string = paren_stack.dequeue\n\
    \            val paren_level = 0\n            val paren_open = paren_string.indexOf('(')\n\
    \            val paren_close = paren_string.indexOf(')')\n            val paren_level\
    \ = if (paren_open < paren_close) paren_open else paren_close\n            paren_levels\
    \ += paren_level\n            paren_queue.enqueue(paren_string.substring(paren_open\
    \ + 1, paren_close))\n            paren_stack.push(paren_queue.dequeue)\n    \
    \    }\n        paren_levels.toList", "        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_levels_count\
    \ = mutable.Stack[Long]()\n        paren_string.split(\"\\\\s+\").foreach(s =>\
    \ {\n            if (s.startsWith(\"(\")) {\n                paren_stack.push(s)\n\
    \                paren_levels_count.push(paren_levels.length)\n            } else\
    \ if (s.endsWith(\")\")) {\n                val paren_level = paren_levels_count.pop\n\
    \                val paren_level_length = paren_levels_count.pop\n           \
    \     val paren_level_length = paren_level_length + 1 // +1 because the last level\
    \ is always empty\n                paren_levels.push(paren_level)\n          \
    \      paren_levels_count.push(paren_level_length)\n                paren_stack.push(s)\n\
    \            } else if (s.startsWith(\")\")) {\n                val paren_level\
    \ = paren_levels_count.pop\n                val paren_level_length = paren_levels_count.pop\n\
    \                val paren_level_length = paren_level_length + 1 // +1 because\
    \ the last level is always empty\n                paren_levels.push(paren_level)\n\
    \                paren_levels_count.push(paren_level_length)\n               \
    \ paren_stack.push(s)\n            }\n        })\n        paren_levels_count.reverse.foldLeft(0L)\
    \ { (sum, level) => sum + level }", "        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_queue = mutable.Queue[String]()\n        paren_queue.enqueue(paren_string)\n\
    \        paren_stack.push(paren_queue.dequeue())\n        var max_level = 0\n\
    \        while(!paren_queue.isEmpty) {\n            val current_paren = paren_queue.dequeue()\n\
    \            val current_level = paren_stack.size\n            val new_level =\
    \ current_level + 1\n            val new_paren = current_paren.substring(0, current_paren.length\
    \ - 1)\n            val new_paren_stack = paren_stack.push(new_paren)\n      \
    \      val new_paren_queue = paren_queue.enqueue(new_paren)\n            val new_max_level\
    \ = max_level\n            if(new_paren_stack.size < new_max_level) {\n      \
    \          max_level = new_max_level\n            }\n        }\n        max_level",
  "        val paren_stack = mutable.Stack[String]()\n        val paren_stack_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_index = mutable.Stack[Long]()\n        val\
    \ paren_stack_top_count_index2 = mutable.Stack[Long]()\n        val paren_stack_top_count_index3\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index4 = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_index5 = mutable.Stack[Long]()\n        val\
    \ paren_stack_top_count_index6 = mutable.Stack[Long]()\n        val paren_stack_top_count_index7\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index8 = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_index9 = mutable.Stack[Long]()\n        val\
    \ paren_stack_top_count_index10 = mutable.Stack[Long]()\n        val paren_stack_top_count_index11\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index12 = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_index13 = mutable.Stack[Long]()\n        val\
    \ paren_stack_top_count_index14 = mutable.Stack[Long]()\n        val paren_stack_top_count_index15\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index16 = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_index17 = mutable.Stack[Long]()\n        val\
    \ paren_stack_top_count_index18 = mutable.Stack[Long]()\n        val paren_stack_top_count_index19\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index20 = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_index21 = mutable.Stack[Long]()\n        val\
    \ paren_stack_top_count_index22 = mutable.Stack[Long]()\n        val paren_stack_top_count_index23\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index24 = mutable.Stack[Long]()\n\
    \        val paren_stack_", "        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_map = mutable.Map[String, mutable.Stack[String]]()\n\
    \        val paren_stack_map_keys = mutable.Map[String, Long]()\n        val paren_stack_map_values\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_keys = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_values_values = mutable.Map[String, Long]()\n\
    \        val paren_stack_map_values_values_keys = mutable.Map[String, Long]()\n\
    \        val paren_stack_map_values_values_values = mutable.Map[String, Long]()\n\
    \        val paren_stack_map_values_values_values_keys = mutable.Map[String, Long]()\n\
    \        val paren_stack_map_values_values_values_values = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_values_values_values_values_keys = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_values_values_values_values_values = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_values_values_values_values_values_keys\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_values_values_values_values_values\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_values_values_values_values_values_keys\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values_",
  "        val paren_stack = mutable.Stack[String]()\n        val paren_stack_map\
    \ = mutable.Map[String, Long]()\n        paren_string.split(\"\\\\s+\").foreach(x\
    \ => {\n            val paren_level = paren_stack_map.getOrElse(x, 0)\n      \
    \      paren_stack_map.put(x, paren_level + 1)\n            paren_stack :+= x\n\
    \        })\n        val max_level = paren_stack_map.values.max\n        val max_level_map\
    \ = paren_stack_map.filter(_._2 == max_level)\n        val max_level_map_values\
    \ = max_level_map.values.toList\n        val max_level_map_values_sorted = max_level_map_values.sortBy(_._1)\n\
    \        val max_level_map_values_sorted_list = max_level_map_values_sorted.map(_._2).toList\n\
    \        val max_level_map_values_sorted_list_sorted = max_level_map_values_sorted_list.sortBy(_._1)\n\
    \        val max_level_map_values_sorted_list_sorted_reversed = max_level_map_values_sorted_list_sorted.reverse\n\
    \        max_level_map_values_sorted_list_sorted_reversed.head", "        val\
    \ paren_array = paren_string.split(\" \")\n        val paren_array_size = paren_array.length\n\
    \        val paren_array_map = mutable.HashMap[String, Long]()\n        val paren_array_map_size\
    \ = paren_array_map.size\n        val paren_array_map_size_max = paren_array_map_size\
    \ - 1\n        val paren_array_map_size_min = paren_array_map_size + 1\n     \
    \   val paren_array_map_size_mid = paren_array_map_size / 2\n        val paren_array_map_size_mid2\
    \ = paren_array_map_size / 2\n        val paren_array_map_size_mid3 = paren_array_map_size\
    \ / 2\n        val paren_array_map_size_mid4 = paren_array_map_size / 2\n    \
    \    val paren_array_map_size_mid5 = paren_array_map_size / 2\n        val paren_array_map_size_mid6\
    \ = paren_array_map_size / 2\n        val paren_array_map_size_mid7 = paren_array_map_size\
    \ / 2\n        val paren_array_map_size_mid8 = paren_array_map_size / 2\n    \
    \    val paren_array_map_size_mid9 = paren_array_map_size / 2\n        val paren_array_map_size_mid10\
    \ = paren_array_map_size / 2\n        val paren_array_map_size_mid11 = paren_array_map_size\
    \ / 2\n        val paren_array_map_size_mid12 = paren_array_map_size / 2\n   \
    \     val paren_array_map_size_mid13 = paren_array_map_size / 2\n        val paren_array_map_size_mid14\
    \ = paren_array_map_size / 2\n        val paren_array_map_size_mid15 = paren_array_map_size\
    \ / 2\n        val paren_array_map_size_mid16 = paren_array_map_size / 2\n   \
    \     val paren_array_map_size_mid17 = paren_array_map_size / 2\n        val paren_array_map_size_mid18\
    \ = paren_array_map_size / 2\n        val paren_array_map_size_mid19 = paren_array_map_size\
    \ / 2\n        val paren_array_map_size_mid20 = paren_array_map_size / 2\n   \
    \     val paren_array_map_size_mid21 = paren_array_map_size / 2\n        val paren_array_map_size_mid22\
    \ = paren_array_map_size / 2\n        val paren_array_map_size_mid23 = paren_array_map_size\
    \ / 2\n        val paren_array_map_size_mid24 = paren_array_map_size / 2\n   \
    \     val paren_array_map_size_mid25 = paren_array_map_size / 2\n        val paren_array_map_size_mid26\
    \ = paren_array_map_size / 2\n        val paren", "        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_string = mutable.Stack[String]()\n        val paren_stack_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_string = mutable.Stack[Long]()\n\
    \        val paren_stack_level_level = mutable.Stack[Long]()\n        val paren_stack_level_level_string\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level = mutable.Stack[Long]()\n\
    \        val paren_stack_level_level_level_string = mutable.Stack[Long]()\n  \
    \      val paren_stack_level_level_level_level = mutable.Stack[Long]()\n     \
    \   val paren_stack_level_level_level_level_string = mutable.Stack[Long]()\n \
    \       val paren_stack_level_level_level_level_level = mutable.Stack[Long]()\n\
    \        val paren_stack_level_level_level_level_level_string = mutable.Stack[Long]()\n\
    \        val paren_stack_level_level_level_level_level_level = mutable.Stack[Long]()\n\
    \        val paren_stack_level_level_level_level_level_level_string = mutable.Stack[Long]()\n\
    \        val paren_stack_level_level_level_level_level_level_level = mutable.Stack[Long]()\n\
    \        val paren_stack_level_level_level_level_level_level_level_string = mutable.Stack[Long]()\n\
    \        val paren_stack_level_level_level_level_level_level_level_level = mutable.Stack[Long]()\n\
    \        val paren_stack_level_level_level_level_level_level_level_level_string\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_string\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_string\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_string\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_level_string\
    \ = mutable.", "        val paren_stack = mutable.Stack[String]()\n        val\
    \ paren_stack_length = mutable.Stack[Long]()\n        val paren_stack_length_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_length_max_index = mutable.Stack[Int]()\n\
    \        val paren_stack_length_max_index2 = mutable.Stack[Int]()\n        val\
    \ paren_stack_length_max_index3 = mutable.Stack[Int]()\n        val paren_stack_length_max_index4\
    \ = mutable.Stack[Int]()\n        val paren_stack_length_max_index5 = mutable.Stack[Int]()\n\
    \        val paren_stack_length_max_index6 = mutable.Stack[Int]()\n        val\
    \ paren_stack_length_max_index7 = mutable.Stack[Int]()\n        val paren_stack_length_max_index8\
    \ = mutable.Stack[Int]()\n        val paren_stack_length_max_index9 = mutable.Stack[Int]()\n\
    \        val paren_stack_length_max_index10 = mutable.Stack[Int]()\n        val\
    \ paren_stack_length_max_index11 = mutable.Stack[Int]()\n        val paren_stack_length_max_index12\
    \ = mutable.Stack[Int]()\n        val paren_stack_length_max_index13 = mutable.Stack[Int]()\n\
    \        val paren_stack_length_max_index14 = mutable.Stack[Int]()\n        val\
    \ paren_stack_length_max_index15 = mutable.Stack[Int]()\n        val paren_stack_length_max_index16\
    \ = mutable.Stack[Int]()\n        val paren_stack_length_max_index17 = mutable.Stack[Int]()\n\
    \        val paren_stack_length_max_index18 = mutable.Stack[Int]()\n        val\
    \ paren_stack_length_max_index19 = mutable.Stack[Int]()\n        val paren_stack_length_max_index20\
    \ = mutable.Stack[Int]()\n        val paren_stack_length_max_index21 = mutable.Stack[Int]()\n\
    \        val paren_stack_length_max_index22 = mutable.Stack[Int]()\n        val\
    \ paren_stack_length_max_index23 = mutable.Stack[Int]()\n        val paren_stack_length_max_index24\
    \ = mutable.Stack[Int]()\n        val paren_stack_length_max_index25 = mutable.Stack[Int]()\n\
    \        val paren_stack_length_max_index26 = mutable.Stack[Int]()\n        val\
    \ paren_stack_length_max_index27 = mutable.Stack[", "        val paren_stack =\
    \ mutable.Stack[String]()\n        val paren_levels = mutable.Stack[Long]()\n\
    \        val paren_level = 0\n        paren_string.split(\"\\\\s+\").foreach(x\
    \ => {\n            if (x.equals(\"(\")) {\n                paren_stack.push(x)\n\
    \                paren_levels += 1\n            } else if (x.equals(\")\")) {\n\
    \                paren_level -= 1\n                paren_levels += paren_level\n\
    \                paren_stack.pop()\n            }\n        })\n        paren_levels",
  "        val paren_groups = paren_string.split(\"\\\\s+\")\n        val paren_groups_with_counts\
    \ = paren_groups.map(x => x.split(\"\\\\(\")).map(x => (x(0).toLong, x(1).toLong)).toMap\n\
    \        val max_count = paren_groups_with_counts.values.max\n        val max_count_index\
    \ = paren_groups_with_counts.values.toList.zipWithIndex.maxBy(_._1)._2\n     \
    \   val max_count_index = max_count_index + 1\n        val max_count_index_with_parens\
    \ = max_count_index - 1\n        val max_count_index_with_parens_count = paren_groups_with_counts(max_count_index_with_parens)\n\
    \        val max_count_index_with_parens_count_with_parens = max_count_index_with_parens_count\
    \ - 1\n        val max_count_index_with_parens_count_with_parens_count = paren_groups_with_counts(max_count_index_with_parens_count_with_parens)\n\
    \        val max_count_index_with_parens_count_with_parens_count_with_parens =\
    \ max_count_index_with_parens_count_with_parens_count - 1\n        val max_count_index_with_parens_count_with_parens_count_with_parens_count\
    \ = paren_groups_with_counts(max_count_index_with_parens_count_with_parens_count_with_parens)\n\
    \        val max_count_index_with_parens_count_with_parens_count_with_parens_count_with_parens\
    \ = max_count_index_with_parens_count_with_parens_count_with_parens_count - 1\n\
    \        val max_count_index_with_parens_count_with_parens_count_with_parens_count_with_parens_count\
    \ = paren_groups_with_counts(max_count_index_with_parens_count_with_parens_count_with_parens_count_with_parens)\n\
    \        val max_count_index_with_parens_count_with_parens_count_with_parens_count_with_parens_count_with_parens\
    \ = max_count_index_with_parens_count_with_parens_count_with_parens_count_with_parens_count\
    \ - 1\n        val max_count_index_with_parens_count_with_parens_count_with_parens_count_with_parens_count_with_parens_count\
    \ = paren_groups_with_counts(max_count_index_with_parens_count_with_parens_count_with_parens_count_with_parens_count_with_parens)\n\
    \        val max_count_index_with_parens_count_with_parens_count_with_parens_count_with_parens_count_with_parens_count_with_parens\
    \ = max_count_index_with_parens_count_with_parens_count_with_parens_count_with_parens_count_with_parens_count\
    \ - 1\n        val max_count_index_with_parens_count_with_parens_count_with_parens_count_with_parens_count_with_parens_count_with_parens\
    \ = max_count_", "        val paren_stack = mutable.Stack[String]()\n        val\
    \ paren_stack_length = mutable.Stack[Long]()\n        val paren_stack_length_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_length_max_index = mutable.Stack[Int]()\n\
    \        val paren_stack_length_max_index2 = mutable.Stack[Int]()\n        val\
    \ paren_stack_length_max_index3 = mutable.Stack[Int]()\n        val paren_stack_length_max_index4\
    \ = mutable.Stack[Int]()\n        val paren_stack_length_max_index5 = mutable.Stack[Int]()\n\
    \        val paren_stack_length_max_index6 = mutable.Stack[Int]()\n        val\
    \ paren_stack_length_max_index7 = mutable.Stack[Int]()\n        val paren_stack_length_max_index8\
    \ = mutable.Stack[Int]()\n        val paren_stack_length_max_index9 = mutable.Stack[Int]()\n\
    \        val paren_stack_length_max_index10 = mutable.Stack[Int]()\n        val\
    \ paren_stack_length_max_index11 = mutable.Stack[Int]()\n        val paren_stack_length_max_index12\
    \ = mutable.Stack[Int]()\n        val paren_stack_length_max_index13 = mutable.Stack[Int]()\n\
    \        val paren_stack_length_max_index14 = mutable.Stack[Int]()\n        val\
    \ paren_stack_length_max_index15 = mutable.Stack[Int]()\n        val paren_stack_length_max_index16\
    \ = mutable.Stack[Int]()\n        val paren_stack_length_max_index17 = mutable.Stack[Int]()\n\
    \        val paren_stack_length_max_index18 = mutable.Stack[Int]()\n        val\
    \ paren_stack_length_max_index19 = mutable.Stack[Int]()\n        val paren_stack_length_max_index20\
    \ = mutable.Stack[Int]()\n        val paren_stack_length_max_index21 = mutable.Stack[Int]()\n\
    \        val paren_stack_length_max_index22 = mutable.Stack[Int]()\n        val\
    \ paren_stack_length_max_index23 = mutable.Stack[Int]()\n        val paren_stack_length_max_index24\
    \ = mutable.Stack[Int]()\n        val paren_stack_length_max_index25 = mutable.Stack[Int]()\n\
    \        val paren_stack_length_max_index26 = mutable.Stack[Int]()\n        val\
    \ paren_stack_length_max_index27 = mutable.Stack[", "        val paren_stack =\
    \ mutable.Stack[Long]()\n        val paren_stack_map = mutable.HashMap[Long, Long]()\n\
    \        val paren_stack_map_size = mutable.HashMap[Long, Long]()\n        val\
    \ paren_stack_map_size_max = mutable.HashMap[Long, Long]()\n        val paren_stack_map_size_max_index\
    \ = mutable.HashMap[Long, Long]()\n        val paren_stack_map_size_max_index2\
    \ = mutable.HashMap[Long, Long]()\n        val paren_stack_map_size_max_index3\
    \ = mutable.HashMap[Long, Long]()\n        val paren_stack_map_size_max_index4\
    \ = mutable.HashMap[Long, Long]()\n        val paren_stack_map_size_max_index5\
    \ = mutable.HashMap[Long, Long]()\n        val paren_stack_map_size_max_index6\
    \ = mutable.HashMap[Long, Long]()\n        val paren_stack_map_size_max_index7\
    \ = mutable.HashMap[Long, Long]()\n        val paren_stack_map_size_max_index8\
    \ = mutable.HashMap[Long, Long]()\n        val paren_stack_map_size_max_index9\
    \ = mutable.HashMap[Long, Long]()\n        val paren_stack_map_size_max_index10\
    \ = mutable.HashMap[Long, Long]()\n        val paren_stack_map_size_max_index11\
    \ = mutable.HashMap[Long, Long]()\n        val paren_stack_map_size_max_index12\
    \ = mutable.HashMap[Long, Long]()\n        val paren_stack_map_size_max_index13\
    \ = mutable.HashMap[Long, Long]()\n        val paren_stack_map_size_max_index14\
    \ = mutable.HashMap[Long, Long]()\n        val paren_stack_map_size_max_index15\
    \ = mutable.HashMap[Long, Long]()\n        val paren_stack_map_size_max_index16\
    \ = mutable.HashMap[Long, Long]()\n        val paren_stack_map_size_max_index17\
    \ = mutable.HashMap[Long, Long]()\n        val paren_stack_map_size_max_index18\
    \ = mutable.HashMap[Long, Long]()\n        val paren_stack_map_size_max_index19\
    \ = mutable.HashMap[Long, Long]()\n        val paren_stack_map_size_max_index20\
    \ = mutable.HashMap[Long, Long]()\n        val paren_stack_map_size_max_index21\
    \ = mutable.HashMap[Long, Long]()\n        val paren_stack_map_size_max_index22\
    \ = mutable.HashMap[Long, Long]", "        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_map = mutable.Map[Long, Long]()\n        val paren_stack_map_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_values_keys = mutable.Map[Long, Long]()\n\
    \        val paren_stack_map_values_values = mutable.Map[Long, Long]()\n     \
    \   val paren_stack_map_values_values_keys = mutable.Map[Long, Long]()\n     \
    \   val paren_stack_map_values_values_values = mutable.Map[Long, Long]()\n   \
    \     val paren_stack_map_values_values_values_keys = mutable.Map[Long, Long]()\n\
    \        val paren_stack_map_values_values_values_values = mutable.Map[Long, Long]()\n\
    \        val paren_stack_map_values_values_values_values_keys = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_values_values_values_values_values = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_",
  "        val paren_chars = paren_string.split(\"\"\"[\\(\\)]\"\"\").toList\n   \
    \     val paren_chars_count = paren_chars.length\n        val paren_chars_map\
    \ = paren_chars.groupBy(x => x).mapValues(_.length)\n        val paren_chars_count_map\
    \ = paren_chars_map.toMap\n        val paren_chars_count_map_sorted = paren_chars_count_map.toSeq.sortBy(_._1).reverse\n\
    \        val paren_chars_count_map_sorted_keys = paren_chars_count_map_sorted.map(_._1)\n\
    \        val paren_chars_count_map_sorted_values = paren_chars_count_map_sorted.map(_._2)\n\
    \        val paren_chars_count_map_sorted_keys_count = paren_chars_count_map_sorted_keys.length\n\
    \        val paren_chars_count_map_sorted_values_count = paren_chars_count_map_sorted_values.length\n\
    \        val paren_chars_count_map_sorted_keys_count_map = paren_chars_count_map_sorted_keys.zip(paren_chars_count_map_sorted_values).map(x\
    \ => (x._1, x._2)).toMap\n        val paren_chars_count_map_sorted_keys_count_map_sorted\
    \ = paren_chars_count_map_sorted_keys_count.zip(paren_chars_count_map_sorted_keys_count_map).map(x\
    \ => (x._1, x._2.toSeq.sortBy(_._1).reverse)).toMap\n        val paren_chars_count_map_sorted_keys_count_map_sorted_keys\
    \ = paren_chars_count_map_sorted_keys_count_map_sorted.map(_._1)\n        val\
    \ paren_chars_count_map_sorted_keys_count_map_sorted_values = paren_chars_count_map_sorted_keys_count_map_sorted.map(_._2)\n\
    \        val paren_chars_count_map_sorted_keys_count_map_sorted_keys_count = paren_chars_count_map_sorted_keys_count_map_sorted_keys.length\n\
    \        val paren_chars_count_map_sorted_keys_count_map_sorted_values_count =\
    \ paren_chars_count_map_sorted_keys_count_map_sorted_values.length\n        val\
    \ paren_chars_count_map_sorted_keys_count_map_sorted_keys_count_map = paren_chars_count_map_sorted_keys_count_map_sorted_keys.zip(paren_chars_count_map_sorted_keys_count_map_sorted_values).map(x\
    \ => (x._1, x._2.toSeq.sortBy(_._1).reverse)).toMap\n        val paren_chars_count_map_sorted_keys_count_map_sorted_keys_count_map_sorted\
    \ = paren_chars_count_map_sorted_keys_count_map_sorted_keys_count.zip(paren_chars_count_map_sorted_keys_count_map_sorted_keys_count_map).map(",
  "        val paren_chars = paren_string.chars\n        val paren_chars_size = paren_chars.length\n\
    \        val paren_chars_map = paren_chars.groupBy(c => c).mapValues(_.length)\n\
    \        val paren_chars_map_sorted = paren_chars_map.toSeq.sortBy(_._2).reverse\n\
    \        val paren_chars_map_sorted_keys = paren_chars_map_sorted.map(_._1)\n\
    \        val paren_chars_map_sorted_values = paren_chars_map_sorted.map(_._2)\n\
    \        val paren_chars_map_sorted_keys_size = paren_chars_map_sorted_keys.size\n\
    \        val paren_chars_map_sorted_values_size = paren_chars_map_sorted_values.size\n\
    \        val paren_chars_map_sorted_keys_size_minus_1 = paren_chars_map_sorted_keys_size\
    \ - 1\n        val paren_chars_map_sorted_values_size_minus_1 = paren_chars_map_sorted_values_size\
    \ - 1\n        val paren_chars_map_sorted_keys_size_minus_1_plus_1 = paren_chars_map_sorted_keys_size\
    \ - 1\n        val paren_chars_map_sorted_values_size_minus_1_plus_1 = paren_chars_map_sorted_values_size\
    \ - 1\n        val paren_chars_map_sorted_keys_size_minus_1_plus_1_plus_1 = paren_chars_map_sorted_keys_size\
    \ - 1\n        val paren_chars_map_sorted_values_size_minus_1_plus_1_plus_1 =\
    \ paren_chars_map_sorted_values_size - 1\n        val paren_chars_map_sorted_keys_size_minus_1_plus_1_plus_1_plus_1\
    \ = paren_chars_map_sorted_keys_size - 1\n        val paren_chars_map_sorted_values_size_minus_1_plus_1_plus_1_plus_1\
    \ = paren_chars_map_sorted_values_size - 1\n        val paren_chars_map_sorted_keys_size_minus_1_plus_1_plus_1_plus_1_plus_1\
    \ = paren_chars_map_sorted_keys_size - 1\n        val paren_chars_map_sorted_values_size_minus_1_plus_1_plus_1_plus_1_plus_1\
    \ = paren_chars_map_sorted_values_size - 1\n        val paren_chars_map_sorted_keys_size_minus_1_plus_1_plus_1_plus_1_plus_1_plus_1\
    \ = paren_chars_map_sorted_keys_size - 1\n        val paren_chars_map_sorted_values_size_minus_1_plus_1_plus_1_plus_1_plus_1_plus_1\
    \ = paren_chars_map_sorted_values_size - 1\n        val paren_chars_map_sorted_keys_size_minus_1_plus_1_plus_1_plus_1_plus_1_plus_1_plus_1\
    \ = paren", "        val paren_array = paren_string.split(\" \")\n        val\
    \ paren_array_size = paren_array.length\n        val paren_array_list = mutable.ArrayBuffer.empty[Long]\n\
    \        val paren_array_list_size = paren_array_list.size\n        val paren_array_list_index\
    \ = paren_array_list_size\n        val paren_array_list_index_size = paren_array_list_index.size\n\
    \        val paren_array_list_index_index_size = paren_array_list_index_size.size\n\
    \        val paren_array_list_index_index_index_size = paren_array_list_index_index_size.size\n\
    \        val paren_array_list_index_index_index_size = paren_array_list_index_index_index_size.size\n\
    \        val paren_array_list_index_index_index_index_size = paren_array_list_index_index_index_index_size.size\n\
    \        val paren_array_list_index_index_index_index_index_size = paren_array_list_index_index_index_index_index_size.size\n\
    \        val paren_array_list_index_index_index_index_index_index_size = paren_array_list_index_index_index_index_index_index_size.size\n\
    \        val paren_array_list_index_index_index_index_index_index_index_size =\
    \ paren_array_list_index_index_index_index_index_index_index_size.size\n     \
    \   val paren_array_list_index_index_index_index_index_index_index_index_size\
    \ = paren_array_list_index_index_index_index_index_index_index_index_size.size\n\
    \        val paren_array_list_index_index_index_index_index_index_index_index_index_size\
    \ = paren_array_list_index_index_index_index_index_index_index_index_index_size.size\n\
    \        val paren_array_list_index_index_index_index_index_index_index_index_index_index_size\
    \ = paren_array_list_index_index_index_index_index_index_index_index_index_index_size.size\n\
    \        val paren_array_list_index_index_index_index_index_index_index_index_index_index_index_size\
    \ = paren_array_list_index_index_index_index_index_index_index_index_index_index_index_size.size\n\
    \        val paren_array_list_index_index_index_index_index_index_index_index_index_index_index_index_size\
    \ = paren_array_list_index_index_index_index_index_index_index_index_index_index_index_size.size\n\
    \        val paren_array_list_index_index_index_index_index_index_index_index_index_index_index_index_size\
    \ = paren_array_list_index_index_index_index_index_index_index_index_index_index_index_index_size.size\n\
    \        val paren_array_list_index_index_index_index_index_index_index_index_index_index_index_index_index_size\
    \ = paren_array_list_index_index_index_index_index_index_index_index_index_index_index_index_index_size.size\n\
    \        val paren_array_list_index_index_index_index_index_index_index_index_index_index_index_index_index_index_size\
    \ = paren_array_list_index_index_index_index_index_index_index_", "        val\
    \ paren_groups = paren_string.split(\" \")\n        val max_level = 0\n      \
    \  val max_levels = mutable.ListBuffer[Long]()\n        for (paren_group <- paren_groups)\
    \ {\n            val paren_group_levels = paren_group.split(\"\\\\(\").map(_.length).toList\n\
    \            if (paren_group_levels.max > max_level) {\n                max_level\
    \ = paren_group_levels.max\n                max_levels += max_level\n        \
    \    }\n        }\n        max_levels", "        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_level = mutable.Stack[Long]()\n\
    \        val paren_stack_max_level_len = mutable.Stack[Long]()\n        val paren_stack_max_level_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_level_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_level_len = mutable.Stack[Long]()\n        val paren_stack_max_level_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_level_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_level_len = mutable.Stack[Long]()\n        val paren_stack_max_level_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_level_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_level_len = mutable.Stack[Long]()\n        val paren_stack_max_level_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_level_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_level_len = mutable.Stack[Long]()\n        val paren_stack_max_level_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_level_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_level_len = mutable.Stack[Long]()\n        val paren_stack_max_level_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_level_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_level_len = mutable.Stack[Long]()\n        val paren_stack_max_level_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_level_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_level_len = mutable.Stack[Long]()\n        val paren_stack_max_level_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_level_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_level_len = mutable.Stack[Long]()\n        val paren_stack_max_level_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_level_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_level_len = mutable.Stack[Long]()\n        val paren_stack_max_level_",
  "        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_top =\
    \ paren_stack.size\n        val paren_stack_max_level = paren_stack_top\n    \
    \    val paren_stack_max_level_with_paren = paren_stack_top\n        val paren_stack_max_level_with_paren_within_paren\
    \ = paren_stack_top\n        val paren_stack_max_level_with_paren_within_paren_within_paren\
    \ = paren_stack_top\n        val paren_stack_max_level_with_paren_within_paren_within_paren_within_paren\
    \ = paren_stack_top\n        val paren_stack_max_level_with_paren_within_paren_within_paren_within_paren_within_paren\
    \ = paren_stack_top\n        val paren_stack_max_level_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ = paren_stack_top\n        val paren_stack_max_level_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ = paren_stack_top\n        val paren_stack_max_level_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ = paren_stack_top\n        val paren_stack_max_level_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ = paren_stack_top\n        val paren_stack_max_level_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ = paren_stack_top\n        val paren_stack_max_level_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ = paren_stack_top\n        val paren_stack_max_level_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ = paren_stack_top\n        val paren_stack_max_level_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_with",
  "        val paren_stack = mutable.Stack[String]()\n        val paren_queue = mutable.Queue[String]()\n\
    \        paren_queue.enqueue(paren_string)\n        paren_stack.push(paren_queue.dequeue)\n\
    \        val paren_levels = mutable.ListBuffer[Long]()\n        while (paren_stack.nonEmpty)\
    \ {\n            val paren_string = paren_stack.dequeue()\n            val paren_level\
    \ = 0\n            val paren_start = paren_string.indexOf('(')\n            val\
    \ paren_end = paren_string.indexOf(')')\n            val paren_length = paren_end\
    \ - paren_start + 1\n            paren_levels += paren_level\n            paren_stack.push(paren_string.substring(paren_start\
    \ + 1, paren_end))\n            while (paren_stack.nonEmpty) {\n             \
    \   val paren_string = paren_stack.dequeue()\n                val paren_level\
    \ = 0\n                val paren_start = paren_string.indexOf('(')\n         \
    \       val paren_end = paren_string.indexOf(')')\n                val paren_length\
    \ = paren_end - paren_start + 1\n                paren_levels += paren_level\n\
    \                paren_stack.push(paren_string.substring(paren_start + 1, paren_end))\n\
    \            }\n        }\n        paren_levels.toList", "        val paren_array\
    \ = paren_string.split(\" \").map(_.toLong)\n        val max_levels = paren_array.foldLeft(0)(_\
    \ + _)\n        val max_level = paren_array.foldLeft(0)(_ + _)\n        val max_level_array\
    \ = paren_array.foldLeft(0)(_ + _)\n        val max_level_array2 = paren_array.foldLeft(0)(_\
    \ + _)\n        val max_level_array3 = paren_array.foldLeft(0)(_ + _)\n      \
    \  val max_level_array4 = paren_array.foldLeft(0)(_ + _)\n        val max_level_array5\
    \ = paren_array.foldLeft(0)(_ + _)\n        val max_level_array6 = paren_array.foldLeft(0)(_\
    \ + _)\n        val max_level_array7 = paren_array.foldLeft(0)(_ + _)\n      \
    \  val max_level_array8 = paren_array.foldLeft(0)(_ + _)\n        val max_level_array9\
    \ = paren_array.foldLeft(0)(_ + _)\n        val max_level_array10 = paren_array.foldLeft(0)(_\
    \ + _)\n        val max_level_array11 = paren_array.foldLeft(0)(_ + _)\n     \
    \   val max_level_array12 = paren_array.foldLeft(0)(_ + _)\n        val max_level_array13\
    \ = paren_array.foldLeft(0)(_ + _)\n        val max_level_array14 = paren_array.foldLeft(0)(_\
    \ + _)\n        val max_level_array15 = paren_array.foldLeft(0)(_ + _)\n     \
    \   val max_level_array16 = paren_array.foldLeft(0)(_ + _)\n        val max_level_array17\
    \ = paren_array.foldLeft(0)(_ + _)\n        val max_level_array18 = paren_array.foldLeft(0)(_\
    \ + _)\n        val max_level_array19 = paren_array.foldLeft(0)(_ + _)\n     \
    \   val max_level_array20 = paren_array.foldLeft(0)(_ + _)\n        val max_level_array21\
    \ = paren_array.foldLeft(0)(_ + _)\n        val max_level_array22 = paren_array.foldLeft(0)(_\
    \ + _)\n        val max_level_array23 = paren_array.foldLeft(0)(_ + _)\n     \
    \   val max_level_array24 = paren_array.foldLef", "        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_max_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_",
  "        val paren_stack = mutable.Stack[String]()\n        val paren_queue = mutable.Queue[String]()\n\
    \        val paren_levels = mutable.Queue[Long]()\n        paren_string.split(\"\
    \ \").foreach(x => {\n            val y = x.trim\n            if (y.startsWith(\"\
    (\")) {\n                paren_stack += y\n            } else if (y.startsWith(\"\
    )\")) {\n                paren_queue += y\n            } else if (y.startsWith(\"\
    )\")) {\n                paren_levels += paren_queue.dequeue\n               \
    \ paren_queue += y\n            }\n        })\n        paren_levels foreach {\
    \ x => paren_levels += x }\n        paren_levels reverse", "        val paren_stack\
    \ = mutable.Stack[String]()\n        val paren_stack_map = mutable.Map[String,\
    \ Long]()\n        paren_string.split(\"\\\\s+\").foreach(x => {\n           \
    \ val paren_stack_item = paren_stack.last\n            val paren_stack_item_count\
    \ = paren_stack_map.get(paren_stack_item).map(x => x + 1).getOrElse(1)\n     \
    \       paren_stack_map.put(paren_stack_item, paren_stack_item_count + 1)\n  \
    \          paren_stack :+= x\n        })\n        val max_level = paren_stack_map.values.max\n\
    \        val max_level_map = paren_stack_map.map(x => x._1 -> x._2).maxBy(x =>\
    \ x._2)\n        val max_level_map_value = max_level_map._2\n        val max_level_map_key\
    \ = max_level_map._1\n        val max_level_map_value = max_level_map._2\n   \
    \     val max_level_map_key = max_level_map._1\n        val max_level_map_value\
    \ = max_level_map._2\n        val max_level_map_key = max_level_map._1\n     \
    \   val max_level_map_value = max_level_map._2\n        val max_level_map_key\
    \ = max_level_map._1\n        val max_level_map_value = max_level_map._2\n   \
    \     val max_level_map_key = max_level_map._1\n        val max_level_map_value\
    \ = max_level_map._2\n        val max_level_map_key = max_level_map._1\n     \
    \   val max_level_map_value = max_level_map._2\n        val max_level_map_key\
    \ = max_level_map._1\n        val max_level_map_value = max_level_map._2\n   \
    \     val max_level_map_key = max_level_map._1\n        val max_level_map_value\
    \ = max_level_map._2\n        val max_level_map_key = max_level_map._1\n     \
    \   val max_level_map_value = max_level_map._2\n        val max_level_map_key\
    \ = max_level_map._1\n        val max_level_map_value = max_level_map._2\n   \
    \     val max_level_map_key = max_level_map._1\n        val max_level_map_value\
    \ = max_level_map._2\n        val max_level_map_key = max_level_map._1\n     \
    \   val max_level_map_value = max_level_map._2\n        val max_level_map_key\
    \ = max_level_map._1\n        val max_level_map_value = max_level_map._2\n   \
    \     val max_level_map_key = max_level_map._1\n        val max_level_map_value\
    \ = max_level_map._2\n        val max_level_map_key = max_level_map._1\n     \
    \   val max_level_map_value = max_level_map._2\n        val max_level_map_key\
    \ = max_level_map._1\n        val max_level_map_value = max_level_map._2\n   \
    \     val max_level_map_", "        val paren_chars = paren_string.toCharArray\n\
    \        val paren_chars_size = paren_chars.length\n        val paren_chars_map\
    \ = mutable.Map[Char, Int]()\n        var paren_level = 0\n        var paren_level_count\
    \ = 0\n        var paren_level_max_count = 0\n        var paren_level_max_count_index\
    \ = 0\n        var paren_level_max_count_char = \"\"\n        var paren_level_max_count_char_pos\
    \ = 0\n        var paren_level_max_count_char_pos_index = 0\n        var paren_level_max_count_char_pos_count\
    \ = 0\n        var paren_level_max_count_char_pos_count_index = 0\n        var\
    \ paren_level_max_count_char_pos_count_char = \"\"\n        var paren_level_max_count_char_pos_count_char_pos\
    \ = 0\n        var paren_level_max_count_char_pos_count_char_pos_index = 0\n \
    \       var paren_level_max_count_char_pos_count_char_pos_count = 0\n        var\
    \ paren_level_max_count_char_pos_count_char_pos_count_index = 0\n        var paren_level_max_count_char_pos_count_char_pos_count_char\
    \ = \"\"\n        var paren_level_max_count_char_pos_count_char_pos_count_char_pos\
    \ = 0\n        var paren_level_max_count_char_pos_count_char_pos_count_char_pos_index\
    \ = 0\n        var paren_level_max_count_char_pos_count_char_pos_count_char_pos_count\
    \ = 0\n        var paren_level_max_count_char_pos_count_char_pos_count_char_pos_count_index\
    \ = 0\n        var paren_level_max_count_char_pos_count_char_pos_count_char_pos_count_char\
    \ = \"\"\n        var paren_level_max_count_char_pos_count_char_pos_count_char_pos_count_char_pos\
    \ = 0\n        var paren_level_max_count_char_pos_count_char_pos_count_char_pos_count_char_pos_index\
    \ = 0\n        var paren_level_max_count_char_pos_count_char_pos_count_char_pos_count_char_pos_count\
    \ = 0\n        var paren_level_max_count_char_pos_count_char_pos_count_char_pos_count_char_pos_count_index\
    \ = 0\n        var paren_level_max_count_char_pos_count_char_pos_count_char_pos_count_char_pos_count_char\
    \ = \"\"\n        var paren_level_max_count_char_pos_count_char_pos_count_char_pos_count_char_pos_count_char_pos\
    \ = 0\n        var paren_level_max_count_char_pos_count_char_pos_count_char_pos_count_char_pos_count_char_pos_index\
    \ = 0\n        var paren_level_max_count_char_pos_count_char_pos_count_char_pos_count_char_pos_count_char_pos_count\
    \ = 0\n        var paren_level_max_count_char_pos_count_char_pos_count_char_pos_count_char_pos_count_char_pos_count_index\
    \ = 0\n        var paren_level_max_count_char_pos_count_char_pos_count_char_pos_count_char_pos_count_char_pos_count_char\
    \ = \"\"\n        var paren_level_max_count_char_pos_count_", "        val paren_stack\
    \ = mutable.Stack[String]()\n        val paren_stack_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_size = mutable.Stack[Long]()\n        val paren_stack_top_count_index\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_index_count = mutable.Stack[Long]()\n     \
    \   val paren_stack_top_count_index_count_size = mutable.Stack[Long]()\n     \
    \   val paren_stack_top_count_index_count_index = mutable.Stack[Long]()\n    \
    \    val paren_stack_top_count_index_count_index_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_index_count_index_count = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_index_count_index_count_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_index_count_index_count_index = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_index_count_index_count_index_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_index_count_index_count_index_count = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_index_count_index_count_index_count_size =\
    \ mutable.Stack[Long]()\n        val paren_stack_top_count_index_count_index_count_index_count_index\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index_count_index_count_index_count_index_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index_count_index_count_index_count_index_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index_count_index_count_index_count_index_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index_count_index_count_index_count_index_count_index\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index_count_index_count_index_count_index_count_index_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index_count_index_count_index_count_index_count_index_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index_count_index_count_index_count_index_count_index_count_size\
    \ = mutable.Stack[Long]()\n        val paren_", "        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_map = mutable.Map[String, mutable.Stack[String]]()\n\
    \        val paren_stack_map_keys = mutable.Map[String, Long]()\n        val paren_stack_map_values\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_reverse =\
    \ mutable.Map[String, Long]()\n        val paren_stack_map_values_reverse_keys\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_reverse_values\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_reverse_keys_reverse\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_reverse_values_reverse\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_reverse_keys_reverse_values\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_reverse_values_reverse_keys\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_reverse_values_reverse_values_reverse\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_reverse_keys_reverse_values_reverse_keys\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_reverse_values_reverse_values_reverse_values\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_reverse_keys_reverse_values_reverse_values_reverse\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_reverse_values_reverse_values_reverse_values_reverse\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_reverse_keys_reverse_values_reverse_values_reverse_values_reverse\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_reverse_values_reverse_values_reverse_values_reverse_values_reverse\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_reverse_keys_reverse_values_reverse_values_reverse_values_reverse_values_reverse\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_reverse_values_reverse_values_reverse_values_reverse_values_reverse_values_reverse\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_reverse_keys_reverse_values_reverse_values_reverse_values_reverse_values_reverse_values_reverse\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_reverse_values_reverse_values_reverse_values_reverse_values_reverse_values_reverse_values_reverse\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_reverse_",
  "        val paren_stack = mutable.Stack[String]()\n        val paren_stack_map\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_sorted = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_sorted_reverse = mutable.Map[String, Long]()\n\
    \        val paren_stack_map_sorted_reverse_sorted = mutable.Map[String, Long]()\n\
    \        val paren_stack_map_sorted_reverse_sorted_reverse = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse_sorted =\
    \ mutable.Map[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_",
  "        val paren_stack = mutable.Stack[Long]()\n        val paren_queue = mutable.Queue[Long]()\n\
    \        paren_string.split(\"\\\\s+\").foreach { x =>\n            val level\
    \ = paren_stack.size\n            val paren_level = paren_queue.size\n       \
    \     val paren_level_diff = paren_level - level\n            val paren_level_diff_max\
    \ = paren_level_diff == 0 ? 0 : paren_level_diff\n            val paren_level_diff_min\
    \ = paren_level_diff == 0 ? 1 : paren_level_diff\n            val paren_level_diff_max_min\
    \ = paren_level_diff_max * paren_level_diff_min\n            if (paren_level_diff_max_min\
    \ < 1) {\n                paren_stack.push(level)\n                paren_queue.enqueue(level)\n\
    \            } else {\n                val paren_level_diff_max_min_2 = paren_level_diff_max_min\
    \ * 2\n                if (paren_level_diff_max_min_2 < 1) {\n               \
    \     paren_stack.push(level)\n                    paren_queue.enqueue(level)\n\
    \                } else {\n                    val paren_level_diff_max_min_3\
    \ = paren_level_diff_max_min * 3\n                    if (paren_level_diff_max_min_3\
    \ < 1) {\n                        paren_stack.push(level)\n                  \
    \      paren_queue.enqueue(level)\n                    } else {\n            \
    \            val paren_level_diff_max_min_4 = paren_level_diff_max_min * 4\n \
    \                       if (paren_level_diff_max_min_4 < 1) {\n              \
    \              paren_stack.push(level)\n                            paren_queue.enqueue(level)\n\
    \                        } else {\n                            val paren_level_diff_max_min_5\
    \ = paren_level_diff_max_min * 5\n                            if (paren_level_diff_max_min_5\
    \ < 1) {\n                                paren_stack.push(level)\n          \
    \                      paren_queue.enqueue(level)\n                          \
    \  } else {\n                                val paren_level_diff_max_min_6 =\
    \ paren_level_diff_max_min * 6\n                                if (paren_level_diff_max_min_6\
    \ < 1) {\n                                    paren_stack.push(level)\n      \
    \                              paren_queue.enqueue(level)\n                  \
    \              } else {\n                                    val paren_level_diff_max_min_7\
    \ = paren_level_diff_max_min * 7\n                                    if (paren_level_diff_max_min_7\
    \ < 1) {\n                                        paren_stack.push(level)\n  \
    \                                      paren_queue.enqueue(level)\n          \
    \                          } else {\n                                        val\
    \ paren_level_diff_max_min_8 = paren_level_diff_max_min * 8\n                \
    \                        if (paren_level_diff_max_min_8 < 1) {\n             \
    \                               paren_stack.push(level)\n                    \
    \                        paren_queue.enqueue(level)\n                        \
    \                } else {\n                                            val paren_level_diff_max_min_9\
    \ = paren_level_diff_max_min * 9\n", "        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_queue = mutable.Queue[String]()\n        val paren_levels =\
    \ mutable.Map[String, Long]()\n        paren_string.split(\"\\\\s+\").foreach(x\
    \ => {\n            val y = x.trim\n            if (y.length == 0) return\n  \
    \          if (paren_stack.nonEmpty) {\n                if (paren_stack.last.equals(y))\
    \ {\n                    paren_stack.pop\n                    paren_levels(paren_stack.last)\
    \ += 1\n                } else {\n                    paren_stack += y\n     \
    \               paren_queue.enqueue(y)\n                }\n            } else\
    \ {\n                paren_stack += y\n                paren_queue.enqueue(y)\n\
    \            }\n        })\n        val max_level = paren_stack.last.length\n\
    \        val max_level_parens = paren_queue.dequeueAll.map(x => paren_levels(x)).toList\n\
    \        val max_level_parens_count = max_level_parens.count(_ > 0)\n        if\
    \ (max_level_parens_count > 0) max_level_parens.max\n        else 0", "      \
    \  val paren_stack = mutable.Stack[String]()\n        val paren_queue = mutable.Queue[String]()\n\
    \        paren_queue.enqueue(paren_string)\n        val paren_levels = mutable.Map[String,\
    \ Long]()\n        while (paren_queue.nonEmpty) {\n            val paren_string\
    \ = paren_queue.dequeue()\n            paren_stack.push(paren_string)\n      \
    \      val paren_level_string = paren_stack.last\n            val paren_level\
    \ = paren_levels.getOrElseUpdate(paren_level_string, 0L)\n            paren_levels\
    \ += (paren_level_string -> paren_level + 1)\n            val paren_group_strings\
    \ = paren_string.split(\" \").filter(_.nonEmpty)\n            paren_group_strings.foreach\
    \ { paren_group_string =>\n                val paren_group_level = paren_levels.getOrElseUpdate(paren_group_string,\
    \ 0L)\n                paren_levels += (paren_group_string -> paren_group_level\
    \ + 1)\n                val paren_group_strings = paren_group_string.split(\"\"\
    ).filter(_.nonEmpty)\n                paren_group_strings.foreach { paren_group_string\
    \ =>\n                    val paren_group_level = paren_levels.getOrElseUpdate(paren_group_string,\
    \ 0L)\n                    paren_levels += (paren_group_string -> paren_group_level\
    \ + 1)\n                    val paren_group_strings = paren_group_string.split(\"\
    \").filter(_.nonEmpty)\n                    paren_group_strings.foreach { paren_group_string\
    \ =>\n                        val paren_group_level = paren_levels.getOrElseUpdate(paren_group_string,\
    \ 0L)\n                        paren_levels += (paren_group_string -> paren_group_level\
    \ + 1)\n                        val paren_group_strings = paren_group_string.split(\"\
    \").filter(_.nonEmpty)\n                        paren_group_strings.foreach {\
    \ paren_group_string =>\n                            val paren_group_level = paren_levels.getOrElseUpdate(paren_group_string,\
    \ 0L)\n                            paren_levels += (paren_group_string -> paren_group_level\
    \ + 1)\n                            val paren_group_strings = paren_group_string.split(\"\
    \").filter(_.nonEmpty)\n                            paren_group_strings.foreach\
    \ { paren_group_string =>\n                                val paren_group_level\
    \ = paren_levels.getOrElseUpdate(paren_group_string, 0L)\n                   \
    \             paren_levels += (paren_group_string -> paren_group_level + 1)\n\
    \                                val paren_group_strings = paren_group_string.split(\"\
    \").filter(_.nonEmpty)\n                                paren_group_strings.foreach\
    \ { paren", "        val paren_stack = mutable.Stack[String]()\n        val paren_queue\
    \ = mutable.Queue[String]()\n        paren_queue.enqueue(paren_string)\n     \
    \   paren_stack.push(paren_queue.dequeue)\n        val paren_levels = mutable.ListBuffer[Long]()\n\
    \        while (paren_stack.nonEmpty) {\n            val paren_str = paren_stack.dequeue\n\
    \            val paren_level = (paren_str.length - 1) / 2\n            paren_levels\
    \ += paren_level\n            if (paren_str.length % 2 == 1) {\n             \
    \   paren_queue.enqueue(paren_str + paren_str)\n            }\n        }\n   \
    \     paren_levels.toList", "        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_levels = mutable.ListBuffer[Long]()\n        paren_stack.push(0L)\n\
    \        paren_levels.append(0L)\n        paren_string match {\n            case\
    \ \"\" => paren_levels\n            case x => x foreach { c =>\n             \
    \   val paren_level = paren_stack.last\n                val paren_level = paren_level\
    \ + 1\n                paren_stack.push(paren_level)\n                paren_levels.append(paren_level)\n\
    \                c match {\n                    case '(' -> paren_stack.push(paren_level)\n\
    \                    case ')' -> paren_level -= 1\n                    case '('\
    \ =>\n                        paren_stack.last\n                        paren_level\n\
    \                }\n            }\n        }\n        paren_levels", "       \
    \ val paren_stack = mutable.Stack[Long]()\n        val paren_stack_map = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_size = mutable.Map[Long, Long]()\n    \
    \    val paren_stack_map_size_size = mutable.Map[Long, Long]()\n        val paren_stack_map_size_size_size:\
    \ mutable.Map[Long, Long] = mutable.Map[Long, Long]()\n        val paren_stack_map_size_size_size_size:\
    \ mutable.Map[Long, Long] = mutable.Map[Long, Long]()\n        val paren_stack_map_size_size_size_size_size:\
    \ mutable.Map[Long, Long] = mutable.Map[Long, Long]()\n        val paren_stack_map_size_size_size_size_size_size:\
    \ mutable.Map[Long, Long] = mutable.Map[Long, Long]()\n        val paren_stack_map_size_size_size_size_size_size_size:\
    \ mutable.Map[Long, Long] = mutable.Map[Long, Long]()\n        val paren_stack_map_size_size_size_size_size_size_size_size:\
    \ mutable.Map[Long, Long] = mutable.Map[Long, Long]()\n        val paren_stack_map_size_size_size_size_size_size_size_size_size:\
    \ mutable.Map[Long, Long] = mutable.Map[Long, Long]()\n        val paren_stack_map_size_size_size_size_size_size_size_size_size_size:\
    \ mutable.Map[Long, Long] = mutable.Map[Long, Long]()\n        val paren_stack_map_size_size_size_size_size_size_size_size_size_size_size:\
    \ mutable.Map[Long, Long] = mutable.Map[Long, Long]()\n        val paren_stack_map_size_size_size_size_size_size_size_size_size_size_size_size:\
    \ mutable.Map[Long, Long] = mutable.Map[Long, Long]()\n        val paren_stack_map_size_size_size_size_size_size_size_size_size_size_size_size_size:\
    \ mutable.Map[Long, Long] = mutable.Map[Long, Long]()\n        val paren_stack_map_size_size_size_size_size_size_size_size_size_size_size_size_size_size:\
    \ mutable.Map[Long, Long] = mutable.Map[Long, Long]()\n        val paren_stack_map_size_size_size_size_size_size_size_size_size_size_size_size_size_size:\
    \ mutable.Map[Long, Long] = mutable.Map[Long, Long]()\n        val paren_stack_map_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size:\
    \ mutable.Map[Long, Long] = mutable.Map[Long, Long", "        val paren_stack\
    \ = mutable.Stack[String]()\n        val paren_stack_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_size = mutable.Stack[Long]()\n        val paren_stack_max_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_", "        val paren_chars = paren_string.toCharArray\n\
    \        val paren_chars_size = paren_chars.length\n        val paren_chars_map\
    \ = mutable.HashMap[Char, Long]()\n        var paren_level = 0\n        var paren_level_count\
    \ = 0\n        var paren_level_max_count = 0\n        var paren_level_max_char\
    \ = \"\"\n        var paren_level_max_char_pos = 0\n        var paren_level_max_char_pos\
    \ = 0\n        var paren_level_max_char_pos = 0\n        var paren_level_max_char_pos\
    \ = 0\n        var paren_level_max_char_pos = 0\n        var paren_level_max_char_pos\
    \ = 0\n        var paren_level_max_char_pos = 0\n        var paren_level_max_char_pos\
    \ = 0\n        var paren_level_max_char_pos = 0\n        var paren_level_max_char_pos\
    \ = 0\n        var paren_level_max_char_pos = 0\n        var paren_level_max_char_pos\
    \ = 0\n        var paren_level_max_char_pos = 0\n        var paren_level_max_char_pos\
    \ = 0\n        var paren_level_max_char_pos = 0\n        var paren_level_max_char_pos\
    \ = 0\n        var paren_level_max_char_pos = 0\n        var paren_level_max_char_pos\
    \ = 0\n        var paren_level_max_char_pos = 0\n        var paren_level_max_char_pos\
    \ = 0\n        var paren_level_max_char_pos = 0\n        var paren_level_max_char_pos\
    \ = 0\n        var paren_level_max_char_pos = 0\n        var paren_level_max_char_pos\
    \ = 0\n        var paren_level_max_char_pos = 0\n        var paren_level_max_char_pos\
    \ = 0\n        var paren_level_max_char_pos = 0\n        var paren_level_max_char_pos\
    \ = 0\n        var paren_level_max_char_pos = 0\n        var paren_level_max_char_pos\
    \ = 0\n        var paren_level_max_char_pos = 0\n        var paren_level_max_char_pos\
    \ = 0\n        var paren_level_max_char_pos = 0\n        var paren_level_max_char_pos\
    \ = 0\n        var paren_level_max_char_pos = 0\n        var paren_level_max_char_pos\
    \ = 0\n        var paren_level_max_char_pos = 0\n        var paren_level_max_char_pos\
    \ = 0\n        var paren_level_max_char_pos = 0\n        var paren_level_max_char_pos\
    \ = 0\n        var paren_level_max_char_pos = 0\n        var paren_level_max_char_pos\
    \ = 0\n        var paren_level_max_char_pos = 0\n        var paren_level_max_char_pos\
    \ = 0\n        var paren_level_max_char_pos = 0\n        var paren_level_max_char_pos\
    \ = 0\n        var paren_level_max_char_pos = 0\n        var paren_level_max_char_pos\
    \ = 0\n        var paren_level_max_char_pos = 0\n        var paren", "       \
    \ val paren_stack = mutable.Stack[String]()\n        val paren_stack_map = mutable.Map[String,\
    \ List[Long]]()\n        paren_stack.push(paren_string)\n        paren_stack_map.put(paren_string,\
    \ List())\n        while(paren_stack.nonEmpty) {\n            val paren_string\
    \ = paren_stack.pop()\n            val paren_list_string = paren_stack_map.get(paren_string).getOrElse(\"\
    \")\n            val paren_list_string = paren_list_string + paren_string\n  \
    \          paren_stack_map.put(paren_string, paren_list_string)\n            val\
    \ paren_list_string = paren_list_string.split(\" \")\n            val paren_list_string\
    \ = paren_list_string.filter(x => x != \"\")\n            val paren_list_string\
    \ = paren_list_string.map(x => x.toLong)\n            paren_stack.push(paren_list_string.mkString(\"\
    \"))\n        }\n        val max_level = paren_stack_map.values.map(_.size).max\n\
    \        val max_level_map = paren_stack_map.mapValues(_.size)\n        val max_level_map_sorted\
    \ = max_level_map.toSeq.sortBy(_._1).reverse\n        val max_level_map_sorted_list\
    \ = max_level_map_sorted.map(x => x._2).map(x => x.toLong)\n        val max_level_map_sorted_list_string\
    \ = max_level_map_sorted_list.mkString(\" \")\n        val max_level_map_sorted_list_string_length\
    \ = max_level_map_sorted_list_string.size\n        val max_level_map_sorted_list_string_length_with_spaces\
    \ = max_level_map_sorted_list_string_length + 1\n        val max_level_map_sorted_list_string_length_with_spaces_string\
    \ = max_level_map_sorted_list_string_length_with_spaces + \" \"\n        val max_level_map_sorted_list_string_length_with_spaces_string_reversed\
    \ = max_level_map_sorted_list_string_length_with_spaces_string.reverse\n     \
    \   val max_level_map_sorted_list_string_length_with_spaces_string_reversed_with_spaces\
    \ = max_level_map_sorted_list_string_length_with_spaces_string_reversed.replace(\"\
    \ \", \"\")\n        val max_level_map_sorted_list_string_length_with_spaces_string_reversed_with_spaces_reversed\
    \ = max_level_map_sorted_list_string_length_with_spaces_string_reversed_with_spaces.reverse\n\
    \        val max_level_map_sorted_list_string_length_with_spaces_string_reversed_with_spaces_reversed_with_spaces\
    \ = max_level_map_sorted_list_string_length_with_spaces_string_reversed_with_spaces_reversed.replace(\"\
    \ \", \"\")\n        val max_level_map_sorted_list_string_length_with_spaces_string_reversed_with_spaces_reversed_with_spaces_reversed\
    \ = ", "        val paren_groups = paren_string.split(\" \")\n        val max_level\
    \ = 0\n        val levels = mutable.ArrayBuffer.empty[Long]\n        for (paren_group\
    \ <- paren_groups) {\n            val paren_group_levels = paren_group.split(\"\
    \\\\(\").map(x => x.split(\"\\\\)\").length)\n            val max_level = if (paren_group_levels.max\
    \ > max_level) paren_group_levels.max else max_level\n            levels += paren_group_levels.max\n\
    \        }\n        levels.toList", "        val paren_chars = paren_string.split(\"\
    \ \").map(_.toChar)\n        val paren_chars_count = paren_chars.map(_.length).sum\n\
    \        val paren_chars_array = paren_chars.toArray\n        val paren_chars_array_count\
    \ = paren_chars_array.length\n        val paren_chars_array_max_count = paren_chars_array_count\
    \ - 1\n        val paren_chars_array_max_index = paren_chars_array_max_count -\
    \ 1\n        val paren_chars_array_max_value = paren_chars_array_max_count - 1\n\
    \        val paren_chars_array_max_value_count = paren_chars_array_max_value -\
    \ 1\n        val paren_chars_array_max_value_count_index = paren_chars_array_max_value_count\
    \ - 1\n        val paren_chars_array_max_value_count_index = paren_chars_array_max_value_count\
    \ - 1\n        val paren_chars_array_max_value_count_index_count = paren_chars_array_max_value_count_index\
    \ - 1\n        val paren_chars_array_max_value_count_index_count_count = paren_chars_array_max_value_count_index_count\
    \ - 1\n        val paren_chars_array_max_value_count_index_count_count_count =\
    \ paren_chars_array_max_value_count_index_count_count - 1\n        val paren_chars_array_max_value_count_index_count_count_count_count\
    \ = paren_chars_array_max_value_count_index_count_count_count - 1\n        val\
    \ paren_chars_array_max_value_count_index_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_",
  "        val paren_stack = mutable.Stack[String]()\n        val paren_stack_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level = mutable.Stack[Long]()\n\
    \        val paren_stack_level_size = mutable.Stack[Long]()\n        val paren_stack_level_curr\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_curr = mutable.Stack[Long]()\n\
    \        val paren_stack_level_curr = mutable.Stack[Long]()\n        val paren_stack_level_curr\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_curr = mutable.Stack[Long]()\n\
    \        val paren_stack_level_curr = mutable.Stack[Long]()\n        val paren_stack_level_curr\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_curr = mutable.Stack[Long]()\n\
    \        val paren_stack_level_curr = mutable.Stack[Long]()\n        val paren_stack_level_curr\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_curr = mutable.Stack[Long]()\n\
    \        val paren_stack_level_curr = mutable.Stack[Long]()\n        val paren_stack_level_curr\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_curr = mutable.Stack[Long]()\n\
    \        val paren_stack_level_curr = mutable.Stack[Long]()\n        val paren_stack_level_curr\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_curr = mutable.Stack[Long]()\n\
    \        val paren_stack_level_curr = mutable.Stack[Long]()\n        val paren_stack_level_curr\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_curr = mutable.Stack[Long]()\n\
    \        val paren_stack_level_curr = mutable.Stack[Long]()\n        val paren_stack_level_curr\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_curr = mutable.Stack[Long]()\n\
    \        val paren_stack_level_curr = mutable.Stack[Long]()\n        val paren_stack_level_curr\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_curr = mutable.Stack[Long]()\n\
    \        val paren_stack_level_curr = mutable.Stack[Long]()\n        val paren_stack_level_curr\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_cur", "        val paren_stack\
    \ = mutable.Stack[String]()\n        val paren_queue = mutable.Queue[String]()\n\
    \        paren_queue.enqueue(paren_string)\n        paren_stack.push(paren_queue.dequeue())\n\
    \        val paren_levels = mutable.ArrayBuffer.empty[Long]\n        while (paren_stack.nonEmpty)\
    \ {\n            val paren_str = paren_stack.dequeue()\n            val paren_level\
    \ = (paren_str.length - 1) / 2\n            paren_levels += paren_level\n    \
    \        paren_queue.enqueue(paren_str.substring(0, paren_level))\n          \
    \  paren_stack.push(paren_queue.dequeue())\n        }\n        paren_levels.toList",
  "        val paren_stack = mutable.Stack[String]()\n        val paren_queue = mutable.Queue[String]()\n\
    \        paren_queue.enqueue(paren_string)\n        paren_stack.push(paren_queue.dequeue)\n\
    \        val max_level = 0\n        var level = 0\n        while(!paren_stack.isEmpty)\
    \ {\n            val paren_string = paren_stack.dequeue\n            val paren_level\
    \ = paren_string.count('(') - paren_string.count(')')\n            if(paren_level\
    \ > max_level) {\n                max_level = paren_level\n                level\
    \ = paren_level\n            }\n            paren_stack.enqueue(paren_string)\n\
    \            paren_queue.enqueue(paren_string)\n        }\n        level", " \
    \       val paren_array = paren_string.split(\" \")\n        val max_level = 0\n\
    \        val max_level_array = new Array[Long](paren_array.length)\n        for\
    \ (i <- 0 until paren_array.length) {\n            val paren_level = paren_array(i).length\n\
    \            if (paren_level > max_level) {\n                max_level = paren_level\n\
    \                max_level_array(i) = paren_level\n            } else if (paren_level\
    \ == max_level) {\n                max_level_array(i) = max_level_array(i) + 1\n\
    \            }\n        }\n        max_level_array.toList", "        val paren_stack\
    \ = mutable.Stack[String]()\n        val paren_queue = mutable.Queue[String]()\n\
    \        paren_queue.enqueue(paren_string)\n        paren_stack.push(paren_queue.dequeue)\n\
    \        val max_level = 0\n        while(!paren_queue.isEmpty) {\n          \
    \  val current_paren_str = paren_queue.dequeue\n            val current_paren_stack\
    \ = paren_stack.last\n            val current_paren_queue = paren_queue\n    \
    \        val current_paren_level = paren_stack.size\n            val current_paren_str\
    \ = current_paren_str.replaceAll(\"\\\\)\", \"\\\\)\").replaceAll(\"\\\\(\", \"\
    \\\\(\")\n            val current_paren_stack = current_paren_stack.replaceAll(\"\
    \\\\)\", \"\\\\)\").replaceAll(\"\\\\(\", \"\\\\(\")\n            val current_paren_queue\
    \ = current_paren_queue.replaceAll(\"\\\\)\", \"\\\\)\").replaceAll(\"\\\\(\"\
    , \"\\\\(\")\n            val current_paren_level = current_paren_level + 1\n\
    \            val current_paren_str = current_paren_str.replaceAll(\"\\\\)\", \"\
    \\\\)\").replaceAll(\"\\\\(\", \"\\\\(\")\n            val current_paren_stack\
    \ = current_paren_stack.replaceAll(\"\\\\)\", \"\\\\)\").replaceAll(\"\\\\(\"\
    , \"\\\\(\")\n            val current_paren_queue = current_paren_queue.replaceAll(\"\
    \\\\)\", \"\\\\)\").replaceAll(\"\\\\(\", \"\\\\(\")\n            val current_paren_level\
    \ = current_paren_level + 1\n            val current_paren_str = current_paren_str.replaceAll(\"\
    \\\\)\", \"\\\\)\").replaceAll(\"\\\\(\", \"\\\\(\")\n            val current_paren_stack\
    \ = current_paren_stack.replaceAll(\"\\\\)\", \"\\\\)\").replaceAll(\"\\\\(\"\
    , \"\\\\(\")\n            val current_paren_queue = current_paren_queue.replaceAll(\"\
    \\\\)\", \"\\\\)\").replaceAll(\"\\\\(\", \"\\\\(\")\n            val current_paren_level\
    \ = current_paren_level + 1\n            val current_paren_str = current_paren_str.replaceAll(\"\
    \\\\)\", \"\\\\)\").replaceAll(\"\\\\(\", \"\\\\(\")\n            val current_paren_stack\
    \ = current_paren_stack.replaceAll(\"\\\\)\", \"\\\\)\").replaceAll(\"\\\\(\"\
    , \"\\\\(\")\n            val current_paren_queue = current_paren_queue.replaceAll(\"\
    \\\\)\", \"\\\\)\").replaceAll(\"\\\\(\", \"\\\\(\")\n            val current_paren_level\
    \ = current_paren_level + 1\n            val current_paren_str = current_paren_str.replaceAll(\"",
  "        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_size =\
    \ mutable.Stack[Long]()\n        val paren_stack_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_top\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top = mutable.Stack[Long]()\n        val paren_stack_top_top_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_size = mutable.Stack[Long]()\n      \
    \  val paren_stack_top_top_top_top_top = mutable.Stack[Long]()\n        val paren_stack_top_top_top_top_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_", "        val paren_groups = paren_string.split(\"\
    \ \")\n        val max_levels = paren_groups.map(x => x.length).max\n        val\
    \ max_levels_map = mutable.Map[Long, Long]()\n        paren_groups.foreach(x =>\
    \ {\n            val level = x.length\n            val level_value = max_levels_map.getOrElse(level,\
    \ 0)\n            max_levels_map(level) = level_value\n        })\n        val\
    \ max_levels_map_list = max_levels_map.toList.sortBy(_._1).reverse\n        val\
    \ max_levels_map_list_iter = max_levels_map_list.iterator\n        val max_levels_map_list_next\
    \ = max_levels_map_list_iter.next()\n        val max_levels_map_list_value = max_levels_map_list_next._2\n\
    \        val max_levels_map_list_key = max_levels_map_list_next._1\n        val\
    \ max_levels_map_list_value_iter = max_levels_map_list_value.iterator\n      \
    \  val max_levels_map_list_value_next = max_levels_map_list_value_iter.next()\n\
    \        val max_levels_map_list_value_value = max_levels_map_list_value_next._2\n\
    \        val max_levels_map_list_value_key = max_levels_map_list_value_next._1\n\
    \        val max_levels_map_list_key_iter = max_levels_map_list_key.iterator\n\
    \        val max_levels_map_list_key_next = max_levels_map_list_key_iter.next()\n\
    \        val max_levels_map_list_key_value = max_levels_map_list_key_next._2\n\
    \        val max_levels_map_list_key_value = max_levels_map_list_key_next._1\n\
    \        val max_levels_map_list_value_key_iter = max_levels_map_list_value_key.iterator\n\
    \        val max_levels_map_list_value_key_next = max_levels_map_list_value_key_iter.next()\n\
    \        val max_levels_map_list_value_key_value = max_levels_map_list_value_key_next._2\n\
    \        val max_levels_map_list_value_key_value = max_levels_map_list_value_key_next._1\n\
    \        val max_levels_map_list_key_value_iter = max_levels_map_list_key_value.iterator\n\
    \        val max_levels_map_list_key_value_next = max_levels_map_list_key_value_iter.next()\n\
    \        val max_levels_map_list_key_value_key_iter = max_levels_map_list_key_value_next.iterator\n\
    \        val max_levels_map_list_key_value_key_next = max_levels_map_list_key_value_key_iter.next()\n\
    \        val max_levels_map_list_key_value_key_value = max_levels_map_list_key_value_key_next._2\n\
    \        val max_levels_map_list_key_value_key_value = max_levels_map_list_key_value_key_next.",
  "        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_size =\
    \ mutable.Stack[Long]()\n        val paren_stack_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_",
  "        val paren_stack = mutable.Stack[String]()\n        val paren_stack_map\
    \ = mutable.HashMap[String, Long]()\n        paren_stack.push(paren_string)\n\
    \        val paren_stack_map_size = paren_stack_map.size\n        while(paren_stack.nonEmpty)\
    \ {\n            val paren_string = paren_stack.pop()\n            val paren_stack_map_size\
    \ = paren_stack_map.size\n            val paren_stack_map_iter = paren_stack_map.iterator\n\
    \            val paren_stack_map_iter_next = paren_stack_map_iter.next()\n   \
    \         val paren_stack_map_iter_next_key = paren_stack_map_iter_next.key\n\
    \            val paren_stack_map_iter_next_value = paren_stack_map_iter_next.value\n\
    \            val paren_stack_map_iter_next_key_size = paren_stack_map_iter_next_key.length\n\
    \            val paren_stack_map_iter_next_value_size = paren_stack_map_iter_next_value.length\n\
    \            val paren_stack_map_iter_next_key_is_space = paren_stack_map_iter_next_key.charAt(paren_stack_map_iter_next_key_size-1)\
    \ == ' '\n            val paren_stack_map_iter_next_value_is_space = paren_stack_map_iter_next_value.charAt(paren_stack_map_iter_next_value_size-1)\
    \ == ' '\n            val paren_stack_map_iter_next_key_is_open = paren_stack_map_iter_next_key.charAt(paren_stack_map_iter_next_key_size-1)\
    \ == '('\n            val paren_stack_map_iter_next_value_is_open = paren_stack_map_iter_next_value.charAt(paren_stack_map_iter_next_value_size-1)\
    \ == '('\n            val paren_stack_map_iter_next_key_is_close = paren_stack_map_iter_next_key.charAt(paren_stack_map_iter_next_key_size-1)\
    \ == ')'\n            val paren_stack_map_iter_next_value_is_close = paren_stack_map_iter_next_value.charAt(paren_stack_map_iter_next_value_size-1)\
    \ == ')'\n            val paren_stack_map_iter_next_key_is_comma = paren_stack_map_iter_next_key.charAt(paren_stack_map_iter_next_key_size-1)\
    \ == ','\n            val paren_stack_map_iter_next_value_is_comma = paren_stack_map_iter_next_value.charAt(paren_stack_map_iter_next_value_size-1)\
    \ == ','\n            val paren_stack_map_iter_next_key_is_dot = paren_stack_map_iter_next_key.charAt(paren_stack_map_iter_next_key_size-1)\
    \ == '.'\n            val paren_stack_map_iter_next_value_is_dot = paren_stack_map_iter_next_value.charAt(paren_stack_map_iter_next_value_size-1)\
    \ == '.'\n            val paren_stack_map_iter_", "        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_map = mutable.Map[String, List[Long]]()\n        val\
    \ paren_stack_map_keys = mutable.Map[String, Long]()\n        val paren_stack_map_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_keys = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_values_values = mutable.Map[Long, Long]()\n\
    \        val paren_stack_map_values_values_keys = mutable.Map[Long, Long]()\n\
    \        val paren_stack_map_values_values_values = mutable.Map[Long, Long]()\n\
    \        val paren_stack_map_values_values_values_keys = mutable.Map[Long, Long]()\n\
    \        val paren_stack_map_values_values_values_values = mutable.Map[Long, Long]()\n\
    \        val paren_stack_map_values_values_values_values_keys = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_values_values_values_values_values = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_",
  "        val paren_groups = paren_string.split(\"\\\\s+\")\n        val max_levels\
    \ = paren_groups.map(paren => paren.length).max\n        val levels = mutable.ArrayBuffer.empty[Long]\n\
    \        var level = 0\n        for (paren \u2190 paren_groups) {\n          \
    \  if (paren.length == level) {\n                levels += 1\n            } else\
    \ {\n                level = 0\n                levels += 1\n            }\n \
    \       }\n        levels.toList", "        val paren_groups = paren_string.split(\"\
    \ \").map(_.toLong)\n        val max_levels = paren_groups.foldLeft(0)(_ + _.length)\n\
    \        val max_levels_map = paren_groups.map(x => (x, x.length)).toMap\n   \
    \     val max_levels_map_keys = max_levels_map.keys\n        val max_levels_map_values\
    \ = max_levels_map.values\n        val max_levels_map_keys_sorted = max_levels_map_keys.sorted\n\
    \        val max_levels_map_values_sorted = max_levels_map_values.sorted\n   \
    \     val max_levels_map_keys_sorted_zipped = max_levels_map_keys_sorted.zip(max_levels_map_values_sorted)\n\
    \        val max_levels_map_keys_sorted_zipped_sorted = max_levels_map_keys_sorted_zipped.sortBy(_._1).reverse\n\
    \        val max_levels_map_keys_sorted_zipped_sorted_zipped = max_levels_map_keys_sorted_zipped_sorted.zip(max_levels_map_values_sorted)\n\
    \        val max_levels_map_keys_sorted_zipped_sorted_zipped_sorted = max_levels_map_keys_sorted_zipped_sorted_zipped.sortBy(_._1).reverse\n\
    \        val max_levels_map_keys_sorted_zipped_sorted_zipped_sorted_zipped = max_levels_map_keys_sorted_zipped_sorted_zipped_sorted.zip(max_levels_map_values_sorted)\n\
    \        val max_levels_map_keys_sorted_zipped_sorted_zipped_sorted_zipped_sorted\
    \ = max_levels_map_keys_sorted_zipped_sorted_zipped_sorted_zipped.sortBy(_._1).reverse\n\
    \        val max_levels_map_keys_sorted_zipped_sorted_zipped_sorted_zipped_sorted_zipped\
    \ = max_levels_map_keys_sorted_zipped_sorted_zipped_sorted_zipped_sorted.zip(max_levels_map_values_sorted)\n\
    \        val max_levels_map_keys_sorted_zipped_sorted_zipped_sorted_zipped_sorted_zipped_sorted\
    \ = max_levels_map_keys_sorted_zipped_sorted_zipped_sorted_zipped_sorted_zipped.sortBy(_._1).reverse\n\
    \        val max_levels_map_keys_sorted_zipped_sorted_zipped_sorted_zipped_sorted_zipped_sorted_zipped\
    \ = max_levels_map_keys_sorted_zipped_sorted_zipped_sorted_zipped_sorted_zipped_sorted.zip(max_levels_map_values_sorted)\n\
    \        val max_levels_map_keys_sorted_zipped_sorted_zipped_sorted_zipped_sorted_zipped_sorted_zipped_sorted\
    \ = max_levels_map_keys_sorted_zipped_sorted_zipped_sorted_zipped_sorted_zipped_sorted_zipped.sortBy(_._1).reverse\n\
    \        val max_levels_map_keys_sorted_zipped_", "        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_map = mutable.Map[String, Long]()\n        val paren_stack_map_keys\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_values_keys = mutable.Map[String, Long]()\n\
    \        val paren_stack_map_values_values = mutable.Map[String, Long]()\n   \
    \     val paren_stack_map_values_values_keys = mutable.Map[String, Long]()\n \
    \       val paren_stack_map_values_values_values = mutable.Map[String, Long]()\n\
    \        val paren_stack_map_values_values_values_keys = mutable.Map[String, Long]()\n\
    \        val paren_stack_map_values_values_values_values = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_values_values_values_values_keys = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_values_values_values_values_values = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_values_values_values_values_values_keys\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_values_values_values_values_values\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_values_values_values_values_values_keys\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_keys_values\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_keys_values_values\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_keys_values_values_values_values_keys_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_",
  "        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_map =\
    \ mutable.Map[Long, Long]()\n        val paren_stack_map_keys = mutable.Set[Long]()\n\
    \        val paren_stack_map_values = mutable.Set[Long]()\n        val paren_stack_map_values_count\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_count_keys =\
    \ mutable.Set[Long]()\n        val paren_stack_map_values_count_values = mutable.Set[Long]()\n\
    \        val paren_stack_map_values_count_keys_count = mutable.Map[Long, Long]()\n\
    \        val paren_stack_map_values_count_keys_count_values = mutable.Set[Long]()\n\
    \        val paren_stack_map_values_count_keys_count_values_count = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_values_count_keys_count_values_count_keys\
    \ = mutable.Set[Long]()\n        val paren_stack_map_values_count_keys_count_values_count_values\
    \ = mutable.Set[Long]()\n        val paren_stack_map_values_count_keys_count_values_count_keys_count\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_count_keys_count_values_count_keys_count_values\
    \ = mutable.Set[Long]()\n        val paren_stack_map_values_count_keys_count_values_count_keys_count_values_count\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_count_keys_count_values_count_keys_count_values_count_keys\
    \ = mutable.Set[Long]()\n        val paren_stack_map_values_count_keys_count_values_count_keys_count_values_count_values\
    \ = mutable.Set[Long]()\n        val paren_stack_map_values_count_keys_count_values_count_keys_count_values_count_keys_count\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_count_keys_count_values_count_keys_count_values_count_keys_count_values\
    \ = mutable.Set[Long]()\n        val paren_stack_map_values_count_keys_count_values_count_keys_count_values_count_keys_count_values_count\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_count_keys_count_values_count_keys_count_values_count_keys_count_values_count_keys\
    \ = mutable.Set[Long]()\n        val paren_stack_map_values_count_keys_count_values_count_keys_count_values_count_keys_count_values_count_values\
    \ = mutable.Set[Long]()\n        val paren_stack_map_values_count_keys_count_values_count_keys_count_values_count_keys_count_values_count_keys_count\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_count_", " \
    \       val paren_chars = paren_string.split(\"\"\"[\\(\\)]\"\"\").toList\n  \
    \      val paren_chars_size = paren_chars.size\n        val paren_chars_map =\
    \ paren_chars.zipWithIndex.toMap\n        val paren_chars_map_size = paren_chars_map.size\n\
    \        val paren_chars_map_keys = paren_chars_map.keys\n        val paren_chars_map_values\
    \ = paren_chars_map.values\n        val paren_chars_map_values_size = paren_chars_map_values.size\n\
    \        val paren_chars_map_values_keys = paren_chars_map_values.keys\n     \
    \   val paren_chars_map_values_values_size = paren_chars_map_values_values.size\n\
    \        val paren_chars_map_values_values_keys = paren_chars_map_values_values.keys\n\
    \        val paren_chars_map_values_values_values_size = paren_chars_map_values_values_values.size\n\
    \        val paren_chars_map_values_values_values_keys = paren_chars_map_values_values_values.keys\n\
    \        val paren_chars_map_values_values_values_values_size = paren_chars_map_values_values_values_values.size\n\
    \        val paren_chars_map_values_values_values_values_keys = paren_chars_map_values_values_values_values.keys\n\
    \        val paren_chars_map_values_values_values_values_values_size = paren_chars_map_values_values_values_values_values.size\n\
    \        val paren_chars_map_values_values_values_values_values_keys = paren_chars_map_values_values_values_values_values.keys\n\
    \        val paren_chars_map_values_values_values_values_values_values_size =\
    \ paren_chars_map_values_values_values_values_values_values.size\n        val\
    \ paren_chars_map_values_values_values_values_values_values_values_keys = paren_chars_map_values_values_values_values_values_values_values.keys\n\
    \        val paren_chars_map_values_values_values_values_values_values_values_values_size\
    \ = paren_chars_map_values_values_values_values_values_values_values_values.size\n\
    \        val paren_chars_map_values_values_values_values_values_values_values_values_values_keys\
    \ = paren_chars_map_values_values_values_values_values_values_values_values.keys\n\
    \        val paren_chars_map_values_values_values_values_values_values_values_values_values_values_values_size\
    \ = paren_chars_map_values_values_values_values_values_values_values_values_values.size\n\
    \        val paren_chars_map_values_values_values_values_values_values_values_values_values_values_values_keys\
    \ = paren_chars_map_values_values_values_values_values_values_values_values_values_values.keys\n\
    \        val paren_chars_map_values_values_values_values_values_values_values_values_values_values_values_values_values_",
  "        val paren_stack = mutable.Stack[String]()\n        val paren_stack_map\
    \ = mutable.Map[String, List[Long]]()\n        paren_stack.push(paren_string)\n\
    \        val paren_stack_map_keys = paren_stack_map.keys\n        val paren_stack_map_values\
    \ = paren_stack_map.values\n        while(paren_stack.nonEmpty) {\n          \
    \  val paren_string = paren_stack.pop()\n            val paren_stack_map_key =\
    \ paren_stack_map_keys.last\n            val paren_stack_map_value = paren_stack_map_values.last\n\
    \            val paren_stack_map_value_length = paren_stack_map_value.length\n\
    \            val paren_stack_map_value_length = paren_stack_map_value_length +\
    \ 1\n            val paren_stack_map_value_length = paren_stack_map_value_length\
    \ + 1\n            val paren_stack_map_value_length = paren_stack_map_value_length\
    \ + 1\n            val paren_stack_map_value_length = paren_stack_map_value_length\
    \ + 1\n            val paren_stack_map_value_length = paren_stack_map_value_length\
    \ + 1\n            val paren_stack_map_value_length = paren_stack_map_value_length\
    \ + 1\n            val paren_stack_map_value_length = paren_stack_map_value_length\
    \ + 1\n            val paren_stack_map_value_length = paren_stack_map_value_length\
    \ + 1\n            val paren_stack_map_value_length = paren_stack_map_value_length\
    \ + 1\n            val paren_stack_map_value_length = paren_stack_map_value_length\
    \ + 1\n            val paren_stack_map_value_length = paren_stack_map_value_length\
    \ + 1\n            val paren_stack_map_value_length = paren_stack_map_value_length\
    \ + 1\n            val paren_stack_map_value_length = paren_stack_map_value_length\
    \ + 1\n            val paren_stack_map_value_length = paren_stack_map_value_length\
    \ + 1\n            val paren_stack_map_value_length = paren_stack_map_value_length\
    \ + 1\n            val paren_stack_map_value_length = paren_stack_map_value_length\
    \ + 1\n            val paren_stack_map_value_length = paren_stack_map_value_length\
    \ + 1\n            val paren_stack_map_value_length = paren_stack_map_value_length\
    \ + 1\n            val paren_stack_map_value_length = paren_stack_map_value_length\
    \ + 1\n            val paren_stack_map_value_length = paren_stack_map_value_length\
    \ + 1\n            val paren_stack_map_value_length = paren_stack_map_value_length\
    \ + 1\n            val paren_stack_map_value_length = paren_stack_map_value_length\
    \ + 1\n            val paren_stack_map_value_length = paren_stack_map_value_length\
    \ + 1\n            val paren_stack_map_value_length = paren_stack_map_value_length\
    \ + 1\n            val ", "        val paren_stack = mutable.Stack[Long]()\n \
    \       val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_max_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_size = mutable.Stack[Long]()\n  \
    \      val paren_stack_max_depth_pos_depth_depth = mutable.Stack[Long]()\n   \
    \     val paren_stack_max_depth_pos_depth_depth_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_depth_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_depth_depth_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_depth_depth_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_depth_depth_depth_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth_depth_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth_depth_depth_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_", "        val paren_stack\
    \ = mutable.Stack[String]()\n        val paren_queue = mutable.Queue[String]()\n\
    \        paren_queue.enqueue(paren_string)\n        while(!paren_queue.isEmpty)\
    \ {\n            val paren_string = paren_queue.dequeue()\n            val paren_level\
    \ = paren_stack.size\n            val paren_chars = paren_string.chars\n     \
    \       val paren_chars_size = paren_chars.size\n            val paren_chars_index\
    \ = paren_chars.indexWhere(_ == '(')\n            val paren_chars_index_end =\
    \ paren_chars.indexWhere(_ == ')')\n            val paren_chars_index_start =\
    \ paren_chars_index + 1\n            val paren_chars_index_end = paren_chars_index_end\
    \ + 1\n            val paren_chars_index_start = paren_chars_index_start - 1\n\
    \            val paren_chars_index_end = paren_chars_index_end - 1\n         \
    \   val paren_chars_index_start = paren_chars_index_start - 1\n            val\
    \ paren_chars_index_end = paren_chars_index_end - 1\n            val paren_chars_index_start\
    \ = paren_chars_index_start - 1\n            val paren_chars_index_end = paren_chars_index_end\
    \ - 1\n            val paren_chars_index_start = paren_chars_index_start - 1\n\
    \            val paren_chars_index_end = paren_chars_index_end - 1\n         \
    \   val paren_chars_index_start = paren_chars_index_start - 1\n            val\
    \ paren_chars_index_end = paren_chars_index_end - 1\n            val paren_chars_index_start\
    \ = paren_chars_index_start - 1\n            val paren_chars_index_end = paren_chars_index_end\
    \ - 1\n            val paren_chars_index_start = paren_chars_index_start - 1\n\
    \            val paren_chars_index_end = paren_chars_index_end - 1\n         \
    \   val paren_chars_index_start = paren_chars_index_start - 1\n            val\
    \ paren_chars_index_end = paren_chars_index_end - 1\n            val paren_chars_index_start\
    \ = paren_chars_index_start - 1\n            val paren_chars_index_end = paren_chars_index_end\
    \ - 1\n            val paren_chars_index_start = paren_chars_index_start - 1\n\
    \            val paren_chars_index_end = paren_chars_index_end - 1\n         \
    \   val paren_chars_index_start = paren_chars_index_start - 1\n            val\
    \ paren_chars_index_end = paren_chars_index_end - ", "        val paren_stack\
    \ = mutable.Stack[String]()\n        val paren_stack_map = mutable.Map[String,\
    \ Long]()\n        paren_stack.push(paren_string)\n        paren_stack_map.put(paren_string,\
    \ 0L)\n        val paren_stack_max_level = mutable.Map[String, Long]()\n     \
    \   val paren_stack_max_level_map = mutable.Map[String, Long]()\n        while(paren_stack.nonEmpty)\
    \ {\n            val paren_string = paren_stack.pop()\n            val paren_level\
    \ = paren_stack_map.get(paren_string)\n            val paren_level_map = paren_stack_max_level_map.get(paren_string)\n\
    \            if (paren_level == null || paren_level_map == null) {\n         \
    \       paren_stack_max_level.put(paren_string, paren_level)\n               \
    \ paren_stack_max_level_map.put(paren_string, paren_level)\n            } else\
    \ {\n                val max_level = paren_level_map.getOrElse(paren_string, 0L)\n\
    \                if (paren_level > max_level) {\n                    paren_stack_max_level.put(paren_string,\
    \ paren_level)\n                    paren_stack_max_level_map.put(paren_string,\
    \ paren_level)\n                }\n            }\n            val paren_group_string\
    \ = paren_string.substring(0, paren_string.indexOf('('))\n            val paren_group_level\
    \ = paren_stack_map.get(paren_group_string)\n            val paren_group_level_map\
    \ = paren_stack_max_level_map.get(paren_group_string)\n            if (paren_group_level\
    \ == null || paren_group_level_map == null) {\n                paren_stack_max_level.put(paren_group_string,\
    \ paren_group_level)\n                paren_stack_max_level_map.put(paren_group_string,\
    \ paren_group_level)\n            } else {\n                val max_level = paren_group_level_map.getOrElse(paren_group_string,\
    \ 0L)\n                if (paren_group_level > max_level) {\n                \
    \    paren_stack_max_level.put(paren_group_string, paren_group_level)\n      \
    \              paren_stack_max_level_map.put(paren_group_string, paren_group_level)\n\
    \                }\n            }\n            val paren_group_strings = paren_string.substring(paren_string.indexOf('(')\
    \ + 1, paren_string.lastIndexOf(')')).split(' ')\n            paren_group_strings.foreach(s\
    \ => {\n                val paren_group_level = paren_stack_map.get(s)\n     \
    \           val paren_group_level_map = paren_stack_max_level_map.get(s)\n   \
    \             if (paren_group_level == null || paren_group_level_map == null)\
    \ {\n                    paren_stack_max_level.put(s, paren_group_level)\n   \
    \                 paren_stack_max_level_map.put(s, paren_group_level)", "    \
    \    val paren_array = paren_string.split(\" \")\n        val paren_array_size\
    \ = paren_array.length\n        val paren_array_max = paren_array_size - 1\n \
    \       var paren_array_index = 0\n        var paren_array_level = 0\n       \
    \ var paren_array_max_level = 0\n        var paren_array_max_level_array = new\
    \ Array[Long](paren_array_max)\n        var paren_array_max_level_array_index\
    \ = 0\n        var paren_array_max_level_array_size = 0\n        var paren_array_max_level_array_max_index\
    \ = 0\n        var paren_array_max_level_array_max_size = 0\n        var paren_array_max_level_array_max_value\
    \ = 0\n        var paren_array_max_level_array_max_value_array = new Array[Long](paren_array_max)\n\
    \        var paren_array_max_level_array_max_value_array_index = 0\n        var\
    \ paren_array_max_level_array_max_value_array_size = 0\n        var paren_array_max_level_array_max_value_array_max_index\
    \ = 0\n        var paren_array_max_level_array_max_value_array_max_size = 0\n\
    \        var paren_array_max_level_array_max_value_array_max_value = 0\n     \
    \   var paren_array_max_level_array_max_value_array_max_value_array = new Array[Long](paren_array_max)\n\
    \        var paren_array_max_level_array_max_value_array_max_value_array_index\
    \ = 0\n        var paren_array_max_level_array_max_value_array_max_value_array_size\
    \ = 0\n        var paren_array_max_level_array_max_value_array_max_value_array_max_index\
    \ = 0\n        var paren_array_max_level_array_max_value_array_max_value_array_max_size\
    \ = 0\n        var paren_array_max_level_array_max_value_array_max_value_array_max_value\
    \ = 0\n        var paren_array_max_level_array_max_value_array_max_value_array_max_value_array\
    \ = new Array[Long](paren_array_max)\n        var paren_array_max_level_array_max_value_array_max_value_array_max_value_array_index\
    \ = 0\n        var paren_array_max_level_array_max_value_array_max_value_array_max_value_array_size\
    \ = 0\n        var paren_array_max_level_array_max_value_array_max_value_array_max_value_array_max_index\
    \ = 0\n        var paren_array_max_level_array_max_value_array_max_value_array_max_value_array_max_size\
    \ = 0\n        var paren_array_max_level_array_max_value_array_max_value_array_max_value_array_max_value\
    \ = 0\n        var paren_array_max_level_array_max_value_array_max_value_array_max_value_array_max_value_array\
    \ = new Array[Long](paren_array_max)\n        var paren_array_max_level_array_max_value_array_max_value_array_max_value_array_max_value_array_index\
    \ = 0\n        var paren_array_max_level_array_max_value_array_max_value_array_max_value_array_max_value_",
  "        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_max =\
    \ mutable.Stack[Long]()\n        val paren_stack_max_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_size = paren_stack_max_size.push(paren_stack_max.size)\n\
    \        val paren_stack_max_size = paren_stack_max_size.push(paren_stack_max.size)\n\
    \        val paren_stack_max_size = paren_stack_max_size.push(paren_stack_max.size)\n\
    \        val paren_stack_max_size = paren_stack_max_size.push(paren_stack_max.size)\n\
    \        val paren_stack_max_size = paren_stack_max_size.push(paren_stack_max.size)\n\
    \        val paren_stack_max_size = paren_stack_max_size.push(paren_stack_max.size)\n\
    \        val paren_stack_max_size = paren_stack_max_size.push(paren_stack_max.size)\n\
    \        val paren_stack_max_size = paren_stack_max_size.push(paren_stack_max.size)\n\
    \        val paren_stack_max_size = paren_stack_max_size.push(paren_stack_max.size)\n\
    \        val paren_stack_max_size = paren_stack_max_size.push(paren_stack_max.size)\n\
    \        val paren_stack_max_size = paren_stack_max_size.push(paren_stack_max.size)\n\
    \        val paren_stack_max_size = paren_stack_max_size.push(paren_stack_max.size)\n\
    \        val paren_stack_max_size = paren_stack_max_size.push(paren_stack_max.size)\n\
    \        val paren_stack_max_size = paren_stack_max_size.push(paren_stack_max.size)\n\
    \        val paren_stack_max_size = paren_stack_max_size.push(paren_stack_max.size)\n\
    \        val paren_stack_max_size = paren_stack_max_size.push(paren_stack_max.size)\n\
    \        val paren_stack_max_size = paren_stack_max_size.push(paren_stack_max.size)\n\
    \        val paren_stack_max_size = paren_stack_max_size.push(paren_stack_max.size)\n\
    \        val paren_stack_max_size = paren_stack_max_size.push(paren_stack_max.size)\n\
    \        val paren_stack_max_size = paren_stack_max_size.push(paren_stack_max.size)\n\
    \        val paren_stack_max_size = paren_stack_max_size.push(paren_stack_max.size)\n\
    \        val paren_stack_max_size = paren_stack_max_size.push(paren_stack_max.size)\n\
    \        val paren_stack_max_size = paren_stack_max_size.push(paren_stack_max.size)\n\
    \        val paren_stack_max_size = paren_stack_max_size.push(paren_stack_max.size)\n\
    \        val paren_stack_max_size = paren_stack_max_size.push(", "        val\
    \ paren_stack = mutable.Stack[Long]()\n        val paren_levels = mutable.ListBuffer[Long]()\n\
    \        val paren_level = 0\n        paren_string.split(\"\\\\s+\").foreach(x\
    \ => {\n            val level = paren_stack.size\n            paren_stack += level\n\
    \            paren_levels += level\n            if (x == \"(\") {\n          \
    \      paren_level += 1\n            } else if (x == \")\") {\n              \
    \  paren_level -= 1\n            }\n        })\n        paren_level.toList", " \
    \       val paren_stack = mutable.Stack[String]()\n        val paren_stack_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos\
    \ = mutable.Stack[Long]()\n        val paren_stack_", "        val paren_stack\
    \ = mutable.Stack[Long]()\n        val paren_stack_map = mutable.Map[Long, Long]()\n\
    \        paren_string.split(\"\\\\s+\").foreach(x => {\n            val paren_level\
    \ = paren_stack.size\n            val paren_level_map = paren_stack_map.getOrElseUpdate(paren_level,\
    \ paren_level)\n            val paren_level_map_key = paren_level_map + paren_level\n\
    \            val paren_level_map_value = paren_level_map_key + paren_level\n \
    \           paren_stack.push(paren_level)\n            paren_stack_map.put(paren_level_map_key,\
    \ paren_level_map_value)\n        })\n        paren_stack.toList", "        val\
    \ paren_stack = mutable.Stack[String]()\n        val paren_stack_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_size = mutable.Stack[Long]()\n        val paren_stack_max_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len_max = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_depth_len_max_index = mutable.Stack[Long]()\n        val paren_stack_max_depth_len_max_index_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len_max_index_max_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len_max_index_max_len_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len_max_index_max_len_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len_max_index_max_len_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len_max_index_max_len_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len_max_index_max_len_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len_max_index_max_len_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len_max_index_max_len_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len_max_index_max_len_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len_max_index_max_len_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len_max_index_max_len_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len_max_index_max_len_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len_max_index_max_len_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len_max_index_max_len_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len_max_index_max_len_max_max_",
  "        val paren_stack = mutable.Stack[String]()\n        val paren_levels = mutable.Stack[Long]()\n\
    \        paren_stack.push(paren_string)\n        paren_levels.push(0)\n      \
    \  val paren_levels_copy = paren_levels.deep\n        while(paren_stack.nonEmpty)\
    \ {\n            val paren_string = paren_stack.pop()\n            val paren_level\
    \ = paren_levels.pop()\n            val paren_levels_copy = paren_levels.deep\n\
    \            val paren_levels_copy = paren_levels_copy - paren_level\n       \
    \     val paren_levels_copy = paren_levels_copy - paren_level\n            val\
    \ paren_levels_copy = paren_levels_copy - paren_level\n            val paren_levels_copy\
    \ = paren_levels_copy - paren_level\n            val paren_levels_copy = paren_levels_copy\
    \ - paren_level\n            val paren_levels_copy = paren_levels_copy - paren_level\n\
    \            val paren_levels_copy = paren_levels_copy - paren_level\n       \
    \     val paren_levels_copy = paren_levels_copy - paren_level\n            val\
    \ paren_levels_copy = paren_levels_copy - paren_level\n            val paren_levels_copy\
    \ = paren_levels_copy - paren_level\n            val paren_levels_copy = paren_levels_copy\
    \ - paren_level\n            val paren_levels_copy = paren_levels_copy - paren_level\n\
    \            val paren_levels_copy = paren_levels_copy - paren_level\n       \
    \     val paren_levels_copy = paren_levels_copy - paren_level\n            val\
    \ paren_levels_copy = paren_levels_copy - paren_level\n            val paren_levels_copy\
    \ = paren_levels_copy - paren_level\n            val paren_levels_copy = paren_levels_copy\
    \ - paren_level\n            val paren_levels_copy = paren_levels_copy - paren_level\n\
    \            val paren_levels_copy = paren_levels_copy - paren_level\n       \
    \     val paren_levels_copy = paren_levels_copy - paren_level\n            val\
    \ paren_levels_copy = paren_levels_copy - paren_level\n            val paren_levels_copy\
    \ = paren_levels_copy - paren_level\n            val paren_levels_copy = paren_levels_copy\
    \ - paren_level\n            val paren_levels_copy = paren_levels_copy - paren_level\n\
    \            val paren_levels_", "        val paren_groups = paren_string.split(\"\
    \\\\s+\")\n        val max_level = 0\n        val max_levels = mutable.ArrayBuffer.empty[Long]\n\
    \        for (paren_group <- paren_groups) {\n            val levels = paren_group.split(\"\
    \\\\(\").map(_.length).max\n            if (levels > max_level) {\n          \
    \      max_level = levels\n                max_levels += levels\n            }\n\
    \        }\n        max_levels.toList", "        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_top = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size_top = mutable.Stack[Long]()\n        val paren_stack_top_size_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size_top_size_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size_top_size_top = mutable.Stack[Long]()\n     \
    \   val paren_stack_top_size_top_size_top_size = mutable.Stack[Long]()\n     \
    \   val paren_stack_top_size_top_size_top_size_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size_top_size_top_size_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size_top_size_top_size_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size_top_size_top_size_top_size_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size_top_size_top_size_top_size_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size_top_size_top_size_top_size_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size_top_size_top_size_top_size_top_size_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size_top_size_top_size_top_size_top_size_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size_top_size_top_size_top_size_top_size_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size_top_size_top_size_top_size_top_size_top_size_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size_top_size_top_size_top_size_top_size_top_size_top\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size_top_size_top_size_top_size_top_size_top_size_top_size_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size_top_size_top_size_top_size_top_size_top_size_top_size_top\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size_top_size_top_size_top_size_top_size_top_size_top_size_top_size_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size_top_size_top_size_top_size_top_size_top_size_top_size_top_size_top\
    \ = mutable.Stack[", "        val paren_stack = mutable.Stack[String]()\n    \
    \    val paren_stack_string = mutable.Stack[String]()\n        val paren_stack_string_count\
    \ = mutable.Stack[Int]()\n        val paren_stack_level = mutable.Stack[Int]()\n\
    \        val paren_stack_level_max = mutable.Stack[Int]()\n        val paren_stack_level_max_count\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_max_index = mutable.Stack[Int]()\n\
    \        val paren_stack_level_max_index = mutable.Stack[Int]()\n        val paren_stack_level_max_index\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_max_index = mutable.Stack[Int]()\n\
    \        val paren_stack_level_max_index = mutable.Stack[Int]()\n        val paren_stack_level_max_index\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_max_index = mutable.Stack[Int]()\n\
    \        val paren_stack_level_max_index = mutable.Stack[Int]()\n        val paren_stack_level_max_index\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_max_index = mutable.Stack[Int]()\n\
    \        val paren_stack_level_max_index = mutable.Stack[Int]()\n        val paren_stack_level_max_index\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_max_index = mutable.Stack[Int]()\n\
    \        val paren_stack_level_max_index = mutable.Stack[Int]()\n        val paren_stack_level_max_index\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_max_index = mutable.Stack[Int]()\n\
    \        val paren_stack_level_max_index = mutable.Stack[Int]()\n        val paren_stack_level_max_index\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_max_index = mutable.Stack[Int]()\n\
    \        val paren_stack_level_max_index = mutable.Stack[Int]()\n        val paren_stack_level_max_index\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_max_index = mutable.Stack[Int]()\n\
    \        val paren_stack_level_max_index = mutable.Stack[Int]()\n        val paren_stack_level_max_index\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_max_index = mutable.Stack[Int]()\n\
    \        val paren_stack_level_max_index = mutable.Stack[Int]()\n        val paren_stack_level_",
  "        val paren_chars = paren_string.split(\" \").map(_.toChar)\n        val\
    \ paren_chars_count = paren_chars.map(c => if (c == '(') 1 else 0).sum\n     \
    \   val paren_chars_count_max = paren_chars.map(c => if (c == '(') 1 else 0).max\n\
    \        val paren_chars_count_min = paren_chars.map(c => if (c == '(') 1 else\
    \ 0).min\n        val paren_chars_count_sum = paren_chars.map(c => if (c == '(')\
    \ 1 else 0).sum\n        val paren_chars_count_product = paren_chars.map(c =>\
    \ if (c == '(') 1 else 0).product\n        val paren_chars_count_product2 = paren_chars.map(c\
    \ => if (c == '(') 1 else 0).product\n        val paren_chars_count_product3 =\
    \ paren_chars.map(c => if (c == '(') 1 else 0).product\n        val paren_chars_count_product4\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).product\n        val paren_chars_count_product5\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).product\n        val paren_chars_count_product6\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).product\n        val paren_chars_count_product7\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).product\n        val paren_chars_count_product8\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).product\n        val paren_chars_count_product9\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).product\n        val paren_chars_count_product10\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).product\n        val paren_chars_count_product11\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).product\n        val paren_chars_count_product12\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).product\n        val paren_chars_count_product13\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).product\n        val paren_chars_count_product14\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).product\n        val paren_chars_count_product15\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).product\n        val paren_chars_count_product16\
    \ = paren_chars.map(c => if (c == '('", "        val paren_array = paren_string.split(\"\
    \ \")\n        val max_level = 0\n        val max_level_index = 0\n        val\
    \ paren_array_size = paren_array.length\n        val paren_array_index = 0\n \
    \       val paren_array_size = paren_array.length\n        while (paren_array_index\
    \ < paren_array_size) {\n            if (paren_array(paren_array_index) == \"\
    (\") {\n                paren_array_index += 1\n                val paren_array_size\
    \ = paren_array.length\n                while (paren_array_index < paren_array_size)\
    \ {\n                    if (paren_array(paren_array_index) == \")\") {\n    \
    \                    paren_array_index += 1\n                        val paren_array_size\
    \ = paren_array.length\n                        while (paren_array_index < paren_array_size)\
    \ {\n                            if (paren_array(paren_array_index) == \"(\")\
    \ {\n                                paren_array_index += 1\n                \
    \                val paren_array_size = paren_array.length\n                 \
    \               while (paren_array_index < paren_array_size) {\n             \
    \                       if (paren_array(paren_array_index) == \")\") {\n     \
    \                                   paren_array_index += 1\n                 \
    \                       val paren_array_size = paren_array.length\n          \
    \                              while (paren_array_index < paren_array_size) {\n\
    \                                            val level = paren_array(paren_array_index).toLong\n\
    \                                            if (level > max_level) {\n      \
    \                                          max_level = level\n               \
    \                                 max_level_index = paren_array_index\n      \
    \                                      }\n                                   \
    \         paren_array_index += 1\n                                        }\n\
    \                                    }\n                                    paren_array_index\
    \ += 1\n                                }\n                            }\n   \
    \                         paren_array_index += 1\n                        }\n\
    \                    }\n                    paren_array_index += 1\n         \
    \       }\n            }\n            paren_array_index += 1\n        }\n    \
    \    val max_level = max_level.toLong\n        val max_level_index = max_level_index.toLong\n\
    \        val max_level_paren_array = paren_array(max_level_index + 1 until paren_array_size)\n\
    \        val max_level_paren_array_size = max_level_paren_array.length\n     \
    \   val max_level_paren_array_index = 0\n        val max_level_paren_array_size\
    \ = max_level_paren_array.length\n        while (max_level_paren_array_index <\
    \ max_level_paren_array_size) {\n            if (max_level_paren_array(max_level_paren_array_index)\
    \ == \"(\") {\n                max_level_paren_array_index += 1\n            \
    \    val max_level_paren_array_size = max_level_paren_array.length\n         \
    \       while (max_level_paren_array_index < max_level_paren_array_size) {\n \
    \                   if (max_level_paren_array(max_level_paren_array_index) ==\
    \ \")\") {\n                        max_level_paren_array_index += 1\n       \
    \                 val max_level_paren_array_size = max_level_paren_array.length\n",
  "        val paren_groups = paren_string.split(\" \")\n        val max_level = 0\n\
    \        val max_level_index = 0\n        val levels = mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- 0 until paren_groups.length) {\n            val paren_group\
    \ = paren_groups(i)\n            val paren_group_levels = paren_group.split(\"\
    \\\\(\").length\n            if (paren_group_levels > max_level) {\n         \
    \       max_level = paren_group_levels\n                max_level_index = i\n\
    \            }\n            levels += paren_group_levels\n        }\n        levels.toList",
  "        val paren_stack = mutable.Stack[String]()\n        val paren_stack_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth = mutable.Stack[Long]()\n       \
    \ val paren_stack_max_depth_pos_depth_size = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_depth_pos_depth_depth = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth_depth_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth_depth_depth_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_", "        val paren_stack\
    \ = mutable.Stack[String]()\n        val paren_stack_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        ", "       \
    \ val paren_array = paren_string.split(\" \")\n        val paren_array_size =\
    \ paren_array.length\n        val paren_array_max_size = paren_array_size - 1\n\
    \        val paren_array_max_size = paren_array_max_size.map(_.toLong)\n     \
    \   val paren_array_max_size = paren_array_max_size.max\n        val paren_array_max_size\
    \ = paren_array_max_size.map(_.toLong)\n        val paren_array_max_size = paren_array_max_size.max\n\
    \        val paren_array_max_size = paren_array_max_size.map(_.toLong)\n     \
    \   val paren_array_max_size = paren_array_max_size.max\n        val paren_array_max_size\
    \ = paren_array_max_size.map(_.toLong)\n        val paren_array_max_size = paren_array_max_size.max\n\
    \        val paren_array_max_size = paren_array_max_size.map(_.toLong)\n     \
    \   val paren_array_max_size = paren_array_max_size.max\n        val paren_array_max_size\
    \ = paren_array_max_size.map(_.toLong)\n        val paren_array_max_size = paren_array_max_size.max\n\
    \        val paren_array_max_size = paren_array_max_size.map(_.toLong)\n     \
    \   val paren_array_max_size = paren_array_max_size.max\n        val paren_array_max_size\
    \ = paren_array_max_size.map(_.toLong)\n        val paren_array_max_size = paren_array_max_size.max\n\
    \        val paren_array_max_size = paren_array_max_size.map(_.toLong)\n     \
    \   val paren_array_max_size = paren_array_max_size.max\n        val paren_array_max_size\
    \ = paren_array_max_size.map(_.toLong)\n        val paren_array_max_size = paren_array_max_size.max\n\
    \        val paren_array_max_size = paren_array_max_size.map(_.toLong)\n     \
    \   val paren_array_max_size = paren_array_max_size.max\n        val paren_array_max_size\
    \ = paren_array_max_size.map(_.toLong)\n        val paren_array_max_size = paren_array_max_size.max\n\
    \        val paren_array_max_size = paren_array_max_size.map(_.toLong)\n     \
    \   val paren_array_max_size = paren_array_max_size.max\n        val paren_array_max_size\
    \ = paren_array_max_size.map(_.toLong)\n        val paren_array_max_size = paren_array_max_size.max\n\
    \        val paren_array_max_size = paren_array_max_size.map(_.toLong)\n     \
    \   val paren_array_max_size = paren_array_max_size.", "        val paren_stack\
    \ = mutable.Stack[String]()\n        val paren_stack_length = mutable.Stack[Long]()\n\
    \        val paren_stack_length_length = mutable.Stack[Long]()\n        val paren_stack_length_length_length\
    \ = mutable.Stack[Long]()\n        val paren_stack_length_length_length_length\
    \ = mutable.Stack[Long]()\n        val paren_stack_length_length_length_length_length\
    \ = mutable.Stack[Long]()\n        val paren_stack_length_length_length_length_length_length\
    \ = mutable.Stack[Long]()\n        val paren_stack_length_length_length_length_length_length_length\
    \ = mutable.Stack[Long]()\n        val paren_stack_length_length_length_length_length_length_length_length\
    \ = mutable.Stack[Long]()\n        val paren_stack_length_length_length_length_length_length_length_length_length\
    \ = mutable.Stack[Long]()\n        val paren_stack_length_length_length_length_length_length_length_length_length_length_length\
    \ = mutable.Stack[Long]()\n        val paren_stack_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = mutable.Stack[Long]()\n        val paren_stack_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = mutable.Stack[Long]()\n        val paren_stack_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = mutable.Stack[Long]()\n        val paren_stack_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = mutable.Stack[Long]()\n        val paren_stack_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_",
  "        val paren_groups = paren_string.split(\"\\\\s+\")\n        val paren_groups_with_paren\
    \ = paren_groups.map(x => if (x == '(') 1 else 0)\n        val paren_groups_with_paren_sum\
    \ = paren_groups_with_paren.reduceLeft(_ + _)\n        val paren_groups_with_paren_max_sum\
    \ = paren_groups_with_paren_sum.max\n        val paren_groups_with_paren_max_index\
    \ = paren_groups_with_paren_max_sum.indexWhere(_ == 1)\n        val paren_groups_with_paren_max_index\
    \ = if (paren_groups_with_paren_max_index == -1) 0 else paren_groups_with_paren_max_index\n\
    \        val paren_groups_with_paren_max_index_plus_one = paren_groups_with_paren_max_index\
    \ + 1\n        val paren_groups_with_paren_max_index_plus_two = paren_groups_with_paren_max_index_plus_one\
    \ + 1\n        val paren_groups_with_paren_max_index_plus_three = paren_groups_with_paren_max_index_plus_two\
    \ + 1\n        val paren_groups_with_paren_max_index_plus_four = paren_groups_with_paren_max_index_plus_three\
    \ + 1\n        val paren_groups_with_paren_max_index_plus_five = paren_groups_with_paren_max_index_plus_four\
    \ + 1\n        val paren_groups_with_paren_max_index_plus_six = paren_groups_with_paren_max_index_plus_five\
    \ + 1\n        val paren_groups_with_paren_max_index_plus_seven = paren_groups_with_paren_max_index_plus_six\
    \ + 1\n        val paren_groups_with_paren_max_index_plus_eight = paren_groups_with_paren_max_index_plus_seven\
    \ + 1\n        val paren_groups_with_paren_max_index_plus_nine = paren_groups_with_paren_max_index_plus_eight\
    \ + 1\n        val paren_groups_with_paren_max_index_plus_ten = paren_groups_with_paren_max_index_plus_nine\
    \ + 1\n        val paren_groups_with_paren_max_index_plus_eleven = paren_groups_with_paren_max_index_plus_ten\
    \ + 1\n        val paren_groups_with_paren_max_index_plus_twelve = paren_groups_with_paren_max_index_plus_eleven\
    \ + 1\n        val paren_groups_with_paren_max_index_plus_thirteen = paren_groups_with_paren_max_index_plus_twelve\
    \ + 1\n        val paren_groups_with_paren_max_index_plus_fourteen = paren_groups_with_paren_max_index_plus_thirteen\
    \ + 1\n        val paren_groups_with_paren_max_index_", "        val paren_stack\
    \ = mutable.Stack[Long]()\n        val paren_stack_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_size = mutable.Stack[Long]()\n        val paren_stack_top_top_top\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top = mutable.Stack[Long]()\n        val\
    \ paren_stack_top_top_top_top_size = mutable.Stack[Long]()\n        val paren_stack_top_top_top_top_top\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_top_top_top_top_size =\
    \ mutable.Stack[Long]()\n        val paren_stack_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_", "        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_queue = mutable.Queue[Long]()\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        val paren_levels = mutable.ArrayBuffer.empty[Long]\n\
    \        val paren_levels_size = mutable.ArrayBuffer.empty[Long]\n        paren_queue.foreach\
    \ { paren_level =>\n            paren_levels_size += paren_level\n           \
    \ paren_queue.dequeue()\n            paren_levels += paren_level\n        }\n\
    \        paren_levels_size.foreach { paren_level =>\n            paren_queue.enqueue(paren_level)\n\
    \        }\n        paren_queue.foreach { paren_level =>\n            paren_stack.push(paren_level)\n\
    \            paren_queue.dequeue()\n        }\n        paren_queue.foreach { paren_level\
    \ =>\n            paren_levels += paren_level\n        }\n        paren_levels_size.foreach\
    \ { paren_level =>\n            paren_queue.enqueue(paren_level)\n        }\n\
    \        paren_queue.foreach { paren_level =>\n            paren_stack.push(paren_level)\n\
    \            paren_queue.dequeue()\n        }\n        paren_queue.foreach { paren_level\
    \ =>\n            paren_levels += paren_level\n        }\n        paren_levels_size.foreach\
    \ { paren_level =>\n            paren_queue.enqueue(paren_level)\n        }\n\
    \        paren_queue.foreach { paren_level =>\n            paren_stack.push(paren_level)\n\
    \            paren_queue.dequeue()\n        }\n        paren_queue.foreach { paren_level\
    \ =>\n            paren_levels += paren_level\n        }\n        paren_levels_size.foreach\
    \ { paren_level =>\n            paren_queue.enqueue(paren_level)\n        }\n\
    \        paren_queue.foreach { paren_level =>\n            paren_stack.push(paren_level)\n\
    \            paren_queue.dequeue()\n        }\n        paren_queue.foreach { paren_level\
    \ =>\n            paren_levels += paren_level\n        }\n        paren_levels_size.foreach\
    \ { paren_level =>\n            paren_queue.enqueue(paren_level)\n        }\n\
    \        paren_queue.foreach { paren_level =>\n            paren_stack.push(paren_level)\n\
    \            paren_queue.dequeue()\n        }\n        paren_queue.foreach { paren_level\
    \ =>\n            paren_", "        val paren_array = paren_string.split(\" \"\
    ).map(_.toLong)\n        val paren_array_size = paren_array.length\n        val\
    \ paren_array_max_size = paren_array_size - 1\n        val paren_array_max_index\
    \ = paren_array_size - 1\n        val paren_array_max_value = paren_array(paren_array_max_index)\n\
    \        val paren_array_max_value_count = paren_array_max_value.toString.length\n\
    \        val paren_array_max_value_count_index = paren_array_max_value_count -\
    \ 1\n        val paren_array_max_value_count_value = paren_array_max_value_count.toLong\n\
    \        val paren_array_max_value_count_value_count = paren_array_max_value_count_value.toString.length\n\
    \        val paren_array_max_value_count_value_count_index = paren_array_max_value_count_value_count\
    \ - 1\n        val paren_array_max_value_count_value_count_value = paren_array_max_value_count_value_count.toLong\n\
    \        val paren_array_max_value_count_value_count_value_count = paren_array_max_value_count_value_count_value.toString.length\n\
    \        val paren_array_max_value_count_value_count_value_count_index = paren_array_max_value_count_value_count_value_count\
    \ - 1\n        val paren_array_max_value_count_value_count_value_count_value =\
    \ paren_array_max_value_count_value_count_value_count.toLong\n        val paren_array_max_value_count_value_count_value_count_value_count\
    \ = paren_array_max_value_count_value_count_value_count_value.toString.length\n\
    \        val paren_array_max_value_count_value_count_value_count_value_count_index\
    \ = paren_array_max_value_count_value_count_value_count_value_count - 1\n    \
    \    val paren_array_max_value_count_value_count_value_count_value_count_value\
    \ = paren_array_max_value_count_value_count_value_count_value_count.toLong\n \
    \       val paren_array_max_value_count_value_count_value_count_value_count_value_count\
    \ = paren_array_max_value_count_value_count_value_count_value_count_value.toString.length\n\
    \        val paren_array_max_value_count_value_count_value_count_value_count_value_count_index\
    \ = paren_array_max_value_count_value_count_value_count_value_count_value - 1\n\
    \        val paren_array_max_value_count_value_count_value_count_value_count_value_count_value\
    \ = paren_array_max_value_count_value_count_value_count_value_count_value_count.toLong\n\
    \        val paren_array_max_value_count_value_count_value_count_value_count_value_count_value_count_index\
    \ = paren_array_max_value_count_value_count_value_count_value_count_value_count_value\
    \ - 1\n        val paren_array_max_value_count_value_count_value_count_value_count_value_count_value_count_value\
    \ = paren_array_max_value_count_value_count_", "        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_top\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = paren_stack_top_size.push(paren_stack_size.size)\n\
    \        val paren_stack_top_top = mutable.Stack[Long]()\n        val paren_stack_top_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_size = mutable.Stack[Long]()\n        val\
    \ paren_stack_top_top_top_top = mutable.Stack[Long]()\n        val paren_stack_top_top_top_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_size = mutable.Stack[Long]()\n  \
    \      val paren_stack_top_top_top_top_top_top = mutable.Stack[Long]()\n     \
    \   val paren_stack_top_top_top_top_top_top_size = mutable.Stack[Long]()\n   \
    \     val paren_stack_top_top_top_top_top_top_top = mutable.Stack[Long]()\n  \
    \      val paren_stack_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_", "        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_levels = mutable.Stack[Long]()\n        paren_stack.push(paren_string)\n\
    \        paren_levels.push(0)\n        val max_levels = mutable.Stack[Long]()\n\
    \        val max_levels_size = mutable.Stack[Long]()\n        while(!paren_stack.isEmpty)\
    \ {\n            val paren_string = paren_stack.pop()\n            val paren_level\
    \ = paren_levels.pop()\n            val paren_level_size = paren_levels.size\n\
    \            val max_level = max_levels_size.pop()\n            val max_level_size\
    \ = max_levels.size\n            if(paren_level_size < max_level_size) {\n   \
    \             max_levels_size.push(max_level_size)\n                max_levels.push(max_level)\n\
    \            }\n            val paren_level_string = paren_stack.mkString(\"\"\
    )\n            if(paren_level_string != paren_string) {\n                paren_stack.push(paren_string)\n\
    \                paren_levels.push(paren_level)\n            }\n        }\n  \
    \      max_levels_size.push(max_levels_size.size)\n        max_levels.push(max_levels_size.size)\n\
    \        max_levels_size.reverse.foreach(x => max_levels.push(x))\n        max_levels.reverse.foreach(x\
    \ => max_levels_size.push(x))\n        max_levels_size.reverse.foreach(x => max_levels_size.push(x))\n\
    \        max_levels_size.reverse.foreach(x => max_levels_size.push(x))\n     \
    \   max_levels_size.reverse.foreach(x => max_levels_size.push(x))\n        max_levels_size.reverse.foreach(x\
    \ => max_levels_size.push(x))\n        max_levels_size.reverse.foreach(x => max_levels_size.push(x))\n\
    \        max_levels_size.reverse.foreach(x => max_levels_size.push(x))\n     \
    \   max_levels_size.reverse.foreach(x => max_levels_size.push(x))\n        max_levels_size.reverse.foreach(x\
    \ => max_levels_size.push(x))\n        max_levels_size.reverse.foreach(x => max_levels_size.push(x))\n\
    \        max_levels_size.reverse.foreach(x => max_levels_size.push(x))\n     \
    \   max_levels_size.reverse.foreach(x => max_levels_size.push(x))\n        max_levels_size.reverse.foreach(x\
    \ => max_levels_size.push(x))\n        max_levels_size.reverse.foreach(x => max_levels_size.push(x))\n\
    \        max_levels_size.reverse.foreach(x => max_levels_size.push(x))\n     \
    \   max_levels_size.reverse.foreach(x => max_levels_size.push(x))\n        max_",
  "        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_len =\
    \ mutable.Stack[Long]()\n        val paren_stack_len_len = mutable.Stack[Long]()\n\
    \        val paren_stack_len_len_len = mutable.Stack[Long]()\n        val paren_stack_len_len_len_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_len_len_len_len = mutable.Stack[Long]()\n\
    \        val paren_stack_len_len_len_len_len_len = mutable.Stack[Long]()\n   \
    \     val paren_stack_len_len_len_len_len_len_len = mutable.Stack[Long]()\n  \
    \      val paren_stack_len_len_len_len_len_len_len_len = mutable.Stack[Long]()\n\
    \        val paren_stack_len_len_len_len_len_len_len_len_len_len = mutable.Stack[Long]()\n\
    \        val paren_stack_len_len_len_len_len_len_len_len_len_len_len = mutable.Stack[Long]()\n\
    \        val paren_stack_len_len_len_len_len_len_len_len_len_len_len_len = mutable.Stack[Long]()\n\
    \        val paren_stack_len_len_len_len_len_len_len_len_len_len_len_len_len =\
    \ mutable.Stack[Long]()\n        val paren_stack_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_", "        val paren_stack\
    \ = mutable.Stack[String]()\n        val paren_queue = mutable.Queue[String]()\n\
    \        paren_queue.enqueue(paren_string)\n        paren_stack.push(paren_string)\n\
    \        val max_level = 0\n        while (paren_queue.nonEmpty) {\n         \
    \   val paren_string = paren_queue.dequeue()\n            val level = 0\n    \
    \        val paren_length = paren_string.length\n            while (paren_stack.nonEmpty\
    \ && paren_stack.peek().length < paren_length) {\n                paren_stack.peek()\
    \ match {\n                    case \")\" =>\n                        paren_stack.pop\n\
    \                        level -= 1\n                    case \")()\" =>\n   \
    \                     paren_stack.pop\n                        level -= 1\n  \
    \                  case \")()()\" =>\n                        paren_stack.pop\n\
    \                        level -= 1\n                    case \")()()()\" =>\n\
    \                        paren_stack.pop\n                        level -= 1\n\
    \                    case \")()()()()\" =>\n                        paren_stack.pop\n\
    \                        level -= 1\n                    case \")()()()()()\"\
    \ =>\n                        paren_stack.pop\n                        level -=\
    \ 1\n                    case \")()()()()()()\" =>\n                        paren_stack.pop\n\
    \                        level -= 1\n                    case \")()()()()()()()\"\
    \ =>\n                        paren_stack.pop\n                        level -=\
    \ 1\n                    case \")()()()()()()()()\" =>\n                     \
    \   paren_stack.pop\n                        level -= 1\n                    case\
    \ \")()()()()()()()()\" =>\n                        paren_stack.pop\n        \
    \                level -= 1\n                    case \")()()()()()()()()\" =>\n\
    \                        paren_stack.pop\n                        level -= 1\n\
    \                    case \")()()()()()()()()()\" =>\n                       \
    \ paren_stack.pop\n                        level -= 1\n                    case\
    \ \")()()()()()()()()()()\" =>\n                        paren_stack.pop\n    \
    \                    level -= 1\n                    case \")()()()()()()()()()()()\"\
    \ =>\n                        paren_stack.pop\n                        level -=\
    \ 1\n                    case \")()()()()()()()()()()()\" =>\n               \
    \         paren_stack.pop\n                        level -= 1\n              \
    \      case \")()()()()()()()()()()()\" =>\n                        paren_stack.pop\n\
    \                        level -= 1\n                    case \")()()()()()()()()()()()\"\
    \ =>\n                        paren_stack.pop\n                        level -=\
    \ 1\n                    case \")()()()()()()()()()()()()\" =>\n             \
    \           paren_stack.pop\n                        level -= 1\n", "        val\
    \ paren_array = paren_string.split(\" \")\n        val paren_array_size = paren_array.length\n\
    \        val paren_array_max = paren_array_size - 1\n        val paren_array_max_index\
    \ = paren_array_max - 1\n        val paren_array_max_value = paren_array(paren_array_max_index)\n\
    \        val paren_array_max_value_length = paren_array_max_value.length\n   \
    \     val paren_array_max_value_chars = paren_array_max_value_length / 2\n   \
    \     val paren_array_max_value_chars_index = paren_array_max_value_chars - 1\n\
    \        val paren_array_max_value_chars_value = paren_array_max_value(paren_array_max_value_chars_index)\n\
    \        val paren_array_max_value_chars_value_length = paren_array_max_value_chars_value.length\n\
    \        val paren_array_max_value_chars_value_chars = paren_array_max_value_chars_value_length\
    \ / 2\n        val paren_array_max_value_chars_value_chars_index = paren_array_max_value_chars_value_chars\
    \ - 1\n        val paren_array_max_value_chars_value_chars_value = paren_array_max_value_chars_value(paren_array_max_value_chars_value_chars_index)\n\
    \        val paren_array_max_value_chars_value_chars_value_length = paren_array_max_value_chars_value_chars_value.length\n\
    \        val paren_array_max_value_chars_value_chars_value_chars = paren_array_max_value_chars_value_chars_value_length\
    \ / 2\n        val paren_array_max_value_chars_value_chars_value_chars_index =\
    \ paren_array_max_value_chars_value_chars_value_chars - 1\n        val paren_array_max_value_chars_value_chars_value_chars_value\
    \ = paren_array_max_value_chars_value_chars_value(paren_array_max_value_chars_value_chars_value_chars_index)\n\
    \        val paren_array_max_value_chars_value_chars_value_chars_value_length\
    \ = paren_array_max_value_chars_value_chars_value_chars_value.length\n       \
    \ val paren_array_max_value_chars_value_chars_value_chars_value_chars = paren_array_max_value_chars_value_chars_value_chars_value_length\
    \ / 2\n        val paren_array_max_value_chars_value_chars_value_chars_value_chars_index\
    \ = paren_array_max_value_chars_value_chars_value_chars_value_chars - 1\n    \
    \    val paren_array_max_value_chars_value_chars_value_chars_value_chars_value\
    \ = paren_array_max_value_chars_value_chars_value_chars_value(paren_", "     \
    \   val paren_groups = paren_string.split(\" \").map(_.toLong)\n        val max_depth\
    \ = paren_groups.foldLeft(0L) { (max_depth, group) => if (group > max_depth) group\
    \ else max_depth }\n        val max_depth = max_depth + 1\n        val max_depth\
    \ = max_depth.toLong\n        val max_depth = max_depth.toLong\n        val max_depth\
    \ = max_depth.toLong\n        val max_depth = max_depth.toLong\n        val max_depth\
    \ = max_depth.toLong\n        val max_depth = max_depth.toLong\n        val max_depth\
    \ = max_depth.toLong\n        val max_depth = max_depth.toLong\n        val max_depth\
    \ = max_depth.toLong\n        val max_depth = max_depth.toLong\n        val max_depth\
    \ = max_depth.toLong\n        val max_depth = max_depth.toLong\n        val max_depth\
    \ = max_depth.toLong\n        val max_depth = max_depth.toLong\n        val max_depth\
    \ = max_depth.toLong\n        val max_depth = max_depth.toLong\n        val max_depth\
    \ = max_depth.toLong\n        val max_depth = max_depth.toLong\n        val max_depth\
    \ = max_depth.toLong\n        val max_depth = max_depth.toLong\n        val max_depth\
    \ = max_depth.toLong\n        val max_depth = max_depth.toLong\n        val max_depth\
    \ = max_depth.toLong\n        val max_depth = max_depth.toLong\n        val max_depth\
    \ = max_depth.toLong\n        val max_depth = max_depth.toLong\n        val max_depth\
    \ = max_depth.toLong\n        val max_depth = max_depth.toLong\n        val max_depth\
    \ = max_depth.toLong\n        val max_depth = max_depth.toLong\n        val max_depth\
    \ = max_depth.toLong\n        val max_depth = max_depth.toLong\n        val max_depth\
    \ = max_depth.toLong\n        val max_depth = max_depth.toLong\n        val max_depth\
    \ = max_depth.toLong\n        val max_depth = max_depth.toLong\n        val max_depth\
    \ = max_depth.toLong\n        val max_depth = max_depth.toLong\n        val max_depth\
    \ = max_depth.toLong\n        val max_depth = max_depth.toLong\n        val max_depth\
    \ = max_depth.toLong\n        val max_depth = max_depth.toLong\n        val max_depth\
    \ = max_depth.toLong\n        val max_depth = max_depth.toLong\n        val max_depth\
    \ = max_depth.toLong\n        val max_", "        val paren_array = paren_string.split(\"\
    \ \")\n        val paren_array_size = paren_array.length\n        val paren_array_max_size\
    \ = paren_array_size - 1\n        val paren_array_max_index = paren_array_max_size\
    \ - 1\n        val paren_array_max_value = paren_array(paren_array_max_index)\n\
    \        val paren_array_max_value_length = paren_array_max_value.length\n   \
    \     val paren_array_max_value_length = paren_array_max_value_length - 1\n  \
    \      val paren_array_max_value_length = paren_array_max_value_length - 1\n \
    \       val paren_array_max_value_length = paren_array_max_value_length - 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length - 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length - 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length - 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length - 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length - 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length - 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length - 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length - 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length - 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length - 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length - 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length - 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length - 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length - 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length - 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length - 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length - 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length - 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length - 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length - 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length - 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length - 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length - 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length - 1\n\
    \        ", "        val paren_chars = paren_string.toCharArray\n        val paren_chars_length\
    \ = paren_chars.length\n        val paren_chars_count = paren_chars_length / 2\n\
    \        val paren_chars_array = Array.ofDim[Char](paren_chars_count)\n      \
    \  val paren_chars_array_length = paren_chars_array.length\n        val paren_chars_array_count\
    \ = paren_chars_array_length / 2\n        val paren_chars_array_array = Array.ofDim[Char](paren_chars_array_count)\n\
    \        val paren_chars_array_array_length = paren_chars_array_array.length\n\
    \        val paren_chars_array_array_count = paren_chars_array_array_length /\
    \ 2\n        val paren_chars_array_array_array = Array.ofDim[Char](paren_chars_array_array_count)\n\
    \        val paren_chars_array_array_array_length = paren_chars_array_array_array.length\n\
    \        val paren_chars_array_array_array_count = paren_chars_array_array_array_length\
    \ / 2\n        val paren_chars_array_array_array_array = Array.ofDim[Char](paren_chars_array_array_array_count)\n\
    \        val paren_chars_array_array_array_array_length = paren_chars_array_array_array_array.length\n\
    \        val paren_chars_array_array_array_array_count = paren_chars_array_array_array_array_length\
    \ / 2\n        val paren_chars_array_array_array_array_array = Array.ofDim[Char](paren_chars_array_array_array_array_array_count)\n\
    \        val paren_chars_array_array_array_array_array_length = paren_chars_array_array_array_array_array_array.length\n\
    \        val paren_chars_array_array_array_array_array_array_count = paren_chars_array_array_array_array_array_array_length\
    \ / 2\n        val paren_chars_array_array_array_array_array_array_array = Array.ofDim[Char](paren_chars_array_array_array_array_array_array_array_array_count)\n\
    \        val paren_chars_array_array_array_array_array_array_array_array_length\
    \ = paren_chars_array_array_array_array_array_array_array_array_array_length /\
    \ 2\n        val paren_chars_array_array_array_array_array_array_array_array_array_array_count\
    \ = paren_chars_array_array_array_array_array_array_array_array_array_array_array_length\
    \ / 2\n        val paren_chars_array_array_array_array_array_array_array_array_array_array_array_array_array_length\
    \ = paren_chars_array_array_array_array_array_array_array_array_array_array_array_array_array_array_length\
    \ / 2\n        val paren_chars_array_array_array_array_array_", "        val paren_stack\
    \ = mutable.Stack[Long]()\n        val paren_stack_map = mutable.Map[Long, Long]()\n\
    \        val paren_stack_map_keys = mutable.Map[Long, Long]()\n        val paren_stack_map_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_keys = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_values_values = mutable.Map[Long, Long]()\n\
    \        val paren_stack_map_values_values_keys = mutable.Map[Long, Long]()\n\
    \        val paren_stack_map_values_values_values = mutable.Map[Long, Long]()\n\
    \        val paren_stack_map_values_values_values_keys = mutable.Map[Long, Long]()\n\
    \        val paren_stack_map_values_values_values_values = mutable.Map[Long, Long]()\n\
    \        val paren_stack_map_values_values_values_values_keys = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_values_values_values_values_values = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values_",
  "        val paren_chars = paren_string.chars\n        val paren_chars_size = paren_chars.size\n\
    \        val paren_chars_array = paren_chars.toArray\n        val paren_chars_array_size\
    \ = paren_chars_array.size\n        val paren_chars_array_length = paren_chars_array_size\
    \ - 1\n        val paren_chars_array_last_index = paren_chars_array_length - 1\n\
    \        val paren_chars_array_last_char = paren_chars_array(paren_chars_array_last_index)\n\
    \        val paren_chars_array_last_char_index = paren_chars_array_last_char.index\n\
    \        val paren_chars_array_last_char_char_code = paren_chars_array_last_char.code\n\
    \        val paren_chars_array_last_char_char_code_length = paren_chars_array_last_char_char_code.length\n\
    \        val paren_chars_array_last_char_char_code_length = paren_chars_array_last_char_char_code_length\
    \ - 1\n        val paren_chars_array_last_char_char_code_char_code = paren_chars_array_last_char_char_code.code\n\
    \        val paren_chars_array_last_char_char_code_char_code_length = paren_chars_array_last_char_char_code_char_code.length\n\
    \        val paren_chars_array_last_char_char_code_char_code_length = paren_chars_array_last_char_char_code_char_code_length\
    \ - 1\n        val paren_chars_array_last_char_char_code_char_code_char_code_length\
    \ = paren_chars_array_last_char_char_code_char_code_char_code.length\n       \
    \ val paren_chars_array_last_char_char_code_char_code_char_code_length = paren_chars_array_last_char_char_code_char_code_char_code_length\
    \ - 1\n        val paren_chars_array_last_char_char_code_char_code_char_code_length\
    \ = paren_chars_array_last_char_char_code_char_code_char_code_length - 1\n   \
    \     val paren_chars_array_last_char_char_code_char_code_char_code_length = paren_chars_array_last_char_char_code_char_code_char_code_length\
    \ - 1\n        val paren_chars_array_last_char_char_code_char_code_char_code_length\
    \ = paren_chars_array_last_char_char_code_char_code_char_code_length - 1\n   \
    \     val paren_chars_array_last_char_char_code_char_code_char_code_length = paren_chars_array_last_char_char_code_char_code_char_code_length\
    \ - 1\n        val paren_chars_array_last_char_char_code_char_code_char_code_length\
    \ = paren_chars_array_last_char_char_code_char_code_char_code_length - 1\n   \
    \     val paren_chars_array_last_char_char_code_char_code_char_", "        val\
    \ paren_stack = mutable.Stack[String]()\n        val paren_stack_size = mutable.Stack[Long]()\n\
    \        val paren_stack_level = mutable.Stack[Long]()\n        val paren_stack_level_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max = mutable.Stack[Long]()\n\
    \        val paren_stack_level_max_size = mutable.Stack[Long]()\n        val paren_stack_level_max_index\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_index_size = mutable.Stack[Long]()\n\
    \        val paren_stack_level_max_index_count = mutable.Stack[Long]()\n     \
    \   val paren_stack_level_max_index_count_size = mutable.Stack[Long]()\n     \
    \   val paren_stack_level_max_index_count_index = mutable.Stack[Long]()\n    \
    \    val paren_stack_level_max_index_count_index_size = mutable.Stack[Long]()\n\
    \        val paren_stack_level_max_index_count_index_count = mutable.Stack[Long]()\n\
    \        val paren_stack_level_max_index_count_index_count_size = mutable.Stack[Long]()\n\
    \        val paren_stack_level_max_index_count_index_count_index = mutable.Stack[Long]()\n\
    \        val paren_stack_level_max_index_count_index_count_index_size = mutable.Stack[Long]()\n\
    \        val paren_stack_level_max_index_count_index_count_index_count = mutable.Stack[Long]()\n\
    \        val paren_stack_level_max_index_count_index_count_index_count_size =\
    \ mutable.Stack[Long]()\n        val paren_stack_level_max_index_count_index_count_index_count_index\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_index_count_index_count_index_count_index_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_index_count_index_count_index_count_index_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_index_count_index_count_index_count_index_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_index_count_index_count_index_count_index_count_index\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_index_count_index_count_index_count_index_count_index_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_index_count_index_count_index_count_index_count_index_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_index_count_index_count_index_count_index_count_index_count_size\
    \ = mutable.Stack[Long]()\n        val paren_", "        val paren_array = paren_string.split(\"\
    \ \")\n        val paren_array_size = paren_array.length\n        val max_level\
    \ = 0\n        var level = 0\n        var paren_count = 0\n        val paren_levels\
    \ = mutable.ArrayBuffer.empty[Long]\n        paren_array.foreach(x => {\n    \
    \        val paren_level = x.count('(') - x.count(')')\n            if (paren_level\
    \ > max_level) {\n                max_level = paren_level\n            }\n   \
    \         if (paren_level == max_level) {\n                paren_count += 1\n\
    \                paren_levels += paren_count\n            }\n        })\n    \
    \    paren_levels", "        val paren_chars = paren_string.chars\n        val\
    \ paren_chars_iter = paren_chars.iterator\n        val paren_chars_next = paren_chars_iter.next()\n\
    \        val paren_chars_next_next = paren_chars_iter.next()\n        val paren_chars_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next = paren_chars_iter.next()\n\
    \        val paren_chars_next_next_next_next_next = paren_chars_iter.next()\n\
    \        val paren_chars_next_next_next_next_next_next = paren_chars_iter.next()\n\
    \        val paren_chars_next_next_next_next_next_next_next = paren_chars_iter.next()\n\
    \        val paren_chars_next_next_next_next_next_next_next_next = paren_chars_iter.next()\n\
    \        val paren_chars_next_next_next_next_next_next_next_next_next = paren_chars_iter.next()\n\
    \        val paren_chars_next_next_next_next_next_next_next_next_next_next = paren_chars_iter.next()\n\
    \        val paren_chars_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_", "        val paren_stack\
    \ = mutable.Stack[String]()\n        val paren_queue = mutable.Queue[String]()\n\
    \        paren_queue.enqueue(paren_string)\n        paren_stack.push(paren_string)\n\
    \        val max_level = 0\n        while(!paren_queue.isEmpty) {\n          \
    \  val paren_string = paren_queue.dequeue()\n            val paren_level = paren_stack.size\n\
    \            val paren_level_str = paren_stack.mkString(\"\")\n            val\
    \ paren_level_str = paren_level_str.substring(0, paren_level_str.lastIndexOf(\"\
    (\"))\n            val paren_level_long = paren_level_str.toLong\n           \
    \ val paren_level_long = paren_level_long + 1\n            val paren_level_long\
    \ = paren_level_long.toLong\n            val paren_level_long = paren_level_long.toLong\n\
    \            val paren_level_long = paren_level_long.toLong\n            val paren_level_long\
    \ = paren_level_long.toLong\n            val paren_level_long = paren_level_long.toLong\n\
    \            val paren_level_long = paren_level_long.toLong\n            val paren_level_long\
    \ = paren_level_long.toLong\n            val paren_level_long = paren_level_long.toLong\n\
    \            val paren_level_long = paren_level_long.toLong\n            val paren_level_long\
    \ = paren_level_long.toLong\n            val paren_level_long = paren_level_long.toLong\n\
    \            val paren_level_long = paren_level_long.toLong\n            val paren_level_long\
    \ = paren_level_long.toLong\n            val paren_level_long = paren_level_long.toLong\n\
    \            val paren_level_long = paren_level_long.toLong\n            val paren_level_long\
    \ = paren_level_long.toLong\n            val paren_level_long = paren_level_long.toLong\n\
    \            val paren_level_long = paren_level_long.toLong\n            val paren_level_long\
    \ = paren_level_long.toLong\n            val paren_level_long = paren_level_long.toLong\n\
    \            val paren_level_long = paren_level_long.toLong\n            val paren_level_long\
    \ = paren_level_long.toLong\n            val paren_level_long = paren_level_long.toLong\n\
    \            val paren_level_long = paren_level_long.toLong\n            val paren_level_long\
    \ = paren_level_long.toLong\n            val paren_level_long = paren_level_long.toLong\n\
    \            val ", "        val paren_stack = mutable.Stack[Long]()\n       \
    \ val paren_queue = mutable.Queue[Long]()\n        paren_queue.enqueue(0)\n  \
    \      paren_stack.enqueue(0)\n        paren_queue.enqueue(0)\n        paren_stack.enqueue(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.enqueue(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.enqueue(0)\n        paren_queue.enqueue(0)\n        paren_stack.enqueue(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.enqueue(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.enqueue(0)\n        paren_queue.enqueue(0)\n        paren_stack.enqueue(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.enqueue(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.enqueue(0)\n        paren_queue.enqueue(0)\n        paren_stack.enqueue(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.enqueue(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.enqueue(0)\n        paren_queue.enqueue(0)\n        paren_stack.enqueue(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.enqueue(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.enqueue(0)\n        paren_queue.enqueue(0)\n        paren_stack.enqueue(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.enqueue(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.enqueue(0)\n        paren_queue.enqueue(0)\n        paren_stack.enqueue(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.enqueue(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.enqueue(0)\n        paren_queue.enqueue(0)\n        paren_stack.enqueue(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.enqueue(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.enqueue(0)\n        paren_queue.enqueue(0)\n        paren_stack.enqueue(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.enqueue(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.enqueue(0)\n        paren_queue.enqueue(0)\n        paren_stack.enqueue(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.enqueue(0)\n        paren_queue.en",
  "        val paren_stack = mutable.Stack[String]()\n        val paren_stack_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_index = mutable.Stack[Long]()\n        val\
    \ paren_stack_top_count_indexSize = mutable.Stack[Long]()\n        val paren_stack_top_count_indexSize\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n       \
    \ val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n        val paren_stack_top_count_indexSize\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n       \
    \ val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n        val paren_stack_top_count_indexSize\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n       \
    \ val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n        val paren_stack_top_count_indexSize\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n       \
    \ val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n        val paren_stack_top_count_indexSize\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n       \
    \ val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n        val paren_stack_top_count_indexSize\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n", "   \
    \     val paren_groups = paren_string.split(\" \").map(_.toLong)\n        val\
    \ max_levels = paren_groups.foldLeft(0) { (max_level, group) =>\n            val\
    \ current_level = max_level\n            val current_group = group\n         \
    \   val current_group_length = current_group.length\n            val current_group_length\
    \ = current_group_length + 1\n            val current_group_length = current_group_length\
    \ + 1\n            if (current_group_length > max_level) {\n                max_level\
    \ = current_group_length\n            }\n            current_level\n        }\n\
    \        val max_levels = max_levels + 1\n        val max_levels = max_levels\
    \ + 1\n        val max_levels = max_levels + 1\n        val max_levels = max_levels\
    \ + 1\n        val max_levels = max_levels + 1\n        val max_levels = max_levels\
    \ + 1\n        val max_levels = max_levels + 1\n        val max_levels = max_levels\
    \ + 1\n        val max_levels = max_levels + 1\n        val max_levels = max_levels\
    \ + 1\n        val max_levels = max_levels + 1\n        val max_levels = max_levels\
    \ + 1\n        val max_levels = max_levels + 1\n        val max_levels = max_levels\
    \ + 1\n        val max_levels = max_levels + 1\n        val max_levels = max_levels\
    \ + 1\n        val max_levels = max_levels + 1\n        val max_levels = max_levels\
    \ + 1\n        val max_levels = max_levels + 1\n        val max_levels = max_levels\
    \ + 1\n        val max_levels = max_levels + 1\n        val max_levels = max_levels\
    \ + 1\n        val max_levels = max_levels + 1\n        val max_levels = max_levels\
    \ + 1\n        val max_levels = max_levels + 1\n        val max_levels = max_levels\
    \ + 1\n        val max_levels = max_levels + 1\n        val max_levels = max_levels\
    \ + 1\n        val max_levels = max_levels + 1\n        val max_levels = max_levels\
    \ + 1\n        val max_levels = max_levels + 1\n        val max_levels = max_levels\
    \ + 1\n        val max_levels = max_levels + 1\n        val max_levels = max_levels\
    \ + 1\n        val max_levels = max_levels + 1\n        val max_levels = max_levels\
    \ + 1\n        val max_levels = max_levels + 1\n        val max_levels = max_levels\
    \ + 1\n        val max_levels = max_levels + 1\n        val max_levels = max_levels\
    \ + 1\n        val max_levels = max_levels + 1\n        ", "        val paren_stack\
    \ = mutable.Stack[String]()\n        val paren_stack_map = mutable.Map[String,\
    \ mutable.Stack[String]]()\n        val paren_stack_map_keys = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_values = mutable.Map[Long, Long]()\n  \
    \      val paren_stack_map_values_keys = mutable.Map[Long, Long]()\n        val\
    \ paren_stack_map_values_values_keys = mutable.Map[Long, Long]()\n        val\
    \ paren_stack_map_values_values_values = mutable.Map[Long, Long]()\n        val\
    \ paren_stack_map_values_values_values_keys = mutable.Map[Long, Long]()\n    \
    \    val paren_stack_map_values_values_values_values = mutable.Map[Long, Long]()\n\
    \        val paren_stack_map_values_values_values_values_keys = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_values_values_values_values_values = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_keys_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_keys_keys_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_keys_keys_values_values_values_values_keys_keys_keys_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_keys_keys_values_values_values_keys_keys_values_values_values_values_values_keys_keys_keys_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_",
  "        val paren_stack = mutable.Stack[String]()\n        val paren_stack_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_", "        val paren_array\
    \ = paren_string.split(\" \")\n        val paren_array_size = paren_array.length\n\
    \        val paren_array_max_size = paren_array_size - 1\n        val paren_array_max_index\
    \ = paren_array_max_size - 1\n        val paren_array_max_value = paren_array(paren_array_max_index)\n\
    \        val paren_array_max_value_length = paren_array_max_value.length\n   \
    \     val paren_array_max_value_length = paren_array_max_value_length - 1\n  \
    \      val paren_array_max_value_char = paren_array_max_value.charAt(paren_array_max_value_length)\n\
    \        val paren_array_max_value_char_length = paren_array_max_value_char.length\n\
    \        val paren_array_max_value_char_length = paren_array_max_value_char_length\
    \ - 1\n        val paren_array_max_value_char_char = paren_array_max_value.charAt(paren_array_max_value_char_length)\n\
    \        val paren_array_max_value_char_char_length = paren_array_max_value_char_char.length\n\
    \        val paren_array_max_value_char_char_length = paren_array_max_value_char_char_length\
    \ - 1\n        val paren_array_max_value_char_char_char = paren_array_max_value.charAt(paren_array_max_value_char_char_length)\n\
    \        val paren_array_max_value_char_char_char_length = paren_array_max_value_char_char_char.length\n\
    \        val paren_array_max_value_char_char_char_length = paren_array_max_value_char_char_char_length\
    \ - 1\n        val paren_array_max_value_char_char_char_char = paren_array_max_value.charAt(paren_array_max_value_char_char_char_length)\n\
    \        val paren_array_max_value_char_char_char_char_length = paren_array_max_value_char_char_char_char.length\n\
    \        val paren_array_max_value_char_char_char_char_length = paren_array_max_value_char_char_char_char_length\
    \ - 1\n        val paren_array_max_value_char_char_char_char_char = paren_array_max_value.charAt(paren_array_max_value_char_char_char_char_length)\n\
    \        val paren_array_max_value_char_char_char_char_char_length = paren_array_max_value_char_char_char_char_char.length\n\
    \        val paren_array_max_value_char_char_char_char_char_char_length = paren_array_max_value_char_char_char_char_char_char_length\
    \ - 1\n        val paren_array_max_value_char_char_char_char_char_char_char_length\
    \ = paren_array_max_value_char_char_char_char_char_char_char_length - 1\n    \
    \    val paren_array_max_value_char_char_char_char_char_char_char_char_length\
    \ = paren_array_max_value_char_char_char_char_char_char_char_char_length - 1\n\
    \        val paren_array_max_value_char_char_char_char_char_char_", "        val\
    \ paren_stack = mutable.Stack[String]()\n        val paren_levels = mutable.Stack[Long]()\n\
    \        paren_stack.push(paren_string)\n        paren_levels.push(0)\n      \
    \  while(paren_stack.nonEmpty) {\n            val paren_string = paren_stack.pop()\n\
    \            val paren_level = paren_levels.pop()\n            val paren_level_string\
    \ = paren_stack.last\n            val paren_level_length = paren_level_string.length\n\
    \            val paren_level_chars = paren_level_string.toCharArray\n        \
    \    val paren_level_chars_length = paren_level_chars.length\n            val\
    \ paren_level_chars_index = paren_level_chars_length - 1\n            val paren_level_chars_index_start\
    \ = paren_level_chars_index - 1\n            val paren_level_chars_index_end =\
    \ paren_level_chars_index_start + paren_level_chars_length\n            val paren_level_chars_index_next_start\
    \ = paren_level_chars_index_end + 1\n            val paren_level_chars_index_next_end\
    \ = paren_level_chars_index_next_start + paren_level_chars_length\n          \
    \  val paren_level_chars_index_next_next_start = paren_level_chars_index_next_end\
    \ + 1\n            val paren_level_chars_index_next_next_end = paren_level_chars_index_next_next_start\
    \ + paren_level_chars_length\n            val paren_level_chars_index_next_next_next_start\
    \ = paren_level_chars_index_next_next_end + 1\n            val paren_level_chars_index_next_next_next_end\
    \ = paren_level_chars_index_next_next_next_start + paren_level_chars_length\n\
    \            val paren_level_chars_index_next_next_next_next_start = paren_level_chars_index_next_next_next_end\
    \ + 1\n            val paren_level_chars_index_next_next_next_next_end = paren_level_chars_index_next_next_next_next_start\
    \ + paren_level_chars_length\n            val paren_level_chars_index_next_next_next_next_next_start\
    \ = paren_level_chars_index_next_next_next_next_end + 1\n            val paren_level_chars_index_next_next_next_next_next_end\
    \ = paren_level_chars_index_next_next_next_next_next_start + paren_level_chars_length\n\
    \            val paren_level_chars_index_next_next_next_next_next_next_start =\
    \ paren_level_chars_index_next_next_next_next_next_end + 1\n            val paren_level_chars_index_next_next_next_next_next_next_end\
    \ = paren_level_chars_index_next_next_next_next_next_next_start + paren_level_chars_length\n\
    \            val paren_level_", "        val paren_chars = paren_string.toCharArray\n\
    \        val paren_chars_size = paren_chars.length\n        val paren_chars_map\
    \ = mutable.HashMap[Char, Int]()\n        var paren_char_index = 0\n        var\
    \ paren_char_index2 = 0\n        var paren_char_index3 = 0\n        var paren_char_index4\
    \ = 0\n        var paren_char_index5 = 0\n        var paren_char_index6 = 0\n\
    \        var paren_char_index7 = 0\n        var paren_char_index8 = 0\n      \
    \  var paren_char_index9 = 0\n        var paren_char_index10 = 0\n        var\
    \ paren_char_index11 = 0\n        var paren_char_index12 = 0\n        var paren_char_index13\
    \ = 0\n        var paren_char_index14 = 0\n        var paren_char_index15 = 0\n\
    \        var paren_char_index16 = 0\n        var paren_char_index17 = 0\n    \
    \    var paren_char_index18 = 0\n        var paren_char_index19 = 0\n        var\
    \ paren_char_index20 = 0\n        var paren_char_index21 = 0\n        var paren_char_index22\
    \ = 0\n        var paren_char_index23 = 0\n        var paren_char_index24 = 0\n\
    \        var paren_char_index25 = 0\n        var paren_char_index26 = 0\n    \
    \    var paren_char_index27 = 0\n        var paren_char_index28 = 0\n        var\
    \ paren_char_index29 = 0\n        var paren_char_index30 = 0\n        var paren_char_index31\
    \ = 0\n        var paren_char_index32 = 0\n        var paren_char_index33 = 0\n\
    \        var paren_char_index34 = 0\n        var paren_char_index35 = 0\n    \
    \    var paren_char_index36 = 0\n        var paren_char_index37 = 0\n        var\
    \ paren_char_index38 = 0\n        var paren_char_index39 = 0\n        var paren_char_index40\
    \ = 0\n        var paren_char_index41 = 0\n        var paren_char_index42 = 0\n\
    \        var paren_char_index43 = 0\n        var paren_char_index44 = 0\n    \
    \    var paren_char_index45 = 0\n        var paren_char_index46 = 0\n        var\
    \ paren_char_index47 = 0\n        var paren_char_index48 = 0\n        var paren_char_index49\
    \ = 0\n        var paren_char_index50 = 0\n        var paren_char_index51 = 0\n\
    \        var paren_char_index52 = 0\n        var paren_char_index53 = 0\n    \
    \    var paren_char_index54 = 0\n        var paren_char_index55 = 0\n        var\
    \ paren_char_index56 = 0\n        var paren_char_index57 = 0\n        var paren_char_index58\
    \ = 0\n        var paren_char_index59 = 0\n", "        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_top = paren_stack.size\n        val paren_stack_bottom\
    \ = paren_stack.size\n        val paren_stack_max_level = paren_stack.size\n \
    \       val paren_stack_max_level_top = paren_stack.size\n        val paren_stack_max_level_bottom\
    \ = paren_stack.size\n        val paren_stack_max_level_max_level = paren_stack.size\n\
    \        val paren_stack_max_level_max_level_top = paren_stack.size\n        val\
    \ paren_stack_max_level_max_level_bottom = paren_stack.size\n        val paren_stack_max_level_max_level_max_level\
    \ = paren_stack.size\n        val paren_stack_max_level_max_level_max_level_top\
    \ = paren_stack.size\n        val paren_stack_max_level_max_level_max_level_bottom\
    \ = paren_stack.size\n        val paren_stack_max_level_max_level_max_level_max_level\
    \ = paren_stack.size\n        val paren_stack_max_level_max_level_max_level_max_level_top\
    \ = paren_stack.size\n        val paren_stack_max_level_max_level_max_level_max_level_bottom\
    \ = paren_stack.size\n        val paren_stack_max_level_max_level_max_level_max_level_max_level\
    \ = paren_stack.size\n        val paren_stack_max_level_max_level_max_level_max_level_max_level_top\
    \ = paren_stack.size\n        val paren_stack_max_level_max_level_max_level_max_level_max_level_bottom\
    \ = paren_stack.size\n        val paren_stack_max_level_max_level_max_level_max_level_max_level_max_level\
    \ = paren_stack.size\n        val paren_stack_max_level_max_level_max_level_max_level_max_level_max_level_top\
    \ = paren_stack.size\n        val paren_stack_max_level_max_level_max_level_max_level_max_level_max_level_bottom\
    \ = paren_stack.size\n        val paren_stack_max_level_max_level_max_level_max_level_max_level_max_level_max_level\
    \ = paren_stack.size\n        val paren_stack_max_level_max_level_max_level_max_level_max_level_max_level_max_level_top\
    \ = paren_stack.size\n        val paren_stack_max_level_max_level_max_level_max_level_max_level_max_level_max_level_bottom\
    \ = paren_stack.size\n        val paren_stack_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level\
    \ = paren_stack.size\n        val paren_stack_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_top\
    \ = paren_stack.size\n        val paren_stack_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_bottom\
    \ = ", "        val paren_stack = mutable.Stack[String]()\n        val paren_stack_map\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_size = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_size_reverse = mutable.Map[String, Long]()\n\
    \        val paren_stack_map_size_max = mutable.Map[String, Long]()\n        val\
    \ paren_stack_map_size_max_reverse = mutable.Map[String, Long]()\n        val\
    \ paren_stack_map_size_min = mutable.Map[String, Long]()\n        val paren_stack_map_size_min_reverse\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_size_sum = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_size_sum_reverse = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_size_avg = mutable.Map[String, Long]()\n\
    \        val paren_stack_map_size_avg_reverse = mutable.Map[String, Long]()\n\
    \        val paren_stack_map_size_max = mutable.Map[String, Long]()\n        val\
    \ paren_stack_map_size_max_reverse = mutable.Map[String, Long]()\n        val\
    \ paren_stack_map_size_min = mutable.Map[String, Long]()\n        val paren_stack_map_size_min_reverse\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_size_sum = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_size_sum_reverse = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_size_avg = mutable.Map[String, Long]()\n\
    \        val paren_stack_map_size_avg_reverse = mutable.Map[String, Long]()\n\
    \        val paren_stack_map_size_max = mutable.Map[String, Long]()\n        val\
    \ paren_stack_map_size_max_reverse = mutable.Map[String, Long]()\n        val\
    \ paren_stack_map_size_min = mutable.Map[String, Long]()\n        val paren_stack_map_size_min_reverse\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_size_sum = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_size_sum_reverse = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_size_avg = mutable.Map[String, Long]()\n\
    \        val paren_stack_map_size_avg_reverse = mutable.Map[String, Long]()\n\
    \        val paren_stack_map_size_max = mutable.Map[String, Long]()\n        val\
    \ paren_stack_map_size_max_reverse = mutable.Map[String, Long]()\n        val\
    \ paren", "        val paren_groups = paren_string.split(\" \")\n        val paren_groups_with_paren\
    \ = paren_groups.map(x => if (x == '(') 1 else 0)\n        val paren_groups_with_paren_sum\
    \ = paren_groups_with_paren.reduce((x, y) => x + y)\n        val paren_groups_with_paren_max_level\
    \ = paren_groups_with_paren_sum / paren_groups_with_paren.size\n        val paren_groups_with_paren_max_level_int\
    \ = paren_groups_with_paren_max_level.asInstanceOf[Int]\n        val paren_groups_with_paren_max_level_long\
    \ = paren_groups_with_paren_max_level_int.asInstanceOf[Long]\n        val paren_groups_with_paren_max_level_long_list\
    \ = paren_groups_with_paren_max_level_long.toList\n        val paren_groups_with_paren_max_level_long_list\
    \ = paren_groups_with_paren_max_level_long_list.dropRight(1)\n        val paren_groups_with_paren_max_level_long_list\
    \ = paren_groups_with_paren_max_level_long_list.dropRight(1)\n        val paren_groups_with_paren_max_level_long_list\
    \ = paren_groups_with_paren_max_level_long_list.dropRight(1)\n        val paren_groups_with_paren_max_level_long_list\
    \ = paren_groups_with_paren_max_level_long_list.dropRight(1)\n        val paren_groups_with_paren_max_level_long_list\
    \ = paren_groups_with_paren_max_level_long_list.dropRight(1)\n        val paren_groups_with_paren_max_level_long_list\
    \ = paren_groups_with_paren_max_level_long_list.dropRight(1)\n        val paren_groups_with_paren_max_level_long_list\
    \ = paren_groups_with_paren_max_level_long_list.dropRight(1)\n        val paren_groups_with_paren_max_level_long_list\
    \ = paren_groups_with_paren_max_level_long_list.dropRight(1)\n        val paren_groups_with_paren_max_level_long_list\
    \ = paren_groups_with_paren_max_level_long_list.dropRight(1)\n        val paren_groups_with_paren_max_level_long_list\
    \ = paren_groups_with_paren_max_level_long_list.dropRight(1)\n        val paren_groups_with_paren_max_level_long_list\
    \ = paren_groups_with_paren_max_level_long_list.dropRight(1)\n        val paren_groups_with_paren_max_level_long_list\
    \ = paren_groups_with_paren_max_level_long_list.dropRight(1)\n        val paren_groups_with_paren_max_level_long_list\
    \ = paren_groups_with_paren_max_level_long_list.dropRight(1)\n        val paren_groups_with_paren_max_level_long_list\
    \ = paren_groups_with_", "        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_top\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count = mutable.Stack[Long]()\n        val paren_stack_top_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_count_size = mutable.Stack[Long]()\n      \
    \  val paren_stack_top_count_count_count = mutable.Stack[Long]()\n        val\
    \ paren_stack_top_count_count_count_size = mutable.Stack[Long]()\n        val\
    \ paren_stack_top_count_count_count_count = mutable.Stack[Long]()\n        val\
    \ paren_stack_top_count_count_count_count_size = mutable.Stack[Long]()\n     \
    \   val paren_stack_top_count_count_count_count_count = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_count_count_count_count_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_count_count_count_count_count = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_count_count_count_count_count_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_count_count_count_count_count_count = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_count_count_count_count_count_count_size =\
    \ mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_count_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_count_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n        ", "        val paren_chars = paren_string.chars\n\
    \        val paren_chars_iter = paren_chars.iterator\n        val paren_chars_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next = paren_chars_iter.next()\n\
    \        val paren_chars_next_next_next = paren_chars_iter.next()\n        val\
    \ paren_chars_next_next_next_next = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()", "        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_queue = mutable.Queue[Long]()\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.en", "        val paren_array = paren_string.split(\" \"\
    ).map(_.toLong).toArray\n        val paren_stack = mutable.Stack[Long]()\n   \
    \     var max_level = 0\n        var level = 0\n        paren_array.foreach {\
    \ paren =>\n            paren_stack.push(paren)\n            level += 1\n    \
    \        if (paren_stack.size == level) {\n                paren_stack.pop()\n\
    \                level += 1\n            }\n            if (paren_stack.size ==\
    \ level) {\n                max_level = level\n            }\n        }\n    \
    \    max_level", "        val paren_array = paren_string.split(\" \")\n      \
    \  val max_level = 0\n        val max_level_array = new Array[Long](paren_array.length)\n\
    \        val paren_stack = new mutable.Stack[Long]()\n        for (i <- 0 until\
    \ paren_array.length) {\n            val paren_str = paren_array(i)\n        \
    \    val paren_str_array = paren_str.split(\"\\\\)\")\n            val paren_str_array_size\
    \ = paren_str_array.length\n            val paren_str_array_size = paren_str_array_size\
    \ - 1\n            val paren_str_array_size = paren_str_array_size - 1\n     \
    \       val paren_str_array_size = paren_str_array_size - 1\n            val paren_str_array_size\
    \ = paren_str_array_size - 1\n            val paren_str_array_size = paren_str_array_size\
    \ - 1\n            val paren_str_array_size = paren_str_array_size - 1\n     \
    \       val paren_str_array_size = paren_str_array_size - 1\n            val paren_str_array_size\
    \ = paren_str_array_size - 1\n            val paren_str_array_size = paren_str_array_size\
    \ - 1\n            val paren_str_array_size = paren_str_array_size - 1\n     \
    \       val paren_str_array_size = paren_str_array_size - 1\n            val paren_str_array_size\
    \ = paren_str_array_size - 1\n            val paren_str_array_size = paren_str_array_size\
    \ - 1\n            val paren_str_array_size = paren_str_array_size - 1\n     \
    \       val paren_str_array_size = paren_str_array_size - 1\n            val paren_str_array_size\
    \ = paren_str_array_size - 1\n            val paren_str_array_size = paren_str_array_size\
    \ - 1\n            val paren_str_array_size = paren_str_array_size - 1\n     \
    \       val paren_str_array_size = paren_str_array_size - 1\n            val paren_str_array_size\
    \ = paren_str_array_size - 1\n            val paren_str_array_size = paren_str_array_size\
    \ - 1\n            val paren_str_array_size = paren_str_array_size - 1\n     \
    \       val paren_str_array_size = paren_str_array_size - 1\n            val paren_str_array_size\
    \ = paren_str_array_size - 1\n            val paren_str_array_size = paren_str_array_size\
    \ - 1\n            val paren_str_array_size = paren_str_array_size - 1\n     \
    \       val paren_str_array_size = paren_str_array_size - 1\n            val paren_str_array_size\
    \ = paren_str_array_size - 1\n            val paren_str_array_size = paren_str_array_size\
    \ - 1\n            val paren_str_array_size = paren_str_array_size - 1\n", " \
    \       val paren_stack = mutable.Stack[String]()\n        val paren_stack_map\
    \ = mutable.Map[String, List[Long]]()\n        paren_string.split(\"\\\\s+\").foreach(x\
    \ => {\n            if (x.isEmpty()) return\n            if (paren_stack.nonEmpty)\
    \ {\n                if (paren_stack.last.equals(x)) {\n                    paren_stack_map.get(paren_stack.last).map(x\
    \ => x + 1).toList match {\n                        case Nil => paren_stack_map.put(paren_stack.last,\
    \ List(0))\n                        case x => paren_stack_map.put(paren_stack.last,\
    \ x)\n                    }\n                    paren_stack.pop\n           \
    \     } else {\n                    paren_stack_map.put(paren_stack.last, List(0))\n\
    \                    paren_stack.push(x)\n                }\n            } else\
    \ {\n                paren_stack.push(x)\n            }\n        })\n        paren_stack_map.values.flatten.toList.max",
  "        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_size =\
    \ mutable.Stack[Long]()\n        val paren_stack_max = mutable.Stack[Long]()\n\
    \        val paren_stack_max_size = mutable.Stack[Long]()\n        val paren_stack_max_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_max_size = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_depth_max_depth = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_max_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_max_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_max_depth_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_max_depth_max_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_",
  "        val paren_stack = mutable.Stack[String]()\n        val paren_stack_map\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_size = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_size_max = mutable.Map[String, Long]()\n\
    \        val paren_stack_map_size_max_key = mutable.Map[String, Long]()\n    \
    \    val paren_stack_map_size_max_value = mutable.Map[String, Long]()\n      \
    \  val paren_stack_map_size_max_key = mutable.Map[String, Long]()\n        val\
    \ paren_stack_map_size_max_value = mutable.Map[String, Long]()\n        val paren_stack_map_size_max_key\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_size_max_value =\
    \ mutable.Map[String, Long]()\n        val paren_stack_map_size_max_key = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_size_max_value = mutable.Map[String, Long]()\n\
    \        val paren_stack_map_size_max_key = mutable.Map[String, Long]()\n    \
    \    val paren_stack_map_size_max_value = mutable.Map[String, Long]()\n      \
    \  val paren_stack_map_size_max_key = mutable.Map[String, Long]()\n        val\
    \ paren_stack_map_size_max_value = mutable.Map[String, Long]()\n        val paren_stack_map_size_max_key\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_size_max_value =\
    \ mutable.Map[String, Long]()\n        val paren_stack_map_size_max_key = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_size_max_value = mutable.Map[String, Long]()\n\
    \        val paren_stack_map_size_max_key = mutable.Map[String, Long]()\n    \
    \    val paren_stack_map_size_max_value = mutable.Map[String, Long]()\n      \
    \  val paren_stack_map_size_max_key = mutable.Map[String, Long]()\n        val\
    \ paren_stack_map_size_max_value = mutable.Map[String, Long]()\n        val paren_stack_map_size_max_key\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_size_max_value =\
    \ mutable.Map[String, Long]()\n        val paren_stack_map_size_max_key = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_size_max_value = mutable.Map[String, Long]()\n\
    \        val paren_stack_map_size_max_key = mutable.Map[String, Long]()\n    \
    \    val paren_stack_map_size_max_value = mutable.Map[String, Long]()\n      \
    \  val paren_stack_map_size_max_key = mutable.", "        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_top = mutable.Stack[Long]()\n        val paren_stack_top_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_max_count = mutable.Stack[Long]()\n\
    \        val paren_stack_top_max_count_index = mutable.Stack[Long]()\n       \
    \ val paren_stack_top_max_count_index2 = mutable.Stack[Long]()\n        val paren_stack_top_max_count_index3\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_max_count_index4 = mutable.Stack[Long]()\n\
    \        val paren_stack_top_max_count_index5 = mutable.Stack[Long]()\n      \
    \  val paren_stack_top_max_count_index6 = mutable.Stack[Long]()\n        val paren_stack_top_max_count_index7\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_max_count_index8 = mutable.Stack[Long]()\n\
    \        val paren_stack_top_max_count_index9 = mutable.Stack[Long]()\n      \
    \  val paren_stack_top_max_count_index10 = mutable.Stack[Long]()\n        val\
    \ paren_stack_top_max_count_index11 = mutable.Stack[Long]()\n        val paren_stack_top_max_count_index12\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_max_count_index13 = mutable.Stack[Long]()\n\
    \        val paren_stack_top_max_count_index14 = mutable.Stack[Long]()\n     \
    \   val paren_stack_top_max_count_index15 = mutable.Stack[Long]()\n        val\
    \ paren_stack_top_max_count_index16 = mutable.Stack[Long]()\n        val paren_stack_top_max_count_index17\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_max_count_index18 = mutable.Stack[Long]()\n\
    \        val paren_stack_top_max_count_index19 = mutable.Stack[Long]()\n     \
    \   val paren_stack_top_max_count_index20 = mutable.Stack[Long]()\n        val\
    \ paren_stack_top_max_count_index21 = mutable.Stack[Long]()\n        val paren_stack_top_max_count_index22\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_max_count_index23 = mutable.Stack[Long]()\n\
    \        val paren_stack_top_max_count_index24 = mutable.Stack[Long]()\n     \
    \   val paren_stack_top_max_count_index25", "        val paren_chars = paren_string.toCharArray\n\
    \        val paren_chars_size = paren_chars.length\n        val paren_chars_map\
    \ = mutable.HashMap[Char, Long]()\n        var paren_level = 0\n        var paren_level_count\
    \ = 0\n        var paren_level_max_count = 0\n        var paren_level_max_count_index\
    \ = 0\n        var paren_level_max_count_index2 = 0\n        var paren_level_max_count_index3\
    \ = 0\n        var paren_level_max_count_index4 = 0\n        var paren_level_max_count_index5\
    \ = 0\n        var paren_level_max_count_index6 = 0\n        var paren_level_max_count_index7\
    \ = 0\n        var paren_level_max_count_index8 = 0\n        var paren_level_max_count_index9\
    \ = 0\n        var paren_level_max_count_index10 = 0\n        var paren_level_max_count_index11\
    \ = 0\n        var paren_level_max_count_index12 = 0\n        var paren_level_max_count_index13\
    \ = 0\n        var paren_level_max_count_index14 = 0\n        var paren_level_max_count_index15\
    \ = 0\n        var paren_level_max_count_index16 = 0\n        var paren_level_max_count_index17\
    \ = 0\n        var paren_level_max_count_index18 = 0\n        var paren_level_max_count_index19\
    \ = 0\n        var paren_level_max_count_index20 = 0\n        var paren_level_max_count_index21\
    \ = 0\n        var paren_level_max_count_index22 = 0\n        var paren_level_max_count_index23\
    \ = 0\n        var paren_level_max_count_index24 = 0\n        var paren_level_max_count_index25\
    \ = 0\n        var paren_level_max_count_index26 = 0\n        var paren_level_max_count_index27\
    \ = 0\n        var paren_level_max_count_index28 = 0\n        var paren_level_max_count_index29\
    \ = 0\n        var paren_level_max_count_index30 = 0\n        var paren_level_max_count_index31\
    \ = 0\n        var paren_level_max_count_index32 = 0\n        var paren_level_max_count_index33\
    \ = 0\n        var paren_level_max_count_index34 = 0\n        var paren_level_max_count_index35\
    \ = 0\n        var paren_level_max_count_index36 = 0\n        var paren_level_max_count_index37\
    \ = 0\n        var paren_level_max_count_index38 = 0\n        var paren_level_max_count_index39\
    \ = 0\n        var paren_level_max_count_index40 = 0\n        var paren_level_max_count_index41\
    \ = 0\n        var paren_level_max_count_index42 = 0\n        var paren_level_max_count_index43\
    \ = 0\n        var paren_level_max_count_index44 = 0\n        var paren_level_max_count_index45\
    \ = 0\n        var paren", "        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_queue = mutable.Queue[Long]()\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.en", "        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_top\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count = mutable.Stack[Long]()\n        val paren_stack_top_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_count_count_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_count_count_count_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_count_count_count_count_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_count_count_count_count_count_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_count_count_count_count_count_count_size =\
    \ mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_count_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_count_count_count_count_count_size\
    \ = mutable.Stack[Long]", "        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_levels = mutable.Stack[Int]()\n        val paren_levels_map\
    \ = mutable.HashMap[String, Int]()\n        val paren_levels_map_sorted = mutable.TreeMap[String,\
    \ Int]()\n        val paren_levels_map_sorted_reversed = mutable.TreeMap[String,\
    \ Int]()\n        val paren_levels_map_sorted_reversed_sorted = mutable.TreeMap[String,\
    \ Int]()\n        val paren_levels_map_sorted_reversed_sorted_reversed = mutable.TreeMap[String,\
    \ Int]()\n        val paren_levels_map_sorted_reversed_sorted_reversed_sorted\
    \ = mutable.TreeMap[String, Int]()\n        val paren_levels_map_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = mutable.TreeMap[String, Int]()\n        val paren_levels_map_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = mutable.TreeMap[String, Int]()\n        val paren_levels_map_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = mutable.TreeMap[String, Int]()\n        val paren_levels_map_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = mutable.TreeMap[String, Int]()\n        val paren_levels_map_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = mutable.TreeMap[String, Int]()\n        val paren_levels_map_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = mutable.TreeMap[String, Int]()\n        val paren_levels_map_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = mutable.TreeMap[String, Int]()\n        val paren_levels_map_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = mutable.TreeMap[String, Int]()\n        val paren_levels_map_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = mutable.TreeMap[String, Int]()\n        val paren_levels_map_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = mutable.TreeMap[String, Int]()\n        val paren_levels_map_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = mutable.TreeMap[String, Int]()\n        val paren_level", "        val paren_array\
    \ = paren_string.split(\" \")\n        val paren_array_size = paren_array.length\n\
    \        val max_level = 0\n        var max_level_index = 0\n        var level\
    \ = 0\n        var level_index = 0\n        var paren_count = 0\n        var paren_count_index\
    \ = 0\n        var paren_count_temp = 0\n        var paren_count_temp_temp = 0\n\
    \        var paren_count_temp_temp2 = 0\n        var paren_count_temp_temp3 =\
    \ 0\n        var paren_count_temp_temp4 = 0\n        var paren_count_temp_temp5\
    \ = 0\n        var paren_count_temp_temp6 = 0\n        var paren_count_temp_temp7\
    \ = 0\n        var paren_count_temp_temp8 = 0\n        var paren_count_temp_temp9\
    \ = 0\n        var paren_count_temp_temp10 = 0\n        var paren_count_temp_temp11\
    \ = 0\n        var paren_count_temp_temp12 = 0\n        var paren_count_temp_temp13\
    \ = 0\n        var paren_count_temp_temp14 = 0\n        var paren_count_temp_temp15\
    \ = 0\n        var paren_count_temp_temp16 = 0\n        var paren_count_temp_temp17\
    \ = 0\n        var paren_count_temp_temp18 = 0\n        var paren_count_temp_temp19\
    \ = 0\n        var paren_count_temp_temp20 = 0\n        var paren_count_temp_temp21\
    \ = 0\n        var paren_count_temp_temp22 = 0\n        var paren_count_temp_temp23\
    \ = 0\n        var paren_count_temp_temp24 = 0\n        var paren_count_temp_temp25\
    \ = 0\n        var paren_count_temp_temp26 = 0\n        var paren_count_temp_temp27\
    \ = 0\n        var paren_count_temp_temp28 = 0\n        var paren_count_temp_temp29\
    \ = 0\n        var paren_count_temp_temp30 = 0\n        var paren_count_temp_temp31\
    \ = 0\n        var paren_count_temp_temp32 = 0\n        var paren_count_temp_temp33\
    \ = 0\n        var paren_count_temp_temp34 = 0\n        var paren_count_temp_temp35\
    \ = 0\n        var paren_count_temp_temp36 = 0\n        var paren_count_temp_temp37\
    \ = 0\n        var paren_count_temp_temp38 = 0\n        var paren_count_temp_temp39\
    \ = 0\n        var paren_count_temp_temp40 = 0\n        var paren_count_temp_temp41\
    \ = 0\n        var paren_count_temp_temp42 = 0\n        var paren_count_temp_temp43\
    \ = 0\n        var paren_count_temp_temp44 = 0\n        var paren_count_temp_temp45\
    \ = 0\n        var paren_count_temp_temp46 = 0\n        var paren_count_temp_temp47\
    \ = 0\n        var paren_count_temp_temp48 = 0\n        var paren_count_temp_temp49\
    \ = 0\n        var paren_count_temp_temp50 = 0\n        var paren", "        val\
    \ paren_stack = mutable.Stack[String]()\n        val paren_levels = mutable.ListBuffer[Long]()\n\
    \        val paren_level = 0\n        for (i <- 0 until paren_string.length) {\n\
    \            if (paren_string(i) == '(') {\n                paren_stack.push(paren_string(i))\n\
    \                paren_levels += 1\n            } else if (paren_string(i) ==\
    \ ')') {\n                val paren_level = paren_stack.pop\n                paren_levels\
    \ += paren_level\n            }\n        }\n        paren_levels", "        val\
    \ paren_chars = paren_string.chars\n        val paren_chars_iter = paren_chars.iterator\n\
    \        val paren_chars_next = paren_chars_iter.next()\n        val paren_chars_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next = paren_chars_iter.next()\n\
    \        val paren_chars_next_next_next_next = paren_chars_iter.next()\n     \
    \   val paren_chars_next_next_next_next_next = paren_chars_iter.next()\n     \
    \   val paren_chars_next_next_next_next_next_next = paren_chars_iter.next()\n\
    \        val paren_chars_next_next_next_next_next_next_next = paren_chars_iter.next()\n\
    \        val paren_chars_next_next_next_next_next_next_next_next = paren_chars_iter.next()\n\
    \        val paren_chars_next_next_next_next_next_next_next_next_next = paren_chars_iter.next()\n\
    \        val paren_chars_next_next_next_next_next_next_next_next_next_next = paren_chars_iter.next()\n\
    \        val paren_chars_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()", "        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_levels = mutable.ListBuffer[Long]()\n        paren_string.split(\"\
    \\\\s+\").foreach { s =>\n            val level = paren_stack.size + 1\n     \
    \       paren_stack += level\n            paren_levels += level\n            if\
    \ (s.startsWith(\"(\")) {\n                paren_stack.push(level)\n         \
    \   } else if (s.endsWith(\")\")) {\n                val paren_level = paren_stack.pop()\n\
    \                if (paren_level > 0) {\n                    paren_levels += paren_level\n\
    \                }\n            }\n        }\n        paren_levels.toList", " \
    \       val paren_chars = paren_string.chars\n        val paren_chars_iter = paren_chars.iterator\n\
    \        val paren_chars_next = paren_chars_iter.next\n        val paren_chars_next_next\
    \ = paren_chars_iter.next\n        val paren_chars_next_next_next = paren_chars_iter.next\n\
    \        val paren_chars_next_next_next_next = paren_chars_iter.next\n       \
    \ val paren_chars_next_next_next_next_next = paren_chars_iter.next\n        val\
    \ paren_chars_next_next_next_next_next_next = paren_chars_iter.next\n        val\
    \ paren_chars_next_next_next_next_next_next_next = paren_chars_iter.next\n   \
    \     val paren_chars_next_next_next_next_next_next_next_next = paren_chars_iter.next\n\
    \        val paren_chars_next_next_next_next_next_next_next_next_next = paren_chars_iter.next\n\
    \        val paren_chars_next_next_next_next_next_next_next_next_next_next = paren_chars_iter.next\n\
    \        val paren_chars_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next\n        val paren_chars_next_", "        val paren_stack\
    \ = mutable.Stack[Long]()\n        val paren_stack_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = paren_stack_top_size\n\
    \n        paren_string.split(\"\\\\s+\").foreach(x => {\n            if (x ==\
    \ \"(\") {\n                paren_stack.push(paren_stack_size.size)\n        \
    \        paren_stack_size.push(1)\n                paren_stack_top.push(paren_stack_size.size)\n\
    \                paren_stack_top_size.push(1)\n            } else if (x == \"\
    )\") {\n                val size = paren_stack_size.pop()\n                val\
    \ top = paren_stack_top.pop()\n                val top_size = paren_stack_top_size.pop()\n\
    \                if (paren_stack_size.size == size) {\n                    paren_stack_top_size.push(top)\n\
    \                    paren_stack_top_size.push(top_size)\n                }\n\
    \            }\n        })\n        val max_size = paren_stack_top_size.pop()\n\
    \        val max_top = paren_stack_top_size.pop()\n        val max_stack_top =\
    \ paren_stack_top.pop()\n        val max_stack_top_size = paren_stack_top_size.pop()\n\
    \        val max_stack_top_top_size = paren_stack_top_top_size.pop()\n       \
    \ val max_stack_top_top_top_size = paren_stack_top_top_top_size.pop()\n      \
    \  val max_stack_top_top_top_top_size = paren_stack_top_top_top_top_size.pop()\n\
    \        val max_stack_top_top_top_top_top_size = paren_stack_top_top_top_top_top_size.pop()\n\
    \        val max_stack_top_top_top_top_top_top_size = paren_stack_top_top_top_top_top_top_size.pop()\n\
    \        val max_stack_top_top_top_top_top_top_top_size = paren_stack_top_top_top_top_top_top_top_size.pop()\n\
    \        val max_stack_top_top_top_top_top_top_top_top_size = paren_stack_top_top_top_top_top_top_top_top_top_size.pop()\n\
    \        val max_stack_top_top_top_top_top_top_top_top_top_size = paren_stack_top_top_top_top_top_top_top_top_top_top_size.pop()\n\
    \        val max_stack_top_top_top_top_top_top_top_top_top_size = paren_stack_top_top_top_top_top_top_top_top_top_top_size.pop()\n\
    \        val max_stack_top_top_top_top_top_top_top_top_top_top_size = paren_stack_top_top_top_top_top_top_top_top_top_top_top_size.pop()\n\
    \        val max_stack_top_top_top_top_top_top_top_top_top_top_size = paren_stack_top_top_top_top_top_top_top_",
  "        val paren_stack = mutable.Stack[String]()\n        val paren_stack_len\
    \ = mutable.Stack[Long]()\n        paren_stack.push(paren_string)\n        paren_stack_len.push(0)\n\
    \        while(paren_stack.nonEmpty) {\n            val paren_string = paren_stack.pop()\n\
    \            val paren_stack_len = paren_stack_len.pop()\n            val paren_len\
    \ = paren_string.length\n            val paren_char = paren_string.charAt(paren_len)\n\
    \            val paren_char_code = paren_char.codePointAt(0)\n            val\
    \ paren_char_code_len = 1\n            val paren_char_code_char = paren_char.codePointAt(paren_char_code_len)\n\
    \            val paren_char_code_char_code = paren_char_code_char.codePointAt(0)\n\
    \            val paren_char_code_char_code_len = 1\n            val paren_char_code_char_code_char\
    \ = paren_char_code_char.codePointAt(paren_char_code_char_code_len)\n        \
    \    val paren_char_code_char_code_char_code = paren_char_code_char_code_char.codePointAt(0)\n\
    \            val paren_char_code_char_code_char_code_len = 1\n            val\
    \ paren_char_code_char_code_char_code_char = paren_char_code_char_code_char.codePointAt(paren_char_code_char_code_char_code_len)\n\
    \            val paren_char_code_char_code_char_code_char_code = paren_char_code_char_code_char_code_char.codePointAt(0)\n\
    \            val paren_char_code_char_code_char_code_char_code_len = 1\n     \
    \       val paren_char_code_char_code_char_code_char_code_char = paren_char_code_char_code_char_code_char.codePointAt(paren_char_code_char_code_char_code_char_code_len)\n\
    \            val paren_char_code_char_code_char_code_char_code_char_code = paren_char_code_char_code_char_code_char_code_char.codePointAt(0)\n\
    \            val paren_char_code_char_code_char_code_char_code_char_code_len =\
    \ 1\n            val paren_char_code_char_code_char_code_char_code_char_code_char\
    \ = paren_char_code_char_code_char_code_char_code_char_code_char.codePointAt(paren_char_code_char_code_char_code_char_code_char_code_char_code_len)\n\
    \            val paren_char_code_char_code_char_code_char_code_char_code_char_code\
    \ = paren_char_code_char_code_char_code_char_code_char_code_char.codePointAt(0)\n\
    \            val paren_char_code_char_code_char_code_char_code_char_code_char_code_len\
    \ = 1\n            val paren_char_code_char_code_char_code_char_code_char_code_char_",
  "        val paren_stack = mutable.Stack[String]()\n        val paren_queue = mutable.Queue[String]()\n\
    \        paren_queue.enqueue(paren_string)\n        paren_stack.push(paren_queue.dequeue)\n\
    \        val max_level = 0\n        var level = 0\n        while(!paren_stack.isEmpty)\
    \ {\n            val paren_string = paren_stack.dequeue()\n            val paren_level\
    \ = paren_string.count('(') - paren_string.count(')')\n            paren_stack.push(paren_string)\n\
    \            level += 1\n            if(paren_level > max_level) {\n         \
    \       max_level = paren_level\n            }\n        }\n        level", " \
    \       val paren_stack = mutable.Stack[String]()\n        val paren_stack_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max = mutable.Stack[Long]()\n\
    \        val paren_stack_len_max_len = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max = mutable.Stack[Long]()\n\
    \        val paren_stack_len_max_len_max_max_max = mutable.Stack[Long]()\n   \
    \     val paren_stack_len_max_len_max_max_max_max = mutable.Stack[Long]()\n  \
    \      val paren_stack_len_max_len_max_max_max_max_max = mutable.Stack[Long]()\n\
    \        val paren_stack_len_max_len_max_max_max_max_max_max = mutable.Stack[Long]()\n\
    \        val paren_stack_len_max_len_max_max_max_max_max_max_max = mutable.Stack[Long]()\n\
    \        val paren_stack_len_max_len_max_max_max_max_max_max_max_max = mutable.Stack[Long]()\n\
    \        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max = mutable.Stack[Long]()\n\
    \        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max =\
    \ mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()", "        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_queue = mutable.Queue[String]()\n        paren_queue.enqueue(paren_string)\n\
    \        val paren_levels = mutable.Map[String, Long]()\n        while (paren_queue.nonEmpty)\
    \ {\n            val paren_string = paren_queue.dequeue()\n            val paren_level\
    \ = paren_levels.getOrElse(paren_string, 0)\n            paren_levels += (paren_string\
    \ -> paren_level)\n            paren_stack += paren_string\n            if (paren_string.contains(\"\
    (\")) {\n                paren_queue.enqueue(paren_string + \")\")\n         \
    \   }\n            if (paren_string.contains(\")\")) {\n                paren_queue.enqueue(paren_string\
    \ + \"(\")\n            }\n        }\n        val max_level = paren_levels\n \
    \           .map { case (paren_string, level) => (paren_string, level) }\n   \
    \         .maxBy(_._2)\n            .map(x => x._2)\n            .headOption\n\
    \            .getOrElse(0)\n        val max_level_paren_string = max_level.map(x\
    \ => paren_stack.pop()).getOrElse(\"\")\n        val max_level_paren_level = max_level.map(x\
    \ => paren_stack.pop()).getOrElse(0)\n        val max_level_paren_levels = max_level_paren_string.zip(max_level_paren_level).map(x\
    \ => x._1 + \" \" + x._2)\n        val max_level_paren_levels_string = max_level_paren_levels.mkString(\"\
    \ \")\n        val max_level_paren_levels_string = max_level_paren_levels_string.substring(0,\
    \ max_level_paren_levels_string.length - 1)\n        val max_level_paren_levels_string\
    \ = max_level_paren_levels_string.substring(0, max_level_paren_levels_string.length\
    \ - 1)\n        val max_level_paren_levels_string = max_level_paren_levels_string.substring(0,\
    \ max_level_paren_levels_string.length - 1)\n        val max_level_paren_levels_string\
    \ = max_level_paren_levels_string.substring(0, max_level_paren_levels_string.length\
    \ - 1)\n        val max_level_paren_levels_string = max_level_paren_levels_string.substring(0,\
    \ max_level_paren_levels_string.length - 1)\n        val max_level_paren_levels_string\
    \ = max_level_paren_levels_string.substring(0, max_level_paren_levels_string.length\
    \ - 1)\n        val max_level_paren_levels_string = max_level_paren_levels_string.substring(0,\
    \ max_level_paren_levels_string.length - 1)\n        val max_level_paren_levels_string\
    \ = max_level_paren_levels_", "        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_map = mutable.Map[Long, Long]()\n        val paren_stack_map_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_values_keys = mutable.Map[Long, Long]()\n\
    \        val paren_stack_map_values_values = mutable.Map[Long, Long]()\n     \
    \   val paren_stack_map_values_values_keys = mutable.Map[Long, Long]()\n     \
    \   val paren_stack_map_values_values_values = mutable.Map[Long, Long]()\n   \
    \     val paren_stack_map_values_values_values_keys = mutable.Map[Long, Long]()\n\
    \        val paren_stack_map_values_values_values_values = mutable.Map[Long, Long]()\n\
    \        val paren_stack_map_values_values_values_values_keys = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_values_values_values_values_values = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_keys_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_keys_keys_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_keys_keys_keys_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_keys_keys_keys_values_values_values_values_keys_keys_keys_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_",
  "        val paren_stack = mutable.Stack[String]()\n        val paren_stack_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level = mutable.Stack[Long]()\n\
    \        val paren_stack_level_max = mutable.Stack[Long]()\n        val paren_stack_level_max_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_index = mutable.Stack[Long]()\n\
    \        val paren_stack_level_max_index_size = mutable.Stack[Long]()\n      \
    \  val paren_stack_level_max_index_count = mutable.Stack[Long]()\n        val\
    \ paren_stack_level_max_index_count_size = mutable.Stack[Long]()\n        val\
    \ paren_stack_level_max_index_count_index = mutable.Stack[Long]()\n        val\
    \ paren_stack_level_max_index_count_index_size = mutable.Stack[Long]()\n     \
    \   val paren_stack_level_max_index_count_index_count = mutable.Stack[Long]()\n\
    \        val paren_stack_level_max_index_count_index_count_size = mutable.Stack[Long]()\n\
    \        val paren_stack_level_max_index_count_index_count_index = mutable.Stack[Long]()\n\
    \        val paren_stack_level_max_index_count_index_count_index_size = mutable.Stack[Long]()\n\
    \        val paren_stack_level_max_index_count_index_count_index_count = mutable.Stack[Long]()\n\
    \        val paren_stack_level_max_index_count_index_count_index_count_size =\
    \ mutable.Stack[Long]()\n        val paren_stack_level_max_index_count_index_count_index_count_index\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_index_count_index_count_index_count_index_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_index_count_index_count_index_count_index_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_index_count_index_count_index_count_index_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_index_count_index_count_index_count_index_count_index\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_index_count_index_count_index_count_index_count_index_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_index_count_index_count_index_count_index_count_index_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_index_count_index_count_index_count_index_count_index_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_index_count_index_count_index_count_index_count_index_count_index\
    \ = mut", "        val paren_stack = mutable.Stack[String]()\n        val paren_queue\
    \ = mutable.Queue[String]()\n        paren_queue.enqueue(paren_string)\n     \
    \   paren_stack.push(paren_queue.dequeue)\n        var paren_level = 0\n     \
    \   var paren_level_count = 0\n        var paren_level_max_count = 0\n       \
    \ var paren_level_max_level = 0\n        while (paren_queue.nonEmpty) {\n    \
    \        val paren_string = paren_queue.dequeue\n            val paren_level =\
    \ paren_stack.size\n            val paren_level_count = paren_queue.size\n   \
    \         val paren_level_max_count = paren_level_count + paren_level_count\n\
    \            val paren_level_max_level = paren_level + paren_level_count\n   \
    \         if (paren_level_max_count > paren_level_max_level) {\n             \
    \   paren_stack.push(paren_string)\n                paren_level_count = 1\n  \
    \              paren_level_max_level = paren_level\n            } else {\n   \
    \             paren_stack.push(paren_string)\n                paren_level_count\
    \ += 1\n            }\n        }\n        val paren_level_list = paren_stack.map(x\
    \ => x.length)\n        paren_level_list.max", "        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_map = mutable.Map[Long, Long]()\n        val paren_stack_map_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_values_keys = mutable.Map[Long, Long]()\n\
    \        val paren_stack_map_values_values = mutable.Map[Long, Long]()\n     \
    \   val paren_stack_map_values_values_keys = mutable.Map[Long, Long]()\n     \
    \   val paren_stack_map_values_values_values = mutable.Map[Long, Long]()\n   \
    \     val paren_stack_map_values_values_values_keys = mutable.Map[Long, Long]()\n\
    \        val paren_stack_map_values_values_values_values = mutable.Map[Long, Long]()\n\
    \        val paren_stack_map_values_values_values_values_keys = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_values_values_values_values_values = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_keys_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_keys_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_keys_values_values_values_keys_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_keys_values_values_values_values_keys_values_values_values_values_values_values_keys_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_",
  "        val paren_stack = mutable.Stack[String]()\n        val paren_levels = mutable.Stack[Int]()\n\
    \        val paren_levels_count = mutable.Stack[Int]()\n        val paren_levels_count_max\
    \ = mutable.Stack[Int]()\n        val paren_levels_count_max_index = mutable.Stack[Int]()\n\
    \        val paren_levels_count_max_index2 = mutable.Stack[Int]()\n        val\
    \ paren_levels_count_max_index3 = mutable.Stack[Int]()\n        val paren_levels_count_max_index4\
    \ = mutable.Stack[Int]()\n        val paren_levels_count_max_index5 = mutable.Stack[Int]()\n\
    \        val paren_levels_count_max_index6 = mutable.Stack[Int]()\n        val\
    \ paren_levels_count_max_index7 = mutable.Stack[Int]()\n        val paren_levels_count_max_index8\
    \ = mutable.Stack[Int]()\n        val paren_levels_count_max_index9 = mutable.Stack[Int]()\n\
    \        val paren_levels_count_max_index10 = mutable.Stack[Int]()\n        val\
    \ paren_levels_count_max_index11 = mutable.Stack[Int]()\n        val paren_levels_count_max_index12\
    \ = mutable.Stack[Int]()\n        val paren_levels_count_max_index13 = mutable.Stack[Int]()\n\
    \        val paren_levels_count_max_index14 = mutable.Stack[Int]()\n        val\
    \ paren_levels_count_max_index15 = mutable.Stack[Int]()\n        val paren_levels_count_max_index16\
    \ = mutable.Stack[Int]()\n        val paren_levels_count_max_index17 = mutable.Stack[Int]()\n\
    \        val paren_levels_count_max_index18 = mutable.Stack[Int]()\n        val\
    \ paren_levels_count_max_index19 = mutable.Stack[Int]()\n        val paren_levels_count_max_index20\
    \ = mutable.Stack[Int]()\n        val paren_levels_count_max_index21 = mutable.Stack[Int]()\n\
    \        val paren_levels_count_max_index22 = mutable.Stack[Int]()\n        val\
    \ paren_levels_count_max_index23 = mutable.Stack[Int]()\n        val paren_levels_count_max_index24\
    \ = mutable.Stack[Int]()\n        val paren_levels_count_max_index25", "     \
    \   val paren_array = paren_string.split(\" \")\n        val paren_array_size\
    \ = paren_array.length\n        val paren_array_max_size = paren_array_size -\
    \ 1\n        val paren_array_max_size = paren_array_max_size + 1\n        val\
    \ paren_array_max_size = paren_array_max_size + 1\n        val paren_array_max_size\
    \ = paren_array_max_size + 1\n        val paren_array_max_size = paren_array_max_size\
    \ + 1\n        val paren_array_max_size = paren_array_max_size + 1\n        val\
    \ paren_array_max_size = paren_array_max_size + 1\n        val paren_array_max_size\
    \ = paren_array_max_size + 1\n        val paren_array_max_size = paren_array_max_size\
    \ + 1\n        val paren_array_max_size = paren_array_max_size + 1\n        val\
    \ paren_array_max_size = paren_array_max_size + 1\n        val paren_array_max_size\
    \ = paren_array_max_size + 1\n        val paren_array_max_size = paren_array_max_size\
    \ + 1\n        val paren_array_max_size = paren_array_max_size + 1\n        val\
    \ paren_array_max_size = paren_array_max_size + 1\n        val paren_array_max_size\
    \ = paren_array_max_size + 1\n        val paren_array_max_size = paren_array_max_size\
    \ + 1\n        val paren_array_max_size = paren_array_max_size + 1\n        val\
    \ paren_array_max_size = paren_array_max_size + 1\n        val paren_array_max_size\
    \ = paren_array_max_size + 1\n        val paren_array_max_size = paren_array_max_size\
    \ + 1\n        val paren_array_max_size = paren_array_max_size + 1\n        val\
    \ paren_array_max_size = paren_array_max_size + 1\n        val paren_array_max_size\
    \ = paren_array_max_size + 1\n        val paren_array_max_size = paren_array_max_size\
    \ + 1\n        val paren_array_max_size = paren_array_max_size + 1\n        val\
    \ paren_array_max_size = paren_array_max_size + 1\n        val paren_array_max_size\
    \ = paren_array_max_size + 1\n        val paren_array_max_size = paren_array_max_size\
    \ + 1\n        val paren_array_max_size = paren_array_max_size + 1\n        val\
    \ paren_array_max_size = paren_array_max_size + 1\n        val paren_array_max_size\
    \ = paren_array_max_size + 1\n        val paren_array_max_size = paren_array_max_size\
    \ + 1\n        val paren_array_max_size = paren_array_max_size + 1\n        val\
    \ paren_array_max_size = paren_array_max_size + 1\n        val ", "        val\
    \ paren_stack = mutable.Stack[Long]()\n        val paren_stack_map = mutable.HashMap[Long,\
    \ Long]()\n        val paren_stack_map_keys = mutable.HashSet[Long]()\n      \
    \  val paren_stack_map_values = mutable.HashMap[Long, Long]()\n        val paren_stack_map_values_keys\
    \ = mutable.HashSet[Long]()\n        val paren_stack_map_values_values = mutable.HashMap[Long,\
    \ Long]()\n        val paren_stack_map_values_values_keys = mutable.HashSet[Long]()\n\
    \        val paren_stack_map_values_values_values = mutable.HashMap[Long, Long]()\n\
    \        val paren_stack_map_values_values_values_keys = mutable.HashSet[Long]()\n\
    \        val paren_stack_map_values_values_values_values = mutable.HashMap[Long,\
    \ Long]()\n        val paren_stack_map_values_values_values_values_keys = mutable.HashSet[Long]()\n\
    \        val paren_stack_map_values_values_values_values_values = mutable.HashMap[Long,\
    \ Long]()\n        val paren_stack_map_values_values_values_values_values_keys\
    \ = mutable.HashSet[Long]()\n        val paren_stack_map_values_values_values_values_values_values\
    \ = mutable.HashMap[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_keys\
    \ = mutable.HashSet[Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values\
    \ = mutable.HashMap[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_keys\
    \ = mutable.HashSet[Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values\
    \ = mutable.HashMap[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_keys\
    \ = mutable.HashSet[Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values\
    \ = mutable.HashMap[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_keys\
    \ = mutable.HashSet[Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values\
    \ = mutable.HashMap[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_keys\
    \ = mutable.HashSet[Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values\
    \ = mutable.HashMap[Long, Long]()\n        val paren_stack_map_values_values_values_values_",
  "        val paren_stack = mutable.Stack[String]()\n        val paren_queue = mutable.Queue[String]()\n\
    \        paren_queue.enqueue(paren_string)\n        paren_stack.push(paren_string)\n\
    \        val max_level = 0\n        while(!paren_queue.isEmpty) {\n          \
    \  val current_string = paren_queue.dequeue()\n            val current_level =\
    \ paren_stack.size\n            val current_parens = paren_stack.mkString(\"\"\
    ).length\n            val current_parens_count = current_parens.toLong\n     \
    \       val current_parens_count_plus_1 = current_parens_count + 1\n         \
    \   val current_parens_count_minus_1 = current_parens_count - 1\n            val\
    \ current_parens_count_minus_2 = current_parens_count - 2\n            val current_parens_count_minus_3\
    \ = current_parens_count - 3\n            val current_parens_count_minus_4 = current_parens_count\
    \ - 4\n            val current_parens_count_minus_5 = current_parens_count - 5\n\
    \            val current_parens_count_minus_6 = current_parens_count - 6\n   \
    \         val current_parens_count_minus_7 = current_parens_count - 7\n      \
    \      val current_parens_count_minus_8 = current_parens_count - 8\n         \
    \   val current_parens_count_minus_9 = current_parens_count - 9\n            val\
    \ current_parens_count_minus_10 = current_parens_count - 10\n            val current_parens_count_minus_11\
    \ = current_parens_count - 11\n            val current_parens_count_minus_12 =\
    \ current_parens_count - 12\n            val current_parens_count_minus_13 = current_parens_count\
    \ - 13\n            val current_parens_count_minus_14 = current_parens_count -\
    \ 14\n            val current_parens_count_minus_15 = current_parens_count - 15\n\
    \            val current_parens_count_minus_16 = current_parens_count - 16\n \
    \           val current_parens_count_minus_17 = current_parens_count - 17\n  \
    \          val current_parens_count_minus_18 = current_parens_count - 18\n   \
    \         val current_parens_count_minus_19 = current_parens_count - 19\n    \
    \        val current_parens_count_minus_20 = current_parens_count - 20\n     \
    \       val current_parens_count_minus_21 = current_parens_count - 21\n      \
    \      val current_parens_count_minus_22 = current_parens_count - 22\n       \
    \     val current_parens_count_minus_23 = current_parens_count - 23\n        \
    \    val current_parens_count_minus_24 = current_", "        val paren_groups\
    \ = paren_string.split(\"\\\\s\")\n        val max_level = 0\n        val max_level_groups\
    \ = mutable.ListBuffer.empty[String]\n        for (paren_group <- paren_groups)\
    \ {\n            val level_of_nesting = paren_group.count('(') - paren_group.count(')')\n\
    \            if (level_of_nesting > max_level) {\n                max_level =\
    \ level_of_nesting\n                max_level_groups = max_level_groups.updated(0,\
    \ paren_group)\n            } else if (level_of_nesting == max_level) {\n    \
    \            max_level_groups = max_level_groups.updated(max_level_groups.size\
    \ - 1, paren_group)\n            }\n        }\n        max_level_groups.map(_.length).max",
  "        val paren_stack = mutable.Stack[String]()\n        val paren_stack_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max = mutable.Stack[Long]()\n\
    \        val paren_stack_max_size = mutable.Stack[Long]()\n        val paren_stack_max_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_size = mutable.Stack[Long]()\n  \
    \      val paren_stack_max_depth_pos_depth_pos = mutable.Stack[Long]()\n     \
    \   val paren_stack_max_depth_pos_depth_pos_size = mutable.Stack[Long]()\n   \
    \     val paren_stack_max_depth_pos_depth_pos_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_pos_depth_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_pos_depth_pos = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_pos_depth_pos_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_pos_depth_pos_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_pos_depth_pos_depth_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_pos_depth_pos_depth_pos = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_pos_depth_pos_depth_pos_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_pos_depth_pos_depth_pos_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_pos_depth_pos_depth_pos_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_pos_depth_pos_depth_pos_depth_pos\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_pos_depth_pos_depth_pos_depth_pos_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_pos_depth_pos_depth_pos_depth_pos_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_pos_depth_pos_depth_pos_depth_pos_depth_size\
    \ = mutable.Stack[Long]", "        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_levels = mutable.ListBuffer[Long]()\n        paren_stack.push(paren_string)\n\
    \        paren_levels.append(0)\n        while (paren_stack.nonEmpty) {\n    \
    \        val paren_string = paren_stack.pop()\n            val paren_level = (paren_levels(paren_levels.length-1)\
    \ + 1)\n            if (paren_string.contains(\"(\")) {\n                paren_stack.push(paren_string)\n\
    \                paren_levels.append(paren_level)\n            }\n           \
    \ else if (paren_string.contains(\")\")) {\n                paren_levels(paren_levels.length-1)\
    \ = paren_level\n            }\n        }\n        paren_levels.toList", "   \
    \     val paren_stack = mutable.Stack[Long]()\n        val paren_stack_size =\
    \ mutable.Stack[Long]()\n        val paren_stack_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n",
  "        val paren_stack = mutable.Stack[Long]()\n        val paren_levels = mutable.ListBuffer[Long]()\n\
    \        paren_string.split(\" \").foreach(s => {\n            val paren_level\
    \ = paren_stack.size\n            paren_stack.push(paren_level)\n            paren_levels\
    \ += paren_level\n            if (s == \"(\") {\n                paren_stack.push(paren_level\
    \ + 1)\n            } else if (s == \")\") {\n                val paren_level\
    \ = paren_stack.pop()\n                if (paren_level > 0) {\n              \
    \      paren_levels += paren_level\n                }\n            }\n       \
    \ })\n        paren_levels.toList", "        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_max = mutable.Stack[Long]()\n        val paren_stack_max_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size_max = mutable.Stack[Long]()\n\
    \        val paren_stack_max_size_max_max = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_size_max_max_max = mutable.Stack[Long]()\n        val paren_stack_max_size_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size_max_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size_max_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size_max_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size_max_", "        val\
    \ paren_stack = mutable.Stack[Long]()\n        val paren_queue = mutable.Queue[Long]()\n\
    \        val paren_levels = mutable.Map[Long, Long]()\n        paren_string.split(\"\
    \\\\s+\").foreach { s =>\n            val paren_level = paren_levels(s)\n    \
    \        if (paren_level == -1) {\n                paren_levels(s) = paren_stack.size\n\
    \                paren_queue.enqueue(s)\n            } else {\n              \
    \  paren_stack.push(paren_level)\n            }\n        }\n        val max_levels\
    \ = paren_queue.dequeue()\n        val max_levels_map = paren_levels.toMap\n \
    \       val max_levels_map_keys = max_levels_map.keys\n        val max_levels_map_values\
    \ = max_levels_map.values\n        val max_levels_map_sorted = max_levels_map_keys.sorted\n\
    \        val max_levels_map_sorted_values = max_levels_map_values.sorted\n   \
    \     val max_levels_map_sorted_keys = max_levels_map_sorted.map(max_levels_map_sorted_values.indexOf(_))\n\
    \        val max_levels_map_sorted_keys_map = max_levels_map_sorted.zip(max_levels_map_sorted_keys).map(x\
    \ => (x._1, x._2)).toMap\n        val max_levels_map_sorted_keys_map_values =\
    \ max_levels_map_sorted_keys.map(max_levels_map_sorted_keys_map.get(_))\n    \
    \    val max_levels_map_sorted_keys_map_values_sorted = max_levels_map_sorted_keys_map_values.sorted\n\
    \        val max_levels_map_sorted_keys_map_values_sorted_keys = max_levels_map_sorted_keys_map_values_sorted.map(max_levels_map_sorted_keys_map_values_sorted_values.indexOf(_))\n\
    \        val max_levels_map_sorted_keys_map_values_sorted_keys_map = max_levels_map_sorted_keys_map_values_sorted.zip(max_levels_map_sorted_keys_map_values_sorted_keys_keys).map(x\
    \ => (x._1, x._2)).toMap\n        val max_levels_map_sorted_keys_map_values_sorted_keys_map_values\
    \ = max_levels_map_sorted_keys_map_values_sorted_keys.map(max_levels_map_sorted_keys_map_values_sorted_keys_map_values.get(_))\n\
    \        val max_levels_map_sorted_keys_map_values_sorted_keys_map_values_sorted\
    \ = max_levels_map_sorted_keys_map_values_sorted_keys_map_values_sorted_keys.map(max_levels_map_sorted_keys_map_values_sorted_keys_map_values_sorted_keys_map.get(_))\n\
    \        val max_levels_map_sorted_keys_map_values_sorted_keys_map_values_sorted_keys\
    \ = max_levels_map_sorted_keys_map_values_sorted_keys_map_values_sorted_keys_map.map(max_levels_map_sorted_",
  "        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_map =\
    \ mutable.HashMap[Long, Long]()\n        val paren_stack_map_size = mutable.HashMap[Long,\
    \ Long]()\n        val paren_stack_map_size_max = mutable.HashMap[Long, Long]()\n\
    \        val paren_stack_map_size_max_size = mutable.HashMap[Long, Long]()\n \
    \       val paren_stack_map_size_max_key = mutable.HashMap[Long, Long]()\n   \
    \     val paren_stack_map_size_max_value = mutable.HashMap[Long, Long]()\n   \
    \     val paren_stack_map_size_max_key_size = mutable.HashMap[Long, Long]()\n\
    \        val paren_stack_map_size_max_value_size = mutable.HashMap[Long, Long]()\n\
    \        val paren_stack_map_size_max_key_value_size = mutable.HashMap[Long, Long]()\n\
    \        val paren_stack_map_size_max_key_value_size_size = mutable.HashMap[Long,\
    \ Long]()\n        val paren_stack_map_size_max_key_value_size_max = mutable.HashMap[Long,\
    \ Long]()\n        val paren_stack_map_size_max_key_value_size_max_size = mutable.HashMap[Long,\
    \ Long]()\n        val paren_stack_map_size_max_key_value_size_max_key = mutable.HashMap[Long,\
    \ Long]()\n        val paren_stack_map_size_max_key_value_size_max_value = mutable.HashMap[Long,\
    \ Long]()\n        val paren_stack_map_size_max_key_value_size_max_key_size =\
    \ mutable.HashMap[Long, Long]()\n        val paren_stack_map_size_max_key_value_size_max_value_size\
    \ = mutable.HashMap[Long, Long]()\n        val paren_stack_map_size_max_key_value_size_max_key_value_size\
    \ = mutable.HashMap[Long, Long]()\n        val paren_stack_map_size_max_key_value_size_max_key_value_size_max\
    \ = mutable.HashMap[Long, Long]()\n        val paren_stack_map_size_max_key_value_size_max_key_value_size_max_size\
    \ = mutable.HashMap[Long, Long]()\n        val paren_stack_map_size_max_key_value_size_max_key_value_size_max_key\
    \ = mutable.HashMap[Long, Long]()\n        val paren_stack_map_size_max_key_value_size_max_key_value_size_max_value\
    \ = mutable.HashMap[Long, Long]()\n        val paren_stack_map_size_max_key_value_size_max_key_value_size_max_key_size\
    \ = mutable.HashMap[Long, Long]()\n        val paren_stack_map_size_max_", " \
    \       val paren_stack = mutable.Stack[String]()\n        val paren_stack_map\
    \ = mutable.Map[String, List[Long]]()\n        val paren_stack_map_keys = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_values = mutable.Map[Long, Long]()\n  \
    \      val paren_stack_map_values_keys = mutable.Map[Long, Long]()\n        val\
    \ paren_stack_map_values_values_keys = mutable.Map[Long, Long]()\n        val\
    \ paren_stack_map_values_values_values = mutable.Map[Long, Long]()\n        val\
    \ paren_stack_map_values_values_values_keys = mutable.Map[Long, Long]()\n    \
    \    val paren_stack_map_values_values_values_values = mutable.Map[Long, Long]()\n\
    \        val paren_stack_map_values_values_values_values_keys = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_values_values_values_values_values = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_",
  "        val paren_stack = mutable.Stack[String]()\n        val paren_levels = mutable.Stack[Long]()\n\
    \        val paren_level = 0\n        val paren_levels = mutable.Stack[Long]()\n\
    \        val paren_level = 0\n        val paren_levels = mutable.Stack[Long]()\n\
    \        val paren_level = 0\n        val paren_levels = mutable.Stack[Long]()\n\
    \        val paren_level = 0\n        val paren_levels = mutable.Stack[Long]()\n\
    \        val paren_level = 0\n        val paren_levels = mutable.Stack[Long]()\n\
    \        val paren_level = 0\n        val paren_levels = mutable.Stack[Long]()\n\
    \        val paren_level = 0\n        val paren_levels = mutable.Stack[Long]()\n\
    \        val paren_level = 0\n        val paren_levels = mutable.Stack[Long]()\n\
    \        val paren_level = 0\n        val paren_levels = mutable.Stack[Long]()\n\
    \        val paren_level = 0\n        val paren_levels = mutable.Stack[Long]()\n\
    \        val paren_level = 0\n        val paren_levels = mutable.Stack[Long]()\n\
    \        val paren_level = 0\n        val paren_levels = mutable.Stack[Long]()\n\
    \        val paren_level = 0\n        val paren_levels = mutable.Stack[Long]()\n\
    \        val paren_level = 0\n        val paren_levels = mutable.Stack[Long]()\n\
    \        val paren_level = 0\n        val paren_levels = mutable.Stack[Long]()\n\
    \        val paren_level = 0\n        val paren_levels = mutable.Stack[Long]()\n\
    \        val paren_level = 0\n        val paren_levels = mutable.Stack[Long]()\n\
    \        val paren_level = 0\n        val paren_levels = mutable.Stack[Long]()\n\
    \        val paren_level = 0\n        val paren_levels = mutable.Stack[Long]()\n\
    \        val paren_level = 0\n        val paren_levels = mutable.Stack[Long]()\n\
    \        val paren_level = 0\n        val paren_levels = mutable.Stack[Long]()\n\
    \        val paren_level = 0\n        val paren_levels = mutable.Stack[Long]()\n\
    \        val paren_level = 0\n        val paren_levels = mutable.Stack[Long]()\n\
    \        ", "        val paren_stack = mutable.Stack[String]()\n        val paren_queue\
    \ = mutable.Queue[String]()\n        paren_queue.enqueue(paren_string)\n     \
    \   val paren_levels = mutable.Map[String, Long]()\n        while (paren_queue.nonEmpty)\
    \ {\n            val paren_string = paren_queue.dequeue()\n            val paren_level\
    \ = paren_levels(paren_string)\n            if (paren_level == null) {\n     \
    \           paren_levels(paren_string) = paren_stack.size\n            }\n   \
    \         paren_stack :+= paren_string\n            paren_string match {\n   \
    \             case \")\" =>\n                    paren_level += 1\n          \
    \      case \")()\" =>\n                    paren_queue.enqueue(paren_stack.pop())\n\
    \                case \")()()\" =>\n                    paren_queue.enqueue(paren_stack.pop())\n\
    \                case \")()()()\" =>\n                    paren_queue.enqueue(paren_stack.pop())\n\
    \                case \")()()()()\" =>\n                    paren_queue.enqueue(paren_stack.pop())\n\
    \                case \")()()()()()\" =>\n                    paren_queue.enqueue(paren_stack.pop())\n\
    \                case \")()()()()()()\" =>\n                    paren_queue.enqueue(paren_stack.pop())\n\
    \                case \")()()()()()()()\" =>\n                    paren_queue.enqueue(paren_stack.pop())\n\
    \                case \")()()()()()()()()\" =>\n                    paren_queue.enqueue(paren_stack.pop())\n\
    \                case \")()()()()()()()()\" =>\n                    paren_queue.enqueue(paren_stack.pop())\n\
    \                case \")()()()()()()()()()\" =>\n                    paren_queue.enqueue(paren_stack.pop())\n\
    \                case \")()()()()()()()()()()\" =>\n                    paren_queue.enqueue(paren_stack.pop())\n\
    \                case \")()()()()()()()()()()()\" =>\n                    paren_queue.enqueue(paren_stack.pop())\n\
    \                case \")()()()()()()()()()()()\" =>\n                    paren_queue.enqueue(paren_stack.pop())\n\
    \                case \")()()()()()()()()()()()\" =>\n                    paren_queue.enqueue(paren_stack.pop())\n\
    \                case \")()()()()()()()()()()()()\" =>\n                    paren_queue.enqueue(paren_stack.pop())\n",
  "        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_top =\
    \ paren_stack.size\n        val paren_stack_max_level = paren_stack_top\n    \
    \    val paren_stack_max_level_with_paren = paren_stack_top\n        val paren_stack_max_level_with_paren_within_paren\
    \ = paren_stack_top\n        val paren_stack_max_level_with_paren_within_paren_within_paren\
    \ = paren_stack_top\n        val paren_stack_max_level_with_paren_within_paren_within_paren_within_paren\
    \ = paren_stack_top\n        val paren_stack_max_level_with_paren_within_paren_within_paren_within_paren_within_paren\
    \ = paren_stack_top\n        val paren_stack_max_level_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ = paren_stack_top\n        val paren_stack_max_level_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ = paren_stack_top\n        val paren_stack_max_level_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ = paren_stack_top\n        val paren_stack_max_level_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ = paren_stack_top\n        val paren_stack_max_level_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ = paren_stack_top\n        val paren_stack_max_level_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ = paren_stack_top\n        val paren_stack_max_level_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ = paren_stack_top\n        val paren_stack_max_level_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_with",
  "        val paren_array = paren_string.split(\" \")\n        val paren_array_size\
    \ = paren_array.length\n        val paren_array_max_size = paren_array_size -\
    \ 1\n        val paren_array_max_size = paren_array_max_size * paren_array_max_size\n\
    \        val paren_array_max_size = paren_array_max_size * paren_array_max_size\n\
    \        val paren_array_max_size = paren_array_max_size * paren_array_max_size\n\
    \        val paren_array_max_size = paren_array_max_size * paren_array_max_size\n\
    \        val paren_array_max_size = paren_array_max_size * paren_array_max_size\n\
    \        val paren_array_max_size = paren_array_max_size * paren_array_max_size\n\
    \        val paren_array_max_size = paren_array_max_size * paren_array_max_size\n\
    \        val paren_array_max_size = paren_array_max_size * paren_array_max_size\n\
    \        val paren_array_max_size = paren_array_max_size * paren_array_max_size\n\
    \        val paren_array_max_size = paren_array_max_size * paren_array_max_size\n\
    \        val paren_array_max_size = paren_array_max_size * paren_array_max_size\n\
    \        val paren_array_max_size = paren_array_max_size * paren_array_max_size\n\
    \        val paren_array_max_size = paren_array_max_size * paren_array_max_size\n\
    \        val paren_array_max_size = paren_array_max_size * paren_array_max_size\n\
    \        val paren_array_max_size = paren_array_max_size * paren_array_max_size\n\
    \        val paren_array_max_size = paren_array_max_size * paren_array_max_size\n\
    \        val paren_array_max_size = paren_array_max_size * paren_array_max_size\n\
    \        val paren_array_max_size = paren_array_max_size * paren_array_max_size\n\
    \        val paren_array_max_size = paren_array_max_size * paren_array_max_size\n\
    \        val paren_array_max_size = paren_array_max_size * paren_array_max_size\n\
    \        val paren_array_max_size = paren_array_max_size * paren_array_max_size\n\
    \        val paren_array_max_size = paren_array_max_size * paren_array_max_size\n\
    \        val paren_array_max_size = paren_array_max_size * paren_array_max_size\n\
    \        val paren_array_max_size = paren_array_max_size * paren_array_max_size\n\
    \        val paren_array_max_size = paren_array_max_size * paren_array_max_size\n\
    \        val paren_array_max_size = paren_array_max_size * paren_array_max_size\n\
    \        val paren_array_max_size = paren_array_", "        val paren_stack =\
    \ mutable.Stack[String]()\n        val paren_stack_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count = mutable.Stack[Int]()\n\
    \        val paren_stack_top_count_max = mutable.Stack[Int]()\n        val paren_stack_top_count_min\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_min = mutable.Stack[Int]()\n\
    \        val paren_stack_top_count_max = mutable.Stack[Int]()\n        val paren_stack_top_count_min\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_max = mutable.Stack[Int]()\n\
    \        val paren_stack_top_count_min = mutable.Stack[Int]()\n        val paren_stack_top_count_max\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_min = mutable.Stack[Int]()\n\
    \        val paren_stack_top_count_max = mutable.Stack[Int]()\n        val paren_stack_top_count_min\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_max = mutable.Stack[Int]()\n\
    \        val paren_stack_top_count_min = mutable.Stack[Int]()\n        val paren_stack_top_count_max\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_min = mutable.Stack[Int]()\n\
    \        val paren_stack_top_count_max = mutable.Stack[Int]()\n        val paren_stack_top_count_min\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_max = mutable.Stack[Int]()\n\
    \        val paren_stack_top_count_min = mutable.Stack[Int]()\n        val paren_stack_top_count_max\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_min = mutable.Stack[Int]()\n\
    \        val paren_stack_top_count_max = mutable.Stack[Int]()\n        val paren_stack_top_count_min\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_max = mutable.Stack[Int]()\n\
    \        val paren_stack_top_count_min = mutable.Stack[Int]()\n        val paren_stack_top_count_max\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_min = mutable.Stack[Int]()\n\
    \        val paren_stack_top_count_max = ", "        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_top\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count = mutable.Stack[Long]()\n        val paren_stack_top_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n       \
    \ val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n        val paren_stack_top_count_indexSize\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n       \
    \ val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n        val paren_stack_top_count_indexSize\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n       \
    \ val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n        val paren_stack_top_count_indexSize\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n       \
    \ val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n        val paren_stack_top_count_indexSize\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n       \
    \ val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n        val paren_stack_top_count_indexSize\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n       \
    \ val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n        val paren_stack_top_count_indexSize\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n",
  "        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_top =\
    \ paren_stack.size\n        val paren_stack_bottom = paren_stack.size\n      \
    \  val paren_stack_max_level = paren_stack.size\n        val paren_stack_max_level_top\
    \ = paren_stack_max_level\n        val paren_stack_max_level_bottom = paren_stack_max_level\n\
    \        val paren_stack_max_level_bottom = paren_stack_max_level\n        val\
    \ paren_stack_max_level_bottom = paren_stack_max_level\n        val paren_stack_max_level_bottom\
    \ = paren_stack_max_level\n        val paren_stack_max_level_bottom = paren_stack_max_level\n\
    \        val paren_stack_max_level_bottom = paren_stack_max_level\n        val\
    \ paren_stack_max_level_bottom = paren_stack_max_level\n        val paren_stack_max_level_bottom\
    \ = paren_stack_max_level\n        val paren_stack_max_level_bottom = paren_stack_max_level\n\
    \        val paren_stack_max_level_bottom = paren_stack_max_level\n        val\
    \ paren_stack_max_level_bottom = paren_stack_max_level\n        val paren_stack_max_level_bottom\
    \ = paren_stack_max_level\n        val paren_stack_max_level_bottom = paren_stack_max_level\n\
    \        val paren_stack_max_level_bottom = paren_stack_max_level\n        val\
    \ paren_stack_max_level_bottom = paren_stack_max_level\n        val paren_stack_max_level_bottom\
    \ = paren_stack_max_level\n        val paren_stack_max_level_bottom = paren_stack_max_level\n\
    \        val paren_stack_max_level_bottom = paren_stack_max_level\n        val\
    \ paren_stack_max_level_bottom = paren_stack_max_level\n        val paren_stack_max_level_bottom\
    \ = paren_stack_max_level\n        val paren_stack_max_level_bottom = paren_stack_max_level\n\
    \        val paren_stack_max_level_bottom = paren_stack_max_level\n        val\
    \ paren_stack_max_level_bottom = paren_stack_max_level\n        val paren_stack_max_level_bottom\
    \ = paren_stack_max_level\n        val paren_stack_max_level_bottom = paren_stack_max_level\n\
    \        val paren_stack_max_level_bottom = paren_stack_max_level\n        val\
    \ paren_stack_max_level_bottom = paren_stack_max_level\n        val paren_stack_max_level_bottom\
    \ = paren_stack_max_level\n        val paren_stack_max_level_bottom = paren_stack_max_level\n\
    \        val paren_stack_max_level_bottom = paren_stack_max_level", "        val\
    \ paren_array = paren_string.split(\" \")\n        val paren_array_length = paren_array.length\n\
    \        val max_level = 0\n        var level = 0\n        var max_level_index\
    \ = 0\n        var paren_array_index = 0\n        var paren_array_element = \"\
    \"\n        var paren_array_element_count = 0\n        var paren_array_element_count_temp\
    \ = 0\n        var paren_array_element_count_temp2 = 0\n        var paren_array_element_count_temp3\
    \ = 0\n        var paren_array_element_count_temp4 = 0\n        var paren_array_element_count_temp5\
    \ = 0\n        var paren_array_element_count_temp6 = 0\n        var paren_array_element_count_temp7\
    \ = 0\n        var paren_array_element_count_temp8 = 0\n        var paren_array_element_count_temp9\
    \ = 0\n        var paren_array_element_count_temp10 = 0\n        var paren_array_element_count_temp11\
    \ = 0\n        var paren_array_element_count_temp12 = 0\n        var paren_array_element_count_temp13\
    \ = 0\n        var paren_array_element_count_temp14 = 0\n        var paren_array_element_count_temp15\
    \ = 0\n        var paren_array_element_count_temp16 = 0\n        var paren_array_element_count_temp17\
    \ = 0\n        var paren_array_element_count_temp18 = 0\n        var paren_array_element_count_temp19\
    \ = 0\n        var paren_array_element_count_temp20 = 0\n        var paren_array_element_count_temp21\
    \ = 0\n        var paren_array_element_count_temp22 = 0\n        var paren_array_element_count_temp23\
    \ = 0\n        var paren_array_element_count_temp24 = 0\n        var paren_array_element_count_temp25\
    \ = 0\n        var paren_array_element_count_temp26 = 0\n        var paren_array_element_count_temp27\
    \ = 0\n        var paren_array_element_count_temp28 = 0\n        var paren_array_element_count_temp29\
    \ = 0\n        var paren_array_element_count_temp30 = 0\n        var paren_array_element_count_temp31\
    \ = 0\n        var paren_array_element_count_temp32 = 0\n        var paren_array_element_count_temp33\
    \ = 0\n        var paren_array_element_count_temp34 = 0\n        var paren_array_element_count_temp35\
    \ = 0\n        var paren_array_element_count_temp36 = 0\n        var paren_array_element_count_temp37\
    \ = 0\n        var paren_array_element_count_temp38 = 0\n        var paren_array_element_count_temp39\
    \ = 0\n        var paren_array_element_count_temp40 = 0\n        var paren_array_element_count_temp41\
    \ = 0\n        var paren_array_element_count_temp42 = 0\n        var paren_array_element_count_temp43\
    \ = 0\n        var paren_array_element_count_temp44 = 0\n        var paren_array_element_count_temp45\
    \ = 0\n        var paren_array_element_", "        val paren_chars = paren_string.toCharArray\n\
    \        val paren_chars_size = paren_chars.length\n        val paren_chars_map\
    \ = mutable.Map[Char, Int]()\n        var paren_level = 0\n        var paren_level_max\
    \ = -1\n        var paren_level_max_index = 0\n        var paren_level_max_count\
    \ = 0\n        var paren_level_max_count_index = 0\n        var paren_level_max_count_count\
    \ = 0\n        var paren_level_max_count_index = 0\n        var paren_level_max_count_count_index\
    \ = 0\n        var paren_level_max_count_count_count_index = 0\n        var paren_level_max_count_count_count_index\
    \ = 0\n        var paren_level_max_count_count_count_count_index = 0\n       \
    \ var paren_level_max_count_count_count_count_count_index = 0\n        var paren_level_max_count_count_count_count_count_count_index\
    \ = 0\n        var paren_level_max_count_count_count_count_count_count_index =\
    \ 0\n        var paren_level_max_count_count_count_count_count_count_count_index\
    \ = 0\n        var paren_level_max_count_count_count_count_count_count_count_count_index\
    \ = 0\n        var paren_level_max_count_count_count_count_count_count_count_count_index\
    \ = 0\n        var paren_level_max_count_count_count_count_count_count_count_count_count_index\
    \ = 0\n        var paren_level_max_count_count_count_count_count_count_count_count_count_index\
    \ = 0\n        var paren_level_max_count_count_count_count_count_count_count_count_count_count_index\
    \ = 0\n        var paren_level_max_count_count_count_count_count_count_count_count_count_count_index\
    \ = 0\n        var paren_level_max_count_count_count_count_count_count_count_count_count_count_index\
    \ = 0\n        var paren_level_max_count_count_count_count_count_count_count_count_count_count_count_index\
    \ = 0\n        var paren_level_max_count_count_count_count_count_count_count_count_count_count_count_index\
    \ = 0\n        var paren_level_max_count_count_count_count_count_count_count_count_count_count_count_count_index\
    \ = 0\n        var paren_level_max_count_count_count_count_count_count_count_count_count_count_count_count_count_index\
    \ = 0\n        var paren_level_max_count_count_count_count_count_count_count_count_count_count_count_count_count_index\
    \ = 0\n        var paren_level_max_count_count_count_count_count_count_count_count_count_count_count_count_index\
    \ = 0\n        var paren_level_max_count_count_count_count_count_count_count_count_count_count_count_count_count_index\
    \ = 0\n        var paren_level_max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_index\
    \ = 0\n        var paren_level_max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_index\
    \ = 0\n        var paren_level_max_count_count_count_count_count_count_count_count_",
  "        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_size =\
    \ mutable.Stack[Long]()\n        val paren_stack_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_top\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top = mutable.Stack[Long]()\n        val paren_stack_top_top_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_size = mutable.Stack[Long]()\n      \
    \  val paren_stack_top_top_top_top_top = mutable.Stack[Long]()\n        val paren_stack_top_top_top_top_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_", "        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_queue = mutable.Queue[String]()\n        paren_queue.enqueue(paren_string)\n\
    \        paren_stack.push(paren_string)\n        val max_level = 0\n        while(!paren_queue.isEmpty)\
    \ {\n            val current_string = paren_queue.dequeue()\n            val current_level\
    \ = paren_stack.size\n            val current_level_parens = paren_stack.last.count('(')\n\
    \            val current_level_parantheses = paren_stack.last.count(')')\n   \
    \         val current_level_spaces = paren_stack.last.count(' ')\n           \
    \ val current_level_words = paren_stack.last.count(' ')\n            val current_level_words\
    \ = if (current_level_words == 0) 0 else current_level_words / current_level_parens\n\
    \            val current_level_words = if (current_level_words == 0) 0 else current_level_words\
    \ / current_level_spaces\n            val current_level_words = if (current_level_words\
    \ == 0) 0 else current_level_words / current_level_words\n            val current_level_words\
    \ = if (current_level_words == 0) 0 else current_level_words / current_level_parantheses\n\
    \            val current_level_words = if (current_level_words == 0) 0 else current_level_words\
    \ / current_level_parens\n            val current_level_words = if (current_level_words\
    \ == 0) 0 else current_level_words / current_level_spaces\n            val current_level_words\
    \ = if (current_level_words == 0) 0 else current_level_words / current_level_words\n\
    \            val current_level_words = if (current_level_words == 0) 0 else current_level_words\
    \ / current_level_parantheses\n            val current_level_words = if (current_level_words\
    \ == 0) 0 else current_level_words / current_level_parens\n            val current_level_words\
    \ = if (current_level_words == 0) 0 else current_level_words / current_level_spaces\n\
    \            val current_level_words = if (current_level_words == 0) 0 else current_level_words\
    \ / current_level_words\n            val current_level_words = if (current_level_words\
    \ == 0) 0 else current_level_words / current_level_parantheses\n            val\
    \ current_level_words = if (current_level_words == 0) 0 else current_level_words\
    \ / current_level_parens\n            val current_level_words = if (current_level_words\
    \ == 0) 0 else current_level_words / current_level_spaces\n            val current_level_words\
    \ = if (current_level_words == 0) 0 else current_level_words / current_level_words\n\
    \            val current_level_words = if (current_level_words == 0) 0 else current_level_words\
    \ / current_level_parantheses\n            val current_level_words = if (current_level_words\
    \ == 0) 0 else current_level_words / current_level_parens\n            val current_level_words\
    \ = if (current_level_words == ", "        val paren_array = paren_string.split(\"\
    \ \")\n        val paren_array_size = paren_array.length\n        val paren_array_max_size\
    \ = paren_array_size - 1\n        val paren_array_max_index = paren_array_size\
    \ - 1\n        val paren_array_max_value = paren_array_max_index.toLong\n    \
    \    val paren_array_max_value_plus_one = paren_array_max_value + 1\n        val\
    \ paren_array_max_value_minus_one = paren_array_max_value - 1\n        val paren_array_max_value_minus_two\
    \ = paren_array_max_value - 2\n        val paren_array_max_value_minus_three =\
    \ paren_array_max_value - 3\n        val paren_array_max_value_minus_four = paren_array_max_value\
    \ - 4\n        val paren_array_max_value_minus_five = paren_array_max_value -\
    \ 5\n        val paren_array_max_value_minus_six = paren_array_max_value - 6\n\
    \        val paren_array_max_value_minus_seven = paren_array_max_value - 7\n \
    \       val paren_array_max_value_minus_eight = paren_array_max_value - 8\n  \
    \      val paren_array_max_value_minus_nine = paren_array_max_value - 9\n    \
    \    val paren_array_max_value_minus_ten = paren_array_max_value - 10\n      \
    \  val paren_array_max_value_minus_eleven = paren_array_max_value - 11\n     \
    \   val paren_array_max_value_minus_twelve = paren_array_max_value - 12\n    \
    \    val paren_array_max_value_minus_thirteen = paren_array_max_value - 13\n \
    \       val paren_array_max_value_minus_fourteen = paren_array_max_value - 14\n\
    \        val paren_array_max_value_minus_fifteen = paren_array_max_value - 15\n\
    \        val paren_array_max_value_minus_sixteen = paren_array_max_value - 16\n\
    \        val paren_array_max_value_minus_seventeen = paren_array_max_value - 17\n\
    \        val paren_array_max_value_minus_eighteen = paren_array_max_value - 18\n\
    \        val paren_array_max_value_minus_nineteen = paren_array_max_value - 19\n\
    \        val paren_array_max_value_minus_twenty = paren_array_max_value - 20\n\
    \        val paren_array_max_value_minus_twenty_one = paren_array_max_value -\
    \ 21\n        val paren_array_max_value_minus_twenty_two = ", "        val paren_stack\
    \ = mutable.Stack[String]()\n        val paren_stack_size = mutable.Stack[Long]()\n\
    \        val paren_stack_level = mutable.Stack[Long]()\n        val paren_stack_level_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_size = mutable.Stack[Long]()\n\
    \        val paren_stack_level_max_size_stack = mutable.Stack[Long]()\n      \
    \  val paren_stack_level_max_size_stack_size =\n            mutable.Stack[Long]()\n\
    \        val paren_stack_level_max_size_stack_size_size =\n            mutable.Stack[Long]()\n\
    \        val paren_stack_level_max_size_stack_size_level =\n            mutable.Stack[Long]()\n\
    \        val paren_stack_level_max_size_stack_size_level_size =\n            mutable.Stack[Long]()\n\
    \        val paren_stack_level_max_size_stack_size_level_max_size =\n        \
    \    mutable.Stack[Long]()\n        val paren_stack_level_max_size_stack_size_level_max_size_stack\
    \ =\n            mutable.Stack[Long]()\n        val paren_stack_level_max_size_stack_size_level_max_size_stack_size\
    \ =\n            mutable.Stack[Long]()\n        val paren_stack_level_max_size_stack_size_level_max_size_stack_size_level\
    \ =\n            mutable.Stack[Long]()\n        val paren_stack_level_max_size_stack_size_level_max_size_stack_size_level_size\
    \ =\n            mutable.Stack[Long]()\n        val paren_stack_level_max_size_stack_size_level_max_size_stack_size_level_max_size\
    \ =\n            mutable.Stack[Long]()\n        val paren_stack_level_max_size_stack_size_level_max_size_stack_size_level_max_size_stack\
    \ =\n            mutable.Stack[Long]()\n        val paren_stack_level_max_size_stack_size_level_max_size_stack_size_level_max_size_stack_size\
    \ =\n            mutable.Stack[Long]()\n        val paren_stack_level_max_size_stack_size_level_max_size_stack_size_level_max_size_stack_size_level\
    \ =\n            mutable.Stack[Long]()\n        val paren_stack_level_max_size_stack_size_level_max_size_stack_size_level_max_size_stack_size_level_size\
    \ =\n            mutable.Stack[Long]()\n        val paren_stack_level_max_size_stack_size_level_max_size_stack_size_level_max_size_stack_size_level_max_size\
    \ =\n            mutable.Stack[Long]()\n        val paren_stack_level_max_size_stack_size_level_max_size_stack",
  "        val paren_stack = mutable.Stack[String]()\n        val paren_stack_map\
    \ = mutable.Map[String, List[Long]]()\n        paren_string.split(\"\\\\s+\").foreach(x\
    \ => {\n            val paren_str = x.trim()\n            val paren_len = paren_str.length\n\
    \            if (paren_str.length == 0) return\n            if (paren_stack.nonEmpty)\
    \ {\n                paren_stack.last.substring(paren_len - 1).trim() match {\n\
    \                    case \"()\" => paren_stack_map.put(paren_stack.last, List(0))\n\
    \                    case \"()()\" => paren_stack_map.put(paren_stack.last, List(0))\n\
    \                    case \"(())\" => paren_stack_map.put(paren_stack.last, List(0))\n\
    \                    case \"(()())\" => paren_stack_map.put(paren_stack.last,\
    \ List(0))\n                    case \"(())()\" => paren_stack_map.put(paren_stack.last,\
    \ List(0))\n                    case \"(()())()\" => paren_stack_map.put(paren_stack.last,\
    \ List(0))\n                    case \"(())()()\" => paren_stack_map.put(paren_stack.last,\
    \ List(0))\n                    case \"(())()()()\" => paren_stack_map.put(paren_stack.last,\
    \ List(0))\n                    case \"(())()()()()\" => paren_stack_map.put(paren_stack.last,\
    \ List(0))\n                    case \"(())()()()()()\" => paren_stack_map.put(paren_stack.last,\
    \ List(0))\n                    case \"(())()()()()()()\" => paren_stack_map.put(paren_stack.last,\
    \ List(0))\n                    case \"(())()()()()()()()\" => paren_stack_map.put(paren_stack.last,\
    \ List(0))\n                    case \"(())()()()()()()()()\" => paren_stack_map.put(paren_stack.last,\
    \ List(0))\n                    case \"(())()()()()()()()()()\" => paren_stack_map.put(paren_stack.last,\
    \ List(0))\n                    case \"(())()()()()()()()()()\" => paren_stack_map.put(paren_stack.last,\
    \ List(0))\n                    case \"(())()()()()()()()()()()\" => paren_stack_map.put(paren_stack.last,\
    \ List(0))\n                    case \"(())()()()()()()()()()()\" => paren_stack_map.put(paren_stack.last,\
    \ List(0))\n                    case \"(())()()()()()()()()()()()\" => paren_",
  "        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_map =\
    \ mutable.Map[Long, Long]()\n        val paren_stack_map_keys = mutable.Set[Long]()\n\
    \        val paren_stack_map_values = mutable.Set[Long]()\n        val paren_stack_map_values_set\
    \ = mutable.Set[Long]()\n        val paren_stack_map_values_set_size = mutable.Set[Long]()\n\
    \        val paren_stack_map_values_set_size = mutable.Set[Long]()\n        val\
    \ paren_stack_map_values_set_size = mutable.Set[Long]()\n        val paren_stack_map_values_set_size\
    \ = mutable.Set[Long]()\n        val paren_stack_map_values_set_size = mutable.Set[Long]()\n\
    \        val paren_stack_map_values_set_size = mutable.Set[Long]()\n        val\
    \ paren_stack_map_values_set_size = mutable.Set[Long]()\n        val paren_stack_map_values_set_size\
    \ = mutable.Set[Long]()\n        val paren_stack_map_values_set_size = mutable.Set[Long]()\n\
    \        val paren_stack_map_values_set_size = mutable.Set[Long]()\n        val\
    \ paren_stack_map_values_set_size = mutable.Set[Long]()\n        val paren_stack_map_values_set_size\
    \ = mutable.Set[Long]()\n        val paren_stack_map_values_set_size = mutable.Set[Long]()\n\
    \        val paren_stack_map_values_set_size = mutable.Set[Long]()\n        val\
    \ paren_stack_map_values_set_size = mutable.Set[Long]()\n        val paren_stack_map_values_set_size\
    \ = mutable.Set[Long]()\n        val paren_stack_map_values_set_size = mutable.Set[Long]()\n\
    \        val paren_stack_map_values_set_size = mutable.Set[Long]()\n        val\
    \ paren_stack_map_values_set_size = mutable.Set[Long]()\n        val paren_stack_map_values_set_size\
    \ = mutable.Set[Long]()\n        val paren_stack_map_values_set_size = mutable.Set[Long]()\n\
    \        val paren_stack_map_values_set_size = mutable.Set[Long]()\n        val\
    \ paren_stack_map_values_set_size = mutable.Set[Long]()\n        val paren_stack_map_values_set_size\
    \ = mutable.Set[Long]()\n        val paren_stack_map_values_set_size = mutable.Set[Long]()\n\
    \        val paren_stack_map_values_set_size = mutable.Set", "        val paren_stack\
    \ = mutable.Stack[String]()\n        val paren_stack_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_size = mutable.Stack[Long]()\n        val paren_stack_max_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_", "        val paren_array = paren_string.split(\" \"\
    )\n        val paren_array_size = paren_array.length\n        val max_level =\
    \ 0\n        var level = 0\n        var paren_count = 0\n        var paren_level\
    \ = 0\n        var paren_level_array = new Array[Long](paren_array_size)\n   \
    \     var paren_level_array_index = 0\n        var paren_level_array_size = 0\n\
    \        var paren_level_array_index = 0\n        var paren_level_array_size =\
    \ 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0", "        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_max_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_size = mutable.Stack[Long]()\n  \
    \      val paren_stack_max_depth_pos_depth_depth = mutable.Stack[Long]()\n   \
    \     val paren_stack_max_depth_pos_depth_depth_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_depth_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_depth_depth_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_depth_depth_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_depth_depth_depth_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth_depth_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth_depth_depth_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_", "        val paren_array\
    \ = paren_string.split(\" \").toList\n        val paren_array_size = paren_array.length\n\
    \        val paren_array_max_size = paren_array_size - 1\n        val paren_array_max_size_array\
    \ = paren_array.take(paren_array_max_size).toList\n        val paren_array_max_size_array_size\
    \ = paren_array_max_size_array.length\n        val paren_array_max_size_array_max_size\
    \ = paren_array_max_size_array_size - 1\n        val paren_array_max_size_array_max_size_array\
    \ = paren_array_max_size_array_array.take(paren_array_max_size_array_max_size).toList\n\
    \        val paren_array_max_size_array_max_size_array_size = paren_array_max_size_array_max_size_array.length\n\
    \        val paren_array_max_size_array_max_size_array_max_size = paren_array_max_size_array_max_size_array_max_size\
    \ - 1\n        val paren_array_max_size_array_max_size_array_max_size_array =\
    \ paren_array_max_size_array_max_size_array_max_size_array.take(paren_array_max_size_array_max_size_array_max_size).toList\n\
    \        val paren_array_max_size_array_max_size_array_max_size_array_size = paren_array_max_size_array_max_size_array_max_size_array_size\
    \ - 1\n        val paren_array_max_size_array_max_size_array_max_size_array_max_size\
    \ = paren_array_max_size_array_max_size_array_max_size_array_max_size - 1\n  \
    \      val paren_array_max_size_array_max_size_array_max_size_array_max_size_array\
    \ = paren_array_max_size_array_max_size_array_max_size_array_max_size_array.take(paren_array_max_size_array_max_size_array_max_size_array_max_size).toList\n\
    \        val paren_array_max_size_array_max_size_array_max_size_array_max_size_array_size\
    \ = paren_array_max_size_array_max_size_array_max_size_array_max_size_array_size\
    \ - 1\n        val paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size\
    \ = paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size\
    \ - 1\n        val paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size\
    \ = paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size\
    \ - 1\n        val paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size\
    \ = paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size\
    \ - 1\n        val paren_array_max_size_array_max_size_array_max_size_array_max_size_",
  "        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_len =\
    \ mutable.Stack[Long]()\n        val paren_stack_len_len = mutable.Stack[Long]()\n\
    \        val paren_stack_len_len_len = mutable.Stack[Long]()\n        val paren_stack_len_len_len_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_len_len_len_len = mutable.Stack[Long]()\n\
    \        val paren_stack_len_len_len_len_len_len = mutable.Stack[Long]()\n   \
    \     val paren_stack_len_len_len_len_len_len_len = mutable.Stack[Long]()\n  \
    \      val paren_stack_len_len_len_len_len_len_len_len = mutable.Stack[Long]()\n\
    \        val paren_stack_len_len_len_len_len_len_len_len_len_len = mutable.Stack[Long]()\n\
    \        val paren_stack_len_len_len_len_len_len_len_len_len_len_len = mutable.Stack[Long]()\n\
    \        val paren_stack_len_len_len_len_len_len_len_len_len_len_len_len = mutable.Stack[Long]()\n\
    \        val paren_stack_len_len_len_len_len_len_len_len_len_len_len_len_len =\
    \ mutable.Stack[Long]()\n        val paren_stack_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_", "        val paren_stack\
    \ = mutable.Stack[Long]()\n        val paren_stack_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_size = mutable.Stack[Long]()\n        val paren_stack_max_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_size = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_depth_pos_depth = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_pos\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_pos_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_pos_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_pos_depth_pos\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_pos_depth_pos_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_pos_depth_pos_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_pos_depth_pos_depth_pos\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_pos_depth_pos_depth_pos_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_pos_depth_pos_depth_pos_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_pos_depth_pos_depth_pos_depth_pos\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_pos_depth_pos_depth_pos_depth_pos_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_pos_depth_pos_depth_pos_depth_pos_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_pos_depth_pos_depth_pos_depth_pos_depth_pos_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_pos_depth_pos_depth_pos_depth_pos_depth_pos_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_pos_depth_pos_depth_pos_depth_pos_depth_pos_depth_pos\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_pos_depth_pos_depth_pos_depth_pos_depth_pos_depth_pos_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_pos_depth_pos_depth_pos_depth_pos_depth_pos_depth_pos_depth\
    \ = mutable.Stack[", "        val paren_chars = paren_string.split(\"\"\"[\\(\\\
    )]\"\"\").toList\n        val paren_chars_size = paren_chars.size\n        val\
    \ paren_chars_map = paren_chars.map(x => x.toLong).toMap\n        val paren_chars_map_size\
    \ = paren_chars_map.size\n        val paren_chars_map_keys = paren_chars_map.keys\n\
    \        val paren_chars_map_values = paren_chars_map.values\n        val paren_chars_map_values_size\
    \ = paren_chars_map_values.size\n        val paren_chars_map_values_keys = paren_chars_map_values.keys\n\
    \        val paren_chars_map_values_values_size = paren_chars_map_values_values.size\n\
    \        val paren_chars_map_values_values_keys = paren_chars_map_values_values.keys\n\
    \        val paren_chars_map_values_values_values_size = paren_chars_map_values_values_values.size\n\
    \        val paren_chars_map_values_values_values_keys = paren_chars_map_values_values_values.keys\n\
    \        val paren_chars_map_values_values_values_values_size = paren_chars_map_values_values_values_values.size\n\
    \        val paren_chars_map_values_values_values_values_keys = paren_chars_map_values_values_values_values.keys\n\
    \        val paren_chars_map_values_values_values_values_values_size = paren_chars_map_values_values_values_values_values.size\n\
    \        val paren_chars_map_values_values_values_values_values_keys = paren_chars_map_values_values_values_values_values.keys\n\
    \        val paren_chars_map_values_values_values_values_values_values_size =\
    \ paren_chars_map_values_values_values_values_values_values.size\n        val\
    \ paren_chars_map_values_values_values_values_values_values_keys = paren_chars_map_values_values_values_values_values_values.keys\n\
    \        val paren_chars_map_values_values_values_values_values_values_values_size\
    \ = paren_chars_map_values_values_values_values_values_values_values.size\n  \
    \      val paren_chars_map_values_values_values_values_values_values_values_keys\
    \ = paren_chars_map_values_values_values_values_values_values_values.keys\n  \
    \      val paren_chars_map_values_values_values_values_values_values_values_values_size\
    \ = paren_chars_map_values_values_values_values_values_values_values_values.size\n\
    \        val paren_chars_map_values_values_values_values_values_values_values_values_keys\
    \ = paren_chars_map_values_values_values_values_values_values_values_values.keys\n\
    \        val paren_chars_map_values_values_values_values_values_values_values_values_values_size\
    \ = paren_chars_map_values_values_values_values_values_values_values_values_values.size\n",
  "        val paren_array = paren_string.split(\" \")\n        val max_level = 0\n\
    \        val max_levels = mutable.ArrayBuffer.empty[Long]\n        for (i <- 0\
    \ until paren_array.length) {\n            val levels = paren_array(i).count('(')\
    \ - paren_array(i).count(')')\n            if (levels > max_level) {\n       \
    \         max_level = levels\n                max_levels += levels\n         \
    \   }\n        }\n        max_levels.toList", "        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_top = mutable.Stack[String]()\n        val paren_stack_bottom\
    \ = mutable.Stack[String]()\n        val paren_stack_top = paren_stack_bottom.push(paren_string)\n\
    \        val paren_stack_bottom = paren_stack_top.reverse\n        val paren_stack_top\
    \ = paren_stack_top.reverse\n        val paren_stack_bottom = paren_stack_bottom.reverse\n\
    \        val paren_stack_top = paren_stack_top.reverse\n        val paren_stack_bottom\
    \ = paren_stack_bottom.reverse\n        val paren_stack_top = paren_stack_top.reverse\n\
    \        val paren_stack_bottom = paren_stack_bottom.reverse\n        val paren_stack_top\
    \ = paren_stack_top.reverse\n        val paren_stack_bottom = paren_stack_bottom.reverse\n\
    \        val paren_stack_top = paren_stack_top.reverse\n        val paren_stack_bottom\
    \ = paren_stack_bottom.reverse\n        val paren_stack_top = paren_stack_top.reverse\n\
    \        val paren_stack_bottom = paren_stack_bottom.reverse\n        val paren_stack_top\
    \ = paren_stack_top.reverse\n        val paren_stack_bottom = paren_stack_bottom.reverse\n\
    \        val paren_stack_top = paren_stack_top.reverse\n        val paren_stack_bottom\
    \ = paren_stack_bottom.reverse\n        val paren_stack_top = paren_stack_top.reverse\n\
    \        val paren_stack_bottom = paren_stack_bottom.reverse\n        val paren_stack_top\
    \ = paren_stack_top.reverse\n        val paren_stack_bottom = paren_stack_bottom.reverse\n\
    \        val paren_stack_top = paren_stack_top.reverse\n        val paren_stack_bottom\
    \ = paren_stack_bottom.reverse\n        val paren_stack_top = paren_stack_top.reverse\n\
    \        val paren_stack_bottom = paren_stack_bottom.reverse\n        val paren_stack_top\
    \ = paren_stack_top.reverse\n        val paren_stack_bottom = paren_stack_bottom.reverse\n\
    \        val paren_stack_top = paren_stack_top.reverse\n        val paren_stack_bottom\
    \ = paren_stack_bottom.reverse\n        val paren_stack_top = paren_stack_top.reverse\n\
    \        val paren_stack_bottom = paren_stack_bottom.reverse\n        val paren_stack_top\
    \ = paren_stack_top.reverse\n        val paren_stack_bottom = paren_stack_bottom.reverse\n\
    \        val paren_stack_top = paren_stack_top.reverse\n        val paren_stack_bottom\
    \ = paren_stack_bottom.", "        val paren_stack = mutable.Stack[Long]()\n \
    \       val paren_stack_map = mutable.Map[Long, Long]()\n        val paren_stack_map_size\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_size_max = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_size_max_size = mutable.Map[Long, Long]()\n\
    \        val paren_stack_map_size_max_size_value = mutable.Map[Long, Long]()\n\
    \        val paren_stack_map_size_max_size_value_size = mutable.Map[Long, Long]()\n\
    \        val paren_stack_map_size_max_size_value_size_value = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_size_max_size_value_size_value_size = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_size_max_size_value_size_value_size_max\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_size_max_size_value_size_value_size_max_size\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_size_max_size_value_size_value_size_max_size_value\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_size_max_size_value_size_value_size_max_size_value_size\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_size_max_size_value_size_value_size_max_size_value_size_value\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_size_max_size_value_size_value_size_max_size_value_size_value_size\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_size_max_size_value_size_value_size_max_size_value_size_value_size_max\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_size_max_size_value_size_value_size_max_size_value_size_value_size_max_size\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_size_max_size_value_size_value_size_max_size_value_size_value_size_max_size_value\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_size_max_size_value_size_value_size_max_size_value_size_value_size_max_size_value_size\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_size_max_size_value_size_value_size_max_size_value_size_value_size_max_size_value_size_value\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_size_max_size_value_size_value_size_max_size_value_size_value_size_max_size_value_size_value_size\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_size_max_", "     \
    \   val paren_groups = paren_string.split(\" \")\n        val max_level = 0\n\
    \        val max_levels = mutable.ArrayBuffer.empty[Long]\n        for (paren_group\
    \ <- paren_groups) {\n            val paren_group_levels = paren_group.split(\"\
    \\\\(\").map(x => x.split(\"\\\\)\").length)\n            if (paren_group_levels.max\
    \ > max_level) {\n                max_level = paren_group_levels.max\n       \
    \         max_levels += paren_group_levels.max\n            }\n        }\n   \
    \     max_levels"]
stop_tokens:
- "\n    }\n"
