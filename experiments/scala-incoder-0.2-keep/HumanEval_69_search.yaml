name: HumanEval_69_search
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a non-empty list of positive integers. Return the greatest\
  \ integer that is greater than \n    // zero, and has a frequency greater than or\
  \ equal to the value of the integer itself. \n    // The frequency of an integer\
  \ is the number of times it appears in the list.\n    // If no such a value exist,\
  \ return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1]) == 2\n    // search([1,\
  \ 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5, 4, 4, 4]) == -1\n    def search(lst\
  \ : List[Long]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](5l.toLong,\
  \ 5l.toLong, 5l.toLong, 5l.toLong, 1l.toLong))) == (1l));\n    assert(search((List[Long](4l.toLong,\
  \ 1l.toLong, 4l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))) == (4l));\n    assert(search((List[Long](3l.toLong,\
  \ 3l.toLong))) == (-1l));\n    assert(search((List[Long](8l.toLong, 8l.toLong, 8l.toLong,\
  \ 8l.toLong, 8l.toLong, 8l.toLong, 8l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](2l.toLong,\
  \ 3l.toLong, 3l.toLong, 2l.toLong, 2l.toLong))) == (2l));\n    assert(search((List[Long](2l.toLong,\
  \ 7l.toLong, 8l.toLong, 8l.toLong, 4l.toLong, 8l.toLong, 7l.toLong, 3l.toLong, 9l.toLong,\
  \ 6l.toLong, 5l.toLong, 10l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong,\
  \ 1l.toLong, 7l.toLong, 4l.toLong, 10l.toLong, 8l.toLong, 1l.toLong))) == (1l));\n\
  \    assert(search((List[Long](3l.toLong, 2l.toLong, 8l.toLong, 2l.toLong))) ==\
  \ (2l));\n    assert(search((List[Long](6l.toLong, 7l.toLong, 1l.toLong, 8l.toLong,\
  \ 8l.toLong, 10l.toLong, 5l.toLong, 8l.toLong, 5l.toLong, 3l.toLong, 10l.toLong)))\
  \ == (1l));\n    assert(search((List[Long](8l.toLong, 8l.toLong, 3l.toLong, 6l.toLong,\
  \ 5l.toLong, 6l.toLong, 4l.toLong))) == (-1l));\n    assert(search((List[Long](6l.toLong,\
  \ 9l.toLong, 6l.toLong, 7l.toLong, 1l.toLong, 4l.toLong, 7l.toLong, 1l.toLong, 8l.toLong,\
  \ 8l.toLong, 9l.toLong, 8l.toLong, 10l.toLong, 10l.toLong, 8l.toLong, 4l.toLong,\
  \ 10l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 2l.toLong, 9l.toLong, 5l.toLong,\
  \ 7l.toLong, 9l.toLong))) == (1l));\n    assert(search((List[Long](1l.toLong, 9l.toLong,\
  \ 10l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(search((List[Long](6l.toLong,\
  \ 9l.toLong, 7l.toLong, 5l.toLong, 8l.toLong, 7l.toLong, 5l.toLong, 3l.toLong, 7l.toLong,\
  \ 5l.toLong, 10l.toLong, 10l.toLong, 3l.toLong, 6l.toLong, 10l.toLong, 2l.toLong,\
  \ 8l.toLong, 6l.toLong, 5l.toLong, 4l.toLong, 9l.toLong, 5l.toLong, 3l.toLong, 10l.toLong)))\
  \ == (5l));\n    assert(search((List[Long](1l.toLong))) == (1l));\n    assert(search((List[Long](8l.toLong,\
  \ 8l.toLong, 10l.toLong, 6l.toLong, 4l.toLong, 3l.toLong, 5l.toLong, 8l.toLong,\
  \ 2l.toLong, 4l.toLong, 2l.toLong, 8l.toLong, 4l.toLong, 6l.toLong, 10l.toLong,\
  \ 4l.toLong, 2l.toLong, 1l.toLong, 10l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
  \ 5l.toLong))) == (4l));\n    assert(search((List[Long](2l.toLong, 10l.toLong, 4l.toLong,\
  \ 8l.toLong, 2l.toLong, 10l.toLong, 5l.toLong, 1l.toLong, 2l.toLong, 9l.toLong,\
  \ 5l.toLong, 5l.toLong, 6l.toLong, 3l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 10l.toLong)))\
  \ == (2l));\n    assert(search((List[Long](1l.toLong, 6l.toLong, 10l.toLong, 1l.toLong,\
  \ 6l.toLong, 9l.toLong, 10l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 7l.toLong,\
  \ 3l.toLong))) == (1l));\n    assert(search((List[Long](9l.toLong, 2l.toLong, 4l.toLong,\
  \ 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong, 2l.toLong, 5l.toLong, 7l.toLong, 7l.toLong,\
  \ 7l.toLong, 3l.toLong, 10l.toLong, 1l.toLong, 5l.toLong, 4l.toLong, 2l.toLong,\
  \ 8l.toLong, 4l.toLong, 1l.toLong, 9l.toLong, 10l.toLong, 7l.toLong, 10l.toLong,\
  \ 2l.toLong, 8l.toLong, 10l.toLong, 9l.toLong, 4l.toLong))) == (4l));\n    assert(search((List[Long](2l.toLong,\
  \ 6l.toLong, 4l.toLong, 2l.toLong, 8l.toLong, 7l.toLong, 5l.toLong, 6l.toLong, 4l.toLong,\
  \ 10l.toLong, 4l.toLong, 6l.toLong, 3l.toLong, 7l.toLong, 8l.toLong, 8l.toLong,\
  \ 3l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 2l.toLong, 10l.toLong, 7l.toLong)))\
  \ == (4l));\n    assert(search((List[Long](9l.toLong, 8l.toLong, 6l.toLong, 10l.toLong,\
  \ 2l.toLong, 6l.toLong, 10l.toLong, 2l.toLong, 7l.toLong, 8l.toLong, 10l.toLong,\
  \ 3l.toLong, 8l.toLong, 2l.toLong, 6l.toLong, 2l.toLong, 3l.toLong, 1l.toLong)))\
  \ == (2l));\n    assert(search((List[Long](5l.toLong, 5l.toLong, 3l.toLong, 9l.toLong,\
  \ 5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong, 8l.toLong, 5l.toLong, 6l.toLong, 10l.toLong,\
  \ 10l.toLong, 6l.toLong, 8l.toLong, 4l.toLong, 10l.toLong, 7l.toLong, 7l.toLong,\
  \ 10l.toLong, 8l.toLong))) == (-1l));\n    assert(search((List[Long](10l.toLong)))\
  \ == (-1l));\n    assert(search((List[Long](9l.toLong, 7l.toLong, 7l.toLong, 2l.toLong,\
  \ 4l.toLong, 7l.toLong, 2l.toLong, 10l.toLong, 9l.toLong, 7l.toLong, 5l.toLong,\
  \ 7l.toLong, 2l.toLong))) == (2l));\n    assert(search((List[Long](5l.toLong, 4l.toLong,\
  \ 10l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 10l.toLong, 3l.toLong, 6l.toLong,\
  \ 1l.toLong, 8l.toLong))) == (1l));\n    assert(search((List[Long](7l.toLong, 9l.toLong,\
  \ 9l.toLong, 9l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 1l.toLong,\
  \ 2l.toLong, 1l.toLong, 1l.toLong, 10l.toLong, 7l.toLong, 5l.toLong, 6l.toLong,\
  \ 7l.toLong, 6l.toLong, 7l.toLong, 7l.toLong, 6l.toLong))) == (1l));\n    assert(search((List[Long](3l.toLong,\
  \ 10l.toLong, 10l.toLong, 9l.toLong, 2l.toLong))) == (-1l));\n    }\n\n}\n"
completions: ["        var max = 0L\n        var freq = 0L\n        var i = 0\n  \
    \      while (i < lst.length) {\n            if (lst(i) > 0) {\n             \
    \   freq += 1\n                if (freq > lst(i)) {\n                    max =\
    \ lst(i)\n                }\n            }\n            i += 1\n        }\n  \
    \      if (max < 0) {\n            return -1\n        }\n        return max",
  "        val freq = mutable.HashMap[Long, Int]()\n        for (i <- lst) {\n   \
    \         freq += i -> freq.getOrElse(i, 0) + 1\n        }\n        val max =\
    \ freq.maxBy(_._2)._1\n        val maxFreq = freq.maxBy(_._2)._2\n        if (maxFreq\
    \ >= max) {\n            max\n        } else {\n            -1\n        }", " \
    \       val freq = mutable.Map[Long, Int]()\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0) + 1)\n        val max = freq.maxBy(_._2)._1\n    \
    \    if (max > 0) max else -1", "        val freq = mutable.Map[Long, Int]()\n\
    \        val max = mutable.Map[Long, Long]()\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0) + 1)\n        lst.foreach(x => max += x -> lst.count(_\
    \ == x))\n        max.max.map(_._1).getOrElse(-1)", "        val freq = mutable.Map[Long,\
    \ Int]()\n        for (i <- 0 until lst.length) {\n            freq += (lst(i)\
    \ -> freq(lst(i))+1)\n        }\n        val max = freq.maxBy(_._2)._1\n     \
    \   if (max > 0) max else -1", "        val freq = mutable.HashMap[Long, Int]()\n\
    \        for (i <- lst) {\n            if (freq.contains(i)) {\n             \
    \   freq(i) += 1\n            } else {\n                freq.put(i, 1)\n     \
    \       }\n        }\n        val max = freq.maxBy(_._2)\n        if (max._2 >=\
    \ freq(max._1)) {\n            return max._1\n        } else {\n            return\
    \ -1\n        }", "        val freq = mutable.HashMap[Long, Int]()\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0) + 1)\n        val max = freq.maxBy(_._2)._1\n\
    \        if (max > 0) max else -1", "        val freq = mutable.Map[Long, Int]()\n\
    \        for (i <- 0 until lst.length) {\n            freq += (lst(i) -> freq.getOrElse(lst(i),\
    \ 0) + 1)\n        }\n        val maxFreq = freq.maxBy(_._2)\n        if (maxFreq._2\
    \ >= 0) {\n            return maxFreq._1\n        } else {\n            return\
    \ -1\n        }", "        val freq = mutable.HashMap.empty[Long, Int]\n     \
    \   for(i <- lst) freq += i -> freq.getOrElse(i, 0) + 1\n        val max = freq.maxBy(_._2)._1\n\
    \        if(max > 0) max else -1", "        val freq = mutable.Map[Long, Int]()\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1)\n        val\
    \ max = freq.maxBy(_._2)._1\n        if (max >= freq.maxBy(_._1)._1) -1\n    \
    \    else max", "        var max = 0\n        var maxIndex = 0\n        var maxFreq\
    \ = 0\n        for (i <- 0 until lst.size) {\n            val freq = lst.count(_\
    \ == lst(i))\n            if (freq > maxFreq) {\n                max = lst(i)\n\
    \                maxIndex = i\n                maxFreq = freq\n            }\n\
    \        }\n        if (maxFreq > 0) {\n            return max\n        } else\
    \ {\n            return -1\n        }", "        val freq = mutable.Map[Long,\
    \ Int]()\n        val max = -1L\n        lst.foreach{x => freq += x -> freq.getOrElse(x,\
    \ 0)}\n        lst.foreach{x => if (freq.getOrElse(x, 0) > max) max = freq.getOrElse(x,\
    \ 0)}\n        max", "        val freq = mutable.HashMap[Long, Int]()\n      \
    \  lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1L)\n        val max =\
    \ freq.maxBy(_._2)\n        if (max._2 >= freq.size)\n            -1\n       \
    \ else\n            max._1", "        val freq = mutable.HashMap[Long, Int]()\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1)\n        val\
    \ max = freq.maxBy(_._2)._1\n        if (max >= 0) max else -1", "        var\
    \ max = 0\n        var maxCount = 0\n        var maxFreq = 0\n        for(i <-\
    \ 0 until lst.size) {\n            val freq = lst.count(_ == lst(i))\n       \
    \     if(freq > maxFreq) {\n                max = lst(i)\n                maxCount\
    \ = freq\n                maxFreq = freq\n            }\n        }\n        if(maxCount\
    \ == 0) {\n            return -1\n        }\n        return max", "        val\
    \ freq = mutable.Map[Long, Int]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0) + 1)\n        val max = freq.maxBy(_._2)._1\n        if (max > 0) max else\
    \ -1", "        val freq = mutable.HashMap.empty[Long, Int]\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0) + 1)\n        val max = freq.maxBy(_._2)._1\n\
    \        if (max > 0) max else -1", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        val max = mutable.Long.MinValue\n        lst.foreach(x => freq\
    \ += x -> freq.getOrElse(x, 0) + 1)\n        lst.foreach(x => if (freq.getOrElse(x,\
    \ 0) > max) max = freq.getOrElse(x, 0))\n        if (max > 0) max else -1", " \
    \       val freq = mutable.Map[Long, Int]()\n        lst.foreach(x => freq +=\
    \ (x -> freq.getOrElse(x, 0) + 1L))\n        val max = freq.maxBy(_._2)._1\n \
    \       if (max > 0) max else -1", "        val freq = mutable.Map[Long, Int]()\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1)\n        val\
    \ max = freq.maxBy(_._2)._1\n        if (max >= freq.maxBy(_._1)._1) -1 else max",
  "        val freq = mutable.Map[Long, Int]()\n        for (i <- lst) {\n       \
    \     freq += i -> freq.getOrElse(i, 0) + 1\n        }\n        val max = freq.maxBy(_._2)\n\
    \        if (max != 0) {\n            freq.filter(_._2 >= max._2).maxBy(_._1)._1\n\
    \        } else {\n            -1\n        }", "        val freq = mutable.HashMap[Long,\
    \ Int]()\n        lst.foreach(x => freq += (x -> freq.getOrElse(x, 0) + 1))\n\
    \        val max = freq.maxBy(_._2)._1\n        if (max > 0) max else -1", " \
    \       val freq = mutable.HashMap[Long, Int]()\n        val max = mutable.Long.MinValue\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1)\n        lst.foreach(x\
    \ => if (freq.getOrElse(x, 0) >= max) max = freq.getOrElse(x, 0))\n        if\
    \ (max > 0) max else -1", "        val freq = mutable.HashMap[Long, Int]()\n \
    \       lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1L)\n        val\
    \ maxFreq = freq.maxBy(_._2)\n        if(maxFreq._2 >= freq.size)\n          \
    \  return -1\n        val maxKey = freq.keys.max\n        if(maxKey == 0)\n  \
    \          return -1\n        val maxValue = freq(maxKey)\n        if(maxValue\
    \ >= maxFreq)\n            return maxKey\n        else\n            return -1",
  "        val freq = mutable.HashMap[Long, Int]()\n        val max = mutable.Long.MinValue\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1)\n        lst.foreach(x\
    \ => if (freq.getOrElse(x, 0) >= x) max = Math.max(max, x))\n        if (max >\
    \ 0) max else -1", "        var max = 0\n        var maxCount = 0\n        var\
    \ maxFreq = 0\n        for(i <- 0 until lst.length){\n            val freq = lst(i).toLong\n\
    \            val count = lst(i).toLong\n            if(freq >= maxFreq){\n   \
    \             max = lst(i)\n                maxCount = count\n               \
    \ maxFreq = freq\n            }\n        }\n        if(maxCount == 0){\n     \
    \       return -1\n        }\n        return max", "        val freq = mutable.Map[Long,\
    \ Int]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1)\n  \
    \      val max = freq.maxBy(_._2)._1\n        if (max > 0) max else -1", "   \
    \     val freq = mutable.Map[Long, Int]()\n        lst.foreach(x => freq += x\
    \ -> freq.getOrElse(x, 0) + 1)\n        val max = freq.maxBy(_._2)\n        if\
    \ (max._2 >= 0) max._1 else -1", "        val freq = mutable.Map[Long, Int]()\n\
    \        val max = -1L\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0) + 1L)\n        val maxFreq = freq.maxBy(_._2)\n        if (maxFreq >= freq.keys.toSet.size)\n\
    \            return maxFreq\n        else\n            return -1", "        val\
    \ freq = mutable.HashMap.empty[Long, Int]\n        lst.foreach(x => freq += x\
    \ -> freq.getOrElse(x, 0) + 1)\n        val maxFreq = freq.maxBy(_._2)._1\n  \
    \      val maxFreqValue = freq.maxBy(_._2)._2\n        val maxFreqKey = freq.maxBy(_._1)._1\n\
    \        if(maxFreqKey == -1) return -1\n        if(maxFreqValue >= maxFreqKey)\
    \ return maxFreqKey\n        return -1", "        val freq = mutable.Map[Long,\
    \ Int]()\n        val max = -1L\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0L) + 1)\n        val max = freq.maxBy(_._2)._1\n        max match {\n     \
    \       case x if freq.contains(x) => x\n            case x if freq.contains(-1)\
    \ => -1\n            case _ => -1\n        }", "        val freq = mutable.HashMap[Long,\
    \ Int]()\n        val max = -1L\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0L) + 1)\n        lst.foreach(x => if (freq.getOrElse(x, 0L) >= max) max = x)\n\
    \        max", "        var max = 0\n        var maxCount = 0\n        var maxFreq\
    \ = 0\n        var maxIndex = 0\n        for (i <- 0 until lst.size) {\n     \
    \       val freq = lst.count(_ == lst(i))\n            if (freq > maxFreq) {\n\
    \                max = lst(i)\n                maxCount = freq\n             \
    \   maxFreq = freq\n                maxIndex = i\n            }\n        }\n \
    \       if (maxCount >= maxFreq) {\n            max\n        } else {\n      \
    \      -1\n        }", "        val freq = mutable.Map[Long, Int]()\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0) + 1)\n        val max = freq.maxBy(_._2)._1\n\
    \        if (max > 0) max else -1", "        val freq = mutable.Map[Long, Int]()\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1)\n        val\
    \ max = freq.maxBy(_._2)._1\n        if (max > 0) max else -1", "        var max\
    \ = 0\n        var maxCount = 0\n        for (i <- 0 until lst.length) {\n   \
    \         if (lst(i) > 0) {\n                val count = lst.count(_ == lst(i))\n\
    \                if (count > maxCount) {\n                    max = lst(i)\n \
    \                   maxCount = count\n                }\n            }\n     \
    \   }\n        if (maxCount == 0) {\n            return -1\n        }\n      \
    \  return max", "        var max = 0L\n        var maxCount = 0L\n        var\
    \ maxFreq = 0L\n        var i = 0\n        while (i < lst.size) {\n          \
    \  if (lst(i) > 0) {\n                if (lst(i) == max) {\n                 \
    \   maxCount += 1\n                    if (maxCount > maxFreq) {\n           \
    \             max = lst(i)\n                        maxCount = 1\n           \
    \             maxFreq = lst(i)\n                    }\n                } else\
    \ {\n                    maxCount = 1\n                    maxFreq = lst(i)\n\
    \                    max = lst(i)\n                }\n                i += 1\n\
    \            } else {\n                i += 1\n            }\n        }\n    \
    \    if (maxCount == 0) {\n            return -1\n        } else {\n         \
    \   return max\n        }", "        var max = 0\n        var freq = 0\n     \
    \   var maxIndex = 0\n        for (i <- 0 until lst.size) {\n            if (lst(i)\
    \ > 0) {\n                freq = freq + 1\n                if (freq > lst(i))\
    \ {\n                    max = lst(i)\n                    maxIndex = i\n    \
    \            }\n            }\n        }\n        if (maxIndex == 0)\n       \
    \     return -1\n        return max", "        val freq = mutable.Map[Long, Int]()\n\
    \        for (i <- lst) {\n            freq += i -> freq.getOrElse(i, 0) + 1\n\
    \        }\n        val max = freq.maxBy(_._2)\n        if (max > 0) max else\
    \ -1", "        val freq = mutable.HashMap.empty[Long, Int]\n        for(i <-\
    \ 0 until lst.length)\n            freq += (lst(i) -> freq(lst(i)))\n        val\
    \ max = freq.maxBy(_._2)\n        if(max != 0)\n            max._1\n        else\n\
    \            -1", "        val freq = mutable.HashMap.empty[Long, Int]\n     \
    \   lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1)\n        val maxFreq\
    \ = freq.maxBy(_._2)._2\n        val maxFreqKey = freq.maxBy(_._1)._1\n      \
    \  if(maxFreqKey > 0) maxFreqKey else -1", "        val freq = mutable.Map[Long,\
    \ Int]()\n        val max = -1L\n        lst.foreach(x => {\n            freq\
    \ += x -> freq.getOrElse(x, 0) + 1\n            if (freq.getOrElse(x, 0) > max)\
    \ {\n                max = freq.getOrElse(x, 0)\n            }\n        })\n \
    \       if (max > 0) max else -1L", "        val freq = mutable.HashMap[Long,\
    \ Int]()\n        for (i <- lst) {\n            freq(i) += 1\n        }\n    \
    \    val max = freq.maxBy(_._2)._1\n        if (max > 0) {\n            freq.filter(_._2\
    \ >= max).maxBy(_._1)._1\n        } else {\n            -1\n        }", "    \
    \    val freq = mutable.Map[Long, Int]()\n        lst.foreach(x => freq += x ->\
    \ freq.getOrElse(x, 0) + 1)\n        val max = freq.maxBy(_._2)\n        if (max._2\
    \ >= 0) max._1 else -1", "        var max = 0\n        var freq = 0\n        for(i\
    \ <- 0 until lst.length){\n            if(lst(i) > 0){\n                freq +=\
    \ 1\n                if(lst(i) > max){\n                    max = lst(i)\n   \
    \             }\n            }\n        }\n        if(max > 0 && freq >= max){\n\
    \            return max\n        }\n        return -1", "        val freq = mutable.Map[Long,\
    \ Int]()\n        for (i <- lst) {\n            freq += i -> freq.getOrElse(i,\
    \ 0) + 1\n        }\n        val max = freq.maxBy(_._2)\n        if (max._2 >=\
    \ 0) {\n            max._1\n        } else {\n            -1\n        }", "  \
    \      var max = 0\n        var freq = 0\n        for (i <- 0 until lst.size)\
    \ {\n            if (lst(i) > 0) {\n                freq = freq + 1\n        \
    \        if (freq > max) {\n                    max = freq\n                }\n\
    \            }\n        }\n        if (max > 0) {\n            return max\n  \
    \      } else {\n            return -1\n        }", "        val freq = mutable.Map[Long,\
    \ Int]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1)\n  \
    \      val max = freq.maxBy(_._2)._1\n        val maxFreq = freq.maxBy(_._2)._2\n\
    \        if (maxFreq >= max) max else -1", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        val max = mutable.Long.MinValue\n        lst.foreach{x => freq\
    \ += x -> freq.getOrElse(x, 0)}\n        lst.foreach{x => if (freq.getOrElse(x,\
    \ 0) > max) max = freq.getOrElse(x, 0)}\n        if (max > 0) max else -1", " \
    \       val freq = mutable.HashMap.empty[Long, Int]\n        for (i <- lst) {\n\
    \            freq(i) = freq(i) + 1\n        }\n        val max = freq.maxBy(_._2)._1\n\
    \        if (max > 0) max else -1", "        var max = 0\n        var maxCount\
    \ = 0\n        var maxFreq = 0\n        var maxIndex = 0\n        for (i <- 0\
    \ until lst.size) {\n            val freq = lst(i).toLong\n            if (freq\
    \ > maxFreq) {\n                max = lst(i)\n                maxCount = freq\n\
    \                maxFreq = freq\n                maxIndex = i\n            }\n\
    \        }\n        if (maxCount >= maxFreq) {\n            max\n        } else\
    \ {\n            -1\n        }", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1)\n    \
    \    val max = freq.maxBy(_._2)._1\n        if (max > 0) max else -1", "     \
    \   val freq = mutable.HashMap.empty[Long, Int]\n        val max = mutable.HashMap.empty[Long,\
    \ Long]\n        lst.foreach{x => freq += x -> freq.getOrElse(x, 0)}\n       \
    \ lst.foreach{x => max += x -> lst.count(_ == x)}\n        val maxKey = max.keys.max\n\
    \        val maxValue = max.getOrElse(maxKey, -1)\n        val maxFreq = freq.getOrElse(maxKey,\
    \ 0)\n        if(maxFreq >= maxValue) maxKey else -1", "        val freq = mutable.HashMap[Long,\
    \ Int]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1)\n  \
    \      val max = freq.maxBy(_._2)._1\n        val max = freq.maxBy(_._2)._1\n\
    \        if (max > 0) max else -1", "        var max = 0\n        var maxCount\
    \ = 0\n        var maxFreq = 0\n        for(i <- 0 until lst.length){\n      \
    \      val freq = lst(i).toInt\n            if(freq > maxFreq){\n            \
    \    max = lst(i)\n                maxCount = freq\n                maxFreq =\
    \ freq\n            }\n        }\n        if(maxCount == 0){\n            return\
    \ -1\n        }\n        return max", "        var max = 0\n        var maxCount\
    \ = 0\n        var maxFreq = 0\n        var maxIndex = 0\n        var i = 0\n\
    \        for(i <- 0 until lst.size) {\n            if(lst(i) > 0) {\n        \
    \        val count = lst(i).toLong\n                if(count > maxCount) {\n \
    \                   max = lst(i)\n                    maxCount = count\n     \
    \               maxFreq = lst(i).toLong\n                    maxIndex = i\n  \
    \              }\n            }\n        }\n        if(maxCount > 0) {\n     \
    \       lst(maxIndex).toLong\n        } else {\n            -1\n        }", " \
    \       val freq = mutable.Map[Long, Int]()\n        val max = -1L\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0L) + 1)\n        lst.foreach(x => if (freq.getOrElse(x,\
    \ 0L) >= max) max = x)\n        max", "        val freq = mutable.Map[Long, Int]()\n\
    \        val max = -1L\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0L) + 1)\n        lst.foreach(x => if (freq.getOrElse(x, 0L) >= freq.getOrElse(x,\
    \ 1L)) max = Math.max(max, x))\n        max", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        for (i <- lst) {\n            freq += i -> freq.getOrElse(i, 0)\
    \ + 1\n        }\n        val max = freq.maxBy(_._2)._1\n        if (max > 0)\
    \ max else -1", "        val freq = mutable.HashMap[Long, Int]()\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0) + 1)\n        val maxFreq = freq.filter(_._2\
    \ >= 0).maxBy(_._2)._2\n        if (maxFreq >= 0) maxFreq else -1", "        var\
    \ max = 0\n        var maxCount = 0\n        var maxFreq = 0\n        for(i <-\
    \ 0 until lst.length){\n            if(lst(i) > max){\n                max = lst(i)\n\
    \                maxCount = 1\n                maxFreq = lst(i)\n            }\n\
    \            else if(lst(i) == max && lst(i) > maxFreq){\n                maxCount\
    \ = maxCount + 1\n                maxFreq = lst(i)\n            }\n        }\n\
    \        if(maxCount == 0){\n            return -1\n        }\n        else if(maxCount\
    \ > 0){\n            return max\n        }\n        else{\n            return\
    \ -1\n        }", "        val freq = mutable.Map[Long, Int]()\n        for (i\
    \ <- lst) {\n            freq += i -> freq.getOrElse(i, 0) + 1\n        }\n  \
    \      val max = freq.maxBy(_._2)._1\n        if (max >= freq.maxBy(_._1)._1)\
    \ {\n            return max\n        } else {\n            return -1\n       \
    \ }", "        val freq = mutable.Map[Long, Int]()\n        val max = -1L\n  \
    \      lst.foreach(x => freq += x -> freq.getOrElse(x, 0L) + 1)\n        val maxFreq\
    \ = freq.maxBy(_._2)\n        if (maxFreq._2 >= max) {\n            max = maxFreq._2\n\
    \        }\n        max", "        val freq = mutable.HashMap[Long, Int]()\n \
    \       val max = -1L\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0L) + 1)\n        lst.foreach(x => if (freq.getOrElse(x, 0L) >= freq.getOrElse(x,\
    \ 1L)) max = x)\n        max", "        var max = 0\n        var maxIndex = 0\n\
    \        var index = 0\n        for(i <- 0 until lst.length){\n            if(lst(i)\
    \ > max){\n                max = lst(i)\n                maxIndex = i\n      \
    \      }\n        }\n        for(i <- 0 until lst.length){\n            if(lst(i)\
    \ == max){\n                if(lst(i) > lst(maxIndex)){\n                    index\
    \ = maxIndex\n                }\n            }\n        }\n        if(index ==\
    \ 0){\n            return -1\n        }\n        return lst(index)", "       \
    \ val freq = mutable.HashMap.empty[Long, Int]\n        for (i <- 0 until lst.size)\
    \ {\n            freq += lst(i) -> freq(lst(i)) + 1\n        }\n        val max\
    \ = freq.maxBy(_._2)._1\n        if (max > 0) max else -1", "        val freq\
    \ = mutable.HashMap[Long, Int]()\n        val max = -1L\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0L) + 1)\n        val maxFreq = freq.maxBy(_._2)._1\n\
    \        val maxFreqCount = freq.maxBy(_._2)._2\n        if(maxFreqCount >= max)\
    \ max else -1L", "        var max = 0\n        var maxIndex = 0\n        var freq\
    \ = 0\n        for (i <- 0 until lst.size) {\n            freq = lst(i).toLong\n\
    \            if (freq > 0) {\n                if (freq > max) {\n            \
    \        max = freq\n                    maxIndex = i\n                }\n   \
    \         }\n        }\n        if (maxIndex == 0)\n            return -1\n  \
    \      return lst(maxIndex)", "        var max = 0\n        var maxCount = 0\n\
    \        var maxFreq = 0\n        for(i <- 0 until lst.size) {\n            if(lst(i)\
    \ > 0) {\n                if(lst(i) == max) {\n                    maxCount +=\
    \ 1\n                }\n                if(lst(i) == max) {\n                \
    \    maxFreq += 1\n                }\n                if(lst(i) > max) {\n   \
    \                 max = lst(i)\n                    maxCount = 1\n           \
    \         maxFreq = 1\n                }\n            }\n        }\n        if(maxCount\
    \ == 0) {\n            return -1\n        }\n        if(maxFreq > maxCount) {\n\
    \            return max\n        }\n        return -1", "        var max = 0\n\
    \        var maxCount = 0\n        var maxFreq = 0\n        var maxIndex = 0\n\
    \        var i = 0\n        while(i < lst.length) {\n            var freq = lst(i).asInstanceOf[Long]\n\
    \            var index = lst(i).asInstanceOf[Long]\n            if(freq > maxFreq)\
    \ {\n                max = index\n                maxCount = freq\n          \
    \      maxFreq = freq\n            }\n            i += 1\n        }\n        return\
    \ max", "        val freq = mutable.HashMap[Long, Int]()\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0) + 1L)\n        val max = freq.maxBy(_._2)._1\n\
    \        if (max > 0) max else -1", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        for (i <- 0 until lst.length) {\n            freq += (lst(i) ->\
    \ freq.getOrElse(lst(i), 0) + 1)\n        }\n        val max = freq.maxBy(_._2)._1\n\
    \        if (max > 0) {\n            freq.filter(_._2 > max).maxBy(_._1)._1\n\
    \        } else {\n            -1\n        }", "        val freq = mutable.Map[Long,\
    \ Int]()\n        for (i <- lst) {\n            freq += i -> freq.getOrElse(i,\
    \ 0) + 1\n        }\n        val max = freq.maxBy(_._2)\n        if (max != null\
    \ && freq.contains(max)) {\n            freq.find(_._2 == max).map(_._1).getOrElse(-1)\n\
    \        } else {\n            -1\n        }", "        val freq = mutable.Map[Long,\
    \ Int]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1)\n  \
    \      val max = freq.maxBy(_._2)._1\n        if (max > 0) max else -1", "   \
    \     val freq = mutable.HashMap.empty[Long, Int]\n        for (i <- lst) {\n\
    \            if (freq.contains(i)) {\n                freq(i) += 1\n         \
    \   } else {\n                freq(i) = 1 \n            }\n        }\n       \
    \ val max = freq.maxBy(_._2)._1\n        if (max >= 0) max else -1", "       \
    \ val freq = mutable.HashMap[Long, Int]()\n        lst.foreach(x => freq += x\
    \ -> freq.getOrElse(x, 0) + 1L)\n        val max = freq.maxBy(_._2)\n        if\
    \ (max > 0) max\n        else -1", "        val freq = mutable.Map[Long, Int]()\n\
    \        for (i <- lst) {\n            freq += i -> freq.getOrElse(i, 0) + 1\n\
    \        }\n        val max = freq.maxBy(_._2)\n        if (max._2 >= 0) {\n \
    \           max._1\n        } else {\n            -1\n        }", "        val\
    \ freq = mutable.Map[Long, Int]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0) + 1L)\n        val max = freq.maxBy(_._2)._1\n        if (max > 0) max else\
    \ -1", "        var max = 0\n        var freq = 0\n        var i = 0\n       \
    \ for(i <- 0 until lst.length){\n            if(lst(i) > 0){\n               \
    \ freq += 1\n                if(lst(i) == max){\n                    freq += 1\n\
    \                }\n                if(lst(i) > max){\n                    max\
    \ = lst(i)\n                }\n            }\n        }\n        if(freq > 0){\n\
    \            return max\n        }\n        return -1", "        val freq = mutable.Map[Long,\
    \ Int]()\n        lst.foreach(x => freq += (x -> freq.getOrElse(x, 0) + 1L))\n\
    \        val max = freq.maxBy(_._2)._1\n        if (max > 0) max else -1", " \
    \       var max = 0\n        var maxCount = 0\n        var maxFreq = 0\n     \
    \   for(i <- 0 until lst.size) {\n            val freq = lst.count(_ == lst(i))\n\
    \            if(freq > maxFreq) {\n                max = lst(i)\n            \
    \    maxCount = freq\n                maxFreq = freq\n            }\n        }\n\
    \        if(maxCount == 0) -1\n        else max", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        for (i <- 0 until lst.size) {\n            freq += (lst(i) ->\
    \ 1)\n        }\n        val max = freq.maxBy(_._2)\n        if (max != 0) {\n\
    \            freq.filter(_._2 >= max).maxBy(_._1)._1\n        } else {\n     \
    \       -1\n        }", "        val freq = mutable.Map[Long, Int]()\n       \
    \ for (i <- lst) {\n            freq += i -> freq.getOrElse(i, 0) + 1\n      \
    \  }\n        val max = freq.maxBy(_._2)\n        if (max._2 >= freq.head._2)\
    \ {\n            return max._1\n        } else {\n            return -1\n    \
    \    }", "        val freq = mutable.HashMap[Long, Int]()\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0) + 1)\n        val max = freq.maxBy(_._2)._1\n\
    \        if (max > 0) max else -1", "        val freq = mutable.HashMap[Long,\
    \ Int]()\n        val max = -1L\n        lst.foreach{x => freq += x -> freq.getOrElse(x,\
    \ 0)}\n        lst.foreach{x => if (freq.getOrElse(x, 0) > max) max = freq.getOrElse(x,\
    \ 0)}\n        max", "        val freq = mutable.Map[Long, Int]()\n        for\
    \ (i <- lst) {\n            freq += i -> freq.getOrElse(i, 0) + 1\n        }\n\
    \        val max = freq.maxBy(_._2)\n        if (max._2 >= 0) {\n            max._1\n\
    \        } else {\n            -1\n        }", "        val freq = mutable.HashMap[Long,\
    \ Int]()\n        val max = mutable.ArrayBuffer.empty[Long]\n        for (i <-\
    \ 0 until lst.size) {\n            freq += (lst(i) -> freq(lst(i)) +1)\n     \
    \       if (freq(lst(i)) > 0) max += lst(i)\n        }\n        val maxFreq =\
    \ freq.maxBy(_._2)\n        if (maxFreq > 0) maxFreq else -1", "        val freq\
    \ = mutable.Map[Long, Int]()\n        val maxFreq = mutable.Map[Long, Int]()\n\
    \        for (i <- 0 until lst.size) {\n            freq += (lst(i) -> 1)\n  \
    \          if (freq.contains(lst(i))) {\n                maxFreq += (lst(i) ->\
    \ freq(lst(i)))\n            }\n        }\n        if (maxFreq.contains(0L)) {\n\
    \            return -1\n        }\n        else {\n            val maxKey = maxFreq.maxBy(_._2)\n\
    \            if (maxFreq.contains(maxKey)) {\n                return maxKey\n\
    \            }\n            else {\n                return -1\n            }\n\
    \        }", "        val freq = mutable.HashMap.empty[Long, Int]\n        val\
    \ max = mutable.HashMap.empty[Long, Long]\n        for (i <- 0 until lst.size)\
    \ {\n            freq += lst(i) -> freq.getOrElse(lst(i), 0) + 1\n           \
    \ max += lst(i) -> lst(i)\n        }\n        val maxKey = max.keys.max\n    \
    \    val maxValue = max.get(maxKey)\n        if (maxValue > 0) maxKey else -1",
  "        val freq = mutable.HashMap[Long, Int]()\n        val max = mutable.Long.MinValue\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1)\n        lst.foreach(x\
    \ => if (freq.getOrElse(x, 0) >= max) max = freq.getOrElse(x, 0))\n        max",
  "        val freq = mutable.HashMap.empty[Long, Int]\n        val max = mutable.ArrayBuffer.empty[Long]\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1)\n        val\
    \ maxKey = freq.keys.max\n        val maxValue = freq(maxKey)\n        lst.foreach(x\
    \ => if (freq.getOrElse(x, 0) > maxValue) max += x)\n        if (max.isEmpty)\
    \ -1\n        else max.max", "        var max = 0\n        var maxCount = 0\n\
    \        var maxFreq = 0\n        var maxIndex = 0\n        for (i <- 0 until\
    \ lst.size) {\n            if (lst(i) > 0) {\n                if (lst(i) == max)\
    \ {\n                    maxCount += 1\n                    if (maxCount > maxFreq)\
    \ {\n                        maxFreq = maxCount\n                        maxIndex\
    \ = i\n                    }\n                }\n                else {\n    \
    \                maxCount = 1\n                    max = lst(i)\n            \
    \        maxFreq = 1\n                    maxIndex = i\n                }\n  \
    \          }\n        }\n        if (maxCount == 0) {\n            return -1\n\
    \        }\n        return max", "        val freq = mutable.Map[Long, Int]()\n\
    \        val max = -1\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0) + 1)\n        val maxFreq = freq.maxBy(_._2)._2\n        val maxFreqValue\
    \ = freq.maxBy(_._2)._1\n        if(maxFreqValue >= max) max else -1", "     \
    \   val freq = mutable.HashMap[Long, Int]()\n        val max = -1L\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0L) + 1)\n        lst.foreach(x => if (freq.getOrElse(x,\
    \ 0L) >= x) max = Math.max(max, x))\n        max", "        val freq = mutable.Map[Long,\
    \ Int]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1)\n  \
    \      val max = freq.maxBy(_._2)\n        if (max._2 >= freq.head._2) -1\n  \
    \      else max._1", "        val freq = mutable.HashMap.empty[Long, Int]\n  \
    \      for(i <- 0 until lst.size) {\n            freq += (lst(i) -> 1)\n     \
    \   }\n        val maxFreq = freq.maxBy(_._1)\n        if(maxFreq._2 >= lst.size)\
    \ {\n            return -1\n        }\n        return maxFreq._2", "        var\
    \ max = 0L\n        var maxCount = 0L\n        var maxFreq = 0L\n        for(i\
    \ <- 0 until lst.size) {\n            val freq = lst(i).asInstanceOf[Long]\n \
    \           val count = freq.asInstanceOf[Long]\n            if(freq > maxFreq)\
    \ {\n                max = freq\n                maxCount = count\n          \
    \      maxFreq = freq\n            }\n        }\n        if(maxCount == 0) {\n\
    \            return -1\n        }\n        return max", "        var max = 0\n\
    \        var maxCount = 0\n        var maxFreq = 0\n        for(i <- 0 until lst.length){\n\
    \            val count = lst(i).asInstanceOf[Long]\n            val freq = lst(i).asInstanceOf[Long]\n\
    \            if(count > maxCount){\n                max = lst(i)\n           \
    \     maxCount = count\n                maxFreq = freq\n            }\n      \
    \  }\n        if(maxCount > maxFreq){\n            return -1\n        }\n    \
    \    return max", "        val freq = mutable.Map[Long, Int]()\n        val max\
    \ = -1L\n        lst.foreach{x => freq += x -> freq.getOrElse(x, 0)}\n       \
    \ lst.foreach{x => if (freq.getOrElse(x, 0) > max) max = freq.getOrElse(x, 0)}\n\
    \        max", "        val freq = mutable.HashMap.empty[Long, Int]\n        val\
    \ maxFreq = mutable.HashMap.empty[Long, Int]\n        for(i <- 0 until lst.length){\n\
    \            freq += (lst(i) -> 1)\n            maxFreq += (lst(i) -> 1)\n   \
    \     }\n        val maxKey = maxFreq.keys.max\n        if(maxFreq(maxKey) > 0){\n\
    \            freq(maxKey)\n        }else{\n            -1\n        }", "     \
    \   val freq = mutable.HashMap[Long, Int]()\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0) + 1)\n        val max = freq.maxBy(_._2)._1\n    \
    \    val maxFreq = freq.maxBy(_._2)._2\n        if (maxFreq >= max) max else -1",
  "        val freq = mutable.Map[Long, Int]()\n        lst.foreach(x => freq += x\
    \ -> freq.getOrElse(x, 0) + 1)\n        val max = freq.maxBy(_._2)._1\n      \
    \  if (max > 0) max else -1", "        var max = 0\n        var maxCount = 0\n\
    \        for (i <- 0 until lst.size) {\n            if (lst(i) > 0) {\n      \
    \          val count = lst.count(_ == lst(i))\n                if (count > maxCount)\
    \ {\n                    max = lst(i)\n                    maxCount = count\n\
    \                }\n            }\n        }\n        if (maxCount == 0) {\n \
    \           return -1\n        }\n        return max", "        var max = 0\n\
    \        var maxFreq = lst(0)\n        for (i <- 0 until lst.size) {\n       \
    \     if (lst(i) > maxFreq) {\n                max = lst(i)\n                maxFreq\
    \ = lst(i)\n            } else if (lst(i) == maxFreq) {\n                maxFreq\
    \ = lst(i)\n            }\n        }\n        if (maxFreq > 0) {\n           \
    \ return max\n        } else {\n            return -1\n        }", "        val\
    \ freq = mutable.HashMap.empty[Long, Int]\n        for (i <- lst) {\n        \
    \    freq += i -> freq.getOrElse(i, 0) + 1\n        }\n        val max = freq.maxBy(_._2)._1\n\
    \        if (max >= 0) max else -1", "        val freq = mutable.Map[Long, Int]()\n\
    \        for (i <- lst) {\n            if (freq.contains(i)) {\n             \
    \   freq(i) += 1\n            } else {\n                freq(i) = 1 \n       \
    \     }\n        }\n        val max = freq.maxBy(_._2)._1\n        if (max > 0)\
    \ {\n            return max\n        } else {\n            return -1\n       \
    \ }", "        val freq = mutable.Map[Long, Int]()\n        val max = -1L\n  \
    \      lst.foreach(x => freq += x -> freq.getOrElse(x, 0L) + 1)\n        val maxFreq\
    \ = freq.maxBy(_._2)\n        if (maxFreq >= 0) {\n            freq.filter(_._2\
    \ >= maxFreq).map(_._1).head\n        } else {\n            -1L\n        }", " \
    \       val freq = mutable.HashMap.empty[Long, Int]\n        lst.foreach(x =>\
    \ freq += x -> freq.getOrElse(x, 0) + 1)\n        val max = freq.maxBy(_._2)._1\n\
    \        if (max > 0) max else -1", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        val maxFreq = mutable.HashMap.empty[Long, Int]\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0) + 1)\n        lst.foreach(x => maxFreq\
    \ += x -> freq.getOrElse(x, 0))\n        lst.foreach(x => freq -= x)\n       \
    \ lst.foreach(x => maxFreq -= x)\n        val maxFreqKey = maxFreq.keys.max\n\
    \        val maxFreqVal = maxFreq(maxFreqKey)\n        if(maxFreqVal >= freq(maxFreqKey))\
    \ maxFreqKey else -1", "        val freq = mutable.HashMap[Long, Int]()\n    \
    \    val maxFreq = mutable.Long.MinValue\n        for(i <- lst) {\n          \
    \  freq(i) = freq.getOrElse(i, 0) + 1\n            if(freq(i) > maxFreq) {\n \
    \               maxFreq = freq(i)\n            }\n        }\n        if(maxFreq\
    \ == Long.MinValue) -1\n        else maxFreq", "        val freq = mutable.HashMap[Long,\
    \ Int]()\n        for (i <- lst) {\n            freq(i) = freq.getOrElse(i, 0)\
    \ + 1\n        }\n        val max = freq.maxBy(_._2)._1\n        if (max > 0)\
    \ max else -1", "        val freq = mutable.Map[Long, Int]()\n        for (i <-\
    \ lst) {\n            freq += i -> freq.getOrElse(i, 0) + 1\n        }\n     \
    \   val max = freq.maxBy(_._2)\n        if (max._2 >= 0) max._1 else -1", "  \
    \      val freq = mutable.HashMap[Long, Int]()\n        lst.foreach(x => freq\
    \ += x -> freq.getOrElse(x, 0) + 1)\n        val max = freq.maxBy(_._2)._1\n \
    \       if (max >= 0) max else -1", "        val freq = mutable.Map[Long, Int]()\n\
    \        for (i <- 0 until lst.size) {\n            freq += (lst(i) -> freq.getOrElse(lst(i),\
    \ 0) + 1)\n        }\n        val max = freq.maxBy(_._2)\n        if (max != 0)\
    \ {\n            freq.filter(_._2 >= max).maxBy(_._1)._1\n        } else {\n \
    \           -1\n        }", "        val freq = mutable.Map[Long, Int]()\n   \
    \     lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1)\n        val max\
    \ = freq.maxBy(_._2)\n        val max = freq.maxBy(_._2)\n        if (max._2 >=\
    \ freq.maxBy(_._2)._2) -1\n        else max._1", "        val freq = mutable.Map[Long,\
    \ Int]()\n        lst.foreach(x => freq += (x -> freq.getOrElse(x, 0) + 1L))\n\
    \        val max = freq.maxBy(_._2)._1\n        if (max >= freq.maxBy(_._1)._1)\
    \ -1L else max", "        var max = 0L\n        var maxCount = 0L\n        var\
    \ maxFreq = 0L\n        var i = 0\n        while(i < lst.length) {\n         \
    \   val freq = lst(i).asInstanceOf[Long]\n            val count = lst(i).asInstanceOf[Long]\n\
    \            if(freq > maxFreq) {\n                max = lst(i)\n            \
    \    maxCount = count\n                maxFreq = freq\n            }\n       \
    \     i += 1\n        }\n        if(maxCount > maxFreq) {\n            return\
    \ -1\n        }\n        return max", "        var max = 0L\n        var maxCount\
    \ = 0L\n        for(i <- 0 until lst.size) {\n            if(lst(i) > 0) {\n \
    \               val count = lst(i).asInstanceOf[Long]\n                if(count\
    \ > maxCount) {\n                    max = lst(i)\n                    maxCount\
    \ = count\n                }\n            }\n        }\n        if(maxCount ==\
    \ 0) {\n            return -1\n        }\n        return max", "        val freq\
    \ = mutable.HashMap[Long, Int]()\n        val max = -1L\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0L) + 1)\n        lst.foreach(x => if (freq.getOrElse(x,\
    \ 0L) >= freq.getOrElse(x, 1L)) max = x)\n        max", "        val freq = mutable.Map[Long,\
    \ Int]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1)\n  \
    \      val max = freq.maxBy(_._2)\n        if (max._2 >= 0) max._1 else -1", " \
    \       var max = 0\n        var maxFreq = 0\n        var maxIndex = 0\n     \
    \   for (i <- 0 until lst.size) {\n            if (lst(i) > 0) {\n           \
    \     val freq = lst.count(_ == lst(i))\n                if (freq > maxFreq) {\n\
    \                    max = lst(i)\n                    maxFreq = freq\n      \
    \              maxIndex = i\n                }\n            }\n        }\n   \
    \     if (maxFreq == 0) -1\n        else max", "        val freq = mutable.Map[Long,\
    \ Int]()\n        for (i <- lst) {\n            freq(i) = freq(i) + 1\n      \
    \  }\n        val max = freq.maxBy(_._2)._1\n        if (max > 0) max else -1",
  "        val freq = mutable.HashMap[Long, Int]()\n        lst.foreach(x => freq\
    \ += x -> freq.getOrElse(x, 0) + 1)\n        val max = freq.maxBy(_._2)._1\n \
    \       if (max > 0) max else -1", "        val freq = mutable.HashMap[Long, Int]()\n\
    \        lst.foreach(x => freq += (x -> freq.getOrElse(x, 0) + 1L))\n        val\
    \ max = freq.maxBy(_._2)._1\n        if (max > 0) max else -1", "        val freq\
    \ = mutable.Map[Long, Int]()\n        val max = -1L\n        lst.foreach(x =>\
    \ freq += x -> freq.getOrElse(x, 0L) + 1)\n        val maxFreq = freq.maxBy(_._2)._1\n\
    \        lst.foreach(x => freq -= x -> freq.getOrElse(x, 0L) - 1)\n        if\
    \ (maxFreq >= 0L) max\n        else -1L", "        val freq = mutable.Map[Long,\
    \ Int]()\n        for (i <- lst) {\n            freq += i -> freq.getOrElse(i,\
    \ 0) + 1\n        }\n        val max = freq.maxBy(_._2)._1\n        if (max >\
    \ 0) max else -1", "        val freq = mutable.HashMap.empty[Long, Int]\n    \
    \    lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1L)\n        val max\
    \ = freq.maxBy(_._2)._1\n        val maxFreq = freq.maxBy(_._2)._2\n        if\
    \ (maxFreq >= max) max else -1", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        val max = mutable.ArrayBuffer.empty[Long]\n        for(i <- 0\
    \ until lst.size) {\n            freq += lst(i) -> freq.getOrElse(lst(i), 0) +\
    \ 1\n            max += lst(i)\n        }\n        val maxFreq = freq.maxBy(_._2)\n\
    \        if(maxFreq >= lst.size) {\n            -1\n        } else {\n       \
    \     max.max\n        }", "        val freq = mutable.HashMap[Long, Int]()\n\
    \        val max = -1L\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0L) + 1)\n        lst.foreach(x => if (freq.getOrElse(x, 0L) >= freq.getOrElse(max,\
    \ 0L)) max = x)\n        max", "        val freq = mutable.HashMap[Long, Int]()\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1)\n        val\
    \ max = freq.maxBy(_._2)._1\n        if (max > 0) max else -1", "        var max\
    \ = 0\n        var maxCount = 0\n        var maxFreq = 0\n        var maxFreqCount\
    \ = 0\n        var maxFreqFreq = 0\n        var maxFreqFreqCount = 0\n       \
    \ var maxFreqFreqFreq = 0\n        var maxFreqFreqFreqCount = 0\n        var maxFreqFreqFreqFreq\
    \ = 0\n        var maxFreqFreqFreqFreqCount = 0\n        var maxFreqFreqFreqFreqFreq\
    \ = 0\n        var maxFreqFreqFreqFreqFreqCount = 0\n        var maxFreqFreqFreqFreqFreqFreq\
    \ = 0\n        var maxFreqFreqFreqFreqFreqFreqCount = 0\n        var maxFreqFreqFreqFreqFreqFreqFreq\
    \ = 0\n        var maxFreqFreqFreqFreqFreqFreqFreqCount = 0\n        var maxFreqFreqFreqFreqFreqFreqFreqFreq\
    \ = 0\n        var maxFreqFreqFreqFreqFreqFreqFreqFreqCount = 0\n        var maxFreqFreqFreqFreqFreqFreqFreqFreqFreq\
    \ = 0\n        var maxFreqFreqFreqFreqFreqFreqFreqFreqFreqCount = 0\n        var\
    \ maxFreqFreqFreqFreqFreqFreqFreqFreqFreqFreq = 0\n        var maxFreqFreqFreqFreqFreqFreqFreqFreqFreqCount\
    \ = 0\n        var maxFreqFreqFreqFreqFreqFreqFreqFreqFreqFreq = 0\n        var\
    \ maxFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqCount = 0\n        var maxFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqFreq\
    \ = 0\n        var maxFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqCount = 0\n    \
    \    var maxFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqFreq = 0\n        var maxFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqCount\
    \ = 0\n        var maxFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqFreq = 0\n \
    \       var maxFreqFreqFreqFreqFreqFreq", "        val freq = mutable.Map[Long,\
    \ Int]()\n        for (i <- lst) {\n            freq += i -> freq.getOrElse(i,\
    \ 0) + 1\n        }\n        val max = freq.maxBy(_._2)._1\n        if (max >=\
    \ freq.keys.max) {\n            return -1\n        } else {\n            return\
    \ max\n        }", "        val freq = mutable.HashMap.empty[Long, Int]\n    \
    \    for(i <- 0 until lst.size) {\n            freq += (lst get i) -> freq.getOrElse(lst\
    \ get i, 0)+1\n        }\n        val maxFreq = freq.maxBy(_._2)\n        if(maxFreq._2\
    \ >= freq.size)\n            return maxFreq._1\n        else\n            return\
    \ -1", "        var max = 0\n        var freq = 0\n        var maxIndex = 0\n\
    \        for (i <- 0 until lst.size) {\n            if (lst(i) > 0) {\n      \
    \          if (freq < lst(i)) {\n                    freq = lst(i)\n         \
    \           max = i\n                    maxIndex = i\n                }\n   \
    \         }\n        }\n        if (maxIndex == lst.size) {\n            return\
    \ -1\n        }\n        if (maxIndex != 0) {\n            lst(maxIndex) = lst(maxIndex)\
    \ - freq\n        }\n        return max", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1)\n    \
    \    val max = freq.maxBy(_._2)._1\n        if (max > 0) max else -1", "     \
    \   val freq = mutable.HashMap[Long, Int]()\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0) + 1)\n        val max = freq.maxBy(_._2)._1\n    \
    \    if (max > 0) max else -1", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        val max = mutable.Long.MinValue\n        lst.foreach(x => freq\
    \ += x -> freq.getOrElse(x, 0) + 1)\n        lst.foreach(x => if (freq.getOrElse(x,\
    \ 0) > max) max = freq.getOrElse(x, 0))\n        if (max > 0) max else -1", " \
    \       val freq = mutable.HashMap.empty[Long, Int]\n        val max = mutable.ArrayBuffer.empty[Long]\n\
    \        for(i <- 0 until lst.size) {\n            freq += lst(i) -> freq(lst(i))\
    \ + 1\n            max += lst(i)\n        }\n        val maxFreq = freq.filter(_._2\
    \ >= lst.size).maxBy(_._2)._2\n        if(maxFreq >= lst.size) lst.size else -1",
  "        val freq = mutable.HashMap.empty[Long, Int]\n        lst.foreach(x => freq\
    \ += x -> freq.getOrElse(x, 0) + 1L)\n        val max = freq.maxBy(_._2)._1\n\
    \        if (max > 0) max else -1", "        var max = 0\n        var maxCount\
    \ = 0\n        var maxFreq = 0\n        var i = 0\n        for(i <- 0 until lst.length){\n\
    \            if(lst(i) > 0){\n                if(lst(i) == max){\n           \
    \         maxCount += 1\n                }\n                else{\n          \
    \          if(maxCount > maxFreq){\n                        max = lst(i)\n   \
    \                     maxCount = 1\n                        maxFreq = lst(i)\n\
    \                    }\n                    else{\n                        maxCount\
    \ += 1\n                    }\n                }\n            }\n        }\n \
    \       if(maxCount == 0){\n            return -1\n        }\n        return max",
  "        val freq = mutable.HashMap[Long, Int]()\n        lst.foreach(x => freq\
    \ += x -> freq.getOrElse(x, 0) + 1L)\n        val max = freq.maxBy(_._2)._1\n\
    \        if (max >= freq.maxBy(_._1)._1) -1\n        else max", "        val freq\
    \ = mutable.Map[Long, Int]()\n        val max = -1L\n        lst.foreach(x =>\
    \ freq += x -> freq.getOrElse(x, 0L) + 1)\n        lst.foreach(x => if (freq.getOrElse(x,\
    \ 0L) >= max) max = x)\n        max", "        val freq = mutable.Map[Long, Int]()\n\
    \        val max = mutable.Map[Long, Long]()\n        for (i <- lst) {\n     \
    \       freq += i -> freq.getOrElse(i, 0) + 1\n        }\n        for (i <- freq.keys)\
    \ {\n            if (freq(i) >= freq(lst(i))) {\n                max += i -> lst(i)\n\
    \            }\n        }\n        max.values.max", "        val freq = mutable.HashMap[Long,\
    \ Int]()\n        for (i <- lst) {\n            freq += i -> freq.getOrElse(i,\
    \ 0) + 1\n        }\n        val max = freq.maxBy(_._2)._1\n        if (max >\
    \ 0) max else -1", "        val freq = mutable.HashMap[Long, Int]()\n        val\
    \ maxFreq = mutable.Long.MinValue\n        val maxIndex = -1\n        lst.foreach(x\
    \ => {\n            freq.getOrElse(x, 0)\n            freq(x) = freq(x) + 1\n\
    \            if (freq(x) > maxFreq) {\n                maxFreq = freq(x)\n   \
    \             maxIndex = x\n            }\n        })\n        if (maxIndex ==\
    \ -1) return -1\n        if (maxFreq == 0) return -1\n        return maxIndex",
  "        val freq = mutable.HashMap[Long, Int]()\n        val max = -1L\n      \
    \  lst.foreach(x => freq += x -> freq.getOrElse(x, 0L) + 1)\n        val maxFreq\
    \ = freq.filter(_._2 >= max).map(_._1).sum\n        if (maxFreq >= max) max else\
    \ -1L", "        var max = 0\n        var maxCount = 0\n        for(i <- 0 until\
    \ lst.size) {\n            val count = lst.count(_ == lst(i))\n            if(count\
    \ > maxCount) {\n                max = lst(i)\n                maxCount = count\n\
    \            }\n        }\n        if(maxCount == 0) {\n            return -1\n\
    \        }\n        return max", "        val freq = mutable.Map[Long, Int]()\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1L)\n        val\
    \ max = freq.maxBy(_._2)._1\n        if (max > 0) max else -1", "        val freq\
    \ = mutable.HashMap[Long, Int]()\n        lst.foreach(x => freq += (x -> freq.getOrElse(x,\
    \ 0) + 1L))\n        val max = freq.maxBy(_._2)._1\n        if (max > 0) max else\
    \ -1", "        val freq = mutable.HashMap[Long, Int]()\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0) + 1)\n        val max = freq.maxBy(_._2)._1\n\
    \        if (max > 0) max else -1", "        var max = 0\n        var freq = 0\n\
    \        for (i <- 0 until lst.size) {\n            if (lst(i) > 0) {\n      \
    \          freq = freq + 1\n                if (freq > lst(i)) {\n           \
    \         max = lst(i)\n                }\n            }\n        }\n        if\
    \ (max < 0) {\n            return -1\n        }\n        return max", "      \
    \  val freq = mutable.Map[Long, Int]()\n        val max = -1L\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0L) + 1)\n        lst.foreach(x => if (freq.getOrElse(x,\
    \ 0L) >= max) max = x)\n        max", "        val freq = mutable.HashMap[Long,\
    \ Int]()\n        for (i <- lst) {\n            freq += i -> freq.getOrElse(i,\
    \ 0) + 1\n        }\n        val max = freq.maxBy(_._2)._1\n        if (max >\
    \ 0) {\n            freq.filter(_._2 >= max).maxBy(_._1)._1\n        } else {\n\
    \            -1\n        }", "        val freq = mutable.Map[Long, Int]()\n  \
    \      lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1)\n        val max\
    \ = freq.maxBy(_._2)\n        if (max._2 >= freq.head._2) -1\n        else max._1",
  "        val freq = mutable.Map[Long, Int]()\n        val max = mutable.Map[Long,\
    \ Long]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1)\n \
    \       lst.foreach(x => max += x -> lst.count(_ == x))\n        val maxKey =\
    \ max.max.key\n        val maxValue = max.max.value\n        if(maxValue >= freq(maxKey))\
    \ {\n            return maxKey\n        }\n        return -1", "        val freq\
    \ = mutable.HashMap.empty[Long, Int]\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0) + 1)\n        val max = freq.maxBy(_._2)._1\n        if (max > 0) max else\
    \ -1", "        val freq = mutable.HashMap.empty[Long, Int]\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0) + 1)\n        val max = freq.maxBy(_._2)._1\n\
    \        if (max > 0) max else -1", "        var max = 0\n        var maxFreq\
    \ = lst(0)\n        var i = 0\n        while (i < lst.size) {\n            if\
    \ (lst(i) > maxFreq) {\n                max = lst(i)\n                maxFreq\
    \ = lst(i)\n            }\n            i += 1\n        }\n        if (maxFreq\
    \ == 0) return -1\n        return max", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        for (i <- 0 until lst.size) {\n            freq += lst(i) -> freq(lst(i))+1\n\
    \        }\n        val max = freq.maxBy(_._2)._1\n        if (max > 0) max else\
    \ -1", "        var max = 0L\n        var maxFreq = 0L\n        var maxIndex =\
    \ 0L\n        for(i <- 0 until lst.size) {\n            val freq = lst(i).asInstanceOf[Long]\n\
    \            if(freq > maxFreq) {\n                max = lst(i)\n            \
    \    maxFreq = freq\n                maxIndex = i\n            }\n        }\n\
    \        max", "        val freq = mutable.Map[Long, Int]()\n        for (i <-\
    \ 0 until lst.length) {\n            freq += (lst(i) -> freq.getOrElse(lst(i),\
    \ 0) + 1)\n        }\n        val max = freq.maxBy(_._2)._1\n        if (max >\
    \ 0) max else -1", "        val freq = mutable.HashMap.empty[Long, Int]\n    \
    \    lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1)\n        val max\
    \ = freq.maxBy(_._2)._1\n        if (max > 0) max else -1", "        val freq\
    \ = mutable.HashMap[Long, Int]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0) + 1)\n        val max = freq.maxBy(_._2)._1\n        if (max > 0) max else\
    \ -1", "        val freq = mutable.Map[Long, Int]()\n        val max = -1L\n \
    \       lst.foreach(x => freq += x -> freq.getOrElse(x, 0L) + 1)\n        val\
    \ max = freq.maxBy(_._2)._1\n        if (max > 0) max else -1L", "        val\
    \ freq = mutable.Map[Long, Int]()\n        val max = -1L\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0L) + 1)\n        lst.foreach(x => if (freq.getOrElse(x,\
    \ 0L) >= freq.getOrElse(max, 0L)) max = x)\n        max", "        val freq =\
    \ mutable.Map[Long, Int]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0) + 1)\n        val max = freq.maxBy(_._2)._1\n        val max = freq.maxBy(_._2)._1\n\
    \        if(max > 0) max else -1", "        var max = 0\n        var maxCount\
    \ = 0\n        var maxFreq = 0\n        var maxIndex = 0\n        for (i <- 0\
    \ until lst.size) {\n            var freq = lst(i).toLong\n            if (freq\
    \ > maxFreq) {\n                max = lst(i)\n                maxCount = freq\n\
    \                maxFreq = freq\n                maxIndex = i\n            }\n\
    \        }\n        if (maxCount >= maxFreq) {\n            return max\n     \
    \   } else {\n            return -1\n        }", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1)\n    \
    \    val max = freq.maxBy(_._2)._1\n        val maxFreq = freq.maxBy(_._2)._2\n\
    \        if (maxFreq >= max) max else -1", "        val freq = mutable.HashMap[Long,\
    \ Int]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1)\n  \
    \      val max = freq.maxBy(_._2)._1\n        if (max > 0) max else -1", "   \
    \     val freq = mutable.Map[Long, Int]()\n        lst.foreach(x => freq += x\
    \ -> freq.getOrElse(x, 0) + 1)\n        val max = freq.maxBy(_._2)._1\n      \
    \  if (max > 0) max else -1", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1)\n    \
    \    val max = freq.maxBy(_._2)\n        if (max._2 >= freq.filter(x => x._2 ==\
    \ max._2).head._2)\n            max._1\n        else\n            -1", "     \
    \   var max = 0\n        var maxFreq = 0\n        var maxIndex = 0\n        var\
    \ i = 0\n        var j = 0\n        while(i < lst.length && j < lst.length) {\n\
    \            if(lst(i) > lst(j)) {\n                max = lst(i)\n           \
    \     maxFreq = lst(i)\n                maxIndex = i\n                i += 1\n\
    \            } else {\n                max = lst(j)\n                maxFreq =\
    \ lst(j)\n                maxIndex = j\n                j += 1\n            }\n\
    \        }\n        if(maxFreq >= lst(maxIndex)) {\n            return max\n \
    \       } else {\n            return -1\n        }", "        val freq = mutable.HashMap[Long,\
    \ Int]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1)\n  \
    \      val max = freq.maxBy(_._2)._1\n        val max = freq.maxBy(_._2)._1\n\
    \        if (max > 0) max else -1", "        val freq = mutable.HashMap[Long,\
    \ Int]()\n        for (i <- lst) {\n            freq(i) += 1\n        }\n    \
    \    val max = freq.maxBy(_._1)._1\n        if (max > 0) max else -1", "     \
    \   val freq = mutable.Map[Long, Int]()\n        lst.foreach(x => freq += (x ->\
    \ freq.getOrElse(x, 0) + 1L))\n        val maxFreq = freq.maxBy(_._2)._2\n   \
    \     val maxFreqVal = freq.maxBy(_._1)._1\n        if (maxFreqVal >= maxFreq)\
    \ maxFreqVal else -1", "        val freq = mutable.HashMap[Long, Int]()\n    \
    \    val max = -1L\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0L)\
    \ + 1)\n        val maxFreq = freq.filter(_._2 >= max).map(_._1).sum\n       \
    \ val maxFreq2 = freq.filter(_._2 >= max).map(_._1).max\n        if(maxFreq ==\
    \ maxFreq2) max else -1", "        var max = 0\n        var maxCount = 0\n   \
    \     var maxFreq = 0\n        var maxIndex = 0\n        var i = 0\n        while\
    \ (i < lst.size) {\n            if (lst(i) > 0) {\n                val count =\
    \ lst(i).toLong\n                if (count > maxCount) {\n                   \
    \ max = lst(i)\n                    maxCount = count\n                    maxFreq\
    \ = lst(i).toLong\n                    maxIndex = i\n                }\n     \
    \           i += 1\n            } else {\n                i += 1\n           \
    \ }\n        }\n        if (maxCount > 0) {\n            max = maxIndex\n    \
    \    }\n        return max", "        val freq = mutable.Map[Long, Int]()\n  \
    \      val maxFreq = mutable.Map[Long, Int]()\n        val maxValue = mutable.Map[Long,\
    \ Long]()\n        for(i <- 0 until lst.size) {\n            val curr = lst(i)\n\
    \            freq += (curr to 1)\n            maxFreq += (curr to 0)\n       \
    \     maxValue += (curr to curr)\n        }\n        val maxFreqKey = maxFreq.keys.toSet\n\
    \        val maxFreqValue = maxFreq.values.toSet\n        val maxValueKey = maxValue.keys.toSet\n\
    \        val maxValueValue = maxValue.values.toSet\n        if(maxFreqKey.size\
    \ == maxValueKey.size && maxFreqKey.size == maxValueKey.size) {\n            val\
    \ maxFreqKeySet = maxFreqKey.toSet\n            val maxFreqValueSet = maxFreqValue.toSet\n\
    \            val maxValueKeySet = maxValueKey.toSet\n            val maxValueValueSet\
    \ = maxValueValue.toSet\n            if(maxFreqKeySet.size == maxValueKeySet.size\
    \ && maxFreqKeySet.size == maxValueKeySet.size) {\n                val maxFreqKeySetSet\
    \ = maxFreqKeySet.toSet\n                val maxFreqValueSetSet = maxFreqValueSet.toSet\n\
    \                val maxValueKeySetSet = maxValueKeySet.toSet\n              \
    \  val maxValueValueSetSet = maxValueValueSet.toSet\n                if(maxFreqKeySetSet.size\
    \ == maxValueKeySetSet.size && maxFreqKeySetSet.size == maxValueKeySetSet.size)\
    \ {\n                    val maxFreqKeySetSetSetSet = maxFreqKeySetSet.toSet\n\
    \                    val maxFreqValueSetSetSet = maxFreqValueSetSet.toSet\n  \
    \                  val maxValueKeySetSetSetSet = maxValueKeySetSet.toSet\n   \
    \                 val maxValueValueSetSetSet = maxValueValueSet.toSet\n      \
    \              if(maxFreqKeySetSetSet.size == maxValueKeySetSetSet.size && maxFreqKeySetSetSet.size\
    \ == maxValueKeySetSetSet.size) {\n                        val maxFreqKeySetSetSetSetSet\
    \ = maxFreqKeySetSetSet.toSet\n                        val maxFreqValueSetSetSetSet\
    \ = maxFreqValueSetSet.toSet\n                        val maxValueKeySetSetSetSetSet\
    \ = maxValueKeySetSetSet.toSet\n                        val maxValueValueSetSetSetSet\
    \ = max", "        val freq = mutable.HashMap.empty[Long, Int]\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0) + 1)\n        val max = freq.maxBy(_._2)._1\n\
    \        if (max >= 0) max else -1", "        val freq = mutable.Map[Long, Int]()\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1L)\n        val\
    \ max = freq.maxBy(_._2)._1\n        if (max > 0) max else -1", "        val freq\
    \ = mutable.HashMap.empty[Long, Int]\n        val max = -1L\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0L) + 1)\n        val max = freq.maxBy(_._2)._1\n\
    \        if (max > 0) max else -1", "        val freq = mutable.Map[Long, Int]()\n\
    \        val max = -1\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0) + 1)\n        val max = freq.maxBy(_._2)._1\n        if (max >= 0) max else\
    \ -1", "        val freq = mutable.HashMap.empty[Long, Int]\n        val max =\
    \ mutable.ArrayBuffer.empty[Long]\n        for (i <- 0 until lst.size) {\n   \
    \         freq += lst(i) -> freq(lst(i))+1\n            if (freq(lst(i)) > 0)\
    \ max += lst(i)\n        }\n        if (max.isEmpty) -1\n        else {\n    \
    \        val maxFreq = freq(max.max)\n            if (maxFreq >= lst.size) max.max\
    \ else -1\n        }", "        var max = 0\n        var maxCount = 0\n      \
    \  var maxFreq = 0\n        var maxIndex = -1\n        for (i <- 0 until lst.size)\
    \ {\n            val freq = lst(i).toLong\n            if (freq > maxFreq) {\n\
    \                max = lst(i)\n                maxCount = freq\n             \
    \   maxFreq = freq\n                maxIndex = i\n            }\n        }\n \
    \       if (maxIndex == -1) {\n            return -1\n        }\n        if (maxCount\
    \ >= maxFreq) {\n            return max\n        }\n        return -1", "    \
    \    val freq = mutable.HashMap.empty[Long, Int]\n        val max = -1L\n    \
    \    lst.foreach(x => freq += x -> freq.getOrElse(x, 0L) + 1)\n        lst.foreach(x\
    \ => if (freq.getOrElse(x, 0L) >= freq.getOrElse(x, 1L)) max = x)\n        max",
  "        var max = 0\n        var maxFreq = -1\n        var i = 0\n        while\
    \ (i < lst.length) {\n            if (lst(i) > 0) {\n                if (lst(i)\
    \ == max) {\n                    maxFreq += 1\n                } else {\n    \
    \                if (maxFreq >= lst(i)) {\n                        max = lst(i)\n\
    \                        maxFreq = 1\n                    } else {\n         \
    \               maxFreq += 1\n                    }\n                }\n     \
    \       }\n            i += 1\n        }\n        if (maxFreq == -1) {\n     \
    \       return -1\n        } else {\n            return max\n        }", "   \
    \     var max = 0\n        var maxCount = 0\n        var maxFreq = 0\n       \
    \ var i = 0\n        for(i <- 0 until lst.size) {\n            if(lst(i) > 0)\
    \ {\n                val count = lst(i).toLong\n                if(count > maxCount)\
    \ {\n                    max = lst(i)\n                    maxCount = count\n\
    \                    maxFreq = lst(i).toLong\n                }\n            }\n\
    \        }\n        if(maxCount == 0) {\n            return -1\n        }\n  \
    \      return max", "        val freq = mutable.Map[Long, Int]()\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0) + 1)\n        val max = freq.maxBy(_._2)._1\n\
    \        if (max > 0) max else -1", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1L)\n   \
    \     val max = freq.maxBy(_._2)._1\n        if (max > 0) max else -1", "    \
    \    val freq = mutable.HashMap[Long, Int]()\n        val max = mutable.Long.MinValue\n\
    \        for(i <- lst) {\n            freq(i) = freq.getOrElse(i, 0) + 1\n   \
    \         if(freq(i) >= max) {\n                max = freq(i)\n            }\n\
    \        }\n        if(max > 0) max else -1", "        val freq = mutable.Map[Long,\
    \ Int]()\n        val max = -1L\n        lst.foreach{x => freq += x -> freq.getOrElse(x,\
    \ 0)}\n        lst.foreach{x => if (freq.getOrElse(x, 0) > max) max = freq.getOrElse(x,\
    \ 0)}\n        max", "        val freq = mutable.Map[Long, Int]()\n        val\
    \ max = mutable.Map[Long, Long]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0) + 1)\n        lst.foreach(x => max += x -> lst.count(_ == x))\n        max.max.map(_._1).getOrElse(-1)",
  "        val freq = mutable.HashMap.empty[Long, Int]\n        val max = mutable.HashMap.empty[Long,\
    \ Int]\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1)\n    \
    \    lst.foreach(x => max += x -> max.getOrElse(x, 0) + 1)\n        val maxKey\
    \ = max.keys.max\n        val maxValue = max.getOrElse(maxKey, 0)\n        val\
    \ maxFreq = freq.getOrElse(maxKey, 0)\n        if (maxFreq >= maxValue) {\n  \
    \          return maxKey\n        } else {\n            return -1\n        }",
  "        val freq = mutable.Map[Long, Int]()\n        lst.foreach(x => freq += x\
    \ -> freq.getOrElse(x, 0) + 1)\n        val max = freq.maxBy(_._2)._1\n      \
    \  if (max > 0) max else -1", "        val freq = mutable.Map[Long, Int]()\n \
    \       lst.foreach(x => freq += (x -> freq.getOrElse(x, 0) + 1L))\n        val\
    \ max = freq.maxBy(_._2)._1\n        if (max > 0) max else -1", "        val freq\
    \ = mutable.Map[Long, Int]()\n        val max = mutable.Map[Long, Long]()\n  \
    \      lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1)\n        lst.foreach(x\
    \ => max += x -> lst.count(_ == x))\n        lst.foreach(x => if (freq.getOrElse(x,\
    \ 0) >= lst.count(_ == x)) max += x -> lst.count(_ == x))\n        max.values.max",
  "        val freq = mutable.Map[Long, Int]()\n        val max = -1L\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0L) + 1)\n        lst.foreach(x => if (freq.getOrElse(x,\
    \ 0L) >= max) max = x)\n        max", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1)\n    \
    \    val maxKey = freq.keys.max\n        val maxValue = freq(maxKey)\n       \
    \ val maxFreq = freq.filter(_._2 == maxValue).length\n        if (maxFreq >= 0)\
    \ maxKey else -1", "        val freq = mutable.Map[Long, Int]()\n        val max\
    \ = mutable.Map[Long, Long]()\n        lst.foreach(x => {\n            freq +=\
    \ x -> freq.getOrElse(x, 0)\n            max += x -> lst.count(_ == x)\n     \
    \   })\n        val maxKey = max.max.key\n        val maxVal = max.max.value\n\
    \        if(maxKey == -1L) -1L\n        else freq(maxKey) - maxVal", "       \
    \ val freq = mutable.Map[Long, Int]()\n        val max = mutable.Map[Long, Long]()\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1)\n        lst.foreach(x\
    \ => max += x -> lst.count(_ == x))\n        lst.foreach(x => if (freq.getOrElse(x,\
    \ 0) > max.getOrElse(x, 0)) max(x) <- lst)\n        max.values.max"]
stop_tokens:
- "\n    }\n"
