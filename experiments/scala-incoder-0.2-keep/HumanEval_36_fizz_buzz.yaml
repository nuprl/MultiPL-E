name: HumanEval_36_fizz_buzz
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return the number of times the digit 7 appears in integers less than n which\
  \ are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n    // >>> fizz_buzz(78)\n\
  \    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def fizzBuzz(n : Long) : Long\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) ==\
  \ (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
  \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
  \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
  \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
completions: ["        val result = mutable.ListBuffer.empty[Long]\n        val divisors\
    \ = mutable.ListBuffer(11, 13)\n        val digits = mutable.ListBuffer(7, 9)\n\
    \        val digit = mutable.ListBuffer(7, 9)\n        val digits = mutable.ListBuffer(7,\
    \ 9)\n        val digit = mutable.ListBuffer(7, 9)\n        val digits = mutable.ListBuffer(7,\
    \ 9)\n        val digit = mutable.ListBuffer(7, 9)\n        val digits = mutable.ListBuffer(7,\
    \ 9)\n        val digit = mutable.ListBuffer(7, 9)\n        val digits = mutable.ListBuffer(7,\
    \ 9)\n        val digit = mutable.ListBuffer(7, 9)\n        val digits = mutable.ListBuffer(7,\
    \ 9)\n        val digit = mutable.ListBuffer(7, 9)\n        val digits = mutable.ListBuffer(7,\
    \ 9)\n        val digit = mutable.ListBuffer(7, 9)\n        val digits = mutable.ListBuffer(7,\
    \ 9)\n        val digit = mutable.ListBuffer(7, 9)\n        val digits = mutable.ListBuffer(7,\
    \ 9)\n        val digit = mutable.ListBuffer(7, 9)\n        val digits = mutable.ListBuffer(7,\
    \ 9)\n        val digit = mutable.ListBuffer(7, 9)\n        val digits = mutable.ListBuffer(7,\
    \ 9)\n        val digit = mutable.ListBuffer(7, 9)\n        val digits = mutable.ListBuffer(7,\
    \ 9)\n        val digit = mutable.ListBuffer(7, 9)\n        val digits = mutable.ListBuffer(7,\
    \ 9)\n        val digit = mutable.ListBuffer(7, 9)\n        val digits = mutable.ListBuffer(7,\
    \ 9)\n        val digit = mutable.ListBuffer(7, 9)\n        val digits = mutable.ListBuffer(7,\
    \ 9)\n        val digit = mutable.ListBuffer(7, 9)\n        val digits = mutable.ListBuffer(7,\
    \ 9)\n        val digit = mutable.ListBuffer(7, 9)\n        val digits = mutable.ListBuffer(7,\
    \ 9)\n        val digit = mutable.ListBuffer(7, 9)\n        val digits = mutable.ListBuffer(7,\
    \ 9)\n        val digit = mutable.ListBuffer(7, 9)\n        val digits = mutable.ListBuffer(7,\
    \ 9)\n        val digit = mutable.ListBuffer(7, 9)\n        val digits = mutable.ListBuffer(7,\
    \ 9)\n        val digit = mutable.ListBuffer(7, 9)\n        val digits = mutable.ListBuffer(7,\
    \ 9)\n        val digit = mutable.ListBuffer(7, 9)\n        val digits = mutable.ListBuffer(7,\
    \ 9)\n        val digit = mutable.ListBuffer(7, 9)\n        val digits = mut",
  "        val nums = mutable.ArrayBuffer.empty[Int]\n        for(i <- 1 to n) nums\
    \ += i\n        val count = nums.count(i => i % 11 == 0 || i % 13 == 0)\n    \
    \    count", "        val counts = mutable.HashMap.empty[Int, Int]\n        for(i\
    \ <- 1 to n) {\n            val remainder = i % 11\n            val isDivisibleBy11\
    \ = remainder == 0\n            val isDivisibleBy13 = remainder == 1\n       \
    \     if(isDivisibleBy11 || isDivisibleBy13) {\n                val digit = i\
    \ % 10\n                if(counts.contains(digit)) {\n                    counts(digit)\
    \ += 1\n                } else {\n                    counts.put(digit, 1)\n \
    \               }\n            }\n        }\n        counts.values.sum", "   \
    \     val digits = mutable.ArrayBuffer.empty[Int]\n        for (i <- 1 to n) {\n\
    \            digits += i.toString.toInt\n        }\n        digits.count(_ ==\
    \ 7) ", "        var count = 0\n        var digit = 7\n        var remainder =\
    \ n\n        while (remainder > 0) {\n            if (remainder % 11 == 0 || remainder\
    \ % 13 == 0) {\n                count += 1\n            }\n            remainder\
    \ = remainder / 10\n        }\n        count", "        val counts = mutable.Map[Int,\
    \ Long]()\n        val divisors = mutable.Set[Int]()\n        divisors += 11\n\
    \        divisors += 13\n        divisors ++= Seq(7, 3, 1)\n        divisors ++=\
    \ Seq(7, 3, 5)\n        divisors ++= Seq(7, 3, 9)\n        divisors ++= Seq(7,\
    \ 3, 13)\n        divisors ++= Seq(7, 3, 17)\n        divisors ++= Seq(7, 3, 21)\n\
    \        divisors ++= Seq(7, 3, 25)\n        divisors ++= Seq(7, 3, 29)\n    \
    \    divisors ++= Seq(7, 3, 33)\n        divisors ++= Seq(7, 3, 37)\n        divisors\
    \ ++= Seq(7, 3, 41)\n        divisors ++= Seq(7, 3, 45)\n        divisors ++=\
    \ Seq(7, 3, 49)\n        divisors ++= Seq(7, 3, 53)\n        divisors ++= Seq(7,\
    \ 3, 57)\n        divisors ++= Seq(7, 3, 61)\n        divisors ++= Seq(7, 3, 65)\n\
    \        divisors ++= Seq(7, 3, 69)\n        divisors ++= Seq(7, 3, 73)\n    \
    \    divisors ++= Seq(7, 3, 77)\n        divisors ++= Seq(7, 3, 81)\n        divisors\
    \ ++= Seq(7, 3, 85)\n        divisors ++= Seq(7, 3, 89)\n        divisors ++=\
    \ Seq(7, 3, 93)\n        divisors ++= Seq(7, 3, 97)\n        divisors ++= Seq(7,\
    \ 3, 101)\n        divisors ++= Seq(7, 3, 105)\n        divisors ++= Seq(7, 3,\
    \ 109)\n        divisors ++= Seq(7, 3, 113)\n        divisors ++= Seq(7, 3, 127)\n\
    \        divisors ++= Seq(7, 3, 131)\n        divisors ++= Seq(7, 3, 135)\n  \
    \      divisors ++= Seq(7, 3, 139)\n        divisors ++= Seq(7, 3, 143)\n    \
    \    divisors ++= Seq(7, 3, 147)\n        divisors ++= Seq(7, 3, 151)\n      \
    \  divisors ++= Seq(7, 3, 155)\n        divisors ++= Seq(7, 3, 159)\n        divisors\
    \ ++= Seq(7, 3, 163)\n        divisors ++= Seq(7, 3, 167)\n        divisors +",
  "        var count = 0\n        var remainder = n\n        while (remainder > 0)\
    \ {\n            val remainderDigit = remainder % 10\n            if (remainderDigit\
    \ == 7) {\n                count += 1\n            }\n            remainder =\
    \ remainder / 10\n        }\n        count", "        val nums = mutable.ArrayBuffer.empty[Int]\n\
    \        for(i <- 1 to n){\n            val div = i % 11\n            val div2\
    \ = i % 13\n            if(div == 0 || div2 == 0){\n                nums += i\n\
    \            }\n        }\n        nums.count(_ == 7) / nums.length", "      \
    \  val counts = mutable.HashMap.empty[Int, Int]\n        for(i <- 1 to n) {\n\
    \            val remainder = i % 11\n            val isDivisibleBy11 = remainder\
    \ == 0\n            val isDivisibleBy13 = remainder == 1\n            if(isDivisibleBy11\
    \ || isDivisibleBy13) {\n                val digit = i % 10\n                if(counts.contains(digit))\
    \ {\n                    counts(digit) += 1\n                } else {\n      \
    \              counts.put(digit, 1)\n                }\n            }\n      \
    \  }\n        counts.values.sum", "        val count = mutable.ListBuffer[Long]()\n\
    \        for(i <- 1 to n){\n            if(i % 11 == 0 || i % 13 == 0){\n    \
    \            count += i\n            }\n        }\n        count.length", "  \
    \      var count = 0\n        val digits = mutable.ArrayBuffer(7, 11)\n      \
    \  val divisors = mutable.ArrayBuffer(13, 11)\n        val digitCount = mutable.HashMap[Int,\
    \ Int]()\n        val divisorCount = mutable.HashMap[Int, Int]()\n        val\
    \ digits = mutable.ArrayBuffer(7, 11)\n        val divisors = mutable.ArrayBuffer(13,\
    \ 11)\n        val digitCount = mutable.HashMap[Int, Int]()\n        val divisorCount\
    \ = mutable.HashMap[Int, Int]()\n        val digits = mutable.ArrayBuffer(7, 11)\n\
    \        val divisors = mutable.ArrayBuffer(13, 11)\n        val digitCount =\
    \ mutable.HashMap[Int, Int]()\n        val divisorCount = mutable.HashMap[Int,\
    \ Int]()\n        val digits = mutable.ArrayBuffer(7, 11)\n        val divisors\
    \ = mutable.ArrayBuffer(13, 11)\n        val digitCount = mutable.HashMap[Int,\
    \ Int]()\n        val divisorCount = mutable.HashMap[Int, Int]()\n        val\
    \ digits = mutable.ArrayBuffer(7, 11)\n        val divisors = mutable.ArrayBuffer(13,\
    \ 11)\n        val digitCount = mutable.HashMap[Int, Int]()\n        val divisorCount\
    \ = mutable.HashMap[Int, Int]()\n        val digits = mutable.ArrayBuffer(7, 11)\n\
    \        val divisors = mutable.ArrayBuffer(13, 11)\n        val digitCount =\
    \ mutable.HashMap[Int, Int]()\n        val divisorCount = mutable.HashMap[Int,\
    \ Int]()\n        val digits = mutable.ArrayBuffer(7, 11)\n        val divisors\
    \ = mutable.ArrayBuffer(13, 11)\n        val digitCount = mutable.HashMap[Int,\
    \ Int]()\n        val divisorCount = mutable.HashMap[Int, Int]()\n        val\
    \ digits = mutable.ArrayBuffer(7, 11)\n        val divisors = mutable.ArrayBuffer(13,\
    \ 11)\n        val digitCount = mutable.HashMap[Int, Int]()\n        val divisorCount\
    \ = mutable.HashMap[Int, Int]()\n        val digits = mutable.ArrayBuffer(7, 11)\n\
    \        val divisors = mutable.ArrayBuffer(13, 11)\n        val digitCount =\
    \ mutable.HashMap[Int, Int]()\n        val divisorCount = mutable.HashMap[Int,\
    \ Int]()\n        val digits = mutable.ArrayBuffer(7, 11)\n        val divisors\
    \ = mutable.ArrayBuffer(13, 11)\n        val digitCount = mutable.HashMap[Int,\
    \ Int]()\n        val divisorCount = mutable.HashMap[Int, Int]()\n        val\
    \ digits = mutable.ArrayBuffer(7, ", "        val nums = mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- 1 to n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n\
    \                nums += i\n            }\n        }\n        nums.count(_ % 7\
    \ == 0)", "        var count = 0\n        var n1 = n\n        while (n1 > 0) {\n\
    \            val remainder = n1 % 10\n            if (remainder == 7) {\n    \
    \            count += 1\n            }\n            n1 = n1 / 10\n        }\n\
    \        count", "        var count = 0\n        var remainder = n\n        while\
    \ (remainder > 0) {\n            val remainderDigit = remainder % 10\n       \
    \     if (remainderDigit == 7) {\n                count += 1\n            }\n\
    \            remainder = remainder / 10\n        }\n        count", "        val\
    \ count = mutable.Map[Int, Int]()\n        val divisors = mutable.Set[Int]()\n\
    \        val divisorsCount = mutable.Map[Int, Int]()\n        val divisorsCount2\
    \ = mutable.Map[Int, Int]()\n        val divisorsCount3 = mutable.Map[Int, Int]()\n\
    \        val divisorsCount4 = mutable.Map[Int, Int]()\n        val divisorsCount5\
    \ = mutable.Map[Int, Int]()\n        val divisorsCount6 = mutable.Map[Int, Int]()\n\
    \        val divisorsCount7 = mutable.Map[Int, Int]()\n        val divisorsCount8\
    \ = mutable.Map[Int, Int]()\n        val divisorsCount9 = mutable.Map[Int, Int]()\n\
    \        val divisorsCount10 = mutable.Map[Int, Int]()\n        val divisorsCount11\
    \ = mutable.Map[Int, Int]()\n        val divisorsCount12 = mutable.Map[Int, Int]()\n\
    \        val divisorsCount13 = mutable.Map[Int, Int]()\n        val divisorsCount14\
    \ = mutable.Map[Int, Int]()\n        val divisorsCount15 = mutable.Map[Int, Int]()\n\
    \        val divisorsCount16 = mutable.Map[Int, Int]()\n        val divisorsCount17\
    \ = mutable.Map[Int, Int]()\n        val divisorsCount18 = mutable.Map[Int, Int]()\n\
    \        val divisorsCount19 = mutable.Map[Int, Int]()\n        val divisorsCount20\
    \ = mutable.Map[Int, Int]()\n        val divisorsCount21 = mutable.Map[Int, Int]()\n\
    \        val divisorsCount22 = mutable.Map[Int, Int]()\n        val divisorsCount23\
    \ = mutable.Map[Int, Int]()\n        val divisorsCount24 = mutable.Map[Int, Int]()\n\
    \        val divisorsCount25 = mutable.Map[Int, Int]()\n        val divisorsCount26\
    \ = mutable.Map[Int, Int]()\n        val divisorsCount27 = mutable.Map[Int, Int]()\n\
    \        val divisorsCount28 = mutable.Map[Int, Int]()\n        val divisorsCount29\
    \ = mutable.Map[Int, Int]()\n        val divisorsCount30 = mutable.Map[Int, Int]()\n\
    \        val divisorsCount31 = mutable.Map[Int, Int]()\n        val divisorsCount",
  "        val count = mutable.ListBuffer[Long]()\n        val digits = mutable.ListBuffer[Int]()\n\
    \        val remainder = n % 10\n        val remainderDigit = remainder % 10\n\
    \        val remainderDigit2 = remainderDigit % 10\n        val remainderDigit3\
    \ = remainderDigit % 10\n        val remainderDigit4 = remainderDigit % 10\n \
    \       val remainderDigit5 = remainderDigit % 10\n        val remainderDigit6\
    \ = remainderDigit % 10\n        val remainderDigit7 = remainderDigit % 10\n \
    \       val remainderDigit8 = remainderDigit % 10\n        val remainderDigit9\
    \ = remainderDigit % 10\n        val remainderDigit10 = remainderDigit % 10\n\
    \        val remainderDigit11 = remainderDigit % 10\n        val remainderDigit12\
    \ = remainderDigit % 10\n        val remainderDigit13 = remainderDigit % 10\n\
    \        val remainderDigit14 = remainderDigit % 10\n        val remainderDigit15\
    \ = remainderDigit % 10\n        val remainderDigit16 = remainderDigit % 10\n\
    \        val remainderDigit17 = remainderDigit % 10\n        val remainderDigit18\
    \ = remainderDigit % 10\n        val remainderDigit19 = remainderDigit % 10\n\
    \        val remainderDigit20 = remainderDigit % 10\n        val remainderDigit21\
    \ = remainderDigit % 10\n        val remainderDigit22 = remainderDigit % 10\n\
    \        val remainderDigit23 = remainderDigit % 10\n        val remainderDigit24\
    \ = remainderDigit % 10\n        val remainderDigit25 = remainderDigit % 10\n\
    \        val remainderDigit26 = remainderDigit % 10\n        val remainderDigit27\
    \ = remainderDigit % 10\n        val remainderDigit28 = remainderDigit % 10\n\
    \        val remainderDigit29 = remainderDigit % 10\n        val remainderDigit30\
    \ = remainderDigit % 10\n        val remainderDigit31 = remainderDigit % 10\n\
    \        val remainderDigit32 = remainderDigit % 10\n        val remainderDigit33\
    \ = remainderDigit % 10\n        val remainderDigit34 = remainderDigit % 10\n\
    \        val remainderDigit35 = remainderDigit % 10\n        val remainder", " \
    \       val count = mutable.HashMap.empty[Int, Int]\n        for(i <- 1 to n)\
    \ {\n            val remainder = i % 11\n            val divideBy11 = i % 13\n\
    \            val divideBy13 = i % 7\n            if(remainder == 7 && divideBy11\
    \ == 0 && divideBy13 == 0) {\n                count(i) = 1\n            }\n  \
    \      }\n        count.values.sum", "        val nums = mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- 1 to n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n\
    \                nums += i\n            }\n        }\n        nums.count(_ % 7\
    \ == 0)", "        val nums = mutable.ListBuffer(1 to n)\n        val numsStr\
    \ = nums.map(_.toString).mkString(\",\")\n        val numsArr = nums.map(_.toInt).toArray\n\
    \        val numsArrStr = numsArr.map(_.toString).mkString(\",\")\n        val\
    \ numsArrStrArr = numsArrStr.split(\",\")\n        val numsArrStrArrStr = numsArrStrArr.map(_.toString).mkString(\"\
    ,\")\n        val numsArrStrArrStrArr = numsArrStrArrStr.split(\",\")\n      \
    \  val numsArrStrArrStrArrStr = numsArrStrArrStrArr.map(_.toString).mkString(\"\
    ,\")\n        val numsArrStrArrStrArrStrArr = numsArrStrArrStrArrStr.split(\"\
    ,\")\n        val numsArrStrArrStrArrStrArrStr = numsArrStrArrStrArrStrArr.map(_.toString).mkString(\"\
    ,\")\n        val numsArrStrArrStrArrStrArrStrArr = numsArrStrArrStrArrStrArrStr.split(\"\
    ,\")\n        val numsArrStrArrStrArrStrArrStrArrStr = numsArrStrArrStrArrStrArrStrArr.map(_.toString).mkString(\"\
    ,\")\n        val numsArrStrArrStrArrStrArrStrArrStrArr = numsArrStrArrStrArrStrArrStrArrStr.split(\"\
    ,\")\n        val numsArrStrArrStrArrStrArrStrArrStrArrStr = numsArrStrArrStrArrStrArrStrArrStrArrStr.split(\"\
    ,\")\n        val numsArrStrArrStrArrStrArrStrArrStrArrStrArrStr = numsArrStrArrStrArrStrArrStrArrStrArrStrArrStr.split(\"\
    ,\")\n        val numsArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStr = numsArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStr.split(\"\
    ,\")\n        val numsArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStr",
  "        val counts = mutable.Map[Int, Int]()\n        val divisors = mutable.Set[Int](11,\
    \ 13)\n        val divisorsCount = mutable.Map[Int, Int]()\n        val digits\
    \ = n.toString.reverse.grouped(3).map(_.toInt)\n        for (i <- 0 until digits.length)\
    \ {\n            val d = digits(i)\n            if (divisors.contains(d) && counts.get(d)\
    \ == null) {\n                counts(d) = counts.getOrElse(d, 0) + 1\n       \
    \         divisorsCount(d) = divisorsCount(d).get + counts(d)\n            }\n\
    \        }\n        divisorsCount.values.sum"]
stop_tokens:
- "\n    }\n"
