name: HumanEval_145_order_by_points
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function which sorts the given list of integers\n    // in ascending\
  \ order according to the sum of their digits.\n    // Note: if there are several\
  \ items with similar sum of their digits,\n    // order them based on their index\
  \ in original list.\n    // For example:\n    // >>> order_by_points([1, 11, -1,\
  \ -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([]) == []\n  \
  \  def orderByPoints(nums : List[Long]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(orderByPoints((List[Long](1l.toLong,\
  \ 11l.toLong, -1l.toLong, -11l.toLong, -12l.toLong))).equals((List[Long](-1l.toLong,\
  \ -11l.toLong, 1l.toLong, -12l.toLong, 11l.toLong))));\n    assert(orderByPoints((List[Long](1234l.toLong,\
  \ 423l.toLong, 463l.toLong, 145l.toLong, 2l.toLong, 423l.toLong, 423l.toLong, 53l.toLong,\
  \ 6l.toLong, 37l.toLong, 3457l.toLong, 3l.toLong, 56l.toLong, 0l.toLong, 46l.toLong))).equals((List[Long](0l.toLong,\
  \ 2l.toLong, 3l.toLong, 6l.toLong, 53l.toLong, 423l.toLong, 423l.toLong, 423l.toLong,\
  \ 1234l.toLong, 145l.toLong, 37l.toLong, 46l.toLong, 56l.toLong, 463l.toLong, 3457l.toLong))));\n\
  \    assert(orderByPoints((List[Long]())).equals((List[Long]())));\n    assert(orderByPoints((List[Long](1l.toLong,\
  \ -11l.toLong, -32l.toLong, 43l.toLong, 54l.toLong, -98l.toLong, 2l.toLong, -3l.toLong))).equals((List[Long](-3l.toLong,\
  \ -32l.toLong, -98l.toLong, -11l.toLong, 1l.toLong, 2l.toLong, 43l.toLong, 54l.toLong))));\n\
  \    assert(orderByPoints((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
  \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong))).equals((List[Long](1l.toLong,\
  \ 10l.toLong, 2l.toLong, 11l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong,\
  \ 7l.toLong, 8l.toLong, 9l.toLong))));\n    assert(orderByPoints((List[Long](0l.toLong,\
  \ 6l.toLong, 6l.toLong, -76l.toLong, -21l.toLong, 23l.toLong, 4l.toLong))).equals((List[Long](-76l.toLong,\
  \ -21l.toLong, 0l.toLong, 4l.toLong, 23l.toLong, 6l.toLong, 6l.toLong))));\n   \
  \ }\n\n}\n"
completions: ["        val numsMap = nums.toMap\n        val sums = nums.map(_.toString.toInt).map(_.toInt)\n\
    \        val sumsMap = sums.toMap\n        val result = nums.map(x => sumsMap.getOrElse(x,\
    \ 0)).sortWith(_ < _)\n        result.map(x => numsMap.getOrElse(x, 0)).filter(x\
    \ => x == 0)", "        val sums = nums.map(_.toString.toInt).groupBy(_._1).mapValues(_.map(_._2)).mapValues(_.sum)\n\
    \        sums.toList.sortBy(_._2).map(_._1)", "        val numsSorted = nums.sortBy(x\
    \ => x.toString.toInt)\n        val numsSortedWithIndex = numsSorted.zipWithIndex\n\
    \        val numsSortedWithIndexSortedBySum = numsSortedWithIndex.sortBy(x =>\
    \ x._2.toString.toInt)\n        numsSortedWithIndexSortedBySum.map(x => x._1)",
  "        val sums = nums.map(_.toString.toInt).map(_.sum)\n        val sorted =\
    \ sums.toList.sortWith((x, y) => x < y)\n        sorted.map(x => nums.indexOf(x)).sortWith((x,\
    \ y) => x < y)", "        val numsSorted = nums.sortBy(_.toString.toInt)\n   \
    \     val sums = numsSorted.map(_.toString.toInt).map(_.sum)\n        val sortedSums\
    \ = sums.toList.sortBy(_._1).reverse\n        numsSorted.zip(sortedSums).map(x\
    \ => x._1 + x._2)", "        val numsSorted = nums.sortBy(x => x.toString.toInt)\n\
    \        val sums = numsSorted.map(_.toString.toInt).map(x => x * x)\n       \
    \ val sumsSorted = sums.sortBy(x => x)\n        numsSorted.zip(sumsSorted).map(x\
    \ => x._1 - x._2)", "        val digits = nums.map(_.toString.toInt)\n       \
    \ val sums = digits.map(_.sum)\n        val sorted = sums.toList.sortBy(_)\n \
    \       val result = sorted.map(nums.indexOf(_)).toList\n        result", "  \
    \      val sums = nums.map(_.toString.toInt).map(_.toInt)\n        val sumsMap\
    \ = sums.toMap\n        val sorted = nums.sortWith( (a,b) => sumsMap(a) - sumsMap(b)\
    \ )\n        sorted.toList", "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.toList)\n\
    \        val numsMapSorted = numsMap.sortBy(x => x._2.sum)\n        numsMapSorted.map(_._1).reverse",
  "        val sums = nums.map(_.toString.toInt).map(_.toInt).sum\n        nums.sortBy(_.toString.toInt).map(_.toInt).sortWith(_.sum\
    \ < sums)", "        val numsSorted = nums.toList.sortWith((x, y) => x.toString.toLong\
    \ - y.toString.toLong)\n        numsSorted.map(x => x.toString.toLong).reverse",
  "        val numsMap = nums.groupBy(x => x.toString.map(_.digit).sum)\n        numsMap.map(x\
    \ => x._2).sortWith(_ < _)", "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.toList)\n\
    \        val numsMapSorted = numsMap.sortBy(x => x._2.sum)\n        val numsMapSortedKeys\
    \ = numsMapSorted.map(_._1)\n        val numsMapSortedValues = numsMapSorted.map(_._2)\n\
    \        numsMapSortedKeys.zip(numsMapSortedValues).toList", "        val sums\
    \ = nums.map(_.toString.toInt).map(_.sum)\n        val sorted = sums.toList.sortWith((x,\
    \ y) => x < y)\n        sorted.map(x => nums(x))", "        val numsMap = nums.groupBy(x\
    \ => x.toString.map(_.toInt).sum).mapValues(_.toList)\n        numsMap.map{case\
    \ (sum, nums) => nums.sortWith(x => x.toString.map(_.toInt).sum == sum)}", " \
    \       val numsSorted = nums.toList.sortWith((x, y) => x.toString.toLong - y.toString.toLong)\n\
    \        numsSorted.map(_.toString.toLong).toList", "        val numsMap = nums.groupBy(x\
    \ => x.toString.toInt).mapValues(_.toList)\n        val sortedNums = numsMap.mapValues(_.sortBy(_.toString.toInt))\n\
    \        val result = sortedNums.map(_._2).flatten.toList\n        result", " \
    \       val sums = nums.map(_.toString.toInt).map(_.sum)\n        val sorted =\
    \ sums.toList.sortBy(_)\n        sorted.map(nums.indexOf(_))", "        val numsMap\
    \ = nums.toMap\n        val numsMapSorted = numsMap.sortBy(_._1).reverse\n   \
    \     numsMapSorted.map(_._2).reverse", "        var sum = 0L\n        var index\
    \ = 0L\n        var result = new mutable.ListBuffer[Long]()\n        for (i <-\
    \ nums) {\n            sum += i\n            if (sum > 0) {\n                result.add(index)\n\
    \            }\n            index += 1\n        }\n        result.toList"]
stop_tokens:
- "\n    }\n"
