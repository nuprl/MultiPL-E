name: HumanEval_145_order_by_points
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function which sorts the given list of integers\n    // in ascending\
  \ order according to the sum of their digits.\n    // Note: if there are several\
  \ items with similar sum of their digits,\n    // order them based on their index\
  \ in original list.\n    // For example:\n    // >>> order_by_points([1, 11, -1,\
  \ -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([]) == []\n  \
  \  def orderByPoints(nums : List[Long]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(orderByPoints((List[Long](1l.toLong,\
  \ 11l.toLong, -1l.toLong, -11l.toLong, -12l.toLong))).equals((List[Long](-1l.toLong,\
  \ -11l.toLong, 1l.toLong, -12l.toLong, 11l.toLong))));\n    assert(orderByPoints((List[Long](1234l.toLong,\
  \ 423l.toLong, 463l.toLong, 145l.toLong, 2l.toLong, 423l.toLong, 423l.toLong, 53l.toLong,\
  \ 6l.toLong, 37l.toLong, 3457l.toLong, 3l.toLong, 56l.toLong, 0l.toLong, 46l.toLong))).equals((List[Long](0l.toLong,\
  \ 2l.toLong, 3l.toLong, 6l.toLong, 53l.toLong, 423l.toLong, 423l.toLong, 423l.toLong,\
  \ 1234l.toLong, 145l.toLong, 37l.toLong, 46l.toLong, 56l.toLong, 463l.toLong, 3457l.toLong))));\n\
  \    assert(orderByPoints((List[Long]())).equals((List[Long]())));\n    assert(orderByPoints((List[Long](1l.toLong,\
  \ -11l.toLong, -32l.toLong, 43l.toLong, 54l.toLong, -98l.toLong, 2l.toLong, -3l.toLong))).equals((List[Long](-3l.toLong,\
  \ -32l.toLong, -98l.toLong, -11l.toLong, 1l.toLong, 2l.toLong, 43l.toLong, 54l.toLong))));\n\
  \    assert(orderByPoints((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
  \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong))).equals((List[Long](1l.toLong,\
  \ 10l.toLong, 2l.toLong, 11l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong,\
  \ 7l.toLong, 8l.toLong, 9l.toLong))));\n    assert(orderByPoints((List[Long](0l.toLong,\
  \ 6l.toLong, 6l.toLong, -76l.toLong, -21l.toLong, 23l.toLong, 4l.toLong))).equals((List[Long](-76l.toLong,\
  \ -21l.toLong, 0l.toLong, 4l.toLong, 23l.toLong, 6l.toLong, 6l.toLong))));\n   \
  \ }\n\n}\n"
completions: ["        val numsMap = nums.toMap\n        val sums = nums.map(_.toString.toInt).map(_.toInt)\n\
    \        val sumsMap = sums.toMap\n        val result = nums.map(x => sumsMap.getOrElse(x,\
    \ 0)).sortWith(_ < _)\n        result.map(x => numsMap.getOrElse(x, 0)).filter(x\
    \ => x == 0)", "        val sums = nums.map(_.toString.toInt).groupBy(_._1).mapValues(_.map(_._2)).mapValues(_.sum)\n\
    \        sums.toList.sortBy(_._2).map(_._1)", "        val numsSorted = nums.sortBy(x\
    \ => x.toString.toInt)\n        val numsSortedWithIndex = numsSorted.zipWithIndex\n\
    \        val numsSortedWithIndexSortedBySum = numsSortedWithIndex.sortBy(x =>\
    \ x._2.toString.toInt)\n        numsSortedWithIndexSortedBySum.map(x => x._1)",
  "        val sums = nums.map(_.toString.toInt).map(_.sum)\n        val sorted =\
    \ sums.toList.sortWith((x, y) => x < y)\n        sorted.map(x => nums.indexOf(x)).sortWith((x,\
    \ y) => x < y)", "        val numsSorted = nums.sortBy(_.toString.toInt)\n   \
    \     val sums = numsSorted.map(_.toString.toInt).map(_.sum)\n        val sortedSums\
    \ = sums.toList.sortBy(_._1).reverse\n        numsSorted.zip(sortedSums).map(x\
    \ => x._1 + x._2)", "        val numsSorted = nums.sortBy(x => x.toString.toInt)\n\
    \        val sums = numsSorted.map(_.toString.toInt).map(x => x * x)\n       \
    \ val sumsSorted = sums.sortBy(x => x)\n        numsSorted.zip(sumsSorted).map(x\
    \ => x._1 - x._2)", "        val digits = nums.map(_.toString.toInt)\n       \
    \ val sums = digits.map(_.sum)\n        val sorted = sums.toList.sortBy(_)\n \
    \       val result = sorted.map(nums.indexOf(_)).toList\n        result", "  \
    \      val sums = nums.map(_.toString.toInt).map(_.toInt)\n        val sumsMap\
    \ = sums.toMap\n        val sorted = nums.sortWith( (a,b) => sumsMap(a) - sumsMap(b)\
    \ )\n        sorted.toList", "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.toList)\n\
    \        val numsMapSorted = numsMap.sortBy(x => x._2.sum)\n        numsMapSorted.map(_._1).reverse",
  "        val sums = nums.map(_.toString.toInt).map(_.toInt).sum\n        nums.sortBy(_.toString.toInt).map(_.toInt).sortWith(_.sum\
    \ < sums)", "        val numsSorted = nums.toList.sortWith((x, y) => x.toString.toLong\
    \ - y.toString.toLong)\n        numsSorted.map(x => x.toString.toLong).reverse",
  "        val numsMap = nums.groupBy(x => x.toString.map(_.digit).sum)\n        numsMap.map(x\
    \ => x._2).sortWith(_ < _)", "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.toList)\n\
    \        val numsMapSorted = numsMap.sortBy(x => x._2.sum)\n        val numsMapSortedKeys\
    \ = numsMapSorted.map(_._1)\n        val numsMapSortedValues = numsMapSorted.map(_._2)\n\
    \        numsMapSortedKeys.zip(numsMapSortedValues).toList", "        val sums\
    \ = nums.map(_.toString.toInt).map(_.sum)\n        val sorted = sums.toList.sortWith((x,\
    \ y) => x < y)\n        sorted.map(x => nums(x))", "        val numsMap = nums.groupBy(x\
    \ => x.toString.map(_.toInt).sum).mapValues(_.toList)\n        numsMap.map{case\
    \ (sum, nums) => nums.sortWith(x => x.toString.map(_.toInt).sum == sum)}", " \
    \       val numsSorted = nums.toList.sortWith((x, y) => x.toString.toLong - y.toString.toLong)\n\
    \        numsSorted.map(_.toString.toLong).toList", "        val numsMap = nums.groupBy(x\
    \ => x.toString.toInt).mapValues(_.toList)\n        val sortedNums = numsMap.mapValues(_.sortBy(_.toString.toInt))\n\
    \        val result = sortedNums.map(_._2).flatten.toList\n        result", " \
    \       val sums = nums.map(_.toString.toInt).map(_.sum)\n        val sorted =\
    \ sums.toList.sortBy(_)\n        sorted.map(nums.indexOf(_))", "        val numsMap\
    \ = nums.toMap\n        val numsMapSorted = numsMap.sortBy(_._1).reverse\n   \
    \     numsMapSorted.map(_._2).reverse", "        var sum = 0L\n        var index\
    \ = 0L\n        var result = new mutable.ListBuffer[Long]()\n        for (i <-\
    \ nums) {\n            sum += i\n            if (sum > 0) {\n                result.add(index)\n\
    \            }\n            index += 1\n        }\n        result.toList", " \
    \       val sums = nums.map(x => x.toString.toInt).map(x => x.toInt)\n       \
    \ val sumsSorted = sums.sortWith(_ < _)\n        sumsSorted.map(x => nums.indexOf(x)).sortWith(_\
    \ < _)", "        val sums = nums.map(x => x.toString.toInt).groupBy(x => x).mapValues(_.size)\n\
    \        val sorted = sums.toSeq.sortBy(x => x._2).reverse\n        sorted.map(x\
    \ => nums(x._1))", "        val numsMap = nums.groupBy(x => x.toString.toInt)\n\
    \        val numsMapSorted = numsMap.sortBy(x => x._2.map(y => y.toString.toInt).sum)\n\
    \        numsMapSorted.map(x => x._1).distinct", "        val numsSorted = nums.sortBy(_.toString.toInt)\n\
    \        val sums = numsSorted.map(_.toString.toInt).map(_.sum)\n        val sorted\
    \ = sums.zip(numsSorted).sortBy(_._1).map(_._2)\n        sorted.toList", "   \
    \     val numsMap = nums.groupBy(x => x.toString.map(_.toInt).sum)\n        val\
    \ numsMapSorted = numsMap.sortBy(_._1).map(_._2)\n        numsMapSorted.toList",
  "        val sums = nums.map(_.toString.toInt).map(_.sum)\n        val sorted =\
    \ sums.sortBy(_)\n        sorted.map(nums.indexOf(_))", "        val sums = nums.map(_.toString.toInt).map(_.sum)\n\
    \        val sorted = sums.toList.sortBy(_._1).reverse\n        nums.zip(sorted).map(x\
    \ => x._1 + x._2)", "        val numsMap = nums.groupBy(x => x.toString.toInt)\n\
    \        val numsMapSorted = numsMap.sortBy(x => x._2.sum)\n        numsMapSorted.map(x\
    \ => x._1).reverse", "        val numsMap = nums.groupBy(x => x.toString.map(_.digit).sum)\n\
    \        val sortedNums = numsMap.mapValues(_.toList).values.toList.sortBy(_.sum)\n\
    \        val sortedNumsMap = sortedNums.groupBy(_.sum)\n        val sortedNumsMapList\
    \ = sortedNumsMap.mapValues(_.toList).toList\n        val sortedNumsMapListWithIndex\
    \ = sortedNumsMapList.zipWithIndex.toList\n        val sortedNumsMapListWithIndexWithSum\
    \ = sortedNumsMapListWithIndex.sortBy(_._1.sum)\n        val sortedNumsMapListWithIndexWithSumWithIndex\
    \ = sortedNumsMapListWithIndexWithSum.zipWithIndex.toList\n        val sortedNumsMapListWithIndexWithSumWithIndexWithSum\
    \ = sortedNumsMapListWithIndexWithSumWithIndex.sortBy(_._1.sum)\n        val sortedNumsMapListWithIndexWithSumWithIndexWithSumWithIndex\
    \ = sortedNumsMapListWithIndexWithSumWithIndexWithSum.zipWithIndex.toList\n  \
    \      val sortedNumsMapListWithIndexWithSumWithIndexWithSumWithIndexWithSum =\
    \ sortedNumsMapListWithIndexWithSumWithIndexWithSumWithIndex.sortBy(_._1.sum)\n\
    \        val sortedNumsMapListWithIndexWithSumWithIndexWithSumWithIndexWithSumWithIndex\
    \ = sortedNumsMapListWithIndexWithSumWithIndexWithSumWithIndexWithSum.zipWithIndex.toList\n\
    \        val sortedNumsMapListWithIndexWithSumWithIndexWithSumWithIndexWithSumWithIndexWithSum\
    \ = sortedNumsMapListWithIndexWithSumWithIndexWithSumWithIndexWithSumWithIndexWithSum.sortBy(_._1.sum)\n\
    \        val sortedNumsMapListWithIndexWithSumWithIndexWithSumWithIndexWithSumWithIndexWithSumWithIndex\
    \ = sortedNumsMapListWithIndexWithSumWithIndexWithSumWithIndexWithSumWithIndexWithSum.zipWithIndex.toList\n\
    \        val sortedNumsMapListWithIndexWithSumWithIndexWithSumWithIndexWithSumWithIndexWithSumWithIndexWithSum\
    \ = sortedNumsMapListWithIndexWithSumWithIndexWithSumWithIndexWithSumWithIndexWithSumWithIndexWithSum.sortBy(_._1.sum)\n\
    \        val sortedNumsMapListWithIndexWithSumWithIndexWithSumWithIndexWithSumWithIndexWithSumWithIndexWith",
  "        val numsSorted = nums.toList.sortWith( (a,b) => a.toString.toLong - b.toString.toLong\
    \ )\n        val numsSortedWithIndex = numsSorted.zipWithIndex\n        val sums\
    \ = numsSortedWithIndex.map( x => x._2.toString.toLong ).sum\n        numsSortedWithIndex.map(\
    \ x => x._1 ).filter( x => sums == x.toString.toLong ).sortWith( (a,b) => a.toString.toLong\
    \ - b.toString.toLong )", "        val sums = nums.map(_.toString.toInt).map(_.toInt)\n\
    \        val sorted = sums.sortWith((x, y) => x._2 > y._2)\n        sorted.map(x\
    \ => nums(x))", "        val sums = nums.map(_.toString.toInt).groupBy(_._2).mapValues(_.map(_._1))\n\
    \        val sorted = sums.toSeq.sortBy(_._1).reverse\n        sorted.map(_._2)",
  "        val digits = nums.map(_.toString.toInt)\n        val sums = digits.foldLeft(mutable.Map[Int,\
    \ Int]()){\n            case (acc, digit) => acc + (digit -> (acc.getOrElse(digit,\
    \ 0) + digit))\n        }\n        val sorted = sums.toSeq.sortBy(_._1).map(_._2)\n\
    \        sorted.toList.sortWith(_ < _)", "        val numsSorted = nums.sortWith((a,\
    \ b) => a.toString.toLong - b.toString.toLong)\n        val numsSortedWithIndex\
    \ = numsSorted.zipWithIndex.sortWith((a, b) => a._1 - b._1)\n        numsSortedWithIndex.map(x\
    \ => x._2).reverse", "        val sums = nums.map(_.toString.toInt).map(_.sum)\n\
    \        val sorted = sums.sortBy(_)\n        sorted.map(nums.indexOf(_))", " \
    \       val numsMap = nums.groupBy(x => x.toString.map(_.toInt).sum)\n       \
    \ val numsMapSorted = numsMap.sortBy(x => x._2)\n        numsMapSorted.map(_._1)",
  "        val numsMap = nums.groupBy(x => x.toString.map(_.toInt).sum).mapValues(_.toList)\n\
    \        numsMap.map(_._2).sortWith(_ < _)", "        val sums = nums.map(_.toString.toInt).map(_.sum)\n\
    \        val sorted = sums.toList.sortWith(_ < _)\n        sorted.map(_.toLong)",
  "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n \
    \       val numsMapSorted = numsMap.sortBy(_._2).reverse\n        numsMapSorted.map(_._1).reverse",
  "        val sums = nums.map(_.toString.toInt).map(_.sum)\n        val sorted =\
    \ sums.toList.sortBy(_._1).reverse\n        sorted.map(nums.indexOf(_))", "  \
    \      val sums = nums.map(_.toString.toInt).map(_.sum)\n        val sorted =\
    \ sums.toList.sortBy(_._1).reverse\n        sorted.map(nums.indexOf(_))", "  \
    \      val numsMap = nums.groupBy(x => x.toString.map(_.toInt).sum)\n        numsMap.mapValues(_.toList).values.toList",
  "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.toList).mapValues(_.sortBy(_.toString.toInt))\n\
    \        numsMap.mapValues(_.map(_ + _.toString.toInt)).toList.sortBy(_._1).map(_._2)",
  "        val numsMap = nums.groupBy(x => x.toString.map(_.toInt).sum)\n        val\
    \ sortedNums = numsMap.map(x => x._2).sortBy(x => x.toString.map(_.toInt).sum).map(x\
    \ => x._1)\n        sortedNums", "        val sums = nums.map(_.toString.toInt).map(_.sum)\n\
    \        val sorted = sums.toList.sortBy(_._1).reverse\n        sorted.map(nums.indexOf(_))",
  "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n \
    \       val numsMapSorted = numsMap.sortBy(_._2).reverse\n        numsMapSorted.map(_._1).reverse",
  "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.toList)\n\
    \        numsMap.map(x => (x._1, x._2.map(y => y.toString.toInt).sum)).toList.sortBy(x\
    \ => x._2).map(x => x._1)", "        val numsSorted = nums.sortBy(_ % 10).reverse\n\
    \        val sums = numsSorted.map(x => x.toString.toInt).sum\n        numsSorted.zipWithIndex.sortBy(_._2\
    \ % sums)", "        val sums = nums.map(_.toString.toInt).map(_.toInt)\n    \
    \    val sorted = sums.sortBy(_._1).sortBy(_._2)\n        sorted.map(_.toLong)",
  "        val sums = nums.map(_.toString.toInt).groupBy(_._1).mapValues(_.map(_._2))\n\
    \        sums.toList.sortBy(_._1).map(_._2)", "        val sums = nums.map(_.toString.toInt).map(_.sum)\n\
    \        val sorted = sums.toList.sortBy(_._1).reverse\n        sorted.map(_.toLong)",
  "        val sums = nums.map(_.toString.toInt).map(_.toInt)\n        val sumsSorted\
    \ = sums.sortBy(_._1)\n        sumsSorted.map(sumsSorted.indexOf(_._2))", "  \
    \      val sums = nums.map(_.toString.toInt).map(_.toInt)\n        val sorted\
    \ = sums.sortWith(_ < _)\n        sorted.map(nums.indexOf(_))", "        val numsSorted\
    \ = nums.sortBy(x => x.toString.toInt)\n        val sums = numsSorted.map(_.toString.toInt).map(x\
    \ => x.toInt)\n        val maxSum = sums.max\n        val maxSumIndex = sums.indexOf(maxSum)\n\
    \        numsSorted.zipWithIndex.sortBy(x => sums(x._2)).map(x => nums(x._1)).take(maxSumIndex\
    \ + 1)", "        val sums = nums.map(_.toString.toInt).map(_.toInt)\n       \
    \ val sorted = sums.sortBy(_._1).sortBy(_._2)\n        sorted.map(nums.indexOf(_))",
  "        val sums = nums.map(x => x.toString.toInt).map(x => x.toInt)\n        val\
    \ sorted = sums.sortWith((x, y) => x < y)\n        sorted.map(x => nums(x))",
  "        val sums = nums.map(_.toString.toInt).map(_.toInt).sum\n        nums.sortBy(_.toString.toInt).map(_.toInt).sortWith(sums.compare(_))",
  "        val sums = nums.map(_.toString.toInt).map(_.toInt)\n        val sorted\
    \ = sums.sortBy(_._1).sortBy(_._2)\n        sorted.map(_.toLong)", "        val\
    \ sums = nums.map(_.toString.toInt).map(_.toInt).sum\n        val sorted = nums.sortBy(_.toString.toInt).sortWith(_._2\
    \ > _._2)\n        sorted.map(_.toString.toInt).map(_.toInt).zip(sums).sortWith(_._2\
    \ > _._2).map(_._1)", "        val digits = nums.map(_.toString.toInt)\n     \
    \   val sums = digits.map(_.sum)\n        val sorted = sums.toList.sortWith(_\
    \ < _)\n        val result = nums.map(i => sums.indexOf(i)).sortWith(_ < _)\n\
    \        result.zip(sorted).map(_._1).reverse", "        val numsMap = nums.groupBy(x\
    \ => x.toString.toInt).mapValues(_.size)\n        val numsMapSorted = numsMap.sortBy(_._2).reverse\n\
    \        numsMapSorted.map(_._1).reverse", "        val numsMap = nums.groupBy(x\
    \ => x.toString.map(_.toInt).sum)\n        val result = numsMap.mapValues(_.toList)\n\
    \        result.values.flatten", "        val numsSorted = nums.sortBy(_.toString.toInt)\n\
    \        val sums = numsSorted.map(_.toString.toInt).map(_.sum)\n        val maxSum\
    \ = sums.max\n        numsSorted.map(_.toString.toInt).map(_.sum).filter(_ ==\
    \ maxSum).sortBy(_._1)", "        val sums = nums.map(_.toString.toInt).map(_.toInt)\n\
    \        val sorted = sums.sortBy(_._1).sortBy(_._2)\n        sorted.map(nums.indexOf(_))",
  "        val numsMap = nums.groupBy(x => x.toString.map(_.digit).sum)\n        val\
    \ numsMapSorted = numsMap.sortBy(x => x._1).map(x => x._2)\n        numsMapSorted.toList",
  "        val numsMap = nums.toMap\n        val numsMapSorted = numsMap.sortWith((x,\
    \ y) => x._2 - y._2)\n        numsMapSorted.map(_._1).toList", "        val numsMap\
    \ = nums.groupBy(x => x.toString.map(_.toInt).sum)\n        val numsMapSorted\
    \ = numsMap.sortBy(_._1).reverse\n        numsMapSorted.map(_._2).reverse", " \
    \       val sums = nums.map(_.toString.toInt).map(_.sum)\n        val sorted =\
    \ sums.toList.sortBy(_._1).reverse\n        sorted.map(nums.indexOf(_))", "  \
    \      val sums = nums.map(_.toString.toInt).map(_.toInt)\n        val sorted\
    \ = sums.sortWith(_ < _)\n        sorted.map(_.toLong)", "        val numsMap\
    \ = nums.groupBy(x => x.toString.map(_.toInt).sum)\n        val sortedNums = numsMap.mapValues(_.toList).values.toList.sortBy(_.sum)\n\
    \        val result = sortedNums.map(_.toString).flatten.toList\n        result",
  "        val sums = nums.map(_.toString.toInt).map(_.toInt)\n        val sumsMap\
    \ = sums.toMap\n        val sortedSums = sums.sortBy(_._1)\n        val sortedSumsMap\
    \ = sortedSums.toMap\n        val sortedNums = nums.sortBy(_._1)\n        val\
    \ sortedNumsMap = sortedNums.toMap\n        val sortedNumsMapWithSums = sortedNumsMap.zip(sortedSumsMap)\n\
    \        val sortedNumsMapWithSumsSorted = sortedNumsMapWithSums.sortBy(_._2._1)\n\
    \        val sortedNumsMapWithSumsSortedWithIndex = sortedNumsMapWithSumsSorted.sortBy(_._2._2)\n\
    \        val sortedNumsMapWithSumsSortedWithIndexWithSums = sortedNumsMapWithSumsSortedWithIndex.sortBy(_._1)\n\
    \        val sortedNumsMapWithSumsSortedWithIndexWithSumsSorted = sortedNumsMapWithSumsSortedWithIndexWithSums.sortBy(_._2)\n\
    \        val sortedNumsMapWithSumsSortedWithIndexWithSumsSortedWithIndex = sortedNumsMapWithSumsSortedWithIndexWithSumsSorted.sortBy(_._1)\n\
    \        val sortedNumsMapWithSumsSortedWithIndexWithSumsSortedWithIndexWithSums\
    \ = sortedNumsMapWithSumsSortedWithIndexWithSumsSortedWithIndexWithSums.sortBy(_._2)\n\
    \        val sortedNumsMapWithSumsSortedWithIndexWithSumsSortedWithIndexWithSumsSorted\
    \ = sortedNumsMapWithSumsSortedWithIndexWithSumsSortedWithIndexWithSumsSorted.sortBy(_._1)\n\
    \        val sortedNumsMapWithSumsSortedWithIndexWithSumsSortedWithIndexWithSumsSortedWithIndex\
    \ = sortedNumsMapWithSumsSortedWithIndexWithSumsSortedWithIndexWithSumsSortedWithIndex.sortBy(_._2)\n\
    \        val sortedNumsMapWithSumsSortedWithIndexWithSumsSortedWithIndexWithSumsSortedWithIndexWithSums\
    \ = sortedNumsMapWithSumsSortedWithIndexWithSumsSortedWithIndexWithSumsSortedWithIndexWithSums.sortBy(_._1)\n\
    \        val sortedNumsMapWithSumsSortedWithIndexWithSumsSortedWithIndexWithSumsSortedWithIndexWithSumsSorted\
    \ = sortedNumsMapWithSumsSortedWithIndexWithSumsSortedWith", "        val numsSorted\
    \ = nums.sortBy(_.toString.toInt)\n        val sums = numsSorted.map(_.toString.toInt).map(_.sum)\n\
    \        sums.toList.sortBy(_._1).map(_._2)", "        val sums = nums.map(_.toString.toInt).map(_.sum)\n\
    \        val sorted = sums.toList.sortBy(_._1).reverse\n        sorted.map(nums.indexOf(_))",
  "        val sums = nums.map(x => x.toString.toInt).map(x => x.toInt)\n        val\
    \ sumsSorted = sums.sortWith(_ < _)\n        sumsSorted.map(x => nums.indexOf(x)).sortWith(_\
    \ < _)", "        var sum = 0\n        var index = 0\n        var result: List[Long]\
    \ = List()\n        for (i <- nums) {\n            sum += i\n            if (sum\
    \ > 0) {\n                result += List(index)\n            }\n            index\
    \ += 1\n        }\n        result", "        val sums = nums.map(_.toString.toInt).map(_.toInt).sum\n\
    \        nums.sortBy(_.toString.toInt).map(_.toInt).sortWith((a, b) => sums -\
    \ a + b).toList", "        val sums = nums.map(_.toString.toInt).groupBy(_ % 10).mapValues(_.size)\n\
    \        val sorted = sums.toSeq.sortBy(_._1).map(_._2)\n        sorted.map(nums.indexOf(_))",
  "        val sums = nums.map(_.toString.toInt).map(_.sum)\n        val sorted =\
    \ sums.sortBy(_)\n        sorted.map(nums.indexOf(_))", "        val numsSorted\
    \ = nums.sortWith( (a,b) => a.toString.toLong - b.toString.toLong )\n        numsSorted.reverse",
  "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n \
    \       val sortedNums = numsMap.sortBy(_._2).map(_._1)\n        sortedNums",
  "        var sum = 0L\n        var index = 0\n        var numsCopy = nums.toList\n\
    \        numsCopy.sortWith( (a,b) => { \n            val aDigit = a.toString.toInt\n\
    \            val bDigit = b.toString.toInt\n            val aSum = aDigit + sum\n\
    \            val bSum = bDigit + sum\n            if(aSum > bSum) a else b\n \
    \       })\n        numsCopy.foreach(x => sum += x.toString.toInt)\n        numsCopy",
  "        val numsMap = nums.toMap\n        val numsSorted = nums.sortWith( (a,b)\
    \ => numsMap(a) + numsMap(b) < 0 )\n        numsSorted.toList", "        val sums\
    \ = nums.map(_.toString.toInt).map(_.sum)\n        val sorted = sums.toList.sortBy(_)\n\
    \        sorted.map(nums.indexOf(_))", "        val numsSorted = nums.toList.sortBy(x\
    \ => x.toString.toInt)\n        val sums = numsSorted.map(_.toString.toInt).sum\n\
    \        numsSorted.map(x => sums - x.toString.toInt).sortBy(x => x).reverse",
  "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n \
    \       numsMap.sortBy(_._2).map(_._1)", "        val numsSorted = nums.toList.sortWith(\
    \ (a,b) => a.toString.toLong - b.toString.toLong )\n        numsSorted.toList",
  "        val sums = nums.map(_.toString.toInt).map(_.sum)\n        val sorted =\
    \ sums.toList.sortWith(_ < _)\n        sorted.map(_.toLong)", "        val numsMap\
    \ = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n        val numsMapSorted\
    \ = numsMap.sortBy(_._2).reverse\n        numsMapSorted.map(_._1).reverse", " \
    \       val sums = nums.map(_.toString.toInt).map(_.sum)\n        val sorted =\
    \ sums.toList.sortBy(_._1).reverse\n        val result = sorted.map(nums.indexOf(_))\n\
    \        result", "        val numsSorted = nums.sortBy(x => x.toString.toInt)\n\
    \        val sums = numsSorted.map(_.toString.toInt).map(x => x.toInt)\n     \
    \   val sortedSums = sums.sortBy(x => x)\n        val sortedSumsIndex = sortedSums.zipWithIndex.toMap\n\
    \        val numsSortedWithIndex = numsSorted.zipWithIndex.toMap\n        val\
    \ numsSortedWithIndexWithSum = numsSortedWithIndex.map {\n            case (index,\
    \ value) => if (sums(index) == value) numsSortedWithIndex.updated(index, numsSortedWithIndexWithSum(index))\n\
    \            else numsSortedWithIndex.updated(index, value)\n        }\n     \
    \   numsSortedWithIndexWithSum.toList", "        val digits = nums.map(_.toString.toInt)\n\
    \        val sums = digits.map(_.sum)\n        val sorted = sums.sortBy(_)\n \
    \       val result = nums.map(x => x -> sorted.indexOf(x)).sortBy(_._1).map(_._2)\n\
    \        result", "        val sums = nums.map(_.toString.toInt).map(_.sum)\n\
    \        val sorted = sums.toList.sortBy(_._1).reverse\n        sorted.map(nums.indexOf(_))",
  "        val sums = nums.map(_.toString.toInt).map(_.toInt).sum\n        val sorted\
    \ = nums.sortBy(_.toString.toInt).sortWith(_._2 > _._2)\n        sorted.map(_.toString.toInt).map(_.toLong).map(sums.update(_))",
  "        val sums = nums.map(_.toString.toInt).map(_.toInt)\n        val sorted\
    \ = sums.sortBy(_._1).reverse\n        val result = sorted.map(x => nums.indexOf(x)).sortBy(_._1).reverse\n\
    \        result", "        val numsMap = nums.groupBy(x => x.toString.toInt)\n\
    \        val numsMapSorted = numsMap.sortBy(x => x._2.map(y => y.toString.toInt).sum)\n\
    \        numsMapSorted.map(x => x._1)", "        val numsSorted = nums.sortBy(x\
    \ => x.toString.toInt)\n        val sums = numsSorted.map(_.toString.toInt).map(x\
    \ => x.toInt)\n        val sumsSorted = sums.sortBy(x => x)\n        numsSorted.zip(sumsSorted).sortBy(_._1).map(_._2)",
  "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n \
    \       val numsMapSorted = numsMap.sortBy(_._2).reverse\n        numsMapSorted.map(_._1).reverse",
  "        val sums = nums.map(_.toString.toInt).map(_.toInt)\n        val sorted\
    \ = sums.sortWith(_ < _)\n        val result = sorted.map(i => nums.indexWhere(x\
    \ => x == i)).sortWith(_ < _)\n        result", "        val numsSorted = nums.toList.sortWith((x,\
    \ y) => x.toString.toLong + y.toString.toLong > 0)\n        numsSorted.map(x =>\
    \ x.toString.toLong).reverse", "        val sums = nums.map(_.toString.toInt).groupBy(_\
    \ % 10).mapValues(_.size)\n        sums.sortBy(_._1).map(_._2)", "        val\
    \ sums = nums.map(_.toString.toInt).map(_.toInt)\n        val sorted = sums.sortBy(_._1).sortBy(_._2)\n\
    \        sorted.map(_.toLong).toList", "        val sums = nums.map(_.toString.toInt).map(_.sum)\n\
    \        val sorted = sums.toList.sortBy(_._1).reverse\n        sorted.map(nums(_))",
  "        val numsSorted = nums.sortBy(_ % 10)\n        val sums = numsSorted.map(_.toString.toInt).sum\n\
    \        numsSorted.zipWithIndex.sortBy(_._1 - sums)", "        val numsSorted\
    \ = nums.toList.sortWith((x, y) => x.toString.toLong - y.toString.toLong)\n  \
    \      numsSorted.map(x => x.toString.toLong).toList", "        val sums = nums.map(_.toString.toInt).map(_.sum)\n\
    \        val sorted = sums.sortWith(_ < _)\n        val result = nums.map(_.toString.toInt).map(_.sum).zip(sorted).map\
    \ { case (sum, index) => index }.toList\n        result", "        val numsSorted\
    \ = nums.toList.sortBy(_.toString.toInt)\n        numsSorted.map(_.toLong)", " \
    \       val sums = nums.map(_.toString.toInt).map(_.toInt)\n        val sumsMap\
    \ = sums.toMap\n        val sortedSums = sums.sortBy(_._1).reverse\n        val\
    \ sortedSumsMap = sortedSums.toMap\n        val sortedNums = nums.sortBy(_._1).reverse\n\
    \        val sortedNumsMap = sortedNums.toMap\n        val sortedNumsMapWithIndex\
    \ = sortedNums.zipWithIndex.toMap\n        val sortedSumsMapWithIndex = sortedSums.zipWithIndex.toMap\n\
    \        val sortedSumsMapWithIndexWithIndex = sortedSums.zipWithIndex.zipWithIndex.toMap\n\
    \        val sortedSumsMapWithIndexWithIndexWithIndex = sortedSums.zipWithIndex.zipWithIndex.zipWithIndex.toMap\n\
    \        val sortedSumsMapWithIndexWithIndexWithIndexWithIndex = sortedSums.zipWithIndex.zipWithIndex.zipWithIndex.zipWithIndex.toMap\n\
    \        val sortedSumsMapWithIndexWithIndexWithIndexWithIndexWithIndex = sortedSums.zipWithIndex.zipWithIndex.zipWithIndex.zipWithIndex.zipWithIndex.toMap\n\
    \        val sortedSumsMapWithIndexWithIndexWithIndexWithIndexWithIndexWithIndex\
    \ = sortedSums.zipWithIndex.zipWithIndex.zipWithIndex.zipWithIndex.zipWithIndex.zipWithIndex.toMap\n\
    \        val sortedSumsMapWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWithIndex\
    \ = sortedSums.zipWithIndex.zipWithIndex.zipWithIndex.zipWithIndex.zipWithIndex.zipWithIndex.zipWithIndex.toMap\n\
    \        val sortedSumsMapWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWithIndex\
    \ = sortedSums.zipWithIndex.zipWithIndex.zipWithIndex.zipWithIndex.zipWithIndex.zipWithIndex.zipWithIndex.zipWithIndex.zipWithIndex.toMap\n\
    \        val sortedSumsMapWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWithIndex\
    \ = sortedSums.zipWithIndex.zipWithIndex.zipWithIndex.zipWithIndex.zipWithIndex.zipWithIndex.zipWithIndex.zipWithIndex.zipWithIndex.zipWithIndex.toMap\n\
    \        val sortedSumsMapWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWithIndex\
    \ = sortedSums.zipWithIndex.zipWithIndex.", "        val numsMap = nums.groupBy(x\
    \ => x.toString.toInt).mapValues(_.size)\n        val numsMapSorted = numsMap.sortBy(_._2).reverse\n\
    \        numsMapSorted.map(_._1)", "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n\
    \        val numsMapSorted = numsMap.sortBy(_._2).map(_._1)\n        numsMapSorted.toList",
  "        val sums = nums.map(_.toString.toInt).map(_.sum)\n        val sorted =\
    \ sums.toList.sortBy(_._1).reverse\n        sorted.map(nums.indexOf(_))", "  \
    \      val sums = nums.map(_.toString.toInt).groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val sorted = sums.sortBy(_._1).map(_._2)\n        sorted.toList.sortWith(_\
    \ < _)", "        val numsSorted = nums.sortWith((a, b) => a.toString.toLong -\
    \ b.toString.toLong)\n        val sums = numsSorted.map(_.toString.toLong).map(_.sum)\n\
    \        numsSorted.zip(sums).sortBy(_._1).map(_._2)", "        val numsMap =\
    \ nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n        val numsMapSorted\
    \ = numsMap.sortBy(_._2).reverse\n        numsMapSorted.map(_._1).reverse", " \
    \       val numsSorted = nums.sortBy(x => x.toString.toInt)\n        val sums\
    \ = numsSorted.map(_.toString.toInt).map(x => x * x)\n        val sumsSorted =\
    \ sums.sortBy(x => x)\n        numsSorted.zip(sumsSorted).map(x => (x._1, x._2))",
  "        val sums = nums.map(_.toString.toInt).map(_.toInt).map(_.sum)\n       \
    \ val sorted = sums.toList.sortBy(_._1).reverse\n        sorted.map(nums.indexOf(_))",
  "        val numsSorted = nums.sortBy(_.toString.toInt)\n        val sums = numsSorted.map(_.toString.toInt).map(_.toInt)\n\
    \        val maxSum = sums.max\n        val maxSumIndex = sums.indexOf(maxSum)\n\
    \        numsSorted.zipWithIndex.filter(_._2 == maxSumIndex).map(_._1).reverse",
  "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.length)\n\
    \        val sortedNums = numsMap.sortBy(_._2).map(_._1)\n        sortedNums.toList",
  "        val numsSorted = nums.sortWith((x, y) => x.toString.toLong + y.toString.toLong\
    \ > 0)\n        numsSorted.reverse.map(_.toString.toLong).toList", "        val\
    \ sums = nums.map(_.toString.toInt).groupBy(_._2).mapValues(_.map(_._1))\n   \
    \     sums.toList.sortWith((x, y) => x._1 < y._1).map(_._2)", "        val numsSorted\
    \ = nums.sortBy(_.toString.toInt)\n        val numsSortedWithIndex = numsSorted.zipWithIndex\n\
    \        val numsSortedWithIndexSortedBySum = numsSortedWithIndex.sortBy(_._2.toString.toInt)\n\
    \        numsSortedWithIndexSortedBySum.map(_._1).reverse", "        val numsSorted\
    \ = nums.sortBy(_ % 10)\n        val sums = numsSorted.map(x => x.toString.toInt).sum\n\
    \        numsSorted.map(x => sums - x.toString.toInt).sortBy(_ % 10).reverse",
  "        val sums = nums.map(_.toString.toInt).map(_.toInt)\n        val sorted\
    \ = sums.sortBy(_._1).sortBy(_._2)\n        sorted.map(_.toLong).toList", "  \
    \      val numsMap = nums.map(_.toInt).groupBy(_ % 10).mapValues(_.map(_._1))\n\
    \        numsMap.map(x => (x._1, x._2.map(y => y.toLong).sum)).toList.sortBy(_._2).map(_._1)",
  "        val sums = nums.map(_.toString.toInt).map(_.sum)\n        val sorted =\
    \ sums.toList.sortBy(_)\n        val result = sorted.map(nums.indexOf(_)).toList\n\
    \        result", "        var sum = 0L\n        var index = 0\n        var result:\
    \ List[Long] = List()\n        for (i <- nums) {\n            sum += i\n     \
    \       if (sum > 0) {\n                index += 1\n            }\n        }\n\
    \        for (i <- 0 until nums.length) {\n            sum += nums(i)\n      \
    \      if (sum > 0) {\n                result += nums(index)\n            }\n\
    \        }\n        result", "        var sum = 0L\n        var index = 0\n  \
    \      var result = new mutable.ListBuffer[Long]()\n        for (i <- nums) {\n\
    \            sum += i\n            if (sum > 0) {\n                result.add(index)\n\
    \            }\n            index += 1\n        }\n        result.toList", " \
    \       val numsMap = nums.groupBy(x => x.toString.map(_.toInt).sum)\n       \
    \ val sortedNums = numsMap.mapValues(_.toList).values.flatten.toList\n       \
    \ sortedNums.sortWith((x, y) => x.toString.map(_.toInt).sum - y.toString.map(_.toInt).sum)",
  "        val sums = nums.map(_.toString.toInt).map(_.sum)\n        val sorted =\
    \ sums.toList.sortBy(_._1).reverse\n        sorted.map(nums.indexOf(_))", "  \
    \      val sums = nums.map(_.toString.toInt).map(_.sum)\n        val sorted =\
    \ sums.toList.sortBy(_._1).reverse\n        sorted.map(nums.indexOf(_))", "  \
    \      val sums = nums.map(_.toString.toInt).map(_.toInt).sum\n        nums.sortBy(_.toString.toInt).map(_.toInt).sortWith(sums.compare(_))",
  "        val sums = nums.map(_.toString.toInt).map(_.toInt)\n        val sorted\
    \ = sums.sortBy(_._1).reverse\n        sorted.map(x => nums.indexOf(x)).sortBy(_._1).reverse",
  "        val numsMap = nums.map(n => (n % 10, n)).groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val sortedNums = numsMap.map(n => n._2).sortBy(_ % 10).map(n => n._1)\n\
    \        val sortedNumsMap = sortedNums.map(n => (n % 10, n))\n        val sortedNumsMapSorted\
    \ = sortedNumsMap.sortBy(_._1).map(n => n._2)\n        val sortedNumsMapSorted2\
    \ = sortedNumsMapSorted.sortBy(_._1).map(n => n._2)\n        val sortedNumsMapSorted3\
    \ = sortedNumsMapSorted2.sortBy(_._1).map(n => n._2)\n        val sortedNumsMapSorted4\
    \ = sortedNumsMapSorted3.sortBy(_._1).map(n => n._2)\n        val sortedNumsMapSorted5\
    \ = sortedNumsMapSorted4.sortBy(_._1).map(n => n._2)\n        val sortedNumsMapSorted6\
    \ = sortedNumsMapSorted5.sortBy(_._1).map(n => n._2)\n        val sortedNumsMapSorted7\
    \ = sortedNumsMapSorted6.sortBy(_._1).map(n => n._2)\n        val sortedNumsMapSorted8\
    \ = sortedNumsMapSorted7.sortBy(_._1).map(n => n._2)\n        val sortedNumsMapSorted9\
    \ = sortedNumsMapSorted8.sortBy(_._1).map(n => n._2)\n        val sortedNumsMapSorted10\
    \ = sortedNumsMapSorted9.sortBy(_._1).map(n => n._2)\n        val sortedNumsMapSorted11\
    \ = sortedNumsMapSorted10.sortBy(_._1).map(n => n._2)\n        val sortedNumsMapSorted12\
    \ = sortedNumsMapSorted11.sortBy(_._1).map(n => n._2)\n        val sortedNumsMapSorted13\
    \ = sortedNumsMapSorted12.sortBy(_._1).map(n => n._2)\n        val sortedNumsMapSorted14\
    \ = sortedNumsMapSorted13.sortBy(_._1).map(n => n._2)\n        val sortedNumsMapSorted15\
    \ = sortedNumsMapSorted14.sortBy(_._1).map(n => n._2)\n        val sortedNumsMapSorted16\
    \ = sortedNumsMapSorted15.sortBy(_._1).map(n => n._2)\n        val sortedNumsMapSorted17\
    \ = sortedNumsMapSorted16.sortBy(_._1).map(n => n.", "        val numsMap = nums.groupBy(x\
    \ => x.toString.map(_.toInt).sum)\n        numsMap.map(_._2).sortWith(_ < _)",
  "        val numsMap = nums.groupBy(x => x.toString.map(_.toInt).sum)\n        val\
    \ sortedNums = numsMap.mapValues(_.toList).values.sortBy(_.sum)\n        sortedNums.map(_.head).distinct",
  "        val sums = nums.map(_.toString.toInt).map(_.toInt)\n        val sorted\
    \ = sums.sortBy(_._1).sortBy(_._2)\n        sorted.map(_.toLong)", "        val\
    \ sums = nums.map(_.toString.toInt).map(_.sum)\n        val sorted = sums.toList.sortWith(_\
    \ < _)\n        sorted.map(nums.indexOf(_))", "        val sums = nums.map(_.toString.toInt).map(_.sum)\n\
    \        val sorted = sums.toList.sortBy(_)\n        sorted.map(_.toLong)", " \
    \       val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n\
    \        val numsMapSorted = numsMap.sortBy(_._2).reverse\n        numsMapSorted.map(_._1).reverse",
  "        val numsSorted = nums.sortWith((x, y) => x.toString.toLong - y.toString.toLong)\n\
    \        val numsSortedWithIndex = numsSorted.zipWithIndex\n        val sums =\
    \ numsSortedWithIndex.map(_._2.toString.toLong).sum\n        numsSortedWithIndex.map(_._1).sortWith((x,\
    \ y) => sums - x.toString.toLong - y.toString.toLong)", "        val numsMap =\
    \ nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n        val numsMapSorted\
    \ = numsMap.sortBy(_._2).reverse\n        numsMapSorted.map(_._1).reverse", " \
    \       val sums = nums.map(_.toString.toInt).map(_.sum)\n        val sorted =\
    \ sums.toList.sortWith((x, y) => x < y)\n        sorted.map(x => nums(x))", " \
    \       val sums = nums.map(_.toString.toInt).map(_.sum)\n        val sorted =\
    \ sums.toList.sortBy(_._1).reverse\n        sorted.map(nums.indexOf(_))", "  \
    \      val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n \
    \       val numsMapSorted = numsMap.sortBy(_._2).reverse\n        numsMapSorted.map(_._1)",
  "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.toList)\n\
    \        val sortedNums = numsMap.mapValues(_.sortWith(_ < _)).mapValues(_.flatten).flatten\n\
    \        sortedNums", "        val sums = nums.map(_.toString.toInt).map(_.sum)\n\
    \        val sorted = sums.toList.sortBy(_._1).reverse\n        nums.zipWithIndex.filter(_._1\
    \ == sorted).map(_._2).reverse", "        val sums = nums.map(_.toString.toInt).map(_.toInt).sum\n\
    \        nums.sortBy(_.toString.toInt).map(_.toInt).sortWith(_.sum < sums)", " \
    \       val sums = nums.map(_.toString.toInt).map(_.toInt)\n        val sorted\
    \ = sums.sortBy(_._1).reverse\n        sorted.map(x => nums.indexOf(x)).sortBy(_._1).reverse",
  "        val numsSorted = nums.sortBy(_.toString.toInt)\n        val sums = numsSorted.map(_.toString.toInt).map(_.sum)\n\
    \        val result = numsSorted.zip(sums).sortBy(_._1).map(_._2)\n        result",
  "        val numsSorted = nums.toList.sortWith((x, y) => x.toString.toLong - y.toString.toLong)\n\
    \        numsSorted.map(_.toString.toLong)", "        val numsSorted = nums.toList.sortWith(\
    \ (a,b) => a.toString.toLong - b.toString.toLong )\n        numsSorted.reverse.map(_.toLong)",
  "        val sums = nums.map(_.toString.toInt).groupBy(_._1).mapValues(_.map(_._2))\n\
    \        sums.toList.sortBy(_._1).map(_._2)", "        val numsMap = nums.groupBy(x\
    \ => x.toString.map(_.toInt).sum)\n        numsMap.map(_._2).sortWith(_ < _)",
  "        val sums = nums.map(_.toString.toInt).map(_.sum)\n        val sorted =\
    \ sums.toList.sortBy(_._1).reverse\n        val result = sorted.map(nums.indexOf(_))\n\
    \        result", "        val sums = nums.map(_.toString.toInt).groupBy(_._1).mapValues(_.map(_._2)).mapValues(_.sum)\n\
    \        val sorted = sums.toSeq.sortBy(_._1).map(_._2)\n        sorted.toList",
  "        val numsSorted = nums.toList.sortWith((x, y) => x.toString.toLong - y.toString.toLong)\n\
    \        numsSorted.map(_.toString.toLong).distinct", "        val numsMap = nums.groupBy(x\
    \ => x.toString.map(_.toInt).sum)\n        val numsMapSorted = numsMap.sortBy(_._1).map(_._2)\n\
    \        numsMapSorted.toList", "        val sums = nums.map(_.toString.toInt).map(_.toInt).map(_.sum)\n\
    \        val sorted = sums.sortBy(_)\n        val result = sorted.map(i => nums.indexWhere(x\
    \ => x == i))\n        result", "        val numsMap = nums.map(x => (x, x)).groupBy(_._1).mapValues(_.map(_._2)).toMap\n\
    \        val numsMapSorted = numsMap.sortBy(_._2.sum).map(_._1)\n        numsMapSorted.toList",
  "        val sums = nums.map(_.toString.toInt).map(_.toInt).map(_.sum)\n       \
    \ val sorted = sums.toList.sortBy(_._1).reverse\n        sorted.map(_.toLong)",
  "        val sums = nums.map(_.toString.toInt).groupBy(_._2).mapValues(_.map(_._1))\n\
    \        val sorted = sums.toList.sortBy(_._1).sortBy(_._2)\n        sorted.map(_._1).distinct",
  "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n \
    \       val sortedNums = numsMap.mapValues(x => x.toLong).sortBy(_._1).map(_._2)\n\
    \        sortedNums.toList", "        val sums = nums.map(_.toString.toInt).map(_.toInt)\n\
    \        val sorted = sums.sortWith(_ < _)\n        val result = sorted.map(i\
    \ => nums.indexOf(i)).toList\n        result", "        val numsMap = nums.groupBy(x\
    \ => x.toString.toInt).mapValues(_.size)\n        val numsMapSorted = numsMap.sortBy(_._2).map(_._1)\n\
    \        numsMapSorted.toList", "        val numsSorted = nums.sortBy(x => x.toString.toInt)\n\
    \        val sums = numsSorted.map(_.toString.toInt).map(x => x.toInt)\n     \
    \   sums.groupBy(x => x).map(x => (x._1, x._2.map(y => numsSorted.indexOf(y)).toList))",
  "        val sums = nums.map(_.toString.toInt).map(_.sum)\n        val sorted =\
    \ sums.toList.sortBy(_._1).reverse\n        sorted.map(_.toLong)", "        val\
    \ numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n        val\
    \ numsMapSorted = numsMap.sortBy(_._2).reverse\n        numsMapSorted.map(_._1).reverse",
  "        val numsMap = nums.toMap\n        val numsMapSorted = numsMap.sortWith((x,\
    \ y) => x._2 > y._2)\n        numsMapSorted.toList.sortWith((x, y) => x._1 < y._1)",
  "        val numsSorted = nums.sortBy(_.toString.toInt)\n        val sums = numsSorted.map(_.toString.toInt).map(_.sum)\n\
    \        val sortedSums = sums.toList.sortBy(_._1).reverse\n        numsSorted.zip(sortedSums).map(x\
    \ => x._1 + x._2)", "        val sums = nums.map(_.toString.toInt).map(_.sum)\n\
    \        val sorted = sums.toList.sortBy(_._1).reverse\n        sorted.map(nums.indexOf(_))",
  "        val sums = nums.map(_.toString.toInt).map(_.sum)\n        val sorted =\
    \ sums.toList.sortBy(_._1).reverse\n        sorted.map(nums.indexOf(_))", "  \
    \      val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n \
    \       val sortedNums = numsMap.sortBy(_._2).map(_._1)\n        sortedNums",
  "        val sums = nums.map(_.toString.toInt).map(_.sum)\n        val sorted =\
    \ sums.sortBy(_)\n        val result = nums.sortWith((a, b) => sums.indexOf(a)\
    \ > sums.indexOf(b))\n        result", "        val numsMap = nums.groupBy(x =>\
    \ x.toString.toInt).mapValues(_.size)\n        val numsMapSorted = numsMap.sortBy(_._2).reverse\n\
    \        numsMapSorted.map(_._1).reverse", "        val numsMap = nums.groupBy(x\
    \ => x.toString.toInt).mapValues(_.size)\n        val numsMapSorted = numsMap.sortBy(_._2).reverse\n\
    \        numsMapSorted.map(_._1).toList", "        val numsMap = nums.groupBy(x\
    \ => x.toString.toInt).mapValues(_.size)\n        val sortedNums = numsMap.mapValues(x\
    \ => x.toInt).sortBy(x => x).mapValues(x => x.toLong)\n        sortedNums.toList.sortWith((x,\
    \ y) => x._1 < y._1)", "        val numsSorted = nums.sortBy(x => x.toString.toInt)\n\
    \        val sums = numsSorted.map(x => x.toString.toInt).map(x => x * x)\n  \
    \      val maxSum = sums.max\n        val maxSumIndex = sums.indexOf(maxSum)\n\
    \        numsSorted.take(maxSumIndex).reverse.sortBy(x => x.toString.toInt)",
  "        val sums = nums.map(_.toString.toInt).map(_.toInt)\n        val sorted\
    \ = sums.sortBy(_._1).sortBy(_._2)\n        sorted.map(_.toLong).toList", "  \
    \      val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.toList)\n\
    \        val numsMapSorted = numsMap.sortBy(x => x._2.sum).mapValues(_.head)\n\
    \        numsMapSorted.toList.sortBy(x => x._1)", "        val sums = nums.map(_.toString.toInt).groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val sorted = sums.toSeq.sortBy(_._1).map(_._2)\n        sorted.toList",
  "        val digits = nums.map(_.toString.toInt)\n        val sum = digits.reduce((a,\
    \ b) => a + b)\n        val sorted = nums.sortWith((a, b) => sum - a + b.toString.toInt)\n\
    \        sorted.reverse", "        val numsMap = nums.groupBy(x => x.toString.map(_.toInt).sum)\n\
    \        numsMap.map(_._2).sortWith(_ < _)", "        val sums = nums.map(_.toString.toInt).groupBy(_._2).mapValues(_.map(_._1))\n\
    \        sums.toList.sortBy(_._1).map(_._2)", "        val sums = nums.map(_.toString.toInt).map(_.toInt)\n\
    \        val sumsSorted = sums.sortBy(_._1).reverse\n        sumsSorted.map(sumsSorted.indexOf(_))",
  "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.toList)\n\
    \        val numsMapSorted = numsMap.sortBy(x => x._2.sum)\n        numsMapSorted.map(_._1).reverse",
  "        val numsSorted = nums.sortWith((x, y) => x.toString.toLong - y.toString.toLong)\n\
    \        val numsSortedWithIndex = numsSorted.zipWithIndex.sortWith((x, y) =>\
    \ x._1 - y._1)\n        numsSortedWithIndex.map(_._2).reverse", "        val numsMap\
    \ = nums.groupBy(x => x.toString.map(_.toInt).sum)\n        val numsMapSorted\
    \ = numsMap.sortBy(x => x._2)\n        numsMapSorted.map(x => x._1).reverse",
  "        val sums = nums.map(_.toString.toInt).map(_.toInt).map(_.sum)\n       \
    \ val sorted = sums.toList.sortBy(_._1).reverse\n        val result = sorted.map(nums.indexOf(_))\n\
    \        result", "        val sums = nums.map(_.toString.toInt).map(_.toInt)\n\
    \        val sumsMap = sums.toMap\n        val sortedSums = sums.sortWith((a,\
    \ b) => sumsMap(b) - sumsMap(a))\n        sortedSums.map(sumsMap(_)).toList",
  "        val digits = nums.map(_.toString.toInt)\n        val sums = digits.foldLeft(Map[Int,\
    \ Int]())((sums, digit) => sums + (digit -> (sums(digit) + digit)))\n        sums.values.toList.sortWith((a,\
    \ b) => a < b).map(sums.keys.toList)", "        val numsSorted = nums.sortBy(_.toString.toInt)\n\
    \        val sums = numsSorted.map(_.toString.toInt).map(x => x.toInt).sum\n \
    \       numsSorted.zip(sums).sortBy(_._1).map(_._2)", "        val sums = nums.map(_.toString.toInt).map(_.sum)\n\
    \        val sorted = sums.toList.sortBy(_._1).reverse\n        sorted.map(nums.indexOf(_))",
  "        val sums = nums.map(_.toString.toInt).map(_.sum)\n        val sorted =\
    \ sums.toList.sortBy(_._1).reverse\n        sorted.map(nums.indexOf(_))", "  \
    \      val sums = nums.map(_.toString.toInt).map(_.sum)\n        val sorted =\
    \ sums.toList.sortBy(_._1).reverse\n        sorted.map(_.toLong).toList", "  \
    \      val sums = nums.map(_.toString.toInt).map(_.toInt)\n        val sorted\
    \ = sums.sortWith(_ < _)\n        val result = sorted.map(i => nums.indexOf(i))\n\
    \        result.toList", "        val numsSorted = nums.sortBy(_.toString.toInt)\n\
    \        val sums = numsSorted.map(_.toString.toInt).map(_.toInt)\n        val\
    \ sumsSorted = sums.sortBy(_._1)\n        val sumsSortedMap = sumsSorted.toMap\n\
    \        numsSorted.map(_.toString.toInt).map(_.toInt).map(sumsSortedMap.get(_))",
  "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n \
    \       val numsMapSorted = numsMap.sortBy(_._2).reverse\n        val numsMapSortedWithIndex\
    \ = numsMapSorted.map{ case (k, v) => (k, v)}\n        numsMapSortedWithIndex.map{\
    \ case (k, v) => (v, k)}.toList", "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.toList)\n\
    \        val numsMapSorted = numsMap.sortBy(x => x._2.sum).mapValues(_.map(_._1))\n\
    \        numsMapSorted.map(_._2).flatten.toList", "        val sums = nums.map(_.toString.toInt).map(_.toInt)\n\
    \        val sorted = sums.sortBy(_._1).sortBy(_._2)\n        sorted.map(_.toLong).toList",
  "        val numsSorted = nums.toList.sortBy(_ % 10).reverse\n        numsSorted.map(x\
    \ => nums.indexOf(x)).sortBy(_ % 10).reverse", "        val numsMap = nums.groupBy(x\
    \ => x.toString.map(_.toInt).sum).mapValues(_.toList)\n        numsMap.map(_._1).sortWith(_\
    \ < _)"]
stop_tokens:
- "\n    }\n"
