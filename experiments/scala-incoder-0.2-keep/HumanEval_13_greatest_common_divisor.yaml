name: HumanEval_13_greatest_common_divisor
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return a greatest common divisor of two integers a and b\n    // >>> greatest_common_divisor(3,\
  \ 5)\n    // 1\n    // >>> greatest_common_divisor(25, 15)\n    // 5\n    def greatestCommonDivisor(a\
  \ : Long, b : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l),\
  \ (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n  \
  \  assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l),\
  \ (60l)) == (12l));\n    }\n\n}\n"
completions: ["        val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n\
    \        if (gcd == 0) gcd else a", "        val lcm = a / b\n        val gcd\
    \ = a % b\n        if (gcd == 0) lcm else greatestCommonDivisor(lcm, gcd)", " \
    \       val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n       \
    \ if (gcd > a) gcd else a", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        if (gcd > 0) gcd else a", "        if (b == 0) a\n        else\
    \ greatestCommonDivisor(b, a % b)", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        if (gcd == 0) gcd else gcd(gcd, a)", "        val lcm = a /\
    \ b\n        val gcd = a % b\n        if (gcd == 0) lcm else greatestCommonDivisor(lcm,\
    \ gcd)", "        if (b == 0) a\n        else greatestCommonDivisor(b, a % b)",
  "        val lcm = a / b\n        val gcd = a % b\n        if (gcd == 0) lcm\n \
    \       else greatestCommonDivisor(lcm, gcd)", "        if (b == 0) a\n      \
    \  else greatestCommonDivisor(b, a % b)", "        val gcd = if (b == 0) a else\
    \ greatestCommonDivisor(b, a % b)\n        if (gcd == 0) gcd else greatestCommonDivisor(gcd,\
    \ a)", "        val r = a / b\n        val q = a % b\n        if (b > 0) {\n \
    \           greatestCommonDivisor(b, r)\n        } else {\n            r\n   \
    \     }", "        val lcm = math.lcm(a, b)\n        val gcd = a / lcm\n     \
    \   lcm", "        val a = a % b\n        val b = b % a\n        if (a == 0) b\n\
    \        else if (b == 0) a\n        else greatestCommonDivisor(a, b)", "    \
    \    if (b == 0) a\n        else greatestCommonDivisor(b, a % b)", "        val\
    \ gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n        if (gcd ==\
    \ 0) gcd else greatestCommonDivisor(a, gcd)", "        val gcd = if (b == 0) a\
    \ else greatestCommonDivisor(b, a % b)\n        if (gcd > a) gcd else a", "  \
    \      val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n        if\
    \ (gcd == 0) a else gcd", "        val lcm = math.lcm(a, b)\n        val gcd =\
    \ math.gcd(a, b)\n        if (gcd == 0) gcd else lcm", "        if (b == 0) a\n\
    \        else greatestCommonDivisor(b, a % b)"]
stop_tokens:
- "\n    }\n"
