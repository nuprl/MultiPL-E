name: HumanEval_27_flip_case
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // For a given string, flip lowercase characters to uppercase and uppercase\
  \ to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n    def flipCase(string\
  \ : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(flipCase((\"\")).equals((\"\
  \")));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
  These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE\
  \ VIOLENT ENDS\")));\n    }\n\n}\n"
completions: ["        val chars = string.split(\"\")\n        chars.map(c => if (c.toLowerCase\
    \ == c) c.toUpperCase else c.toLowerCase)", "        val chars = string.split('')\n\
    \        chars.foldLeft(\"\") { (result, char) =>\n            if (char.isLower)\
    \ result + char.toUpperCase\n            else result + char.toLowerCase\n    \
    \    }", "        val chars = string.chars\n        val flipped = mutable.ListBuffer[Char]()\n\
    \        chars.foreach { char =>\n            if (char.isLower) flipped += char.toUpperCase\n\
    \            else flipped += char.toLowerCase\n        }\n        flipped.mkString",
  "        string.foldLeft(\"\") {\n            case (acc, c) => acc + (if (c.isUpper)\
    \ c.toLower else c.toUpper)\n        }", "        val charArray = string.toCharArray\n\
    \        val result = new StringBuilder\n        charArray.foreach { c =>\n  \
    \          if (c.toLowerCase == c) result.append(c.toUpperCase)\n            else\
    \ result.append(c.toLowerCase)\n        }\n        return result.toString", " \
    \       val result = new StringBuilder()\n        for (i <- 0 until string.length)\
    \ {\n            val c = string.charAt(i)\n            if (c >= 'a' && c <= 'z')\
    \ {\n                result.append((c - 'a').toUpper + string.charAt(i + 1))\n\
    \            } else {\n                result.append(c)\n            }\n     \
    \   }\n        return result.toString()", "        val chars = string.chars\n\
    \        val flipped = mutable.ListBuffer.empty[Char]\n        for (i <- 0 until\
    \ chars.length) {\n            flipped += chars(i).swapCase\n        }\n     \
    \   flipped.mkString", "        val chars = string.chars\n        val flipped\
    \ = mutable.ListBuffer[Char]()\n        for (i <- 0 until chars.length)\n    \
    \        if (chars(i).toLowerCase == chars(i).toUpperCase && chars(i).toUpperCase\
    \ != chars(i).toLowerCase)\n                flipped += chars(i).toLowerCase\n\
    \            else\n                flipped += chars(i).toUpperCase\n        flipped.mkString",
  "        string.foldLeft(\"\"){ (result, char) =>\n            val upper = char.toUpper\n\
    \            val lower = char.toLower\n            if (upper == lower) result\
    \ + upper\n            else result + lower\n        }", "        val result =\
    \ new StringBuilder()\n        for (i <- 0 until string.length)\n            if\
    \ (string.charAt(i).toLowerCase == string.charAt(i).toUpperCase && string.charAt(i)\
    \ != 'A')\n                result.append(string.charAt(i).toLowerCase)\n     \
    \       else\n                result.append(string.charAt(i))\n        return\
    \ result.toString()", "        val chars = string.split(\"\")\n        chars.foldLeft(\"\
    \"){ (result, c) =>\n            if (c.isLower) result + c.toUpper\n         \
    \   else result + c.toLower\n        }", "        val chars = string.split(\"\"\
    ).toList\n        chars.foldLeft(\"\") { (result, c) =>\n            if (c.isUpper)\
    \ result + c.toLower\n            else result + c.toUpper\n        }", "     \
    \   string.foldLeft(\"\") {\n            case (acc, c) =>\n                acc\
    \ + (if (c.isUpper) c.toLower else c.toUpper)\n        }", "        val result\
    \ = new StringBuilder\n        for(i <- 0 until string.length){\n            val\
    \ c = string.charAt(i)\n            if(c == c.toUpperCase || c == c.toLowerCase\
    \ ){\n                result.append(c.toUpperCase)\n            } else {\n   \
    \             result.append(c)\n            }\n        }\n        return result.toString",
  "        val chars = string.chars\n        val flipped = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until chars.length) {\n            flipped += chars(i).swapCase\n\
    \        }\n        flipped.mkString", "        val chars = string.chars\n   \
    \     val flipped = mutable.ListBuffer.empty[Char]\n        for (i <- 0 until\
    \ chars.length)\n            if (chars(i).toLowerCase == chars(i))\n         \
    \       flipped += chars(i).toUpperCase\n            else\n                flipped\
    \ += chars(i).toLowerCase\n        flipped.toString.reverse", "        val result\
    \ = new StringBuilder\n        for (i <- 0 until string.length)\n            if\
    \ (string.charAt(i) >= 'a' && string.charAt(i) <= 'z')\n                result.append(string.charAt(i).toUpper)\n\
    \            else\n                result.append(string.charAt(i))\n        return\
    \ result.toString", "        val chars = string.split('')\n        val flipped\
    \ = mutable.ListBuffer[Char]()\n        for (i <- 0 until chars.length)\n    \
    \        flipped += chars(i).swapCase()\n        flipped.mkString", "        string.foldLeft(\"\
    \"){ (result, char) =>\n            val upper = char.toUpper\n            val\
    \ lower = char.toLower\n            result + upper + lower\n        }", "    \
    \    val chars = string.chars\n        val flipped = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until chars.length)\n            flipped += chars(i).swapCase()\n\
    \        flipped.mkString"]
stop_tokens:
- "\n    }\n"
