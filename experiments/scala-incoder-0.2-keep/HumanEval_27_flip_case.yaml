name: HumanEval_27_flip_case
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // For a given string, flip lowercase characters to uppercase and uppercase\
  \ to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n    def flipCase(string\
  \ : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(flipCase((\"\")).equals((\"\
  \")));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
  These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE\
  \ VIOLENT ENDS\")));\n    }\n\n}\n"
completions: ["        val chars = string.split(\"\")\n        chars.map(c => if (c.toLowerCase\
    \ == c) c.toUpperCase else c.toLowerCase)", "        val chars = string.split('')\n\
    \        chars.foldLeft(\"\") { (result, char) =>\n            if (char.isLower)\
    \ result + char.toUpperCase\n            else result + char.toLowerCase\n    \
    \    }", "        val chars = string.chars\n        val flipped = mutable.ListBuffer[Char]()\n\
    \        chars.foreach { char =>\n            if (char.isLower) flipped += char.toUpperCase\n\
    \            else flipped += char.toLowerCase\n        }\n        flipped.mkString",
  "        string.foldLeft(\"\") {\n            case (acc, c) => acc + (if (c.isUpper)\
    \ c.toLower else c.toUpper)\n        }", "        val charArray = string.toCharArray\n\
    \        val result = new StringBuilder\n        charArray.foreach { c =>\n  \
    \          if (c.toLowerCase == c) result.append(c.toUpperCase)\n            else\
    \ result.append(c.toLowerCase)\n        }\n        return result.toString", " \
    \       val result = new StringBuilder()\n        for (i <- 0 until string.length)\
    \ {\n            val c = string.charAt(i)\n            if (c >= 'a' && c <= 'z')\
    \ {\n                result.append((c - 'a').toUpper + string.charAt(i + 1))\n\
    \            } else {\n                result.append(c)\n            }\n     \
    \   }\n        return result.toString()", "        val chars = string.chars\n\
    \        val flipped = mutable.ListBuffer.empty[Char]\n        for (i <- 0 until\
    \ chars.length) {\n            flipped += chars(i).swapCase\n        }\n     \
    \   flipped.mkString", "        val chars = string.chars\n        val flipped\
    \ = mutable.ListBuffer[Char]()\n        for (i <- 0 until chars.length)\n    \
    \        if (chars(i).toLowerCase == chars(i).toUpperCase && chars(i).toUpperCase\
    \ != chars(i).toLowerCase)\n                flipped += chars(i).toLowerCase\n\
    \            else\n                flipped += chars(i).toUpperCase\n        flipped.mkString",
  "        string.foldLeft(\"\"){ (result, char) =>\n            val upper = char.toUpper\n\
    \            val lower = char.toLower\n            if (upper == lower) result\
    \ + upper\n            else result + lower\n        }", "        val result =\
    \ new StringBuilder()\n        for (i <- 0 until string.length)\n            if\
    \ (string.charAt(i).toLowerCase == string.charAt(i).toUpperCase && string.charAt(i)\
    \ != 'A')\n                result.append(string.charAt(i).toLowerCase)\n     \
    \       else\n                result.append(string.charAt(i))\n        return\
    \ result.toString()", "        val chars = string.split(\"\")\n        chars.foldLeft(\"\
    \"){ (result, c) =>\n            if (c.isLower) result + c.toUpper\n         \
    \   else result + c.toLower\n        }", "        val chars = string.split(\"\"\
    ).toList\n        chars.foldLeft(\"\") { (result, c) =>\n            if (c.isUpper)\
    \ result + c.toLower\n            else result + c.toUpper\n        }", "     \
    \   string.foldLeft(\"\") {\n            case (acc, c) =>\n                acc\
    \ + (if (c.isUpper) c.toLower else c.toUpper)\n        }", "        val result\
    \ = new StringBuilder\n        for(i <- 0 until string.length){\n            val\
    \ c = string.charAt(i)\n            if(c == c.toUpperCase || c == c.toLowerCase\
    \ ){\n                result.append(c.toUpperCase)\n            } else {\n   \
    \             result.append(c)\n            }\n        }\n        return result.toString",
  "        val chars = string.chars\n        val flipped = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until chars.length) {\n            flipped += chars(i).swapCase\n\
    \        }\n        flipped.mkString", "        val chars = string.chars\n   \
    \     val flipped = mutable.ListBuffer.empty[Char]\n        for (i <- 0 until\
    \ chars.length)\n            if (chars(i).toLowerCase == chars(i))\n         \
    \       flipped += chars(i).toUpperCase\n            else\n                flipped\
    \ += chars(i).toLowerCase\n        flipped.toString.reverse", "        val result\
    \ = new StringBuilder\n        for (i <- 0 until string.length)\n            if\
    \ (string.charAt(i) >= 'a' && string.charAt(i) <= 'z')\n                result.append(string.charAt(i).toUpper)\n\
    \            else\n                result.append(string.charAt(i))\n        return\
    \ result.toString", "        val chars = string.split('')\n        val flipped\
    \ = mutable.ListBuffer[Char]()\n        for (i <- 0 until chars.length)\n    \
    \        flipped += chars(i).swapCase()\n        flipped.mkString", "        string.foldLeft(\"\
    \"){ (result, char) =>\n            val upper = char.toUpper\n            val\
    \ lower = char.toLower\n            result + upper + lower\n        }", "    \
    \    val chars = string.chars\n        val flipped = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until chars.length)\n            flipped += chars(i).swapCase()\n\
    \        flipped.mkString", "        string.foldLeft(\"\") {\n            case\
    \ (acc, c) => acc + (if (c.isUpper) c.toLower else c.toUpper)\n        }", " \
    \       string.foldLeft(\"\") {\n            case (acc, c) => acc + (if (c.isUpper)\
    \ c.toLower else c.toUpper)\n        }", "        val chars = string.chars\n \
    \       val flipped = mutable.ListBuffer.empty[Char]\n        chars.foreach {\
    \ c =>\n            flipped += if (c.isLower) c.toUpper else c.toLower\n     \
    \   }\n        flipped.mkString", "        val result = new StringBuilder\n  \
    \      string.foreach(c => if (c.isLower) c.toUpper else c.toLower)\n        result.toString",
  "        val chars = string.split(\"\").toList\n        chars.reverse.foldLeft(\"\
    \") {\n            case (acc, c) => acc + (if (c.isUpper) c.toLower else c.toUpper)\n\
    \        }", "        val chars = string.chars\n        val result = new StringBuilder\n\
    \        chars.foreach { c =>\n            val isUpper = c.toUpper == c\n    \
    \        val isLower = c.toLower == c\n            if (isUpper && isLower) {\n\
    \                result.append((c.toUpper))\n            } else if (isUpper) {\n\
    \                result.append((c.toLower))\n            } else {\n          \
    \      result.append(c)\n            }\n        }\n        result.toString", " \
    \       val result = new StringBuilder\n        for (i <- 0 until string.length)\n\
    \            if (string.charAt(i) >= 'a' && string.charAt(i) <= 'z')\n       \
    \         result.append(string.charAt(i).toUpperCase)\n            else\n    \
    \            result.append(string.charAt(i))\n        result.toString", "    \
    \    val result = new StringBuilder()\n        for (i <- 0 until string.length)\
    \ {\n            val c = string.charAt(i)\n            if (c >= 'a' && c <= 'z')\
    \ {\n                result.append((c - 'a').toUpper + string.charAt(i+1))\n \
    \           } else if (c >= 'A' && c <= 'Z') {\n                result.append((c\
    \ - 'A').toUpper + string.charAt(i+1))\n            } else {\n               \
    \ result.append(c)\n            }\n        }\n        return result.toString()",
  "        val chars = string.chars\n        val flipped = mutable.ListBuffer.empty[Char]\n\
    \        for (i <- 0 until chars.length) {\n            flipped += chars(i).swapCase\n\
    \        }\n        flipped.mkString", "        val result = new StringBuilder\n\
    \        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n\
    \            if (c.isUpper) {\n                result.append(c.toLower)\n    \
    \        } else {\n                result.append(c)\n            }\n        }\n\
    \        return result.toString", "        val chars = string.chars\n        val\
    \ result = new StringBuilder\n        for (i <- 0 until chars.length) {\n    \
    \        val c = chars(i)\n            if (c.isUpper) {\n                result.append(c.toLower)\n\
    \            } else {\n                result.append(c)\n            }\n     \
    \   }\n        return result.toString", "        val result = new StringBuilder\n\
    \        for (i <- 0 until string.length)\n            if (string.charAt(i).toLowerCase\
    \ == string.charAt(i).toUpperCase && string.charAt(i) != 'I')\n              \
    \  result.append(string.charAt(i).toLowerCase)\n            else\n           \
    \     result.append(string.charAt(i))\n        return result.toString", "    \
    \    string.foldLeft(\"\") {\n            case (acc, c) => acc + (if (c.isLower)\
    \ c.toUpper else c.toLower)\n        }", "        val result = new StringBuilder()\n\
    \        for (i <- 0 until string.length)\n            if (string.charAt(i) >=\
    \ 'a' && string.charAt(i) <= 'z')\n                result.append((string.charAt(i)\
    \ - 'a').toUpper + string.charAt(i))\n            else if (string.charAt(i) >=\
    \ 'A' && string.charAt(i) <= 'Z')\n                result.append((string.charAt(i)\
    \ - 'A').toUpper + string.charAt(i))\n            else\n                result.append(string.charAt(i))\n\
    \        return result.toString()", "        val chars = string.chars\n      \
    \  val result = new StringBuilder\n        for (i <- 0 until chars.length)\n \
    \           result.append(chars(i).swapCase)\n        result.toString", "    \
    \    val chars = string.chars\n        val flipped = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until chars.length)\n            flipped += chars(i).swapCase\n\
    \        flipped.toString.toLowerCase", "        val result = new StringBuilder()\n\
    \        for (i <- 0 until string.length)\n            result.append(string.charAt(i).toUpper)\n\
    \            result.append(string.charAt(i).toLower)\n        result.toString()",
  "        string.foldLeft(\"\"){ (result, char) =>\n            val upperCase = char.toUpper\n\
    \            val lowerCase = char.toLower\n            result + upperCase + lowerCase\n\
    \        }", "        val chars = string.chars\n        val flipped = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until chars.length)\n            if (chars(i).toLowerCase\
    \ == chars(i))\n                flipped += chars(i).toUpperCase\n            else\n\
    \                flipped += chars(i).toLowerCase\n        flipped.mkString", " \
    \       val result = new StringBuilder()\n        for (i <- 0 until string.length)\
    \ {\n            val c = string.charAt(i)\n            if (c.isLower) {\n    \
    \            result.append((c.toUpper))\n            } else {\n              \
    \  result.append((c.toLower))\n            }\n        }\n        return result.toString()",
  "        val result = new StringBuilder\n        for (i <- 0 until string.length)\
    \ {\n            val c = string.charAt(i)\n            if (c.isLower) {\n    \
    \            result.append((c.toUpper))\n            } else {\n              \
    \  result.append((c.toLower))\n            }\n        }\n        return result.toString",
  "        val result = new StringBuilder\n        for (i <- 0 until string.length)\n\
    \            if (string.charAt(i) >= 'a' && string.charAt(i) <= 'z')\n       \
    \         result.append((string.charAt(i) - 'a').toUpper + string.charAt(i))\n\
    \            else if (string.charAt(i) >= 'A' && string.charAt(i) <= 'Z')\n  \
    \              result.append((string.charAt(i) - 'A').toUpper + string.charAt(i))\n\
    \            else\n                result.append(string.charAt(i))\n        return\
    \ result.toString", "        val result = new StringBuilder\n        for(i <-\
    \ 0 until string.length){\n            val c = string.charAt(i)\n            if(c\
    \ == c.toUpperCase || c == c.toLowerCase ){\n                result.append(c)\n\
    \            }\n            else{\n                result.append(c.toUpperCase)\n\
    \            }\n        }\n        return result.toString", "        val chars\
    \ = string.chars.toList\n        chars.reverse.foldLeft(\"\")( (acc, c) => acc\
    \ + c.toUpperCase + c.toLowerCase )", "        val result = new StringBuilder\n\
    \        for (i <- 0 until string.length)\n            if (string.charAt(i) >=\
    \ 'a' && string.charAt(i) <= 'z')\n                result.append(string.charAt(i).toUpper)\n\
    \            else\n                result.append(string.charAt(i))\n        return\
    \ result.toString", "        val chars = string.split(\"\")\n        val result\
    \ = new StringBuilder\n        for (i <- 0 until chars.length) {\n           \
    \ val c = chars(i)\n            if (c.isLower) {\n                result += c.toUpperCase\n\
    \            } else {\n                result += c.toLowerCase\n            }\n\
    \        }\n        result.toString", "        val chars = string.split(\"\")\n\
    \        val flipped = chars.map(c => if (c.isUpper) c.toLower else c.toUpper)\n\
    \        val flipped_string = flipped.mkString(\"\")\n        return flipped_string",
  "        val chars = string.chars\n        val flipped = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until chars.length){\n            flipped += chars(i).toUpper\n\
    \            flipped += chars(i).toLower\n        }\n        flipped.mkString",
  "        val result = string.map(c => if (c.isLower) c.toUpper else c.toLower)\n\
    \        result.toString", "        val chars = string.split(\"\")\n        val\
    \ flipped = mutable.ListBuffer[Char]()\n        for (i <- 0 until chars.length)\n\
    \            flipped += chars(i).swapCase\n        flipped.mkString", "      \
    \  val chars = string.chars\n        val flipped = mutable.ListBuffer[Char]()\n\
    \        chars.foreach { c =>\n            val flippedChar = if (c.toLowerCase\
    \ == c) c.toUpperCase else c.toLowerCase\n            flipped += flippedChar\n\
    \        }\n        flipped.mkString", "        val chars = string.chars\n   \
    \     val flipped = mutable.ListBuffer.empty[Char]\n        for (i <- 0 until\
    \ chars.length) {\n            flipped += chars(i).swapCase\n        }\n     \
    \   flipped.mkString", "        val result = new StringBuilder\n        for(i\
    \ <- string.toCharArray) {\n            val c = i.toUpper\n            val l =\
    \ i.toLower\n            result.append(l)\n            result.append(c)\n    \
    \    }\n        result.toString", "        val result = string.foldLeft(\"\"){\n\
    \            case(acc, c) => acc + (if (c.isUpper) c.toLower else c.toUpper)\n\
    \        }\n        result", "        val result = new StringBuilder\n       \
    \ for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n \
    \           if (c.isLower) result.append(c.toUpperCase)\n            else result.append(c.toLowerCase)\n\
    \        }\n        return result.toString", "        val chars = string.split(\"\
    \")\n        chars.foldLeft(\"\") { (result, c) =>\n            val upper = c.toUpperCase\n\
    \            val lower = c.toLowerCase\n            if (upper != lower) {\n  \
    \              result + upper\n            } else {\n                result +\
    \ lower\n            }\n        }", "        val chars = string.chars\n      \
    \  val flipped = mutable.ListBuffer[Char]()\n        chars.foreach { c =>\n  \
    \          if (c.toLowerCase == c) flipped += c.toUpperCase\n            else\
    \ flipped += c.toLowerCase\n        }\n        flipped.mkString", "        val\
    \ chars = string.split('')\n        chars.foldLeft(\"\") {\n            case (acc,\
    \ c) => acc + (if (c.isUpper) c.toLower else c.toUpper)\n        }", "       \
    \ val chars = string.chars.toList\n        val flipped = mutable.ListBuffer.empty[Char]\n\
    \        chars.foreach { c =>\n            if (c.isUpper) flipped += c.toUpper\n\
    \            else flipped += c.toLower\n        }\n        flipped.mkString",
  "        val result = new StringBuilder()\n        for (i <- 0 until string.length)\
    \ {\n            val c = string.charAt(i)\n            if (c.isLower) {\n    \
    \            result.append((c.toUpper))\n            } else {\n              \
    \  result.append((c.toLower))\n            }\n        }\n        return result.toString()",
  "        val chars = string.chars\n        val flipped = mutable.ListBuffer.empty[Char]\n\
    \        chars.foreach { c =>\n            flipped += if (c.toLowerCase == c)\
    \ c.toUpperCase else c.toLowerCase\n        }\n        flipped.mkString", "  \
    \      val result = new StringBuilder\n        for (i <- 0 until string.length)\n\
    \            if (string.charAt(i).toLowerCase == string.charAt(i).toUpperCase\
    \ )\n                result.append((string.charAt(i).toUpperCase + string.charAt(i).toLowerCase))\n\
    \            else\n                result.append(string.charAt(i))\n        return\
    \ result.toString", "        val chars = string.chars\n        val result = new\
    \ StringBuilder\n        for (i <- 0 until chars.length) {\n            val c\
    \ = chars(i)\n            if (c.isLower) {\n                result.append((chars.apply(i).toUpper))\n\
    \            } else {\n                result.append((chars.apply(i).toLower))\n\
    \            }\n        }\n        result.toString", "        val chars = string.chars\n\
    \        val flipped = mutable.ListBuffer[Char]()\n        for(i <- 0 until chars.length){\n\
    \            flipped += chars(i).swapCase\n        }\n        flipped.toString.toLowerCase",
  "        val chars = string.split(\"\")\n        chars.foldLeft(\"\") {\n      \
    \      case (acc, c) => acc + (if (c.isLower) c.toUpper else c.toLower)\n    \
    \    }", "        val chars = string.chars\n        val result = new StringBuilder\n\
    \        for(i <- 0 until chars.length){\n            val c = chars(i)\n     \
    \       if(c.isLower){\n                result.append(c.toUpperCase)\n       \
    \     } else {\n                result.append(c.toLowerCase)\n            }\n\
    \        }\n        return result.toString", "        val result = new StringBuilder\n\
    \        string.foreach(c => {\n            val upperCase = c.toUpperCase\n  \
    \          val lowerCase = c.toLowerCase\n            result.append(upperCase)\n\
    \            result.append(lowerCase)\n        })\n        result.toString", " \
    \       val chars = string.split(\"\").toList\n        chars.reverse.foldLeft(string)\
    \ {\n            case (acc, c) => acc + c.toUpperCase\n        }", "        val\
    \ result = new StringBuilder\n        for (i <- 0 until string.length) {\n   \
    \         val c = string.charAt(i)\n            if (c.isLower) {\n           \
    \     result ++= c.toUpperCase\n            } else {\n                result ++=\
    \ c.toLowerCase\n            }\n        }\n        result.toString", "       \
    \ val chars = string.chars\n        val flipped = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until chars.length) {\n            flipped += chars(i).swapCase\n\
    \        }\n        flipped.toString.toLowerCase", "        string.foldLeft(\"\
    \"){\n            case (acc, c) => acc + (if (c.isUpper) c.toLower else c.toUpper)\n\
    \        }", "        val chars = string.chars\n        val flipped = mutable.ArrayBuffer.empty[Char]\n\
    \        for (i <- 0 until chars.length) {\n            flipped += chars(i).swapCase\n\
    \        }\n        flipped.mkString", "        val chars = string.split('')\n\
    \        val flipped = chars.map(c => if (c.isLower) c.toUpper else c.toLower)\n\
    \        val flipped_string = flipped.mkString(\"\")\n        return flipped_string",
  "        val result = new StringBuilder\n        for (i <- 0 until string.length)\
    \ {\n            val c = string.charAt(i)\n            if (c >= 'a' && c <= 'z')\
    \ {\n                result.append((c - 'a').toUpper)\n            } else if (c\
    \ >= 'A' && c <= 'Z') {\n                result.append((c - 'A').toUpper)\n  \
    \          } else {\n                result.append(c)\n            }\n       \
    \ }\n        return result.toString", "        val chars = string.chars\n    \
    \    val result = new StringBuilder\n        for (i <- 0 until chars.length) {\n\
    \            val c = chars(i)\n            if (c.isLower) {\n                result\
    \ += c.toUpperCase\n            } else {\n                result += c.toLowerCase\n\
    \            }\n        }\n        result.toString", "        string.foldLeft(\"\
    \"){ (result, c) =>\n            result + c.toUpperCase\n        }", "       \
    \ val result = new StringBuilder\n        for (i <- 0 until string.length) {\n\
    \            val c = string.charAt(i)\n            if (c.toUpperCase == c) result.append(c.toUpperCase)\n\
    \            else result.append(c.toLowerCase)\n        }\n        return result.toString",
  "        val chars = string.split(\"\")\n        val result = chars.foldLeft(\"\"\
    ){ (result, c) =>\n            val upper = c.toUpperCase\n            val lower\
    \ = c.toLowerCase\n            result + upper + lower\n        }\n        result",
  "        string.foldLeft(\"\") {\n            case (acc, c) =>\n               \
    \ acc + (if (c.isUpper) c.toLower else c.toUpper)\n        }", "        val result\
    \ = new StringBuilder\n        for (i <- 0 until string.length) {\n          \
    \  if (string(i) >= 'a' && string(i) <= 'z') {\n                result.append(string(i)\
    \ - 'a')\n            } else if (string(i) >= 'A' && string(i) <= 'Z') {\n   \
    \             result.append(string(i) - 'A')\n            } else {\n         \
    \       result.append(string(i))\n            }\n        }\n        return result.toString",
  "        val chars = string.split(\"\")\n        val flipped = mutable.ArrayBuffer.empty[Char]\n\
    \        for (i <- 0 until chars.length)\n            flipped += chars(i).toLowerCase\n\
    \        flipped.toString.toLowerCase", "        val result = new StringBuilder\n\
    \        for(i <- 0 until string.length)\n            if(string.charAt(i).toLowerCase\
    \ == string.charAt(i).toUpperCase && string.charAt(i) != 'A')\n              \
    \  result.append((string.charAt(i).toUpperCase + string.charAt(i).toLowerCase))\n\
    \            else\n                result.append(string.charAt(i))\n        return\
    \ result.toString", "        val result = new StringBuilder()\n        string.foreach(c\
    \ => if (c.isUpper) c.toLower else c.toUpper)\n        result.toString", "   \
    \     val chars = string.split(\"\").toList\n        chars.reverse.foldLeft(\"\
    \")( (acc, c) => acc + (if (c.isUpper) c.toLower else c.toUpper) )", "       \
    \ val result = new StringBuilder\n        for (i <- 0 until string.length)\n \
    \           result.append(string.charAt(i).toUpperCase)\n            result.append(string.charAt(i).toLowerCase)\n\
    \        result.toString", "        val result = new StringBuilder\n        for(i\
    \ <- 0 until string.length)\n            result.append(if(string.charAt(i) >=\
    \ 'a' && string.charAt(i) <= 'z') string.charAt(i).toUpperCase else string.charAt(i).toLowerCase)\n\
    \        result.toString", "        val chars = string.split(\"\")\n        val\
    \ result = new StringBuilder()\n        chars.foreach(c => {\n            val\
    \ upper = c.toUpperCase\n            val lower = c.toLowerCase\n            if\
    \ (upper != lower) {\n                result.append(upper)\n                result.append(lower)\n\
    \            } else {\n                result.append(c)\n            }\n     \
    \   })\n        result.toString()", "        string.foldLeft(\"\"){ (result, char)\
    \ =>\n            if (char >= 'a' && char <= 'z') {\n                result +\
    \ char.toUpper\n            } else if (char >= 'A' && char <= 'Z') {\n       \
    \         result + char.toLower\n            } else {\n                result\
    \ + char\n            }\n        }", "        val chars = string.chars\n     \
    \   val flipped = mutable.ListBuffer[Char]()\n        for(i <- 0 until chars.length)\n\
    \            flipped += chars(i).swapCase\n        flipped.toString.toLowerCase",
  "        val result = new StringBuilder\n        for (i <- 0 until string.length)\
    \ {\n            val c = string.charAt(i)\n            if (c.isUpper) {\n    \
    \            result += c.toUpperCase\n            } else {\n                result\
    \ += c.toLowerCase\n            }\n        }\n        return result.toString",
  "        val result = new StringBuilder\n        for (i <- 0 until string.length)\n\
    \            if (string.charAt(i) >= 'a' && string.charAt(i) <= 'z')\n       \
    \         result.append(string.charAt(i).toUpper)\n            else\n        \
    \        result.append(string.charAt(i))\n        return result.toString", " \
    \       string.foldLeft(\"\"){ (result, char) =>\n            if (char >= 'a'\
    \ && char <= 'z') {\n                result += char.toUpper\n            } else\
    \ if (char >= 'A' && char <= 'Z') {\n                result += char.toLower\n\
    \            } else {\n                result += char\n            }\n       \
    \ }", "        val chars = string.chars\n        val result = new StringBuilder\n\
    \        for(i <- 0 until chars.length){\n            val c = chars(i)\n     \
    \       if(c.toLowerCase == c){\n                result.append((c.toUpperCase))\n\
    \            }\n            else{\n                result.append(c)\n        \
    \    }\n        }\n        return result.toString", "        val result = new\
    \ StringBuilder\n        for (i <- 0 until string.length) {\n            val c\
    \ = string.charAt(i)\n            if (Character.isLowerCase(c)) {\n          \
    \      result.append((char) c.toUpperCase)\n            } else {\n           \
    \     result.append((char) c.toLowerCase)\n            }\n        }\n        return\
    \ result.toString", "        val result = new StringBuilder\n        for (i <-\
    \ 0 until string.length)\n            if (string.charAt(i) >= 'a' && string.charAt(i)\
    \ <= 'z')\n                result.append(string.charAt(i).toUpper)\n         \
    \   else\n                result.append(string.charAt(i))\n        return result.toString",
  "        val chars = string.chars\n        val flipped = mutable.ListBuffer[Char]()\n\
    \        chars.foreach { c =>\n            val flippedChar = if (c.isLower) c.toUpper\
    \ else c.toLower\n            flipped += flippedChar\n        }\n        flipped.mkString",
  "        val chars = string.split(\"\")\n        chars.foldLeft(\"\"){\n       \
    \     case (acc, c) => acc + (if (c.isLower) c.toUpper else c.toLower)\n     \
    \   }", "        val result = new StringBuilder\n        for (i <- 0 until string.length)\
    \ {\n            val c = string.charAt(i)\n            if (c.isUpper) {\n    \
    \            result ++= c.toUpperCase\n            } else {\n                result\
    \ ++= c.toLowerCase\n            }\n        }\n        result.toString", "   \
    \     val result = new StringBuilder\n        for (i <- 0 until string.length)\n\
    \            if (string.charAt(i) >= 'a' && string.charAt(i) <= 'z')\n       \
    \         result.append((string.charAt(i) - 'a' + 'A').toString)\n           \
    \ else\n                result.append(string.charAt(i))\n        return result.toString",
  '        string.map(c => if (c.isLower) c.toUpper else c.toLower)', "        val\
    \ result = new StringBuilder()\n        for (i <- 0 until string.length) {\n \
    \           val c = string.charAt(i)\n            if (c.isLower) {\n         \
    \       result ++= c.toUpperCase\n            } else {\n                result\
    \ ++= c.toLowerCase\n            }\n        }\n        return result.toString()",
  "        val result = new StringBuilder\n        for (i <- 0 until string.length)\
    \ {\n            val c = string.charAt(i)\n            if (c.isLower) result.append(c.toUpperCase)\n\
    \            else result.append(c.toLowerCase)\n        }\n        return result.toString",
  "        val result = new StringBuilder\n        for (i <- 0 until string.length)\
    \ {\n            val c = string.charAt(i)\n            if (c >= 'a' && c <= 'z')\
    \ {\n                result.append((c - 'a').toUpper)\n            } else if (c\
    \ >= 'A' && c <= 'Z') {\n                result.append((c - 'A').toUpper)\n  \
    \          } else {\n                result.append(c)\n            }\n       \
    \ }\n        return result.toString", "        val result = new StringBuilder\n\
    \        string.foreach(c => {\n            val cc = c.toUpperCase\n         \
    \   if (cc != c) result.append(cc)\n            else result.append(c)\n      \
    \  })\n        result.toString", "        val result = new StringBuilder\n   \
    \     for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n\
    \            if (c.isLower) {\n                result += c.toUpperCase\n     \
    \       } else {\n                result += c.toLowerCase\n            }\n   \
    \     }\n        return result.toString", "        val result = new StringBuilder\n\
    \        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n\
    \            if (c.isLower) {\n                result += c.toUpperCase\n     \
    \       } else {\n                result += c.toLowerCase\n            }\n   \
    \     }\n        return result.toString", "        string.foldLeft(\"\") {\n \
    \           case (acc, c) => acc + (if (c.isUpper) c.toLower else c.toUpper)\n\
    \        }", "        val chars = string.chars\n        val flipped = mutable.ListBuffer.empty[Char]\n\
    \        for (i <- 0 until chars.length) {\n            flipped += chars(i).swapCase\n\
    \        }\n        flipped.mkString", "        val chars = string.chars\n   \
    \     val flipped = mutable.ArrayBuffer.empty[Char]\n        for (i <- 0 until\
    \ chars.length) {\n            flipped += chars(i).swapCase\n        }\n     \
    \   flipped.mkString", "        val chars = string.chars\n        val flipped\
    \ = mutable.ListBuffer.empty[Char]\n        for (i <- 0 until chars.length) {\n\
    \            flipped += chars(i).swapCase\n        }\n        flipped.mkString",
  "        val chars = string.split('')\n        chars.map( c => if (c.isLower) c.toUpper\
    \ else c.toLower).mkString", "        val chars = string.chars\n        val flipped\
    \ = mutable.ListBuffer.empty[Char]\n        for (i <- 0 until chars.length) {\n\
    \            flipped += chars(i).swapCase\n        }\n        flipped.mkString",
  "        val chars = string.split('')\n        val result = new StringBuilder\n\
    \        for(i <- 0 until chars.length){\n            val c = chars(i)\n     \
    \       val uc = c.toUpperCase\n            val lc = c.toLowerCase\n         \
    \   result.append(uc)\n            result.append(lc)\n        }\n        return\
    \ result.toString", "        val result = new StringBuilder()\n        for (i\
    \ <- 0 until string.length) {\n            val c = string.charAt(i)\n        \
    \    if (c.isLower) {\n                result.append((c.toUpper))\n          \
    \  } else {\n                result.append((c.toLower))\n            }\n     \
    \   }\n        return result.toString()", "        val result = new StringBuilder\n\
    \        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n\
    \            if (c.isLower) result.append(c.toUpperCase) else result.append(c.toLowerCase)\n\
    \        }\n        return result.toString", "        string.foldLeft(\"\"){\n\
    \            case (acc, c) => acc + (if (c.isUpper) c.toLower else c.toUpper)\n\
    \        }", "        val result = new StringBuilder\n        for (i <- 0 until\
    \ string.length) {\n            val c = string.charAt(i)\n            val upper\
    \ = Character.isUpperCase(c)\n            val lower = Character.isLowerCase(c)\n\
    \            if (upper && !lower) {\n                result.append((char) ('A'\
    \ + (c - 'A' + 26)))\n            } else if (lower && !upper) {\n            \
    \    result.append((char) ('a' + (c - 'a' + 26)))\n            } else {\n    \
    \            result.append(c)\n            }\n        }\n        return result.toString",
  "        string.foldLeft(\"\"){\n            case (acc, c) => acc + (if (c.isUpper)\
    \ c.toLower else c.toUpper)\n        }", "        val chars = string.split(\"\"\
    ).map(_.toUpperCase)\n        val result = chars.mkString(\"\")\n        result",
  "        val chars = string.chars\n        val flipped = mutable.ArrayBuffer.empty[Char]\n\
    \        chars.foreach { c =>\n            if (c.isUpper) flipped += c.toLower\n\
    \            else flipped += c.toUpper\n        }\n        flipped.mkString",
  "        val result = new StringBuilder\n        for (i <- 0 until string.length)\n\
    \            if (string.charAt(i) >= 'a' && string.charAt(i) <= 'z')\n       \
    \         result.append((string.charAt(i) - 'a').toUpper + string.charAt(i))\n\
    \            else if (string.charAt(i) >= 'A' && string.charAt(i) <= 'Z')\n  \
    \              result.append((string.charAt(i) - 'A').toUpper + string.charAt(i))\n\
    \            else\n                result.append(string.charAt(i))\n        return\
    \ result.toString", "        val chars = string.split(\"\")\n        val flipped\
    \ = mutable.ListBuffer.empty[Char]\n        for (i <- 0 until chars.length)\n\
    \            flipped += chars(i).swapCase\n        flipped.mkString", "      \
    \  val chars = string.chars\n        val flipped = mutable.ListBuffer[Char]()\n\
    \        chars.foreach { c =>\n            flipped += if (c.isUpper) c.toLower\
    \ else c.toUpper\n        }\n        flipped.mkString", "        val chars = string.chars\n\
    \        val flipped = mutable.ListBuffer[Char]()\n        chars.foreach { c =>\n\
    \            flipped += if (c.toUpperCase == c) c.toLowerCase else c.toUpperCase\n\
    \        }\n        flipped.toString.reverse", "        val chars = string.chars\n\
    \        val flipped = mutable.ListBuffer[Char]()\n        chars.foreach { c =>\n\
    \            c match {\n                case 'a' -> 'A'\n                case\
    \ 'b' -> 'B'\n                case 'c' -> 'C'\n                case 'd' -> 'D'\n\
    \                case 'e' -> 'E'\n                case 'f' -> 'F'\n          \
    \      case 'g' -> 'G'\n                case 'h' -> 'H'\n                case\
    \ 'i' -> 'I'\n                case 'j' -> 'J'\n                case 'k' -> 'K'\n\
    \                case 'l' -> 'L'\n                case 'm' -> 'M'\n          \
    \      case 'n' -> 'N'\n                case 'o' -> 'O'\n                case\
    \ 'p' -> 'P'\n                case 'q' -> 'Q'\n                case 'r' -> 'R'\n\
    \                case 's' -> 'S'\n                case 't' -> 'T'\n          \
    \      case 'u' -> 'U'\n                case 'v' -> 'V'\n                case\
    \ 'w' -> 'W'\n                case 'x' -> 'X'\n                case 'y' -> 'Y'\n\
    \                case 'z' -> 'Z'\n                case _ -> flipped += c\n   \
    \         }\n        }\n        flipped.toString.toUpperCase", "        val chars\
    \ = string.chars\n        val flipped = mutable.ListBuffer[Char]()\n        for\
    \ (i <- 0 until chars.length)\n            if (chars(i).toLowerCase == chars(i).toUpperCase\
    \ && chars(i).toUpperCase != chars(i).toLowerCase)\n                flipped +=\
    \ chars(i).toLowerCase\n            else\n                flipped += chars(i).toUpperCase\n\
    \        flipped.mkString", "        val result = new StringBuilder\n        for\
    \ (i <- 0 until string.length)\n            if (string.charAt(i) >= 'a' && string.charAt(i)\
    \ <= 'z')\n                result.append((string.charAt(i) - 'a' + 'A').toString)\n\
    \            else\n                result.append(string.charAt(i))\n        return\
    \ result.toString", "        string.foldLeft(\"\"){ (result, char) =>\n      \
    \      if (char >= 'a' && char <= 'z')\n                result + char.toUpper\n\
    \            else if (char >= 'A' && char <= 'Z')\n                result + char.toLower\n\
    \            else\n                result + char\n        }", "        val chars\
    \ = string.chars\n        val flipped = mutable.ListBuffer[Char]()\n        for\
    \ (i <- 0 until chars.length)\n            if (chars(i).toLowerCase == chars(i).toUpperCase\
    \ )\n                flipped += chars(i).toLowerCase\n            else\n     \
    \           flipped += chars(i).toUpperCase\n        flipped.mkString", "    \
    \    val chars = string.chars\n        val result = new StringBuilder\n      \
    \  for (i <- 0 until chars.length) {\n            val c = chars(i)\n         \
    \   if (c.isUpper) {\n                result.append(c.toLower)\n            }\
    \ else {\n                result.append(c)\n            }\n        }\n       \
    \ return result.toString", "        string.foldLeft(\"\"){\n            case (acc,\
    \ c) => acc + (if (c.isUpper) c.toLower else c.toUpper)\n        }", "       \
    \ val chars = string.split('')\n        chars.foldLeft(\"\") {\n            case\
    \ (acc, c) => acc + (if (c.toUpperCase == c) c.toLowerCase else c.toUpperCase)\n\
    \        }", "        val result = new StringBuilder\n        for (i <- 0 until\
    \ string.length) {\n            val c = string.charAt(i)\n            if (c >=\
    \ 'a' && c <= 'z') {\n                result.append((c - 'a').toUpper + string.charAt(i\
    \ + 1))\n            } else {\n                result.append(c)\n            }\n\
    \        }\n        result.toString", "        val chars = string.chars\n    \
    \    val flipped = mutable.ListBuffer[Char]()\n        for (i <- 0 until chars.length)\
    \ {\n            flipped += chars(i).swapCase\n        }\n        flipped.mkString",
  "        val chars = string.split(\"\")\n        val result = new StringBuilder\n\
    \        for (i <- 0 until chars.length) {\n            val c = chars(i)\n   \
    \         if (c.isLower) result.append(c.toUpperCase)\n            else result.append(c.toLowerCase)\n\
    \        }\n        return result.toString", "        string.foldLeft(\"\"){\n\
    \            case (acc, c) => acc + (if (c.isUpper) c.toLower else c.toUpper)\n\
    \        }", "        val result = new StringBuilder()\n        for (i <- 0 until\
    \ string.length) {\n            val c = string.charAt(i)\n            if (c.isLower)\
    \ {\n                result.append((c.toUpper))\n            } else {\n      \
    \          result.append((c.toLower))\n            }\n        }\n        return\
    \ result.toString()", "        val result = new StringBuilder\n        for (i\
    \ <- 0 until string.length) {\n            val c = string.charAt(i)\n        \
    \    if (c >= 'a' && c <= 'z') {\n                result.append((c - 'a').toUpper\
    \ + string.charAt(i + 1))\n            } else {\n                result.append(c)\n\
    \            }\n        }\n        return result.toString", "        string.foldLeft(\"\
    \") {\n            case (acc, c) =>\n                acc + (if (c.isUpper) c.toLower\
    \ else c.toUpper)\n        }", "        val chars = string.chars\n        val\
    \ flipped = mutable.ListBuffer.empty[Char]\n        for (i <- 0 until chars.length)\n\
    \            if (chars(i).toLowerCase == chars(i).toUpperCase )\n            \
    \    flipped += chars(i).toLowerCase\n            else\n                flipped\
    \ += chars(i).toUpperCase\n        flipped.mkString", "        val chars = string.chars\n\
    \        val result = new StringBuilder(string.length)\n        for (i <- 0 until\
    \ chars.length)\n            result.append(chars(i).swapCase)\n        result.toString",
  "        val chars = string.chars\n        val result = new StringBuilder\n    \
    \    for(i <- 0 until chars.length)\n            result.append(chars(i).swapCase)\n\
    \        result.toString", "        val result = new StringBuilder\n        for\
    \ (i <- 0 until string.length) {\n            val c = string.charAt(i)\n     \
    \       if (c >= 'a' && c <= 'z') {\n                result.append((c - 'a').toUpper\
    \ + string.charAt(i + 1))\n            } else {\n                result.append(c)\n\
    \            }\n        }\n        return result.toString", "        val chars\
    \ = string.split(\"\")\n        val upperCaseChars = chars.map(c => if (c.toUpperCase\
    \ == c) c.toLowerCase else c)\n        val lowerCaseChars = chars.map(c => if\
    \ (c.toLowerCase == c) c.toUpperCase else c)\n        upperCaseChars.mkString(\"\
    \") + lowerCaseChars.mkString(\"\")", "        val chars = string.chars\n    \
    \    val result = new StringBuilder\n        for (i <- 0 until chars.length)\n\
    \            result.append(chars(i).swapCase)\n        result.toString", "   \
    \     string.foldLeft(\"\"){ (result, char) =>\n            if (char >= 'a' &&\
    \ char <= 'z') {\n                result += char.toUpper\n            } else if\
    \ (char >= 'A' && char <= 'Z') {\n                result += char.toLower\n   \
    \         } else {\n                result += char\n            }\n        }",
  "        val chars = string.split(\"\")\n        chars.foldLeft(\"\") {\n      \
    \      case (acc, c) => (if (c.isLower) c.toUpper else c.toLower) + acc\n    \
    \    }", "        val chars = string.split(\"\")\n        chars.map(c => if (c.isLower)\
    \ c.toUpper else c.toLower).mkString(\"\")", "        val result = new StringBuilder\n\
    \        for (i <- 0 until string.length)\n            if (string.charAt(i) >=\
    \ 'a' && string.charAt(i) <= 'z')\n                result.append((string.charAt(i)\
    \ - 'a').toUpper + string.charAt(i))\n            else\n                result.append(string.charAt(i))\n\
    \        return result.toString", "        val chars = string.split('')\n    \
    \    val result = new StringBuilder\n        chars.foreach { c =>\n          \
    \  val upper = c.toUpperCase\n            val lower = c.toLowerCase\n        \
    \    if (upper != lower) {\n                result.append(upper)\n           \
    \     result.append(lower)\n            } else {\n                result.append(c)\n\
    \            }\n        }\n        return result.toString", "        val chars\
    \ = string.chars.toList\n        chars.reverse.foldLeft(\"\")( (acc, c) => acc\
    \ + c.toUpperCase + c.toLowerCase )", "        val result = new StringBuilder\n\
    \        for (i <- 0 until string.length)\n            if (string.charAt(i).toLowerCase\
    \ == string.charAt(i).toUpperCase )\n                result.append(string.charAt(i).toLowerCase)\n\
    \            else\n                result.append(string.charAt(i).toUpperCase)\n\
    \        return result.toString", "        string.foldLeft(\"\"){ (result, c)\
    \ =>\n            if (c.isUpper) {\n                result + c.toLower\n     \
    \       } else {\n                result + c.toUpper\n            }\n        }",
  "        val chars = string.split(\"\")\n        val flipped = chars.map(c => if\
    \ (c.isLower) c.toUpper else c.toLower)\n        val result = flipped.mkString(\"\
    \")\n        result", "        val chars = string.split(\"\")\n        val upperChars\
    \ = chars.map(c => if (c.toUpperCase == c) c.toLowerCase else c)\n        val\
    \ lowerChars = chars.map(c => if (c.toLowerCase == c) c.toUpperCase else c)\n\
    \        val result = new String(upperChars.mkString(\"\") + lowerChars.mkString(\"\
    \"))\n        result", "        val chars = string.split(\"\")\n        chars.map(c\
    \ => if (c.toLowerCase == c) c.toUpperCase else c.toLowerCase).mkString", "  \
    \      val chars = string.chars\n        val flipped = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until chars.length)\n            if (chars(i).toLowerCase\
    \ == chars(i).toUpperCase )\n                flipped += chars(i).toLowerCase\n\
    \            else\n                flipped += chars(i).toUpperCase\n        flipped.mkString",
  "        val chars = string.chars.toList\n        chars.reverse.foldLeft(\"\")(\
    \ (acc, c) => acc + c.toUpperCase + c.toLowerCase )", "        string.foldLeft(\"\
    \"){ (result, char) =>\n            if (char >= 'a' && char <= 'z') {\n      \
    \          result + char.toUpper\n            } else if (char >= 'A' && char <=\
    \ 'Z') {\n                result + char.toLower\n            } else {\n      \
    \          result + char\n            }\n        }", '        string.map(_.toUpperCase).map(_.toLowerCase).mkString',
  "        val chars = string.chars\n        val flipped = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until chars.length)\n            if (chars(i).toLowerCase\
    \ == chars(i).toUpperCase )\n                flipped += chars(i).toLowerCase\n\
    \            else\n                flipped += chars(i).toUpperCase\n        flipped.mkString",
  "        val chars = string.split(\"\").toList\n        chars.reverse.foldLeft(\"\
    \")(_ + _.toUpperCase)", "        val chars = string.chars\n        val result\
    \ = new StringBuilder\n        for (i <- 0 until chars.length) {\n           \
    \ val c = chars(i)\n            if (c.isLower) {\n                result += c.toUpperCase\n\
    \            } else {\n                result += c.toLowerCase\n            }\n\
    \        }\n        return result.toString", "        val result = new StringBuilder()\n\
    \        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n\
    \            if (c.isLower) result.append(c.toUpperCase) else result.append(c.toLowerCase)\n\
    \        }\n        return result.toString()", "        val chars = string.chars\n\
    \        val flipped = mutable.Buffer.empty[Char]\n        for (i <- 0 until chars.length)\n\
    \            if (chars(i).toLowerCase == chars(i).toUpperCase && chars(i).toUpperCase\
    \ != chars(i).toLowerCase)\n                flipped += chars(i).toLowerCase\n\
    \            else\n                flipped += chars(i).toUpperCase\n        flipped.mkString",
  "        val chars = string.chars\n        val flipped = mutable.ListBuffer.empty[Char]\n\
    \        for (i <- 0 until chars.length)\n            if (chars(i).toLowerCase\
    \ == chars(i))\n                flipped += chars(i).toUpperCase\n            else\n\
    \                flipped += chars(i).toLowerCase\n        flipped.mkString", " \
    \       val chars = string.chars\n        val flipped = mutable.ListBuffer[Char]()\n\
    \        chars.foreach { char =>\n            if (char.isLower) flipped += char.toUpperCase\n\
    \            else flipped += char.toLowerCase\n        }\n        flipped.mkString",
  "        val chars = string.split(\"\")\n        val flipped = mutable.ListBuffer[Char]()\n\
    \        chars.foreach(c => flipped += c.toUpperCase)\n        flipped += chars.last\n\
    \        flipped.mkString", "        val result = new StringBuilder\n        for\
    \ (i <- 0 until string.length)\n            result.append(if(string.charAt(i)\
    \ >= 'a' && string.charAt(i) <= 'z') string.charAt(i).toUpper else string.charAt(i))\n\
    \        result.toString", "        val result = new StringBuilder\n        string.foreach(c\
    \ => if (c.isUpper) result += c.toUpperCase else result += c.toLowerCase)\n  \
    \      result.toString", "        string.foldLeft(\"\"){ (result, char) =>\n \
    \           if (char.isUpper) char.toUpper + result else result + char.toLower\n\
    \        }", "        val result = new StringBuilder()\n        for (i <- 0 until\
    \ string.length) {\n            val c = string.charAt(i)\n            if (c >=\
    \ 'a' && c <= 'z') {\n                result += (c - 'a').toUpper + string.charAt(i)\n\
    \            } else if (c >= 'A' && c <= 'Z') {\n                result += (c\
    \ - 'A').toLower + string.charAt(i)\n            } else {\n                result\
    \ += c\n            }\n        }\n        return result.toString()", "       \
    \ val chars = string.chars\n        val flipped = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until chars.length)\n            if (chars(i).toLowerCase\
    \ == chars(i).toUpperCase && chars(i).toUpperCase != chars(i).toLowerCase)\n \
    \               flipped += chars(i).toLowerCase\n            else\n          \
    \      flipped += chars(i).toUpperCase\n        flipped.mkString", "        val\
    \ chars = string.chars\n        val flipped = mutable.ArrayBuffer.empty[Char]\n\
    \        for (i <- 0 until chars.length)\n            if (chars(i).toLowerCase\
    \ == chars(i))\n                flipped += chars(i).toUpperCase\n            else\n\
    \                flipped += chars(i).toLowerCase\n        flipped.mkString", " \
    \       val chars = string.chars\n        val flipped = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until chars.length)\n            if (chars(i).toLowerCase\
    \ == chars(i).toUpperCase && chars(i).toUpperCase != chars(i).toLowerCase)\n \
    \               flipped += chars(i).toLowerCase\n            else\n          \
    \      flipped += chars(i).toUpperCase\n        flipped.mkString", "        string.foldLeft(\"\
    \"){ (result, c) =>\n            result + c.toUpperCase\n        }", "       \
    \ val result = new StringBuilder\n        for (i <- 0 until string.length)\n \
    \           if (string.charAt(i) >= 'a' && string.charAt(i) <= 'z')\n        \
    \        result.append((string.charAt(i) - 'a').toUpper + string.charAt(i))\n\
    \            else if (string.charAt(i) >= 'A' && string.charAt(i) <= 'Z')\n  \
    \              result.append((string.charAt(i) - 'A').toUpper + string.charAt(i))\n\
    \            else\n                result.append(string.charAt(i))\n        return\
    \ result.toString", "        val result = new StringBuilder\n        for (i <-\
    \ 0 until string.length)\n            result.append(if (string.charAt(i) >= 'a'\
    \ && string.charAt(i) <= 'z') string.charAt(i).toUpperCase else string.charAt(i).toLowerCase)\n\
    \        result.toString", "        val chars = string.chars\n        val flipped\
    \ = mutable.ArrayBuffer.empty[Char]\n        for (i <- 0 until chars.length) {\n\
    \            flipped += chars(i).swapCase\n        }\n        flipped.mkString",
  "        val result = new StringBuilder()\n        for (i <- 0 until string.length)\
    \ {\n            val c = string.charAt(i)\n            if (c.isLower) {\n    \
    \            result += c.toUpperCase\n            } else {\n                result\
    \ += c.toLowerCase\n            }\n        }\n        return result.toString",
  "        val chars = string.chars\n        val flipped = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until chars.length) {\n            flipped += chars(i).swapCase\n\
    \        }\n        flipped.mkString", "        val result = string.foldLeft(\"\
    \") {\n            (acc, c) => if (c.isLower) acc + c.toUpper else acc + c.toLowerCase\n\
    \        }\n        result", "        val result = new StringBuilder\n       \
    \ for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n \
    \           if (c.isUpper) {\n                result.append(c.toLower)\n     \
    \       } else {\n                result.append(c)\n            }\n        }\n\
    \        return result.toString", "        val chars = string.split(\"\")\n  \
    \      chars.foldLeft(\"\") { (result, char) =>\n            if (char.isLower)\
    \ result + char.toUpperCase\n            else result + char.toLowerCase\n    \
    \    }", "        val chars = string.chars\n        val result = new StringBuilder()\n\
    \        for (i <- 0 until chars.length) {\n            val c = chars(i)\n   \
    \         if (c.isLower) {\n                result.append((c.toUpper))\n     \
    \       } else {\n                result.append((c.toLower))\n            }\n\
    \        }\n        return result.toString()", "        val chars = string.chars\n\
    \        val flipped = mutable.ListBuffer[Char]()\n        for (i <- 0 until chars.length)\
    \ {\n            flipped += chars(i).swapCase()\n        }\n        flipped.toString.toLowerCase",
  "        string.foldLeft(\"\") {\n            case (acc, c) => acc + (if (c.isUpper)\
    \ c.toLower else c.toUpper)\n        }", "        string.foldLeft(\"\"){\n   \
    \         case (acc, c) => acc + (c.toUpperCase + c.toLowerCase)\n        }",
  "        val chars = string.chars\n        val flipped = mutable.Buffer.empty[Char]\n\
    \        for (i <- 0 until chars.length)\n            flipped += chars(i).swapcase\n\
    \        flipped.mkString", "        val result = new StringBuilder\n        for\
    \ (i <- 0 until string.length) {\n            val c = string.charAt(i)\n     \
    \       if (c.isLower) result.append(c.toUpperCase) else result.append(c.toLowerCase)\n\
    \        }\n        return result.toString", "        val chars = string.split(\"\
    \")\n        val result = new StringBuilder()\n        for (i <- 0 until chars.length)\n\
    \            result.append(chars(i).swapCase())\n        result.toString()", " \
    \       val result = new StringBuilder\n        for (i <- 0 until string.length)\n\
    \            if (string.charAt(i) >= 'a' && string.charAt(i) <= 'z')\n       \
    \         result.append((string.charAt(i) - 'a').toUpper + string.charAt(i))\n\
    \            else if (string.charAt(i) >= 'A' && string.charAt(i) <= 'Z')\n  \
    \              result.append((string.charAt(i) - 'A').toUpper + string.charAt(i))\n\
    \            else\n                result.append(string.charAt(i))\n        return\
    \ result.toString", "        val result = new StringBuilder\n        for (i <-\
    \ 0 until string.length) {\n            val c = string.charAt(i)\n           \
    \ if (c.isUpper) {\n                result.append((c.toLower))\n            }\
    \ else {\n                result.append(c)\n            }\n        }\n       \
    \ return result.toString", "        val chars = string.split('')\n        val\
    \ flipped = mutable.ArrayBuffer(chars.head)\n        chars.tail.foreach(c => flipped\
    \ += c.toUpperCase)\n        flipped.toString.reverse", "        val chars = string.chars\n\
    \        val flipped = mutable.ListBuffer.empty[Char]\n        for (i <- 0 until\
    \ chars.length) {\n            flipped += chars(i).swapCase\n        }\n     \
    \   flipped.mkString", "        val chars = string.chars.toList\n        chars.reverse.foldLeft(\"\
    \")(_ + _.toUpperCase)", "        val chars = string.chars\n        val result\
    \ = new StringBuilder\n        for(i <- 0 until chars.length)\n            result.append(chars(i).swapCase)\n\
    \        result.toString", "        val chars = string.chars\n        val flipped\
    \ = mutable.ArrayBuffer.empty[Char]\n        chars.foreach { c =>\n          \
    \  if (c.isLower) flipped += c.toUpper\n            else flipped += c.toLower\n\
    \        }\n        flipped.mkString", "        val chars = string.chars\n   \
    \     val flipped = mutable.Buffer.empty[Char]\n        for (i <- 0 until chars.length)\
    \ {\n            flipped += chars(i).swapCase\n        }\n        flipped.toString",
  "        val chars = string.chars\n        val flipped = mutable.ListBuffer[Char]()\n\
    \        chars.foreach { c =>\n            flipped += if (c.isLower) c.toUpper\
    \ else c.toLower\n        }\n        flipped.mkString"]
stop_tokens:
- "\n    }\n"
