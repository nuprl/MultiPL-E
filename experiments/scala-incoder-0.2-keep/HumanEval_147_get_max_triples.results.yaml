language: scala
name: HumanEval_147_get_max_triples
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val count = mutable.Map[Long, Long]()\n        for(i <- 0 until n){\n\
    \            val j = i * i - i + 1\n            val k = i * i + i + 1\n      \
    \      if((j < k) && (j % 3 == 0)){\n                a(i) = j\n              \
    \  count(i) = count(i) + 1\n            }\n        }\n        count(0)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsyaghiv3.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsyaghiv3.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsyaghiv3.scala:17:25\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n){\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798290
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        for( i <- 1 to n ) {\n \
    \           for( j <- 1 to i ) {\n                for( k <- 1 to j ) {\n     \
    \               if( i + j + k == n ) {\n                        a(i) = i * i -\
    \ i + 1\n                        count(a(i), a(i), a(i)) = 1\n               \
    \     }\n                    else {\n                        count(a(i), a(i),\
    \ a(i)) = count(a(i), a(i), a(i)) + 1\n                    }\n               \
    \ }\n            }\n        }\n        count.values.toList.max\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n  \
    \  assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n\
    \    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc7c9bqyh.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc7c9bqyh.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc7c9bqyh.scala:17:23\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m( i <-\
    \ \e[31m1\e[0m to n ) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798290
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var triples = 0\n       \
    \ var a = Array.ofDim[Int](n)\n        var i = 0\n        var j = 0\n        var\
    \ k = 0\n        while(i < n && j < n && k < n) {\n            a(i) = i * i -\
    \ i + 1\n            i += 1\n            j += 1\n            k += 1\n        }\n\
    \        while(i < n) {\n            a(i) = i * i - i + 1\n            i += 1\n\
    \        }\n        while(j < n) {\n            a(j) = j * j - j + 1\n       \
    \     j += 1\n        }\n        while(k < n) {\n            a(k) = k * k - k\
    \ + 1\n            k += 1\n        }\n        for(i<-0 until n) {\n          \
    \  for(j<-0 until n) {\n                for(k <- 0 until n) {\n              \
    \      if(i<j && i<k && j<k) {\n                        if(a(i) + a(j) + a(k)\
    \ == 3) {\n                            triples += 1\n                        }\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcrgrmhwe.scala:16:33\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcrgrmhwe.scala:38:23\
    \ --------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mfor\e[0m(i<-\e\
    [31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpcrgrmhwe.scala:39:27 --------------------\e[0m\e[0m\n\e[31m39\
    \ |\e[0m            \e[33mfor\e[0m(j<-\e[31m0\e[0m until n) {\n\e[31m\e[31m  \
    \ |\e[0m                           ^\e[0m\n\e[31m   |\e[0m                   \
    \        Found:    (n : Long)\n\e[31m   |\e[0m                           Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcrgrmhwe.scala:40:33\
    \ --------------------\e[0m\e[0m\n\e[31m40 |\e[0m                \e[33mfor\e[0m(k\
    \ <- \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          \
    \       ^\e[0m\n\e[31m   |\e[0m                                 Found:    (n :\
    \ Long)\n\e[31m   |\e[0m                                 Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659798290
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        for( i <- 1 to n ) {\n \
    \           val j = i * i - i + 1\n            val k = i * i + i + 1\n       \
    \     if( j < k ) {\n                a(i) = j\n                count(j) = count(j)\
    \ + 1\n                count(k) = count(k) + 1\n            }\n        }\n   \
    \     count(a(0))\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1fu0nzra.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1fu0nzra.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1fu0nzra.scala:17:23\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m( i <-\
    \ \e[31m1\e[0m to n ) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val result = new mutable.HashMap[Int, Int]()\n        val triples = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriples = mutable.HashMap[Int, Int]()\n        val maxTriple\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriples = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriple = mutable.HashMap[Int, Int]()\n        val maxTriples\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriple = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriples = mutable.HashMap[Int, Int]()\n        val maxTriple\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriples = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriple = mutable.HashMap[Int, Int]()\n        val maxTriples\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriple = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriples = mutable.HashMap[Int, Int]()\n        val maxTriple\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriples = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriple = mutable.HashMap[Int, Int]()\n        val maxTriples\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriple = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriples = mutable.HashMap[Int, Int]()\n        val maxTriple\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriples = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriple = mutable.HashMap[Int, Int]()\n        val maxTriples\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriple = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriples = mutable.HashMap[Int, Int]()\n        val maxTriple\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriples = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriple = mutable.HashMap[Int, Int]()\n        val maxTriples\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriple = mutable.Hash\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppct6blrf.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxTriples\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriples is already defined as \e[33mvalue\e[0m \e[35mmaxTriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppct6blrf.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxTriple\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriple is already defined as \e[33mvalue\e[0m \e[35mmaxTriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppct6blrf.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxTriples\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriples is already defined as \e[33mvalue\e[0m \e[35mmaxTriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppct6blrf.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxTriple\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriple is already defined as \e[33mvalue\e[0m \e[35mmaxTriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppct6blrf.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxTriples\e[0m = m"
  stdout: ''
  timestamp: 1659798290
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val i = mutable.ArrayBuffer.empty[Int]\n\
    \        val j = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val maxTriples\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriple = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriples = mutable.ArrayBuffer.empty[Int]\n        val maxTriple\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriples = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriple = mutable.ArrayBuffer.empty[Int]\n        val maxTriples\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriple = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriples = mutable.ArrayBuffer.empty[Int]\n        val maxTriple\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriples = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriple = mutable.ArrayBuffer.empty[Int]\n        val maxTriples\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriple = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriples = mutable.ArrayBuffer.empty[Int]\n        val maxTriple\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriples = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriple = mutable.ArrayBuffer.empty[Int]\n        val maxTriples\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriple = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriples = mutable.ArrayBuffer.empty[Int]\n        val maxTriple\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriples = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriple = mutable.ArrayBuffer.empty[Int]\n        val maxTriples\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriple = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriples = mutable.ArrayBuffer.empty[Int]\n        val maxTriple\
    \ = mutable.ArrayBuffer.empty\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6erxh_dk.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mk\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mk is already defined as \e[33mvalue\e[0m \e[35mk\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp6erxh_dk.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxTriples\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriples is already defined as \e[33mvalue\e[0m \e[35mmaxTriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp6erxh_dk.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxTriple\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriple is already defined as \e[33mvalue\e[0m \e[35mmaxTriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp6erxh_dk.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxTriples\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriples is already defined as \e[33mvalue\e[0m \e[35mmaxTriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp6erxh_dk.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxTriple\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e"
  stdout: ''
  timestamp: 1659798288
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        for (i <- 1 to n) {\n\
    \            val j = i * i - i + 1\n            val k = i * i + j\n          \
    \  val l = i * i - j\n            if (l == 0) {\n                a += i\n    \
    \            m += k\n            }\n        }\n        m.toList.length\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi6oy2guh.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi6oy2guh.scala:16:16\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi6oy2guh.scala:17:23\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpi6oy2guh.scala:22:18 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m                a += i\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e\
    [31m   |\e[0m             value += is not a member of Array[Int] - did you mean\
    \ a.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1659798289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        for (i <- 0 until n) {\n\
    \            a(i) = i * i - i + 1\n        }\n        val triples = a.zipWithIndex.filter(_._2\
    \ % 3 == 0)\n        triples.foreach { t =>\n            val a = t._1.toInt\n\
    \            val b = t._2.toInt\n            val c = a * b\n            if (count.contains(c))\
    \ {\n                count(c) = count(c) + 1\n            } else {\n         \
    \       count(c) = 1\n            }\n        }\n        count.values.max\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) ==\
    \ (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_mbbvq_v.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_mbbvq_v.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_mbbvq_v.scala:17:26\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798290
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9v1syy8g.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659798289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        var count = 0\n        var i = 0\n        var j = 0\n        var k =\
    \ 0\n        while(i < n && j < n && k < n) {\n            a(i) = i * i - i +\
    \ 1\n            i += 1\n            j += 1\n            k += 1\n        }\n \
    \       while(i < n) {\n            count += 1\n            i += 1\n        }\n\
    \        while(j < n) {\n            count += 1\n            j += 1\n        }\n\
    \        while(k < n) {\n            count += 1\n            k += 1\n        }\n\
    \        count += a.filter(_ % 3 == 0).length\n        return count\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_ja2d8o3.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9v1syy8g.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659798289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        for( i <- 1 to n ) {\n \
    \           for( j <- 1 to i ) {\n                for( k <- 1 to j ) {\n     \
    \               if( i + j + k == n ) {\n                        a(i) = i * i -\
    \ i + 1\n                        count(a(i), a(i), a(i)) = 1\n               \
    \     }\n                }\n            }\n        }\n        count.filter(_._2\
    \ > 0).length\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt0psxilh.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt0psxilh.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt0psxilh.scala:17:23\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m( i <-\
    \ \e[31m1\e[0m to n ) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798288
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        var i = 0\n        var\
    \ j = 0\n        var k = 0\n        var count = 0\n        while (i < n && j <\
    \ n && k < n) {\n            val x = a(i) + a(j) + a(k);\n            if (x %\
    \ 3 == 0) {\n                m += x\n                count += 1\n            }\n\
    \            i += 1\n            j += 1\n            k += 1\n        }\n     \
    \   m.toList.length\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_5kdi20f.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_5kdi20f.scala:16:16\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798288
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var max = 0\n        var\
    \ a = new Array[Int](n)\n        for(i<- 0 until n){\n            a(i) = i * i\
    \ - i + 1\n        }\n        for(i<- 0 until n){\n            for(j<- 0 until\
    \ n){\n                for(k <- 0 until n){\n                    if(i<j && i<k\
    \ && j<k){\n                        if(a(i) + a(j) + a(k) == 3){\n           \
    \                 max = max + 1\n                        }\n                 \
    \   }\n                }\n            }\n        }\n        return max\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsx9cuby5.scala:16:31\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m\
    \                               ^\e[0m\n\e[31m   |\e[0m                      \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                              \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsx9cuby5.scala:17:24\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i<- \e\
    [31m0\e[0m until n){\n\e[31m\e[31m   |\e[0m                        ^\e[0m\n\e\
    [31m   |\e[0m                        Found:    (n : Long)\n\e[31m   |\e[0m   \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpsx9cuby5.scala:20:24 --------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mfor\e[0m(i<- \e[31m0\e[0m until n){\n\e[31m\e[31m   |\e\
    [0m                        ^\e[0m\n\e[31m   |\e[0m                        Found:\
    \    (n : Long)\n\e[31m   |\e[0m                        Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsx9cuby5.scala:21:28 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mfor\e[0m(j<- \e[31m0\e[0m until n){\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Found:    (n : Long)\n\e[31m   |\e[0m                \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpsx9cuby5.scala:22:33 --------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m                \e[33mfor\e[0m(k <- \e[31m0\e[0m until n){\n\e[31m\e[31m\
    \   |\e[0m                                 ^\e[0m\n\e[31m   |\e[0m           \
    \                      Found:    (n : Long)\n\e[31m   |\e[0m                 \
    \                Required: Int\n\e[31m   |\e[0m\n\e"
  stdout: ''
  timestamp: 1659798290
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        for (i <- 1 to n) {\n  \
    \          val j = i * i - i + 1\n            val k = i * i + i + j\n        \
    \    val count = count.getOrElse(k, 0)\n            val count = count.updated(k,\
    \ count + 1)\n            val count = count.updated(j, count + 1)\n          \
    \  val count = count.updated(i, count + 1)\n            val count = count.updated(i,\
    \ count + 1)\n            val count = count.updated(i, count + 1)\n          \
    \  val count = count.updated(i, count + 1)\n            val count = count.updated(i,\
    \ count + 1)\n            val count = count.updated(i, count + 1)\n          \
    \  val count = count.updated(i, count + 1)\n            val count = count.updated(i,\
    \ count + 1)\n            val count = count.updated(i, count + 1)\n          \
    \  val count = count.updated(i, count + 1)\n            val count = count.updated(i,\
    \ count + 1)\n            val count = count.updated(i, count + 1)\n          \
    \  val count = count.updated(i, count + 1)\n            val count = count.updated(i,\
    \ count + 1)\n            val count = count.updated(i, count + 1)\n          \
    \  val count = count.updated(i, count + 1)\n            val count = count.updated(i,\
    \ count + 1)\n            val count = count.updated(i, count + 1)\n          \
    \  val count = count.updated(i, count + 1)\n            val count = count.updated(i,\
    \ count + 1)\n            val count = count.updated(i, count + 1)\n          \
    \  val count = count.updated(i, count + 1)\n            val count = count.updated(i,\
    \ count + 1)\n            val count = count.updated(i, count + 1)\n          \
    \  val count = count.updated(i, count + 1)\n            val count = count.updated(i,\
    \ count + 1)\n            val count = count.updated(i, count + 1)\n          \
    \  val count = count.updated(i, count + 1)\n            val count = count.updated(i,\
    \ count + 1)\n            val count = count.updated(i, count + 1)\n          \
    \  val count = count.updated(i, count + 1)\n            val count = count.updated(i,\
    \ count + 1)\n            val count = count.updated(i, count + 1)\n          \
    \  val count = count.updated(i, count + 1)\n            val count = count.updated(i,\
    \ count + 1)\n            val count = count.updated(i, count + 1)\n          \
    \  val count = count.updated(i, count + 1)\n            val count = count.updated(i,\
    \ count + 1)\n            val count = count.updated(i, count + 1)\n          \
    \  val count = count.updated(i, count + 1)\n            val count = count.updated(i,\
    \ count + 1)\n            val count = count.updated(i, count + 1)\n          \
    \  val count = count.updated(i, count + 1)\n            val count = count.updated(i,\
    \ count \n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdxlox8md.scala:67:4 ----------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdxlox8md.scala:76:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m76 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpdxlox8md.scala:15:33 --------------------\e[0m\e[0m\n\
    \e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = Array.ofDim[\e[35mInt\e[0m](n)\n\
    \e[31m\e[31m   |\e[0m                                 ^\e[0m\n\e[31m   |\e[0m\
    \                                 Found:    (n : Long)\n\e[31m   |\e[0m      \
    \                           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpdxlox8md.scala:16:20 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpdxlox8md.scala:17:23 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdxlox8md.scala:75:1\
    \ ---------------------\e[0m\e[0m\n\e[31m75 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: Long\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmpdxlox8md.scala:68:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m68 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mAr"
  stdout: ''
  timestamp: 1659798290
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9v1syy8g.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659798289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        for( i <- 1 to n ) {\n \
    \           val j = i * i - i + 1\n            if( j != 0 ) {\n              \
    \  val k = i * i + j\n                if( k > 0 ) {\n                    a(i)\
    \ = k\n                    count(k) = count(k) + 1\n                }\n      \
    \      }\n        }\n        val maxCount = count.maxBy(_._2)\n        val maxCount\
    \ = maxCount._1 + 1\n        val triples = count.filter(_._2 == maxCount).map(_._1)\n\
    \        triples.sum\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0qswff18.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxCount\e[0m = maxCount._1\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxCount is already defined as \e[33mvalue\e[0m \e[35mmaxCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp0qswff18.scala:15:33 --------------------\e[0m\e[0m\n\
    \e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = Array.ofDim[\e[35mInt\e[0m](n)\n\
    \e[31m\e[31m   |\e[0m                                 ^\e[0m\n\e[31m   |\e[0m\
    \                                 Found:    (n : Long)\n\e[31m   |\e[0m      \
    \                           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp0qswff18.scala:16:20 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp0qswff18.scala:17:23 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m( i <- \e[31m1\e[0m to n ) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var max = 0\n        var\
    \ a = new Array[Long](n)\n        for(i<-0 until n){\n            a(i) = i * i\
    \ - i + 1\n        }\n        for(i<-0 until n){\n            for(j<-0 until n){\n\
    \                for(k <- 0 until n){\n                    if(i<j && i<k && j<k){\n\
    \                        if(a(i) + a(j) + a(k) == 3){\n                      \
    \      max = max + 1\n                        }\n                    }\n     \
    \           }\n            }\n        }\n        return max\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphwsaf0h2.scala:16:32\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e\
    [0m                                ^\e[0m\n\e[31m   |\e[0m                   \
    \             Found:    (n : Long)\n\e[31m   |\e[0m                          \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphwsaf0h2.scala:17:23\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i<-\e\
    [31m0\e[0m until n){\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m\
    \   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m       \
    \                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmphwsaf0h2.scala:20:23 --------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mfor\e[0m(i<-\e[31m0\e[0m until n){\n\e[31m\e[31m   |\e[0m\
    \                       ^\e[0m\n\e[31m   |\e[0m                       Found: \
    \   (n : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphwsaf0h2.scala:21:27 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mfor\e[0m(j<-\e[31m0\e[0m until n){\n\
    \e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m      \
    \                     Found:    (n : Long)\n\e[31m   |\e[0m                  \
    \         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphwsaf0h2.scala:22:33\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m                \e[33mfor\e[0m(k\
    \ <- \e[31m0\e[0m until n){\n\e[31m\e[31m   |\e[0m                           \
    \      ^\e[0m\n\e[31m   |\e[0m                                 Found:    (n :\
    \ Long)\n\e[31m   |\e[0m                                 Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |"
  stdout: ''
  timestamp: 1659798290
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        for (i <- 1 to n) {\n  \
    \          a(i) = i * i - i + 1\n        }\n        val triples = a.zipWithIndex.filter(_._2\
    \ % 3 == 0)\n        val result = triples.foldLeft(0)((acc, triple) => {\n   \
    \         val i = triple._1\n            val j = triple._2\n            val k\
    \ = triple._3\n            val count = acc + count(i) + count(j) + count(k)\n\
    \            if (count > 3) {\n                count(i) + count(j) + count(k)\n\
    \            } else {\n                acc\n            }\n        })\n      \
    \  result\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpna8ljv1t.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpna8ljv1t.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpna8ljv1t.scala:17:23\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpna8ljv1t.scala:24:27 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m            \e[33mval\e[0m \e[36mk\e[0m = triple._3\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value _3 is not a\
    \ member of (Int, Int) - did you mean triple._1?\n4 errors found\n"
  stdout: ''
  timestamp: 1659798290
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var max = 0\n        var\
    \ a = new Array[Int](n)\n        for( i <- 0 until n ) {\n            a(i) = i\
    \ * i - i + 1\n        }\n        for( i <- 0 until n ) {\n            for( j\
    \ <- 0 until n ) {\n                for( k <- 0 until n ) {\n                \
    \    if( i < j < k && a(i) + a(j) + a(k) == 3 ) {\n                        max\
    \ = max + 1\n                    }\n                }\n            }\n       \
    \ }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeywirzon.scala:16:31\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m\
    \                               ^\e[0m\n\e[31m   |\e[0m                      \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                              \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeywirzon.scala:17:26\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m( i <-\
    \ \e[31m0\e[0m until n ) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpeywirzon.scala:20:26 --------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m( i <- \e[31m0\e[0m until n ) {\n\e\
    [31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m         \
    \                 Found:    (n : Long)\n\e[31m   |\e[0m                      \
    \    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeywirzon.scala:21:30\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mfor\e[0m( j\
    \ <- \e[31m0\e[0m until n ) {\n\e[31m\e[31m   |\e[0m                         \
    \     ^\e[0m\n\e[31m   |\e[0m                              Found:    (n : Long)\n\
    \e[31m   |\e[0m                              Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeywirzon.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mfor\e[0m( k <- \e[31m0\e[0m until\
    \ n ) {\n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m\
    \   |\e[0m                                  Found:    (n : Long)\n\e[31m   |\e\
    [0m                           "
  stdout: ''
  timestamp: 1659798290
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        var count = 0\n        var i = 0\n        var j = 0\n        var k =\
    \ 0\n        while(i < n && j < n && k < n) {\n            if(i == j && j == k)\
    \ {\n                count += 1\n                i += 1\n                j +=\
    \ 1\n                k += 1\n            } else if(i % 2 == 0) {\n           \
    \     a(i) = i * i - i + 1\n                i += 1\n            } else if(j %\
    \ 2 == 0) {\n                a(j) = i * i - i + 1\n                j += 1\n  \
    \          } else {\n                a(k) = i * i - i + 1\n                k +=\
    \ 1\n            }\n        }\n        count += a.filter(_ % 3 == 0).length\n\
    \        return count\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6v9_zlxm.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        for( i <- 1 to n ) {\n \
    \           val j = i * i - i + 1\n            if( j < 0 ) break\n           \
    \ val k = j * j - j\n            if( k < 0 ) break\n            if( k > 0 ) {\n\
    \                val value = a(i) + a(j) + a(k)\n                if( value % 3\
    \ == 0 ) {\n                    if( count.contains(value) ) count(value) += 1\n\
    \                    else count(value) = 1\n                }\n            }\n\
    \        }\n        count.values.toList.max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk0oc25pq.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk0oc25pq.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk0oc25pq.scala:17:23\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m( i <-\
    \ \e[31m1\e[0m to n ) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpk0oc25pq.scala:19:24 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m            \e[33mif\e[0m( j < \e[31m0\e[0m ) break\n\e[31m\e[31m   |\e[0m\
    \                        ^^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk0oc25pq.scala:21:24\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m(\
    \ k < \e[31m0\e[0m ) break\n\e[31m\e[31m   |\e[0m                        ^^^^^\e\
    [0m\n\e[31m   |\e[0m                        Not found: break\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1659798288
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        for( i <- 1 to n ) {\n \
    \           for( j <- 1 to i ) {\n                for( k <- 1 to j ) {\n     \
    \               val sum = i * i - i + j\n                    if( sum % 3 == 0\
    \ ) {\n                        a(i) = sum\n                        count(sum)\
    \ = count(sum) + 1\n                    }\n                }\n            }\n\
    \        }\n        count(a(0))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpswf1i5h9.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpswf1i5h9.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpswf1i5h9.scala:17:23\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m( i <-\
    \ \e[31m1\e[0m to n ) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798288
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[In\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1edppdlh.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1edppdlh.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mtriples\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mtriples is already defined as \e[33mvalue\e[0m \e[35mtriples\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp1edppdlh.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mtriple\e[0m = mutable.Map[\e[35mInt\e[0m,\
    \ \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtriple is already defined as \e[33mvalue\e[0m \e[35mtriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1edppdlh.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mtriples\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtriples is already defined as \e[33mvalue\e[0m \e[35mtriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1edppdlh.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mtriple\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtriple is already defined as \e[33mvalue\e[0m \e[35mtriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1ed"
  stdout: ''
  timestamp: 1659798290
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        for (i <- 1 to n) {\n  \
    \          val j = i * i - i + 1\n            val k = i * i + i + 1\n        \
    \    val value = if (j + k == 0) 1 else 0\n            val count = count(i) +\
    \ value\n            a(i) = value\n            count(i) = count\n        }\n \
    \       count(1)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplwxy12bz.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplwxy12bz.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplwxy12bz.scala:17:23\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var triples = 0\n       \
    \ var a = Array.ofDim[Int](n + 1)\n        a(0) = 1\n        a(1) = 3\n      \
    \  a(2) = 7\n        a(3) = 13\n        a(4) = 21\n        var i = 0\n       \
    \ var j = 0\n        var k = 0\n        while (i < n) {\n            while (j\
    \ < n) {\n                while (k < n) {\n                    if (a(i) + a(j)\
    \ + a(k) == 3) {\n                        triples += 1\n                    }\n\
    \                    k += 1\n                }\n                j += 1\n     \
    \       }\n            i += 1\n        }\n        return triples\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n  \
    \  assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n\
    \    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkpo2sq28.scala:16:33\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \                              ^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \              Found:    Long\n\e[31m   |\e[0m                               \
    \  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val count = mutable.Map[Long, Long]()\n        val sum = 0L\n       \
    \ for(i <- 0 until n) {\n            val j = i + 1\n            val k = n - i\n\
    \            val sum = i * i - i + 1\n            val count = mutable.Map[Long,\
    \ Long]()\n            for(j <- 0 until i until n) {\n                val k =\
    \ n - j\n                val sum = i * i - j + 1\n                val count =\
    \ mutable.Map[Long, Long]()\n                for(k <- 0 until j until n) {\n \
    \                   val sum = i * i - k + 1\n                    val count = mutable.Map[Long,\
    \ Long]()\n                    if(sum % 3 == 0) {\n                        count.put(i,\
    \ count.getOrElse(i, 0L) + 1)\n                        count.put(j, count.getOrElse(j,\
    \ 0L) + 1)\n                        count.put(k, count.getOrElse(k, 0L) + 1)\n\
    \                    }\n                }\n            }\n            val maxCount\
    \ = count.maxBy(_._2)._2\n            val maxCount = count.maxBy(_._2)._2\n  \
    \          val maxCount = count.maxBy(_._2)._2\n            val maxCount = count.maxBy(_._2)._2\n\
    \            val maxCount = count.maxBy(_._2)._2\n            val maxCount = count.maxBy(_._2)._2\n\
    \            val maxCount = count.maxBy(_._2)._2\n            val maxCount = count.maxBy(_._2)._2\n\
    \            val maxCount = count.maxBy(_._2)._2\n            val maxCount = count.maxBy(_._2)._2\n\
    \            val maxCount = count.maxBy(_._2)._2\n            val maxCount = count.maxBy(_._2)._2\n\
    \            val maxCount = count.maxBy(_._2)._2\n            val maxCount = count.maxBy(_._2)._2\n\
    \            val maxCount = count.maxBy(_._2)._2\n            val maxCount = count.maxBy(_._2)._2\n\
    \            val maxCount = count.maxBy(_._2)._2\n            val maxCount = count.maxBy(_._2)._2\n\
    \            val maxCount = count.maxBy(_._2)._2\n            val maxCount = count.maxBy(_._2)._2\n\
    \            val maxCount = count.maxBy(_._2)._2\n            val maxCount = count.maxBy(_._2)._2\n\
    \            val maxCount = count.maxBy(_._2)._2\n            val maxCount = count.maxBy(_._2)._2\n\
    \            val maxCount = count.maxBy(_._2)._2\n            val maxCount = count.maxBy(_._2)._2\n\
    \            val maxCount = count.maxBy(_._\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8gihzpei.scala:63:41 ---------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m            \e[33mval\e[0m \e[36mmaxCount\e[0m = count.maxBy(_._\n\
    \e[31m\e[31m   |\e[0m                                         ^\e[0m\n\e[31m \
    \  |\e[0m                                   an identifier expected, but '_' found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8gihzpei.scala:73:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m73 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp8gihzpei.scala:15:34 --------------------\e[0m\e[0m\n\
    \e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = Array.ofDim[\e[35mLong\e\
    [0m](n)\n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m\
    \   |\e[0m                                  Found:    (n : Long)\n\e[31m   |\e\
    [0m                                  Required: Int\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp8gihzpei.scala:16:20 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.Map[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8gihzpei.scala:18:25 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n) {\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Found:    (n : Long)\n\e[31m   |\e[0m                      \
    \   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8gihzpei.scala:22:24\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m\
    \ \e[36mcount\e[0m = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0"
  stdout: ''
  timestamp: 1659798303
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var max = 0\n        var\
    \ a = new Array[Long](n)\n        for( i <- 0 until n ) {\n            a(i) =\
    \ i * i - i + 1\n        }\n        for( i <- 0 until n ) {\n            for(\
    \ j <- 0 until n ) {\n                for( k <- 0 until n ) {\n              \
    \      if( i < j && j < k && k < n ) {\n                        if( a(i) + a(j)\
    \ + a(k) == 0 ) {\n                            max = max + 1\n               \
    \         }\n                    }\n                }\n            }\n       \
    \ }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8zh20ggv.scala:16:32\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e\
    [0m                                ^\e[0m\n\e[31m   |\e[0m                   \
    \             Found:    (n : Long)\n\e[31m   |\e[0m                          \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8zh20ggv.scala:17:26\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m( i <-\
    \ \e[31m0\e[0m until n ) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp8zh20ggv.scala:20:26 --------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m( i <- \e[31m0\e[0m until n ) {\n\e\
    [31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m         \
    \                 Found:    (n : Long)\n\e[31m   |\e[0m                      \
    \    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8zh20ggv.scala:21:30\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mfor\e[0m( j\
    \ <- \e[31m0\e[0m until n ) {\n\e[31m\e[31m   |\e[0m                         \
    \     ^\e[0m\n\e[31m   |\e[0m                              Found:    (n : Long)\n\
    \e[31m   |\e[0m                              Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8zh20ggv.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mfor\e[0m( k <- \e[31m0\e[0m until\
    \ n ) {\n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m\
    \   |\e[0m                                  Found:    (n : Long)\n\e[31m   |\e\
    [0m                       "
  stdout: ''
  timestamp: 1659798303
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var a = Array.ofDim[Int](n\
    \ + 1)\n        a(0) = 1\n        a(1) = 1\n        a(2) = 1\n        a(3) = 1\n\
    \        a(4) = 1\n        \n        var count = 0\n        \n        for(i<-0\
    \ until n){\n            for(j<-0 until n){\n                for(k<-0 until n){\n\
    \                    if(i<j && i<k && j<k){\n                        if(a(i) +\
    \ a(j) + a(k) == 3){\n                            count = count + 1\n        \
    \                }\n                    }\n                }\n            }\n\
    \        }\n        \n        return count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph1cjjnoj.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \                              ^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \              Found:    Long\n\e[31m   |\e[0m                               \
    \  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph1cjjnoj.scala:24:23\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mfor\e[0m(i<-\e\
    [31m0\e[0m until n){\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m\
    \   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m       \
    \                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmph1cjjnoj.scala:25:27 --------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m            \e[33mfor\e[0m(j<-\e[31m0\e[0m until n){\n\e[31m\e[31m   |\e\
    [0m                           ^\e[0m\n\e[31m   |\e[0m                        \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                           Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph1cjjnoj.scala:26:31\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m                \e[33mfor\e[0m(k<-\e\
    [31m0\e[0m until n){\n\e[31m\e[31m   |\e[0m                               ^\e\
    [0m\n\e[31m   |\e[0m                               Found:    (n : Long)\n\e[31m\
    \   |\e[0m                               Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659798303
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var count = 0\n        var\
    \ a = Array.ofDim[Int](n+1)\n        for(i<-0 until n){\n            a(i) = i\
    \ * i - i + 1\n        }\n        for(i<-0 until n){\n            for(j<-0 until\
    \ n){\n                for(k <- 0 until n){\n                    if(i<j && i<k\
    \ && j<k){\n                        if(a(i) + a(j) + a(k) == 0){\n           \
    \                 count += 1\n                        }\n                    }\n\
    \                }\n            }\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp85ug7met.scala:16:33\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n+\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \                            ^^^\e[0m\n\e[31m   |\e[0m                       \
    \          Found:    Long\n\e[31m   |\e[0m                                 Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp85ug7met.scala:17:23\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i<-\e\
    [31m0\e[0m until n){\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m\
    \   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m       \
    \                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp85ug7met.scala:20:23 --------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mfor\e[0m(i<-\e[31m0\e[0m until n){\n\e[31m\e[31m   |\e[0m\
    \                       ^\e[0m\n\e[31m   |\e[0m                       Found: \
    \   (n : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp85ug7met.scala:21:27 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mfor\e[0m(j<-\e[31m0\e[0m until n){\n\
    \e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m      \
    \                     Found:    (n : Long)\n\e[31m   |\e[0m                  \
    \         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp85ug7met.scala:22:33\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m                \e[33mfor\e[0m(k\
    \ <- \e[31m0\e[0m until n){\n\e[31m\e[31m   |\e[0m                           \
    \      ^\e[0m\n\e[31m   |\e[0m                                 Found:    (n :\
    \ Long)\n\e[31m   |\e[0m                                 Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m lo"
  stdout: ''
  timestamp: 1659798303
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        val maxCount = 0\n     \
    \   for(i <- 0 until n){\n            val j = i + 1\n            val k = n - 1\n\
    \            val sum = i * i - i + 1\n            val sum = j + k\n          \
    \  val sum = sum % 3\n            val sum = sum * sum\n            val sum = sum\
    \ % 3\n            val sum = sum * sum\n            val sum = sum % 3\n      \
    \      val sum = sum * sum\n            val sum = sum % 3\n            val sum\
    \ = sum * sum\n            val sum = sum % 3\n            val sum = sum * sum\n\
    \            val sum = sum % 3\n            val sum = sum * sum\n            val\
    \ sum = sum % 3\n            val sum = sum * sum\n            val sum = sum %\
    \ 3\n            val sum = sum * sum\n            val sum = sum % 3\n        \
    \    val sum = sum * sum\n            val sum = sum % 3\n            val sum =\
    \ sum * sum\n            val sum = sum % 3\n            val sum = sum * sum\n\
    \            val sum = sum % 3\n            val sum = sum * sum\n            val\
    \ sum = sum % 3\n            val sum = sum * sum\n            val sum = sum %\
    \ 3\n            val sum = sum * sum\n            val sum = sum % 3\n        \
    \    val sum = sum * sum\n            val sum = sum % 3\n            val sum =\
    \ sum * sum\n            val sum = sum % 3\n            val sum = sum * sum\n\
    \            val sum = sum % 3\n            val sum = sum * sum\n            val\
    \ sum = sum % 3\n            val sum = sum * sum\n            val sum = sum %\
    \ 3\n            val sum = sum * sum\n            val sum = sum % 3\n        \
    \    val sum = sum * sum\n            val sum = sum % 3\n            val sum =\
    \ sum * sum\n            val sum = sum % 3\n            val sum = sum * sum\n\
    \            val sum = sum % 3\n            val sum = sum * sum\n            val\
    \ sum = sum % 3\n            val sum = sum * sum\n            val sum = sum %\
    \ 3\n            val sum = sum * sum\n            val sum = sum % 3\n        \
    \    val sum = sum * sum\n            val sum = sum % 3\n            val sum =\
    \ sum * sum\n            val sum = sum % 3\n            val sum = sum * sum\n\
    \            val sum = sum % 3\n            val sum = sum * sum\n            val\
    \ sum = sum % 3\n            val sum = sum * sum\n            val sum = sum %\
    \ 3\n            val sum = sum * sum\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptpi8fj9e.scala:97:0 ----------------------------\e\
    [0m\e[0m\n\e[31m97 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptpi8fj9e.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptpi8fj9e.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptpi8fj9e.scala:18:25\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n){\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E161]\
    \ Naming Error: /tmp/tmptpi8fj9e.scala:22:16 ---------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36msum\e[0m = j + k\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0msum is already defined\
    \ as \e[33mvalue\e[0m \e[35msum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmptpi8fj9e.scala:23:16 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36msum\e[0m = sum % \e\
    [31m3\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0msum is "
  stdout: ''
  timestamp: 1659798303
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val t = mutable.ArrayBuffer.empty[Int]\n        val r = mutable.ArrayBuffer.empty[Int]\n\
    \        val s = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val t = mutable.ArrayBuffer.empty[Int]\n\
    \        val r = mutable.ArrayBuffer.empty[Int]\n        val s = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val t = mutable.ArrayBuffer.empty[Int]\n        val r = mutable.ArrayBuffer.empty[Int]\n\
    \        val s = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val t = mutable.ArrayBuffer.empty[Int]\n\
    \        val r = mutable.ArrayBuffer.empty[Int]\n        val s = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val t = mutable.ArrayBuffer.empty[Int]\n        val r = mutable.ArrayBuffer.empty[Int]\n\
    \        val s = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val t = mutable.ArrayBuffer.empty[Int]\n\
    \        val r = mutable.ArrayBuffer.empty[Int]\n        val s = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val t = mutable.ArrayBuffer.empty[Int]\n        val r = mutable.ArrayBuffer.empty[Int]\n\
    \        val s = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val t = mutable.ArrayBuffer.empty[Int]\n\
    \        val r = mutable.ArrayBuffer.empty[Int]\n        val s = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpoogw2h7h.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpoogw2h7h.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpoogw2h7h.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpoogw2h7h.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mt\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mt is already defined as \e[33mvalue\e[0m \e[35mt\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpoogw2h7h.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mr is already defined as \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpoogw2h7h.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659798302
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var a = Array.ofDim[Int](n+1)\n\
    \        a(0) = 1\n        a(1) = 1\n        a(2) = 1\n        val maxTriples\
    \ = 0 \n        for (i <- 0 until n-1) {\n            for (j <- 0 until n-1) {\n\
    \                for (k <- 0 until n-1) {\n                    if (i+j+k == n)\
    \ maxTriples += 1\n                    else if (a(i) + a(j) + a(k) == 3) maxTriples\
    \ += 1\n                }\n            }\n        }\n        return maxTriples\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf8i8w4sc.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n+\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \                            ^^^\e[0m\n\e[31m   |\e[0m                       \
    \          Found:    Long\n\e[31m   |\e[0m                                 Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf8i8w4sc.scala:20:26\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n-\e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                \
    \          ^^^\e[0m\n\e[31m   |\e[0m                          Found:    Long\n\
    \e[31m   |\e[0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpf8i8w4sc.scala:21:30 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mfor\e[0m (j <- \e[31m0\e[0m until n-\e\
    [31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                              ^^^\e[0m\n\e\
    [31m   |\e[0m                              Found:    Long\n\e[31m   |\e[0m   \
    \                           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpf8i8w4sc.scala:22:34 --------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m                \e[33mfor\e[0m (k <- \e[31m0\e[0m until n-\e\
    [31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                                  ^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Long\n\e[31m   |\e\
    [0m                                  Required: Int\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpf8i8w4sc.scala:23:47 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                    \e[33mif\e[0m (i+j+k == n) maxTriples\
    \ += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m           value += is"
  stdout: ''
  timestamp: 1659798303
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var count =\
    \ 0\n        while (i < n && j < n && k < n) {\n            a(i) = i * i - i +\
    \ 1\n            i += 1\n            j += 1\n            k += 1\n        }\n \
    \       val triples = a.zipWithIndex.filter(_._2 < n).map(_._1).sum\n        val\
    \ triple = (triples % 3) == 0\n        if (triple) {\n            count = triples\
    \ + 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2hs93mm9.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2hs93mm9.scala:29:20\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m            count = triples +\
    \ \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Found:    Long\n\e[31m   |\e[0m             \
    \       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798303
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9v1syy8g.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659798289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9v1syy8g.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659798289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var a = Array.ofDim[Int](n+1)\n\
    \        a(0) = 1\n        a(1) = 1\n        a(2) = 1\n        for(i<-3 until\
    \ n){\n            for(j<-3 until n){\n                for(k<-3 until n){\n  \
    \                  if(i<j && i<k && j<k){\n                        if(a(i)+a(j)+a(k)\
    \ == 3){\n                            return 1\n                        }\n  \
    \                  }\n                }\n            }\n        }\n        return\
    \ 0\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvgsovo2v.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n+\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \                            ^^^\e[0m\n\e[31m   |\e[0m                       \
    \          Found:    Long\n\e[31m   |\e[0m                                 Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvgsovo2v.scala:19:23\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mfor\e[0m(i<-\e\
    [31m3\e[0m until n){\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m\
    \   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m       \
    \                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpvgsovo2v.scala:20:27 --------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m            \e[33mfor\e[0m(j<-\e[31m3\e[0m until n){\n\e[31m\e[31m   |\e\
    [0m                           ^\e[0m\n\e[31m   |\e[0m                        \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                           Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvgsovo2v.scala:21:31\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m                \e[33mfor\e[0m(k<-\e\
    [31m3\e[0m until n){\n\e[31m\e[31m   |\e[0m                               ^\e\
    [0m\n\e[31m   |\e[0m                               Found:    (n : Long)\n\e[31m\
    \   |\e[0m                               Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659798303
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgbg5c7zz.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpgbg5c7zz.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxTriples\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriples is already defined as \e[33mvalue\e[0m \e[35mmaxTriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgbg5c7zz.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxTriple\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriple is already defined as \e[33mvalue\e[0m \e[35mmaxTriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgbg5c7zz.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxTriples\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriples is already defined as \e[33mvalue\e[0m \e[35mmaxTriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgbg5c7zz.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxTriple\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriple is already defined as \e[33mvalue\e[0m \e[35mmaxTriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel"
  stdout: ''
  timestamp: 1659798303
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        for (i <- 1 to n) {\n  \
    \          val j = i * i - i + 1\n            val k = i * i + i + j\n        \
    \    if (j > k) {\n                a(i) = j\n                count(i) = 1\n  \
    \          } else {\n                a(i) = k\n                count(i) = count(i)\
    \ + 1\n            }\n        }\n        count(1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2hdvp31n.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2hdvp31n.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2hdvp31n.scala:17:23\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798302
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = scala.math.BigInt(3)\n        var i = 0\n        var j = 0\n\
    \        var k = 0\n        var count = 0\n        while(i < n && j < n && k <\
    \ n) {\n            a(i) = i * i - i + 1\n            i += 1\n            j +=\
    \ 1\n            k += 1\n        }\n        while(i < n) {\n            a(i) =\
    \ i * i - i + 1\n            i += 1\n        }\n        while(j < n) {\n     \
    \       a(j) = i * i - i + 1\n            j += 1\n        }\n        while(k <\
    \ n) {\n            a(k) = i * i - i + 1\n            k += 1\n        }\n    \
    \    for(i<-0 until a.length) {\n            for(j<-0 until a.length) {\n    \
    \            for(k <- 0 until a.length) {\n                    if(i<j && i<k &&\
    \ j<k) {\n                        if(a(i) + a(j) + a(k) == m) {\n            \
    \                count += 1\n                        }\n                    }\n\
    \                }\n            }\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwzer_pay.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798302
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = mutable.HashMap[Long, Long]()\n        for(i <- 1 to n){\n  \
    \          val j = i * i - i + 1\n            val k = i * i + j\n            if((j\
    \ + k) % 3 == 0){\n                a(i) = j\n                m(k) = i\n      \
    \      }\n        }\n        val res = a.filter(_ % 3 == 0).length\n        m.values.toList.sortWith(_\
    \ > _).last\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9oqx8vd_.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9oqx8vd_.scala:16:16\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mm\e[0m = mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9oqx8vd_.scala:17:22\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n){\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m \
    \  |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m         \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798303
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var triples = 0\n       \
    \ var a = Array.ofDim[Int](n)\n        for( i <- 1 to n ) {\n            a(i)\
    \ = i * i - i + 1\n        }\n        for( i <- 1 to n ) {\n            for( j\
    \ <- 1 to n ) {\n                for( k <- 1 to n ) {\n                    if(\
    \ i != j && j != k && i != k ) {\n                        if( a(i) + a(j) + a(k)\
    \ == 0 ) {\n                            triples += 1\n                       \
    \ }\n                    }\n                }\n            }\n        }\n    \
    \    return triples\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprkxr8qnq.scala:16:33\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprkxr8qnq.scala:17:23\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m( i <-\
    \ \e[31m1\e[0m to n ) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmprkxr8qnq.scala:20:23 --------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mfor\e[0m( i <- \e[31m1\e[0m to n ) {\n\e[31m\e[31m   |\e\
    [0m                       ^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprkxr8qnq.scala:21:27 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mfor\e[0m( j <- \e[31m1\e[0m to n )\
    \ {\n\e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m \
    \                          Found:    (n : Long)\n\e[31m   |\e[0m             \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmprkxr8qnq.scala:22:31 --------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m                \e[33mfor\e[0m( k <- \e[31m1\e[0m to n ) {\n\e[31m\e[31m\
    \   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m             \
    \                  Found:    (n : Long)\n\e[31m   |\e[0m                     \
    \          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer ex"
  stdout: ''
  timestamp: 1659798304
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgbg5c7zz.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpgbg5c7zz.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxTriples\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriples is already defined as \e[33mvalue\e[0m \e[35mmaxTriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgbg5c7zz.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxTriple\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriple is already defined as \e[33mvalue\e[0m \e[35mmaxTriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgbg5c7zz.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxTriples\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriples is already defined as \e[33mvalue\e[0m \e[35mmaxTriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgbg5c7zz.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxTriple\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriple is already defined as \e[33mvalue\e[0m \e[35mmaxTriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel"
  stdout: ''
  timestamp: 1659798303
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        var i = 0\n        var\
    \ j = 0\n        var k = 0\n        var count = 0\n        while (i < n && j <\
    \ n && k < n) {\n            val temp = a(i) + a(j) + a(k) + 3\n            if\
    \ (temp % 3 == 0) {\n                count += 1\n                m += temp\n \
    \           }\n            i += 1\n            j += 1\n            k += 1\n  \
    \      }\n        if (count == 0) {\n            count = 0\n        }\n      \
    \  m.toList.length\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc_fmyr88.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc_fmyr88.scala:16:16\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798301
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpj9txdrs1.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpj9txdrs1.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.HashMap[\e[35mInt\e[0m,\
    \ \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpj9txdrs1.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.HashMap[\e[35mInt\e[0m,\
    \ \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpj9txdrs1.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.HashMap[\e[35mInt\e[0m,\
    \ \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpj9txdrs1.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.HashMap[\e[35mInt\e[0m,\
    \ \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpj9txdrs1.scala:22:12 ---------------------------\e"
  stdout: ''
  timestamp: 1659798303
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        for(i <- 1 to n) {\n\
    \            val j = i * i - i + 1\n            val k = i * i + i + j\n      \
    \      val x = a(i) + a(i) + a(i)\n            val y = a(i) + a(i) + a(k) + a(k)\
    \ + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k)\
    \ + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k)\
    \ + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k)\
    \ + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k)\
    \ + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k)\
    \ + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k)\
    \ + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k)\
    \ + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k)\
    \ + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k)\
    \ + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k)\
    \ + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k)\
    \ + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k)\
    \ + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k)\
    \ + a(k) + a(k) + a(k) + a(k\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpejbfz90_.scala:22:4 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpejbfz90_.scala:31:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m31 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpejbfz90_.scala:15:33 --------------------\e[0m\e[0m\n\
    \e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = Array.ofDim[\e[35mInt\e[0m](n)\n\
    \e[31m\e[31m   |\e[0m                                 ^\e[0m\n\e[31m   |\e[0m\
    \                                 Found:    (n : Long)\n\e[31m   |\e[0m      \
    \                           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpejbfz90_.scala:16:16 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpejbfz90_.scala:17:22 --------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n) {\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpejbfz90_.scala:30:1\
    \ ---------------------\e[0m\e[0m\n\e[31m30 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: Long\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmpejbfz90_.scala:23:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m23 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mStrin"
  stdout: ''
  timestamp: 1659798304
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var count = 0\n        var\
    \ a = Array.ofDim[Int](n+1)\n        for(i <- 1 to n){\n            a(i) = i *\
    \ i - i + 1\n        }\n        for(i <- 1 to n){\n            for(j <- 1 to n){\n\
    \                for(k <- 1 to n){\n                    if(i<j && i<k && j<k){\n\
    \                        if(a(i) + a(j) + a(k) == 0){\n                      \
    \      count += 1\n                        }\n                    }\n        \
    \        }\n            }\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9o9qtp8q.scala:16:33\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n+\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \                            ^^^\e[0m\n\e[31m   |\e[0m                       \
    \          Found:    Long\n\e[31m   |\e[0m                                 Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9o9qtp8q.scala:17:22\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n){\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m \
    \  |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m         \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp9o9qtp8q.scala:20:22 --------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e[31m   |\e[0m\
    \                      ^\e[0m\n\e[31m   |\e[0m                      Found:   \
    \ (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9o9qtp8q.scala:21:26 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mfor\e[0m(j <- \e[31m1\e[0m to n){\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (n : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9o9qtp8q.scala:22:30\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m                \e[33mfor\e[0m(k\
    \ <- \e[31m1\e[0m to n){\n\e[31m\e[31m   |\e[0m                              ^\e\
    [0m\n\e[31m   |\e[0m                              Found:    (n : Long)\n\e[31m\
    \   |\e[0m                              Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation availab"
  stdout: ''
  timestamp: 1659798304
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val count = mutable.Map[Long, Long]()\n        val triples = mutable.Map[Long,\
    \ Long]()\n        val triple = mutable.Map[Long, Long]()\n        val triple2\
    \ = mutable.Map[Long, Long]()\n        val triple3 = mutable.Map[Long, Long]()\n\
    \        val triple4 = mutable.Map[Long, Long]()\n        val triple5 = mutable.Map[Long,\
    \ Long]()\n        val triple6 = mutable.Map[Long, Long]()\n        val triple7\
    \ = mutable.Map[Long, Long]()\n        val triple8 = mutable.Map[Long, Long]()\n\
    \        val triple9 = mutable.Map[Long, Long]()\n        val triple10 = mutable.Map[Long,\
    \ Long]()\n        val triple11 = mutable.Map[Long, Long]()\n        val triple12\
    \ = mutable.Map[Long, Long]()\n        val triple13 = mutable.Map[Long, Long]()\n\
    \        val triple14 = mutable.Map[Long, Long]()\n        val triple15 = mutable.Map[Long,\
    \ Long]()\n        val triple16 = mutable.Map[Long, Long]()\n        val triple17\
    \ = mutable.Map[Long, Long]()\n        val triple18 = mutable.Map[Long, Long]()\n\
    \        val triple19 = mutable.Map[Long, Long]()\n        val triple20 = mutable.Map[Long,\
    \ Long]()\n        val triple21 = mutable.Map[Long, Long]()\n        val triple22\
    \ = mutable.Map[Long, Long]()\n        val triple23 = mutable.Map[Long, Long]()\n\
    \        val triple24 = mutable.Map[Long, Long]()\n        val triple25 = mutable.Map[Long,\
    \ Long]()\n        val triple26 = mutable.Map[Long, Long]()\n        val triple27\
    \ = mutable.Map[Long, Long]()\n        val triple28 = mutable.Map[Long, Long]()\n\
    \        val triple29 = mutable.Map[Long, Long]()\n        val triple30 = mutable.Map[Long,\
    \ Long]()\n        val triple31 = mutable.Map[Long, Long]()\n        val triple32\
    \ = mutable.Map[Long, Long]()\n        val triple33 = mutable.Map[Long, Long]()\n\
    \        val triple34 = mutable.Map[Long, Long]()\n        val triple35 = mutable.Map[Long,\
    \ Long]\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplcwdd3gi.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplcwdd3gi.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplcwdd3gi.scala:17:22\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mtriples\e[0m = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmplcwdd3gi.scala:18:21 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36mtriple\e[0m = mutable.Map[\e[35mLong\e[0m, \e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmplcwdd3gi.scala:19:22 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mtriple2\e[0m = mutable.Map[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl"
  stdout: ''
  timestamp: 1659798304
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        var i = 0\n        var\
    \ j = 0\n        var k = 0\n        var count = 0\n        while(i < n && j <\
    \ n && k < n) {\n            if(i+j+k == n) {\n                count += 1\n  \
    \              m += (i+j+k)\n                i += 1\n                j += 1\n\
    \                k += 1\n            } else if(i+j+k > n) {\n                i\
    \ += 1\n                j += 1\n                k += 1\n            } else if(j+k\
    \ > n) {\n                j += 1\n                k += 1\n            } else if(i+j+k\
    \ > n) {\n                i += 1\n                j += 1\n                k +=\
    \ 1\n            } else {\n                i += 1\n                j += 1\n  \
    \              k += 1\n            }\n        }\n        count += m.toArray.filter(_\
    \ % 3 == 0).length\n        return count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp44txjpih.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp44txjpih.scala:16:16\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798303
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n+1)\n\
    \        a(0) = 1\n        a(1) = 1\n        a(2) = 1\n        a(3) = 1\n    \
    \    val m = a.length\n        val n = a.last\n        val triples = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n        \
    \        for (k <- 0 until n) {\n                    if (i < j && j < k && k <\
    \ n) {\n                        val sum = i * i + j * j + k * k\n            \
    \            if (sum % 3 == 0) {\n                            triples += sum\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n        triples.toList.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp76xijxuy.scala:21:16 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = a.last\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp76xijxuy.scala:22:22 ------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mtriples\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659798299
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val i = mutable.ArrayBuffer.empty[Int]\n\
    \        val j = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val count = mutable.ArrayBuffer.empty[Int]\n        val triples = mutable.ArrayBuffer.empty[Int]\n\
    \        val triple = mutable.ArrayBuffer.empty[Int]\n        val triples = mutable.ArrayBuffer.empty[Int]\n\
    \        val triple = mutable.ArrayBuffer.empty[Int]\n        val triples = mutable.ArrayBuffer.empty[Int]\n\
    \        val triple = mutable.ArrayBuffer.empty[Int]\n        val triples = mutable.ArrayBuffer.empty[Int]\n\
    \        val triple = mutable.ArrayBuffer.empty[Int]\n        val triples = mutable.ArrayBuffer.empty[Int]\n\
    \        val triple = mutable.ArrayBuffer.empty[Int]\n        val triples = mutable.ArrayBuffer.empty[Int]\n\
    \        val triple = mutable.ArrayBuffer.empty[Int]\n        val triples = mutable.ArrayBuffer.empty[Int]\n\
    \        val triple = mutable.ArrayBuffer.empty[Int]\n        val triples = mutable.ArrayBuffer.empty[Int]\n\
    \        val triple = mutable.ArrayBuffer.empty[Int]\n        val triples = mutable.ArrayBuffer.empty[Int]\n\
    \        val triple = mutable.ArrayBuffer.empty[Int]\n        val triples = mutable.ArrayBuffer.empty[Int]\n\
    \        val triple = mutable.ArrayBuffer.empty[Int]\n        val triples = mutable.ArrayBuffer.empty[Int]\n\
    \        val triple = mutable.ArrayBuffer.empty[Int]\n        val triples = mutable.ArrayBuffer.empty[Int]\n\
    \        val triple = mutable.ArrayBuffer.empty[Int]\n        val triples = mutable.ArrayBuffer.empty[Int]\n\
    \        val triple = mutable.ArrayBuffer.empty[Int]\n        val triples = mutable.ArrayBuffer.empty[Int]\n\
    \        val triple = mutable.ArrayBuffer.empty[Int]\n        val triples = mutable.ArrayBuffer.empty[Int]\n\
    \        val triple = mutable.ArrayBuffer.empty[Int]\n        val triples = mutable.ArrayBuffer.empty[Int]\n\
    \        val triple = mutable.ArrayBuffer.empty[Int]\n        \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n  \
    \  assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n\
    \    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmplhjp4fjy.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mk\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mk is already defined as \e[33mvalue\e[0m \e[35mk\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmplhjp4fjy.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mtriples\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtriples is already defined as \e[33mvalue\e[0m \e[35mtriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmplhjp4fjy.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mtriple\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtriple is already defined as \e[33mvalue\e[0m \e[35mtriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmplhjp4fjy.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mtriples\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtriples is already defined as \e[33mvalue\e[0m \e[35mtriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmplhjp4fjy.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mtriple\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659798302
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9v1syy8g.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659798289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var a = Array.ofDim[Int](n)\n\
    \        for( i <- 0 until n ) {\n            a(i) = i * i - i + 1\n        }\n\
    \        val result = a.filter( x => x < 3 ).length\n        result * 3\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdrle1fv6.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdrle1fv6.scala:16:26\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m( i <-\
    \ \e[31m0\e[0m until n ) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798313
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var count =\
    \ 0\n        while (i < n && j < n && k < n) {\n            a(i) = i * i - i +\
    \ 1\n            i += 1\n            j += 1\n            k += 1\n            count\
    \ += 1\n        }\n        val max = a.max\n        val maxIndex = a.indexOf(max)\n\
    \        if (maxIndex == 0 || maxIndex == n - 1) {\n            return count\n\
    \        }\n        val max2 = a.max\n        val maxIndex2 = a.indexOf(max2)\n\
    \        if (maxIndex2 == 0 || maxIndex2 == n - 1) {\n            return count\n\
    \        }\n        if (maxIndex > maxIndex2) {\n            val temp = maxIndex\n\
    \            maxIndex = maxIndex2\n            maxIndex2 = temp\n        }\n \
    \       val max3 = a.max\n        val maxIndex3 = a.indexOf(max3)\n        if\
    \ (maxIndex3 == 0 || maxIndex3 == n - 1) {\n            return count\n       \
    \ }\n        if (maxIndex > maxIndex3 && maxIndex2 > maxIndex3) {\n          \
    \  val temp1 = maxIndex\n            maxIndex = maxIndex3\n            maxIndex3\
    \ = temp1\n        }\n        val max4 = a.max\n        val maxIndex4 = a.indexOf(max4)\n\
    \        if (maxIndex4 == 0 || maxIndex4 == n - 1) {\n            return count\n\
    \        }\n        if (maxIndex > maxIndex4 && maxIndex2 > maxIndex4) {\n   \
    \         val temp2 = maxIndex\n            maxIndex = maxIndex4\n           \
    \ maxIndex4 = temp2\n        }\n        val max5 = a.max\n        val maxIndex5\
    \ = a.indexOf(max5)\n        if (maxIndex5 == 0 || maxIndex5 == n - 1) {\n   \
    \         return count\n        }\n        if (maxIndex > maxIndex5 && maxIndex2\
    \ > maxIndex5 && maxIndex3 > maxIndex5) {\n            val temp3 = maxIndex\n\
    \            maxIndex = maxIndex5\n            maxIndex5 = temp3\n        }\n\
    \        val max6 = a.max\n        val maxIndex6 = a.indexOf(max6)\n        if\
    \ (maxIndex6 == 0 || maxIndex6 == n - 1) {\n            return count\n       \
    \ }\n        if (maxIndex > maxIndex6 && maxIndex2 > maxIndex6 && maxIndex3 >\
    \ maxIndex6 && maxIndex4 > maxIndex6) {\n            val temp4 = maxIndex\n  \
    \          maxIndex = maxIndex6\n            maxIndex6 = temp4\n        }\n  \
    \      val max7 = a.max\n        val maxIndex7 = a.indexOf(max7)\n        if (maxIndex7\
    \ == 0 || maxIndex7 == n - 1) {\n            return count\n        }\n       \
    \ if (maxIndex > maxIndex7 && maxIndex2 > maxIndex7 && \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmps2wu4ydm.scala:87:60 ---------------------------\e\
    [0m\e[0m\n\e[31m87 |\e[0m        \e[33mif\e[0m (maxIndex > maxIndex7 && maxIndex2\
    \ > maxIndex7 && \n\e[31m\e[31m   |\e[0m                                     \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \         expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmps2wu4ydm.scala:15:33 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = Array.ofDim[\e\
    [35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                                 ^\e[0m\n\
    \e[31m   |\e[0m                                 Found:    (n : Long)\n\e[31m \
    \  |\e[0m                                 Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmps2wu4ydm.scala:39:21 -----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m            maxIndex = maxIndex2\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment\
    \ to val maxIndex\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmps2wu4ydm.scala:40:22\
    \ -----------------------------\e[0m\e[0m\n\e[31m40 |\e[0m            maxIndex2\
    \ = temp\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            Reassignment to val maxIndex2\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmps2wu4ydm.scala:49:21 -----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m            maxIndex = maxIndex3\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment\
    \ to val maxIndex\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmps2wu4ydm.scala:50:22\
    \ -----------------------------\e[0m\e[0m\n\e[31m50 |\e[0m            maxIndex"
  stdout: ''
  timestamp: 1659798312
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        var i = 0\n        var\
    \ j = 0\n        var k = 0\n        var count = 0\n        while(i < n && j <\
    \ n && k < n) {\n            if(i<j && j<k) {\n                a(i) = i*i - i\
    \ + 1\n                i += 1\n                j += 1\n                k += 1\n\
    \                count += 1\n            } else if(i<k) {\n                a(i)\
    \ = i*i - i + 1\n                i += 1\n                k += 1\n            \
    \    count += 1\n            } else if(j<k) {\n                a(j) = i*i - i\
    \ + 1\n                j += 1\n                k += 1\n                count +=\
    \ 1\n            } else {\n                a(k) = i*i - i + 1\n              \
    \  k += 1\n                count += 1\n            }\n        }\n        val res\
    \ = a.filter(_ % 3 == 0).length\n        count += res\n        count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9l2qrax6.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9l2qrax6.scala:16:16\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798314
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        for(i <- 0 until n) {\n\
    \            val j = i * i - i + 1\n            val k = i * i + j\n          \
    \  val l = i * i - j\n            if((j > 0) && (k > 0) && (l > 0)) {\n      \
    \          a += i\n                m += j\n                m += k\n          \
    \  }\n        }\n        val count = m.toList.count(x => x % 3 == 0)\n       \
    \ return count\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3i_lgt6i.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3i_lgt6i.scala:16:16\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3i_lgt6i.scala:17:25\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp3i_lgt6i.scala:22:18 ------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m                a += i\n\e[31m\e[31m   |\e[0m            \
    \    ^^^^\e[0m\n\e[31m   |\e[0m             value += is not a member of Array[Int]\
    \ - did you mean a.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1659798316
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val i = mutable.ArrayBuffer.empty[Int]\n        val j = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val i = mutable.ArrayBuffer.empty[Int]\n\
    \        val j = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val i = mutable.ArrayBuffer.empty[Int]\n        val j = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val i = mutable.ArrayBuffer.empty[Int]\n\
    \        val j = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val i = mutable.ArrayBuffer.empty[Int]\n        val j = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val i = mutable.ArrayBuffer.empty[Int]\n\
    \        val j = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val i = mutable.ArrayBuffer.empty[Int]\n        val j = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val i = mutable.ArrayBuffer.empty[Int]\n\
    \        val j = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpln427oe1.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpln427oe1.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpln427oe1.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpln427oe1.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mi\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mi is already defined as \e[33mvalue\e[0m \e[35mi\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpln427oe1.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mj\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mj is already defined as \e[33mvalue\e[0m \e[35mj\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpln427oe1.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659798314
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9v1syy8g.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659798289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, \n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwi8rk6cz.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpwi8rk6cz.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxTriples\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriples is already defined as \e[33mvalue\e[0m \e[35mmaxTriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwi8rk6cz.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxTriple\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriple is already defined as \e[33mvalue\e[0m \e[35mmaxTriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwi8rk6cz.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxTriples\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriples is already defined as \e[33mvalue\e[0m \e[35mmaxTriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwi8rk6cz.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxTriple\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriple is already defined as \e[33mvalue\e[0m \e[35mmaxTriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel"
  stdout: ''
  timestamp: 1659798315
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var a = Array.ofDim[Int](n);\n\
    \        var sum = 0;\n        var max = 0;\n        var maxTriples = 0;\n   \
    \     var j = 0;\n        var k = 0;\n        var i = 0;\n        for(i <- 0 until\
    \ n) {\n            a(i) = i * i - i + 1;\n            sum += a(i);\n        }\n\
    \        for(i <- 0 until n) {\n            for(j <- 0 until n) {\n          \
    \      for(k <- 0 until n) {\n                    if(i<j && j<k && k<i) {\n  \
    \                      if(a(i) + a(j) + a(k) == sum) {\n                     \
    \       maxTriples += 1;\n                            max = Math.max(max, a(i)\
    \ + a(j) + a(k));\n                        }\n                    }\n        \
    \        }\n            }\n        }\n        return maxTriples;\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n  \
    \  assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n\
    \    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2jeo54qe.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n);\n\e[31m\e[31m   |\e[0m                 \
    \                ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2jeo54qe.scala:22:25\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp2jeo54qe.scala:26:25 --------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n) {\n\e[31m\e\
    [31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m                \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                         Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2jeo54qe.scala:27:29\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m            \e[33mfor\e[0m(j\
    \ <- \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          \
    \   ^\e[0m\n\e[31m   |\e[0m                             Found:    (n : Long)\n\
    \e[31m   |\e[0m                             Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2jeo54qe.scala:28:33 --------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                \e[33mfor\e[0m(k <- \e[31m0\e[0m until\
    \ n) {\n\e[31m\e[31m   |\e[0m                                 ^\e[0m\n\e[31m \
    \  |\e[0m                                 Found:    (n : Long)\n\e[31m   |\e[0m\
    \                                 Required: Int\n\e[31m   "
  stdout: ''
  timestamp: 1659798315
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[In\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1edppdlh.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1edppdlh.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mtriples\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mtriples is already defined as \e[33mvalue\e[0m \e[35mtriples\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp1edppdlh.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mtriple\e[0m = mutable.Map[\e[35mInt\e[0m,\
    \ \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtriple is already defined as \e[33mvalue\e[0m \e[35mtriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1edppdlh.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mtriples\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtriples is already defined as \e[33mvalue\e[0m \e[35mtriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1edppdlh.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mtriple\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtriple is already defined as \e[33mvalue\e[0m \e[35mtriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1ed"
  stdout: ''
  timestamp: 1659798290
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        for(i <- 0 until n){\n\
    \            val j = i * i - i + 1\n            val k = i * i + i + 1\n      \
    \      if((j < k) && (j % 3 == 0)){\n                a += j\n                m\
    \ += i\n            }\n        }\n        m.toList.length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3x1nb4wd.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3x1nb4wd.scala:16:16\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3x1nb4wd.scala:17:25\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n){\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp3x1nb4wd.scala:21:18 ------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m                a += j\n\e[31m\e[31m   |\e[0m            \
    \    ^^^^\e[0m\n\e[31m   |\e[0m             value += is not a member of Array[Int]\
    \ - did you mean a.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1659798317
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        for( i <- 1 to n ) {\n \
    \           val j = i * i - i + 1\n            val k = i * i + i + j\n       \
    \     if( j > 0 ) {\n                if( k > 0 ) {\n                    if( j\
    \ + k == 0 ) {\n                        a(i) = j\n                        count(j)\
    \ = count(j) + 1\n                    } else {\n                        a(i) =\
    \ k\n                        count(k) = count(k) + 1\n                    }\n\
    \                } else {\n                    a(i) = j\n                    count(j)\
    \ = count(j) + 1\n                }\n            } else {\n                a(i)\
    \ = k\n                count(k) = count(k) + 1\n            }\n        }\n   \
    \     count(0)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnuyoai53.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnuyoai53.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnuyoai53.scala:17:23\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m( i <-\
    \ \e[31m1\e[0m to n ) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798315
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val result = mutable.ArrayBuffer.empty[Int]\n        val max = 0\n  \
    \      val min = 0\n        val maxTriples = 0\n        val minTriples = 0\n \
    \       val maxSum = 0\n        val minSum = 0\n        val maxSumTriples = 0\n\
    \        val minSumTriples = 0\n        val maxSumTriples = 0\n        val minSumTriples\
    \ = 0\n        val maxSumTriples = 0\n        val minSumTriples = 0\n        val\
    \ maxSumTriples = 0\n        val minSumTriples = 0\n        val maxSumTriples\
    \ = 0\n        val minSumTriples = 0\n        val maxSumTriples = 0\n        val\
    \ minSumTriples = 0\n        val maxSumTriples = 0\n        val minSumTriples\
    \ = 0\n        val maxSumTriples = 0\n        val minSumTriples = 0\n        val\
    \ maxSumTriples = 0\n        val minSumTriples = 0\n        val maxSumTriples\
    \ = 0\n        val minSumTriples = 0\n        val maxSumTriples = 0\n        val\
    \ minSumTriples = 0\n        val maxSumTriples = 0\n        val minSumTriples\
    \ = 0\n        val maxSumTriples = 0\n        val minSumTriples = 0\n        val\
    \ maxSumTriples = 0\n        val minSumTriples = 0\n        val maxSumTriples\
    \ = 0\n        val minSumTriples = 0\n        val maxSumTriples = 0\n        val\
    \ minSumTriples = 0\n        val maxSumTriples = 0\n        val minSumTriples\
    \ = 0\n        val maxSumTriples = 0\n        val minSumTriples = 0\n        val\
    \ maxSumTriples = 0\n        val minSumTriples = 0\n        val maxSumTriples\
    \ = 0\n        val minSumTriples = 0\n        val maxSumTriples = 0\n        val\
    \ minSumTriples = 0\n        val maxSumTriples = 0\n        val minSumTriples\
    \ = 0\n        val maxSumTriples = 0\n        val minSumTriples = 0\n        val\
    \ maxSumTriples = 0\n        val minSumTriples = 0\n        val maxSumTriples\
    \ = 0\n        val minSumTriples = 0\n        val maxSumTriples = 0\n        val\
    \ minSumTriples = 0\n        val maxSumTriples = 0\n        val minSumTriples\
    \ = 0\n        val maxSumTriples = 0\n        val minSumTriples = 0\n        val\
    \ maxSumTri\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp03xrk5p1.scala:80:4 ----------------------------\e\
    [0m\e[0m\n\e[31m80 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp03xrk5p1.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxSumTriples\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxSumTriples is already defined as \e[33mvalue\e[0m \e[35mmaxSumTriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp03xrk5p1.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mminSumTriples\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mminSumTriples\
    \ is already defined as \e[33mvalue\e[0m \e[35mminSumTriples\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp03xrk5p1.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxSumTriples\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxSumTriples is already defined as \e[33mvalue\e[0m \e[35mmaxSumTriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp03xrk5p1.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mminSumTriples\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mminSumTriples\
    \ is already defined as \e[33mvalue\e[0m \e[35mminSumTriples\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp03xrk5p1.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxSumTriples\e["
  stdout: ''
  timestamp: 1659798316
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val i = mutable.ArrayBuffer.empty[Int]\n\
    \        val j = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val a = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val i = mutable.ArrayBuffer.empty[Int]\n\
    \        val j = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val a = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val i = mutable.ArrayBuffer.empty[Int]\n\
    \        val j = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val a = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val i = mutable.ArrayBuffer.empty[Int]\n\
    \        val j = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val a = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val i = mutable.ArrayBuffer.empty[Int]\n\
    \        val j = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val a = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val i = mutable.ArrayBuffer.empty[Int]\n\
    \        val j = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val a = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val i = mutable.ArrayBuffer.empty[Int]\n\
    \        val j = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppsjiuz95.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmppsjiuz95.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mk\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mk is already defined as \e[33mvalue\e[0m \e[35mk\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmppsjiuz95.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0ma is already defined as \e[33mvalue\e[0m \e[35ma\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmppsjiuz95.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmppsjiuz95.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mk\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mk is already defined as \e[33mvalue\e[0m \e[35mk\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmppsjiuz95.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659798316
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var a = Array.ofDim[Int](n)\n\
    \        var count = 0\n        for (i<-0 until n) {\n            a(i) = i * i\
    \ - i + 1\n        }\n        for (i<-0 until n) {\n            for (j<-0 until\
    \ n) {\n                for (k<-0 until n) {\n                    if (a(i) + a(j)\
    \ + a(k) == 3) {\n                        count += 1\n                    }\n\
    \                }\n            }\n        }\n        return count\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgs_r83bt.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgs_r83bt.scala:17:24\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i<-\e\
    [31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                        ^\e[0m\n\e\
    [31m   |\e[0m                        Found:    (n : Long)\n\e[31m   |\e[0m   \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpgs_r83bt.scala:20:24 --------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mfor\e[0m (i<-\e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e\
    [0m                        ^\e[0m\n\e[31m   |\e[0m                        Found:\
    \    (n : Long)\n\e[31m   |\e[0m                        Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgs_r83bt.scala:21:28 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mfor\e[0m (j<-\e[31m0\e[0m until n)\
    \ {\n\e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m\
    \                            Found:    (n : Long)\n\e[31m   |\e[0m           \
    \                 Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpgs_r83bt.scala:22:32 --------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m                \e[33mfor\e[0m (k<-\e[31m0\e[0m until n) {\n\e[31m\e[31m\
    \   |\e[0m                                ^\e[0m\n\e[31m   |\e[0m            \
    \                    Found:    (n : Long)\n\e[31m   |\e[0m                   \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e["
  stdout: ''
  timestamp: 1659798317
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        for (i <- 0 until n) {\n\
    \            a(i) = i * i - i + 1\n        }\n        val triples = a.zipWithIndex.filter(_._2\
    \ < n).filter(_._1 < n).filter(_._2 < n).map(_._1).distinct\n        triples.foreach\
    \ { i =>\n            val triple = a.zipWithIndex.filter(_._1 < i).filter(_._2\
    \ < i).filter(_._3 < i).map(_._1).distinct\n            val tripleCount = triple.length\n\
    \            if (tripleCount > 0) {\n                val tripleSum = triple.map(x\
    \ => a(x) + a(i) + a(i + 1)).sum\n                if (tripleSum > 0) {\n     \
    \               count(tripleSum) += 1\n                }\n            }\n    \
    \    }\n        count(triples.last) += 1\n        count(triples.last).sum\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) ==\
    \ (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0wy95glj.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0wy95glj.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0wy95glj.scala:17:26\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp0wy95glj.scala:22:83 ------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mtriple\e[0m = a.zipWithIndex.filter(_._1\
    \ < i).filter(_._2 < i).filter(_._3 < i).map(_._1).distinct\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \       ^^^^\e[0m\n\e[31m   |\e[0m           value _3 is not a member of (Int,\
    \ Int) - did you mean _$7._1?\n4 errors found\n"
  stdout: ''
  timestamp: 1659798318
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val result = mutable.HashMap[Int, Int]()\n        \n        for( i <-\
    \ 1 to n ) {\n            val j = i\n            val k = n - i\n            \n\
    \            if( i != j ) {\n                val temp = a(i)\n               \
    \ a(i) = a(j)\n                a(j) = temp\n            }\n            \n    \
    \        if( i != k ) {\n                val temp = a(i)\n                a(i)\
    \ = a(k) \n                a(k) = temp\n            }\n            \n        \
    \    if( j != k ) {\n                val temp = a(j)\n                a(j) = a(k)\
    \ \n                a(k) = temp\n            }\n            \n            if(\
    \ i != k ) {\n                val temp = a(i)\n                a(i) = a(k) \n\
    \                a(k) = temp\n            }\n            \n            if( j !=\
    \ k ) {\n                val temp = a(j)\n                a(j) = a(k) \n     \
    \           a(k) = temp\n            }\n            \n            if( i != j )\
    \ {\n                val temp = a(i)\n                a(i) = a(j)\n          \
    \      a(j) = temp\n            }\n            \n            if( j != k ) {\n\
    \                val temp = a(j)\n                a(j) = a(k) \n             \
    \   a(k) = temp\n            }\n            \n            if( i != k ) {\n   \
    \             val temp = a(i)\n                a(i) = a(k) \n                a(k)\
    \ = temp\n            }\n            \n            if( j != k ) {\n          \
    \      val temp = a(j)\n                a(j) = a(k) \n                a(k) = temp\n\
    \            }\n            \n            if( i != j ) {\n                val\
    \ temp = a(i)\n                a(i) = a(j)\n                a(j) = temp\n    \
    \        }\n            \n            if( j != k ) {\n                val temp\
    \ = a(j)\n                a(j) = a(k) \n                a(k) = temp\n        \
    \    }\n            \n            if( i != k ) {\n                val temp = a(i)\n\
    \                a(i) = a(k) \n                a(k) = temp\n            }\n  \
    \          \n            if( j != k ) {\n                val temp = a(j)\n   \
    \             a(j) = a(k) \n                a(k) = temp\n            }\n     \
    \       \n            if( i != j ) {\n                val temp = a(i)\n      \
    \          a(i) = a(j)\n                a(j) = temp\n            }\n         \
    \   \n            if( j != k ) {\n                val temp = a(j)\n          \
    \      a(j) = a(k) \n                a(k) = temp\n            }\n            \n\
    \            if( i != k \n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpob0o4vum.scala:113:4 ---------------------------\e\
    [0m\e[0m\n\e[31m113 |\e[0m    }\n\e[31m\e[31m    |\e[0m    ^\e[0m\n\e[31m    |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpob0o4vum.scala:122:0\
    \ ---------------------------\e[0m\e[0m\n\e[31m122 |\e[0m\n\e[31m\e[31m    |\e\
    [0m^\e[0m\n\e[31m    |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpob0o4vum.scala:15:33 --------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = Array.ofDim[\e[35mInt\e\
    [0m](n)\n\e[31m\e[31m   |\e[0m                                 ^\e[0m\n\e[31m\
    \   |\e[0m                                 Found:    (n : Long)\n\e[31m   |\e\
    [0m                                 Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpob0o4vum.scala:16:21 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpob0o4vum.scala:18:23 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m( i <- \e[31m1\e[0m to n ) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpob0o4vum.scala:30:25\
    \ --------------------\e[0m\e[0m\n\e[31m30 |\e[0m                a(i) = a(k) \n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Found:    (k : Long)\n\e[31m   |\e[0m                      \
    \   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/t"
  stdout: ''
  timestamp: 1659798319
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        val max = 0\n        val\
    \ maxCount = 0\n        for(i <- 0 until n){\n            val j = i + 1\n    \
    \        val k = n - i\n            val count = count(i) + count(j) + count(k)\n\
    \            if(count > maxCount){\n                max = count\n            \
    \    maxCount = count\n            }\n            a(i) = i * i - i + 1\n     \
    \   }\n        max.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwljyo8v8.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwljyo8v8.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwljyo8v8.scala:19:25\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n){\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmpwljyo8v8.scala:24:20 -----------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m                max = count\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to val\
    \ max\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpwljyo8v8.scala:25:25\
    \ -----------------------------\e[0m\e[0m\n\e[31m25 |\e[0m                maxCount\
    \ = count\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                Reassignment to val maxCount\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n5 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659798317
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = scala.math.pow(3, n).toInt\n        val n = scala.math.pow(3,\
    \ n).toInt\n        val m = scala.math.pow(3, m).toInt\n        val n = scala.math.pow(3,\
    \ n).toInt\n        val m = scala.math.pow(3, m).toInt\n        val n = scala.math.pow(3,\
    \ n).toInt\n        val m = scala.math.pow(3, m).toInt\n        val n = scala.math.pow(3,\
    \ n).toInt\n        val m = scala.math.pow(3, m).toInt\n        val n = scala.math.pow(3,\
    \ n).toInt\n        val m = scala.math.pow(3, m).toInt\n        val n = scala.math.pow(3,\
    \ n).toInt\n        val m = scala.math.pow(3, m).toInt\n        val n = scala.math.pow(3,\
    \ n).toInt\n        val m = scala.math.pow(3, m).toInt\n        val n = scala.math.pow(3,\
    \ n).toInt\n        val m = scala.math.pow(3, m).toInt\n        val n = scala.math.pow(3,\
    \ n).toInt\n        val m = scala.math.pow(3, m).toInt\n        val n = scala.math.pow(3,\
    \ n).toInt\n        val m = scala.math.pow(3, m).toInt\n        val n = scala.math.pow(3,\
    \ n).toInt\n        val m = scala.math.pow(3, m).toInt\n        val n = scala.math.pow(3,\
    \ n).toInt\n        val m = scala.math.pow(3, m).toInt\n        val n = scala.math.pow(3,\
    \ n).toInt\n        val m = scala.math.pow(3, m).toInt\n        val n = scala.math.pow(3,\
    \ n).toInt\n        val m = scala.math.pow(3, m).toInt\n        val n = scala.math.pow(3,\
    \ n).toInt\n        val m = scala.math.pow(3, m).toInt\n        val n = scala.math.pow(3,\
    \ n).toInt\n        val m = scala.math.pow(3, m).toInt\n        val n = scala.math.pow(3,\
    \ n).toInt\n        val m = scala.math.pow(3, m).toInt\n        val n = scala.math.pow(3,\
    \ n).toInt\n        val m = scala.math.pow(3, m).toInt\n        val n = scala.math.pow(3,\
    \ n).toInt\n        val m = scala.math.pow(3, m).toInt\n        val n = scala.math.pow(3,\
    \ n).toInt\n        val m = scala.math.pow(3, m).toInt\n        val n = scala.math.pow(3,\
    \ n\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphgqfkcdl.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphgqfkcdl.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mm\e[0m = scala.math.pow(\e[31m3\e[0m, m).toInt\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already\
    \ defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmphgqfkcdl.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = scala.math.pow(\e\
    [31m3\e[0m, n).toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmphgqfkcdl.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = scala.math.pow(\e[31m3\e[0m, m).toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphgqfkcdl.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mn\e[0m = scala.math.pow(\e[31m3\e[0m, n).toInt\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already\
    \ defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmphgqfkcdl.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m ="
  stdout: ''
  timestamp: 1659798315
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9v1syy8g.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659798289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val result = mutable.ArrayBuffer.empty[Int]\n        val max = (3 * n)\
    \ - 1\n        val maxTriples = mutable.ArrayBuffer.empty[Int]\n        val maxTriple\
    \ = (0, 0, 0)\n        val maxTripleIndex = 0\n        val maxTripleSum = 0\n\
    \        val maxTripleSumIndex = 0\n        val maxTripleSumValue = 0\n      \
    \  val maxTripleSumValueIndex = 0\n        val maxTripleSumValueIndex = 0\n  \
    \      val maxTripleSumValueIndex = 0\n        val maxTripleSumValueIndex = 0\n\
    \        val maxTripleSumValueIndex = 0\n        val maxTripleSumValueIndex =\
    \ 0\n        val maxTripleSumValueIndex = 0\n        val maxTripleSumValueIndex\
    \ = 0\n        val maxTripleSumValueIndex = 0\n        val maxTripleSumValueIndex\
    \ = 0\n        val maxTripleSumValueIndex = 0\n        val maxTripleSumValueIndex\
    \ = 0\n        val maxTripleSumValueIndex = 0\n        val maxTripleSumValueIndex\
    \ = 0\n        val maxTripleSumValueIndex = 0\n        val maxTripleSumValueIndex\
    \ = 0\n        val maxTripleSumValueIndex = 0\n        val maxTripleSumValueIndex\
    \ = 0\n        val maxTripleSumValueIndex = 0\n        val maxTripleSumValueIndex\
    \ = 0\n        val maxTripleSumValueIndex = 0\n        val maxTripleSumValueIndex\
    \ = 0\n        val maxTripleSumValueIndex = 0\n        val maxTripleSumValueIndex\
    \ = 0\n        val maxTripleSumValueIndex = 0\n        val maxTripleSumValueIndex\
    \ = 0\n        val maxTripleSumValueIndex = 0\n        val maxTripleSumValueIndex\
    \ = 0\n        val maxTripleSumValueIndex = 0\n        val maxTripleSumValueIndex\
    \ = 0\n        val maxTripleSumValueIndex = 0\n        val maxTripleSumValueIndex\
    \ = 0\n        val maxTripleSumValueIndex = 0\n        val maxTripleSumValueIndex\
    \ = 0\n        val maxTripleSumValueIndex = 0\n        val maxTripleSumValueIndex\
    \ = 0\n        val maxTripleSumValueIndex = 0\n        val maxTripleSumValueIndex\
    \ = 0\n        val maxTripleSumValueIndex = 0\n        val maxTripleSumValueIndex\
    \ = 0\n        val maxTripleSumValueIndex = 0\n        val maxTripleSumValueIndex\
    \ = 0\n        val max\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuabnv2ga.scala:67:4 ----------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuabnv2ga.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxTripleSumValueIndex\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxTripleSumValueIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxTripleSumValueIndex\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpuabnv2ga.scala:26:12 ---------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxTripleSumValueIndex\e[0m = \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mmaxTripleSumValueIndex is already defined as \e[33mvalue\e[0m \e[35mmaxTripleSumValueIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuabnv2ga.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxTripleSumValueIndex\e[0m = \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmaxTripleSumValueIndex is already defined as \e[33mvalue\e[0m \e[35mmaxTripleSumValueIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuabnv2ga.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxTripleSumValueIndex\e[0m = \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmaxTripleSumValueIndex is already defined as \e[33mvalue\e[0m \e[35mmaxTripleSumValueIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31"
  stdout: ''
  timestamp: 1659798316
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpj9txdrs1.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpj9txdrs1.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.HashMap[\e[35mInt\e[0m,\
    \ \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpj9txdrs1.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.HashMap[\e[35mInt\e[0m,\
    \ \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpj9txdrs1.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.HashMap[\e[35mInt\e[0m,\
    \ \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpj9txdrs1.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.HashMap[\e[35mInt\e[0m,\
    \ \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpj9txdrs1.scala:22:12 ---------------------------\e"
  stdout: ''
  timestamp: 1659798303
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = a.length\n        val n = m\n        val max = 0\n        var\
    \ i = 0\n        var j = 0\n        var k = 0\n        var count = 0\n       \
    \ while (i < n && j < n && k < n) {\n            if (a(i) + a(j) + a(k) == 0)\
    \ {\n                count += 1\n            }\n            i += 1\n         \
    \   j += 1\n            k += 1\n        }\n        if (count > max) {\n      \
    \      max = count\n        }\n        return max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpiuot17l_.scala:16:16 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = a.length\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmpiuot17l_.scala:32:16 -----------------------------\e[0m\e\
    [0m\n\e[31m32 |\e[0m            max = count\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val max\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659798312
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9v1syy8g.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659798289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var a = Array.ofDim[Int](n)\n\
    \        for( i <- 1 to n-1 ) {\n            val j = i*i-1\n            val k\
    \ = i*i+1\n            if( j+k == n ) {\n                a(i) = j\n          \
    \      a(i+1) = k\n                a(i+2) = j+k\n            }\n        }\n  \
    \      val sum = a(0) + a(1) + a(2) \n        val triples = sum % 3 == 0\n   \
    \     if( triples ) 1 else 0\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4pz62krh.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4pz62krh.scala:16:23\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m( i <-\
    \ \e[31m1\e[0m to n-\e[31m1\e[0m ) {\n\e[31m\e[31m   |\e[0m                  \
    \     ^^^\e[0m\n\e[31m   |\e[0m                       Found:    Long\n\e[31m \
    \  |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798316
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        for (i <- 0 until n)\
    \ {\n            a(i) = i * i - i + 1\n        }\n        val triples = mutable.ArrayBuffer.empty[Int]\n\
    \        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n        \
    \        for (k <- 0 until n) {\n                    if (i < j && j < k && k <\
    \ i) {\n                        triples += (a(i), a(j), a(k))\n              \
    \      }\n                }\n            }\n        }\n        triples.toArray.count(_\
    \ % 3 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp36jkwd0o.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp36jkwd0o.scala:16:16\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp36jkwd0o.scala:17:26\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp36jkwd0o.scala:20:22 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mtriples\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp36jkwd0o.scala:21:26 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) {\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (n : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Typ"
  stdout: ''
  timestamp: 1659798317
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val count = mutable.Map[Long, Long]()\n        for (i <- 1 to n) {\n\
    \            val j = i * i - i + 1\n            val k = i * i + i + j\n      \
    \      if (j > k) {\n                a(i) = j\n                count(j) = count(j)\
    \ + 1\n                count(k) = count(k) + 1\n            } else {\n       \
    \         a(i) = k\n                count(k) = count(k) + 1\n            }\n \
    \       }\n        count(a(0))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplswsmb1t.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplswsmb1t.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplswsmb1t.scala:17:23\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798318
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9v1syy8g.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659798289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgbg5c7zz.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpgbg5c7zz.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxTriples\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriples is already defined as \e[33mvalue\e[0m \e[35mmaxTriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgbg5c7zz.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxTriple\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriple is already defined as \e[33mvalue\e[0m \e[35mmaxTriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgbg5c7zz.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxTriples\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriples is already defined as \e[33mvalue\e[0m \e[35mmaxTriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgbg5c7zz.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxTriple\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriple is already defined as \e[33mvalue\e[0m \e[35mmaxTriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel"
  stdout: ''
  timestamp: 1659798303
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9v1syy8g.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659798289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var count = 0\n        var\
    \ a = Array.ofDim[Int](n)\n        for(i <- 0 until n) {\n            a(i) = i\
    \ * i - i + 1\n        }\n        for(i <- 0 until n) {\n            for(j <-\
    \ 0 until n) {\n                for(k <- 0 until n) {\n                    if(i+j+k\
    \ == a(i)+a(j)+a(k)) {\n                        count += 1\n                 \
    \   }\n                }\n            }\n        }\n        count\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpewtszf3r.scala:16:33\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpewtszf3r.scala:17:25\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpewtszf3r.scala:20:25 --------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n) {\n\e[31m\e\
    [31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m                \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                         Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpewtszf3r.scala:21:29\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mfor\e[0m(j\
    \ <- \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          \
    \   ^\e[0m\n\e[31m   |\e[0m                             Found:    (n : Long)\n\
    \e[31m   |\e[0m                             Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpewtszf3r.scala:22:33 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mfor\e[0m(k <- \e[31m0\e[0m until\
    \ n) {\n\e[31m\e[31m   |\e[0m                                 ^\e[0m\n\e[31m \
    \  |\e[0m                                 Found:    (n : Long)\n\e[31m   |\e[0m\
    \                                 Required: Int\n\e[31m   |"
  stdout: ''
  timestamp: 1659798318
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        var count = 0\n        for(i <- 0 until n) {\n            for(j <- 0\
    \ until n) {\n                for(k <- 0 until n) {\n                    if(i+j+k\
    \ == n) count += 1\n                }\n            }\n            a(i) = i*i-i+1\n\
    \        }\n        count * 3\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj8y8ez1p.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj8y8ez1p.scala:17:25\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpj8y8ez1p.scala:18:29 --------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m            \e[33mfor\e[0m(j <- \e[31m0\e[0m until n) {\n\e\
    [31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m      \
    \                       Found:    (n : Long)\n\e[31m   |\e[0m                \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpj8y8ez1p.scala:19:33 --------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m                \e[33mfor\e[0m(k <- \e[31m0\e[0m until n) {\n\e[31m\e\
    [31m   |\e[0m                                 ^\e[0m\n\e[31m   |\e[0m        \
    \                         Found:    (n : Long)\n\e[31m   |\e[0m              \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798317
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgbg5c7zz.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpgbg5c7zz.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxTriples\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriples is already defined as \e[33mvalue\e[0m \e[35mmaxTriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgbg5c7zz.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxTriple\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriple is already defined as \e[33mvalue\e[0m \e[35mmaxTriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgbg5c7zz.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxTriples\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriples is already defined as \e[33mvalue\e[0m \e[35mmaxTriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgbg5c7zz.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxTriple\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriple is already defined as \e[33mvalue\e[0m \e[35mmaxTriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel"
  stdout: ''
  timestamp: 1659798303
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9v1syy8g.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659798289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        var count = 0\n        for( i <- 0 until n ) {\n            val j = i\
    \ + i\n            val k = i + j\n            if( j > n ) {\n                j\
    \ -= n\n            }\n            if( k > n ) {\n                k -= n\n   \
    \         }\n            if( a(i) == a(j) && a(i) == a(k) ) {\n              \
    \  count += 1\n            }\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo7cpu8ud.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo7cpu8ud.scala:17:26\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m( i <-\
    \ \e[31m0\e[0m until n ) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpo7cpu8ud.scala:21:18 ------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m                j -= n\n\e[31m\e[31m   |\e[0m            \
    \    ^^^^\e[0m\n\e[31m   |\e[0m                value -= is not a member of Int\
    \ - did you mean j.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo7cpu8ud.scala:24:18\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m                k -= n\n\e\
    [31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ -= is not a member of Int - did you mean k.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1659798326
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val i = mutable.ArrayBuffer.empty[Int]\n        val j = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val triples = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriples = mutable.ArrayBuffer.empty[Int]\n        val maxTriplesCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTripleSum = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTripleSumCount = mutable.ArrayBuffer.empty[Int]\n        val maxTripleProduct\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTripleProductCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTripleProductSum = mutable.ArrayBuffer.empty[Int]\n        val\
    \ maxTripleProductSumCount = mutable.ArrayBuffer.empty[Int]\n        val maxTripleProductProduct\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTripleProductProductCount =\
    \ mutable.ArrayBuffer.empty[Int]\n        val maxTripleProductProductSum = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTripleProductProductSumCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTripleProductProductProduct = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTripleProductProductProductCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTripleProductProductProductSum = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTripleProductProductProductSumCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTripleProductProductProductProduct = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTripleProductProductProductProductCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTripleProductProductProductSum = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTripleProductProductProductSumCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTripleProductProductProductProduct = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTripleProductProductProductProductCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTripleProductProductProductProductSum = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTripleProductProductProductProductSumCount = mutable.ArrayBuffer.empty[Int]\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgx067099.scala:40:12 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mmaxTripleProductProductProductSum\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmaxTripleProductProductProductSum is already defined as \e[33mvalue\e\
    [0m \e[35mmaxTripleProductProductProductSum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgx067099.scala:41:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxTripleProductProductProductSumCount\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTripleProductProductProductSumCount is already defined\
    \ as \e[33mvalue\e[0m \e[35mmaxTripleProductProductProductSumCount\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpgx067099.scala:42:12 ---------------------------\e[0m\e[0m\n\e[31m42\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxTripleProductProductProductProduct\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTripleProductProductProductProduct is already defined as\
    \ \e[33mvalue\e[0m \e[35mmaxTripleProductProductProductProduct\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgx067099.scala:43:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxTripleProductProductProductProductCount\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659798325
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var max = 0\n        var\
    \ a = new Array[Long](n)\n        for( i <- 0 until n ) {\n            a(i) =\
    \ i * i - i + 1\n        }\n        for( i <- 0 until n ) {\n            for(\
    \ j <- 0 until n ) {\n                for( k <- 0 until n ) {\n              \
    \      if( i < j < k && a(i) + a(j) + a(k) == 0 ) {\n                        max\
    \ = max + 1\n                    }\n                }\n            }\n       \
    \ }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3qj3klph.scala:16:32\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e\
    [0m                                ^\e[0m\n\e[31m   |\e[0m                   \
    \             Found:    (n : Long)\n\e[31m   |\e[0m                          \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3qj3klph.scala:17:26\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m( i <-\
    \ \e[31m0\e[0m until n ) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp3qj3klph.scala:20:26 --------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m( i <- \e[31m0\e[0m until n ) {\n\e\
    [31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m         \
    \                 Found:    (n : Long)\n\e[31m   |\e[0m                      \
    \    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3qj3klph.scala:21:30\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mfor\e[0m( j\
    \ <- \e[31m0\e[0m until n ) {\n\e[31m\e[31m   |\e[0m                         \
    \     ^\e[0m\n\e[31m   |\e[0m                              Found:    (n : Long)\n\
    \e[31m   |\e[0m                              Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3qj3klph.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mfor\e[0m( k <- \e[31m0\e[0m until\
    \ n ) {\n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m\
    \   |\e[0m                                  Found:    (n : Long)\n\e[31m   |\e\
    [0m                       "
  stdout: ''
  timestamp: 1659798329
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val count = mutable.Map[Long, Long]()\n        val max = 0\n        for(i\
    \ <- 0 until n) {\n            val j = i + 1\n            val k = n - 1\n    \
    \        val sum = a(i) + a(j) + a(k) \n            val triple = sum % 3 == 0\n\
    \            val key = sum\n            if(triple && count.contains(key)) \n \
    \               max += 1\n            count(key) = count(key) + 1 \n        }\n\
    \        max\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd_w3ce9u.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd_w3ce9u.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd_w3ce9u.scala:18:25\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpd_w3ce9u.scala:21:38 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36msum\e[0m = a(i) + a(j) +\
    \ a(k) \n\e[31m\e[31m   |\e[0m                                      ^\e[0m\n\e\
    [31m   |\e[0m                                      Found:    (k : Long)\n\e[31m\
    \   |\e[0m                                      Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpd_w3ce9u.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                max += \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not\
    \ a member of Int - did you mean max.!=?\n5 errors found\n"
  stdout: ''
  timestamp: 1659798330
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val i = mutable.ArrayBuffer.empty[Int]\n        val j = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val count = mutable.ArrayBuffer.empty[Int]\n\
    \        val max = 0\n        val maxCount = 0\n        val maxTriples = 0\n \
    \       val maxTripleCount = 0\n        val maxTripleSum = 0\n        val maxTripleSumCount\
    \ = 0\n        val maxTripleSumSum = 0\n        val maxTripleSumSumCount = 0\n\
    \        val maxTripleSumSumSum = 0\n        val maxTripleSumSumSumCount = 0\n\
    \        val maxTripleSumSumSumSum = 0\n        val maxTripleSumSumSumCount =\
    \ 0\n        val maxTripleSumSumSumSum = 0\n        val maxTripleSumSumSumCount\
    \ = 0\n        val maxTripleSumSumSumSum = 0\n        val maxTripleSumSumSumCount\
    \ = 0\n        val maxTripleSumSumSumSum = 0\n        val maxTripleSumSumSumCount\
    \ = 0\n        val maxTripleSumSumSumSum = 0\n        val maxTripleSumSumSumCount\
    \ = 0\n        val maxTripleSumSumSumSum = 0\n        val maxTripleSumSumSumCount\
    \ = 0\n        val maxTripleSumSumSumSum = 0\n        val maxTripleSumSumSumCount\
    \ = 0\n        val maxTripleSumSumSumSum = 0\n        val maxTripleSumSumSumCount\
    \ = 0\n        val maxTripleSumSumSumSum = 0\n        val maxTripleSumSumSumCount\
    \ = 0\n        val maxTripleSumSumSumSum = 0\n        val maxTripleSumSumSumCount\
    \ = 0\n        val maxTripleSumSumSumSum = 0\n        val maxTripleSumSumSumCount\
    \ = 0\n        val maxTripleSumSumSumSum = 0\n        val maxTripleSumSumSumCount\
    \ = 0\n        val maxTripleSumSumSumSum = 0\n        val maxTripleSumSumSumCount\
    \ = 0\n        val maxTripleSumSumSumSum = 0\n        val maxTripleSumSumSumCount\
    \ = 0\n        val maxTripleSumSumSumSum = 0\n        val maxTripleSumSumSumCount\
    \ = 0\n        val maxTripleSumSumSumSum = 0\n        val maxTriple\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphzgqcvin.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphzgqcvin.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxTripleSumSumSumCount\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxTripleSumSumSumCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxTripleSumSumSumCount\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmphzgqcvin.scala:34:12 ---------------------------\e[0m\e[0m\n\e[31m34\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxTripleSumSumSumSum\e[0m = \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mmaxTripleSumSumSumSum is already defined as \e[33mvalue\e[0m \e[35mmaxTripleSumSumSumSum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphzgqcvin.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36mmaxTripleSumSumSumCount\e[0m = \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmaxTripleSumSumSumCount is already defined as \e[33mvalue\e[0m \e[35mmaxTripleSumSumSumCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphzgqcvin.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mval\e[0m \e[36mmaxTripleSumSumSumSum\e[0m = \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mmaxTripleSumSumSumSum is already defined as \e[33mvalue\e[0m \e[35mmaxTripleSumSumSumSum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31"
  stdout: ''
  timestamp: 1659798328
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = scala.math.pow(3, n).toLong\n        val n = scala.math.pow(3,\
    \ n).toLong\n        val k = scala.math.pow(3, n).toLong\n        var i = 0\n\
    \        var j = 0\n        var k = 0\n        var count = 0\n        while(i\
    \ < n && j < n && k < n) {\n            a(i) = i * i - i + 1\n            i +=\
    \ 1\n            j += 1\n            k += 1\n            count += 1\n        }\n\
    \        while(i < n) {\n            a(i) = i * i - i + 1\n            i += 1\n\
    \            count += 1\n        }\n        while(j < n) {\n            a(j) =\
    \ j * j - j + 1\n            j += 1\n            count += 1\n        }\n     \
    \   while(k < n) {\n            a(k) = k * k - k + 1\n            k += 1\n   \
    \         count += 1\n        }\n        val max = 0\n        for(i <- 0 until\
    \ count) {\n            val triple = a(i) + a(j) + a(k) \n            if(triple\
    \ > max) {\n                max = triple\n            }\n        }\n        return\
    \ max\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpq5mnllqu.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m \e[36mk\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mk is already defined\
    \ as \e[33mvalue\e[0m \e[35mk\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpq5mnllqu.scala:17:34 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = scala.math.pow(\e\
    [31m3\e[0m, n).toLong\n\e[31m\e[31m   |\e[0m                                 \
    \ ^\e[0m\n\e[31m   |\e[0m                                  Recursive \e[33mvalue\e\
    [0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpq5mnllqu.scala:15:34 --------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = Array.ofDim[\e[35mLong\e[0m](n)\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m\
    \                                  Found:    (n : Long)\n\e[31m   |\e[0m     \
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpq5mnllqu.scala:27:14 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            k += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Long - did you mean k.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq5mnllqu.scala:41:14\
    \ --------------------\e[0m\e[0m\n\e[31m41 |\e[0m            a(k) = k * k - k\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m              ^\e[0m\n\e[31m   |\e[0m \
    \             Found:    (k : Long)\n\e[31m   |\e[0m              Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq5mnllqu.scala:42:14\
    \ ------------------------\e[0m\e[0m\n\e[31m42 |\e[0m            k += \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m           "
  stdout: ''
  timestamp: 1659798330
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9v1syy8g.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659798289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9v1syy8g.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659798289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        val sum = 0\n        for(i\
    \ <- 1 to n) {\n            val j = i\n            val k = n - i\n           \
    \ val sum = i * i - i + 1\n            val triple = if (j > k) (a, j, k) else\
    \ (a, i, j)\n            count += triple\n            sum += triple\n        }\n\
    \        val result = count.filter(_._2 % 3 == 0).length\n        sum += result\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo1fdtkok.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo1fdtkok.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo1fdtkok.scala:18:22\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m\
    \   |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m        \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpo1fdtkok.scala:24:16 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m            sum += triple\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e\
    [31m   |\e[0m            value += is not a member of Int - did you mean sum.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo1fdtkok.scala:27:12 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        sum += result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        value += is not a member of Int - did you mean sum.!=?\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1659798330
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9v1syy8g.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659798289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var max = 0\n        var\
    \ a = new Array[Long](n)\n        for( i <- 0 until n ) {\n            a(i) =\
    \ i * i - i + 1\n        }\n        for( i <- 0 until n ) {\n            for(\
    \ j <- 0 until n ) {\n                for( k <- 0 until n ) {\n              \
    \      if( i < j && j < k && k < i ) {\n                        if( a(i) + a(j)\
    \ + a(k) == 0 ) {\n                            max = max + 1\n               \
    \         }\n                    }\n                }\n            }\n       \
    \ }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpriedjgq2.scala:16:32\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e\
    [0m                                ^\e[0m\n\e[31m   |\e[0m                   \
    \             Found:    (n : Long)\n\e[31m   |\e[0m                          \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpriedjgq2.scala:17:26\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m( i <-\
    \ \e[31m0\e[0m until n ) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpriedjgq2.scala:20:26 --------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m( i <- \e[31m0\e[0m until n ) {\n\e\
    [31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m         \
    \                 Found:    (n : Long)\n\e[31m   |\e[0m                      \
    \    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpriedjgq2.scala:21:30\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mfor\e[0m( j\
    \ <- \e[31m0\e[0m until n ) {\n\e[31m\e[31m   |\e[0m                         \
    \     ^\e[0m\n\e[31m   |\e[0m                              Found:    (n : Long)\n\
    \e[31m   |\e[0m                              Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpriedjgq2.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mfor\e[0m( k <- \e[31m0\e[0m until\
    \ n ) {\n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m\
    \   |\e[0m                                  Found:    (n : Long)\n\e[31m   |\e\
    [0m                       "
  stdout: ''
  timestamp: 1659798330
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var a = Array.ofDim[Int](n)\n\
    \        for( i <- 0 until n ) {\n            a(i) = i * i - i + 1\n        }\n\
    \        val res = a.filter( x => x < 3 ).length\n        for( i <- 0 until n\
    \ ) {\n            val j = a.indexOf(i)\n            val k = a.indexOf(j)\n  \
    \          if( j > k ) {\n                val tmp = a.slice( j, k )\n        \
    \        if( tmp.isEmpty ) res += 1\n                else if( tmp.sum % 3 == 0\
    \ ) res += 1\n            }\n        }\n        res\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp89p6b1ut.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp89p6b1ut.scala:16:26\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m( i <-\
    \ \e[31m0\e[0m until n ) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp89p6b1ut.scala:20:26 --------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m( i <- \e[31m0\e[0m until n ) {\n\e\
    [31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m         \
    \                 Found:    (n : Long)\n\e[31m   |\e[0m                      \
    \    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp89p6b1ut.scala:25:38\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m                \e[33mif\e\
    [0m( tmp.isEmpty ) res += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                \
    \                  ^^^^^^\e[0m\n\e[31m   |\e[0m                  value += is not\
    \ a member of Int - did you mean res.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp89p6b1ut.scala:26:48 ------------------------\e[0m\e[0m\n\e[31m26 |\e\
    [0m                \e[33melse\e[0m \e[33mif\e[0m( tmp.sum % \e[31m3\e[0m == \e\
    [31m0\e[0m ) res += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                      \
    \                      ^^^^^^\e[0m\n\e[31m   |\e[0m                  value +=\
    \ is not a member of Int - did you mean res.!=?\n5 errors found\n"
  stdout: ''
  timestamp: 1659798330
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var count =\
    \ 0\n        while (i < n && j < n && k < n) {\n            a(i) = i * i - i +\
    \ 1\n            i += 1\n            j += 1\n            k += 1\n        }\n \
    \       val triples = a.zipWithIndex.filter(_._2 < n).map(_._1)\n        triples.foreach\
    \ { t =>\n            val a = a.updated(t._2, t._2 + t._1 + 1)\n            val\
    \ triple = a.zipWithIndex.filter(_._2 < n).map(_._1)\n            if (triples.forall(t\
    \ => triple(t).forall(t => t._1 + t._2 == t._1 + t._2))) {\n                count\
    \ += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuql71bfr.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798328
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val result = mutable.HashSet[Long]()\n        val maxTriples = mutable.HashSet[Long]()\n\
    \        val maxTriple = mutable.HashSet[Long]()\n        val maxTriples = mutable.HashSet[Long]()\n\
    \        val maxTriple = mutable.HashSet[Long]()\n        val maxTriples = mutable.HashSet[Long]()\n\
    \        val maxTriple = mutable.HashSet[Long]()\n        val maxTriples = mutable.HashSet[Long]()\n\
    \        val maxTriple = mutable.HashSet[Long]()\n        val maxTriples = mutable.HashSet[Long]()\n\
    \        val maxTriple = mutable.HashSet[Long]()\n        val maxTriples = mutable.HashSet[Long]()\n\
    \        val maxTriple = mutable.HashSet[Long]()\n        val maxTriples = mutable.HashSet[Long]()\n\
    \        val maxTriple = mutable.HashSet[Long]()\n        val maxTriples = mutable.HashSet[Long]()\n\
    \        val maxTriple = mutable.HashSet[Long]()\n        val maxTriples = mutable.HashSet[Long]()\n\
    \        val maxTriple = mutable.HashSet[Long]()\n        val maxTriples = mutable.HashSet[Long]()\n\
    \        val maxTriple = mutable.HashSet[Long]()\n        val maxTriples = mutable.HashSet[Long]()\n\
    \        val maxTriple = mutable.HashSet[Long]()\n        val maxTriples = mutable.HashSet[Long]()\n\
    \        val maxTriple = mutable.HashSet[Long]()\n        val maxTriples = mutable.HashSet[Long]()\n\
    \        val maxTriple = mutable.HashSet[Long]()\n        val maxTriples = mutable.HashSet[Long]()\n\
    \        val maxTriple = mutable.HashSet[Long]()\n        val maxTriples = mutable.HashSet[Long]()\n\
    \        val maxTriple = mutable.HashSet[Long]()\n        val maxTriples = mutable.HashSet[Long]()\n\
    \        val maxTriple = mutable.HashSet[Long]()\n        val maxTriples = mutable.Hash\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7ehhf2d5.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmaxTriples\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriples is already defined as \e[33mvalue\e[0m \e[35mmaxTriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7ehhf2d5.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxTriple\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriple is already defined as \e[33mvalue\e[0m \e[35mmaxTriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7ehhf2d5.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxTriples\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriples is already defined as \e[33mvalue\e[0m \e[35mmaxTriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7ehhf2d5.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxTriple\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriple is already defined as \e[33mvalue\e[0m \e[35mmaxTriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7ehhf2d5.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxTriples\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^"
  stdout: ''
  timestamp: 1659798330
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9v1syy8g.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659798289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        var i = 0\n        var\
    \ j = 0\n        var k = 0\n        while(i < n && j < n && k < n) {\n       \
    \     if(i == j && i == k) {\n                m += (i * i - i + 1)\n         \
    \       i += 1\n                j += 1\n                k += 1\n            }\
    \ else if(i == j) {\n                m += (i * i - i + 1)\n                i +=\
    \ 1\n                j += 1\n            } else if(j == k) {\n               \
    \ m += (i * i - i + 1)\n                j += 1\n                k += 1\n     \
    \       } else {\n                m += (i * i - i + 1)\n                i += 1\n\
    \                j += 1\n                k += 1\n            }\n        }\n  \
    \      m.toArray.length\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpudu3zz4b.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpudu3zz4b.scala:16:16\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798329
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9v1syy8g.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659798289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        var count = 0\n        var i = 0\n        var j = 0\n        var k =\
    \ 0\n        while (i < n) {\n            a(i) = i * i - i + 1\n            i\
    \ += 1\n        }\n        val maxTriples = a.filter(_ % 3 == 0).length\n    \
    \    return maxTriples\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8flabq4x.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798330
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9v1syy8g.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659798289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val i = mutable.ArrayBuffer.empty[Int]\n        val j = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val count = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriples = mutable.ArrayBuffer.empty[Int]\n        val maxTriple\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTripleIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTripleValue = mutable.ArrayBuffer.empty[Int]\n        val maxTripleIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTripleValue = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTripleIndex = mutable.ArrayBuffer.empty[Int]\n        val maxTripleValue\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTripleIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTripleValue = mutable.ArrayBuffer.empty[Int]\n        val maxTripleIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTripleValue = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTripleIndex = mutable.ArrayBuffer.empty[Int]\n        val maxTripleValue\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTripleIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTripleValue = mutable.ArrayBuffer.empty[Int]\n        val maxTripleIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTripleValue = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTripleIndex = mutable.ArrayBuffer.empty[Int]\n        val maxTripleValue\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTripleIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTripleValue = mutable.ArrayBuffer.empty[Int]\n        val maxTripleIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTripleValue = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTripleIndex = mutable.ArrayBuffer.empty[Int]\n        val maxTripleValue\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTripleIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTripleValue = mutable.ArrayBuffer.empty[Int]\n        val maxTripleIndex\
    \ = mutable.Array\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpk2ybf9fo.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxTripleIndex\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTripleIndex is already defined as \e[33mvalue\e[0m \e[35mmaxTripleIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpk2ybf9fo.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxTripleValue\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTripleValue is already defined as \e[33mvalue\e[0m \e[35mmaxTripleValue\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpk2ybf9fo.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxTripleIndex\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTripleIndex is already defined as \e[33mvalue\e[0m \e[35mmaxTripleIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpk2ybf9fo.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mmaxTripleValue\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTripleValue is already defined as \e[33mvalue\e[0m \e[35mmaxTripleValue\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpk2ybf9fo.scala:30:12 ---------------------------\e[0m\e["
  stdout: ''
  timestamp: 1659798329
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgbg5c7zz.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpgbg5c7zz.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxTriples\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriples is already defined as \e[33mvalue\e[0m \e[35mmaxTriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgbg5c7zz.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxTriple\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriple is already defined as \e[33mvalue\e[0m \e[35mmaxTriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgbg5c7zz.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxTriples\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriples is already defined as \e[33mvalue\e[0m \e[35mmaxTriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgbg5c7zz.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxTriple\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriple is already defined as \e[33mvalue\e[0m \e[35mmaxTriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel"
  stdout: ''
  timestamp: 1659798303
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = a.length\n        var i = 0\n        var j = 0\n        var k\
    \ = 0\n        var count = 0\n        while (i < m && j < m && k < m) {\n    \
    \        a(i) = i * i - i + 1\n            i += 1\n            j += 1\n      \
    \      k += 1\n        }\n        val triples = a.zipWithIndex.filter(_._1 < _._2).filter(_._2\
    \ < _._3).filter(_._3 < _._1).length\n        if (triples > 0) {\n           \
    \ count = triples * 3\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbt1f6kbv.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbt1f6kbv.scala:27:46\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mtriples\e[0m = a.zipWithIndex.filter(_._1 < _._2).filter(_._2 < _._3).filter(_._3\
    \ < _._1).length\n\e[31m\e[31m   |\e[0m                                      \
    \      ^^^^\e[0m\n\e[31m   |\e[0m                                         value\
    \ _1 is not a member of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbt1f6kbv.scala:27:66\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mtriples\e[0m = a.zipWithIndex.filter(_._1 < _._2).filter(_._2 < _._3).filter(_._3\
    \ < _._1).length\n\e[31m\e[31m   |\e[0m                                      \
    \                          ^^^^\e[0m\n\e[31m   |\e[0m                        \
    \                 value _2 is not a member of Int\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpbt1f6kbv.scala:27:86 ------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mtriples\e[0m = a.zipWithIndex.filter(_._1\
    \ < _._2).filter(_._2 < _._3).filter(_._3 < _._1).length\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                         value\
    \ _3 is not a member of Int\n4 errors found\n"
  stdout: ''
  timestamp: 1659798331
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n\
    \ + 1)\n        a(0) = 1\n        a(1) = 1\n        a(2) = 1\n        val count\
    \ = mutable.Map[Long, Long]()\n        for (i <- 0 until a.length) {\n       \
    \     for (j <- 0 until a.length) {\n                for (k <- 0 until a.length)\
    \ {\n                    if (i < j && j < k && a(i) + a(j) + a(k) == 3) {\n  \
    \                      val triple = i + j + k\n                        val count\
    \ = count(triple)\n                        if (count == null) {\n            \
    \                count(triple) = 1\n                        } else {\n       \
    \                     count(triple) += 1\n                        }\n        \
    \            }\n                }\n            }\n        }\n        count(a(n))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqjnv1q4t.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \                                ^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                 Found:    Long\n\e[31m   |\e[0m                            \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqjnv1q4t.scala:19:20\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798330
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var i = 0\n        var j\
    \ = 0\n        var k = 0\n        var count = 0\n        var a = Array.fill(n)(0)\n\
    \        for( i <- 1 to n ) {\n            for(j <- 1 to n) {\n              \
    \  for( k <- 1 to n) {\n                    if( i != j && i != k && j != k ) {\n\
    \                        if( a[i] < a[j] && a[j] < a[k] ) {\n                \
    \            a[i] = a[j] + a[k]\n                            count += 1\n    \
    \                    }\n                    }\n                }\n           \
    \ }\n        }\n        return count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpsix2ktle.scala:25:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                            a[\e[35mi\e[0m] = a[j] +\
    \ a[k]\n\e[31m\e[31m   |\e[0m                                 ^\e[0m\n\e[31m \
    \  |\e[0m                                 end of statement expected but '=' found\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsix2ktle.scala:19:27 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36ma\e[0m = Array.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m  \
    \ |\e[0m                           Found:    (n : Long)\n\e[31m   |\e[0m     \
    \                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpsix2ktle.scala:20:23 --------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m( i <- \e[31m1\e[0m to n ) {\n\e[31m\e\
    [31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m                  \
    \     Found:    (n : Long)\n\e[31m   |\e[0m                       Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsix2ktle.scala:21:26\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mfor\e[0m(j\
    \ <- \e[31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpsix2ktle.scala:22:31 --------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m                \e[33mfor\e[0m( k <- \e[31m1\e[0m to n) {\n\
    \e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m  \
    \                             Found:    (n : Long)\n\e[31m   |\e[0m          \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpsix2ktle.scala:24:30 "
  stdout: ''
  timestamp: 1659798331
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var a = Array.ofDim[Int](n)\n\
    \        var count = 0\n        var i = 0\n        var j = 0\n        var k =\
    \ 0\n        while(i < n && j < n && k < n) {\n            a(i) = i * i - i +\
    \ 1\n            i += 1\n            j += 1\n            k += 1\n        }\n \
    \       while(i < n) {\n            a(i) = i * i - i + 1\n            i += 1\n\
    \        }\n        while(j < n) {\n            a(j) = j * j - j + 1\n       \
    \     j += 1\n        }\n        while(k < n) {\n            a(k) = k * k - k\
    \ + 1\n            k += 1\n        }\n        for(i<-0 until a.length) {\n   \
    \         for(j<-0 until a.length) {\n                for(k <- 0 until a.length)\
    \ {\n                    if(i<j && i<k && j<k) {\n                        if(a(i)\
    \ + a(j) + a(k) % 3 == 0) {\n                            count += 1\n        \
    \                }\n                    }\n                }\n            }\n\
    \        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu9mg76dw.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798331
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9v1syy8g.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659798289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9v1syy8g.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659798289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val result = mutable.ArrayBuffer.empty[Long]\n        val max = (3 *\
    \ n) - 1\n        val min = (3 * n) / 2\n        val mid = (3 * n) / 2\n     \
    \   val mid2 = ((3 * n) / 2) + 1\n        val mid3 = (3 * n) / 3\n        val\
    \ mid4 = (3 * n) / 4\n        val mid5 = (3 * n) / 5\n        val mid6 = (3 *\
    \ n) / 6\n        val mid7 = (3 * n) / 7\n        val mid8 = (3 * n) / 8\n   \
    \     val mid9 = (3 * n) / 9\n        val mid10 = (3 * n) / 10\n        val mid11\
    \ = (3 * n) / 11\n        val mid12 = (3 * n) / 12\n        val mid13 = (3 * n)\
    \ / 13\n        val mid14 = (3 * n) / 14\n        val mid15 = (3 * n) / 15\n \
    \       val mid16 = (3 * n) / 16\n        val mid17 = (3 * n) / 17\n        val\
    \ mid18 = (3 * n) / 18\n        val mid19 = (3 * n) / 19\n        val mid20 =\
    \ (3 * n) / 2\n        val mid21 = (3 * n) / 21\n        val mid22 = (3 * n) /\
    \ 22\n        val mid23 = (3 * n) / 23\n        val mid24 = (3 * n) / 24\n   \
    \     val mid25 = (3 * n) / 25\n        val mid26 = (3 * n) / 26\n        val\
    \ mid27 = (3 * n) / 27\n        val mid28 = (3 * n) / 28\n        val mid29 =\
    \ (3 * n) / 29\n        val mid30 = (3 * n) / 30\n        val mid31 = (3 * n)\
    \ / 31\n        val mid32 = (3 * n) / 32\n        val mid33 = (3 * n) / 33\n \
    \       val mid34 = (3 * n) / 34\n        val mid35 = (3 * n) / 35\n        val\
    \ mid36 = (3 * n) / 36\n        val mid37 = (3 * n) / 37\n        val mid38 =\
    \ (3 * n) / 38\n        val mid39 = (3 * n) / 39\n        val mid40 = (3 * n)\
    \ / 40\n        val mid41 = (3 * n) / 41\n        val mid42 = (3 * n) / 42\n \
    \       val mid43 = (3 * n) / 43\n        val mid44 = (3 * n) / 44\n        val\
    \ mid45 = (3 * n) / 45\n        val mid46 = (3 * n) / 46\n        val mid47 =\
    \ (3 * n) / 47\n        val mid48\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq6ttk4be.scala:67:4 ----------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpq6ttk4be.scala:15:34 --------------------\e[0m\e[0m\n\e[31m15 |\e[0m\
    \        \e[33mval\e[0m \e[36ma\e[0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e\
    [31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m       \
    \                           Found:    (n : Long)\n\e[31m   |\e[0m            \
    \                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpq6ttk4be.scala:16:21 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpq6ttk4be.scala:67:5 ---------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659798331
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n\
    \ + 1)\n        a(0) = 1\n        a(1) = 3\n        a(2) = 7\n        a(3) = 13\n\
    \        a(4) = 21\n        val triples = mutable.ListBuffer[Int]()\n        val\
    \ triple = (_: Int) + (_: Int) + (_: Int)\n        a.foreach { x =>\n        \
    \    a.foreach { y =>\n                a.foreach { z =>\n                    if\
    \ (x + y + z == triple(x) + triple(y) + triple(z)) {\n                       \
    \ triples += triple(x) + triple(y) + triple(z)\n                    }\n      \
    \          }\n            }\n        }\n        triples.toList.size\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp60ac8dod.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \                              ^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \              Found:    Long\n\e[31m   |\e[0m                               \
    \  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp60ac8dod.scala:21:22\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mtriples\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmp60ac8dod.scala:26:43\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m26 |\e[0m       \
    \             \e[33mif\e[0m (x + y + z == triple(x) + triple(y) + triple(z)) {\n\
    \e[31m\e[31m   |\e[0m                                     ^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmissing argument for parameter v2 of \e[33mmethod\e[0m \e[35mapply\e\
    [0m in \e[33mtrait\e[0m \e[35mFunction3\e[0m: (v1: Int, v2: Int, v3: Int): Int\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659798331
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val i = mutable.ArrayBuffer.empty[Int]\n\
    \        val j = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val count = mutable.ArrayBuffer.empty[Int]\n        val max = 0\n   \
    \     val maxCount = 0\n        val maxTriples = 0\n        val maxTripleCount\
    \ = 0\n        val maxTripleSum = 0\n        val maxTripleSumCount = 0\n     \
    \   val maxTripleSumSum = 0\n        val maxTripleSumSumCount = 0\n        val\
    \ maxTripleSumSumSum = 0\n        val maxTripleSumSumSumCount = 0\n        val\
    \ maxTripleSumSumSumCount = 0\n        val maxTripleSumSumSumCount = 0\n     \
    \   val maxTripleSumSumSumCount = 0\n        val maxTripleSumSumSumCount = 0\n\
    \        val maxTripleSumSumSumCount = 0\n        val maxTripleSumSumSumCount\
    \ = 0\n        val maxTripleSumSumSumCount = 0\n        val maxTripleSumSumSumCount\
    \ = 0\n        val maxTripleSumSumSumCount = 0\n        val maxTripleSumSumSumCount\
    \ = 0\n        val maxTripleSumSumSumCount = 0\n        val maxTripleSumSumSumCount\
    \ = 0\n        val maxTripleSumSumSumCount = 0\n        val maxTripleSumSumSumCount\
    \ = 0\n        val maxTripleSumSumSumCount = 0\n        val maxTripleSumSumSumCount\
    \ = 0\n        val maxTripleSumSumSumCount = 0\n        val maxTripleSumSumSumCount\
    \ = 0\n        val maxTripleSumSumSumCount = 0\n        val maxTripleSumSumSumCount\
    \ = 0\n        val maxTripleSumSumSumCount = 0\n        val maxTripleSumSumSumCount\
    \ = 0\n        val maxTripleSumSumSumCount = 0\n        val maxTripleSumSumSumCount\
    \ = 0\n        val maxTripleSumSumSumCount = 0\n        val maxTripleSumSumSumCount\
    \ = 0\n        val maxTripleSumSumSumCount = 0\n        val maxTripleSumSumSumCount\
    \ = 0\n        val maxTripleSumSumSumCount = 0\n        val maxTripleSumSumSumCount\
    \ = 0\n        val maxTri\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprt454dyr.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprt454dyr.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mk\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mk is already\
    \ defined as \e[33mvalue\e[0m \e[35mk\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmprt454dyr.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mmaxTripleSumSumSumCount\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTripleSumSumSumCount is already defined as \e[33mvalue\e\
    [0m \e[35mmaxTripleSumSumSumCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmprt454dyr.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mmaxTripleSumSumSumCount\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTripleSumSumSumCount is already defined as \e[33mvalue\e\
    [0m \e[35mmaxTripleSumSumSumCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmprt454dyr.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mmaxTripleSumSumSumCount\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTripleSumSumSumCount is already defined as \e[33mvalue\e\
    [0m \e[35mmaxTripleSumSumSumCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Nam"
  stdout: ''
  timestamp: 1659798330
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var a = Array.ofDim[Int](n)\n\
    \        for( i <- 0 until n ) {\n            a(i) = i * i - i + 1\n        }\n\
    \        val result = a.filter( x => x < 3 ).length\n        return result\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) ==\
    \ (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwj6z2spp.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwj6z2spp.scala:16:26\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m( i <-\
    \ \e[31m0\e[0m until n ) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798331
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        \n        for( i <- 1 to n ) {\n            val j = i * i -\
    \ i + 1\n            val k = i * i + i + j\n            \n            if( j >\
    \ 0 ) {\n                if( !triples.contains(k) ) {\n                    triples(k)\
    \ = k\n                    count(k) = 1\n                }\n                else\
    \ {\n                    count(k) = count(k) + 1\n                }\n        \
    \    }\n            \n            if( j > 0 ) {\n                if( !triples.contains(k)\
    \ ) {\n                    triples(k) = k\n                    count(k) = 1\n\
    \                }\n                else {\n                    count(k) = count(k)\
    \ + 1\n                }\n            }\n            \n            if( j > 0 )\
    \ {\n                if( !triples.contains(k) ) {\n                    triples(k)\
    \ = k\n                    count(k) = 1\n                }\n                else\
    \ {\n                    count(k) = count(k) + 1\n                }\n        \
    \    }\n        }\n        \n        val triple = triples.maxBy(_._2)\n      \
    \  \n        if( triple._2 % 3 == 0 ) {\n            count(triple._1)\n      \
    \  }\n        else {\n            -1\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp270wst3c.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp270wst3c.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp270wst3c.scala:17:22\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mtriples\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp270wst3c.scala:19:23 --------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mfor\e[0m( i <- \e[31m1\e[0m to n ) {\n\e[31m\e[31m   |\e\
    [0m                       ^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659798332
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9v1syy8g.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659798289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[In\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1edppdlh.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1edppdlh.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mtriples\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mtriples is already defined as \e[33mvalue\e[0m \e[35mtriples\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp1edppdlh.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mtriple\e[0m = mutable.Map[\e[35mInt\e[0m,\
    \ \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtriple is already defined as \e[33mvalue\e[0m \e[35mtriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1edppdlh.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mtriples\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtriples is already defined as \e[33mvalue\e[0m \e[35mtriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1edppdlh.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mtriple\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtriple is already defined as \e[33mvalue\e[0m \e[35mtriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1ed"
  stdout: ''
  timestamp: 1659798290
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var a = Array.ofDim[Int](n)\n\
    \        for( i <- 0 until n ) {\n            a(i) = i * i - i + 1\n        }\n\
    \        val result = a.filter( x => x < 3 ).length\n        a.removeAll( x =>\
    \ x < 3 )\n        val result2 = a.filter( x => x < 3 ).length\n        val result3\
    \ = a.filter( x => x < 3 ).length\n        val result4 = a.filter( x => x < 3\
    \ ).length\n        val result5 = a.filter( x => x < 3 ).length\n        val result6\
    \ = a.filter( x => x < 3 ).length\n        val result7 = a.filter( x => x < 3\
    \ ).length\n        val result8 = a.filter( x => x < 3 ).length\n        val result9\
    \ = a.filter( x => x < 3 ).length\n        val result10 = a.filter( x => x < 3\
    \ ).length\n        val result11 = a.filter( x => x < 3 ).length\n        val\
    \ result12 = a.filter( x => x < 3 ).length\n        val result13 = a.filter( x\
    \ => x < 3 ).length\n        val result14 = a.filter( x => x < 3 ).length\n  \
    \      val result15 = a.filter( x => x < 3 ).length\n        val result16 = a.filter(\
    \ x => x < 3 ).length\n        val result17 = a.filter( x => x < 3 ).length\n\
    \        val result18 = a.filter( x => x < 3 ).length\n        val result19 =\
    \ a.filter( x => x < 3 ).length\n        val result20 = a.filter( x => x < 3 ).length\n\
    \        val result21 = a.filter( x => x < 3 ).length\n        val result22 =\
    \ a.filter( x => x < 3 ).length\n        val result23 = a.filter( x => x < 3 ).length\n\
    \        val result24 = a.filter( x => x < 3 ).length\n        val result25 =\
    \ a.filter( x => x < 3 ).length\n        val result26 = a.filter( x => x < 3 ).length\n\
    \        val result27 = a.filter( x => x < 3 ).length\n        val result28 =\
    \ a.filter( x => x < 3 ).length\n        val result29 = a.filter( x => x < 3 ).length\n\
    \        val result30 = a.filter( x => x < 3 ).length\n        val result31 =\
    \ a.filter( x => x < 3 ).length\n        val result32 = a.filter( x => x < 3 ).length\n\
    \        val result33 = a.\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxmzg7ydp.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpxmzg7ydp.scala:15:33 --------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mvar\e[0m \e[36ma\e[0m = Array.ofDim[\e[35mInt\e[0m](n)\n\
    \e[31m\e[31m   |\e[0m                                 ^\e[0m\n\e[31m   |\e[0m\
    \                                 Found:    (n : Long)\n\e[31m   |\e[0m      \
    \                           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpxmzg7ydp.scala:16:26 --------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m( i <- \e[31m0\e[0m until n ) {\n\e\
    [31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m         \
    \                 Found:    (n : Long)\n\e[31m   |\e[0m                      \
    \    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxmzg7ydp.scala:20:10\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        a.removeAll( \e[36mx\e\
    [0m => x < \e[31m3\e[0m )\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        value removeAll is not a member of Array[Int]\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpxmzg7ydp.scala:53:5 ---------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n5 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659798341
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.HashMap.empty[Int, Int]\n        val r = mutable.HashMap.empty[Int,\
    \ Int]\n        val s = mutable.HashMap.empty[Int, Int]\n        val t = mutable.HashMap.empty[Int,\
    \ Int]\n        val u = mutable.HashMap.empty[Int, Int]\n        val v = mutable.HashMap.empty[Int,\
    \ Int]\n        val w = mutable.HashMap.empty[Int, Int]\n        val x = mutable.HashMap.empty[Int,\
    \ Int]\n        val y = mutable.HashMap.empty[Int, Int]\n        val z = mutable.HashMap.empty[Int,\
    \ Int]\n        val a = Array.ofDim[Int](n)\n        val b = Array.ofDim[Int](n)\n\
    \        val c = Array.ofDim[Int](n)\n        val d = Array.ofDim[Int](n)\n  \
    \      val e = Array.ofDim[Int](n)\n        val f = Array.ofDim[Int](n)\n    \
    \    val g = Array.ofDim[Int](n)\n        val h = Array.ofDim[Int](n)\n      \
    \  val i = Array.ofDim[Int](n)\n        val j = Array.ofDim[Int](n)\n        val\
    \ k = Array.ofDim[Int](n)\n        val l = Array.ofDim[Int](n)\n        val m\
    \ = Array.ofDim[Int](n)\n        val n = Array.ofDim[Int](n)\n        val o =\
    \ Array.ofDim[Int](n)\n        val p = Array.ofDim[Int](n)\n        val q = Array.ofDim[Int](n)\n\
    \        val r = Array.ofDim[Int](n)\n        val s = Array.ofDim[Int](n)\n  \
    \      val t = Array.ofDim[Int](n)\n        val u = Array.ofDim[Int](n)\n    \
    \    val v = Array.ofDim[Int](n)\n        val w = Array.ofDim[Int](n)\n      \
    \  val x = Array.ofDim[Int](n)\n        val y = Array.ofDim[Int](n)\n        val\
    \ z = Array.ofDim[Int](n)\n        val a = Array.ofDim[Int](n)\n        val b\
    \ = Array.ofDim[Int](n)\n        val c = Array.ofDim[Int](n)\n        val d =\
    \ Array.ofDim[Int](n)\n        val e = Array.ofDim[Int](n)\n        val f = Array.ofDim[Int](n)\n\
    \        val g = Array.ofDim[Int]\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3844tr51.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = Array.ofDim[\e\
    [35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0ma is already defined as \e[33mvalue\e[0m \e[35ma\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp3844tr51.scala:38:12 ---------------------------\e[0m\e[0m\n\e[31m38\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = Array.ofDim[\e[35mInt\e[0m](n)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm\
    \ is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3844tr51.scala:43:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m\
    \ \e[36mr\e[0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as \e\
    [33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp3844tr51.scala:44:12 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e[36ms\e[0m = Array.ofDim[\e\
    [35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0ms is already defined as \e[33mvalue\e[0m \e[35ms\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp3844tr51.scala:45:12 ---------------------------\e[0m\e[0m\n\e[31m45\
    \ |\e[0m        \e[33mval\e[0m \e[36mt\e[0m = Array.ofDim[\e[35mInt\e[0m](n)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mt\
    \ is already defined as \e[33mvalue\e[0m \e[35mt\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of"
  stdout: ''
  timestamp: 1659798344
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var count =\
    \ 0\n        while (i < n && j < n && k < n) {\n            a(i) = i * i - i +\
    \ 1\n            i += 1\n            j += 1\n            k += 1\n        }\n \
    \       val triples = a.zipWithIndex.filter(_._2 % 3 == 0).map(_._1)\n       \
    \ val tripleCount = triples.count(_ > 0)\n        count += tripleCount\n     \
    \   count\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpos20gcye.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798341
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val i = mutable.HashMap[Int, Int]()\n        val j = mutable.HashMap[Int,\
    \ Int]()\n        val k = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val i = mutable.HashMap[Int,\
    \ Int]()\n        val j = mutable.HashMap[Int, Int]()\n        val k = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val i = mutable.HashMap[Int, Int]()\n        val j = mutable.HashMap[Int,\
    \ Int]()\n        val k = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val i = mutable.HashMap[Int,\
    \ Int]()\n        val j = mutable.HashMap[Int, Int]()\n        val k = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val i = mutable.HashMap[Int, Int]()\n        val j = mutable.HashMap[Int,\
    \ Int]()\n        val k = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val i = mutable.HashMap[Int,\
    \ Int]()\n        val j = mutable.HashMap[Int, Int]()\n        val k = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val i = mutable.HashMap[Int, Int]()\n        val j = mutable.HashMap[Int,\
    \ Int]()\n        val k = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val i = mutable.HashMap[Int,\
    \ Int]()\n        val j = mutable.HashMap[\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpor_r8n0m.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpor_r8n0m.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.HashMap[\e[35mInt\e[0m,\
    \ \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpor_r8n0m.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.HashMap[\e[35mInt\e[0m,\
    \ \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpor_r8n0m.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mi\e[0m = mutable.HashMap[\e[35mInt\e[0m,\
    \ \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mi is already defined as \e[33mvalue\e[0m \e[35mi\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpor_r8n0m.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mj\e[0m = mutable.HashMap[\e[35mInt\e[0m,\
    \ \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mj is already defined as \e[33mvalue\e[0m \e[35mj\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpor_r8n0m.scala:25:12 ---------------------------\e"
  stdout: ''
  timestamp: 1659798341
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var count = 0\n        var\
    \ a = new Array[Int](n)\n        for( i <- 0 until n ) {\n            a(i) = i\
    \ * i - i + 1\n        }\n        for( i <- 0 until n ) {\n            for( j\
    \ <- 0 until n ) {\n                for( k <- 0 until n ) {\n                \
    \    if( i < j < k && a(i) + a(j) + a(k) % 3 == 0 ) {\n                      \
    \  count += 1\n                    }\n                }\n            }\n     \
    \   }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcbtto_e3.scala:16:31\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m\
    \                               ^\e[0m\n\e[31m   |\e[0m                      \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                              \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcbtto_e3.scala:17:26\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m( i <-\
    \ \e[31m0\e[0m until n ) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpcbtto_e3.scala:20:26 --------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m( i <- \e[31m0\e[0m until n ) {\n\e\
    [31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m         \
    \                 Found:    (n : Long)\n\e[31m   |\e[0m                      \
    \    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcbtto_e3.scala:21:30\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mfor\e[0m( j\
    \ <- \e[31m0\e[0m until n ) {\n\e[31m\e[31m   |\e[0m                         \
    \     ^\e[0m\n\e[31m   |\e[0m                              Found:    (n : Long)\n\
    \e[31m   |\e[0m                              Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcbtto_e3.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mfor\e[0m( k <- \e[31m0\e[0m until\
    \ n ) {\n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m\
    \   |\e[0m                                  Found:    (n : Long)\n\e[31m   |\e\
    [0m                           "
  stdout: ''
  timestamp: 1659798343
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        for(i <- 1 to n) {\n\
    \            val j = i * i - i + 1\n            val k = i * i + i + j\n      \
    \      val l = i * j + i + k\n            val m = m :+ l\n            val n =\
    \ m filter (_ % 3 == 0)\n            val m = m filter (_ % 3 != 0)\n         \
    \   val n = m filter (_ > 0)\n            val m = m filter (_ < 0)\n         \
    \   val n = m filter (_ == 0)\n            val m = m filter (_ == 1)\n       \
    \     val n = m filter (_ == 2)\n            val m = m filter (_ == 3)\n     \
    \       val n = m filter (_ == 4)\n            val m = m filter (_ == 5)\n   \
    \         val n = m filter (_ == 6)\n            val m = m filter (_ == 7)\n \
    \           val n = m filter (_ == 8)\n            val m = m filter (_ == 9)\n\
    \            val n = m filter (_ == 10)\n            val m = m filter (_ == 11)\n\
    \            val n = m filter (_ == 12)\n            val m = m filter (_ == 13)\n\
    \            val n = m filter (_ == 14)\n            val m = m filter (_ == 15)\n\
    \            val n = m filter (_ == 16)\n            val m = m filter (_ == 17)\n\
    \            val n = m filter (_ == 18)\n            val m = m filter (_ == 19)\n\
    \            val n = m filter (_ == 20)\n            val m = m filter (_ == 21)\n\
    \            val n = m filter (_ == 22)\n            val m = m filter (_ == 23)\n\
    \            val n = m filter (_ == 24)\n            val m = m filter (_ == 25)\n\
    \            val n = m filter (_ == 26)\n            val m = m filter (_ == 27)\n\
    \            val n = m filter (_ == 28)\n            val m = m filter (_ == 29)\n\
    \            val n = m filter (_ == 30)\n            val m = m filter (_ == 31)\n\
    \            val n = m filter (_ == 32)\n            val m = m filter (_ == 33)\n\
    \            val n = m filter (_ == 34)\n            val m = m filter (_ == 35)\n\
    \            val n = m filter (_ == 36)\n            val m = m filter (_ == 37)\n\
    \            val n = m filter (_ == 38)\n            val m = m filter (_ == 39\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmparqj9z1s.scala:66:4 ----------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmparqj9z1s.scala:75:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m75 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmparqj9z1s.scala:15:34 --------------------\e[0m\e[0m\n\
    \e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = Array.ofDim[\e[35mLong\e\
    [0m](n)\n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m\
    \   |\e[0m                                  Found:    (n : Long)\n\e[31m   |\e\
    [0m                                  Required: Int\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmparqj9z1s.scala:16:16 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmparqj9z1s.scala:17:22 --------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n) {\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmparqj9z1s.scala:74:1\
    \ ---------------------\e[0m\e[0m\n\e[31m74 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: Long\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmparqj9z1s.scala:67:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m67 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35m"
  stdout: ''
  timestamp: 1659798344
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val i = mutable.ArrayBuffer.empty[Int]\n        val j = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val count = mutable.ArrayBuffer.empty[Int]\n\
    \        val max = mutable.ArrayBuffer.empty[Int]\n        val min = 3\n     \
    \   val maxTriples = mutable.ArrayBuffer.empty[Int]\n        val maxTriple = 0\n\
    \        val minTriple = 0\n        val maxTriples = 0\n        val minTriples\
    \ = 0\n        val maxTriple = 0\n        val minTriple = 0\n        val maxTriples\
    \ = 0\n        val minTriples = 0\n        val maxTriple = 0\n        val minTriples\
    \ = 0\n        val maxTriple = 0\n        val minTriples = 0\n        val maxTriple\
    \ = 0\n        val minTriples = 0\n        val maxTriple = 0\n        val minTriples\
    \ = 0\n        val maxTriple = 0\n        val minTriples = 0\n        val maxTriple\
    \ = 0\n        val minTriples = 0\n        val maxTriple = 0\n        val minTriples\
    \ = 0\n        val maxTriple = 0\n        val minTriples = 0\n        val maxTriple\
    \ = 0\n        val minTriples = 0\n        val maxTriple = 0\n        val minTriples\
    \ = 0\n        val maxTriple = 0\n        val minTriples = 0\n        val maxTriple\
    \ = 0\n        val minTriples = 0\n        val maxTriple = 0\n        val minTriples\
    \ = 0\n        val maxTriple = 0\n        val minTriples = 0\n        val maxTriple\
    \ = 0\n        val minTriples = 0\n        val maxTriple = 0\n        val minTriples\
    \ = 0\n        val maxTriple = 0\n        val minTriples = 0\n        val maxTriple\
    \ = 0\n        val minTriples = 0\n        val maxTriple = 0\n        val minTriples\
    \ = 0\n        val maxTriple = 0\n        val minTriples = 0\n        val maxTriple\
    \ = 0\n        val minTriples = 0\n        val maxTriple = 0\n        val minTriples\
    \ = 0\n        val maxTriple = 0\n        val minTriples = 0\n        val maxTriple\
    \ = 0\n        val minTriples = 0\n        val maxTriple\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7qfpe0gb.scala:82:4 ----------------------------\e\
    [0m\e[0m\n\e[31m82 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7qfpe0gb.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxTriples\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriples is already defined as \e[33mvalue\e[0m \e[35mmaxTriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7qfpe0gb.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mmaxTriple\e[0m = \e[31m0\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxTriple is already\
    \ defined as \e[33mvalue\e[0m \e[35mmaxTriple\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7qfpe0gb.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mminTriple\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mminTriple is already defined as \e[33mvalue\e[0m \e[35mminTriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7qfpe0gb.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mmaxTriples\e[0m = \e[31m0\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxTriples is already\
    \ defined as \e[33mvalue\e[0m \e[35mmaxTriples\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7qfpe0gb.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mminTriples\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659798343
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = scala.math.pow(3, n).toLong\n        val n = scala.math.pow(3,\
    \ n).toLong\n        val k = scala.math.pow(3, n).toLong\n        val i = scala.math.pow(3,\
    \ n).toLong\n        val j = scala.math.pow(3, n).toLong\n        val l = scala.math.pow(3,\
    \ n).toLong\n        val m = scala.math.pow(3, n).toLong\n        val n = scala.math.pow(3,\
    \ n).toLong\n        val k = scala.math.pow(3, n).toLong\n        val i = scala.math.pow(3,\
    \ n).toLong\n        val j = scala.math.pow(3, n).toLong\n        val l = scala.math.pow(3,\
    \ n).toLong\n        val m = scala.math.pow(3, n).toLong\n        val n = scala.math.pow(3,\
    \ n).toLong\n        val k = scala.math.pow(3, n).toLong\n        val i = scala.math.pow(3,\
    \ n).toLong\n        val j = scala.math.pow(3, n).toLong\n        val l = scala.math.pow(3,\
    \ n).toLong\n        val m = scala.math.pow(3, n).toLong\n        val n = scala.math.pow(3,\
    \ n).toLong\n        val k = scala.math.pow(3, n).toLong\n        val i = scala.math.pow(3,\
    \ n).toLong\n        val j = scala.math.pow(3, n).toLong\n        val l = scala.math.pow(3,\
    \ n).toLong\n        val m = scala.math.pow(3, n).toLong\n        val n = scala.math.pow(3,\
    \ n).toLong\n        val k = scala.math.pow(3, n).toLong\n        val i = scala.math.pow(3,\
    \ n).toLong\n        val j = scala.math.pow(3, n).toLong\n        val l = scala.math.pow(3,\
    \ n).toLong\n        val m = scala.math.pow(3, n).toLong\n        val n = scala.math.pow(3,\
    \ n).toLong\n        val k = scala.math.pow(3, n).toLong\n        val i = scala.math.pow(3,\
    \ n).toLong\n        val j = scala.math.pow(3, n).toLong\n        val l = scala.math.pow(3,\
    \ n).toLong\n        val m = scala.math.pow(3, n).toLong\n        val n = scala.math.pow(3,\
    \ n).toLong\n        val k = scala.math.pow(3, n).toLong\n        val i = scala.math.pow(3,\
    \ n).toLong\n        val j = scala.math.pow(3, n).toLong\n        val l = scala.math.pow(3,\
    \ n\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvmikwprx.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvmikwprx.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mm\e[0m = scala.math.pow(\e[31m3\e[0m, n).toLong\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already\
    \ defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvmikwprx.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = scala.math.pow(\e\
    [31m3\e[0m, n).toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpvmikwprx.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mk\e[0m = scala.math.pow(\e[31m3\e[0m, n).toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mk is already defined as \e[33mvalue\e[0m \e[35mk\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvmikwprx.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mi\e[0m = scala.math.pow(\e[31m3\e[0m, n).toLong\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mi is already\
    \ defined as \e[33mvalue\e[0m \e[35mi\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvmikwprx.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36"
  stdout: ''
  timestamp: 1659798344
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        val sum = 0\n        for(i\
    \ <- 1 to n){\n            val j = i * i - i + 1\n            val k = i * i +\
    \ i + j\n            val v = a(i) + a(i) + a(i)\n            sum += v\n      \
    \      if((v % 3) == 0){\n                count(v)\n            }\n          \
    \  a(i) = v\n        }\n        count(sum)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpln5sj0i4.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpln5sj0i4.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpln5sj0i4.scala:18:22\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n){\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m \
    \  |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m         \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpln5sj0i4.scala:22:16 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m            sum += v\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            value += is not a member of Int - did you mean sum.!=?\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659798344
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        var count = 0\n        var i = 0\n        var j = 0\n        var k =\
    \ 0\n        while(i < n && j < n && k < n) {\n            a(i) = i * i - i +\
    \ 1\n            i += 1\n            j += 1\n            k += 1\n        }\n \
    \       while(i < n) {\n            a(i) = i * i - i + 1\n            i += 1\n\
    \        }\n        while(j < n) {\n            a(j) = i * i - i + 1\n       \
    \     j += 1\n        }\n        while(k < n) {\n            a(k) = i * i - i\
    \ + 1\n            k += 1\n        }\n        for(i<-0 until a.length) {\n   \
    \         for(j<-0 until a.length) {\n                for(k<-0 until a.length)\
    \ {\n                    if(a(i) + a(j) + a(k) == 0) {\n                     \
    \   count += 1\n                    }\n                }\n            }\n    \
    \    }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpte5qaahm.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798343
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgbg5c7zz.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpgbg5c7zz.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxTriples\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriples is already defined as \e[33mvalue\e[0m \e[35mmaxTriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgbg5c7zz.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxTriple\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriple is already defined as \e[33mvalue\e[0m \e[35mmaxTriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgbg5c7zz.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxTriples\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriples is already defined as \e[33mvalue\e[0m \e[35mmaxTriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgbg5c7zz.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxTriple\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriple is already defined as \e[33mvalue\e[0m \e[35mmaxTriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel"
  stdout: ''
  timestamp: 1659798303
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val s = mutable.ArrayBuffer.empty[Int]\n        val t = mutable.ArrayBuffer.empty[Int]\n\
    \        val r = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val s = mutable.ArrayBuffer.empty[Int]\n\
    \        val t = mutable.ArrayBuffer.empty[Int]\n        val r = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val s = mutable.ArrayBuffer.empty[Int]\n        val t = mutable.ArrayBuffer.empty[Int]\n\
    \        val r = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val s = mutable.ArrayBuffer.empty[Int]\n\
    \        val t = mutable.ArrayBuffer.empty[Int]\n        val r = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val s = mutable.ArrayBuffer.empty[Int]\n        val t = mutable.ArrayBuffer.empty[Int]\n\
    \        val r = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val s = mutable.ArrayBuffer.empty[Int]\n\
    \        val t = mutable.ArrayBuffer.empty[Int]\n        val r = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val s = mutable.ArrayBuffer.empty[Int]\n        val t = mutable.ArrayBuffer.empty[Int]\n\
    \        val r = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val s = mutable.ArrayBuffer.empty[Int]\n\
    \        val t = mutable.ArrayBuffer.empty[Int]\n        val r = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsq9dvzte.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpsq9dvzte.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpsq9dvzte.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpsq9dvzte.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36ms\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0ms is already defined as \e[33mvalue\e[0m \e[35ms\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpsq9dvzte.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mt\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mt is already defined as \e[33mvalue\e[0m \e[35mt\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpsq9dvzte.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659798342
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = a.length - 1\n        val max = 0\n        for(i <- 0 until m){\n\
    \            for(j <- 0 until m){\n                for(k <- 0 until m){\n    \
    \                if(i<j && i<k && j<k){\n                        val sum = i.toInt\
    \ + j.toInt + k.toInt\n                        if(sum % 3 == 0){\n           \
    \                 val triple = i + j + k\n                            if(triple\
    \ > max){\n                                max = triple\n                    \
    \        }\n                        }\n                    }\n               \
    \ }\n            }\n        }\n        max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph0xsx19h.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmph0xsx19h.scala:26:36 -----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                                max = triple\n\e[31m\e\
    [31m   |\e[0m                                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                Reassignment to val max\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659798343
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[In\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1edppdlh.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1edppdlh.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mtriples\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mtriples is already defined as \e[33mvalue\e[0m \e[35mtriples\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp1edppdlh.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mtriple\e[0m = mutable.Map[\e[35mInt\e[0m,\
    \ \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtriple is already defined as \e[33mvalue\e[0m \e[35mtriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1edppdlh.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mtriples\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtriples is already defined as \e[33mvalue\e[0m \e[35mtriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1edppdlh.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mtriple\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtriple is already defined as \e[33mvalue\e[0m \e[35mtriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1ed"
  stdout: ''
  timestamp: 1659798290
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        for(i <- 1 to n){\n \
    \           val j = i * i - i + 1\n            val k = i * i + i + j\n       \
    \     if((j > 0) && (k > 0)){\n                a += i\n                m += j\n\
    \                m += k\n            }\n        }\n        m.toList.filter(_ %\
    \ 3 == 0).size\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe2c4m60i.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe2c4m60i.scala:16:16\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe2c4m60i.scala:17:22\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n){\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m \
    \  |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m         \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpe2c4m60i.scala:21:18 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m                a += i\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e\
    [31m   |\e[0m             value += is not a member of Array[Int] - did you mean\
    \ a.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1659798344
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = a.length\n        var i = 0\n        var j = 0\n        var k\
    \ = 0\n        var count = 0\n        while (i < m && j < m && k < m) {\n    \
    \        if (a(i) < a(j) && a(j) < a(k)) {\n                i += 1\n         \
    \   } else if (a(i) > a(j) && a(j) > a(k)) {\n                j += 1\n       \
    \     } else if (a(i) < a(j) && a(j) > a(k)) {\n                k += 1\n     \
    \       }\n            count += 1\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfudquhht.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798342
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        for (i <- 0 until n)\
    \ {\n            a(i) = i * i - i + 1\n        }\n        val n = a.length\n \
    \       for (i <- 0 until n - 1) {\n            for (j <- i + 1 until n) {\n \
    \               for (k <- j + 1 until n) {\n                    if (a(i) + a(j)\
    \ + a(k)%3 > 0) {\n                        m += (i + j + k).toInt\n          \
    \          }\n                }\n            }\n        }\n        m.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8ydp0v0f.scala:20:16 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = a.length\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp8ydp0v0f.scala:16:16 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798339
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9v1syy8g.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659798289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var a = Array.ofDim[Int](n)\n\
    \        a.foreach(x => x = x * x - x + 1)\n        val result = a.zipWithIndex.filter(_._2\
    \ % 3 == 0).length\n        a\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvsp79dki.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpvsp79dki.scala:16:25 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        a.foreach(\e[36mx\e[0m => x = x * x - x + \e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Reassignment to val x\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvsp79dki.scala:18:8 ---------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        a\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m\
    \   |\e[0m        Found:    (a : Array[Int])\n\e[31m   |\e[0m        Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798344
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var a = new Array[Int](n)\n\
    \        var count = 0\n        for(i<- 1 to n){\n            for(j<- i+1 to n){\n\
    \                for(k<- j+1 to n){\n                    if(i+j+k == 3){\n   \
    \                     a(i) = i\n                        a(j) = j\n           \
    \             a(k) = k\n                        count += 1\n                 \
    \   }\n                }\n            }\n        }\n        count\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmrkkl245.scala:15:31\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m\
    \                               ^\e[0m\n\e[31m   |\e[0m                      \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                              \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmrkkl245.scala:17:21\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i<- \e\
    [31m1\e[0m to n){\n\e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m  \
    \ |\e[0m                     Found:    (n : Long)\n\e[31m   |\e[0m           \
    \          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpmrkkl245.scala:18:27 --------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m            \e[33mfor\e[0m(j<- i+\e[31m1\e[0m to n){\n\e[31m\e[31m   |\e\
    [0m                           ^\e[0m\n\e[31m   |\e[0m                        \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                           Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmrkkl245.scala:19:31\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m                \e[33mfor\e[0m(k<-\
    \ j+\e[31m1\e[0m to n){\n\e[31m\e[31m   |\e[0m                               ^\e\
    [0m\n\e[31m   |\e[0m                               Found:    (n : Long)\n\e[31m\
    \   |\e[0m                               Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659798344
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var count = 0\n        var\
    \ a = Array.ofDim[Int](n)\n        for( i <- 0 until n ) {\n            a(i) =\
    \ i * i - i + 1\n        }\n        for( i <- 0 until n ) {\n            for(\
    \ j <- 0 until n ) {\n                for( k <- 0 until n ) {\n              \
    \      if( i < j < k && a(i) + a(j) + a(k) % 3 == 0 ) {\n                    \
    \    count += 1\n                    }\n                }\n            }\n   \
    \     }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpud78_lqf.scala:16:33\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpud78_lqf.scala:17:26\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m( i <-\
    \ \e[31m0\e[0m until n ) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpud78_lqf.scala:20:26 --------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m( i <- \e[31m0\e[0m until n ) {\n\e\
    [31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m         \
    \                 Found:    (n : Long)\n\e[31m   |\e[0m                      \
    \    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpud78_lqf.scala:21:30\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mfor\e[0m( j\
    \ <- \e[31m0\e[0m until n ) {\n\e[31m\e[31m   |\e[0m                         \
    \     ^\e[0m\n\e[31m   |\e[0m                              Found:    (n : Long)\n\
    \e[31m   |\e[0m                              Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpud78_lqf.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mfor\e[0m( k <- \e[31m0\e[0m until\
    \ n ) {\n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m\
    \   |\e[0m                                  Found:    (n : Long)\n\e[31m   |\e\
    [0m                                  Req"
  stdout: ''
  timestamp: 1659798345
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var max = 0\n        var\
    \ a = new Array[Int](n)\n        for( i <- 0 until n ) {\n            a(i) = i\
    \ * i - i + 1\n        }\n        for( i <- 0 until n ) {\n            for( j\
    \ <- 0 until n ) {\n                for( k <- 0 until n ) {\n                \
    \    if( i < j < k && a(i) + a(j) + a(k) == 3 ) {\n                        max\
    \ = max + 1\n                    }\n                }\n            }\n       \
    \ }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeywirzon.scala:16:31\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m\
    \                               ^\e[0m\n\e[31m   |\e[0m                      \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                              \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeywirzon.scala:17:26\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m( i <-\
    \ \e[31m0\e[0m until n ) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpeywirzon.scala:20:26 --------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m( i <- \e[31m0\e[0m until n ) {\n\e\
    [31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m         \
    \                 Found:    (n : Long)\n\e[31m   |\e[0m                      \
    \    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeywirzon.scala:21:30\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mfor\e[0m( j\
    \ <- \e[31m0\e[0m until n ) {\n\e[31m\e[31m   |\e[0m                         \
    \     ^\e[0m\n\e[31m   |\e[0m                              Found:    (n : Long)\n\
    \e[31m   |\e[0m                              Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeywirzon.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mfor\e[0m( k <- \e[31m0\e[0m until\
    \ n ) {\n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m\
    \   |\e[0m                                  Found:    (n : Long)\n\e[31m   |\e\
    [0m                           "
  stdout: ''
  timestamp: 1659798290
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var a = new Array[Long](n)\n\
    \        var count = 0\n        for(i <- 0 until n) {\n            a(i) = i *\
    \ i - i + 1\n        }\n        for(i <- 0 until n) {\n            for(j <- 0\
    \ until n) {\n                for(k <- 0 until n) {\n                    if(i+j+k\
    \ == a(i)+a(j)+a(k)) {\n                        count += 1\n                 \
    \   }\n                }\n            }\n        }\n        count\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp541iren5.scala:15:32\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e\
    [0m                                ^\e[0m\n\e[31m   |\e[0m                   \
    \             Found:    (n : Long)\n\e[31m   |\e[0m                          \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp541iren5.scala:17:25\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp541iren5.scala:20:25 --------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n) {\n\e[31m\e\
    [31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m                \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                         Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp541iren5.scala:21:29\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mfor\e[0m(j\
    \ <- \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          \
    \   ^\e[0m\n\e[31m   |\e[0m                             Found:    (n : Long)\n\
    \e[31m   |\e[0m                             Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp541iren5.scala:22:33 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mfor\e[0m(k <- \e[31m0\e[0m until\
    \ n) {\n\e[31m\e[31m   |\e[0m                                 ^\e[0m\n\e[31m \
    \  |\e[0m                                 Found:    (n : Long)\n\e[31m   |\e[0m\
    \                                 Required:"
  stdout: ''
  timestamp: 1659798345
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[In\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1edppdlh.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1edppdlh.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mtriples\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mtriples is already defined as \e[33mvalue\e[0m \e[35mtriples\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp1edppdlh.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mtriple\e[0m = mutable.Map[\e[35mInt\e[0m,\
    \ \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtriple is already defined as \e[33mvalue\e[0m \e[35mtriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1edppdlh.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mtriples\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtriples is already defined as \e[33mvalue\e[0m \e[35mtriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1edppdlh.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mtriple\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtriple is already defined as \e[33mvalue\e[0m \e[35mtriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1ed"
  stdout: ''
  timestamp: 1659798290
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triple2 =\
    \ mutable.Map[Int, Int]()\n        val triple3 = mutable.Map[Int, Int]()\n   \
    \     val triple4 = mutable.Map[Int, Int]()\n        val triple5 = mutable.Map[Int,\
    \ Int]()\n        val triple6 = mutable.Map[Int, Int]()\n        val triple7 =\
    \ mutable.Map[Int, Int]()\n        val triple8 = mutable.Map[Int, Int]()\n   \
    \     val triple9 = mutable.Map[Int, Int]()\n        val triple10 = mutable.Map[Int,\
    \ Int]()\n        val triple11 = mutable.Map[Int, Int]()\n        val triple12\
    \ = mutable.Map[Int, Int]()\n        val triple13 = mutable.Map[Int, Int]()\n\
    \        val triple14 = mutable.Map[Int, Int]()\n        val triple15 = mutable.Map[Int,\
    \ Int]()\n        val triple16 = mutable.Map[Int, Int]()\n        val triple17\
    \ = mutable.Map[Int, Int]()\n        val triple18 = mutable.Map[Int, Int]()\n\
    \        val triple19 = mutable.Map[Int, Int]()\n        val triple20 = mutable.Map[Int,\
    \ Int]()\n        val triple21 = mutable.Map[Int, Int]()\n        val triple22\
    \ = mutable.Map[Int, Int]()\n        val triple23 = mutable.Map[Int, Int]()\n\
    \        val triple24 = mutable.Map[Int, Int]()\n        val triple25 = mutable.Map[Int,\
    \ Int]()\n        val triple26 = mutable.Map[Int, Int]()\n        val triple27\
    \ = mutable.Map[Int, Int]()\n        val triple28 = mutable.Map[Int, Int]()\n\
    \        val triple29 = mutable.Map[Int, Int]()\n        val triple30 = mutable.Map[Int,\
    \ Int]()\n        val triple31 = mutable.Map[Int, Int]()\n        val triple32\
    \ = mutable.Map[Int, Int]()\n        val triple33 = mutable.Map[Int, Int]()\n\
    \        val triple34 = mutable.Map[Int, Int]()\n        val triple35 = mutable.Map[Int,\
    \ Int]\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbcc4o867.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbcc4o867.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbcc4o867.scala:17:22\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mtriples\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpbcc4o867.scala:18:21 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36mtriple\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpbcc4o867.scala:19:22 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mtriple2\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbcc4o867.scal"
  stdout: ''
  timestamp: 1659798344
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var a = Array.ofDim[Int](n\
    \ + 1)\n        var count = 0\n        for(i<- 1 to n){\n            for(j <-\
    \ i to n){\n                for(k <- j to n){\n                    if(i+j+k ==\
    \ i*i*i && i*i+j*j+k*k == i*i*i){\n                        a(i) = i\n        \
    \                a(j) = j\n                        a(k) = k\n                \
    \        count += 1\n                    }\n                }\n            }\n\
    \        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp019jk892.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \                              ^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \              Found:    Long\n\e[31m   |\e[0m                               \
    \  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp019jk892.scala:17:21\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i<- \e\
    [31m1\e[0m to n){\n\e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m  \
    \ |\e[0m                     Found:    (n : Long)\n\e[31m   |\e[0m           \
    \          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp019jk892.scala:18:26 --------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m            \e[33mfor\e[0m(j <- i to n){\n\e[31m\e[31m   |\e[0m      \
    \                    ^\e[0m\n\e[31m   |\e[0m                          Found: \
    \   (n : Long)\n\e[31m   |\e[0m                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp019jk892.scala:19:30 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                \e[33mfor\e[0m(k <- j to n){\n\e[31m\e\
    [31m   |\e[0m                              ^\e[0m\n\e[31m   |\e[0m           \
    \                   Found:    (n : Long)\n\e[31m   |\e[0m                    \
    \          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798345
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val i = mutable.HashMap[Int, Int]()\n        val j = mutable.HashMap[Int,\
    \ Int]()\n        val k = mutable.HashMap[Int, Int]()\n        val triples = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriples = mutable.HashMap[Int, Int]()\n        val maxTriple\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriples = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriple = mutable.HashMap[Int, Int]()\n        val maxTriples\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriple = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriples = mutable.HashMap[Int, Int]()\n        val maxTriple\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriples = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriple = mutable.HashMap[Int, Int]()\n        val maxTriples\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriple = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriples = mutable.HashMap[Int, Int]()\n        val maxTriple\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriples = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriple = mutable.HashMap[Int, Int]()\n        val maxTriples\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriple = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriples = mutable.HashMap[Int, Int]()\n        val maxTriple\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriples = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriple = mutable.HashMap[Int, Int]()\n        val maxTriples\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriple = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriples = mutable.HashMap[Int, Int]()\n        val maxTriple\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriples = \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpil4xbm8o.scala:48:24 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \e[36mmaxTriples\e[0m = \n\e[31m\e\
    [31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m                 \
    \       expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpil4xbm8o.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxTriples\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriples is already defined as \e[33mvalue\e[0m \e[35mmaxTriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpil4xbm8o.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mmaxTriple\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriple is already defined as \e[33mvalue\e[0m \e[35mmaxTriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpil4xbm8o.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxTriples\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriples is already defined as \e[33mvalue\e[0m \e[35mmaxTriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpil4xbm8o.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxTriple\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659798345
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var a = Array.ofDim[Int](n);\n\
    \        var cnt = 0;\n        for(i<- 0 until n){\n            a(i) = i * i -\
    \ i + 1;\n            if(a(i) % 3 == 0){\n                cnt += 1\n         \
    \   }\n        }\n        return cnt;\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvjf6k8vm.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n);\n\e[31m\e[31m   |\e[0m                 \
    \                ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvjf6k8vm.scala:17:24\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i<- \e\
    [31m0\e[0m until n){\n\e[31m\e[31m   |\e[0m                        ^\e[0m\n\e\
    [31m   |\e[0m                        Found:    (n : Long)\n\e[31m   |\e[0m   \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9v1syy8g.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659798289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9v1syy8g.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659798289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        \n        for(i <- 0 until n) {\n            val j = i * i -\
    \ i + 1\n            val k = i * i + i + 1\n            \n            if((j >\
    \ 0) && (k > 0)) {\n                a(i) = j\n                a(k) = k\n     \
    \           \n                count(j) = count(j) + 1\n                count(k)\
    \ = count(k) + 1\n                \n                triples(j) = triples(j) +\
    \ 1\n                triples(k) = triples(k) + 1\n            }\n        }\n \
    \       \n        val maxTriples = triples.maxBy(_._2)._2\n        \n        count(maxTriples)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw7c9kv5v.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw7c9kv5v.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw7c9kv5v.scala:17:22\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mtriples\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpw7c9kv5v.scala:19:25 --------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e\
    [0m                         ^\e[0m\n\e[31m   |\e[0m                         Found:\
    \    (n : Long)\n\e[31m   |\e[0m                         Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659798354
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var a = new Array[Int](n)\n\
    \        var count = 0\n        for(i<- 1 to n){\n            for(j <- i to n){\n\
    \                for(k <- j to n){\n                    if(i+j+k == i*i*i + j*j*j\
    \ + k*k*k){\n                        count += 1\n                    }\n     \
    \           }\n            }\n            a(i) = i*i*i + j*j*j + k*k*k\n     \
    \   }\n        count += a.filter(_ % 3 == 0).length\n        return count\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) ==\
    \ (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl7ba2uid.scala:15:31\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m\
    \                               ^\e[0m\n\e[31m   |\e[0m                      \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                              \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl7ba2uid.scala:17:21\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i<- \e\
    [31m1\e[0m to n){\n\e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m  \
    \ |\e[0m                     Found:    (n : Long)\n\e[31m   |\e[0m           \
    \          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpl7ba2uid.scala:18:26 --------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m            \e[33mfor\e[0m(j <- i to n){\n\e[31m\e[31m   |\e[0m      \
    \                    ^\e[0m\n\e[31m   |\e[0m                          Found: \
    \   (n : Long)\n\e[31m   |\e[0m                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl7ba2uid.scala:19:30 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                \e[33mfor\e[0m(k <- j to n){\n\e[31m\e\
    [31m   |\e[0m                              ^\e[0m\n\e[31m   |\e[0m           \
    \                   Found:    (n : Long)\n\e[31m   |\e[0m                    \
    \          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpl7ba2uid.scala:25:27 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m            a(i) = i*i*i + j*j*j + k*k*k\n\e[31m\e[31m   |\e[0m           \
    \                ^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ j\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659798356
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val i = mutable.HashMap[Int, Int]()\n        val j = mutable.HashMap[Int,\
    \ Int]()\n        val k = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val i = mutable.HashMap[Int,\
    \ Int]()\n        val j = mutable.HashMap[Int, Int]()\n        val k = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val i = mutable.HashMap[Int, Int]()\n        val j = mutable.HashMap[Int,\
    \ Int]()\n        val k = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val i = mutable.HashMap[Int,\
    \ Int]()\n        val j = mutable.HashMap[Int, Int]()\n        val k = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val i = mutable.HashMap[Int, Int]()\n        val j = mutable.HashMap[Int,\
    \ Int]()\n        val k = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val i = mutable.HashMap[Int,\
    \ Int]()\n        val j = mutable.HashMap[Int, Int]()\n        val k = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val i = mutable.HashMap[Int, Int]()\n        val j = mutable.HashMap[Int,\
    \ Int]()\n        val k = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val i = mutable.HashMap[Int,\
    \ Int]()\n        val j = mutable.HashMap[\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpor_r8n0m.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpor_r8n0m.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.HashMap[\e[35mInt\e[0m,\
    \ \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpor_r8n0m.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.HashMap[\e[35mInt\e[0m,\
    \ \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpor_r8n0m.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mi\e[0m = mutable.HashMap[\e[35mInt\e[0m,\
    \ \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mi is already defined as \e[33mvalue\e[0m \e[35mi\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpor_r8n0m.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mj\e[0m = mutable.HashMap[\e[35mInt\e[0m,\
    \ \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mj is already defined as \e[33mvalue\e[0m \e[35mj\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpor_r8n0m.scala:25:12 ---------------------------\e"
  stdout: ''
  timestamp: 1659798341
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var triples = 0\n       \
    \ var a = Array.ofDim[Int](n)\n        var i = 0\n        var j = 0\n        var\
    \ k = 0\n        while(i < n && j < n && k < n) {\n            a(i) = i * i -\
    \ i + 1\n            i += 1\n            j += 1\n            k += 1\n        }\n\
    \        while(i < n) {\n            a(i) = i * i - i + 1\n            i += 1\n\
    \        }\n        while(j < n) {\n            a(j) = i * i - i + 1\n       \
    \     j += 1\n        }\n        while(k < n) {\n            a(k) = i * i - i\
    \ + 1\n            k += 1\n        }\n        for(i<-0 until n) {\n          \
    \  for(j<-0 until n) {\n                for(k<-0 until n) {\n                \
    \    if(a(i) + a(j) + a(k) == 3) {\n                        triples += 1\n   \
    \                 }\n                }\n            }\n        }\n        return\
    \ triples\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvai6ks7l.scala:16:33\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvai6ks7l.scala:38:23\
    \ --------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mfor\e[0m(i<-\e\
    [31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpvai6ks7l.scala:39:27 --------------------\e[0m\e[0m\n\e[31m39\
    \ |\e[0m            \e[33mfor\e[0m(j<-\e[31m0\e[0m until n) {\n\e[31m\e[31m  \
    \ |\e[0m                           ^\e[0m\n\e[31m   |\e[0m                   \
    \        Found:    (n : Long)\n\e[31m   |\e[0m                           Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvai6ks7l.scala:40:31\
    \ --------------------\e[0m\e[0m\n\e[31m40 |\e[0m                \e[33mfor\e[0m(k<-\e\
    [31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                               ^\e\
    [0m\n\e[31m   |\e[0m                               Found:    (n : Long)\n\e[31m\
    \   |\e[0m                               Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659798356
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = scala.math.max(3, n)\n        val maxTriples = 0\n        val\
    \ maxTriple = scala.math.max(3, n)\n        val maxTriples = scala.math.max(3,\
    \ n)\n        val maxTriple = scala.math.max(3, n)\n        val maxTriples = scala.math.max(3,\
    \ n)\n        val maxTriple = scala.math.max(3, n)\n        val maxTriples = scala.math.max(3,\
    \ n)\n        val maxTriple = scala.math.max(3, n)\n        val maxTriples = scala.math.max(3,\
    \ n)\n        val maxTriple = scala.math.max(3, n)\n        val maxTriples = scala.math.max(3,\
    \ n)\n        val maxTriple = scala.math.max(3, n)\n        val maxTriples = scala.math.max(3,\
    \ n)\n        val maxTriple = scala.math.max(3, n)\n        val maxTriples = scala.math.max(3,\
    \ n)\n        val maxTriple = scala.math.max(3, n)\n        val maxTriples = scala.math.max(3,\
    \ n)\n        val maxTriple = scala.math.max(3, n)\n        val maxTriples = scala.math.max(3,\
    \ n)\n        val maxTriple = scala.math.max(3, n)\n        val maxTriples = scala.math.max(3,\
    \ n)\n        val maxTriple = scala.math.max(3, n)\n        val maxTriples = scala.math.max(3,\
    \ n)\n        val maxTriple = scala.math.max(3, n)\n        val maxTriples = scala.math.max(3,\
    \ n)\n        val maxTriple = scala.math.max(3, n)\n        val maxTriples = scala.math.max(3,\
    \ n)\n        val maxTriple = scala.math.max(3, n)\n        val maxTriples = scala.math.max(3,\
    \ n)\n        val maxTriple = scala.math.max(3, n)\n        val maxTriples = scala.math.max(3,\
    \ n)\n        val maxTriple = scala.math.max(3, n)\n        val maxTriples = scala.math.max(3,\
    \ n)\n        val maxTriple = scala.math.max(3, n)\n        val maxTriples = scala.math.max(3,\
    \ n)\n        val maxTriple = scala.math.max(3, n)\n        val maxTriples = scala.math.max(3,\
    \ n)\n        val maxTriple = scala.math.max(3, n)\n        val max\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprcijgj14.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprcijgj14.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxTriples\e[0m = scala.math.max(\e[31m3\e[0m, n)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxTriples\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxTriples\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprcijgj14.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxTriple\e[0m = scala.math.max(\e[31m3\e[0m, n)\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxTriple is\
    \ already defined as \e[33mvalue\e[0m \e[35mmaxTriple\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprcijgj14.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxTriples\e[0m = scala.math.max(\e[31m3\e[0m, n)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxTriples\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxTriples\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprcijgj14.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxTriple\e[0m = scala.math.max(\e[31m3\e[0m, n)\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxTriple is\
    \ already defined as \e[33mvalue\e[0m \e[35mmaxTriple\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprcijgj14.scala:"
  stdout: ''
  timestamp: 1659798355
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, \n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwi8rk6cz.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpwi8rk6cz.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxTriples\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriples is already defined as \e[33mvalue\e[0m \e[35mmaxTriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwi8rk6cz.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxTriple\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriple is already defined as \e[33mvalue\e[0m \e[35mmaxTriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwi8rk6cz.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxTriples\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriples is already defined as \e[33mvalue\e[0m \e[35mmaxTriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwi8rk6cz.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxTriple\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriple is already defined as \e[33mvalue\e[0m \e[35mmaxTriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel"
  stdout: ''
  timestamp: 1659798315
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9v1syy8g.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659798289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        var count = 0\n        var i = 0\n        var j = 0\n        var k =\
    \ 0\n        while (i < n && j < n && k < n) {\n            a(i) = i * i - i +\
    \ 1\n            i += 1\n            j += 1\n            k += 1\n        }\n \
    \       val max = a.max\n        val maxIndex = a.indexOf(max)\n        val maxTriples\
    \ = maxIndex - i + 1\n        if (maxTriples == 0) {\n            count = 0\n\
    \        } else {\n            count = maxTriples\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphd6pelva.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798353
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        for( i <- 1 to n ) {\n \
    \           for( j <- 1 to i ) {\n                for( k <- 1 to j ) {\n     \
    \               if( i != j && i != k && j != k ) {\n                        val\
    \ sum = i * i - i + j + k\n                        if( sum % 3 == 0 ) {\n    \
    \                        a(i) = sum\n                            count(sum) =\
    \ 1\n                        }\n                    }\n                }\n   \
    \         }\n        }\n        count(a(0))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp06qvca6t.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp06qvca6t.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp06qvca6t.scala:17:23\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m( i <-\
    \ \e[31m1\e[0m to n ) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798356
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgbg5c7zz.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpgbg5c7zz.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxTriples\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriples is already defined as \e[33mvalue\e[0m \e[35mmaxTriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgbg5c7zz.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxTriple\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriple is already defined as \e[33mvalue\e[0m \e[35mmaxTriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgbg5c7zz.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxTriples\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriples is already defined as \e[33mvalue\e[0m \e[35mmaxTriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgbg5c7zz.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxTriple\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriple is already defined as \e[33mvalue\e[0m \e[35mmaxTriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel"
  stdout: ''
  timestamp: 1659798303
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        for(i <- 0 until n) {\n\
    \            a(i) = i * i - i + 1\n            m += a(i)\n        }\n        val\
    \ res = m.filter(_ % 3 == 0).length\n        a\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdhhuxywc.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdhhuxywc.scala:16:16\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdhhuxywc.scala:17:25\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpdhhuxywc.scala:22:8 ---------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m        a\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e\
    [0m        Found:    (a : Array[Int])\n\e[31m   |\e[0m        Required: Long\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798355
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        for (i <- 0 until n) {\n\
    \            a(i) = i * i - i + 1\n            count(a(i)) = count(a(i)) + 1\n\
    \        }\n        val maxCount = count.max\n        val maxKey = count.keys.max\n\
    \        val maxValue = count.values.max\n        val maxTriples = maxCount *\
    \ maxValue * maxKey\n        return maxTriples\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp71jphmkr.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp71jphmkr.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp71jphmkr.scala:17:26\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798357
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = scala.math.pow(3, n).toInt\n        var i = 0\n        var j\
    \ = 0\n        var k = 0\n        var count = 0\n        while(i < n && j < n\
    \ && k < n) {\n            a(i) = i * i - i + 1\n            i += 1\n        \
    \    j += 1\n            k += 1\n        }\n        while(i < n) {\n         \
    \   a(i) = i * i - i + 1\n            i += 1\n        }\n        while(j < n)\
    \ {\n            a(j) = i * i - i + 1\n            j += 1\n        }\n       \
    \ while(k < n) {\n            a(k) = i * i - i + 1\n            k += 1\n     \
    \   }\n        for(i<-0 until n) {\n            for(j<-0 until n) {\n        \
    \        for(k <- 0 until n) {\n                    if(a(i) + a(j) + a(k) == m)\
    \ {\n                        count += 1\n                    }\n             \
    \   }\n            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi8bxnho8.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi8bxnho8.scala:39:23\
    \ --------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mfor\e[0m(i<-\e\
    [31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpi8bxnho8.scala:40:27 --------------------\e[0m\e[0m\n\e[31m40\
    \ |\e[0m            \e[33mfor\e[0m(j<-\e[31m0\e[0m until n) {\n\e[31m\e[31m  \
    \ |\e[0m                           ^\e[0m\n\e[31m   |\e[0m                   \
    \        Found:    (n : Long)\n\e[31m   |\e[0m                           Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi8bxnho8.scala:41:33\
    \ --------------------\e[0m\e[0m\n\e[31m41 |\e[0m                \e[33mfor\e[0m(k\
    \ <- \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          \
    \       ^\e[0m\n\e[31m   |\e[0m                                 Found:    (n :\
    \ Long)\n\e[31m   |\e[0m                                 Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659798357
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val i = mutable.ArrayBuffer.empty[Int]\n        val j = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val maxTriples = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriple = mutable.ArrayBuffer.empty[Int]\n        val maxTriples\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriple = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriples = mutable.ArrayBuffer.empty[Int]\n        val maxTriple\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriples = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriple = mutable.ArrayBuffer.empty[Int]\n        val maxTriples\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriple = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriples = mutable.ArrayBuffer.empty[Int]\n        val maxTriple\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriples = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriple = mutable.ArrayBuffer.empty[Int]\n        val maxTriples\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriple = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriples = mutable.ArrayBuffer.empty[Int]\n        val maxTriple\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriples = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriple = mutable.ArrayBuffer.empty[Int]\n        val maxTriples\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriple = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriples = mutable.ArrayBuffer.empty[Int]\n        val maxTriple\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriples = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriple = mutable.ArrayBuffer.empty[Int]\n        val maxTriples\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriple = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriples = mutable.ArrayBuffer.empty[Int]\n        val maxTriple\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp9ou3mfw0.scala:50:23 ---------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m        \e[33mval\e[0m \e[36mmaxTriple\e[0m = \n\e[31m\e\
    [31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m                  \
    \     expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp9ou3mfw0.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxTriples\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriples is already defined as \e[33mvalue\e[0m \e[35mmaxTriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9ou3mfw0.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxTriple\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriple is already defined as \e[33mvalue\e[0m \e[35mmaxTriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9ou3mfw0.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mmaxTriples\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriples is already defined as \e[33mvalue\e[0m \e[35mmaxTriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9ou3mfw0.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxTriple\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e"
  stdout: ''
  timestamp: 1659798356
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9v1syy8g.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659798289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        for (i <- 1 to n) {\n\
    \            a(i) = i * i - i + 1\n        }\n        val triples = a.zipWithIndex.filter(_._2\
    \ % 3 == 0)\n        triples.foreach { t =>\n            val i = t._1\n      \
    \      val j = t._2 + 1\n            val k = t._2 + 2\n            val sum = t._1\
    \ + t._2 + t._3\n            if (sum % 3 == 0) {\n                m += i\n   \
    \             m += j\n                m += k\n            }\n        }\n     \
    \   m.length\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp54e3a4u7.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp54e3a4u7.scala:16:16\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp54e3a4u7.scala:17:23\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp54e3a4u7.scala:25:38 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m            \e[33mval\e[0m \e[36msum\e[0m = t._1 + t._2 + t._3\n\e[31m\e[31m\
    \   |\e[0m                                    ^^^^\e[0m\n\e[31m   |\e[0m     \
    \        value _3 is not a member of (Int, Int) - did you mean t._1?\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659798357
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val i = mutable.ArrayBuffer.empty[Int]\n\
    \        val j = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val i = mutable.ArrayBuffer.empty[Int]\n\
    \        val j = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val i = mutable.ArrayBuffer.empty[Int]\n\
    \        val j = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val i = mutable.ArrayBuffer.empty[Int]\n\
    \        val j = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val i = mutable.ArrayBuffer.empty[Int]\n\
    \        val j = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val i = mutable.ArrayBuffer.empty[Int]\n\
    \        val j = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val i = mutable.ArrayBuffer.empty[Int]\n\
    \        val j = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpf9c_e3d0.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpf9c_e3d0.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mk\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mk is already defined as \e[33mvalue\e[0m \e[35mk\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpf9c_e3d0.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpf9c_e3d0.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpf9c_e3d0.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mk\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mk is already defined as \e[33mvalue\e[0m \e[35mk\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpf9c_e3d0.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659798357
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        for (i <- 1 to n) {\n  \
    \          val j = i * i - i + 1\n            val k = i * i + i + j\n        \
    \    if (j > k) {\n                a(i) = j\n                count(j) = count(j)\
    \ + 1\n            } else {\n                a(i) = k\n                count(k)\
    \ = count(k) + 1\n            }\n        }\n        count(a(0))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n  \
    \  assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n\
    \    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmdtu439j.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmdtu439j.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmdtu439j.scala:17:23\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798357
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        for(i <- 1 to n){\n    \
    \        for(j <- 1 to n){\n                for(k <- 1 to n){\n              \
    \      if(i<j && i<k && j<k){\n                        a(i) = i*i - i + 1\n  \
    \                      count(a(i)) = count(a(i)) + (a(i) + a(j) + a(k))\n    \
    \                }\n                }\n            }\n        }\n        count(a(0))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoqxw4fvu.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoqxw4fvu.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoqxw4fvu.scala:17:22\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n){\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m \
    \  |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m         \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpoqxw4fvu.scala:18:26 --------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m            \e[33mfor\e[0m(j <- \e[31m1\e[0m to n){\n\e[31m\e[31m   |\e\
    [0m                          ^\e[0m\n\e[31m   |\e[0m                         \
    \ Found:    (n : Long)\n\e[31m   |\e[0m                          Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoqxw4fvu.scala:19:30\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m                \e[33mfor\e[0m(k\
    \ <- \e[31m1\e[0m to n){\n\e[31m\e[31m   |\e[0m                              ^\e\
    [0m\n\e[31m   |\e[0m                              Found:    (n : Long)\n\e[31m\
    \   |\e[0m                              Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling wi"
  stdout: ''
  timestamp: 1659798358
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var a = Array.ofDim[Int](n)\n\
    \        var count = 0\n        for (i <- 1 to n) {\n            a(i) = i * i\
    \ - i + 1\n        }\n        for (i <- 1 to n) {\n            for (j <- 1 to\
    \ n) {\n                for (k <- 1 to n) {\n                    if (a(i) + a(j)\
    \ + a(k) % 3 == 0) {\n                        count += 1\n                   \
    \ }\n                }\n            }\n        }\n        return count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb_84r7so.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb_84r7so.scala:17:23\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpb_84r7so.scala:20:23 --------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e[31m\e[31m   |\e\
    [0m                       ^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb_84r7so.scala:21:27 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mfor\e[0m (j <- \e[31m1\e[0m to n) {\n\
    \e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m      \
    \                     Found:    (n : Long)\n\e[31m   |\e[0m                  \
    \         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb_84r7so.scala:22:31\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m                \e[33mfor\e[0m\
    \ (k <- \e[31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                          \
    \     ^\e[0m\n\e[31m   |\e[0m                               Found:    (n : Long)\n\
    \e[31m   |\e[0m                               Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explan"
  stdout: ''
  timestamp: 1659798358
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = scala.math.pow(3, n).toInt\n        var i = 0\n        var j\
    \ = 0\n        var k = 0\n        var count = 0\n        while (i < n) {\n   \
    \         a(i) = i * i - i + 1\n            i += 1\n        }\n        val l =\
    \ a.length - 1\n        while (j < l) {\n            while (k < l) {\n       \
    \         if (a(i) + a(k) + a(j) == m) {\n                    count += 1\n   \
    \             }\n                k += 1\n            }\n            j += 1\n \
    \       }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb3xsane7.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798358
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        for (i <- 1 to n) {\n\
    \            a(i) = i * i - i + 1\n        }\n        for (i <- 1 to n) {\n  \
    \          for (j <- 1 to n) {\n                for (k <- 1 to n) {\n        \
    \            if (a(i) + a(j) + a(k)%3 > 0)\n                        m += a(i)\
    \ + a(j) + a(k)\n                }\n            }\n        }\n        m.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3irkb234.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3irkb234.scala:16:16\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3irkb234.scala:17:23\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp3irkb234.scala:20:23 --------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e[31m\e[31m   |\e\
    [0m                       ^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3irkb234.scala:21:27 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mfor\e[0m (j <- \e[31m1\e[0m to n) {\n\
    \e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m      \
    \                     Found:    (n : Long)\n\e[31m   |\e[0m                  \
    \         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E00"
  stdout: ''
  timestamp: 1659798358
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9v1syy8g.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659798289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, \n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwi8rk6cz.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpwi8rk6cz.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxTriples\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriples is already defined as \e[33mvalue\e[0m \e[35mmaxTriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwi8rk6cz.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxTriple\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriple is already defined as \e[33mvalue\e[0m \e[35mmaxTriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwi8rk6cz.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxTriples\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriples is already defined as \e[33mvalue\e[0m \e[35mmaxTriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwi8rk6cz.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxTriple\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriple is already defined as \e[33mvalue\e[0m \e[35mmaxTriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel"
  stdout: ''
  timestamp: 1659798315
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var a = Array.ofDim[Int](n\
    \ + 1)\n        var count = 0\n        for (i <- 1 to n) {\n            a(i) =\
    \ i * i - i + 1\n        }\n        for (i <- 1 to n) {\n            for (j <-\
    \ 1 to n) {\n                for (k <- 1 to n) {\n                    if (a(i)\
    \ + a(j) + a(k) % 3 == 0) {\n                        count += 1\n            \
    \        }\n                }\n            }\n        }\n        count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppte0ljuu.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \                              ^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \              Found:    Long\n\e[31m   |\e[0m                               \
    \  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppte0ljuu.scala:17:23\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmppte0ljuu.scala:20:23 --------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e[31m\e[31m   |\e\
    [0m                       ^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppte0ljuu.scala:21:27 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mfor\e[0m (j <- \e[31m1\e[0m to n) {\n\
    \e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m      \
    \                     Found:    (n : Long)\n\e[31m   |\e[0m                  \
    \         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppte0ljuu.scala:22:31\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m                \e[33mfor\e[0m\
    \ (k <- \e[31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                          \
    \     ^\e[0m\n\e[31m   |\e[0m                               Found:    (n : Long)\n\
    \e[31m   |\e[0m                               Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m lo"
  stdout: ''
  timestamp: 1659798358
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = mutable.HashMap[Long, Long]()\n        val n = mutable.HashMap[Long,\
    \ Long]()\n        val triples = mutable.HashMap[Long, Long]()\n        val maxTriples\
    \ = mutable.HashMap[Long, Long]()\n        val maxTriple = mutable.HashMap[Long,\
    \ Long]()\n        val maxTriples = mutable.HashMap[Long, Long]()\n        val\
    \ maxTriple = mutable.HashMap[Long, Long]()\n        val maxTriples = mutable.HashMap[Long,\
    \ Long]()\n        val maxTriple = mutable.HashMap[Long, Long]()\n        val\
    \ maxTriples = mutable.HashMap[Long, Long]()\n        val maxTriple = mutable.HashMap[Long,\
    \ Long]()\n        val maxTriples = mutable.HashMap[Long, Long]()\n        val\
    \ maxTriple = mutable.HashMap[Long, Long]()\n        val maxTriples = mutable.HashMap[Long,\
    \ Long]()\n        val maxTriple = mutable.HashMap[Long, Long]()\n        val\
    \ maxTriples = mutable.HashMap[Long, Long]()\n        val maxTriple = mutable.HashMap[Long,\
    \ Long]()\n        val maxTriples = mutable.HashMap[Long, Long]()\n        val\
    \ maxTriple = mutable.HashMap[Long, Long]()\n        val maxTriples = mutable.HashMap[Long,\
    \ Long]()\n        val maxTriple = mutable.HashMap[Long, Long]()\n        val\
    \ maxTriples = mutable.HashMap[Long, Long]()\n        val maxTriple = mutable.HashMap[Long,\
    \ Long]()\n        val maxTriples = mutable.HashMap[Long, Long]()\n        val\
    \ maxTriple = mutable.HashMap[Long, Long]()\n        val maxTriples = mutable.HashMap[Long,\
    \ Long]()\n        val maxTriple = mutable.HashMap[Long, Long]()\n        val\
    \ maxTriples = mutable.HashMap[Long, Long]()\n        val maxTriple = mutable.HashMap[Long,\
    \ Long]()\n        val maxTriples = mutable.HashMap[Long, Long]()\n        val\
    \ maxTriple = mutable.HashMap[Long, Long]()\n        val maxTriples = mutable.HashMap[Long,\
    \ Long\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2nf3f93l.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2nf3f93l.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxTriples\e[0m = mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriples is already defined as \e[33mvalue\e[0m \e[35mmaxTriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2nf3f93l.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxTriple\e[0m = mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriple is already defined as \e[33mvalue\e[0m \e[35mmaxTriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2nf3f93l.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxTriples\e[0m = mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriples is already defined as \e[33mvalue\e[0m \e[35mmaxTriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2nf3f93l.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxTriple\e[0m = mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriple is already defined as \e[33mvalue\e[0m \e[35mmaxTriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be"
  stdout: ''
  timestamp: 1659798358
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpj9txdrs1.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpj9txdrs1.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.HashMap[\e[35mInt\e[0m,\
    \ \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpj9txdrs1.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.HashMap[\e[35mInt\e[0m,\
    \ \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpj9txdrs1.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.HashMap[\e[35mInt\e[0m,\
    \ \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpj9txdrs1.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.HashMap[\e[35mInt\e[0m,\
    \ \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpj9txdrs1.scala:22:12 ---------------------------\e"
  stdout: ''
  timestamp: 1659798303
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length - 1\n        val n = a.length - 1\n        val m = a.length\
    \ - 1\n        val n = a.length - 1\n        val m = a.length - 1\n        val\
    \ n = a.length - 1\n        val m = a.length - 1\n        val n = a.length - 1\n\
    \        val m = a.length - 1\n        val n = a.length - 1\n        val m = a.length\
    \ - 1\n        val n = a.length - 1\n        val m = a.length - 1\n        val\
    \ n = a.length - 1\n        val m = a.length - 1\n        val n = a.length - 1\n\
    \        val m = a.length - 1\n        val n = a.length - 1\n        val m = a.length\
    \ - 1\n        val n = a.length - 1\n        val m = a.length - 1\n        val\
    \ n = a.length - 1\n        val m = a.length - 1\n        val n = a.length - 1\n\
    \        val m = a.length - 1\n        val n = a.length - 1\n        val m = a.length\
    \ - 1\n        val n = a.length - 1\n        val m = a.length - 1\n        val\
    \ n = a.length - 1\n        val m = a.length - 1\n        val n = a.length - 1\n\
    \        val m = a.length - 1\n        val n = a.length - 1\n        val m = a.length\
    \ - 1\n        val n = a.length - 1\n        val m = a.length - 1\n        val\
    \ n = a.length - 1\n        val m = a.length - 1\n        val n = a.length - 1\n\
    \        val m = a.length - 1\n        val n = a.length - 1\n        val m = a.length\
    \ - 1\n        val n = a.length - 1\n        val m = a.length - 1\n        val\
    \ n = a.length - 1\n        val m = a.length - 1\n        val n = a.length - 1\n\
    \        val m = a.length - 1\n        val n = a.length - 1\n        val m = a.length\
    \ - 1\n        val n = a.length - 1\n        val m = a.length - 1\n        val\
    \ n = a.length - 1\n        val m = a.length - 1\n        val n = a.length - 1\n\
    \        val m = a.length - 1\n        val n = a.length - 1\n        val m = a.length\
    \ - 1\n        val n = a.length - 1\n        val m = a.length - 1\n        val\
    \ n = a.length - 1\n        val m = a.length - 1\n        val n = a.length - 1\n\
    \        val m = a.length - 1\n        val n = a.length - 1\n        val m = a.length\
    \ - 1\n        val n = a.length - 1\n        val m = a.length - 1\n        val\
    \ n = a.length - 1\n        val m = a.length - 1\n        val n = a.\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptnk5g3a6.scala:88:4 ----------------------------\e\
    [0m\e[0m\n\e[31m88 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmptnk5g3a6.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = a.length - \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined\
    \ as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmptnk5g3a6.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = a.length - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn\
    \ is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptnk5g3a6.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mm\e[0m = a.length - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmptnk5g3a6.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = a.length - \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined\
    \ as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmptnk5g3a6.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = a.length - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm\
    \ is already de"
  stdout: ''
  timestamp: 1659798358
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val s = mutable.HashMap[Int, Int]()\n        val t = mutable.HashMap[Int,\
    \ Int]()\n        val r = mutable.HashMap[Int, Int]()\n        val p = mutable.HashMap[Int,\
    \ Int]()\n        val q = mutable.HashMap[Int, Int]()\n        val r = mutable.HashMap[Int,\
    \ Int]()\n        val s = mutable.HashMap[Int, Int]()\n        val t = mutable.HashMap[Int,\
    \ Int]()\n        val p = mutable.HashMap[Int, Int]()\n        val q = mutable.HashMap[Int,\
    \ Int]()\n        val r = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val s = mutable.HashMap[Int,\
    \ Int]()\n        val t = mutable.HashMap[Int, Int]()\n        val p = mutable.HashMap[Int,\
    \ Int]()\n        val q = mutable.HashMap[Int, Int]()\n        val r = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val s = mutable.HashMap[Int, Int]()\n        val t = mutable.HashMap[Int,\
    \ Int]()\n        val p = mutable.HashMap[Int, Int]()\n        val q = mutable.HashMap[Int,\
    \ Int]()\n        val r = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val s = mutable.HashMap[Int,\
    \ Int]()\n        val t = mutable.HashMap[Int, Int]()\n        val p = mutable.HashMap[Int,\
    \ Int]()\n        val q = mutable.HashMap[Int, Int]()\n        val r = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val s = mutable.HashMap[Int, Int]()\n        val t = mutable.HashMap[Int,\
    \ Int]()\n        val p = mutable.HashMap[\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_er6jit2.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp_er6jit2.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = mutable.HashMap[\e[35mInt\e[0m,\
    \ \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mr is already defined as \e[33mvalue\e[0m \e[35mr\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp_er6jit2.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36ms\e[0m = mutable.HashMap[\e[35mInt\e[0m,\
    \ \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0ms is already defined as \e[33mvalue\e[0m \e[35ms\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp_er6jit2.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mt\e[0m = mutable.HashMap[\e[35mInt\e[0m,\
    \ \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mt is already defined as \e[33mvalue\e[0m \e[35mt\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp_er6jit2.scala:26:12 ---------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mval\e[0m \e[36mp\e[0m = mutable.HashMap[\e[35mInt\e[0m,\
    \ \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mp is already defined as \e[33mvalue\e[0m \e[35mp\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp_er6jit2.scala:27:12 ---------------------------\e"
  stdout: ''
  timestamp: 1659798358
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        for(i<-0 until n){\n   \
    \         val j = i*i - i + 1\n            val k = i*i + i + j\n            if(i<j\
    \ && i<k && j<k){\n                a(i) = i\n                count(i) = count(i)\
    \ + 1\n            }\n        }\n        count.filter(_._2 > 1).length\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_zj4c_m6.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_zj4c_m6.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_zj4c_m6.scala:17:23\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i<-\e\
    [31m0\e[0m until n){\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m\
    \   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m       \
    \                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798358
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var triples = 0\n       \
    \ var a = Array.ofDim[Int](n + 1)\n        a(0) = 1\n        a(1) = 1\n      \
    \  a(2) = 1\n        a(3) = 1\n        a(4) = 1\n        for(i <- 0 until n){\n\
    \            for(j <- 0 until i){\n                for(k <- 0 until j){\n    \
    \                if(i+j+k == 3){\n                        triples += 1\n     \
    \               }\n                }\n            }\n        }\n        return\
    \ triples\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9s5u42pt.scala:16:33\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \                              ^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \              Found:    Long\n\e[31m   |\e[0m                               \
    \  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9s5u42pt.scala:22:25\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n){\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798360
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgbg5c7zz.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpgbg5c7zz.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxTriples\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriples is already defined as \e[33mvalue\e[0m \e[35mmaxTriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgbg5c7zz.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxTriple\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriple is already defined as \e[33mvalue\e[0m \e[35mmaxTriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgbg5c7zz.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxTriples\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriples is already defined as \e[33mvalue\e[0m \e[35mmaxTriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgbg5c7zz.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxTriple\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriple is already defined as \e[33mvalue\e[0m \e[35mmaxTriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel"
  stdout: ''
  timestamp: 1659798303
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val i = mutable.ArrayBuffer.empty[Int]\n        val j = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val triples = mutable.ArrayBuffer.empty[Int]\n\
    \        val triple = mutable.ArrayBuffer.empty[Int]\n        val triples = mutable.ArrayBuffer.empty[Int]\n\
    \        val triple = mutable.ArrayBuffer.empty[Int]\n        val triples = mutable.ArrayBuffer.empty[Int]\n\
    \        val triple = mutable.ArrayBuffer.empty[Int]\n        val triples = mutable.ArrayBuffer.empty[Int]\n\
    \        val triple = mutable.ArrayBuffer.empty[Int]\n        val triples = mutable.ArrayBuffer.empty[Int]\n\
    \        val triple = mutable.ArrayBuffer.empty[Int]\n        val triples = mutable.ArrayBuffer.empty[Int]\n\
    \        val triple = mutable.ArrayBuffer.empty[Int]\n        val triples = mutable.ArrayBuffer.empty[Int]\n\
    \        val triple = mutable.ArrayBuffer.empty[Int]\n        val triples = mutable.ArrayBuffer.empty[Int]\n\
    \        val triple = mutable.ArrayBuffer.empty[Int]\n        val triples = mutable.ArrayBuffer.empty[Int]\n\
    \        val triple = mutable.ArrayBuffer.empty[Int]\n        val triples = mutable.ArrayBuffer.empty[Int]\n\
    \        val triple = mutable.ArrayBuffer.empty[Int]\n        val triples = mutable.ArrayBuffer.empty[Int]\n\
    \        val triple = mutable.ArrayBuffer.empty[Int]\n        val triples = mutable.ArrayBuffer.empty[Int]\n\
    \        val triple = mutable.ArrayBuffer.empty[Int]\n        val triples = mutable.ArrayBuffer.empty[Int]\n\
    \        val triple = mutable.ArrayBuffer.empty[Int]\n        val triples = mutable.ArrayBuffer.empty[Int]\n\
    \        val triple = mutable.ArrayBuffer.empty[Int]\n        val triples = mutable.ArrayBuffer.empty[Int]\n\
    \        val triple = mutable.ArrayBuffer.empty[Int]\n        val triples = mutable.ArrayBuffer.empty[Int]\n\
    \        val triple = mutable.ArrayBuffer.empty[Int]\n        val triples = mutable.ArrayBuffer.empty[Int]\n\
    \        val triple = mutable.ArrayBuffer.empty[Int]\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7jq3ktzg.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mtriples\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtriples is already defined as \e[33mvalue\e[0m \e[35mtriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7jq3ktzg.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mtriple\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtriple is already defined as \e[33mvalue\e[0m \e[35mtriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7jq3ktzg.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mtriples\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtriples is already defined as \e[33mvalue\e[0m \e[35mtriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7jq3ktzg.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mtriple\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtriple is already defined as \e[33mvalue\e[0m \e[35mtriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7jq3ktzg.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mtriples\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m      "
  stdout: ''
  timestamp: 1659798364
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        for (i <- 0 until n) {\n\
    \            a(i) = i * i - i + 1\n            val triples = a.filter(_ > 0).filter(_\
    \ < i).filter(_ < i + 1)\n            count += triples.map(t => (t, triples.count(_\
    \ == t)))\n        }\n        count.values.toList.max\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp55bks5yw.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp55bks5yw.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp55bks5yw.scala:17:26\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798364
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9v1syy8g.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659798289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9v1syy8g.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659798289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9v1syy8g.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659798289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var a = new Array[Long](n)\n\
    \        var count = 0\n        var i = 0\n        var j = 0\n        var k =\
    \ 0\n        while(i < n) {\n            a(i) = i * i - i + 1\n            i +=\
    \ 1\n        }\n        while(j < n) {\n            a(j) = i * i - j + 1\n   \
    \         j += 1\n        }\n        while(k < n) {\n            a(k) = i * i\
    \ - k + 1\n            k += 1\n        }\n        for(i = 1; i < n; i++) {\n \
    \           for(j = 1; j < n; j++) {\n                for(k = 1; k < n; k++) {\n\
    \                    if(a(i) + a(j) + a(k) % 3 == 0) {\n                     \
    \   count += 1\n                    }\n                }\n            }\n    \
    \    }\n        return count\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdmskldkm.scala:32:14 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mfor\e[0m(i = \e[31m1\e[0m; i < n; i++)\
    \ {\n\e[31m\e[31m   |\e[0m              ^\e[0m\n\e[31m   |\e[0m              ')'\
    \ expected, but '=' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdmskldkm.scala:32:24\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mfor\e[0m(i\
    \ = \e[31m1\e[0m; i < n; i++) {\n\e[31m\e[31m   |\e[0m                       \
    \ ^\e[0m\n\e[31m   |\e[0m                        '<-' expected, but ';' found\n\
    \e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpdmskldkm.scala:32:29 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mfor\e[0m(i = \e[31m1\e[0m; i < n; i++)\
    \ {\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m\
    \                             pattern expected\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpdmskldkm.scala:15:32 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36ma\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                \
    \                ^\e[0m\n\e[31m   |\e[0m                                Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdmskldkm.scala:32:17\
    \ ------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mfor\e[0m(i\
    \ = \e[31m1\e[0m; i < n; i++) {\n\e[31m\e[31m   |\e[0m                 ^\e[0m\n\
    \e[31m   |\e[0mvalue foreach is not a member of Null, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.l"
  stdout: ''
  timestamp: 1659798365
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val result = mutable.ArrayBuffer.empty[Int]\n        val max = 0\n  \
    \      val min = 0\n        for(i <- 1 to n){\n            val x = i * i - i +\
    \ 1\n            val y = a(i) + a(i) + a(i)\n            val z = a(i) + a(i) +\
    \ a(i) + a(i)\n            val z = a(i) + a(i) + a(i) + a(i) + a(i)\n        \
    \    val z = a(i) + a(i) + a(i) + a(i) + a(i) + a(i)\n            val z = a(i)\
    \ + a(i) + a(i) + a(i) + a(i) + a(i) + a(i)\n            val z = a(i) + a(i) +\
    \ a(i) + a(i) + a(i) + a(i) + a(i) + a(i)\n            val z = a(i) + a(i) + a(i)\
    \ + a(i) + a(i) + a(i) + a(i) + a(i) + a(i)\n            val z = a(i) + a(i) +\
    \ a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i)\n            val z = a(i)\
    \ + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i)\n    \
    \        val z = a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i)\
    \ + a(i) + a(i) + a(i)\n            val z = a(i) + a(i) + a(i) + a(i) + a(i) +\
    \ a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) +\
    \ a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) +\
    \ a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) +\
    \ a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) +\
    \ a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) +\
    \ a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n  \
    \  assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n\
    \    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpn_prznuf.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpn_prznuf.scala:41:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m41 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpn_prznuf.scala:15:33 --------------------\e[0m\e[0m\n\
    \e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = Array.ofDim[\e[35mInt\e[0m](n)\n\
    \e[31m\e[31m   |\e[0m                                 ^\e[0m\n\e[31m   |\e[0m\
    \                                 Found:    (n : Long)\n\e[31m   |\e[0m      \
    \                           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpn_prznuf.scala:16:21 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpn_prznuf.scala:19:22 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn_prznuf.scala:23:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e\
    [0m \e[36mz\e[0m = a(i) + a(i) + a(i) + a(i) + a(i)\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mz is already\
    \ defined as \e[33mvalue\e[0m \e[35mz\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E"
  stdout: ''
  timestamp: 1659798366
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        for (i <- 1 to n) {\n\
    \            a(i) = i * i - i + 1\n        }\n        val n = a.length\n     \
    \   for (i <- 1 to n - 1) {\n            for (j <- i + 1 to n) {\n           \
    \     for (k <- j + 1 to n) {\n                    if (a(i) + a(j) + a(k) % 3\
    \ == 0) {\n                        m += (i + j + k)\n                    }\n \
    \               }\n            }\n        }\n        m.length\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n  \
    \  assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n\
    \    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmprwe97a9b.scala:20:16 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = a.length\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmprwe97a9b.scala:16:16 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798363
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        for (i <- 0 until n)\
    \ {\n            a(i) = i * i - i + 1\n        }\n        for (i <- 0 until n)\
    \ {\n            for (j <- 0 until n) {\n                for (k <- 0 until n)\
    \ {\n                    if (a(i) + a(j) + a(k)%3==0) {\n                    \
    \    m += (i+j+k)\n                    }\n                }\n            }\n \
    \       }\n        m.length\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmputkvpw_6.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmputkvpw_6.scala:16:16\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmputkvpw_6.scala:17:26\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmputkvpw_6.scala:20:26 --------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) {\n\e[31m\e\
    [31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m               \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                          Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmputkvpw_6.scala:21:30\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mfor\e[0m (j\
    \ <- \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          \
    \    ^\e[0m\n\e[31m   |\e[0m                              Found:    (n : Long)\n\
    \e[31m   |\e[0m                              Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compili"
  stdout: ''
  timestamp: 1659798367
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[In\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1edppdlh.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1edppdlh.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mtriples\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mtriples is already defined as \e[33mvalue\e[0m \e[35mtriples\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp1edppdlh.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mtriple\e[0m = mutable.Map[\e[35mInt\e[0m,\
    \ \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtriple is already defined as \e[33mvalue\e[0m \e[35mtriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1edppdlh.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mtriples\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtriples is already defined as \e[33mvalue\e[0m \e[35mtriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1edppdlh.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mtriple\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtriple is already defined as \e[33mvalue\e[0m \e[35mtriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1ed"
  stdout: ''
  timestamp: 1659798290
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9v1syy8g.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9v1syy8g.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659798289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val m = a.length\n        val result = new mutable.HashMap[Int, Int]()\n\
    \        val triples = mutable.HashMap[Int, Int]()\n        val triple = mutable.HashMap[Int,\
    \ Int]()\n        val triple2 = mutable.HashMap[Int, Int]()\n        val triple3\
    \ = mutable.HashMap[Int, Int]()\n        val triple4 = mutable.HashMap[Int, Int]()\n\
    \        val triple5 = mutable.HashMap[Int, Int]()\n        val triple6 = mutable.HashMap[Int,\
    \ Int]()\n        val triple7 = mutable.HashMap[Int, Int]()\n        val triple8\
    \ = mutable.HashMap[Int, Int]()\n        val triple9 = mutable.HashMap[Int, Int]()\n\
    \        val triple10 = mutable.HashMap[Int, Int]()\n        val triple11 = mutable.HashMap[Int,\
    \ Int]()\n        val triple12 = mutable.HashMap[Int, Int]()\n        val triple13\
    \ = mutable.HashMap[Int, Int]()\n        val triple14 = mutable.HashMap[Int, Int]()\n\
    \        val triple15 = mutable.HashMap[Int, Int]()\n        val triple16 = mutable.HashMap[Int,\
    \ Int]()\n        val triple17 = mutable.HashMap[Int, Int]()\n        val triple18\
    \ = mutable.HashMap[Int, Int]()\n        val triple19 = mutable.HashMap[Int, Int]()\n\
    \        val triple20 = mutable.HashMap[Int, Int]()\n        val triple21 = mutable.HashMap[Int,\
    \ Int]()\n        val triple22 = mutable.HashMap[Int, Int]()\n        val triple23\
    \ = mutable.HashMap[Int, Int]()\n        val triple24 = mutable.HashMap[Int, Int]()\n\
    \        val triple25 = mutable.HashMap[Int, Int]()\n        val triple26 = mutable.HashMap[Int,\
    \ Int]()\n        val triple27 = mutable.HashMap[Int, Int]()\n        val triple28\
    \ = mutable.HashMap[Int, Int]()\n        val triple29 = mutable.HashMap[Int, Int]()\n\
    \        val triple30 = mutable.HashMap[Int, Int]()\n        val triple31 = mutable.HashMap[Int,\
    \ Int]()\n        val triple32 = mutable.HashMap[Int, Int]()\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg0i91229.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg0i91229.scala:17:25\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpg0i91229.scala:18:22 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mtriples\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpg0i91229.scala:19:21 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mtriple\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpg0i91229.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mtriple2\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006"
  stdout: ''
  timestamp: 1659798365
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var a = Array.ofDim[Int](n);\n\
    \        var cnt = 0\n        for(i<- 1 to n-1){\n            for(j <- i+1 to\
    \ n-1){\n                for(k <- j+1 to n-1){\n                    if(i+j+k ==\
    \ n){\n                        cnt += 1\n                    }\n             \
    \   }\n            }\n        }\n        cnt\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc0np02w8.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n);\n\e[31m\e[31m   |\e[0m                 \
    \                ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc0np02w8.scala:17:21\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i<- \e\
    [31m1\e[0m to n-\e[31m1\e[0m){\n\e[31m\e[31m   |\e[0m                     ^^^\e\
    [0m\n\e[31m   |\e[0m                     Found:    Long\n\e[31m   |\e[0m     \
    \                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpc0np02w8.scala:18:28 --------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m            \e[33mfor\e[0m(j <- i+\e[31m1\e[0m to n-\e[31m1\e[0m){\n\e\
    [31m\e[31m   |\e[0m                            ^^^\e[0m\n\e[31m   |\e[0m     \
    \                       Found:    Long\n\e[31m   |\e[0m                      \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc0np02w8.scala:19:32\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m                \e[33mfor\e[0m(k\
    \ <- j+\e[31m1\e[0m to n-\e[31m1\e[0m){\n\e[31m\e[31m   |\e[0m               \
    \                 ^^^\e[0m\n\e[31m   |\e[0m                                Found:\
    \    Long\n\e[31m   |\e[0m                                Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659798366
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var i = 0\n        var j\
    \ = 0\n        var k = 0\n        var count = 0\n        var a = Array.ofDim[Int](n)\n\
    \        for(i <- 0 until n){\n            a(i) = i * i - i + 1\n        }\n \
    \       for(i <- 0 until n){\n            for(j <- 0 until n){\n             \
    \   for(k <- 0 until n){\n                    if(i<j && j<k){\n              \
    \          if(a(i) + a(j) + a(k) == 3){\n                            count +=\
    \ 1\n                        }\n                    }\n                }\n   \
    \         }\n        }\n        return count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6vd81vdy.scala:19:33\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6vd81vdy.scala:20:25\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n){\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp6vd81vdy.scala:23:25 --------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n){\n\e[31m\e\
    [31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m                \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                         Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6vd81vdy.scala:24:29\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mfor\e[0m(j\
    \ <- \e[31m0\e[0m until n){\n\e[31m\e[31m   |\e[0m                           \
    \  ^\e[0m\n\e[31m   |\e[0m                             Found:    (n : Long)\n\e\
    [31m   |\e[0m                             Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp6vd81vdy.scala:25:33 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                \e[33mfor\e[0m(k <- \e[31m0\e[0m until\
    \ n){\n\e[31m\e[31m   |\e[0m                                 ^\e[0m\n\e[31m  \
    \ |\e[0m                                 Found:    (n : Long)\n\e[31m   |\e[0m\
    \                                 Required: Int\n\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1659798367
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var max = 0\n        var\
    \ a = new Array[Long](n)\n        for(i <- 0 until n) {\n            a(i) = i\
    \ * i - i + 1\n        }\n        for(i <- 0 until n) {\n            for(j <-\
    \ 0 until n) {\n                for(k <- 0 until n) {\n                    if(i+j+k\
    \ > max && a(i) + a(j) + a(k) % 3 == 0) {\n                        max = a(i)\
    \ + a(j) + a(k) % 3\n                    }\n                }\n            }\n\
    \        }\n        return max\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsau0y199.scala:16:32\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e\
    [0m                                ^\e[0m\n\e[31m   |\e[0m                   \
    \             Found:    (n : Long)\n\e[31m   |\e[0m                          \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsau0y199.scala:17:25\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpsau0y199.scala:20:25 --------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n) {\n\e[31m\e\
    [31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m                \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                         Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsau0y199.scala:21:29\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mfor\e[0m(j\
    \ <- \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          \
    \   ^\e[0m\n\e[31m   |\e[0m                             Found:    (n : Long)\n\
    \e[31m   |\e[0m                             Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsau0y199.scala:22:33 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mfor\e[0m(k <- \e[31m0\e[0m until\
    \ n) {\n\e[31m\e[31m   |\e[0m                                 ^\e[0m\n\e[31m \
    \  |\e[0m                                 Found:    (n : Long)\n\e[31m   |\e[0m\
    \                                 Required:"
  stdout: ''
  timestamp: 1659798367
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var a = Array.ofDim[Int](n+1)\n\
    \        a(0) = 1\n        a(1) = 1\n        a(2) = 1\n        \n        var i\
    \ = 0\n        var j = 0\n        var k = 0\n        var count = 0\n        \n\
    \        while(i < n) {\n            while(j < n) {\n                while(k <n)\
    \ {\n                    if(i+j+k == n+1) {\n                        count +=\
    \ 1\n                    }\n                    k += 1\n                }\n  \
    \              j += 1\n            }\n            i += 1\n        }\n        \n\
    \        return count\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpk8317h82.scala:27:24 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                \e[33mwhile\e[0m(k <n) {\n\e[31m\e[31m\
    \   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m                    \
    \    ')' expected, but $XMLSTART$< found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpk8317h82.scala:15:33 --------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mvar\e[0m \e[36ma\e[0m = Array.ofDim[\e[35mInt\e[0m](n+\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                 ^^^\e[0m\n\e\
    [31m   |\e[0m                                 Found:    Long\n\e[31m   |\e[0m\
    \                                 Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpk8317h82.scala:27:22 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                \e[33mwhile\e[0m(k <n) {\n\e[31m\e[31m\
    \   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                      Found:\
    \    (k : Int)\n\e[31m   |\e[0m                      Required: Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659798367
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val count = mutable.Map[Long, Long]()\n        for( i <- 1 to n ) {\n\
    \            val j = i * i - i + 1\n            val k = i * i + j\n          \
    \  if( j > k ) {\n                val tmp = j\n                j = k\n       \
    \         k = tmp\n            }\n            if( j % 3 == 0 ) {\n           \
    \     a(i) = j\n                count(k) = count(k) + 1\n            }\n     \
    \   }\n        count(0)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvybrnlxi.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvybrnlxi.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvybrnlxi.scala:17:23\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m( i <-\
    \ \e[31m1\e[0m to n ) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error:\
    \ /tmp/tmpvybrnlxi.scala:22:18 -----------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m                j = k\n\e[31m\e[31m   |\e[0m                ^^^^^\e[0m\n\
    \e[31m   |\e[0m                Reassignment to val j\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmpvybrnlxi.scala:23:18 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                k = tmp\n\e[31m\e[31m   |\e[0m      \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to val k\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659798367
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        var count = 0\n        for(i<-0 until n){\n            for(j<-0 until\
    \ n){\n                for(k <- 0 until n){\n                    if(i<j && i<k\
    \ && j<k){\n                        a(i) = i*i - i + 1\n                     \
    \   a(j) = i*i - j + 1\n                        a(k) = i*i - k + 1\n         \
    \               if(a(i) + a(j) + a(k) % 3 == 0){\n                           \
    \ count += 1\n                        }\n                    }\n             \
    \   }\n            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl5f6qrd_.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl5f6qrd_.scala:17:23\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i<-\e\
    [31m0\e[0m until n){\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m\
    \   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m       \
    \                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpl5f6qrd_.scala:18:27 --------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m            \e[33mfor\e[0m(j<-\e[31m0\e[0m until n){\n\e[31m\e[31m   |\e\
    [0m                           ^\e[0m\n\e[31m   |\e[0m                        \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                           Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl5f6qrd_.scala:19:33\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m                \e[33mfor\e[0m(k\
    \ <- \e[31m0\e[0m until n){\n\e[31m\e[31m   |\e[0m                           \
    \      ^\e[0m\n\e[31m   |\e[0m                                 Found:    (n :\
    \ Long)\n\e[31m   |\e[0m                                 Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659798367
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        for (i <- 0 until n) {\n            a(i) = i * i - i + 1\n \
    \       }\n        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n\
    \                for (k <- 0 until n) {\n                    if (a(i) + a(j) +\
    \ a(k)%3 == 0) {\n                        val triple = (a(i), a(j), a(k))\n  \
    \                      val tripleCount = count(triple) + 1\n                 \
    \       count(triple) = tripleCount\n                        if (tripleCount >\
    \ maxTriples(triple)) {\n                            maxTriples(triple) = tripleCount\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n        count(a(0))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpadorw30t.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpadorw30t.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpadorw30t.scala:17:25\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxTriples\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpadorw30t.scala:18:26 --------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e\
    [0m                          ^\e[0m\n\e[31m   |\e[0m                         \
    \ Found:    (n : Long)\n\e[31m   |\e[0m                          Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpadorw30t.scala:21:26\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain"
  stdout: ''
  timestamp: 1659798367
