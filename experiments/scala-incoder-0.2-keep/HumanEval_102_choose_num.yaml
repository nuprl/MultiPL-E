name: HumanEval_102_choose_num
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // This function takes two positive numbers x and y and returns the\n    //\
  \ biggest even integer number that is in the range [x, y] inclusive. If \n    //\
  \ there's no such number, then the function should return -1.\n    // For example:\n\
  \    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n    def chooseNum(x\
  \ : Long, y : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
  \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
  \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n \
  \   assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
  \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
  \ (546l)) == (546l));\n    }\n\n}\n"
completions: ["        val evens = mutable.ListBuffer[Long]()\n        val odds =\
    \ mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n        for (i\
    \ <- range) {\n            if (i % 2 == 0) {\n                evens += i\n   \
    \         } else {\n                odds += i\n            }\n        }\n    \
    \    val even = evens.max\n        val odd = odds.max\n        if (even > odd)\
    \ {\n            return even\n        } else {\n            return -1\n      \
    \  }", "        val evens = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n\
    \        val range = Range(x, y)\n        for (i <- range) {\n            if (i\
    \ % 2 == 0) {\n                evens += i\n            } else {\n            \
    \    odds += i\n            }\n        }\n        val even = evens.max\n     \
    \   val odd = odds.max\n        if (even > odd) {\n            return even\n \
    \       } else {\n            return -1\n        }", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x - y).abs\
    \ \n        val evenRange = range.filter(_ % 2 == 0)\n        val oddRange = range.filter(_\
    \ % 2 != 0)\n        evenRange foreach { x => evens += x }\n        oddRange foreach\
    \ { x => odds += x }\n        val evens = evens.toList\n        val odds = odds.toList\n\
    \        val evensSize = evens.size\n        val oddsSize = odds.size\n      \
    \  val maxEven = evens.max\n        val maxOdd = odds.max\n        if (evensSize\
    \ == 0 || oddsSize == 0) {\n            return -1\n        }\n        if (evensSize\
    \ == 1) {\n            return maxEven\n        }\n        if (oddsSize == 1) {\n\
    \            return maxOdd\n        }\n        if (evensSize > oddsSize) {\n \
    \           return maxEven\n        }\n        return maxOdd", "        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (x - y).abs \n        for (i <- 1 to range) {\n         \
    \   if (i % 2 == 0) {\n                evens += i\n            } else {\n    \
    \            odds += i\n            }\n        }\n        val even = evens.max\n\
    \        val odd = odds.max\n        if (even > odd) {\n            return even\n\
    \        } else {\n            return -1\n        }", "        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val range = Range(x, y)\n   \
    \     range.foreach { x =>\n            if (x % 2 == 0) {\n                evens\
    \ += x\n            } else {\n                odds += x\n            }\n     \
    \   }\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ > odd) {\n            return even\n        } else {\n            return -1\n\
    \        }", "        val evens = x until y by 2\n        val evensCount = evens.count(_\
    \ % 2 == 0)\n        if (evensCount == 0) {\n            return -1\n        }\n\
    \        val maxEven = evens.max\n        if (maxEven % 2 == 0) {\n          \
    \  return maxEven\n        } else {\n            return -1\n        }", "    \
    \    val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        for(i <- x until y){\n            if(i%2 == 0){\n                evens\
    \ += i\n            }else{\n                odds += i\n            }\n       \
    \ }\n        val even = evens.max\n        val odd = odds.max\n        if(even\
    \ > odd){\n            return even\n        }else{\n            return odd\n \
    \       }", "        val evens = mutable.ListBuffer[Long]()\n        val odds\
    \ = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n        for (i\
    \ <- range) {\n            if (i % 2 == 0) {\n                evens += i\n   \
    \         } else {\n                odds += i\n            }\n        }\n    \
    \    val even = evens.max\n        val odd = odds.max\n        if (even > odd)\
    \ {\n            return even\n        } else {\n            return -1\n      \
    \  }", "        val evens = mutable.ListBuffer[Long]()\n        for (i <- x until\
    \ y) {\n            if (i % 2 == 0) {\n                evens += i\n          \
    \  }\n        }\n        if (evens.isEmpty) {\n            return -1\n       \
    \ }\n        val maxEven = evens.max\n        if (maxEven % 2 == 0) {\n      \
    \      return maxEven\n        }\n        return -1", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x to y).filter(_\
    \ % 2 == 0)\n        range.foreach(x => x match {\n            case x if x % 2\
    \ == 0 => evens += x\n            case x if x % 2 != 0 => odds += x\n        })\n\
    \        val even = evens.max\n        val odd = odds.max\n        if (even >\
    \ odd) even else odd", "        var max = 0\n        var min = 0\n        for(i\
    \ <- 1 to y){\n            for(j <- 1 to x){\n                if(j % 2 == 0 &&\
    \ j > max){\n                    max = j\n                }\n                if(j\
    \ % 2 == 0 && j < min){\n                    min = j\n                }\n    \
    \        }\n        }\n        if(max > min){\n            return max\n      \
    \  }\n        return -1", "        val evens = mutable.Set[Long]()\n        val\
    \ odds = mutable.Set[Long]()\n        val range = Range(x, y)\n        range.foreach\
    \ { x =>\n            if (x % 2 == 0) {\n                evens += x\n        \
    \    } else {\n                odds += x\n            }\n        }\n        if\
    \ (evens.isEmpty) {\n            return -1\n        }\n        if (evens.size\
    \ == 1) {\n            return evens.head\n        }\n        if (evens.size ==\
    \ 2) {\n            return evens.head + evens.last\n        }\n        val even\
    \ = evens.head\n        val odd = odds.head\n        val evens = evens.tail\n\
    \        val odds = odds.tail\n        val range = Range(even, odd)\n        range.foreach\
    \ { x =>\n            if (x % 2 == 0) {\n                evens += x\n        \
    \    } else {\n                odds += x\n            }\n        }\n        if\
    \ (evens.isEmpty) {\n            return -1\n        }\n        if (evens.size\
    \ == 1) {\n            return evens.head\n        }\n        if (evens.size ==\
    \ 2) {\n            return evens.head + evens.last\n        }\n        val even\
    \ = evens.head\n        val odd = odds.head\n        val evens = evens.tail\n\
    \        val odds = odds.tail\n        val range = Range(even, odd)\n        range.foreach\
    \ { x =>\n            if (x % 2 == 0) {\n                evens += x\n        \
    \    } else {\n                odds += x\n            }\n        }\n        if\
    \ (evens.isEmpty) {\n            return -1\n        }\n        if (evens.size\
    \ == 1) {\n            return evens.head\n        }\n        if (evens.size ==\
    \ 2) {\n            return evens.head + evens.last\n        }\n        val even\
    \ = evens.head\n        val odd = odds.head\n        val evens = evens.tail\n\
    \        val odds = odds.tail\n        val range = Range(even, odd)\n        range.foreach\
    \ { x =>\n            if (x % 2 == 0) {\n                evens += x\n        \
    \    } else {\n                odds += x\n            }\n        }\n        if\
    \ (evens.isEmpty) {\n            return -1\n        }\n        if (evens.size\
    \ == 1) {\n            return evens.head\n        }\n        if (evens.size ==\
    \ 2) {\n            return evens.head + evens.last\n        }\n        val even\
    \ = evens.head\n        val odd = odds.head\n        val evens = evens.tail\n\
    \        val odds = odds.tail\n        val range = Range(even, odd)\n        range.foreach\
    \ { x =>\n            if (x % 2 == 0) {\n                evens += x\n        \
    \    } else {\n                odds += x\n            }\n        }\n        if\
    \ (evens.isEmpty", "        val evens = mutable.ListBuffer[Long]()\n        val\
    \ odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n       \
    \ range.foreach(x => if (x % 2 == 0) evens += x; else odds += x)\n        val\
    \ even = evens.max\n        val odd = odds.max\n        if (even < odd) even else\
    \ -1", "        var even = 0\n        var odd = 0\n        var result = -1\n \
    \       while (even < x && odd < y) {\n            if (x % 2 == 0 && y % 2 ==\
    \ 0) {\n                result = x\n                even = x + 1\n           \
    \ } else if (x % 2 == 0 && y % 2 != 0) {\n                result = y\n       \
    \         odd = y + 1\n            } else if (x % 2 != 0 && y % 2 == 0) {\n  \
    \              result = x\n                even = x + 1\n            } else {\n\
    \                result = y\n                odd = y + 1\n            }\n    \
    \    }\n        result", "        val evens = mutable.ListBuffer[Long]()\n   \
    \     val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        range.foreach(x => {\n            if (x % 2 == 0) {\n               \
    \ evens += x\n            } else {\n                odds += x\n            }\n\
    \        })\n        val even = evens.max\n        val odd = odds.max\n      \
    \  if (even > odd) {\n            return even\n        } else {\n            return\
    \ -1\n        }", "        val evens = mutable.ListBuffer[Long]()\n        val\
    \ odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n       \
    \ range.foreach { x =>\n            if (x % 2 == 0) {\n                evens +=\
    \ x\n            } else {\n                odds += x\n            }\n        }\n\
    \        val even = evens.max\n        val odd = odds.max\n        if (even >\
    \ odd) {\n            return even\n        } else {\n            return -1\n \
    \       }", "        val evens = mutable.ListBuffer[Long]()\n        val odds\
    \ = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n        for (i\
    \ <- range) {\n            if (i % 2 == 0) {\n                evens += i\n   \
    \         } else {\n                odds += i\n            }\n        }\n    \
    \    val even = evens.max\n        val odd = odds.max\n        if (even > odd)\
    \ {\n            return even\n        } else {\n            return -1\n      \
    \  }", "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val evenEvens = mutable.ListBuffer[Long]()\n        val evenOdds = mutable.ListBuffer[Long]()\n\
    \        val oddEvens = mutable.ListBuffer[Long]()\n        val oddOdds = mutable.ListBuffer[Long]()\n\
    \        val evenEvensOdds = mutable.ListBuffer[Long]()\n        val evenOddsOdds\
    \ = mutable.ListBuffer[Long]()\n        val oddEvensOdds = mutable.ListBuffer[Long]()\n\
    \        val oddOddsOdds = mutable.ListBuffer[Long]()\n        val evenEvensOddsOdds\
    \ = mutable.ListBuffer[Long]()\n        val evenOddsOddsOdds = mutable.ListBuffer[Long]()\n\
    \        val oddEvensOddsOdds = mutable.ListBuffer[Long]()\n        val oddOddsOddsOdds\
    \ = mutable.ListBuffer[Long]()\n        val evenEvensOddsOddsOdds = mutable.ListBuffer[Long]()\n\
    \        val evenOddsOddsOddsOdds = mutable.ListBuffer[Long]()\n        val oddEvensOddsOddsOdds\
    \ = mutable.ListBuffer[Long]()\n        val oddOddsOddsOddsOdds = mutable.ListBuffer[Long]()\n\
    \        val evenEvensOddsOddsOddsOdds = mutable.ListBuffer[Long]()\n        val\
    \ evenOddsOddsOddsOddsOdds = mutable.ListBuffer[Long]()\n        val oddEvensOddsOddsOddsOdds\
    \ = mutable.ListBuffer[Long]()\n        val oddOddsOddsOddsOddsOdds = mutable.ListBuffer[Long]()\n\
    \        val evenEvensOddsOddsOddsOddsOdds = mutable.ListBuffer[Long]()\n    \
    \    val evenOddsOddsOddsOddsOddsOdds = ", "        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val range = (x to y).filter(_\
    \ % 2 == 0)\n        for (i <- range) {\n            if (i % 2 == 0) {\n     \
    \           evens += i\n            } else {\n                odds += i\n    \
    \        }\n        }\n        val even = evens.max\n        val odd = odds.max\n\
    \        if (even > odd) {\n            return even\n        } else {\n      \
    \      return -1\n        }", "        var biggest = math.max(x, y)\n        var\
    \ even = biggest / 2\n        var even2 = even / 2\n        var even3 = even2\
    \ / 2\n        var even4 = even3 / 2\n        var even5 = even4 / 2\n        var\
    \ even6 = even5 / 2\n        var even7 = even6 / 2\n        var even8 = even7\
    \ / 2\n        var even9 = even8 / 2\n        var even10 = even9 / 2\n       \
    \ var even11 = even10 / 2\n        var even12 = even11 / 2\n        var even13\
    \ = even12 / 2\n        var even14 = even13 / 2\n        var even15 = even14 /\
    \ 2\n        var even16 = even15 / 2\n        var even17 = even16 / 2\n      \
    \  var even18 = even17 / 2\n        var even19 = even18 / 2\n        var even20\
    \ = even19 / 2\n        var even21 = even20 / 2\n        var even22 = even21 /\
    \ 2\n        var even23 = even22 / 2\n        var even24 = even23 / 2\n      \
    \  var even25 = even24 / 2\n        var even26 = even25 / 2\n        var even27\
    \ = even26 / 2\n        var even28 = even27 / 2\n        var even29 = even28 /\
    \ 2\n        var even30 = even29 / 2\n        var even31 = even30 / 2\n      \
    \  var even32 = even31 / 2\n        var even33 = even32 / 2\n        var even34\
    \ = even33 / 2\n        var even35 = even34 / 2\n        var even36 = even35 /\
    \ 2\n        var even37 = even36 / 2\n        var even38 = even37 / 2\n      \
    \  var even39 = even38 / 2\n        var even40 = even39 / 2\n        var even41\
    \ = even40 / 2\n        var even42 = even41 / 2\n        var even43 = even42 /\
    \ 2\n        var even44 = even43 / 2\n        var even45 = even44 / 2\n      \
    \  var even46 = even45 / 2\n        var even47 = even46 / 2\n        var even48\
    \ = even47 / 2\n        var even49 = even48 / 2\n        var even50 = even49 /\
    \ 2\n        var even51 = even50 / 2\n        var even52 = even51 / 2\n      \
    \  var even53 = even52 / 2\n        var even54 = even53 / 2\n        var even55\
    \ = even54 / 2\n        var even56 = even55 / 2\n        var even57 = even56 /\
    \ 2\n        var even58", "        var max = 0\n        var min = 0\n        for(i\
    \ <- 0 until y by 2){\n            for(j <- 0 until x by 2){\n               \
    \ if(j + i == x && j + i == y){\n                    if(j + i > max){\n      \
    \                  max = j + i\n                    }\n                    if(j\
    \ + i < min){\n                        min = j + i\n                    }\n  \
    \              }\n            }\n        }\n        if(max > min){\n         \
    \   return max\n        }\n        return -1", "        var even = 0\n       \
    \ var odd = 0\n        var num = 0\n        while (even < y && odd < x) {\n  \
    \          if (x % 2 == 0) {\n                even = even + 1\n              \
    \  num = even + num\n            }\n            else {\n                odd =\
    \ odd + 1\n                num = odd + num\n            }\n        }\n       \
    \ if (even < y) {\n            num = even\n        }\n        if (odd < x) {\n\
    \            num = odd\n        }\n        return num", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x to y).filter(_\
    \ % 2 == 0)\n        for (i <- range) {\n            if (i % 2 == 0) {\n     \
    \           evens += i\n            } else {\n                odds += i\n    \
    \        }\n        }\n        val even = evens.max\n        val odd = odds.max\n\
    \        if (even < odd) {\n            return even\n        } else {\n      \
    \      return -1\n        }", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ > odd) {\n            return even\n        } else {\n            return -1\n\
    \        }", "        val evens = mutable.ListBuffer[Long]()\n        val odds\
    \ = mutable.ListBuffer[Long]()\n        val range = (x to y).filter(_ % 2 == 0)\n\
    \        range.foreach(x => if (x % 2 == 0) evens += x)\n        range.foreach(x\
    \ => if (x % 2 != 0) odds += x)\n        val even = evens.max\n        val odd\
    \ = odds.max\n        if (even > odd) even else odd", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val num = mutable.ListBuffer[Long]()\n        val evenNum = mutable.ListBuffer[Long]()\n\
    \        val oddNum = mutable.ListBuffer[Long]()\n        val numNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNum = mutable.ListBuffer[Long]()\n        val oddNumNum =\
    \ mutable.ListBuffer[Long]()\n        val numNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNum = mutable.ListBuffer[Long]()\n        val oddNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val numNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNumNum = mutable.ListBuffer[Long]()\n        val oddNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val numNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val oddNumNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val numNumNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val\
    \ oddNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val numNumNumNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val evenNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val oddNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val\
    \ numNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val evenNumNumNumNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val oddNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val numNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val\
    \ evenNumNumNumNumNumNumNumNum = mutable.ListBuffer[Long", "        var max =\
    \ 0\n        var min = 0\n        var even = 0\n        var odd = 0\n        var\
    \ xEven = 0\n        var xOdd = 0\n        var yEven = 0\n        var yOdd = 0\n\
    \        var xEvenMax = 0\n        var xOddMax = 0\n        var yEvenMax = 0\n\
    \        var yOddMax = 0\n        var xEvenMin = 0\n        var xOddMin = 0\n\
    \        var yEvenMin = 0\n        var yOddMin = 0\n        for(i <- 0 until x)\
    \ {\n            for(j <- 0 until y) {\n                if(i % 2 == 0 && j % 2\
    \ == 0) {\n                    if(max < i) {\n                        max = i\n\
    \                    }\n                    if(min > i) {\n                  \
    \      min = i\n                    }\n                    if(even < j) {\n  \
    \                      even = j\n                    }\n                    if(odd\
    \ > j) {\n                        odd = j\n                    }\n           \
    \         if(even > j && odd > i) {\n                        xEven = even\n  \
    \                      xOdd = odd\n                        yEven = i\n       \
    \                 yOdd = j\n                    }\n                    if(even\
    \ < j && odd < i) {\n                        xEven = even\n                  \
    \      xOdd = odd\n                        yEven = i\n                       \
    \ yOdd = j\n                    }\n                    if(even > j && even < i)\
    \ {\n                        xEven = even\n                        xOdd = odd\n\
    \                        yEven = i\n                        yOdd = j\n       \
    \             }\n                    if(even < j && even > i) {\n            \
    \            xEven = even\n                        xOdd = odd\n              \
    \          yEven = i\n                        yOdd = j\n                    }\n\
    \                    if(even > j && odd > i) {\n                        xEven\
    \ = even\n                        xOdd = odd\n                        yEven =\
    \ i\n                        yOdd = j\n                    }\n               \
    \     if(even > j && even < i) {\n                        xEven = even\n     \
    \                   xOdd = odd\n                        yEven = i\n          \
    \              yOdd = j\n                    }\n                    if(odd > j\
    \ && even > i) {\n                        xEven = even\n                     \
    \   xOdd = odd\n                        yEven = i\n                        yOdd\
    \ = j\n                    }\n                    if(odd > j && odd < i) {\n \
    \                       xEven = even\n                        xOdd = odd\n   \
    \                     yEven = i\n                        yOdd = j\n          \
    \          }\n                    if(odd > j && even < i) {\n                \
    \        xEven = even\n                        xOdd = odd\n                  \
    \      yEven = i\n                        yOdd = j\n                    }\n  \
    \                  if(odd < ", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        even.clear()\n        odd.clear()\n        for (i <- evens) {\n\
    \            if (i % 2 == 0) {\n                even += i\n            }\n   \
    \     }\n        for (i <- odds) {\n            if (i % 2 == 1) {\n          \
    \      odd += i\n            }\n        }\n        val evenMax = even.max\n  \
    \      val oddMax = odd.max\n        if (evenMax > oddMax) {\n            return\
    \ evenMax\n        } else {\n            return -1\n        }", "        val evens\
    \ = x to y by 2\n        val evensCount = evens.count(_ % 2 == 0)\n        if\
    \ (evensCount > 0) {\n            evens.max\n        } else {\n            -1\n\
    \        }", "        val evens = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n\
    \        val range = (x - y).abs \n        val evenRange = range / 2\n       \
    \ val oddRange = range % 2\n        val evenStart = x - (evenRange * 2)\n    \
    \    val evenEnd = evenStart + evenRange\n        val oddStart = x - (oddRange\
    \ * 2)\n        val oddEnd = oddStart + oddRange\n        val evenEven = x - (evenRange\
    \ * 2)\n        val evenOdd = evenEven + evenRange\n        val oddOdd = x - (oddRange\
    \ * 2)\n        val evenOddOdd = evenOdd + oddRange\n        val evenOddEven =\
    \ evenOdd + evenRange\n        val evenOddOddOdd = evenOddOdd + oddRange\n   \
    \     val evenOddEvenOdd = evenOddEvenOdd + evenRange\n        val evenOddEvenOddOdd\
    \ = evenOddEvenOddOdd + oddRange\n        val evenOddEvenOddEvenOdd = evenOddEvenOddOddOdd\
    \ + evenRange\n        val evenOddEvenOddEvenOddOdd = evenOddEvenOddEvenOddOdd\
    \ + oddRange\n        val evenOddEvenOddEvenOddEvenOdd = evenOddEvenOddEvenOddEvenOddOdd\
    \ + evenRange\n        val evenOddEvenOddEvenOddEvenOddOdd = evenOddEvenOddEvenOddEvenOddOdd\
    \ + oddRange\n        val evenOddEvenOddEvenOddEvenOddEvenOdd = evenOddEvenOddEvenOddEvenOddEvenOddOdd\
    \ + evenRange\n        val evenOddEvenOddEvenOddEvenOddEvenOddOdd = evenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ + oddRange\n        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = evenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd\
    \ + evenRange\n        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd = evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenO",
  "        val evens = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n\
    \        val range = Range(x, y)\n        range.foreach { x =>\n            range.foreach\
    \ { y =>\n                if (x % 2 == 0 && y % 2 == 0) {\n                  \
    \  evens += x\n                } else {\n                    odds += y\n     \
    \           }\n            }\n        }\n        val even = evens.max\n      \
    \  val odd = odds.max\n        if (even > odd) {\n            even\n        }\
    \ else {\n            -1\n        }", "        var even = 0\n        var odd =\
    \ 0\n        var evenMax = 0\n        var oddMax = 0\n        var evenMin = Integer.MAX_VALUE\n\
    \        var oddMin = Integer.MIN_VALUE\n        var evenMaxIndex = -1\n     \
    \   var oddMaxIndex = -1\n        var evenMinIndex = -1\n        var oddMinIndex\
    \ = -1\n        var evenMaxIndex2 = -1\n        var oddMaxIndex2 = -1\n      \
    \  var evenMinIndex2 = -1\n        var oddMinIndex2 = -1\n        var evenMaxIndex3\
    \ = -1\n        var oddMaxIndex3 = -1\n        var evenMinIndex3 = -1\n      \
    \  var oddMinIndex3 = -1\n        var evenMaxIndex4 = -1\n        var oddMaxIndex4\
    \ = -1\n        var evenMinIndex4 = -1\n        var oddMinIndex4 = -1\n      \
    \  var evenMaxIndex5 = -1\n        var oddMaxIndex5 = -1\n        var evenMinIndex5\
    \ = -1\n        var oddMinIndex5 = -1\n        var evenMaxIndex6 = -1\n      \
    \  var oddMaxIndex6 = -1\n        var evenMinIndex6 = -1\n        var oddMinIndex6\
    \ = -1\n        var evenMaxIndex7 = -1\n        var oddMaxIndex7 = -1\n      \
    \  var evenMinIndex7 = -1\n        var oddMinIndex7 = -1\n        var evenMaxIndex8\
    \ = -1\n        var oddMaxIndex8 = -1\n        var evenMinIndex8 = -1\n      \
    \  var oddMinIndex8 = -1\n        var evenMaxIndex9 = -1\n        var oddMaxIndex9\
    \ = -1\n        var evenMinIndex9 = -1\n        var oddMinIndex9 = -1\n      \
    \  var evenMaxIndex10 = -1\n        var oddMaxIndex10 = -1\n        var evenMinIndex10\
    \ = -1\n        var oddMinIndex10 = -1\n        var evenMaxIndex11 = -1\n    \
    \    var oddMaxIndex11 = -1\n        var evenMinIndex11 = -1\n        var oddMinIndex11\
    \ = -1\n        var evenMaxIndex12 = -1\n        var oddMaxIndex12 = -1\n    \
    \    var evenMinIndex12 = -1\n        var oddMinIndex12 = -1\n        var evenMaxIndex13\
    \ = -1\n        var oddMaxIndex13 = -1\n        var evenMinIndex13 = -1\n    \
    \    var oddMinIndex13 = -1\n        var evenMaxIndex14 = -1\n        var oddMaxIndex14\
    \ = -1\n        var evenMinIndex14 = -1\n        var oddMinIndex14 = -1\n    \
    \    var evenMaxIndex15 = -1\n        var oddMaxIndex15 = -1\n        var evenMinIndex15\
    \ = -1\n        var oddMinIndex15 = -1\n        var evenMaxIndex16 = -1\n    \
    \    var oddMaxIndex16 = -1\n        var evenMinIndex16 = -1\n        var oddMinIndex16\
    \ = -1\n        var evenMaxIndex17 = -1\n        var oddMaxIndex17 = -1\n    \
    \    var evenMinIndex17 = -1\n        var oddMinIndex17 = -1\n        var evenMaxIndex18\
    \ = -1", "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = Range(x, y)\n        for (i <- range) {\n            if (i\
    \ % 2 == 0) {\n                evens += i\n            } else {\n            \
    \    odds += i\n            }\n        }\n        val even = evens.max\n     \
    \   val odd = odds.max\n        if (even > odd) {\n            return even\n \
    \       } else {\n            return -1\n        }", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x to y).filter(_\
    \ % 2 == 0)\n        for (i <- range) {\n            if (i % 2 == 0) {\n     \
    \           evens += i\n            } else {\n                odds += i\n    \
    \        }\n        }\n        val even = evens.max\n        val odd = odds.max\n\
    \        if (even < odd) {\n            return even\n        } else {\n      \
    \      return -1\n        }", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val evensAndOdds = mutable.ListBuffer[Long]()\n\
    \        for (i <- x until y) {\n            if (i % 2 == 0) {\n             \
    \   evens += i\n            } else {\n                odds += i\n            }\n\
    \        }\n        evensAndOdds += evens.max\n        evensAndOdds += odds.max\n\
    \        evensAndOdds.max", "        val evens = mutable.Set[Long]()\n       \
    \ val odds = mutable.Set[Long]()\n        val range = Range(x, y)\n        range.foreach(x\
    \ => {\n            if (x % 2 == 0) {\n                evens += x\n          \
    \  } else {\n                odds += x\n            }\n        })\n        val\
    \ even = evens.max\n        val odd = odds.max\n        if (even > odd) {\n  \
    \          return even\n        } else {\n            return -1\n        }", " \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val evenOdd = mutable.ListBuffer[Long]()\n        val evenOddOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEven = mutable.ListBuffer[Long]()\n        val evenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenOdd = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenEvenOddOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenOddEvenOdd = mutable.ListBuffer[Long]()\n    \
    \    val evenOddEvenEvenEvenOddEvenEvenOdd = mutable.ListBuffer[Long]()\n    \
    \    val evenOddEvenEvenEvenOddEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenOddEvenEvenEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenOddEvenEvenEvenOddEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenOddEvenEvenEvenOddEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenOddEvenEvenEvenOddEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenOddEvenEvenOddEvenEvenEvenEvenOddEvenEvenEvenOdd =\
    \ mutable.ListBuffer[Long]()\n        val evenOddEvenEvenOddEvenEvenOddEvenEvenEvenOddEvenEvenEvenOddEvenEvenEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenOddEvenEvenOddEvenEvenEvenOddEvenEvenEvenOddEvenEvenEvenEvenOddEvenEvenEvenEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenOddEvenEvenOdd", " \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val evensAndOdds = mutable.ListBuffer[Long]()\n        val evensAndOddsSet\
    \ = mutable.Set[Long]()\n        val evensAndOddsSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSet = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSet\
    \ = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSetSetSetSet = mutable.Set[Long]()\n        val\
    \ evensAndOddsSetSetSetSetSetSetSet = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSetSetSetSet\
    \ = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSetSetSetSetSet =\
    \ mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSetSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSetSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSetSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSetSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSet", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x to y)\n\
    \        range.foreach{ x =>\n            if (x % 2 == 0) {\n                evens\
    \ += x\n            } else {\n                odds += x\n            }\n     \
    \   }\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ > odd) {\n            return even\n        } else {\n            return -1\n\
    \        }", "        val evens = mutable.ListBuffer[Long]()\n        val odds\
    \ = mutable.ListBuffer[Long]()\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val range = Range(x, y)\n        for (i <- range) {\n            if (i\
    \ % 2 == 0) {\n                evens += i\n            } else {\n            \
    \    odds += i\n            }\n        }\n        for (i <- evens) {\n       \
    \     if (i % 2 == 0) {\n                even += i\n            } else {\n   \
    \             odd += i\n            }\n        }\n        val even = even.toList\n\
    \        val odd = odd.toList\n        val evens = evens.toList\n        val odds\
    \ = odds.toList\n        val nums = evens.union(odds)\n        val even = even.toList\n\
    \        val odd = odd.toList\n        val evens = evens.toList\n        val odds\
    \ = odds.toList\n        val nums = evens.union(odds)\n        val even = even.toList\n\
    \        val odd = odd.toList\n        val evens = evens.toList\n        val odds\
    \ = odds.toList\n        val nums = evens.union(odds)\n        val even = even.toList\n\
    \        val odd = odd.toList\n        val evens = evens.toList\n        val odds\
    \ = odds.toList\n        val nums = evens.union(odds)\n        val even = even.toList\n\
    \        val odd = odd.toList\n        val evens = evens.toList\n        val odds\
    \ = odds.toList\n        val nums = evens.union(odds)\n        val even = even.toList\n\
    \        val odd = odd.toList\n        val evens = evens.toList\n        val odds\
    \ = odds.toList\n        val nums = evens.union(odds)\n        val even = even.toList\n\
    \        val odd = odd.toList\n        val evens = evens.toList\n        val odds\
    \ = odds.toList\n        val nums = evens.union(odds)\n        val even = even.toList\n\
    \        val odd = odd.toList\n        val evens = evens.toList\n        val odds\
    \ = odds.toList\n        val nums = evens.union(odds)\n        val even = even.toList\n\
    \        val odd = odd.toList\n        val evens = evens.toList\n        ", " \
    \       val evens = mutable.ListBuffer[Long]()\n        for (i <- x until y) {\n\
    \            if (i % 2 == 0) {\n                evens += i\n            }\n  \
    \      }\n        if (evens.isEmpty) {\n            return -1\n        }\n   \
    \     evens.max", "        var even = 0\n        var odd = 0\n        var biggest\
    \ = -1\n        var evenNum = 0\n        var oddNum = 0\n        var xEven = x.toInt\n\
    \        var yEven = y.toInt\n        var xOdd = xEven + 1\n        var yOdd =\
    \ yEven + 1\n        while(even < xEven && odd < yEven) {\n            evenNum\
    \ = even + xEven\n            oddNum = odd + yEven\n            biggest = evenNum\n\
    \            if(evenNum % 2 == 0 && oddNum % 2 == 0) {\n                biggest\
    \ = evenNum\n            }\n            if(evenNum % 2 != 0 && oddNum % 2 != 0)\
    \ {\n                biggest = oddNum\n            }\n            even = evenNum\n\
    \            odd = oddNum\n        }\n        if(biggest == -1) {\n          \
    \  biggest = -1\n        }\n        return biggest", "        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val range = Range(x, y)\n   \
    \     range.foreach { x =>\n            if (x % 2 == 0) {\n                evens\
    \ += x\n            } else {\n                odds += x\n            }\n     \
    \   }\n        if (evens.isEmpty) {\n            return -1\n        } else {\n\
    \            val result = evens.max\n            if (odds contains result) {\n\
    \                return -1\n            } else {\n                return result\n\
    \            }\n        }", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        range.foreach { i =>\n            if (i % 2 == 0) {\n               \
    \ evens += i\n            } else {\n                odds += i\n            }\n\
    \        }\n        val even = evens.max\n        val odd = odds.max\n       \
    \ if (even > odd) {\n            return even\n        } else {\n            return\
    \ -1\n        }", "        val evens = mutable.ListBuffer[Long]()\n        val\
    \ odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n       \
    \ for (i <- range) {\n            if (i % 2 == 0) {\n                evens +=\
    \ i\n            } else {\n                odds += i\n            }\n        }\n\
    \        val even = evens.max\n        val odd = odds.max\n        if (even >\
    \ odd) {\n            return even\n        } else {\n            return -1\n \
    \       }", "        val evens = mutable.ListBuffer[Long]()\n        val odds\
    \ = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n        range.foreach(x\
    \ => {\n            if (x % 2 == 0) {\n                evens += x\n          \
    \  } else {\n                odds += x\n            }\n        })\n        val\
    \ even = evens.max\n        val odd = odds.max\n        if (even > odd) {\n  \
    \          return even\n        } else {\n            return -1\n        }", " \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        for (i <- x until y) {\n            if (i % 2 == 0) {\n             \
    \   evens += i\n            } else {\n                odds += i\n            }\n\
    \        }\n        val even = evens.max\n        val odd = odds.max\n       \
    \ if (even > odd) {\n            return even\n        } else {\n            return\
    \ -1\n        }", "        val evens = mutable.ListBuffer[Long]()\n        val\
    \ odds = mutable.ListBuffer[Long]()\n        val range = (x - y).abs \n      \
    \  val evenRange = range.filter(_ % 2 == 0)\n        val oddRange = range.filter(_\
    \ % 2 == 1)\n        evenRange foreach { x => evens += x }\n        oddRange foreach\
    \ { x => odds += x }\n        val evenMax = evens.max\n        val oddMax = odds.max\n\
    \        if (evenMax == evenMax && oddMax == oddMax) {\n            return evenMax\n\
    \        }\n        return -1", "        var maxNum = -1L\n        var minNum\
    \ = Long.MaxValue\n        for(i <- 0 until x ; j <= y ; i+=2) {\n           \
    \ val num = i + j\n            if(num > maxNum) {\n                maxNum = num\n\
    \            }\n            if(num < minNum) {\n                minNum = num\n\
    \            }\n        }\n        if(maxNum == -1L) {\n            return -1L\n\
    \        }\n        if(minNum == Long.MaxValue) {\n            return -1L\n  \
    \      }\n        return maxNum", "        var evenNum = 0\n        var oddNum\
    \ = 0\n        var evenMax = 0\n        var oddMax = 0\n        var evenMin =\
    \ 0\n        var oddMin = 0\n        var evenMaxNum = 0\n        var oddMaxNum\
    \ = 0\n        var evenMinNum = 0\n        var oddMinNum = 0\n        var evenMaxNumNum\
    \ = 0\n        var oddMaxNumNum = 0\n        var evenMinNumNum = 0\n        var\
    \ oddMinNumNum = 0\n        var evenMaxNumNumNum = 0\n        var oddMaxNumNumNum\
    \ = 0\n        var evenMinNumNumNum = 0\n        var oddMinNumNumNum = 0\n   \
    \     var evenMaxNumNumNumNum = 0\n        var oddMaxNumNumNumNum = 0\n      \
    \  var evenMinNumNumNumNum = 0\n        var oddMinNumNumNumNum = 0\n        var\
    \ evenMaxNumNumNumNum = 0\n        var oddMaxNumNumNumNum = 0\n        var evenMinNumNumNumNum\
    \ = 0\n        var oddMinNumNumNumNum = 0\n        var evenMaxNumNumNumNum = 0\n\
    \        var oddMaxNumNumNumNum = 0\n        var evenMinNumNumNumNum = 0\n   \
    \     var oddMinNumNumNumNum = 0\n        var evenMaxNumNumNumNum = 0\n      \
    \  var oddMaxNumNumNumNum = 0\n        var evenMinNumNumNumNum = 0\n        var\
    \ oddMinNumNumNumNum = 0\n        var evenMaxNumNumNumNum = 0\n        var oddMaxNumNumNumNum\
    \ = 0\n        var evenMinNumNumNumNum = 0\n        var oddMinNumNumNumNum = 0\n\
    \        var evenMaxNumNumNumNum = 0\n        var oddMaxNumNumNumNum = 0\n   \
    \     var evenMinNumNumNumNum = 0\n        var oddMinNumNumNumNum = 0\n      \
    \  var evenMaxNumNumNumNum = 0\n        var oddMaxNumNumNumNum = 0\n        var\
    \ evenMinNumNumNumNum = 0\n        var oddMinNumNumNumNum = 0\n        var evenMaxNumNumNumNum\
    \ = 0\n        var oddMaxNumNumNumNum = 0\n        var evenMinNumNumNumNum = 0\n\
    \        var oddMinNumNumNumNum = 0\n        var evenMaxNumNumNumNum = 0\n   \
    \     var oddMaxNumNumNumNum = 0\n        var evenMinNumNumNumNum = 0\n      \
    \  var oddMinNumNumNumNum = 0\n        var evenMaxNumNumNumNum = 0\n        var\
    \ oddMaxNumNumNumNum = 0\n        var evenMinNumNumNumNum = 0\n        var oddMinNumNumNumNum\
    \ = 0\n        var evenMaxNumNumNumNum = 0\n        var oddMaxNumNumNumNum = 0\n\
    \        var evenMinNumNumNumNum = 0\n        var oddMinNumNumNumNum = 0\n   \
    \     var even", "        val evens = mutable.ListBuffer[Long]()\n        val\
    \ odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n       \
    \ range.foreach(x => if (x % 2 == 0) evens += x)\n        range.foreach(x => if\
    \ (x % 2 != 0) odds += x)\n        val even = evens.max\n        val odd = odds.max\n\
    \        if (even > odd) even else odd", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        range.foreach(x => {\n            if (x % 2 == 0) {\n               \
    \ evens += x\n            } else {\n                odds += x\n            }\n\
    \        })\n        val even = evens.max\n        val odd = odds.max\n      \
    \  if (even > odd) {\n            return even\n        } else {\n            return\
    \ -1\n        }", "        val evens = x to y by 2\n        val evensSorted =\
    \ evens.toList\n        val evensSortedSorted: Seq[Int] = evensSorted.sortWith(_\
    \ < _)\n        val evensSortedSortedSorted: Seq[Int] = evensSortedSorted.sortWith(_\
    \ < _)\n        val evensSortedSortedSortedSorted: Seq[Int] = evensSortedSortedSorted.sortWith(_\
    \ < _)\n        val evensSortedSortedSortedSortedSorted: Seq[Int] = evensSortedSortedSortedSorted.sortWith(_\
    \ < _)\n        val evensSortedSortedSortedSortedSortedSorted: Seq[Int] = evensSortedSortedSortedSortedSorted.sortWith(_\
    \ < _)\n        val evensSortedSortedSortedSortedSortedSorted: Seq[Int] = evensSortedSortedSortedSortedSortedSorted.sortWith(_\
    \ < _)\n        val evensSortedSortedSortedSortedSortedSortedSorted: Seq[Int]\
    \ = evensSortedSortedSortedSortedSortedSortedSorted.sortWith(_ < _)\n        val\
    \ evensSortedSortedSortedSortedSortedSortedSortedSorted: Seq[Int] = evensSortedSortedSortedSortedSortedSortedSorted.sortWith(_\
    \ < _)\n        val evensSortedSortedSortedSortedSortedSortedSortedSorted: Seq[Int]\
    \ = evensSortedSortedSortedSortedSortedSortedSortedSorted.sortWith(_ < _)\n  \
    \      val evensSortedSortedSortedSortedSortedSortedSortedSortedSorted: Seq[Int]\
    \ = evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.sortWith(_\
    \ < _)\n        val evensSortedSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ Seq[Int] = evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.sortWith(_\
    \ < _)\n        val evensSortedSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ Seq[Int] = evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.sortWith(_\
    \ < _)\n        val evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ Seq[Int] = evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.sortWith(_\
    \ < _)\n        val evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ Seq[Int] = evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.sortWith(_\
    \ < _)\n        val evensSortedSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ Seq[Int] = evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted",
  "        val evens = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n\
    \        val range = Range(x, y)\n        range.foreach(x => {\n            if\
    \ (x % 2 == 0) {\n                evens += x\n            } else {\n         \
    \       odds += x\n            }\n        })\n        val even = evens.max\n \
    \       val odd = odds.max\n        if (even > odd) {\n            even\n    \
    \    } else {\n            -1\n        }", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x to y).filter(_\
    \ % 2 == 0)\n        range.foreach(x => if (x % 2 == 0) evens += x)\n        range.foreach(x\
    \ => if (x % 2 == 1) odds += x)\n        val even = evens.max\n        val odd\
    \ = odds.max\n        if (even > odd) even else odd", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ > odd) {\n            return even\n        } else {\n            return -1\n\
    \        }", "        val evens = mutable.ListBuffer[Long]()\n        val odds\
    \ = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n        for (i\
    \ <- range) {\n            if (i % 2 == 0) {\n                evens += i\n   \
    \         } else {\n                odds += i\n            }\n        }\n    \
    \    val even = evens.max\n        val odd = odds.max\n        if (even < odd)\
    \ {\n            return even\n        } else {\n            return -1\n      \
    \  }", "        val evens = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n\
    \        val range = Range(x, y)\n        range.foreach(x => {\n            if\
    \ (x % 2 == 0) {\n                evens += x\n            } else {\n         \
    \       odds += x\n            }\n        })\n        val even = evens.max\n \
    \       val odd = odds.max\n        if (even > odd) {\n            return even\n\
    \        } else {\n            return -1\n        }", "        val evens = x to\
    \ y by 2\n        val evensCount = evens.count(_ % 2 == 0)\n        if (evensCount\
    \ == 0) {\n            return -1\n        }\n        val maxEven = evens.max\n\
    \        if (maxEven % 2 == 0) {\n            return maxEven\n        }\n    \
    \    val maxEven2 = maxEven / 2\n        val maxEven3 = maxEven2 / 2\n       \
    \ val maxEven4 = maxEven3 / 2\n        val maxEven5 = maxEven4 / 2\n        val\
    \ maxEven6 = maxEven5 / 2\n        val maxEven7 = maxEven6 / 2\n        val maxEven8\
    \ = maxEven7 / 2\n        val maxEven9 = maxEven8 / 2\n        val maxEven10 =\
    \ maxEven9 / 2\n        val maxEven11 = maxEven10 / 2\n        val maxEven12 =\
    \ maxEven11 / 2\n        val maxEven13 = maxEven12 / 2\n        val maxEven14\
    \ = maxEven13 / 2\n        val maxEven15 = maxEven14 / 2\n        val maxEven16\
    \ = maxEven15 / 2\n        val maxEven17 = maxEven16 / 2\n        val maxEven18\
    \ = maxEven17 / 2\n        val maxEven19 = maxEven18 / 2\n        val maxEven20\
    \ = maxEven19 / 2\n        val maxEven21 = maxEven20 / 2\n        val maxEven22\
    \ = maxEven21 / 2\n        val maxEven23 = maxEven22 / 2\n        val maxEven24\
    \ = maxEven23 / 2\n        val maxEven25 = maxEven24 / 2\n        val maxEven26\
    \ = maxEven25 / 2\n        val maxEven27 = maxEven26 / 2\n        val maxEven28\
    \ = maxEven27 / 2\n        val maxEven29 = maxEven28 / 2\n        val maxEven30\
    \ = maxEven29 / 2\n        val maxEven31 = maxEven30 / 2\n        val maxEven32\
    \ = maxEven31 / 2\n        val maxEven33 = maxEven32 / 2\n        val maxEven34\
    \ = maxEven33 / 2\n        val maxEven35 = maxEven34 / 2\n        val maxEven36\
    \ = maxEven35 / 2\n        val maxEven37 = maxEven36 / 2\n        val maxEven38\
    \ = maxEven37 / 2\n        val maxEven39 = maxEven38 / 2\n        val maxEven40\
    \ = maxEven39 / 2\n", "        val evens = mutable.ListBuffer[Long]()\n      \
    \  val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n  \
    \      for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ > odd) {\n            return even\n        } else {\n            return -1\n\
    \        }", "        var maxEven = math.max(x, y)\n        var even = math.min(x,\
    \ y)\n        var evenMax = math.max(even, maxEven)\n        var evenMin = math.min(even,\
    \ maxEven)\n        var evenMaxInRange = math.max(evenMax, evenMin)\n        var\
    \ evenMinInRange = math.min(evenMax, evenMin)\n        var evenMaxInRangeInRange\
    \ = math.max(evenMaxInRange, evenMinInRange)\n        var evenMaxInRangeInRangeInRange\
    \ = math.max(evenMaxInRangeInRange, evenMinInRangeInRange)\n        var evenMaxInRangeInRangeInRangeInRange\
    \ = math.max(evenMaxInRangeInRangeInRange, evenMinInRangeInRangeInRange)\n   \
    \     var evenMaxInRangeInRangeInRangeInRangeInRange = math.max(evenMaxInRangeInRangeInRangeInRange,\
    \ evenMinInRangeInRangeInRangeInRange)\n        var evenMaxInRangeInRangeInRangeInRangeInRangeInRange\
    \ = math.max(evenMaxInRangeInRangeInRangeInRangeInRange, evenMinInRangeInRangeInRangeInRangeInRange)\n\
    \        var evenMaxInRangeInRangeInRangeInRangeInRangeInRangeInRange = math.max(evenMaxInRangeInRangeInRangeInRangeInRangeInRange,\
    \ evenMinInRangeInRangeInRangeInRangeInRangeInRange)\n        var evenMaxInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange\
    \ = math.max(evenMaxInRangeInRangeInRangeInRangeInRangeInRangeInRange, evenMinInRangeInRangeInRangeInRangeInRangeInRangeInRange)\n\
    \        var evenMaxInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange =\
    \ math.max(evenMaxInRangeInRangeInRangeInRangeInRangeInRangeInRange, evenMinInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange)\n\
    \        var evenMaxInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange\
    \ = math.max(evenMaxInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange,\
    \ evenMinInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange)\n  \
    \      var evenMaxInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange\
    \ = math.max(evenMaxInRangeInRangeInRangeInRangeInRangeInRangeInRange, evenMinInRangeIn",
  "        val evens = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n\
    \        val range = Range(x, y)\n        for (i <- range) {\n            if (i\
    \ % 2 == 0) {\n                evens += i\n            } else {\n            \
    \    odds += i\n            }\n        }\n        val even = evens.max\n     \
    \   val odd = odds.max\n        if (even > odd) {\n            return even\n \
    \       } else {\n            return -1\n        }", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x - y).abs\
    \ \n        val evenRange = range.filter(_ % 2 == 0)\n        val oddRange = range.filter(_\
    \ % 2 != 0)\n        evenRange foreach { x => evens += x }\n        oddRange foreach\
    \ { x => odds += x }\n        evens.max", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ > odd) {\n            return even\n        } else {\n            return -1\n\
    \        }", "        val evens = mutable.ListBuffer[Long]()\n        for (i <-\
    \ x until y) {\n            if (i % 2 == 0) {\n                evens += i\n  \
    \          }\n        }\n        if (evens.isEmpty) {\n            return -1\n\
    \        }\n        evens.max", "        val evens = mutable.Set[Long]()\n   \
    \     val odds = mutable.Set[Long]()\n        val range = Range(x, y)\n      \
    \  for (i <- range) {\n            if (i % 2 == 0) {\n                evens +=\
    \ i\n            } else {\n                odds += i\n            }\n        }\n\
    \        if (evens.isEmpty) {\n            return -1\n        }\n        if (evens.size\
    \ == 1) {\n            return evens.head\n        }\n        if (evens.size ==\
    \ 2) {\n            if (evens.head % 2 == 0) {\n                return evens.head\n\
    \            } else {\n                return -1\n            }\n        }\n \
    \       val maxEven = evens.max\n        val maxOdd = odds.max\n        if (maxEven\
    \ % 2 == 0) {\n            return maxEven\n        } else {\n            return\
    \ maxOdd\n        }", "        val evens = mutable.ListBuffer[Long]()\n      \
    \  val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n  \
    \      range.foreach(x => if (x % 2 == 0) evens += x)\n        range.foreach(x\
    \ => if (x % 2 == 1) odds += x)\n        val even = evens.max\n        val odd\
    \ = odds.max\n        if (even > odd) even else odd", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        range.foreach { x =>\n            if (x % 2 == 0) {\n               \
    \ evens += x\n            } else {\n                odds += x\n            }\n\
    \        }\n        val even = evens.max\n        val odd = odds.max\n       \
    \ if (even > odd) {\n            return even\n        } else {\n            return\
    \ -1\n        }", "        val evens = mutable.Set[Long]()\n        val odds =\
    \ mutable.Set[Long]()\n        val range = Range(x, y)\n        range.foreach(x\
    \ => if (x % 2 == 0) evens += x; else odds += x)\n        val even = evens.max\n\
    \        val odd = odds.max\n        if (even > odd) even else odd", "       \
    \ val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val nums = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        range.foreach{ x => if (x % 2 == 0) evens += x else odds += x }\n   \
    \     evens ++= odds\n        evens.toList sortBy { x => x } last", "        var\
    \ even = 0\n        var odd = 0\n        var max = 0\n        for(i <- x to y)\
    \ {\n            if(i%2 == 0) {\n                even += i\n            }\n  \
    \          else {\n                odd += i\n            }\n        }\n      \
    \  if(even > odd) {\n            max = even\n        }\n        else {\n     \
    \       max = odd\n        }\n        return max", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        range.foreach(x => {\n            if (x % 2 == 0) {\n               \
    \ evens += x\n            } else {\n                odds += x\n            }\n\
    \        })\n        val even = evens.max\n        val odd = odds.max\n      \
    \  if (even > odd) {\n            return even\n        } else {\n            return\
    \ -1\n        }", "        val evens = mutable.Set[Long]()\n        val odds =\
    \ mutable.Set[Long]()\n        val range = Range(x, y)\n        for (i <- range)\
    \ {\n            if (i % 2 == 0) {\n                evens += i\n            }\
    \ else {\n                odds += i\n            }\n        }\n        if (evens.isEmpty)\
    \ {\n            return -1\n        }\n        if (evens.size == 1) {\n      \
    \      return evens.head\n        }\n        if (evens.size > 1) {\n         \
    \   val maxEven = evens.max\n            val maxOdd = odds.max\n            if\
    \ (maxEven < maxOdd) {\n                return maxEven\n            } else {\n\
    \                return maxOdd\n            }\n        }", "        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = Range(x, y)\n        range.foreach(x => if (x % 2 == 0) evens\
    \ += x; else odds += x)\n        val even = evens.max\n        val odd = odds.max\n\
    \        if (even > odd) even else odd", "        var max = 0\n        var min\
    \ = 0\n        for(i <- 0 until x; j <= y) {\n            val num = (i + j) /\
    \ 2\n            if(num % 2 == 0) {\n                max = num\n            }\
    \ else {\n                min = num\n            }\n        }\n        if(max\
    \ == min) {\n            return -1\n        }\n        return max", "        val\
    \ evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = Range(x, y)\n        range.foreach(x => if (x % 2 == 0) evens\
    \ += x; else odds += x)\n        val even = evens.max\n        val odd = odds.max\n\
    \        if (even > odd) even else odd", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x - y).abs\
    \ \n        val evenRange = (x % 2) == 0\n        val oddRange = (y % 2) == 0\n\
    \        val even = x until y\n        val odd = x until y\n        evens ++=\
    \ even\n        odds ++= odd\n        evens.filter(_ % 2 == 0).max", "       \
    \ val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (x - y).abs \n        for (i <- 1 to range) {\n         \
    \   if (i % 2 == 0) {\n                evens += i\n            } else {\n    \
    \            odds += i\n            }\n        }\n        val even = evens.max\n\
    \        val odd = odds.max\n        if (even > odd) {\n            return even\n\
    \        } else {\n            return -1\n        }", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x - y).abs\
    \ \n        val evenRange = range.filter(_ % 2 == 0)\n        val oddRange = range.filter(_\
    \ % 2 != 0)\n        evenRange foreach { x => evens += x }\n        oddRange foreach\
    \ { x => odds += x }\n        val evenMax = evens.max\n        val oddMax = odds.max\n\
    \        if (evenMax < oddMax) evenMax else oddMax", "        val evens = x filter\
    \ (_ % 2 == 0)\n        val odds = x filter (_ % 2 != 0)\n        val evensOdds\
    \ = evens ++ odds\n        val evensOddsSum = evensOdds.sum\n        if (evensOddsSum\
    \ > y) {\n            return evensOddsSum\n        } else {\n            return\
    \ -1\n        }", "        val evens = x to y by 2\n        val evensSum = evens.sum\n\
    \        if (evensSum < 0) -1\n        else if (evensSum == 0) -1\n        else\
    \ evens.max", "        val evens = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n\
    \        val range = Range(x, y)\n        for (i <- range) {\n            if (i\
    \ % 2 == 0) {\n                evens += i\n            } else {\n            \
    \    odds += i\n            }\n        }\n        val even = evens.max\n     \
    \   val odd = odds.max\n        if (even > odd) {\n            return even\n \
    \       } else {\n            return -1\n        }", "        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val range = Range(x, y)\n   \
    \     range.foreach(x => {\n            if (x % 2 == 0) {\n                evens\
    \ += x\n            } else {\n                odds += x\n            }\n     \
    \   })\n        if (evens.size == 0 && odds.size == 0) {\n            return -1\n\
    \        } else if (evens.size == 0) {\n            return odds.head\n       \
    \ } else if (odds.size == 0) {\n            return evens.head\n        } else\
    \ {\n            val even = evens.head\n            val odd = odds.head\n    \
    \        if (even > odd) {\n                return even\n            } else {\n\
    \                return odd\n            }\n        }", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ > odd) {\n            return even\n        } else {\n            return -1\n\
    \        }", "        val evens = mutable.ListBuffer[Long]()\n        val odds\
    \ = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val evenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddOdd = mutable.ListBuffer[Long]()\n        val evenOddEven\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEven = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenOddOdd = mutable.ListBuffer[Long]()\n        val\
    \ evenOddEvenEvenEvenOddEvenOdd = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenEvenOddEvenEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenEvenOddEvenEvenEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenOddEvenEvenEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenOddEvenEvenEvenOddEvenEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenOddEvenEvenEvenOddEvenEvenEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenOddEvenEvenEvenOddEvenEvenEvenEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenOddEvenEvenOddEvenEvenEvenEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenOddEvenEvenOddEvenEvenEvenOddEvenEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenOddEvenEvenOddEvenEvenEvenOddEvenEvenEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenOddEvenEvenOddEvenEvenEvenOddEvenEvenEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long", "        var maxEven = math.max(x, y)\n        var\
    \ minEven = math.min(x, y)\n        var even = math.min(maxEven, minEven)\n  \
    \      var evenNum = 0\n        var evenNumCount = 0\n        while (even > 0\
    \ && even <= y) {\n            if (even % 2 == 0) {\n                evenNum =\
    \ even\n                evenNumCount = 1\n            }\n            even = even\
    \ / 2\n            evenNumCount += 1\n        }\n        if (evenNumCount == 0)\
    \ {\n            return -1\n        }\n        if (evenNumCount > evenNum) {\n\
    \            return evenNum\n        }\n        return -1", "        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = Range(x, y)\n        range.foreach(x => {\n            if\
    \ (x % 2 == 0) {\n                evens += x\n            } else {\n         \
    \       odds += x\n            }\n        })\n        val even = evens.max\n \
    \       val odd = odds.max\n        if (even < odd) {\n            return even\n\
    \        } else {\n            return -1\n        }", "        val evens = mutable.ListBuffer[Long]()\n\
    \        for (i <- x until y) {\n            if (i % 2 == 0) {\n             \
    \   evens += i\n            }\n        }\n        if (evens.isEmpty) {\n     \
    \       return -1\n        }\n        evens.max", "        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val range = (x to y)\n      \
    \  for (i <- range) {\n            if (i % 2 == 0) {\n                evens +=\
    \ i\n            } else {\n                odds += i\n            }\n        }\n\
    \        if (evens.isEmpty) {\n            return -1\n        }\n        if (evens.size\
    \ == 1) {\n            return evens.head\n        }\n        if (evens.size ==\
    \ 2) {\n            return evens.head + evens.last\n        }\n        val evensSet\
    \ = evens.toSet\n        val oddsSet = odds.toSet\n        val evensSetSize =\
    \ evensSet.size\n        val oddsSetSize = oddsSet.size\n        val maxEven =\
    \ evensSet.max\n        val maxOdd = oddsSet.max\n        if (evensSetSize ==\
    \ oddsSetSize) {\n            if (evensSetSize == 2) {\n                return\
    \ evensSet.head + evensSet.last\n            }\n            if (evensSetSize ==\
    \ 1) {\n                return evensSet.head\n            }\n        }\n     \
    \   if (evensSetSize > oddsSetSize) {\n            return maxEven\n        }\n\
    \        return maxOdd", "        val evens = mutable.ListBuffer[Long]()\n   \
    \     val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        if (evens.isEmpty) {\n            return -1\n        } else {\n\
    \            val maxEven = evens.max\n            val maxOdd = odds.max\n    \
    \        if (maxEven > maxOdd) {\n                return maxEven\n           \
    \ } else {\n                return maxOdd\n            }\n        }", "      \
    \  val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = Range(x, y)\n        for (i <- range) {\n            if (i\
    \ % 2 == 0) {\n                evens += i\n            } else {\n            \
    \    odds += i\n            }\n        }\n        if (evens.isEmpty) {\n     \
    \       return -1\n        } else {\n            val max = evens.max\n       \
    \     if (evens.contains(max)) {\n                return max\n            } else\
    \ {\n                return -1\n            }\n        }", "        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        for(i <- x until y) {\n            if(i%2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        val even = evens.max\n        val odd = odds.max\n        if(even\
    \ < odd) {\n            return even\n        } else {\n            return -1\n\
    \        }", "        val evens = mutable.ListBuffer[Long]()\n        for (i <-\
    \ x until y) {\n            if (i % 2 == 0) {\n                evens += i\n  \
    \          }\n        }\n        if (evens.isEmpty) {\n            return -1\n\
    \        }\n        evens.max", "        var evenNum = x % 2\n        var evenNum2\
    \ = y % 2\n        var evenNum3 = evenNum * evenNum2\n        var evenNum4 = evenNum\
    \ * evenNum2\n        var evenNum5 = evenNum * evenNum2\n        var evenNum6\
    \ = evenNum * evenNum2\n        var evenNum7 = evenNum * evenNum2\n        var\
    \ evenNum8 = evenNum * evenNum2\n        var evenNum9 = evenNum * evenNum2\n \
    \       var evenNum10 = evenNum * evenNum2\n        var evenNum11 = evenNum *\
    \ evenNum2\n        var evenNum12 = evenNum * evenNum2\n        var evenNum13\
    \ = evenNum * evenNum2\n        var evenNum14 = evenNum * evenNum2\n        var\
    \ evenNum15 = evenNum * evenNum2\n        var evenNum16 = evenNum * evenNum2\n\
    \        var evenNum17 = evenNum * evenNum2\n        var evenNum18 = evenNum *\
    \ evenNum2\n        var evenNum19 = evenNum * evenNum2\n        var evenNum20\
    \ = evenNum * evenNum2\n        var evenNum21 = evenNum * evenNum2\n        var\
    \ evenNum22 = evenNum * evenNum2\n        var evenNum23 = evenNum * evenNum2\n\
    \        var evenNum24 = evenNum * evenNum2\n        var evenNum25 = evenNum *\
    \ evenNum2\n        var evenNum26 = evenNum * evenNum2\n        var evenNum27\
    \ = evenNum * evenNum2\n        var evenNum28 = evenNum * evenNum2\n        var\
    \ evenNum29 = evenNum * evenNum2\n        var evenNum30 = evenNum * evenNum2\n\
    \        var evenNum31 = evenNum * evenNum2\n        var evenNum32 = evenNum *\
    \ evenNum2\n        var evenNum33 = evenNum * evenNum2\n        var evenNum34\
    \ = evenNum * evenNum2\n        var evenNum35 = evenNum * evenNum2\n        var\
    \ evenNum36 = evenNum * evenNum2\n        var evenNum37 = evenNum * evenNum2\n\
    \        var evenNum38 = evenNum * evenNum2\n        var evenNum39 = evenNum *\
    \ evenNum2\n        var evenNum40 = evenNum * evenNum2\n        var evenNum41\
    \ = evenNum * evenNum2\n        var evenNum42 = evenNum * evenNum2\n        var\
    \ evenNum43 = evenNum * evenNum2\n        var evenNum44 = evenNum * evenNum2\n\
    \        var even", "        val evens = mutable.Set[Long]()\n        val odds\
    \ = mutable.Set[Long]()\n        val range = Range(x, y)\n        range.foreach(x\
    \ => if (x % 2 == 0) evens += x; else odds += x)\n        val even = evens.max\n\
    \        val odd = odds.max\n        if (even > odd) even else odd", "       \
    \ val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = Range(x, y)\n        for (i <- range) {\n            if (i\
    \ % 2 == 0) {\n                evens += i\n            } else {\n            \
    \    odds += i\n            }\n        }\n        if (evens.isEmpty) {\n     \
    \       return -1\n        }\n        if (evens.size > odds.size) {\n        \
    \    return evens.last\n        }\n        val even = evens.last\n        val\
    \ odd = odds.last\n        if (even > odd) {\n            return even\n      \
    \  } else {\n            return odd\n        }", "        var even = 0\n     \
    \   var odd = 0\n        var result = -1\n        var x = x.toInt\n        var\
    \ y = y.toInt\n        while (even < x && odd < y) {\n            if (x % 2 ==\
    \ 0 && y % 2 == 0) {\n                if (even < y) {\n                    even\
    \ = even + 1\n                    result = even\n                } else {\n  \
    \                  odd = odd + 1\n                    result = odd\n         \
    \       }\n            } else if (x % 2 != 0 && y % 2 != 0) {\n              \
    \  if (even < y) {\n                    even = even + 1\n                    result\
    \ = even\n                } else {\n                    odd = odd + 1\n      \
    \              result = odd\n                }\n            } else if (x % 2 ==\
    \ 0 && y % 2 != 0) {\n                if (even < y) {\n                    even\
    \ = even + 1\n                    result = even\n                } else {\n  \
    \                  odd = odd + 1\n                    result = odd\n         \
    \       }\n            } else if (x % 2 != 0 && y % 2 == 0) {\n              \
    \  if (even < y) {\n                    even = even + 1\n                    result\
    \ = even\n                } else {\n                    odd = odd + 1\n      \
    \              result = odd\n                }\n            }\n        }\n   \
    \     return result", "        val evens = mutable.ListBuffer[Long]()\n      \
    \  val odds = mutable.ListBuffer[Long]()\n        val range = (x - y).abs \n \
    \       val even = (x % 2) == 0\n        val odd = (x % 2) != 0\n        val evenRange\
    \ = range.filter(_ % 2 == 0).length\n        val oddRange = range.filter(_ % 2\
    \ != 0).length\n        val evens = range.filter(_ % 2 == 0).takeWhile(_ <= y).filter(_\
    \ >= x).map(x => x + 1)\n        val odds = range.filter(_ % 2 != 0).takeWhile(_\
    \ <= y).filter(_ >= x).map(x => x - 1)\n        val even = evens.takeWhile(_ <=\
    \ y).filter(_ >= x).map(x => x + 1)\n        val odd = odds.takeWhile(_ <= y).filter(_\
    \ >= x).map(x => x - 1)\n        val evenEven = evens.takeWhile(_ <= y).filter(_\
    \ >= x).map(x => x + 1)\n        val evenOdd = odds.takeWhile(_ <= y).filter(_\
    \ >= x).map(x => x - 1)\n        val evenEvenOdd = evens.takeWhile(_ <= y).filter(_\
    \ >= x).map(x => x + 1)\n        val evenOddOdd = odds.takeWhile(_ <= y).filter(_\
    \ >= x).map(x => x - 1)\n        val evenEvenOddOdd = evens.takeWhile(_ <= y).filter(_\
    \ >= x).map(x => x + 1)\n        val evenOddEvenOdd = odds.takeWhile(_ <= y).filter(_\
    \ >= x).map(x => x - 1)\n        val evenEvenOddEvenOdd = evens.takeWhile(_ <=\
    \ y).filter(_ >= x).map(x => x + 1)\n        val evenOddEvenEvenOdd = odds.takeWhile(_\
    \ <= y).filter(_ >= x).map(x => x - 1)\n        val evenEvenOddEvenEvenOdd = evens.takeWhile(_\
    \ <= y).filter(_ >= x).map(x => x + 1)\n        val evenOddEvenEvenEvenOdd = odds.takeWhile(_\
    \ <= y).filter(_ >= x).map(x => x - 1)\n        val evenEvenOddEvenEvenEvenOdd\
    \ = evens.takeWhile(_ <= y).filter(_ >= x).map(x => x + 1)\n        val evenOddEvenEvenEvenEvenOdd\
    \ = odds.takeWhile(_ <= y).filter(_ >= x).map(x => x - 1)\n        val evenEvenOddEvenEvenEvenEvenOdd\
    \ = evens.takeWhile(_ <= y).filter(_ >= ", "        var ans = -1\n        var\
    \ low = math.min(x, y)\n        var high = math.max(x, y)\n        while(low <\
    \ high) {\n            val mid = (low + high) / 2\n            if(mid % 2 == 0)\
    \ {\n                ans = mid\n                low = mid + 1\n            } else\
    \ {\n                high = mid - 1\n            }\n        }\n        ans", " \
    \       val evens = x to y by 2\n        val evensSorted = evens.toList\n    \
    \    val evensSorted = evensSorted.sortBy(_ % 2 == 0)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted.head", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x - y).abs\
    \ \n        val even = (range / 2).toInt\n        val odd = (range / 2).toInt\n\
    \        val evenRange = range / 2\n        val oddRange = range / 2\n       \
    \ val evenRange2 = range / 2\n        val oddRange2 = range / 2\n        val evenRange3\
    \ = range / 2\n        val oddRange3 = range / 2\n        val evenRange4 = range\
    \ / 2\n        val oddRange4 = range / 2\n        val evenRange5 = range / 2\n\
    \        val oddRange5 = range / 2\n        val evenRange6 = range / 2\n     \
    \   val oddRange6 = range / 2\n        val evenRange7 = range / 2\n        val\
    \ oddRange7 = range / 2\n        val evenRange8 = range / 2\n        val oddRange8\
    \ = range / 2\n        val evenRange9 = range / 2\n        val oddRange9 = range\
    \ / 2\n        val evenRange10 = range / 2\n        val oddRange10 = range / 2\n\
    \        val evenRange11 = range / 2\n        val oddRange11 = range / 2\n   \
    \     val evenRange12 = range / 2\n        val oddRange12 = range / 2\n      \
    \  val evenRange13 = range / 2\n        val oddRange13 = range / 2\n        val\
    \ evenRange14 = range / 2\n        val oddRange14 = range / 2\n        val evenRange15\
    \ = range / 2\n        val oddRange15 = range / 2\n        val evenRange16 = range\
    \ / 2\n        val oddRange16 = range / 2\n        val evenRange17 = range / 2\n\
    \        val oddRange17 = range / 2\n        val evenRange18 = range / 2\n   \
    \     val oddRange18 = range / 2\n        val evenRange19 = range / 2\n      \
    \  val oddRange19 = range / 2\n        val evenRange20 = range / 2\n        val\
    \ oddRange20 = range / 2\n        val evenRange21 = range / 2\n        val oddRange21\
    \ = range / 2\n        val evenRange22 = range / 2\n        val oddRange22 = range\
    \ / 2\n        val evenRange23 = range / 2\n        val oddRange23 = range / 2\n\
    \        val evenRange24 = range / 2\n        val oddRange24 = range / 2\n", " \
    \       val evens = mutable.ListBuffer[Long]()\n        for (i <- x until y) {\n\
    \            if (i % 2 == 0) {\n                evens += i\n            }\n  \
    \      }\n        if (evens.isEmpty) {\n            return -1\n        }\n   \
    \     evens.max", "        val evens = mutable.ListBuffer[Long]()\n        val\
    \ odds = mutable.ListBuffer[Long]()\n        for (i <- x until y) {\n        \
    \    if (i % 2 == 0) {\n                evens += i\n            } else {\n   \
    \             odds += i\n            }\n        }\n        val even = evens.max\n\
    \        val odd = odds.max\n        if (even > odd) {\n            return even\n\
    \        } else {\n            return -1\n        }", "        var even = x %\
    \ 2 == 0\n        var low = y\n        var high = y\n        var num = 0\n   \
    \     while (even && low < high) {\n            num = low + (high - low) / 2\n\
    \            even = num % 2 == 0\n            low = num\n            high = num\n\
    \        }\n        if (even) {\n            high = high + 1\n        }\n    \
    \    if (low < high) {\n            return num\n        } else {\n           \
    \ return -1\n        }", "        val evens = mutable.ListBuffer[Long]()\n   \
    \     val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ < odd) {\n            return even\n        } else {\n            return -1\n\
    \        }", "        var max = 0\n        var min = 0\n        var even = 0\n\
    \        var odd = 0\n        var evenMax = 0\n        var evenMin = 0\n     \
    \   var oddMax = 0\n        var oddMin = 0\n        var evenMaxIndex = 0\n   \
    \     var evenMinIndex = 0\n        var oddMaxIndex = 0\n        var oddMinIndex\
    \ = 0\n        var evenMaxValue = 0\n        var evenMinValue = 0\n        var\
    \ oddMaxValue = 0\n        var oddMinValue = 0\n        var evenMaxIndexValue\
    \ = 0\n        var evenMinIndexValue = 0\n        var oddMaxIndexValue = 0\n \
    \       var oddMinIndexValue = 0\n        var evenMaxValueIndex = 0\n        var\
    \ evenMinValueIndex = 0\n        var oddMaxValueIndex = 0\n        var oddMinValueIndex\
    \ = 0\n        var evenMaxIndexValueIndex = 0\n        var evenMinIndexValueIndex\
    \ = 0\n        var oddMaxIndexValueIndex = 0\n        var oddMinIndexValueIndex\
    \ = 0\n        var evenMaxValueValueIndex = 0\n        var evenMinValueValueIndex\
    \ = 0\n        var oddMaxValueValueIndex = 0\n        var oddMinValueValueIndex\
    \ = 0\n        var evenMaxIndexIndexValue = 0\n        var evenMinIndexIndexValue\
    \ = 0\n        var oddMaxIndexIndexValue = 0\n        var oddMinIndexIndexValue\
    \ = 0\n        var evenMaxValueValueIndex = 0\n        var evenMinValueValueIndex\
    \ = 0\n        var oddMaxValueValueIndex = 0\n        var oddMinValueValueIndex\
    \ = 0\n        var evenMaxIndexIndexValueIndex = 0\n        var evenMinIndexIndexValueIndex\
    \ = 0\n        var oddMaxIndexIndexValueIndex = 0\n        var oddMinIndexIndexValueIndex\
    \ = 0\n        var evenMaxValueValueIndexIndex = 0\n        var evenMinValueValueIndex\
    \ = 0\n        var oddMaxValueValueIndex = 0\n        var oddMinValueValueIndex\
    \ = 0\n        var evenMaxIndexIndexValueIndex = 0\n        var evenMinIndexIndexValueIndex\
    \ = 0\n        var oddMaxIndexIndexValueIndex = 0\n        var oddMinIndexIndexValueIndex\
    \ = 0\n        var evenMaxValueValueIndexIndex = 0\n        var evenMinValueValueIndex\
    \ = 0\n        var oddMaxValueValueIndex = 0\n        var oddMinValueValueIndex\
    \ = 0\n        var evenMaxIndexIndexValueIndex = 0\n        var evenMinIndexIndexValueIndex\
    \ = 0\n        var oddMaxIndexIndexValueIndex = 0\n        var oddMinIndexIndexValueIndex\
    \ = 0\n        var evenMaxValueValueIndexIndex = 0\n        var evenMinValueValueIndex\
    \ = 0\n        var oddMaxValueValueIndex = 0\n        var oddMinValueValueIndex\
    \ = 0\n        var evenMaxIndexIndexValueIndex = 0\n        var evenMinIndexIndexValueIndex\
    \ = 0\n        var oddMaxIndexIndexValueIndex = 0\n        var oddMinIndexIndexValueIndex\
    \ = 0\n        var ", "        val evens = mutable.Set[Long]()\n        val odds\
    \ = mutable.Set[Long]()\n        val range = (x to y)\n        range.foreach(x\
    \ => {\n            if (x % 2 == 0) {\n                evens += x\n          \
    \  } else {\n                odds += x\n            }\n        })\n        val\
    \ even = evens.max\n        val odd = odds.max\n        if (even > odd) {\n  \
    \          return even\n        } else {\n            return -1\n        }", " \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = Range(x, y)\n        range.foreach { x =>\n            if\
    \ (x % 2 == 0) {\n                evens += x\n            } else {\n         \
    \       odds += x\n            }\n        }\n        if (evens.isEmpty) {\n  \
    \          return -1\n        }\n        if (evens.size == 1) {\n            return\
    \ evens.head\n        }\n        val even = evens.max\n        val odd = odds.max\n\
    \        if (even > odd) {\n            return even\n        } else {\n      \
    \      return odd\n        }", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x to y)\n\
    \        for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ > odd) {\n            return even\n        } else {\n            return -1\n\
    \        }", "        val evens = mutable.ListBuffer[Long]()\n        val odds\
    \ = mutable.ListBuffer[Long]()\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val numsEven = mutable.ListBuffer[Long]()\n        val numsOdd = mutable.ListBuffer[Long]()\n\
    \        for (i <- x until y) {\n            if (i % 2 == 0) {\n             \
    \   evens += i\n            } else {\n                odds += i\n            }\n\
    \        }\n        for (i <- evens ++ odds) {\n            if (i % 2 == 0) {\n\
    \                numsEven += i\n            } else {\n                numsOdd\
    \ += i\n            }\n        }\n        if (numsEven.isEmpty && numsOdd.isEmpty)\
    \ {\n            return -1\n        }\n        if (numsEven.isEmpty) {\n     \
    \       return numsOdd.head\n        }\n        if (numsOdd.isEmpty) {\n     \
    \       return numsEven.head\n        }\n        val even = numsEven.head\n  \
    \      val odd = numsOdd.head\n        if (even > odd) {\n            return even\n\
    \        } else {\n            return odd\n        }", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        range.foreach(x => {\n            if (x % 2 == 0) {\n               \
    \ evens += x\n            } else {\n                odds += x\n            }\n\
    \        })\n        val even = evens.max\n        val odd = odds.max\n      \
    \  if (even < odd) {\n            return even\n        } else {\n            return\
    \ -1\n        }", "        val evens = mutable.ListBuffer[Long]()\n        val\
    \ odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n       \
    \ range.foreach { x =>\n            range.foreach { y =>\n                if (x\
    \ % 2 == 0 && y % 2 == 0) {\n                    evens += x\n                }\
    \ else {\n                    odds += y\n                }\n            }\n  \
    \      }\n        val even = evens.max\n        val odd = odds.max\n        if\
    \ (even > odd) {\n            return even\n        } else {\n            return\
    \ -1\n        }", "        var even = 0\n        var odd = 0\n        var max\
    \ = 0\n        var min = 0\n        for(i <- x to y) {\n            if(i%2 ==\
    \ 0) {\n                even += i\n            } else {\n                odd +=\
    \ i\n            }\n        }\n        if(even > odd) {\n            max = even\n\
    \        } else {\n            max = odd\n        }\n        for(i <- x to y)\
    \ {\n            if(i%2 == 0) {\n                if(i>max) {\n               \
    \     max = i\n                }\n            } else {\n                if(i<min)\
    \ {\n                    min = i\n                }\n            }\n        }\n\
    \        if(max == -1) {\n            return -1\n        }\n        return max",
  "        val evens = x to y by 2\n        val evensSum = evens.sum\n        if (evensSum\
    \ < 0) -1\n        else evens.max", "        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val range = Range(x, y)\n   \
    \     range.foreach(x => if (x % 2 == 0) evens += x; else odds += x)\n       \
    \ val even = evens.max\n        val odd = odds.max\n        if (even > odd) even\
    \ else odd", "        val evens = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n\
    \        val range = Range(x, y)\n        range.foreach(x => if (x % 2 == 0) evens\
    \ += x; else odds += x)\n        val even = evens.max\n        val odd = odds.max\n\
    \        if (even > odd) even else -1", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x to y).filter(_\
    \ % 2 == 0)\n        range.foreach(x => if (x % 2 == 0) evens += x)\n        range.foreach(x\
    \ => if (x % 2 == 1) odds += x)\n        val even = evens.max\n        val odd\
    \ = odds.max\n        if (even < odd) even else -1", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x - y).abs()\n\
    \        val evenRange = range.filter(_ % 2 == 0)\n        val oddRange = range.filter(_\
    \ % 2 == 1)\n        evenRange foreach { x => evens += x }\n        oddRange foreach\
    \ { x => odds += x }\n        val evenMax = evens.max\n        val oddMax = odds.max\n\
    \        if (evenMax < oddMax) {\n            return evenMax\n        } else {\n\
    \            return -1\n        }", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        range.foreach{ i =>\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ > odd) {\n            return even\n        } else {\n            return -1\n\
    \        }", "        val evens = mutable.ListBuffer[Long]()\n        val odds\
    \ = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n        for (i\
    \ <- range) {\n            if (i % 2 == 0) {\n                evens += i\n   \
    \         } else {\n                odds += i\n            }\n        }\n    \
    \    val even = evens.max\n        val odd = odds.max\n        if (even < odd)\
    \ {\n            return even\n        } else {\n            return -1\n      \
    \  }", "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = Range(x, y)\n        range.foreach(x => if (x % 2 == 0) evens\
    \ += x) else {\n            if (x % 2 == 1) odds += x\n        })\n        val\
    \ even = evens.max\n        val odd = odds.max\n        if (even > odd) even else\
    \ odd", "        val evens = x to y by 2\n        val evensSorted = evens.toSeq.sortWith(_\
    \ < _)\n        val evensSortedLength = evensSorted.length\n        if (evensSortedLength\
    \ == 0) -1\n        else evensSorted.last", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        for(i <- x until y){\n\
    \            if((i&1) == 0){\n                evens += i\n            }else{\n\
    \                odds += i\n            }\n        }\n        val even = evens.max\n\
    \        val odd = odds.max\n        if(even > odd){\n            return even\n\
    \        }else{\n            return odd\n        }", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        if (evens.isEmpty) {\n            return -1\n        }\n      \
    \  if (evens.size == 1) {\n            return evens.head\n        }\n        val\
    \ even = evens.max\n        val odd = odds.max\n        if (even > odd) {\n  \
    \          return even\n        } else {\n            return odd\n        }",
  "        var max = 0L\n        var min = 0L\n        var even = 0L\n        var\
    \ odd = 0L\n        for(i <- x until y){\n            val x = i\n            val\
    \ y = i\n            val z = i\n            val a = i\n            val b = i\n\
    \            val c = i\n            val d = i\n            val e = i\n       \
    \     val f = i\n            val g = i\n            val h = i\n            val\
    \ i = i\n            val j = i\n            val k = i\n            val l = i\n\
    \            val m = i\n            val n = i\n            val o = i\n       \
    \     val p = i\n            val q = i\n            val r = i\n            val\
    \ s = i\n            val t = i\n            val u = i\n            val v = i\n\
    \            val w = i\n            val x = i\n            val y = i\n       \
    \     val z = i\n            val a = i\n            val b = i\n            val\
    \ c = i\n            val d = i\n            val e = i\n            val f = i\n\
    \            val g = i\n            val h = i\n            val i = i\n       \
    \     val j = i\n            val k = i\n            val l = i\n            val\
    \ m = i\n            val n = i\n            val o = i\n            val p = i\n\
    \            val q = i\n            val r = i\n            val s = i\n       \
    \     val t = i\n            val u = i\n            val v = i\n            val\
    \ w = i\n            val x = i\n            val y = i\n            val z = i\n\
    \            val a = i\n            val b = i\n            val c = i\n       \
    \     val d = i\n            val e = i\n            val f = i\n            val\
    \ g = i\n            val h = i\n            val i = i\n            val j = i\n\
    \            val k = i\n            val l = i\n            val m = i\n       \
    \     val n = i\n            val o = i\n            val p = i\n            val\
    \ q = i\n            val r = i\n            val s = i\n            val t = i\n\
    \            val u = i\n            val v = i\n            val w = i\n       \
    \     val x = i\n            val y = i\n            val z = i\n            val\
    \ a = i\n            val b = i\n            val c = i\n            val d = i\n\
    \            val e = i\n            val f = i\n            val g = i\n       \
    \     val h = i\n            val i = i\n            val j = i\n            val\
    \ k = i\n            val l = i\n            val m = i\n            val n = i\n\
    \            val o = i\n            val p = ", "        val evens = mutable.ListBuffer[Long]()\n\
    \        for (i <- x until y) {\n            if (i % 2 == 0) {\n             \
    \   evens += i\n            }\n        }\n        if (evens.isEmpty) {\n     \
    \       return -1\n        } else {\n            val max = evens.max\n       \
    \     if (max % 2 == 0) {\n                return max\n            } else {\n\
    \                return -1\n            }\n        }", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ > odd) {\n            return even\n        } else {\n            return -1\n\
    \        }", "        var even = 0\n        var odd = 0\n        var result =\
    \ -1\n        while(x <= y) {\n            if((x % 2) == 0) {\n              \
    \  even += x\n            }\n            else {\n                odd += x\n  \
    \          }\n            x += 1\n        }\n        if(even > odd) {\n      \
    \      result = even\n        }\n        else {\n            result = odd\n  \
    \      }\n        return result", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        range.foreach(x => if (x % 2 == 0) evens += x else odds += x)\n     \
    \   val even = evens.max\n        val odd = odds.max\n        if (even > odd)\
    \ even else odd", "        val evens = mutable.ListBuffer[Long]()\n        val\
    \ odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n       \
    \ for (i <- range) {\n            if (i % 2 == 0) {\n                evens +=\
    \ i\n            } else {\n                odds += i\n            }\n        }\n\
    \        val even = evens.max\n        val odd = odds.max\n        if (even >\
    \ odd) {\n            return even\n        } else {\n            return -1\n \
    \       }", "        val evens = mutable.ListBuffer[Long]()\n        val odds\
    \ = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n        for (i\
    \ <- range) {\n            if (i % 2 == 0) {\n                evens += i\n   \
    \         } else {\n                odds += i\n            }\n        }\n    \
    \    val even = evens.max\n        val odd = odds.max\n        if (even > odd)\
    \ {\n            return even\n        } else {\n            return -1\n      \
    \  }", "        val evens = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n\
    \        val range = (x - y).abs \n        val evenRange = range.filter(_ % 2\
    \ == 0)\n        val oddRange = range.filter(_ % 2 != 0)\n        evenRange.foreach(x\
    \ => evens += x)\n        oddRange.foreach(x => odds += x)\n        evens.max",
  "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = Range(x, y)\n        range.foreach(x => if (x % 2 == 0) evens\
    \ += x; else odds += x)\n        val even = evens.max\n        val odd = odds.max\n\
    \        if (even > odd) even else -1", "        val evens = mutable.ListBuffer[Long]()\n\
    \        for (i <- x until y) {\n            if (i % 2 == 0) {\n             \
    \   evens += i\n            }\n        }\n        evens.max", "        var result\
    \ = -1\n        var low = math.min(x, y)\n        var high = math.max(x, y)\n\
    \        var mid = math.floor(low + (high - low) / 2)\n        while (low <= high)\
    \ {\n            if (math.mod(mid, 2) == 0) {\n                result = mid\n\
    \                break\n            }\n            mid = math.ceil(mid)\n    \
    \    }\n        return result", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        range.foreach(x => {\n            if (x % 2 == 0) {\n               \
    \ evens += x\n            } else {\n                odds += x\n            }\n\
    \        })\n        val even = evens.max\n        val odd = odds.max\n      \
    \  if (even < odd) {\n            return even\n        } else {\n            return\
    \ -1\n        }", "        val evens = mutable.ListBuffer[Long]()\n        val\
    \ odds = mutable.ListBuffer[Long]()\n        for (i <- x until y) {\n        \
    \    if (i % 2 == 0) {\n                evens += i\n            } else {\n   \
    \             odds += i\n            }\n        }\n        if (evens.isEmpty)\
    \ {\n            return -1\n        }\n        if (evens.size == 1) {\n      \
    \      return evens.head\n        }\n        val maxEven = evens.max\n       \
    \ val maxOdd = odds.max\n        if (maxEven % 2 == 0) {\n            return maxEven\n\
    \        } else {\n            return maxOdd\n        }", "        val evens =\
    \ mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n        val even\
    \ = mutable.Set[Long]()\n        val odd = mutable.Set[Long]()\n        val range\
    \ = Range(x, y)\n        range.foreach(x => {\n            if (x % 2 == 0) {\n\
    \                evens += x\n            } else {\n                odds += x\n\
    \            }\n        })\n        evens.foreach(x => {\n            if (x %\
    \ 2 == 0) {\n                even += x\n            }\n        })\n        odds.foreach(x\
    \ => {\n            if (x % 2 == 1) {\n                odd += x\n            }\n\
    \        })\n        if (even.size == 0 && odd.size == 0) {\n            return\
    \ -1\n        }\n        if (even.size == 0) {\n            return odd.head\n\
    \        }\n        if (odd.size == 0) {\n            return even.head\n     \
    \   }\n        if (even.size == odd.size) {\n            val result = even.head\n\
    \            even.foreach(x => {\n                if (x % 2 == 0) {\n        \
    \            result = x\n                }\n            })\n            result\n\
    \        }", "        val evens = mutable.ListBuffer[Long]()\n        val odds\
    \ = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n        for (i\
    \ <- range) {\n            if (i % 2 == 0) {\n                evens += i\n   \
    \         } else {\n                odds += i\n            }\n        }\n    \
    \    if (evens.isEmpty) {\n            return -1\n        }\n        if (evens.size\
    \ > odds.size) {\n            return evens.last\n        } else {\n          \
    \  return -1\n        }", "        val evens = mutable.ListBuffer[Long]()\n  \
    \      for (i <- x until y){\n            if (i % 2 == 0){\n                evens\
    \ += i\n            }\n        }\n        evens.max", "        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val range = Range(x, y)\n   \
    \     for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ < odd) {\n            return even\n        } else {\n            return -1\n\
    \        }", "        val evens = mutable.ListBuffer[Long]()\n        val odds\
    \ = mutable.ListBuffer[Long]()\n        val range = (x - y).toInt\n        val\
    \ evenRange = range / 2\n        val oddRange = range % 2\n        for (i <- 1\
    \ to range) {\n            if (i % 2 == 0) {\n                evens += i\n   \
    \         } else {\n                odds += i\n            }\n        }\n    \
    \    val evenMax = evens.max\n        val oddMax = odds.max\n        if (evenMax\
    \ < oddMax) {\n            return evenMax\n        } else {\n            return\
    \ -1\n        }", "        val evens = mutable.ListBuffer[Long]()\n        val\
    \ odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n       \
    \ for (i <- range) {\n            if (i % 2 == 0) {\n                evens +=\
    \ i\n            } else {\n                odds += i\n            }\n        }\n\
    \        val even = evens.max\n        val odd = odds.max\n        if (even <\
    \ odd) {\n            return even\n        } else {\n            return -1\n \
    \       }", "        var even = 0\n        var odd = 0\n        var evenMax =\
    \ 0\n        var oddMax = 0\n        var evenMin = Long.MaxValue\n        var\
    \ oddMin = Long.MinValue\n        var evenMaxIndex = -1\n        var oddMaxIndex\
    \ = -1\n        var evenMinIndex = -1\n        var oddMinIndex = -1\n        var\
    \ evenMaxCount = -1\n        var oddMaxCount = -1\n        var evenMinCount =\
    \ -1\n        var oddMinCount = -1\n        var evenMaxSum = -1\n        var oddMaxSum\
    \ = -1\n        var evenMinSum = -1\n        var oddMinSum = -1\n        var evenMaxAvg\
    \ = 0\n        var oddMaxAvg = 0\n        var evenMinAvg = 0\n        var oddMinAvg\
    \ = 0\n        var evenMaxSumSquare = 0\n        var oddMaxSumSquare = 0\n   \
    \     var evenMinSumSquare = 0\n        var oddMinSumSquare = 0\n        var evenMaxSumSquareAvg\
    \ = 0\n        var oddMaxSumSquareAvg = 0\n        var evenMinSumSquareAvg = 0\n\
    \        var oddMinSumSquareAvg = 0\n        var evenMaxSumSquareSum = 0\n   \
    \     var oddMaxSumSquareSum = 0\n        var evenMinSumSquareSum = 0\n      \
    \  var oddMinSumSquareSum = 0\n        var evenMaxSumSquareAvg = 0\n        var\
    \ oddMaxSumSquareAvg = 0\n        var evenMinSumSquareAvg = 0\n        var oddMinSumSquareAvg\
    \ = 0\n        var evenMaxSumSquareSum = 0\n        var oddMaxSumSquareSum = 0\n\
    \        var evenMinSumSquareSum = 0\n        var oddMinSumSquareSum = 0\n   \
    \     var evenMaxSumSquareAvg = 0\n        var oddMaxSumSquareAvg = 0\n      \
    \  var evenMinSumSquareAvg = 0\n        var oddMinSumSquareAvg = 0\n        var\
    \ evenMaxSumSquareSum = 0\n        var oddMaxSumSquareSum = 0\n        var evenMinSumSquareSum\
    \ = 0\n        var oddMinSumSquareSum = 0\n        var evenMaxSumSquareAvg = 0\n\
    \        var oddMaxSumSquareAvg = 0\n        var evenMinSumSquareAvg = 0\n   \
    \     var oddMinSumSquareAvg = 0\n        var evenMaxSumSquareSum = 0\n      \
    \  var oddMaxSumSquareSum = 0\n        var evenMinSumSquareSum = 0\n        var\
    \ oddMinSumSquareSum = 0\n        var evenMaxSumSquareAvg = 0\n        var oddMaxSumSquareAvg\
    \ = 0\n        var evenMinSumSquareAvg = 0\n        var oddMinSumSquareAvg = 0\n\
    \        var evenMaxSumSquareSum = 0\n        var oddMaxSumSquareSum = 0\n   \
    \     var evenMinSumSquareSum = 0\n        var oddMinSumSquareSum = 0\n      \
    \  var evenMaxSumSquareAvg = 0\n        var oddMaxSumSquareAvg = 0\n        var\
    \ evenMinSumSquareAvg = 0\n        var oddMinSumSquareAvg = 0\n", "        val\
    \ evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = Range(x, y)\n        range.foreach(x => {\n            if\
    \ (x % 2 == 0) {\n                evens += x\n            } else {\n         \
    \       odds += x\n            }\n        })\n        val even = evens.max\n \
    \       val odd = odds.max\n        if (even > odd) {\n            return even\n\
    \        } else {\n            return -1\n        }", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        range.foreach { x =>\n            if (x % 2 == 0) {\n               \
    \ evens += x\n            } else {\n                odds += x\n            }\n\
    \        }\n        evens.foreach { x =>\n            if (x % 2 == 0) {\n    \
    \            even += x\n            } else {\n                odd += x\n     \
    \       }\n        }\n        val even = even.max\n        val odd = odd.max\n\
    \        if (even > odd) {\n            return even\n        } else {\n      \
    \      return -1\n        }", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        range.foreach(x => {\n            if (x % 2 == 0) {\n               \
    \ evens += x\n            } else {\n                odds += x\n            }\n\
    \        })\n        val even = evens.max\n        val odd = odds.max\n      \
    \  if (even > odd) {\n            return even\n        } else {\n            return\
    \ -1\n        }", "        var max = 0\n        var min = 0\n        var even\
    \ = 0\n        var odd = 0\n        var evenMax = 0\n        var evenMin = 0\n\
    \        var oddMax = 0\n        var oddMin = 0\n        var evenMaxCount = 0\n\
    \        var evenMinCount = 0\n        var oddMaxCount = 0\n        var oddMinCount\
    \ = 0\n        var evenMaxCount2 = 0\n        var evenMinCount2 = 0\n        var\
    \ oddMaxCount2 = 0\n        var oddMinCount2 = 0\n        var evenMaxCount3 =\
    \ 0\n        var evenMinCount3 = 0\n        var oddMaxCount3 = 0\n        var\
    \ oddMinCount3 = 0\n        var evenMaxCount4 = 0\n        var evenMinCount4 =\
    \ 0\n        var oddMaxCount4 = 0\n        var oddMinCount4 = 0\n        var evenMaxCount5\
    \ = 0\n        var evenMinCount5 = 0\n        var oddMaxCount5 = 0\n        var\
    \ oddMinCount5 = 0\n        var evenMaxCount6 = 0\n        var evenMinCount6 =\
    \ 0\n        var oddMaxCount6 = 0\n        var oddMinCount6 = 0\n        var evenMaxCount7\
    \ = 0\n        var evenMinCount7 = 0\n        var oddMaxCount7 = 0\n        var\
    \ oddMinCount7 = 0\n        var evenMaxCount8 = 0\n        var evenMinCount8 =\
    \ 0\n        var oddMaxCount8 = 0\n        var oddMinCount8 = 0\n        var evenMaxCount9\
    \ = 0\n        var evenMinCount9 = 0\n        var oddMaxCount9 = 0\n        var\
    \ oddMinCount9 = 0\n        var evenMaxCount10 = 0\n        var evenMinCount10\
    \ = 0\n        var oddMaxCount10 = 0\n        var oddMinCount10 = 0\n        var\
    \ evenMaxCount11 = 0\n        var evenMinCount11 = 0\n        var oddMaxCount11\
    \ = 0\n        var oddMinCount11 = 0\n        var evenMaxCount12 = 0\n       \
    \ var evenMinCount12 = 0\n        var oddMaxCount12 = 0\n        var oddMinCount12\
    \ = 0\n        var evenMaxCount13 = 0\n        var evenMinCount13 = 0\n      \
    \  var oddMaxCount13 = 0\n        var oddMinCount13 = 0\n        var evenMaxCount14\
    \ = 0\n        var evenMinCount14 = 0\n        var oddMaxCount14 = 0\n       \
    \ var oddMinCount14 = 0\n        var evenMaxCount15 = 0\n        var evenMinCount15\
    \ = 0\n        var oddMaxCount15 = 0\n        var oddMinCount15 = 0\n        var\
    \ evenMaxCount16 = 0\n        var evenMinCount16 = 0\n        var oddMaxCount16\
    \ = 0\n        var oddMinCount16 = 0\n        var evenMaxCount17 = 0\n       \
    \ var evenMinCount17 = 0\n        var oddMaxCount17 = 0\n        var oddMinCount17\
    \ = 0\n        var evenMaxCount", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x to y).filter(_\
    \ % 2 == 0)\n        range.foreach(x => if (x % 2 == 0) evens += x)\n        range.foreach(x\
    \ => if (x % 2 == 1) odds += x)\n        val even = evens.max\n        val odd\
    \ = odds.max\n        if (even > odd) even else odd", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x to y)\n\
    \        range.foreach(x => {\n            if (x % 2 == 0) {\n               \
    \ evens += x\n            } else {\n                odds += x\n            }\n\
    \        })\n        val even = evens.max\n        val odd = odds.max\n      \
    \  if (even > odd) {\n            return even\n        } else {\n            return\
    \ -1\n        }", "        val evens = mutable.ListBuffer[Long]()\n        val\
    \ odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n       \
    \ for (i <- range) {\n            if (i % 2 == 0) {\n                evens +=\
    \ i\n            } else {\n                odds += i\n            }\n        }\n\
    \        val even = evens.max\n        val odd = odds.max\n        if (even >\
    \ odd) {\n            return even\n        } else {\n            return -1\n \
    \       }", "        val evens = mutable.ListBuffer[Long]()\n        val odds\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOdds = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsSet = mutable.Set[Long]()\n        val evensAndOddsSetSet\
    \ = mutable.Set[Long]()\n        val evensAndOddsSetSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSetSet = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSet\
    \ = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSetSetSetSetSet = mutable.Set[Long]()\n       \
    \ val evensAndOddsSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n        val\
    \ evensAndOddsSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSetSetSetSetSet\
    \ = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSetSetSetSetSetSet\
    \ = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSetSetSetSetSetSetSet\
    \ = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSetSetSetSetSetSetSet\
    \ = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSetSetSetSetSetSetSet\
    \ = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSetSetSetSetSetSetSet\
    \ = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSetSetSetSetSetSetSetSet\
    \ = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSetSetSetSetSetSetSetSet\
    \ = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSetSetSetSetSetSetSetSet\
    \ = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSetSetSetSetSetSetSetSet\
    \ = mutable.Set[Long]()\n        val evensAndOddsSetSetSet", "        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = Range(x, y)\n        range.foreach(x => if (x % 2 == 0) evens\
    \ += x else odds += x)\n        val even = evens.max\n        val odd = odds.max\n\
    \        if (even > odd) even else odd", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        for(i <- x until y) {\n\
    \            if(i%2 == 0) {\n                evens += i\n            } else {\n\
    \                odds += i\n            }\n        }\n        val even = evens.max\n\
    \        val odd = odds.max\n        if(even > odd) {\n            return even\n\
    \        } else {\n            return -1\n        }", "        var maxEven = math.max(x,\
    \ y)\n        var minEven = math.min(x, y)\n        var even = math.min(minEven,\
    \ maxEven)\n        var evens = math.max(minEven, maxEven)\n        var evensCount\
    \ = math.pow(2, evens)\n        var evensSum = evensCount - 1\n        var evensSum2\
    \ = evensSum * evensSum\n        var evensSum3 = evensSum2 * evensSum\n      \
    \  var evensSum4 = evensSum3 * evensSum\n        var evensSum5 = evensSum4 * evensSum\n\
    \        var evensSum6 = evensSum5 * evensSum\n        var evensSum7 = evensSum6\
    \ * evensSum\n        var evensSum8 = evensSum7 * evensSum\n        var evensSum9\
    \ = evensSum8 * evensSum\n        var evensSum10 = evensSum9 * evensSum\n    \
    \    var evensSum11 = evensSum10 * evensSum\n        var evensSum12 = evensSum11\
    \ * evensSum\n        var evensSum13 = evensSum12 * evensSum\n        var evensSum14\
    \ = evensSum13 * evensSum\n        var evensSum15 = evensSum14 * evensSum\n  \
    \      var evensSum16 = evensSum15 * evensSum\n        var evensSum17 = evensSum16\
    \ * evensSum\n        var evensSum18 = evensSum17 * evensSum\n        var evensSum19\
    \ = evensSum18 * evensSum\n        var evensSum20 = evensSum19 * evensSum\n  \
    \      var evensSum21 = evensSum20 * evensSum\n        var evensSum22 = evensSum21\
    \ * evensSum\n        var evensSum23 = evensSum22 * evensSum\n        var evensSum24\
    \ = evensSum23 * evensSum\n        var evensSum25 = evensSum24 * evensSum\n  \
    \      var evensSum26 = evensSum25 * evensSum\n        var evensSum27 = evensSum26\
    \ * evensSum\n        var evensSum28 = evensSum27 * evensSum\n        var evensSum29\
    \ = evensSum28 * evensSum\n        var evensSum30 = evensSum29 * evensSum\n  \
    \      var evensSum31 = evensSum30 * evensSum\n        var evensSum32 = evensSum31\
    \ * evensSum\n        var evensSum33", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x to y).filter(_\
    \ % 2 == 0)\n        for (i <- range) {\n            if (i % 2 == 0) {\n     \
    \           evens += i\n            } else {\n                odds += i\n    \
    \        }\n        }\n        val even = evens.max\n        val odd = odds.max\n\
    \        if (even > odd) {\n            return even\n        } else {\n      \
    \      return -1\n        }", "        val evens = mutable.Set[Long]()\n     \
    \   val odds = mutable.Set[Long]()\n        val range = (x to y)\n        for\
    \ (i <- range) {\n            if (i % 2 == 0) {\n                evens += i\n\
    \            } else {\n                odds += i\n            }\n        }\n \
    \       val even = evens.max\n        val odd = odds.max\n        if (even > odd)\
    \ {\n            return even\n        } else {\n            return -1\n      \
    \  }", "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        for(i <- x until y){\n            if(i%2 == 0){\n                evens\
    \ += i\n            }else{\n                odds += i\n            }\n       \
    \ }\n        val even = evens.max\n        val odd = odds.max\n        if(even\
    \ > odd){\n            return even\n        }else{\n            return odd\n \
    \       }", "        val evens = mutable.ListBuffer[Long]()\n        val odds\
    \ = mutable.ListBuffer[Long]()\n        val range = (x - y).abs \n        val\
    \ even = (range / 2).toInt\n        val odd = (range / 2).toInt\n        val evens\
    \ = for (i <- 0 until even) yield {\n            val x = x + i\n            if\
    \ (x % 2 == 0) x else -1\n        }\n        val odds = for (i <- 0 until odd)\
    \ yield {\n            val x = x + i\n            if (x % 2 == 1) x else -1\n\
    \        }\n        val evens = evens.toList\n        val odds = odds.toList\n\
    \        val even = evens.max\n        val odd = odds.max\n        if (even >\
    \ odd) even else odd", "        val evens = x to y by 2\n        val evensSorted\
    \ = evens.toList\n        val evensSorted = evensSorted.sortBy(x => x)\n     \
    \   val evensSorted = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_\
    \ < y)\n        val evensSorted = evensSorted.reverse\n        val evensSorted\
    \ = evensSorted.takeWhile(_ < y)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ < y)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_ < y)\n\
    \        val evensSorted = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_\
    \ < y)\n        val evensSorted = evensSorted.reverse\n        val evensSorted\
    \ = evensSorted.takeWhile(_ < y)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ < y)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_ < y)\n\
    \        val evensSorted = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_\
    \ < y)\n        val evensSorted = evensSorted.reverse\n        val evensSorted\
    \ = evensSorted.takeWhile(_ < y)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ < y)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_ < y)\n\
    \        val evensSorted = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_\
    \ < y)\n        val evensSorted = evensSorted.reverse\n        val evensSorted\
    \ = evensSorted.takeWhile(_ < y)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ < y)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_ < y)\n\
    \        val evensSorted = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_\
    \ < y)", "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = Range(x, y)\n        range.foreach { i =>\n            if\
    \ (i % 2 == 0) {\n                evens += i\n            } else {\n         \
    \       odds += i\n            }\n        }\n        val even = evens.max\n  \
    \      val odd = odds.max\n        if (even > odd) {\n            return even\n\
    \        } else {\n            return -1\n        }", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x - y).abs\
    \ \n        val even = (x - y).abs % 2 == 0\n        val odd = (x - y).abs % 2\
    \ != 0\n        \n        for(i <- 1 to range){\n            if((x - i).abs %\
    \ 2 == 0 && even){\n                evens += i\n            }\n            else\
    \ if((x - i).abs % 2 != 0 && odd){\n                odds += i\n            }\n\
    \        }\n        \n        if(evens.isEmpty){\n            return -1\n    \
    \    }\n        else if(evens.size == 1){\n            return evens.head\n   \
    \     }\n        else{\n            val maxEven = evens.max\n            val maxOdd\
    \ = odds.max\n            \n            if(maxEven > maxOdd){\n              \
    \  return maxEven\n            }\n            else{\n                return maxOdd\n\
    \            }\n        }", "        val evens = mutable.ListBuffer[Long]()\n\
    \        for (i <- x until y) {\n            if (i % 2 == 0) {\n             \
    \   evens += i\n            }\n        }\n        if (evens.isEmpty) {\n     \
    \       return -1\n        }\n        evens.max", "        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val range = (x - y).abs \n  \
    \      val evenRange = range.filter(_ % 2 == 0)\n        val oddRange = range.filter(_\
    \ % 2 != 0)\n        evenRange foreach { x => evens += x }\n        oddRange foreach\
    \ { x => odds += x }\n        val evensSize = evens.size\n        val oddsSize\
    \ = odds.size\n        if (evensSize == 0 && oddsSize == 0) {\n            return\
    \ -1\n        }\n        if (evensSize == 0) {\n            return odds.head\n\
    \        }\n        if (oddsSize == 0) {\n            return evens.head\n    \
    \    }\n        val maxEven = evens.max\n        val maxOdd = odds.max\n     \
    \   if (maxEven < maxOdd) {\n            return maxEven\n        }\n        return\
    \ maxOdd", "        val evens = mutable.ListBuffer[Long]()\n        val odds =\
    \ mutable.ListBuffer[Long]()\n        val range = (x to y).filter(_ % 2 == 0)\n\
    \        for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ < odd) {\n            return even\n        } else {\n            return -1\n\
    \        }", "        val evens = mutable.ListBuffer[Long]()\n        val odds\
    \ = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n        range.foreach\
    \ { x =>\n            if (x % 2 == 0) {\n                evens += x\n        \
    \    } else {\n                odds += x\n            }\n        }\n        val\
    \ even = evens.max\n        val odd = odds.max\n        if (even > odd) {\n  \
    \          even\n        } else {\n            odd\n        }", "        val evens\
    \ = mutable.ListBuffer[Long]()\n        for (i <- x until y) {\n            if\
    \ (i % 2 == 0) {\n                evens += i\n            }\n        }\n     \
    \   if (evens.isEmpty) {\n            return -1\n        }\n        evens.max",
  "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = Range(x, y)\n        for (i <- range) {\n            if (i\
    \ % 2 == 0) {\n                evens += i\n            } else {\n            \
    \    odds += i\n            }\n        }\n        val even = evens.max\n     \
    \   val odd = odds.max\n        if (even > odd) {\n            return even\n \
    \       } else {\n            return -1\n        }", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ > odd) {\n            return even\n        } else {\n            return -1\n\
    \        }", "        val evens = mutable.ListBuffer[Long]()\n        val odds\
    \ = mutable.ListBuffer[Long]()\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val num = mutable.ListBuffer[Long]()\n        val evenNum = mutable.ListBuffer[Long]()\n\
    \        val oddNum = mutable.ListBuffer[Long]()\n        val numNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNum = mutable.ListBuffer[Long]()\n        val oddNumNum =\
    \ mutable.ListBuffer[Long]()\n        val numNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNum = mutable.ListBuffer[Long]()\n        val oddNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val numNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNumNum = mutable.ListBuffer[Long]()\n        val oddNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val numNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val oddNumNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val numNumNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val\
    \ oddNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val numNumNumNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val evenNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val oddNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val\
    \ numNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val evenNumNumNumNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val oddNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val numNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val\
    \ evenNumNumNumNumNumNumNumNum = mutable.ListBuffer[Long", "        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = Range(x, y)\n        for (i <- range) {\n            if (i\
    \ % 2 == 0) {\n                evens += i\n            } else {\n            \
    \    odds += i\n            }\n        }\n        val even = evens.max\n     \
    \   val odd = odds.max\n        if (even > odd) {\n            return even\n \
    \       } else {\n            return -1\n        }", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        range.foreach { i =>\n            if (i % 2 == 0) {\n               \
    \ evens += i\n            } else {\n                odds += i\n            }\n\
    \        }\n        val even = evens.max\n        val odd = odds.max\n       \
    \ if (even > odd) {\n            return even\n        } else {\n            return\
    \ -1\n        }", "        val evens = mutable.ListBuffer[Long]()\n        val\
    \ odds = mutable.ListBuffer[Long]()\n        val range = (x to y).filter(_ % 2\
    \ == 0)\n        for (i <- range) {\n            if (i % 2 == 0) {\n         \
    \       evens += i\n            } else {\n                odds += i\n        \
    \    }\n        }\n        val even = evens.max\n        val odd = odds.max\n\
    \        if (even < odd) {\n            return even\n        } else {\n      \
    \      return -1\n        }", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        if (evens.isEmpty) {\n            return -1\n        } else if\
    \ (evens.size == 1) {\n            return evens.head\n        } else {\n     \
    \       val maxEven = evens.max\n            val maxOdd = odds.max\n         \
    \   if (maxEven > maxOdd) {\n                return maxEven\n            } else\
    \ {\n                return maxOdd\n            }\n        }", "        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = Range(x, y)\n        range.foreach(x => if (x % 2 == 0) evens\
    \ += x; else odds += x)\n        val even = evens.max\n        val odd = odds.max\n\
    \        if (even > odd) even else odd", "        val evens = x to y by 2\n  \
    \      val evensCount = evens.count(_ % 2 == 0)\n        if (evensCount == 0)\
    \ {\n            return -1\n        }\n        val maxEven = evens.max\n     \
    \   if (maxEven % 2 == 0) {\n            return maxEven\n        }\n        return\
    \ -1", "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = Range(x, y)\n        for (i <- range) {\n            if (i\
    \ % 2 == 0) {\n                evens += i\n            } else {\n            \
    \    odds += i\n            }\n        }\n        val even = evens.max\n     \
    \   val odd = odds.max\n        if (even > odd) {\n            return even\n \
    \       } else {\n            return -1\n        }", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        range.foreach(x => {\n            if (x % 2 == 0) {\n               \
    \ evens += x\n            } else {\n                odds += x\n            }\n\
    \        })\n        val even = evens.max\n        val odd = odds.max\n      \
    \  if (even > odd) {\n            return even\n        } else {\n            return\
    \ -1\n        }", "        val evens = mutable.ListBuffer[Long]()\n        val\
    \ odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n       \
    \ for (i <- range) {\n            if (i % 2 == 0) {\n                evens +=\
    \ i\n            } else {\n                odds += i\n            }\n        }\n\
    \        if (evens.isEmpty) {\n            return -1\n        }\n        if (evens.size\
    \ == 1) {\n            return evens.head\n        }\n        val maxEven = evens.max\n\
    \        if (odds.length == 1) {\n            return maxEven\n        }\n    \
    \    val maxOdd = odds.max\n        if (maxEven > maxOdd) {\n            return\
    \ maxEven\n        } else {\n            return maxOdd\n        }", "        val\
    \ evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (x - y).abs \n        val evenRange = range / 2\n       \
    \ val oddRange = range % 2\n        val even = x to evenRange\n        val odd\
    \ = x to oddRange\n        evens += even\n        odds += odd\n        val evens\
    \ = evens.toList\n        val odds = odds.toList\n        evens.sortWith(_ < _)\n\
    \        odds.sortWith(_ < _)\n        val evens = evens.last\n        val odds\
    \ = odds.last\n        if (evens.isEmpty) {\n            return -1\n        }\n\
    \        if (evens.last % 2 == 0) {\n            return evens.last\n        }\n\
    \        if (odds.last % 2 == 0) {\n            return odds.last\n        }\n\
    \        if (evens.last < evens.last) {\n            return evens.last\n     \
    \   }\n        if (odds.last < odds.last) {\n            return odds.last\n  \
    \      }\n        if (evens.last < evens.last) {\n            return evens.last\n\
    \        }\n        if (odds.last < odds.last) {\n            return odds.last\n\
    \        }\n        if (evens.last < evens.last) {\n            return evens.last\n\
    \        }\n        if (odds.last < odds.last) {\n            return odds.last\n\
    \        }\n        if (evens.last < evens.last) {\n            return evens.last\n\
    \        }\n        if (odds.last < odds.last) {\n            return odds.last\n\
    \        }\n        if (evens.last < evens.last) {\n            return evens.last\n\
    \        }\n        if (odds.last < odds.last) {\n            return odds.last\n\
    \        }\n        if (evens.last < evens.last) {\n            return evens.last\n\
    \        }\n        if (odds.last < odds.last) {\n            return odds.last\n\
    \        }\n        if (evens.last < evens.last) {\n            return evens.last\n\
    \        }\n        if (odds.last < odds.last) {\n            return odds.last\n\
    \        }\n        if (evens.last < evens.last) {\n            return evens.last\n\
    \        }\n        if (odds.last < odds.last) {\n            return odds.last\n\
    \        }\n        if (evens.last < evens.last) {\n            return evens.last\n\
    \        }\n        if (odds.last < odds.last) {\n            return odds.last\n\
    \        }\n        if (evens.last < evens.last) {\n            return evens.last\n\
    \        }\n        if (odds.last < odds.last) {\n            return odds.last\n\
    \        }\n        if (evens.last < evens.last) {\n            return evens.last\n\
    \        }\n", "        val evens = x filter (_ % 2 == 0)\n        val odds =\
    \ x filter (_ % 2 != 0)\n        val evensAndOdds = evens ++ odds\n        val\
    \ evensAndOddsSet = evensAndOdds.toSet\n        val evensAndOddsSetSize = evensAndOddsSet.size\n\
    \        val evensAndOddsSetSize = evensAndOddsSet.size\n        val evensAndOddsSetSize\
    \ = evensAndOddsSet.size\n        val evensAndOddsSetSize = evensAndOddsSet.size\n\
    \        val evensAndOddsSetSize = evensAndOddsSet.size\n        val evensAndOddsSetSize\
    \ = evensAndOddsSet.size\n        val evensAndOddsSetSize = evensAndOddsSet.size\n\
    \        val evensAndOddsSetSize = evensAndOddsSet.size\n        val evensAndOddsSetSize\
    \ = evensAndOddsSet.size\n        val evensAndOddsSetSize = evensAndOddsSet.size\n\
    \        val evensAndOddsSetSize = evensAndOddsSet.size\n        val evensAndOddsSetSize\
    \ = evensAndOddsSet.size\n        val evensAndOddsSetSize = evensAndOddsSet.size\n\
    \        val evensAndOddsSetSize = evensAndOddsSet.size\n        val evensAndOddsSetSize\
    \ = evensAndOddsSet.size\n        val evensAndOddsSetSize = evensAndOddsSet.size\n\
    \        val evensAndOddsSetSize = evensAndOddsSet.size\n        val evensAndOddsSetSize\
    \ = evensAndOddsSet.size\n        val evensAndOddsSetSize = evensAndOddsSet.size\n\
    \        val evensAndOddsSetSize = evensAndOddsSet.size\n        val evensAndOddsSetSize\
    \ = evensAndOddsSet.size\n        val evensAndOddsSetSize = evensAndOddsSet.size\n\
    \        val evensAndOddsSetSize = evensAndOddsSet.size\n        val evensAndOddsSetSize\
    \ = evensAndOddsSet.size\n        val evensAndOddsSetSize = evensAndOddsSet.size\n\
    \        val evensAndOddsSetSize = evensAndOddsSet.size\n        val evensAndOddsSetSize\
    \ = evensAndOddsSet", "        val evens = mutable.Set[Long]()\n        val odds\
    \ = mutable.Set[Long]()\n        val range = Range(x, y)\n        range.foreach(x\
    \ => if (x % 2 == 0) evens += x) else {\n            if (x % 2 == 1) odds += x\n\
    \        })\n        val even = evens.max\n        val odd = odds.max\n      \
    \  if (even > odd) even else odd", "        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val range = Range(x, y)\n   \
    \     range.foreach(x => if (x % 2 == 0) evens += x)\n        range.foreach(x\
    \ => if (x % 2 != 0) odds += x)\n        val even = evens.max\n        val odd\
    \ = odds.max\n        if (even > odd) even else odd", "        var biggest = y\n\
    \        var even = 1\n        while(even <= x) {\n            biggest = biggest\
    \ + even\n            even = even + 2\n        }\n        if(biggest > x) {\n\
    \            biggest = -1\n        }\n        return biggest", "        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (x - y).abs \n        val even = (range / 2).toInt\n    \
    \    val odd = (range / 2).toInt\n        val evens = x until y by even\n    \
    \    val odds = x until y by odd\n        evens.foreach(x => evens += x)\n   \
    \     odds.foreach(x => odds += x)\n        evens.max", "        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val range = Range(x, y)\n   \
    \     range.foreach(x => if (x % 2 == 0) evens += x; else odds += x)\n       \
    \ val even = evens.max\n        val odd = odds.max\n        if (even > odd) even\
    \ else odd", "        val evens = mutable.ListBuffer[Long]()\n        val odds\
    \ = mutable.ListBuffer[Long]()\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val num = mutable.ListBuffer[Long]()\n        val evenNum = mutable.ListBuffer[Long]()\n\
    \        val oddNum = mutable.ListBuffer[Long]()\n        val numNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNum = mutable.ListBuffer[Long]()\n        val oddNumNum =\
    \ mutable.ListBuffer[Long]()\n        val numNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNum = mutable.ListBuffer[Long]()\n        val oddNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val numNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNumNum = mutable.ListBuffer[Long]()\n        val oddNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val numNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val oddNumNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val numNumNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val\
    \ oddNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val numNumNumNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val evenNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val oddNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val\
    \ numNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val evenNumNumNumNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val oddNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val numNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val\
    \ evenNumNumNumNumNumNumNumNum = mutable.ListBuffer[Long", "        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = Range(x, y)\n        for (i <- range) {\n            if (i\
    \ % 2 == 0) {\n                evens += i\n            } else {\n            \
    \    odds += i\n            }\n        }\n        val even = evens.max\n     \
    \   val odd = odds.max\n        if (even > odd) {\n            return even\n \
    \       } else {\n            return -1\n        }", "        val evens = x until\
    \ y by 2\n        val evensCount = evens.count(_ % 2 == 0)\n        if (evensCount\
    \ == 0) -1\n        else evens.max", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x - y).abs()\n\
    \        val evenRange = range.filter(_ % 2 == 0)\n        val oddRange = range.filter(_\
    \ % 2 != 0)\n        evenRange foreach { x => evens += x }\n        oddRange foreach\
    \ { x => odds += x }\n        val evenMax = evens.max\n        val oddMax = odds.max\n\
    \        if (evenMax == oddMax) {\n            return evenMax\n        } else\
    \ {\n            return -1\n        }", "        var even = 0\n        var odd\
    \ = 0\n        var num = 0\n        var evenNum = 0\n        var oddNum = 0\n\
    \        var evenMax = 0\n        var oddMax = 0\n        var evenMin = 0\n  \
    \      var oddMin = 0\n        for(i <- 1 to y){\n            for(j <- 1 to x){\n\
    \                if(i%2 == 0){\n                    even = even + 1\n        \
    \            if(even%2 == 0){\n                        evenNum = evenNum + 1\n\
    \                        if(evenNum == even){\n                            evenMax\
    \ = even\n                            evenMin = i\n                        }\n\
    \                    }\n                }\n                else{\n           \
    \         odd = odd + 1\n                    if(odd%2 == 0){\n               \
    \         oddNum = oddNum + 1\n                        if(oddNum == odd){\n  \
    \                          oddMax = odd\n                            oddMin =\
    \ i\n                        }\n                    }\n                }\n   \
    \         }\n        }\n        if(evenNum == even){\n            num = evenMax\n\
    \        }\n        else{\n            num = oddMax\n        }\n        if(num\
    \ == 0){\n            num = -1\n        }\n        return num", "        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (x to y).filter(_ % 2 == 0)\n        range.foreach(x => if\
    \ (x % 2 == 0) evens += x else odds += x)\n        val even = evens.max\n    \
    \    val odd = odds.max\n        if (even > odd) even else odd", "        val\
    \ evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (x - y).abs \n        val evenRange = range.filter(_ % 2\
    \ == 0)\n        val oddRange = range.filter(_ % 2 != 0)\n        evenRange foreach\
    \ { x => evens += x }\n        oddRange foreach { x => odds += x }\n        val\
    \ evenMax = evens.max\n        val oddMax = odds.max\n        if (evenMax > oddMax)\
    \ evenMax else oddMax", "        val evens = mutable.Set[Long]()\n        val\
    \ odds = mutable.Set[Long]()\n        val range = Range(x, y)\n        range.foreach(x\
    \ => {\n            if (x % 2 == 0) {\n                evens += x\n          \
    \  } else {\n                odds += x\n            }\n        })\n        val\
    \ even = evens.max\n        val odd = odds.max\n        if (even > odd) {\n  \
    \          return even\n        } else {\n            return -1\n        }", " \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = Range(x, y)\n        for (i <- range) {\n            if (i\
    \ % 2 == 0) {\n                evens += i\n            } else {\n            \
    \    odds += i\n            }\n        }\n        if (evens.isEmpty) {\n     \
    \       return -1\n        }\n        if (evens.size > odds.size) {\n        \
    \    return evens.last\n        }\n        val even = evens.last\n        val\
    \ odd = odds.last\n        if (even > odd) {\n            return even\n      \
    \  }\n        return odd", "        val evens = x filter (_ % 2 == 0)\n      \
    \  val odds = x filter (_ % 2 != 0)\n        val evensSum = evens.sum\n      \
    \  val oddsSum = odds.sum\n        if (evensSum > oddsSum) {\n            evensSum\n\
    \        } else {\n            oddsSum\n        }", "        val evens = x to\
    \ y by 2\n        val evensSorted = evens.toList\n        val evensSortedSorted:\
    \ mutable.Buffer[Long] = evensSorted.sortWith(_ < _)\n        val evensSortedSortedLast\
    \ = evensSortedSortedLast.last\n        val evensSortedSortedLastIndex = evensSortedSortedLast.indexOf\n\
    \        val evensSortedSortedLastValue = evensSortedSortedLast.last\n       \
    \ val evensSortedSortedLastIndex = evensSortedSortedLast.indexOf\n        val\
    \ evensSortedSortedLastValue = evensSortedSortedLast.last\n        val evensSortedSortedLastIndex\
    \ = evensSortedSortedLast.indexOf\n        val evensSortedSortedLastValue = evensSortedSortedLast.last\n\
    \        val evensSortedSortedLastIndex = evensSortedSortedLast.indexOf\n    \
    \    val evensSortedSortedLastValue = evensSortedSortedLast.last\n        val\
    \ evensSortedSortedLastIndex = evensSortedSortedLast.indexOf\n        val evensSortedSortedLastValue\
    \ = evensSortedSortedLast.last\n        val evensSortedSortedLastIndex = evensSortedSortedLast.indexOf\n\
    \        val evensSortedSortedLastValue = evensSortedSortedLast.last\n       \
    \ val evensSortedSortedLastIndex = evensSortedSortedLast.indexOf\n        val\
    \ evensSortedSortedLastValue = evensSortedSortedLast.last\n        val evensSortedSortedLastIndex\
    \ = evensSortedSortedLast.indexOf\n        val evensSortedSortedLastValue = evensSortedSortedLast.last\n\
    \        val evensSortedSortedLastIndex = evensSortedSortedLast.indexOf\n    \
    \    val evensSortedSortedLastValue = evensSortedSortedLast.last\n        val\
    \ evensSortedSortedLastIndex = evensSortedSortedLast.indexOf\n        val evensSortedSortedLastValue\
    \ = evensSortedSortedLast.last\n        val evensSortedSortedLastIndex = evensSortedSortedLast.indexOf\n\
    \        val evensSortedSortedLastValue = evensSortedSortedLast.last\n       \
    \ val evensSortedSortedLastIndex = evensSortedSortedLast.indexOf\n        val\
    \ evensSortedSortedLastValue = evensSortedSortedLast.last\n        val evensSortedSortedLastIndex\
    \ = evensSortedSortedLast.indexOf\n        val evensSortedSortedLastValue = evensSortedSortedLast.last\n\
    \        val evensSortedSortedLastIndex = evensSortedSortedLast.indexOf\n    \
    \    val evensSortedSortedLastValue = evensSortedSortedLast.last\n        val\
    \ even", "        var maxEven = math.max(x, y)\n        var minEven = math.min(x,\
    \ y)\n        var even = math.max(minEven, maxEven)\n        var even2 = math.min(minEven,\
    \ maxEven)\n        var even3 = math.max(minEven, maxEven)\n        var even4\
    \ = math.min(minEven, maxEven)\n        var even5 = math.max(minEven, maxEven)\n\
    \        var even6 = math.min(minEven, maxEven)\n        var even7 = math.max(minEven,\
    \ maxEven)\n        var even8 = math.min(minEven, maxEven)\n        var even9\
    \ = math.max(minEven, maxEven)\n        var even10 = math.min(minEven, maxEven)\n\
    \        var even11 = math.max(minEven, maxEven)\n        var even12 = math.min(minEven,\
    \ maxEven)\n        var even13 = math.max(minEven, maxEven)\n        var even14\
    \ = math.min(minEven, maxEven)\n        var even15 = math.max(minEven, maxEven)\n\
    \        var even16 = math.min(minEven, maxEven)\n        var even17 = math.max(minEven,\
    \ maxEven)\n        var even18 = math.min(minEven, maxEven)\n        var even19\
    \ = math.max(minEven, maxEven)\n        var even20 = math.min(minEven, maxEven)\n\
    \        var even21 = math.max(minEven, maxEven)\n        var even22 = math.min(minEven,\
    \ maxEven)\n        var even23 = math.max(minEven, maxEven)\n        var even24\
    \ = math.min(minEven, maxEven)\n        var even25 = math.max(minEven, maxEven)\n\
    \        var even26 = math.min(minEven, maxEven)\n        var even27 = math.max(minEven,\
    \ maxEven)\n        var even28 = math.min(minEven, maxEven)\n        var even29\
    \ = math.max(minEven, maxEven)\n        var even30 = math.min(minEven, maxEven)\n\
    \        var even31 = math.max(minEven, maxEven)\n        var even32 = math.min(minEven,\
    \ maxEven)\n        var even33 = math.max(minEven, maxEven)\n        var even34\
    \ = math.min(minEven, maxEven)\n        var even35 = math.max(minEven, maxEven)\n\
    \        var even36 = math.min(minEven, maxEven)\n        var even37 = math.max(minEven,\
    \ maxEven)\n        var even38 = math.min(minEven, maxEven)\n        var even39\
    \ = math.max(minEven, maxEven)\n        var ", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ > odd) {\n            return even\n        } else {\n            return -1\n\
    \        }", "        val evens = mutable.ListBuffer[Long]()\n        val odds\
    \ = mutable.ListBuffer[Long]()\n        val range = (x - y).abs \n        val\
    \ evenRange = range.filter(_ % 2 == 0)\n        val oddRange = range.filter(_\
    \ % 2 != 0)\n        evenRange foreach { x => evens += x }\n        oddRange foreach\
    \ { x => odds += x }\n        val evenMax = evens.max\n        val oddMax = odds.max\n\
    \        if (evenMax == evenMax && oddMax == oddMax)\n            evenMax\n  \
    \      else\n            -1"]
stop_tokens:
- "\n    }\n"
