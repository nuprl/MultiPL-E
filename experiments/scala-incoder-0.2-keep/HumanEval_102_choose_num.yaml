name: HumanEval_102_choose_num
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // This function takes two positive numbers x and y and returns the\n    //\
  \ biggest even integer number that is in the range [x, y] inclusive. If \n    //\
  \ there's no such number, then the function should return -1.\n    // For example:\n\
  \    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n    def chooseNum(x\
  \ : Long, y : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
  \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
  \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n \
  \   assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
  \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
  \ (546l)) == (546l));\n    }\n\n}\n"
completions: ["        val evens = mutable.ListBuffer[Long]()\n        val odds =\
    \ mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n        for (i\
    \ <- range) {\n            if (i % 2 == 0) {\n                evens += i\n   \
    \         } else {\n                odds += i\n            }\n        }\n    \
    \    val even = evens.max\n        val odd = odds.max\n        if (even > odd)\
    \ {\n            return even\n        } else {\n            return -1\n      \
    \  }", "        val evens = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n\
    \        val range = Range(x, y)\n        for (i <- range) {\n            if (i\
    \ % 2 == 0) {\n                evens += i\n            } else {\n            \
    \    odds += i\n            }\n        }\n        val even = evens.max\n     \
    \   val odd = odds.max\n        if (even > odd) {\n            return even\n \
    \       } else {\n            return -1\n        }", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x - y).abs\
    \ \n        val evenRange = range.filter(_ % 2 == 0)\n        val oddRange = range.filter(_\
    \ % 2 != 0)\n        evenRange foreach { x => evens += x }\n        oddRange foreach\
    \ { x => odds += x }\n        val evens = evens.toList\n        val odds = odds.toList\n\
    \        val evensSize = evens.size\n        val oddsSize = odds.size\n      \
    \  val maxEven = evens.max\n        val maxOdd = odds.max\n        if (evensSize\
    \ == 0 || oddsSize == 0) {\n            return -1\n        }\n        if (evensSize\
    \ == 1) {\n            return maxEven\n        }\n        if (oddsSize == 1) {\n\
    \            return maxOdd\n        }\n        if (evensSize > oddsSize) {\n \
    \           return maxEven\n        }\n        return maxOdd", "        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (x - y).abs \n        for (i <- 1 to range) {\n         \
    \   if (i % 2 == 0) {\n                evens += i\n            } else {\n    \
    \            odds += i\n            }\n        }\n        val even = evens.max\n\
    \        val odd = odds.max\n        if (even > odd) {\n            return even\n\
    \        } else {\n            return -1\n        }", "        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val range = Range(x, y)\n   \
    \     range.foreach { x =>\n            if (x % 2 == 0) {\n                evens\
    \ += x\n            } else {\n                odds += x\n            }\n     \
    \   }\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ > odd) {\n            return even\n        } else {\n            return -1\n\
    \        }", "        val evens = x until y by 2\n        val evensCount = evens.count(_\
    \ % 2 == 0)\n        if (evensCount == 0) {\n            return -1\n        }\n\
    \        val maxEven = evens.max\n        if (maxEven % 2 == 0) {\n          \
    \  return maxEven\n        } else {\n            return -1\n        }", "    \
    \    val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        for(i <- x until y){\n            if(i%2 == 0){\n                evens\
    \ += i\n            }else{\n                odds += i\n            }\n       \
    \ }\n        val even = evens.max\n        val odd = odds.max\n        if(even\
    \ > odd){\n            return even\n        }else{\n            return odd\n \
    \       }", "        val evens = mutable.ListBuffer[Long]()\n        val odds\
    \ = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n        for (i\
    \ <- range) {\n            if (i % 2 == 0) {\n                evens += i\n   \
    \         } else {\n                odds += i\n            }\n        }\n    \
    \    val even = evens.max\n        val odd = odds.max\n        if (even > odd)\
    \ {\n            return even\n        } else {\n            return -1\n      \
    \  }", "        val evens = mutable.ListBuffer[Long]()\n        for (i <- x until\
    \ y) {\n            if (i % 2 == 0) {\n                evens += i\n          \
    \  }\n        }\n        if (evens.isEmpty) {\n            return -1\n       \
    \ }\n        val maxEven = evens.max\n        if (maxEven % 2 == 0) {\n      \
    \      return maxEven\n        }\n        return -1", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x to y).filter(_\
    \ % 2 == 0)\n        range.foreach(x => x match {\n            case x if x % 2\
    \ == 0 => evens += x\n            case x if x % 2 != 0 => odds += x\n        })\n\
    \        val even = evens.max\n        val odd = odds.max\n        if (even >\
    \ odd) even else odd", "        var max = 0\n        var min = 0\n        for(i\
    \ <- 1 to y){\n            for(j <- 1 to x){\n                if(j % 2 == 0 &&\
    \ j > max){\n                    max = j\n                }\n                if(j\
    \ % 2 == 0 && j < min){\n                    min = j\n                }\n    \
    \        }\n        }\n        if(max > min){\n            return max\n      \
    \  }\n        return -1", "        val evens = mutable.Set[Long]()\n        val\
    \ odds = mutable.Set[Long]()\n        val range = Range(x, y)\n        range.foreach\
    \ { x =>\n            if (x % 2 == 0) {\n                evens += x\n        \
    \    } else {\n                odds += x\n            }\n        }\n        if\
    \ (evens.isEmpty) {\n            return -1\n        }\n        if (evens.size\
    \ == 1) {\n            return evens.head\n        }\n        if (evens.size ==\
    \ 2) {\n            return evens.head + evens.last\n        }\n        val even\
    \ = evens.head\n        val odd = odds.head\n        val evens = evens.tail\n\
    \        val odds = odds.tail\n        val range = Range(even, odd)\n        range.foreach\
    \ { x =>\n            if (x % 2 == 0) {\n                evens += x\n        \
    \    } else {\n                odds += x\n            }\n        }\n        if\
    \ (evens.isEmpty) {\n            return -1\n        }\n        if (evens.size\
    \ == 1) {\n            return evens.head\n        }\n        if (evens.size ==\
    \ 2) {\n            return evens.head + evens.last\n        }\n        val even\
    \ = evens.head\n        val odd = odds.head\n        val evens = evens.tail\n\
    \        val odds = odds.tail\n        val range = Range(even, odd)\n        range.foreach\
    \ { x =>\n            if (x % 2 == 0) {\n                evens += x\n        \
    \    } else {\n                odds += x\n            }\n        }\n        if\
    \ (evens.isEmpty) {\n            return -1\n        }\n        if (evens.size\
    \ == 1) {\n            return evens.head\n        }\n        if (evens.size ==\
    \ 2) {\n            return evens.head + evens.last\n        }\n        val even\
    \ = evens.head\n        val odd = odds.head\n        val evens = evens.tail\n\
    \        val odds = odds.tail\n        val range = Range(even, odd)\n        range.foreach\
    \ { x =>\n            if (x % 2 == 0) {\n                evens += x\n        \
    \    } else {\n                odds += x\n            }\n        }\n        if\
    \ (evens.isEmpty) {\n            return -1\n        }\n        if (evens.size\
    \ == 1) {\n            return evens.head\n        }\n        if (evens.size ==\
    \ 2) {\n            return evens.head + evens.last\n        }\n        val even\
    \ = evens.head\n        val odd = odds.head\n        val evens = evens.tail\n\
    \        val odds = odds.tail\n        val range = Range(even, odd)\n        range.foreach\
    \ { x =>\n            if (x % 2 == 0) {\n                evens += x\n        \
    \    } else {\n                odds += x\n            }\n        }\n        if\
    \ (evens.isEmpty", "        val evens = mutable.ListBuffer[Long]()\n        val\
    \ odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n       \
    \ range.foreach(x => if (x % 2 == 0) evens += x; else odds += x)\n        val\
    \ even = evens.max\n        val odd = odds.max\n        if (even < odd) even else\
    \ -1", "        var even = 0\n        var odd = 0\n        var result = -1\n \
    \       while (even < x && odd < y) {\n            if (x % 2 == 0 && y % 2 ==\
    \ 0) {\n                result = x\n                even = x + 1\n           \
    \ } else if (x % 2 == 0 && y % 2 != 0) {\n                result = y\n       \
    \         odd = y + 1\n            } else if (x % 2 != 0 && y % 2 == 0) {\n  \
    \              result = x\n                even = x + 1\n            } else {\n\
    \                result = y\n                odd = y + 1\n            }\n    \
    \    }\n        result", "        val evens = mutable.ListBuffer[Long]()\n   \
    \     val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        range.foreach(x => {\n            if (x % 2 == 0) {\n               \
    \ evens += x\n            } else {\n                odds += x\n            }\n\
    \        })\n        val even = evens.max\n        val odd = odds.max\n      \
    \  if (even > odd) {\n            return even\n        } else {\n            return\
    \ -1\n        }", "        val evens = mutable.ListBuffer[Long]()\n        val\
    \ odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n       \
    \ range.foreach { x =>\n            if (x % 2 == 0) {\n                evens +=\
    \ x\n            } else {\n                odds += x\n            }\n        }\n\
    \        val even = evens.max\n        val odd = odds.max\n        if (even >\
    \ odd) {\n            return even\n        } else {\n            return -1\n \
    \       }", "        val evens = mutable.ListBuffer[Long]()\n        val odds\
    \ = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n        for (i\
    \ <- range) {\n            if (i % 2 == 0) {\n                evens += i\n   \
    \         } else {\n                odds += i\n            }\n        }\n    \
    \    val even = evens.max\n        val odd = odds.max\n        if (even > odd)\
    \ {\n            return even\n        } else {\n            return -1\n      \
    \  }", "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val evenEvens = mutable.ListBuffer[Long]()\n        val evenOdds = mutable.ListBuffer[Long]()\n\
    \        val oddEvens = mutable.ListBuffer[Long]()\n        val oddOdds = mutable.ListBuffer[Long]()\n\
    \        val evenEvensOdds = mutable.ListBuffer[Long]()\n        val evenOddsOdds\
    \ = mutable.ListBuffer[Long]()\n        val oddEvensOdds = mutable.ListBuffer[Long]()\n\
    \        val oddOddsOdds = mutable.ListBuffer[Long]()\n        val evenEvensOddsOdds\
    \ = mutable.ListBuffer[Long]()\n        val evenOddsOddsOdds = mutable.ListBuffer[Long]()\n\
    \        val oddEvensOddsOdds = mutable.ListBuffer[Long]()\n        val oddOddsOddsOdds\
    \ = mutable.ListBuffer[Long]()\n        val evenEvensOddsOddsOdds = mutable.ListBuffer[Long]()\n\
    \        val evenOddsOddsOddsOdds = mutable.ListBuffer[Long]()\n        val oddEvensOddsOddsOdds\
    \ = mutable.ListBuffer[Long]()\n        val oddOddsOddsOddsOdds = mutable.ListBuffer[Long]()\n\
    \        val evenEvensOddsOddsOddsOdds = mutable.ListBuffer[Long]()\n        val\
    \ evenOddsOddsOddsOddsOdds = mutable.ListBuffer[Long]()\n        val oddEvensOddsOddsOddsOdds\
    \ = mutable.ListBuffer[Long]()\n        val oddOddsOddsOddsOddsOdds = mutable.ListBuffer[Long]()\n\
    \        val evenEvensOddsOddsOddsOddsOdds = mutable.ListBuffer[Long]()\n    \
    \    val evenOddsOddsOddsOddsOddsOdds = ", "        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val range = (x to y).filter(_\
    \ % 2 == 0)\n        for (i <- range) {\n            if (i % 2 == 0) {\n     \
    \           evens += i\n            } else {\n                odds += i\n    \
    \        }\n        }\n        val even = evens.max\n        val odd = odds.max\n\
    \        if (even > odd) {\n            return even\n        } else {\n      \
    \      return -1\n        }", "        var biggest = math.max(x, y)\n        var\
    \ even = biggest / 2\n        var even2 = even / 2\n        var even3 = even2\
    \ / 2\n        var even4 = even3 / 2\n        var even5 = even4 / 2\n        var\
    \ even6 = even5 / 2\n        var even7 = even6 / 2\n        var even8 = even7\
    \ / 2\n        var even9 = even8 / 2\n        var even10 = even9 / 2\n       \
    \ var even11 = even10 / 2\n        var even12 = even11 / 2\n        var even13\
    \ = even12 / 2\n        var even14 = even13 / 2\n        var even15 = even14 /\
    \ 2\n        var even16 = even15 / 2\n        var even17 = even16 / 2\n      \
    \  var even18 = even17 / 2\n        var even19 = even18 / 2\n        var even20\
    \ = even19 / 2\n        var even21 = even20 / 2\n        var even22 = even21 /\
    \ 2\n        var even23 = even22 / 2\n        var even24 = even23 / 2\n      \
    \  var even25 = even24 / 2\n        var even26 = even25 / 2\n        var even27\
    \ = even26 / 2\n        var even28 = even27 / 2\n        var even29 = even28 /\
    \ 2\n        var even30 = even29 / 2\n        var even31 = even30 / 2\n      \
    \  var even32 = even31 / 2\n        var even33 = even32 / 2\n        var even34\
    \ = even33 / 2\n        var even35 = even34 / 2\n        var even36 = even35 /\
    \ 2\n        var even37 = even36 / 2\n        var even38 = even37 / 2\n      \
    \  var even39 = even38 / 2\n        var even40 = even39 / 2\n        var even41\
    \ = even40 / 2\n        var even42 = even41 / 2\n        var even43 = even42 /\
    \ 2\n        var even44 = even43 / 2\n        var even45 = even44 / 2\n      \
    \  var even46 = even45 / 2\n        var even47 = even46 / 2\n        var even48\
    \ = even47 / 2\n        var even49 = even48 / 2\n        var even50 = even49 /\
    \ 2\n        var even51 = even50 / 2\n        var even52 = even51 / 2\n      \
    \  var even53 = even52 / 2\n        var even54 = even53 / 2\n        var even55\
    \ = even54 / 2\n        var even56 = even55 / 2\n        var even57 = even56 /\
    \ 2\n        var even58"]
stop_tokens:
- "\n    }\n"
