name: HumanEval_149_sorted_list_sum
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that accepts a list of strings as a parameter,\n    //\
  \ deletes the strings that have odd lengths from it,\n    // and returns the resulted\
  \ list with a sorted order,\n    // The list is always a list of strings and never\
  \ an array of numbers,\n    // and it may contain duplicates.\n    // The order\
  \ of the list should be ascending by length of each word, and you\n    // should\
  \ return the list sorted by that rule.\n    // If two words have the same length,\
  \ sort the list alphabetically.\n    // The function should return a list of strings\
  \ in sorted order.\n    // You may assume that all words will have the same length.\n\
  \    // For example:\n    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"\
  ]\n    // assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"\
  ]\n    def sortedListSum(lst : List[String]) : List[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
  aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
  school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"\
  ))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n\
  \    assert(sortedListSum((List[String](\"d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"\
  abcd\", \"dcba\"))));\n    assert(sortedListSum((List[String](\"AI\", \"ai\", \"\
  au\"))).equals((List[String](\"AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"\
  a\", \"b\", \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
  aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
  , \"bbbb\"))));\n    }\n\n}\n"
completions: ["        val newList = mutable.ListBuffer.empty[String]\n        lst.foreach(x\
    \ => {\n            if(x.length%2 != 0) newList += x\n        })\n        newList.sortBy(x\
    \ => x.length)\n        newList.sortBy(x => x.length)\n        newList.sortBy(x\
    \ => x.length)\n        newList.toList", "        val newList = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => {\n            val newWord = x.split(\" \").map(_.length).sum\n\
    \            newList += x if(newWord % 2 == 1)\n        })\n        newList.sortBy(x\
    \ => x.split(\" \").map(_.length).sum)", "        val res = lst.filterNot(_.length%2==0).sortBy(_.length)\n\
    \        res.sortBy(_.toLowerCase + _.toUpperCase)", "        val newList = mutable.ListBuffer[String]()\n\
    \        lst.foreach(x => {\n            val newWord = x.split(\" \").filter(_\
    \ => _.length == 1).mkString(\" \")\n            newList += newWord\n        })\n\
    \        newList.sortWith(_.length > _.length)\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.toList", "        val newList = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => {\n            val splitted = x.split(\" \").map(_.toInt)\n\
    \            val sum = splitted.sum\n            if (sum % 2 == 0) {\n       \
    \         newList += x\n            }\n        })\n        newList.sortBy(x =>\
    \ x.split(\" \").map(_.toInt).sum)", "        val result = new mutable.ListBuffer[String]()\n\
    \        lst.foreach(x => if (x.length % 2 == 0) result.add(x) else result.add(x))\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n",
  "        val newList = mutable.ListBuffer[String]()\n        for(i <- 0 until lst.length){\n\
    \            if(lst(i).length() % 2 != 0){\n                newList += lst(i)\n\
    \            }\n        }\n        newList.sortWith((x,y) => x.length < y.length)\n\
    \        newList.sortWith((x,y) => x.compareTo(y) == 0)\n        newList.toList",
  "        val result = new mutable.ListBuffer[String]()\n        lst.foreach(x =>\
    \ if (x.length % 2 != 0) result += x else result.add(x))\n        result.sortWith((x,\
    \ y) => x.length <= y.length)\n        result.toList", "        val newList =\
    \ mutable.ListBuffer[String]()\n        for(i <- 0 until lst.length){\n      \
    \      val word = lst(i)\n            if(word.length % 2 == 1){\n            \
    \    newList += word\n            }\n        }\n        newList.sortWith((a, b)\
    \ => a.length < b.length)\n        newList.sortWith((a, b) => a < b)\n       \
    \ newList.toList", "        val newList = mutable.ListBuffer[String]()\n     \
    \   lst.foreach(x => {\n            val newWord = x.split(\" \").map(_.length).sum\n\
    \            newList += x if(newWord % 2 == 1)\n        })\n        newList.sortBy(x\
    \ => x.split(\" \").map(_.length).sum)", "        val newList = mutable.ListBuffer[String]()\n\
    \        lst.foreach(x => {\n            val newWord = x.split(\" \").filter(_\
    \ => _.length != 0).mkString(\" \")\n            newList += newWord\n        })\n\
    \        newList.sortBy(x => x.split(\" \").length)\n        newList.sortBy(x\
    \ => x.split(\" \").mkString.toLowerCase)", "        val newList = mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until lst.length){\n            val word = lst(i)\n      \
    \      if(word.length % 2 == 1){\n                newList += word\n          \
    \  }\n        }\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ > _.length)\n        newList.sortWith(_.length < _.length)\n        newList.toList",
  "        val newList = mutable.ListBuffer[String]()\n        lst.foreach(x => {\n\
    \            val newWord = x.split(\" \").filterNot(_.length%2==0).sorted\n  \
    \          newList += newWord\n        })\n        newList.sortBy(x => x.split(\"\
    \ \").length)", "        val newList = mutable.ListBuffer.empty[String]\n    \
    \    for(i <- 0 until lst.size) {\n            if(lst(i).length() % 2 == 1) {\n\
    \                newList += lst(i)\n            }\n        }\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.toList", "        val newList = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => newList += x)\n        newList.sortWith(_.length < _.length)\n\
    \        newList.sortWith(_.length > _.length)\n        newList.sortWith(_.length\
    \ > _.length)\n        newList.toList", "        val newList = mutable.ListBuffer[String]()\n\
    \        lst.foreach(x => newList += x)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.toList", "        val newList = mutable.ListBuffer[String]()\n\
    \        lst.foreach(x => {\n            if(x.length % 2 != 0) newList += x\n\
    \        })\n        newList.sortWith(_ < _)", "        val newList = mutable.ListBuffer[String]()\n\
    \        lst.foreach(x => newList += x)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.", "        val newList\
    \ = mutable.ListBuffer[String]()\n        lst.foreach(x => {\n            if (x.length\
    \ % 2 == 1) {\n                newList += x\n            }\n        })\n     \
    \   newList.sortWith((x, y) => x.length <= y.length)\n        newList.toList",
  "        val newList = mutable.ListBuffer[String]()\n        for(i <- 0 until lst.size)\
    \ {\n            if(lst(i).length() % 2 == 1) {\n                newList += lst(i)\n\
    \            }\n        }\n        newList.sortWith((x, y) => x.compareTo(y))\n\
    \        newList.toList"]
stop_tokens:
- "\n    }\n"
