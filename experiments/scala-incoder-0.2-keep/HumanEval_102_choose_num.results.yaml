language: scala
name: HumanEval_102_choose_num
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ > odd) {\n            return even\n        } else {\n            return -1\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpus_cg864.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpus_cg864.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpus_cg864.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpus_cg864.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val range = Range(x, y)\n   \
    \     for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ > odd) {\n            return even\n        } else {\n            return -1\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5dtvgf7q.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp5dtvgf7q.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp5dtvgf7q.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5dtvgf7q.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x - y).abs\
    \ \n        val evenRange = range.filter(_ % 2 == 0)\n        val oddRange = range.filter(_\
    \ % 2 != 0)\n        evenRange foreach { x => evens += x }\n        oddRange foreach\
    \ { x => odds += x }\n        val evens = evens.toList\n        val odds = odds.toList\n\
    \        val evensSize = evens.size\n        val oddsSize = odds.size\n      \
    \  val maxEven = evens.max\n        val maxOdd = odds.max\n        if (evensSize\
    \ == 0 || oddsSize == 0) {\n            return -1\n        }\n        if (evensSize\
    \ == 1) {\n            return maxEven\n        }\n        if (oddsSize == 1) {\n\
    \            return maxOdd\n        }\n        if (evensSize > oddsSize) {\n \
    \           return maxEven\n        }\n        return maxOdd\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjrl2ysx4.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = evens.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mevens\
    \ is already defined as \e[33mvalue\e[0m \e[35mevens\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjrl2ysx4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36modds\e[0m = odds.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modds is already defined as \e[33mvalue\e[0m \e[35modds\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpjrl2ysx4.scala:11:20 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpjrl2ysx4.scala:12:19 ------------------------\e[0m\e[0m\n\e[31m12 |\e\
    [0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpjrl2ysx4.scala:14:30 ------------------------\e[0m\e[0m\n\e[31m14 |\e\
    [0m        \e[33mval\e[0m \e[36mevenRange\e[0m = range.filter(_ % \e[31m2\e[0m\
    \ == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        value filter is not a member of Long\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjrl2ysx4.scala:15:29 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36moddRange\e[0m = range.fi"
  stdout: ''
  timestamp: 1659794047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x - y).abs\
    \ \n        for (i <- 1 to range) {\n            if (i % 2 == 0) {\n         \
    \       evens += i\n            } else {\n                odds += i\n        \
    \    }\n        }\n        val even = evens.max\n        val odd = odds.max\n\
    \        if (even > odd) {\n            return even\n        } else {\n      \
    \      return -1\n        }\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpav2z4ayf.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpav2z4ayf.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpav2z4ayf.scala:14:23 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to range) {\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                 Found:    (range : Long)\n\e[31m   |\e[0m                  \
    \     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794046
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val range = Range(x, y)\n   \
    \     range.foreach { x =>\n            if (x % 2 == 0) {\n                evens\
    \ += x\n            } else {\n                odds += x\n            }\n     \
    \   }\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ > odd) {\n            return even\n        } else {\n            return -1\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdrqbgx2p.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpdrqbgx2p.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpdrqbgx2p.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdrqbgx2p.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794047
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = x until\
    \ y by 2\n        val evensCount = evens.count(_ % 2 == 0)\n        if (evensCount\
    \ == 0) {\n            return -1\n        }\n        val maxEven = evens.max\n\
    \        if (maxEven % 2 == 0) {\n            return maxEven\n        } else {\n\
    \            return -1\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5enkwywr.scala:26)\n\tat Problem.main(tmp5enkwywr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        for(i <- x until y){\n\
    \            if(i%2 == 0){\n                evens += i\n            }else{\n \
    \               odds += i\n            }\n        }\n        val even = evens.max\n\
    \        val odd = odds.max\n        if(even > odd){\n            return even\n\
    \        }else{\n            return odd\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_e_aq0la.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_e_aq0la.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794043
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ > odd) {\n            return even\n        } else {\n            return -1\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpus_cg864.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpus_cg864.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpus_cg864.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpus_cg864.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        for (i <- x until y) {\n            if (i % 2 == 0) {\n             \
    \   evens += i\n            }\n        }\n        if (evens.isEmpty) {\n     \
    \       return -1\n        }\n        val maxEven = evens.max\n        if (maxEven\
    \ % 2 == 0) {\n            return maxEven\n        }\n        return -1\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) ==\
    \ (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6b39fip3.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794042
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x to y).filter(_\
    \ % 2 == 0)\n        range.foreach(x => x match {\n            case x if x % 2\
    \ == 0 => evens += x\n            case x if x % 2 != 0 => odds += x\n        })\n\
    \        val even = evens.max\n        val odd = odds.max\n        if (even >\
    \ odd) even else odd\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3848_tts.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp3848_tts.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794043
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        var max = 0\n     \
    \   var min = 0\n        for(i <- 1 to y){\n            for(j <- 1 to x){\n  \
    \              if(j % 2 == 0 && j > max){\n                    max = j\n     \
    \           }\n                if(j % 2 == 0 && j < min){\n                  \
    \  min = j\n                }\n            }\n        }\n        if(max > min){\n\
    \            return max\n        }\n        return -1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2xdb8l7f.scala:13:22\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to y){\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m \
    \  |\e[0m                      Found:    (y : Long)\n\e[31m   |\e[0m         \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp2xdb8l7f.scala:14:26 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m            \e[33mfor\e[0m(j <- \e[31m1\e[0m to x){\n\e[31m\e[31m   |\e\
    [0m                          ^\e[0m\n\e[31m   |\e[0m                         \
    \ Found:    (x : Long)\n\e[31m   |\e[0m                          Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val range = Range(x, y)\n   \
    \     range.foreach { x =>\n            if (x % 2 == 0) {\n                evens\
    \ += x\n            } else {\n                odds += x\n            }\n     \
    \   }\n        if (evens.isEmpty) {\n            return -1\n        }\n      \
    \  if (evens.size == 1) {\n            return evens.head\n        }\n        if\
    \ (evens.size == 2) {\n            return evens.head + evens.last\n        }\n\
    \        val even = evens.head\n        val odd = odds.head\n        val evens\
    \ = evens.tail\n        val odds = odds.tail\n        val range = Range(even,\
    \ odd)\n        range.foreach { x =>\n            if (x % 2 == 0) {\n        \
    \        evens += x\n            } else {\n                odds += x\n       \
    \     }\n        }\n        if (evens.isEmpty) {\n            return -1\n    \
    \    }\n        if (evens.size == 1) {\n            return evens.head\n      \
    \  }\n        if (evens.size == 2) {\n            return evens.head + evens.last\n\
    \        }\n        val even = evens.head\n        val odd = odds.head\n     \
    \   val evens = evens.tail\n        val odds = odds.tail\n        val range =\
    \ Range(even, odd)\n        range.foreach { x =>\n            if (x % 2 == 0)\
    \ {\n                evens += x\n            } else {\n                odds +=\
    \ x\n            }\n        }\n        if (evens.isEmpty) {\n            return\
    \ -1\n        }\n        if (evens.size == 1) {\n            return evens.head\n\
    \        }\n        if (evens.size == 2) {\n            return evens.head + evens.last\n\
    \        }\n        val even = evens.head\n        val odd = odds.head\n     \
    \   val evens = evens.tail\n        val odds = odds.tail\n        val range =\
    \ Range(even, odd)\n        range.foreach { x =>\n            if (x % 2 == 0)\
    \ {\n                evens += x\n            } else {\n                odds +=\
    \ x\n            }\n        }\n        if (evens.isEmpty) {\n            return\
    \ -1\n        }\n        if (evens.size == 1) {\n            return evens.head\n\
    \        }\n        if (evens.size == 2) {\n            return evens.head + evens.last\n\
    \        }\n        val even = evens.head\n        val odd = odds.head\n     \
    \   val evens = evens.tail\n        val odds = odds.tail\n        val range =\
    \ Range(even, odd)\n        range.foreach { x =>\n            if (x % 2 == 0)\
    \ {\n                evens += x\n            } else {\n                odds +=\
    \ x\n            }\n        }\n        if (evens.isEmpty\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd0o2nmbw.scala:106:4 ---------------------------\e\
    [0m\e[0m\n\e[31m106 |\e[0m    }\n\e[31m\e[31m    |\e[0m    ^\e[0m\n\e[31m    |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd0o2nmbw.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevens\e[0m = evens.tail\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevens is already defined as \e[33mvalue\e[0m \e[35mevens\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpd0o2nmbw.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = odds.tail\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0modds is already defined\
    \ as \e[33mvalue\e[0m \e[35modds\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd0o2nmbw.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(even,\
    \ odd)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mrange is already defined as \e[33mvalue\e[0m \e[35mrange\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpd0o2nmbw.scala:51:12 ---------------------------\e[0m\e[0m\n\e[31m51\
    \ |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = evens.head\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0meven is already defined\
    \ as \e[33mvalue\e[0m \e[35meven\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd0o2nmbw.scala:52:12 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = odds.head\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0modd is already\
    \ defi"
  stdout: ''
  timestamp: 1659794047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        range.foreach(x => if (x % 2 == 0) evens += x; else odds += x)\n    \
    \    val even = evens.max\n        val odd = odds.max\n        if (even < odd)\
    \ even else -1\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcd3bejwe.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpcd3bejwe.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpcd3bejwe.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcd3bejwe.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794046
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        var even = 0\n    \
    \    var odd = 0\n        var result = -1\n        while (even < x && odd < y)\
    \ {\n            if (x % 2 == 0 && y % 2 == 0) {\n                result = x\n\
    \                even = x + 1\n            } else if (x % 2 == 0 && y % 2 != 0)\
    \ {\n                result = y\n                odd = y + 1\n            } else\
    \ if (x % 2 != 0 && y % 2 == 0) {\n                result = x\n              \
    \  even = x + 1\n            } else {\n                result = y\n          \
    \      odd = y + 1\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqxd93i7f.scala:16:25\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m                result = x\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (x : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqxd93i7f.scala:17:23\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m                even = x + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m                       ^^^^^\e[0m\n\e[31m   |\e\
    [0m                       Found:    Long\n\e[31m   |\e[0m                    \
    \   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqxd93i7f.scala:19:25\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m                result = y\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (y : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqxd93i7f.scala:20:22\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m                odd = y + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m                      ^^^^^\e[0m\n\e[31m   |\e\
    [0m                      Found:    Long\n\e[31m   |\e[0m                     \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqxd93i7f.scala:22:25\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m                result = x\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (x : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqxd93i7f.scala:23:23\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0"
  stdout: ''
  timestamp: 1659794047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        range.foreach(x => {\n            if (x % 2 == 0) {\n               \
    \ evens += x\n            } else {\n                odds += x\n            }\n\
    \        })\n        val even = evens.max\n        val odd = odds.max\n      \
    \  if (even > odd) {\n            return even\n        } else {\n            return\
    \ -1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpex7tj1w7.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpex7tj1w7.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpex7tj1w7.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpex7tj1w7.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        range.foreach { x =>\n            if (x % 2 == 0) {\n               \
    \ evens += x\n            } else {\n                odds += x\n            }\n\
    \        }\n        val even = evens.max\n        val odd = odds.max\n       \
    \ if (even > odd) {\n            return even\n        } else {\n            return\
    \ -1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8ahhgr1a.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp8ahhgr1a.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp8ahhgr1a.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8ahhgr1a.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ > odd) {\n            return even\n        } else {\n            return -1\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpus_cg864.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpus_cg864.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpus_cg864.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpus_cg864.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val evenEvens = mutable.ListBuffer[Long]()\n\
    \        val evenOdds = mutable.ListBuffer[Long]()\n        val oddEvens = mutable.ListBuffer[Long]()\n\
    \        val oddOdds = mutable.ListBuffer[Long]()\n        val evenEvensOdds =\
    \ mutable.ListBuffer[Long]()\n        val evenOddsOdds = mutable.ListBuffer[Long]()\n\
    \        val oddEvensOdds = mutable.ListBuffer[Long]()\n        val oddOddsOdds\
    \ = mutable.ListBuffer[Long]()\n        val evenEvensOddsOdds = mutable.ListBuffer[Long]()\n\
    \        val evenOddsOddsOdds = mutable.ListBuffer[Long]()\n        val oddEvensOddsOdds\
    \ = mutable.ListBuffer[Long]()\n        val oddOddsOddsOdds = mutable.ListBuffer[Long]()\n\
    \        val evenEvensOddsOddsOdds = mutable.ListBuffer[Long]()\n        val evenOddsOddsOddsOdds\
    \ = mutable.ListBuffer[Long]()\n        val oddEvensOddsOddsOdds = mutable.ListBuffer[Long]()\n\
    \        val oddOddsOddsOddsOdds = mutable.ListBuffer[Long]()\n        val evenEvensOddsOddsOddsOdds\
    \ = mutable.ListBuffer[Long]()\n        val evenOddsOddsOddsOddsOdds = mutable.ListBuffer[Long]()\n\
    \        val oddEvensOddsOddsOddsOdds = mutable.ListBuffer[Long]()\n        val\
    \ oddOddsOddsOddsOddsOdds = mutable.ListBuffer[Long]()\n        val evenEvensOddsOddsOddsOddsOdds\
    \ = mutable.ListBuffer[Long]()\n        val evenOddsOddsOddsOddsOddsOdds = \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpj56rkjqz.scala:36:42 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mevenOddsOddsOddsOddsOddsOdds\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                          ^\e[0m\n\
    \e[31m   |\e[0m                                       expression expected but\
    \ \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj56rkjqz.scala:11:20\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mevens\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj56rkjqz.scala:12:19\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36modds\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj56rkjqz.scala:13:19\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36meven\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj56rkjqz.scala:14:18\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36modd\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj56rkjqz.scala:15:24\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m "
  stdout: ''
  timestamp: 1659794046
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val range = (x to y).filter(_\
    \ % 2 == 0)\n        for (i <- range) {\n            if (i % 2 == 0) {\n     \
    \           evens += i\n            } else {\n                odds += i\n    \
    \        }\n        }\n        val even = evens.max\n        val odd = odds.max\n\
    \        if (even > odd) {\n            return even\n        } else {\n      \
    \      return -1\n        }\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7o07xrft.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7o07xrft.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794043
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        var biggest = math.max(x,\
    \ y)\n        var even = biggest / 2\n        var even2 = even / 2\n        var\
    \ even3 = even2 / 2\n        var even4 = even3 / 2\n        var even5 = even4\
    \ / 2\n        var even6 = even5 / 2\n        var even7 = even6 / 2\n        var\
    \ even8 = even7 / 2\n        var even9 = even8 / 2\n        var even10 = even9\
    \ / 2\n        var even11 = even10 / 2\n        var even12 = even11 / 2\n    \
    \    var even13 = even12 / 2\n        var even14 = even13 / 2\n        var even15\
    \ = even14 / 2\n        var even16 = even15 / 2\n        var even17 = even16 /\
    \ 2\n        var even18 = even17 / 2\n        var even19 = even18 / 2\n      \
    \  var even20 = even19 / 2\n        var even21 = even20 / 2\n        var even22\
    \ = even21 / 2\n        var even23 = even22 / 2\n        var even24 = even23 /\
    \ 2\n        var even25 = even24 / 2\n        var even26 = even25 / 2\n      \
    \  var even27 = even26 / 2\n        var even28 = even27 / 2\n        var even29\
    \ = even28 / 2\n        var even30 = even29 / 2\n        var even31 = even30 /\
    \ 2\n        var even32 = even31 / 2\n        var even33 = even32 / 2\n      \
    \  var even34 = even33 / 2\n        var even35 = even34 / 2\n        var even36\
    \ = even35 / 2\n        var even37 = even36 / 2\n        var even38 = even37 /\
    \ 2\n        var even39 = even38 / 2\n        var even40 = even39 / 2\n      \
    \  var even41 = even40 / 2\n        var even42 = even41 / 2\n        var even43\
    \ = even42 / 2\n        var even44 = even43 / 2\n        var even45 = even44 /\
    \ 2\n        var even46 = even45 / 2\n        var even47 = even46 / 2\n      \
    \  var even48 = even47 / 2\n        var even49 = even48 / 2\n        var even50\
    \ = even49 / 2\n        var even51 = even50 / 2\n        var even52 = even51 /\
    \ 2\n        var even53 = even52 / 2\n        var even54 = even53 / 2\n      \
    \  var even55 = even54 / 2\n        var even56 = even55 / 2\n        var even57\
    \ = even56 / 2\n        var even58\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp89pe7_vr.scala:70:4 ----------------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp89pe7_vr.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794046
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        var max = 0\n     \
    \   var min = 0\n        for(i <- 0 until y by 2){\n            for(j <- 0 until\
    \ x by 2){\n                if(j + i == x && j + i == y){\n                  \
    \  if(j + i > max){\n                        max = j + i\n                   \
    \ }\n                    if(j + i < min){\n                        min = j + i\n\
    \                    }\n                }\n            }\n        }\n        if(max\
    \ > min){\n            return max\n        }\n        return -1\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbdjt23_2.scala:13:25\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until y by \e[31m2\e[0m){\n\e[31m\e[31m   |\e[0m                  \
    \       ^\e[0m\n\e[31m   |\e[0m                         Found:    (y : Long)\n\
    \e[31m   |\e[0m                         Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpbdjt23_2.scala:14:29 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mfor\e[0m(j <- \e[31m0\e[0m until x\
    \ by \e[31m2\e[0m){\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\
    \e[31m   |\e[0m                             Found:    (x : Long)\n\e[31m   |\e\
    [0m                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794047
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        var even = 0\n    \
    \    var odd = 0\n        var num = 0\n        while (even < y && odd < x) {\n\
    \            if (x % 2 == 0) {\n                even = even + 1\n            \
    \    num = even + num\n            }\n            else {\n                odd\
    \ = odd + 1\n                num = odd + num\n            }\n        }\n     \
    \   if (even < y) {\n            num = even\n        }\n        if (odd < x) {\n\
    \            num = odd\n        }\n        return num\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqnnfwv1s.scala:33)\n\tat Problem.main(tmpqnnfwv1s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x to y).filter(_\
    \ % 2 == 0)\n        for (i <- range) {\n            if (i % 2 == 0) {\n     \
    \           evens += i\n            } else {\n                odds += i\n    \
    \        }\n        }\n        val even = evens.max\n        val odd = odds.max\n\
    \        if (even < odd) {\n            return even\n        } else {\n      \
    \      return -1\n        }\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaqpu85v9.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpaqpu85v9.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794042
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ > odd) {\n            return even\n        } else {\n            return -1\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpus_cg864.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpus_cg864.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpus_cg864.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpus_cg864.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x to y).filter(_\
    \ % 2 == 0)\n        range.foreach(x => if (x % 2 == 0) evens += x)\n        range.foreach(x\
    \ => if (x % 2 != 0) odds += x)\n        val even = evens.max\n        val odd\
    \ = odds.max\n        if (even > odd) even else odd\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeuo2hd9q.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpeuo2hd9q.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794043
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val num = mutable.ListBuffer[Long]()\n        val evenNum = mutable.ListBuffer[Long]()\n\
    \        val oddNum = mutable.ListBuffer[Long]()\n        val numNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNum = mutable.ListBuffer[Long]()\n        val oddNumNum =\
    \ mutable.ListBuffer[Long]()\n        val numNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNum = mutable.ListBuffer[Long]()\n        val oddNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val numNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNumNum = mutable.ListBuffer[Long]()\n        val oddNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val numNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val oddNumNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val numNumNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val\
    \ oddNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val numNumNumNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val evenNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val oddNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val\
    \ numNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val evenNumNumNumNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val oddNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val numNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val\
    \ evenNumNumNumNumNumNumNumNum = mutable.ListBuffer[Long\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr3zcrd96.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr3zcrd96.scala:38:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevenNumNumNumNumNumNumNum\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenNumNumNumNumNumNumNum is already defined as \e[33mvalue\e\
    [0m \e[35mevenNumNumNumNumNumNumNum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr3zcrd96.scala:39:12 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36moddNumNumNumNumNumNumNum\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddNumNumNumNumNumNumNum is already defined as \e[33mvalue\e\
    [0m \e[35moddNumNumNumNumNumNumNum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr3zcrd96.scala:40:12 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mnumNumNumNumNumNumNumNum\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumNumNumNumNumNumNumNum is already defined as \e[33mvalue\e\
    [0m \e[35mnumNumNumNumNumNumNumNum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr3zcrd96.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m"
  stdout: ''
  timestamp: 1659794047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        var max = 0\n     \
    \   var min = 0\n        var even = 0\n        var odd = 0\n        var xEven\
    \ = 0\n        var xOdd = 0\n        var yEven = 0\n        var yOdd = 0\n   \
    \     var xEvenMax = 0\n        var xOddMax = 0\n        var yEvenMax = 0\n  \
    \      var yOddMax = 0\n        var xEvenMin = 0\n        var xOddMin = 0\n  \
    \      var yEvenMin = 0\n        var yOddMin = 0\n        for(i <- 0 until x)\
    \ {\n            for(j <- 0 until y) {\n                if(i % 2 == 0 && j % 2\
    \ == 0) {\n                    if(max < i) {\n                        max = i\n\
    \                    }\n                    if(min > i) {\n                  \
    \      min = i\n                    }\n                    if(even < j) {\n  \
    \                      even = j\n                    }\n                    if(odd\
    \ > j) {\n                        odd = j\n                    }\n           \
    \         if(even > j && odd > i) {\n                        xEven = even\n  \
    \                      xOdd = odd\n                        yEven = i\n       \
    \                 yOdd = j\n                    }\n                    if(even\
    \ < j && odd < i) {\n                        xEven = even\n                  \
    \      xOdd = odd\n                        yEven = i\n                       \
    \ yOdd = j\n                    }\n                    if(even > j && even < i)\
    \ {\n                        xEven = even\n                        xOdd = odd\n\
    \                        yEven = i\n                        yOdd = j\n       \
    \             }\n                    if(even < j && even > i) {\n            \
    \            xEven = even\n                        xOdd = odd\n              \
    \          yEven = i\n                        yOdd = j\n                    }\n\
    \                    if(even > j && odd > i) {\n                        xEven\
    \ = even\n                        xOdd = odd\n                        yEven =\
    \ i\n                        yOdd = j\n                    }\n               \
    \     if(even > j && even < i) {\n                        xEven = even\n     \
    \                   xOdd = odd\n                        yEven = i\n          \
    \              yOdd = j\n                    }\n                    if(odd > j\
    \ && even > i) {\n                        xEven = even\n                     \
    \   xOdd = odd\n                        yEven = i\n                        yOdd\
    \ = j\n                    }\n                    if(odd > j && odd < i) {\n \
    \                       xEven = even\n                        xOdd = odd\n   \
    \                     yEven = i\n                        yOdd = j\n          \
    \          }\n                    if(odd > j && even < i) {\n                \
    \        xEven = even\n                        xOdd = odd\n                  \
    \      yEven = i\n                        yOdd = j\n                    }\n  \
    \                  if(odd < \n    }\n    def main(args: Array[String]) = {\n \
    \   assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpl04flimr.scala:96:28 ---------------------------\e\
    [0m\e[0m\n\e[31m96 |\e[0m                    \e[33mif\e[0m(odd < \n\e[31m\e[31m\
    \   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m                \
    \            expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpl04flimr.scala:110:0 ---------------------------\e\
    [0m\e[0m\n\e[31m110 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl04flimr.scala:27:25\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until x) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (x : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpl04flimr.scala:28:29 --------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m            \e[33mfor\e[0m(j <- \e[31m0\e[0m until y) {\n\e\
    [31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m      \
    \                       Found:    (y : Long)\n\e[31m   |\e[0m                \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpl04flimr.scala:98:4\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m98 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m    Line is indented too far to\
    \ the left, or a `}` is missing\n1 warning found\n4 errors found\n"
  stdout: ''
  timestamp: 1659794056
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        even.clear()\n        odd.clear()\n        for (i <- evens) {\n\
    \            if (i % 2 == 0) {\n                even += i\n            }\n   \
    \     }\n        for (i <- odds) {\n            if (i % 2 == 1) {\n          \
    \      odd += i\n            }\n        }\n        val evenMax = even.max\n  \
    \      val oddMax = odd.max\n        if (evenMax > oddMax) {\n            return\
    \ evenMax\n        } else {\n            return -1\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbzejid_v.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbzejid_v.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbzejid_v.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbzejid_v.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpbzejid_v.scala:15:26 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbzejid_v.scala:15:29\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mrange"
  stdout: ''
  timestamp: 1659794055
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = x to y\
    \ by 2\n        val evensCount = evens.count(_ % 2 == 0)\n        if (evensCount\
    \ > 0) {\n            evens.max\n        } else {\n            -1\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp89r3dasm.scala:22)\n\tat Problem.main(tmp89r3dasm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794056
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val range = (x - y).abs \n  \
    \      val evenRange = range / 2\n        val oddRange = range % 2\n        val\
    \ evenStart = x - (evenRange * 2)\n        val evenEnd = evenStart + evenRange\n\
    \        val oddStart = x - (oddRange * 2)\n        val oddEnd = oddStart + oddRange\n\
    \        val evenEven = x - (evenRange * 2)\n        val evenOdd = evenEven +\
    \ evenRange\n        val oddOdd = x - (oddRange * 2)\n        val evenOddOdd =\
    \ evenOdd + oddRange\n        val evenOddEven = evenOdd + evenRange\n        val\
    \ evenOddOddOdd = evenOddOdd + oddRange\n        val evenOddEvenOdd = evenOddEvenOdd\
    \ + evenRange\n        val evenOddEvenOddOdd = evenOddEvenOddOdd + oddRange\n\
    \        val evenOddEvenOddEvenOdd = evenOddEvenOddOddOdd + evenRange\n      \
    \  val evenOddEvenOddEvenOddOdd = evenOddEvenOddEvenOddOdd + oddRange\n      \
    \  val evenOddEvenOddEvenOddEvenOdd = evenOddEvenOddEvenOddEvenOddOdd + evenRange\n\
    \        val evenOddEvenOddEvenOddEvenOddOdd = evenOddEvenOddEvenOddEvenOddOdd\
    \ + oddRange\n        val evenOddEvenOddEvenOddEvenOddEvenOdd = evenOddEvenOddEvenOddEvenOddEvenOddOdd\
    \ + evenRange\n        val evenOddEvenOddEvenOddEvenOddEvenOddOdd = evenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ + oddRange\n        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = evenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd\
    \ + evenRange\n        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd = evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenO\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppzf0ug8k.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmppzf0ug8k.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmppzf0ug8k.scala:26:29 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mevenOddEvenOdd\e[0m = evenOddEvenOdd\
    \ + evenRange\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m\
    \   |\e[0m                             Recursive \e[33mvalue\e[0m \e[35mevenOddEvenOdd\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmppzf0ug8k.scala:27:32\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevenOddEvenOddOdd\e[0m = evenOddEvenOddOdd + oddRange\n\e[31m\e[31m  \
    \ |\e[0m                                ^\e[0m\n\e[31m   |\e[0m              \
    \              Recursive \e[33mvalue\e[0m \e[35mevenOddEvenOddOdd\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppzf0ug8k.scala:28:36\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mevenOddEvenOddEvenOdd\e[0m = evenOddEvenOddOddOdd + evenRange\n\e[31m\e[31m\
    \   |\e[0m                                    ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                    Not found: evenOddEvenOddOddOdd\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain"
  stdout: ''
  timestamp: 1659794055
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val range = Range(x, y)\n   \
    \     range.foreach { x =>\n            range.foreach { y =>\n               \
    \ if (x % 2 == 0 && y % 2 == 0) {\n                    evens += x\n          \
    \      } else {\n                    odds += y\n                }\n          \
    \  }\n        }\n        val even = evens.max\n        val odd = odds.max\n  \
    \      if (even > odd) {\n            even\n        } else {\n            -1\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpejlhnpva.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpejlhnpva.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpejlhnpva.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpejlhnpva.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794055
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        var even = 0\n    \
    \    var odd = 0\n        var evenMax = 0\n        var oddMax = 0\n        var\
    \ evenMin = Integer.MAX_VALUE\n        var oddMin = Integer.MIN_VALUE\n      \
    \  var evenMaxIndex = -1\n        var oddMaxIndex = -1\n        var evenMinIndex\
    \ = -1\n        var oddMinIndex = -1\n        var evenMaxIndex2 = -1\n       \
    \ var oddMaxIndex2 = -1\n        var evenMinIndex2 = -1\n        var oddMinIndex2\
    \ = -1\n        var evenMaxIndex3 = -1\n        var oddMaxIndex3 = -1\n      \
    \  var evenMinIndex3 = -1\n        var oddMinIndex3 = -1\n        var evenMaxIndex4\
    \ = -1\n        var oddMaxIndex4 = -1\n        var evenMinIndex4 = -1\n      \
    \  var oddMinIndex4 = -1\n        var evenMaxIndex5 = -1\n        var oddMaxIndex5\
    \ = -1\n        var evenMinIndex5 = -1\n        var oddMinIndex5 = -1\n      \
    \  var evenMaxIndex6 = -1\n        var oddMaxIndex6 = -1\n        var evenMinIndex6\
    \ = -1\n        var oddMinIndex6 = -1\n        var evenMaxIndex7 = -1\n      \
    \  var oddMaxIndex7 = -1\n        var evenMinIndex7 = -1\n        var oddMinIndex7\
    \ = -1\n        var evenMaxIndex8 = -1\n        var oddMaxIndex8 = -1\n      \
    \  var evenMinIndex8 = -1\n        var oddMinIndex8 = -1\n        var evenMaxIndex9\
    \ = -1\n        var oddMaxIndex9 = -1\n        var evenMinIndex9 = -1\n      \
    \  var oddMinIndex9 = -1\n        var evenMaxIndex10 = -1\n        var oddMaxIndex10\
    \ = -1\n        var evenMinIndex10 = -1\n        var oddMinIndex10 = -1\n    \
    \    var evenMaxIndex11 = -1\n        var oddMaxIndex11 = -1\n        var evenMinIndex11\
    \ = -1\n        var oddMinIndex11 = -1\n        var evenMaxIndex12 = -1\n    \
    \    var oddMaxIndex12 = -1\n        var evenMinIndex12 = -1\n        var oddMinIndex12\
    \ = -1\n        var evenMaxIndex13 = -1\n        var oddMaxIndex13 = -1\n    \
    \    var evenMinIndex13 = -1\n        var oddMinIndex13 = -1\n        var evenMaxIndex14\
    \ = -1\n        var oddMaxIndex14 = -1\n        var evenMinIndex14 = -1\n    \
    \    var oddMinIndex14 = -1\n        var evenMaxIndex15 = -1\n        var oddMaxIndex15\
    \ = -1\n        var evenMinIndex15 = -1\n        var oddMinIndex15 = -1\n    \
    \    var evenMaxIndex16 = -1\n        var oddMaxIndex16 = -1\n        var evenMinIndex16\
    \ = -1\n        var oddMinIndex16 = -1\n        var evenMaxIndex17 = -1\n    \
    \    var oddMaxIndex17 = -1\n        var evenMinIndex17 = -1\n        var oddMinIndex17\
    \ = -1\n        var evenMaxIndex18 = -1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwos4a4tz.scala:86:5\
    \ ---------------------\e[0m\e[0m\n\e[31m86 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794054
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ > odd) {\n            return even\n        } else {\n            return -1\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpus_cg864.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpus_cg864.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpus_cg864.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpus_cg864.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x to y).filter(_\
    \ % 2 == 0)\n        for (i <- range) {\n            if (i % 2 == 0) {\n     \
    \           evens += i\n            } else {\n                odds += i\n    \
    \        }\n        }\n        val even = evens.max\n        val odd = odds.max\n\
    \        if (even < odd) {\n            return even\n        } else {\n      \
    \      return -1\n        }\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaqpu85v9.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpaqpu85v9.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794042
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val evensAndOdds = mutable.ListBuffer[Long]()\n\
    \        for (i <- x until y) {\n            if (i % 2 == 0) {\n             \
    \   evens += i\n            } else {\n                odds += i\n            }\n\
    \        }\n        evensAndOdds += evens.max\n        evensAndOdds += odds.max\n\
    \        evensAndOdds.max\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphdd8iig8.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmphdd8iig8.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmphdd8iig8.scala:13:27 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevensAndOdds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659794054
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val range = Range(x, y)\n   \
    \     range.foreach(x => {\n            if (x % 2 == 0) {\n                evens\
    \ += x\n            } else {\n                odds += x\n            }\n     \
    \   })\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ > odd) {\n            return even\n        } else {\n            return -1\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps6p2x68r.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmps6p2x68r.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmps6p2x68r.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps6p2x68r.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794057
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val evenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddOdd = mutable.ListBuffer[Long]()\n        val evenOddEven\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEven = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenOddOdd = mutable.ListBuffer[Long]()\n        val\
    \ evenOddEvenEvenEvenOddEvenOdd = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenEvenOddEvenEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenEvenOddEvenEvenEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenOddEvenEvenEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenOddEvenEvenEvenOddEvenEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenOddEvenEvenEvenOddEvenEvenEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenOddEvenEvenEvenOddEvenEvenEvenEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenOddEvenEvenOddEvenEvenEvenEvenOddEvenEvenEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenOddEvenEvenOddEvenEvenEvenOddEvenEvenEvenOddEvenEvenEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenOddEvenEvenOddEvenEvenEvenOddEvenEvenEvenOddEvenEvenEvenEvenOddEvenEvenEvenEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenOddEvenEvenOdd\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppy316u7r.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppy316u7r.scala:11:20\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mevens\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppy316u7r.scala:12:19\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36modds\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppy316u7r.scala:13:19\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36meven\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppy316u7r.scala:14:18\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36modd\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppy316u7r.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mevenOdd\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling"
  stdout: ''
  timestamp: 1659794057
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val evensAndOdds = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsSet = mutable.Set[Long]()\n        val evensAndOddsSetSet\
    \ = mutable.Set[Long]()\n        val evensAndOddsSetSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSetSet = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSet\
    \ = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSetSetSetSetSet = mutable.Set[Long]()\n       \
    \ val evensAndOddsSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n        val\
    \ evensAndOddsSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSetSetSetSetSet\
    \ = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSetSetSetSetSetSet\
    \ = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSetSetSetSetSetSetSet\
    \ = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSetSetSetSetSetSetSet\
    \ = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSetSetSetSetSetSetSet\
    \ = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSetSetSetSetSetSetSet\
    \ = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSetSetSetSetSetSetSetSet\
    \ = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSetSetSetSetSetSetSetSet\
    \ = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSetSetSetSetSetSetSetSet\
    \ = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSetSetSetSetSetSetSetSet\
    \ = mutable.Set[Long]()\n        val evensAndOddsSetSetSet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwhrdpqcq.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwhrdpqcq.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevensAndOddsSetSetSetSetSetSetSetSetSet\e[0m = mutable.Set[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensAndOddsSetSetSetSetSetSetSetSetSet is already defined\
    \ as \e[33mvalue\e[0m \e[35mevensAndOddsSetSetSetSetSetSetSetSetSet\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpwhrdpqcq.scala:26:12 ---------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mval\e[0m \e[36mevensAndOddsSetSetSetSetSetSetSetSetSetSetSet\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensAndOddsSetSetSetSetSetSetSetSetSetSetSet is already defined\
    \ as \e[33mvalue\e[0m \e[35mevensAndOddsSetSetSetSetSetSetSetSetSetSetSet\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpwhrdpqcq.scala:27:12 ---------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mevensAndOddsSetSetSetSetSetSetSetSetSetSetSet\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensAndOddsSetSetSetSetSetSetSetSetSetSetSet is already defined\
    \ as \e[33mvalue\e[0m \e[35mevensAndOddsSetSetSetSetSetSetSetSetSetSetSet\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpwhrdpqcq.scala:28:12 ---------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0"
  stdout: ''
  timestamp: 1659794057
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x to y)\n\
    \        range.foreach{ x =>\n            if (x % 2 == 0) {\n                evens\
    \ += x\n            } else {\n                odds += x\n            }\n     \
    \   }\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ > odd) {\n            return even\n        } else {\n            return -1\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxvosr827.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpxvosr827.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794054
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val range = Range(x, y)\n        for (i <- range) {\n            if (i\
    \ % 2 == 0) {\n                evens += i\n            } else {\n            \
    \    odds += i\n            }\n        }\n        for (i <- evens) {\n       \
    \     if (i % 2 == 0) {\n                even += i\n            } else {\n   \
    \             odd += i\n            }\n        }\n        val even = even.toList\n\
    \        val odd = odd.toList\n        val evens = evens.toList\n        val odds\
    \ = odds.toList\n        val nums = evens.union(odds)\n        val even = even.toList\n\
    \        val odd = odd.toList\n        val evens = evens.toList\n        val odds\
    \ = odds.toList\n        val nums = evens.union(odds)\n        val even = even.toList\n\
    \        val odd = odd.toList\n        val evens = evens.toList\n        val odds\
    \ = odds.toList\n        val nums = evens.union(odds)\n        val even = even.toList\n\
    \        val odd = odd.toList\n        val evens = evens.toList\n        val odds\
    \ = odds.toList\n        val nums = evens.union(odds)\n        val even = even.toList\n\
    \        val odd = odd.toList\n        val evens = evens.toList\n        val odds\
    \ = odds.toList\n        val nums = evens.union(odds)\n        val even = even.toList\n\
    \        val odd = odd.toList\n        val evens = evens.toList\n        val odds\
    \ = odds.toList\n        val nums = evens.union(odds)\n        val even = even.toList\n\
    \        val odd = odd.toList\n        val evens = evens.toList\n        val odds\
    \ = odds.toList\n        val nums = evens.union(odds)\n        val even = even.toList\n\
    \        val odd = odd.toList\n        val evens = evens.toList\n        val odds\
    \ = odds.toList\n        val nums = evens.union(odds)\n        val even = even.toList\n\
    \        val odd = odd.toList\n        val evens = evens.toList\n        \n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptsdz2z5w.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = even.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0meven\
    \ is already defined as \e[33mvalue\e[0m \e[35meven\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptsdz2z5w.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36modd\e[0m = odd.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modd is already defined as \e[33mvalue\e[0m \e[35modd\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmptsdz2z5w.scala:33:12 ---------------------------\e[0m\e[0m\n\e[31m33\
    \ |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = evens.toList\n\e[31m\e[31m \
    \  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mevens is already\
    \ defined as \e[33mvalue\e[0m \e[35mevens\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptsdz2z5w.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36modds\e[0m = odds.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modds is already defined as \e[33mvalue\e[0m \e[35modds\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmptsdz2z5w.scala:35:12 ---------------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = evens.union(odds)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mnums is already\
    \ defined as \e[33mvalue\e[0m \e[35mnums\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Erro"
  stdout: ''
  timestamp: 1659794058
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        for (i <- x until y) {\n            if (i % 2 == 0) {\n             \
    \   evens += i\n            }\n        }\n        if (evens.isEmpty) {\n     \
    \       return -1\n        }\n        evens.max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt9n8uu1_.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794055
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        var even = 0\n    \
    \    var odd = 0\n        var biggest = -1\n        var evenNum = 0\n        var\
    \ oddNum = 0\n        var xEven = x.toInt\n        var yEven = y.toInt\n     \
    \   var xOdd = xEven + 1\n        var yOdd = yEven + 1\n        while(even < xEven\
    \ && odd < yEven) {\n            evenNum = even + xEven\n            oddNum =\
    \ odd + yEven\n            biggest = evenNum\n            if(evenNum % 2 == 0\
    \ && oddNum % 2 == 0) {\n                biggest = evenNum\n            }\n  \
    \          if(evenNum % 2 != 0 && oddNum % 2 != 0) {\n                biggest\
    \ = oddNum\n            }\n            even = evenNum\n            odd = oddNum\n\
    \        }\n        if(biggest == -1) {\n            biggest = -1\n        }\n\
    \        return biggest\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkj90b3ba.scala:39)\n\tat Problem.main(tmpkj90b3ba.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794058
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val range = Range(x, y)\n   \
    \     range.foreach { x =>\n            if (x % 2 == 0) {\n                evens\
    \ += x\n            } else {\n                odds += x\n            }\n     \
    \   }\n        if (evens.isEmpty) {\n            return -1\n        } else {\n\
    \            val result = evens.max\n            if (odds contains result) {\n\
    \                return -1\n            } else {\n                return result\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgq0f3slj.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpgq0f3slj.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpgq0f3slj.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgq0f3slj.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794058
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        range.foreach { i =>\n            if (i % 2 == 0) {\n               \
    \ evens += i\n            } else {\n                odds += i\n            }\n\
    \        }\n        val even = evens.max\n        val odd = odds.max\n       \
    \ if (even > odd) {\n            return even\n        } else {\n            return\
    \ -1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdrljhmaf.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpdrljhmaf.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpdrljhmaf.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdrljhmaf.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794058
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ > odd) {\n            return even\n        } else {\n            return -1\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpus_cg864.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpus_cg864.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpus_cg864.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpus_cg864.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        range.foreach(x => {\n            if (x % 2 == 0) {\n               \
    \ evens += x\n            } else {\n                odds += x\n            }\n\
    \        })\n        val even = evens.max\n        val odd = odds.max\n      \
    \  if (even > odd) {\n            return even\n        } else {\n            return\
    \ -1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpex7tj1w7.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpex7tj1w7.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpex7tj1w7.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpex7tj1w7.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        for (i <- x until y) {\n\
    \            if (i % 2 == 0) {\n                evens += i\n            } else\
    \ {\n                odds += i\n            }\n        }\n        val even = evens.max\n\
    \        val odd = odds.max\n        if (even > odd) {\n            return even\n\
    \        } else {\n            return -1\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8k0k6mm5.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp8k0k6mm5.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794056
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x - y).abs\
    \ \n        val evenRange = range.filter(_ % 2 == 0)\n        val oddRange = range.filter(_\
    \ % 2 == 1)\n        evenRange foreach { x => evens += x }\n        oddRange foreach\
    \ { x => odds += x }\n        val evenMax = evens.max\n        val oddMax = odds.max\n\
    \        if (evenMax == evenMax && oddMax == oddMax) {\n            return evenMax\n\
    \        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphbcvsd5i.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmphbcvsd5i.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmphbcvsd5i.scala:14:30 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevenRange\e[0m = range.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \   ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        value filter is\
    \ not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphbcvsd5i.scala:15:29\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36moddRange\e[0m = range.filter(_ % \e[31m2\e[0m == \e[31m1\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \             value filter is not a member of Long\n4 errors found\n"
  stdout: ''
  timestamp: 1659794059
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        var maxNum = -1L\n\
    \        var minNum = Long.MaxValue\n        for(i <- 0 until x ; j <= y ; i+=2)\
    \ {\n            val num = i + j\n            if(num > maxNum) {\n           \
    \     maxNum = num\n            }\n            if(num < minNum) {\n          \
    \      minNum = num\n            }\n        }\n        if(maxNum == -1L) {\n \
    \           return -1L\n        }\n        if(minNum == Long.MaxValue) {\n   \
    \         return -1L\n        }\n        return maxNum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpf_da4k47.scala:13:36 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until x ; j\
    \ <= y ; i+=\e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                           \
    \         ^\e[0m\n\e[31m   |\e[0m                                    '<-' expected,\
    \ but ';' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpf_da4k47.scala:13:42\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i\
    \ <- \e[31m0\e[0m until x ; j <= y ; i+=\e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m\
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                               '<-' expected, but ')' found\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpf_da4k47.scala:13:25 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until x ; j <= y\
    \ ; i+=\e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\
    \e[31m   |\e[0m                         Found:    (x : Long)\n\e[31m   |\e[0m\
    \                         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794059
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        var evenNum = 0\n \
    \       var oddNum = 0\n        var evenMax = 0\n        var oddMax = 0\n    \
    \    var evenMin = 0\n        var oddMin = 0\n        var evenMaxNum = 0\n   \
    \     var oddMaxNum = 0\n        var evenMinNum = 0\n        var oddMinNum = 0\n\
    \        var evenMaxNumNum = 0\n        var oddMaxNumNum = 0\n        var evenMinNumNum\
    \ = 0\n        var oddMinNumNum = 0\n        var evenMaxNumNumNum = 0\n      \
    \  var oddMaxNumNumNum = 0\n        var evenMinNumNumNum = 0\n        var oddMinNumNumNum\
    \ = 0\n        var evenMaxNumNumNumNum = 0\n        var oddMaxNumNumNumNum = 0\n\
    \        var evenMinNumNumNumNum = 0\n        var oddMinNumNumNumNum = 0\n   \
    \     var evenMaxNumNumNumNum = 0\n        var oddMaxNumNumNumNum = 0\n      \
    \  var evenMinNumNumNumNum = 0\n        var oddMinNumNumNumNum = 0\n        var\
    \ evenMaxNumNumNumNum = 0\n        var oddMaxNumNumNumNum = 0\n        var evenMinNumNumNumNum\
    \ = 0\n        var oddMinNumNumNumNum = 0\n        var evenMaxNumNumNumNum = 0\n\
    \        var oddMaxNumNumNumNum = 0\n        var evenMinNumNumNumNum = 0\n   \
    \     var oddMinNumNumNumNum = 0\n        var evenMaxNumNumNumNum = 0\n      \
    \  var oddMaxNumNumNumNum = 0\n        var evenMinNumNumNumNum = 0\n        var\
    \ oddMinNumNumNumNum = 0\n        var evenMaxNumNumNumNum = 0\n        var oddMaxNumNumNumNum\
    \ = 0\n        var evenMinNumNumNumNum = 0\n        var oddMinNumNumNumNum = 0\n\
    \        var evenMaxNumNumNumNum = 0\n        var oddMaxNumNumNumNum = 0\n   \
    \     var evenMinNumNumNumNum = 0\n        var oddMinNumNumNumNum = 0\n      \
    \  var evenMaxNumNumNumNum = 0\n        var oddMaxNumNumNumNum = 0\n        var\
    \ evenMinNumNumNumNum = 0\n        var oddMinNumNumNumNum = 0\n        var evenMaxNumNumNumNum\
    \ = 0\n        var oddMaxNumNumNumNum = 0\n        var evenMinNumNumNumNum = 0\n\
    \        var oddMinNumNumNumNum = 0\n        var evenMaxNumNumNumNum = 0\n   \
    \     var oddMaxNumNumNumNum = 0\n        var evenMinNumNumNumNum = 0\n      \
    \  var oddMinNumNumNumNum = 0\n        var evenMaxNumNumNumNum = 0\n        var\
    \ oddMaxNumNumNumNum = 0\n        var evenMinNumNumNumNum = 0\n        var oddMinNumNumNumNum\
    \ = 0\n        var even\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpo3_cm36c.scala:74:4 ----------------------------\e\
    [0m\e[0m\n\e[31m74 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo3_cm36c.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mevenMaxNumNumNumNum\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mevenMaxNumNumNumNum is already\
    \ defined as \e[33mvariable\e[0m \e[35mevenMaxNumNumNumNum\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo3_cm36c.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mvar\e[0m\
    \ \e[36moddMaxNumNumNumNum\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddMaxNumNumNumNum is already defined as \e[33mvariable\e\
    [0m \e[35moddMaxNumNumNumNum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpo3_cm36c.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mvar\e[0m \e[36mevenMinNumNumNumNum\e[0m\
    \ = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mevenMinNumNumNumNum is already defined as \e[33mvariable\e[0m \e\
    [35mevenMinNumNumNumNum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpo3_cm36c.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mvar\e[0m \e[36moddMinNumNumNumNum\e[0m\
    \ = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0moddMinNumNumNumNum is already defined as \e[33mvariable\e[0m \e\
    [35moddMinNumNumNumNum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpo3_cm36c.sc"
  stdout: ''
  timestamp: 1659794058
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        range.foreach(x => if (x % 2 == 0) evens += x)\n        range.foreach(x\
    \ => if (x % 2 != 0) odds += x)\n        val even = evens.max\n        val odd\
    \ = odds.max\n        if (even > odd) even else odd\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsb64ilar.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpsb64ilar.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpsb64ilar.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsb64ilar.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794059
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        range.foreach(x => {\n            if (x % 2 == 0) {\n               \
    \ evens += x\n            } else {\n                odds += x\n            }\n\
    \        })\n        val even = evens.max\n        val odd = odds.max\n      \
    \  if (even > odd) {\n            return even\n        } else {\n            return\
    \ -1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpex7tj1w7.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpex7tj1w7.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpex7tj1w7.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpex7tj1w7.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = x to y\
    \ by 2\n        val evensSorted = evens.toList\n        val evensSortedSorted:\
    \ Seq[Int] = evensSorted.sortWith(_ < _)\n        val evensSortedSortedSorted:\
    \ Seq[Int] = evensSortedSorted.sortWith(_ < _)\n        val evensSortedSortedSortedSorted:\
    \ Seq[Int] = evensSortedSortedSorted.sortWith(_ < _)\n        val evensSortedSortedSortedSortedSorted:\
    \ Seq[Int] = evensSortedSortedSortedSorted.sortWith(_ < _)\n        val evensSortedSortedSortedSortedSortedSorted:\
    \ Seq[Int] = evensSortedSortedSortedSortedSorted.sortWith(_ < _)\n        val\
    \ evensSortedSortedSortedSortedSortedSorted: Seq[Int] = evensSortedSortedSortedSortedSortedSorted.sortWith(_\
    \ < _)\n        val evensSortedSortedSortedSortedSortedSortedSorted: Seq[Int]\
    \ = evensSortedSortedSortedSortedSortedSortedSorted.sortWith(_ < _)\n        val\
    \ evensSortedSortedSortedSortedSortedSortedSortedSorted: Seq[Int] = evensSortedSortedSortedSortedSortedSortedSorted.sortWith(_\
    \ < _)\n        val evensSortedSortedSortedSortedSortedSortedSortedSorted: Seq[Int]\
    \ = evensSortedSortedSortedSortedSortedSortedSortedSorted.sortWith(_ < _)\n  \
    \      val evensSortedSortedSortedSortedSortedSortedSortedSortedSorted: Seq[Int]\
    \ = evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.sortWith(_\
    \ < _)\n        val evensSortedSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ Seq[Int] = evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.sortWith(_\
    \ < _)\n        val evensSortedSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ Seq[Int] = evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.sortWith(_\
    \ < _)\n        val evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ Seq[Int] = evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.sortWith(_\
    \ < _)\n        val evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ Seq[Int] = evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.sortWith(_\
    \ < _)\n        val evensSortedSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ Seq[Int] = evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzv07jy4b.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mevensSortedSortedSortedSortedSortedSorted\e\
    [0m: \e[35mSeq\e[0m[\e[35mInt\e[0m] = evensSortedSortedSortedSortedSortedSorted.sortWith(_\
    \ < _)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSortedSortedSortedSortedSortedSorted is already defined\
    \ as \e[33mvalue\e[0m \e[35mevensSortedSortedSortedSortedSortedSorted\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpzv07jy4b.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mevensSortedSortedSortedSortedSortedSortedSortedSorted\e\
    [0m: \e[35mSeq\e[0m[\e[35mInt\e[0m] = evensSortedSortedSortedSortedSortedSortedSortedSorted.sortWith(_\
    \ < _)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSortedSortedSortedSortedSortedSortedSortedSorted is already\
    \ defined as \e[33mvalue\e[0m \e[35mevensSortedSortedSortedSortedSortedSortedSortedSorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpzv07jy4b.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mevensSortedSortedSortedSortedSortedSortedSortedSortedSorted\e\
    [0m: \e[35mSeq\e[0m[\e[35mInt\e[0m] = evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.sortWith(_\
    \ < _)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ is already defined as \e[33mvalue\e[0m \e[35me"
  stdout: ''
  timestamp: 1659794060
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val range = Range(x, y)\n   \
    \     range.foreach(x => {\n            if (x % 2 == 0) {\n                evens\
    \ += x\n            } else {\n                odds += x\n            }\n     \
    \   })\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ > odd) {\n            even\n        } else {\n            -1\n        }\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvz8ncymh.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpvz8ncymh.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpvz8ncymh.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvz8ncymh.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794059
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x to y).filter(_\
    \ % 2 == 0)\n        range.foreach(x => if (x % 2 == 0) evens += x)\n        range.foreach(x\
    \ => if (x % 2 == 1) odds += x)\n        val even = evens.max\n        val odd\
    \ = odds.max\n        if (even > odd) even else odd\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz6wxjpkg.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpz6wxjpkg.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794061
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ > odd) {\n            return even\n        } else {\n            return -1\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpus_cg864.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpus_cg864.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpus_cg864.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpus_cg864.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ < odd) {\n            return even\n        } else {\n            return -1\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxowmciex.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpxowmciex.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpxowmciex.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxowmciex.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794067
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val range = Range(x, y)\n   \
    \     range.foreach(x => {\n            if (x % 2 == 0) {\n                evens\
    \ += x\n            } else {\n                odds += x\n            }\n     \
    \   })\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ > odd) {\n            return even\n        } else {\n            return -1\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps6p2x68r.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmps6p2x68r.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmps6p2x68r.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps6p2x68r.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794057
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = x to y\
    \ by 2\n        val evensCount = evens.count(_ % 2 == 0)\n        if (evensCount\
    \ == 0) {\n            return -1\n        }\n        val maxEven = evens.max\n\
    \        if (maxEven % 2 == 0) {\n            return maxEven\n        }\n    \
    \    val maxEven2 = maxEven / 2\n        val maxEven3 = maxEven2 / 2\n       \
    \ val maxEven4 = maxEven3 / 2\n        val maxEven5 = maxEven4 / 2\n        val\
    \ maxEven6 = maxEven5 / 2\n        val maxEven7 = maxEven6 / 2\n        val maxEven8\
    \ = maxEven7 / 2\n        val maxEven9 = maxEven8 / 2\n        val maxEven10 =\
    \ maxEven9 / 2\n        val maxEven11 = maxEven10 / 2\n        val maxEven12 =\
    \ maxEven11 / 2\n        val maxEven13 = maxEven12 / 2\n        val maxEven14\
    \ = maxEven13 / 2\n        val maxEven15 = maxEven14 / 2\n        val maxEven16\
    \ = maxEven15 / 2\n        val maxEven17 = maxEven16 / 2\n        val maxEven18\
    \ = maxEven17 / 2\n        val maxEven19 = maxEven18 / 2\n        val maxEven20\
    \ = maxEven19 / 2\n        val maxEven21 = maxEven20 / 2\n        val maxEven22\
    \ = maxEven21 / 2\n        val maxEven23 = maxEven22 / 2\n        val maxEven24\
    \ = maxEven23 / 2\n        val maxEven25 = maxEven24 / 2\n        val maxEven26\
    \ = maxEven25 / 2\n        val maxEven27 = maxEven26 / 2\n        val maxEven28\
    \ = maxEven27 / 2\n        val maxEven29 = maxEven28 / 2\n        val maxEven30\
    \ = maxEven29 / 2\n        val maxEven31 = maxEven30 / 2\n        val maxEven32\
    \ = maxEven31 / 2\n        val maxEven33 = maxEven32 / 2\n        val maxEven34\
    \ = maxEven33 / 2\n        val maxEven35 = maxEven34 / 2\n        val maxEven36\
    \ = maxEven35 / 2\n        val maxEven37 = maxEven36 / 2\n        val maxEven38\
    \ = maxEven37 / 2\n        val maxEven39 = maxEven38 / 2\n        val maxEven40\
    \ = maxEven39 / 2\n\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvmv6727r.scala:60:5\
    \ ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794066
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ > odd) {\n            return even\n        } else {\n            return -1\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpus_cg864.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpus_cg864.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpus_cg864.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpus_cg864.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        var maxEven = math.max(x,\
    \ y)\n        var even = math.min(x, y)\n        var evenMax = math.max(even,\
    \ maxEven)\n        var evenMin = math.min(even, maxEven)\n        var evenMaxInRange\
    \ = math.max(evenMax, evenMin)\n        var evenMinInRange = math.min(evenMax,\
    \ evenMin)\n        var evenMaxInRangeInRange = math.max(evenMaxInRange, evenMinInRange)\n\
    \        var evenMaxInRangeInRangeInRange = math.max(evenMaxInRangeInRange, evenMinInRangeInRange)\n\
    \        var evenMaxInRangeInRangeInRangeInRange = math.max(evenMaxInRangeInRangeInRange,\
    \ evenMinInRangeInRangeInRange)\n        var evenMaxInRangeInRangeInRangeInRangeInRange\
    \ = math.max(evenMaxInRangeInRangeInRangeInRange, evenMinInRangeInRangeInRangeInRange)\n\
    \        var evenMaxInRangeInRangeInRangeInRangeInRangeInRange = math.max(evenMaxInRangeInRangeInRangeInRangeInRange,\
    \ evenMinInRangeInRangeInRangeInRangeInRange)\n        var evenMaxInRangeInRangeInRangeInRangeInRangeInRangeInRange\
    \ = math.max(evenMaxInRangeInRangeInRangeInRangeInRangeInRange, evenMinInRangeInRangeInRangeInRangeInRangeInRange)\n\
    \        var evenMaxInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange =\
    \ math.max(evenMaxInRangeInRangeInRangeInRangeInRangeInRangeInRange, evenMinInRangeInRangeInRangeInRangeInRangeInRangeInRange)\n\
    \        var evenMaxInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange =\
    \ math.max(evenMaxInRangeInRangeInRangeInRangeInRangeInRangeInRange, evenMinInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange)\n\
    \        var evenMaxInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange\
    \ = math.max(evenMaxInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange,\
    \ evenMinInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange)\n  \
    \      var evenMaxInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange\
    \ = math.max(evenMaxInRangeInRangeInRangeInRangeInRangeInRangeInRange, evenMinInRangeIn\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuy7qskpa.scala:27:4 ----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuy7qskpa.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mevenMaxInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange\e[0m =\
    \ math.max(evenMaxInRangeInRangeInRangeInRangeInRangeInRangeInRange, evenMinInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenMaxInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange\
    \ is already defined as \e[33mvariable\e[0m \e[35mevenMaxInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuy7qskpa.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mvar\e[0m \e[36mevenMaxInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange\e\
    [0m = math.max(evenMaxInRangeInRangeInRangeInRangeInRangeInRangeInRange, evenMinInRangeIn\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenMaxInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange\
    \ is already defined as \e[33mvariable\e[0m \e[35mevenMaxInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpuy7qskpa.scala:18:75 ------------------------\e[0m\e[0m\n\
    \e[31m18 |\e[0m        \e[33mvar\e[0m \e[36mevenMaxInRangeInRangeInRang"
  stdout: ''
  timestamp: 1659794066
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val range = Range(x, y)\n   \
    \     for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ > odd) {\n            return even\n        } else {\n            return -1\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5dtvgf7q.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp5dtvgf7q.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp5dtvgf7q.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5dtvgf7q.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x - y).abs\
    \ \n        val evenRange = range.filter(_ % 2 == 0)\n        val oddRange = range.filter(_\
    \ % 2 != 0)\n        evenRange foreach { x => evens += x }\n        oddRange foreach\
    \ { x => odds += x }\n        evens.max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf1mdgapc.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpf1mdgapc.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpf1mdgapc.scala:14:30 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevenRange\e[0m = range.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \   ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        value filter is\
    \ not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf1mdgapc.scala:15:29\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36moddRange\e[0m = range.filter(_ % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \             value filter is not a member of Long\n4 errors found\n"
  stdout: ''
  timestamp: 1659794067
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ > odd) {\n            return even\n        } else {\n            return -1\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpus_cg864.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpus_cg864.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpus_cg864.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpus_cg864.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        for (i <- x until y) {\n            if (i % 2 == 0) {\n             \
    \   evens += i\n            }\n        }\n        if (evens.isEmpty) {\n     \
    \       return -1\n        }\n        evens.max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt9n8uu1_.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794055
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val range = Range(x, y)\n   \
    \     for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        if (evens.isEmpty) {\n            return -1\n        }\n      \
    \  if (evens.size == 1) {\n            return evens.head\n        }\n        if\
    \ (evens.size == 2) {\n            if (evens.head % 2 == 0) {\n              \
    \  return evens.head\n            } else {\n                return -1\n      \
    \      }\n        }\n        val maxEven = evens.max\n        val maxOdd = odds.max\n\
    \        if (maxEven % 2 == 0) {\n            return maxEven\n        } else {\n\
    \            return maxOdd\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphc9vka5x.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmphc9vka5x.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmphc9vka5x.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphc9vka5x.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794068
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        range.foreach(x => if (x % 2 == 0) evens += x)\n        range.foreach(x\
    \ => if (x % 2 == 1) odds += x)\n        val even = evens.max\n        val odd\
    \ = odds.max\n        if (even > odd) even else odd\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp77tyuqpq.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp77tyuqpq.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp77tyuqpq.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp77tyuqpq.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794068
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        range.foreach { x =>\n            if (x % 2 == 0) {\n               \
    \ evens += x\n            } else {\n                odds += x\n            }\n\
    \        }\n        val even = evens.max\n        val odd = odds.max\n       \
    \ if (even > odd) {\n            return even\n        } else {\n            return\
    \ -1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8ahhgr1a.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp8ahhgr1a.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp8ahhgr1a.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8ahhgr1a.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val range = Range(x, y)\n   \
    \     range.foreach(x => if (x % 2 == 0) evens += x; else odds += x)\n       \
    \ val even = evens.max\n        val odd = odds.max\n        if (even > odd) even\
    \ else odd\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq1v2pqgd.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpq1v2pqgd.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpq1v2pqgd.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq1v2pqgd.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794068
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val range = Range(x, y)\n        range.foreach{ x => if (x % 2 == 0)\
    \ evens += x else odds += x }\n        evens ++= odds\n        evens.toList sortBy\
    \ { x => x } last\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmplcjgl7ko.scala:17:43 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        evens.toList sortBy { \e[36mx\e[0m => x } last\n\
    \e[31m\e[31m   |\e[0m                                           ^\e[0m\n\e[31m\
    \   |\e[0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplcjgl7ko.scala:11:20\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mevens\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplcjgl7ko.scala:12:19\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36modds\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplcjgl7ko.scala:13:19\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mnums\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplcjgl7ko.scala:14:26\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m\
    \   |\e[0m                          Found:    (x : Long)\n\e[31m   |\e[0m    \
    \                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmplcjgl7ko.scala:14:29 --------------------\e[0m\e\
    [0m"
  stdout: ''
  timestamp: 1659794068
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        var even = 0\n    \
    \    var odd = 0\n        var max = 0\n        for(i <- x to y) {\n          \
    \  if(i%2 == 0) {\n                even += i\n            }\n            else\
    \ {\n                odd += i\n            }\n        }\n        if(even > odd)\
    \ {\n            max = even\n        }\n        else {\n            max = odd\n\
    \        }\n        return max\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxacmbfu1.scala:16:21 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                even += i\n\e[31m\e[31m   |\e[0m    \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxacmbfu1.scala:19:20\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m                odd += i\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \    value += is not a member of Int - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659794069
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        range.foreach(x => {\n            if (x % 2 == 0) {\n               \
    \ evens += x\n            } else {\n                odds += x\n            }\n\
    \        })\n        val even = evens.max\n        val odd = odds.max\n      \
    \  if (even > odd) {\n            return even\n        } else {\n            return\
    \ -1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpex7tj1w7.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpex7tj1w7.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpex7tj1w7.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpex7tj1w7.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val range = Range(x, y)\n   \
    \     for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        if (evens.isEmpty) {\n            return -1\n        }\n      \
    \  if (evens.size == 1) {\n            return evens.head\n        }\n        if\
    \ (evens.size > 1) {\n            val maxEven = evens.max\n            val maxOdd\
    \ = odds.max\n            if (maxEven < maxOdd) {\n                return maxEven\n\
    \            } else {\n                return maxOdd\n            }\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdmcj1tlc.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpdmcj1tlc.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpdmcj1tlc.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdmcj1tlc.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpdmcj1tlc.scala:27:8 ---------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mif\e[0m (evens.size > \e[31m1\e[0m) {\n\
    \e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    Unit\n\e\
    [31m   |\e[0m        Required: Long\n\e[31m   |\e[0m        Maybe you are missing\
    \ an else part for the conditional?\n\e[31m28 |\e[0m            \e[33mval\e[0m\
    \ \e[36mmaxEven\e[0m = evens.max\n\e[31m29 |\e[0m            \e[33mval\e[0m \e\
    [36mmaxOdd\e[0m = odds.max\n\e[31m"
  stdout: ''
  timestamp: 1659794070
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        range.foreach(x => if (x % 2 == 0) evens += x; else odds += x)\n    \
    \    val even = evens.max\n        val odd = odds.max\n        if (even > odd)\
    \ even else odd\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpilkghuju.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpilkghuju.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpilkghuju.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpilkghuju.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794069
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        var max = 0\n     \
    \   var min = 0\n        for(i <- 0 until x; j <= y) {\n            val num =\
    \ (i + j) / 2\n            if(num % 2 == 0) {\n                max = num\n   \
    \         } else {\n                min = num\n            }\n        }\n    \
    \    if(max == min) {\n            return -1\n        }\n        return max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvggdwb8w.scala:13:34 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until x; j <=\
    \ y) {\n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m\
    \   |\e[0m                                  '<-' expected, but ')' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpvggdwb8w.scala:13:25 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until x; j <=\
    \ y) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m\
    \                         Found:    (x : Long)\n\e[31m   |\e[0m              \
    \           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794069
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        range.foreach(x => if (x % 2 == 0) evens += x; else odds += x)\n    \
    \    val even = evens.max\n        val odd = odds.max\n        if (even > odd)\
    \ even else odd\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpilkghuju.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpilkghuju.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpilkghuju.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpilkghuju.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794069
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x - y).abs\
    \ \n        val evenRange = (x % 2) == 0\n        val oddRange = (y % 2) == 0\n\
    \        val even = x until y\n        val odd = x until y\n        evens ++=\
    \ even\n        odds ++= odd\n        evens.filter(_ % 2 == 0).max\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprbtn_zy6.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprbtn_zy6.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794066
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x - y).abs\
    \ \n        for (i <- 1 to range) {\n            if (i % 2 == 0) {\n         \
    \       evens += i\n            } else {\n                odds += i\n        \
    \    }\n        }\n        val even = evens.max\n        val odd = odds.max\n\
    \        if (even > odd) {\n            return even\n        } else {\n      \
    \      return -1\n        }\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpav2z4ayf.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpav2z4ayf.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpav2z4ayf.scala:14:23 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to range) {\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                 Found:    (range : Long)\n\e[31m   |\e[0m                  \
    \     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794046
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x - y).abs\
    \ \n        val evenRange = range.filter(_ % 2 == 0)\n        val oddRange = range.filter(_\
    \ % 2 != 0)\n        evenRange foreach { x => evens += x }\n        oddRange foreach\
    \ { x => odds += x }\n        val evenMax = evens.max\n        val oddMax = odds.max\n\
    \        if (evenMax < oddMax) evenMax else oddMax\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpap7wux83.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpap7wux83.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpap7wux83.scala:14:30 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevenRange\e[0m = range.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \   ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        value filter is\
    \ not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpap7wux83.scala:15:29\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36moddRange\e[0m = range.filter(_ % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \             value filter is not a member of Long\n4 errors found\n"
  stdout: ''
  timestamp: 1659794070
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = x filter\
    \ (_ % 2 == 0)\n        val odds = x filter (_ % 2 != 0)\n        val evensOdds\
    \ = evens ++ odds\n        val evensOddsSum = evensOdds.sum\n        if (evensOddsSum\
    \ > y) {\n            return evensOddsSum\n        } else {\n            return\
    \ -1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpv6mdfic4.scala:11:22 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = x filter (_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    value filter is not a member of Long\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpv6mdfic4.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = x filter (_\
    \ % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   value filter is not a member of Long\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659794071
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = x to y\
    \ by 2\n        val evensSum = evens.sum\n        if (evensSum < 0) -1\n     \
    \   else if (evensSum == 0) -1\n        else evens.max\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu4liluxs.scala:20)\n\tat Problem.main(tmpu4liluxs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794071
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val range = Range(x, y)\n   \
    \     for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ > odd) {\n            return even\n        } else {\n            return -1\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5dtvgf7q.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp5dtvgf7q.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp5dtvgf7q.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5dtvgf7q.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val range = Range(x, y)\n   \
    \     range.foreach(x => {\n            if (x % 2 == 0) {\n                evens\
    \ += x\n            } else {\n                odds += x\n            }\n     \
    \   })\n        if (evens.size == 0 && odds.size == 0) {\n            return -1\n\
    \        } else if (evens.size == 0) {\n            return odds.head\n       \
    \ } else if (odds.size == 0) {\n            return evens.head\n        } else\
    \ {\n            val even = evens.head\n            val odd = odds.head\n    \
    \        if (even > odd) {\n                return even\n            } else {\n\
    \                return odd\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi6wy0kpr.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpi6wy0kpr.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpi6wy0kpr.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi6wy0kpr.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794070
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ > odd) {\n            return even\n        } else {\n            return -1\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpus_cg864.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpus_cg864.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpus_cg864.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpus_cg864.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val evenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddOdd = mutable.ListBuffer[Long]()\n        val evenOddEven\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEven = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenOddOdd = mutable.ListBuffer[Long]()\n        val\
    \ evenOddEvenEvenEvenOddEvenOdd = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenEvenOddEvenEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenEvenOddEvenEvenEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenOddEvenEvenEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenOddEvenEvenEvenOddEvenEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenOddEvenEvenEvenOddEvenEvenEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenOddEvenEvenEvenOddEvenEvenEvenEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenOddEvenEvenOddEvenEvenEvenEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenOddEvenEvenOddEvenEvenEvenOddEvenEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenOddEvenEvenOddEvenEvenEvenOddEvenEvenEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenOddEvenEvenOddEvenEvenEvenOddEvenEvenEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1f8jhyj0.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1f8jhyj0.scala:11:20\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mevens\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1f8jhyj0.scala:12:19\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36modds\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1f8jhyj0.scala:13:19\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36meven\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1f8jhyj0.scala:14:18\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36modd\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1f8jhyj0.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mevenOdd\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling"
  stdout: ''
  timestamp: 1659794070
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        var maxEven = math.max(x,\
    \ y)\n        var minEven = math.min(x, y)\n        var even = math.min(maxEven,\
    \ minEven)\n        var evenNum = 0\n        var evenNumCount = 0\n        while\
    \ (even > 0 && even <= y) {\n            if (even % 2 == 0) {\n              \
    \  evenNum = even\n                evenNumCount = 1\n            }\n         \
    \   even = even / 2\n            evenNumCount += 1\n        }\n        if (evenNumCount\
    \ == 0) {\n            return -1\n        }\n        if (evenNumCount > evenNum)\
    \ {\n            return evenNum\n        }\n        return -1\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpumeagx3k.scala:18:26\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m                evenNum = even\n\
    \e[31m\e[31m   |\e[0m                          ^^^^\e[0m\n\e[31m   |\e[0m    \
    \                      Found:    (even : Long)\n\e[31m   |\e[0m              \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794070
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        range.foreach(x => {\n            if (x % 2 == 0) {\n               \
    \ evens += x\n            } else {\n                odds += x\n            }\n\
    \        })\n        val even = evens.max\n        val odd = odds.max\n      \
    \  if (even < odd) {\n            return even\n        } else {\n            return\
    \ -1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzi16fmvc.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpzi16fmvc.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpzi16fmvc.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzi16fmvc.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794072
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        for (i <- x until y) {\n            if (i % 2 == 0) {\n             \
    \   evens += i\n            }\n        }\n        if (evens.isEmpty) {\n     \
    \       return -1\n        }\n        evens.max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt9n8uu1_.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794055
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val range = (x to y)\n      \
    \  for (i <- range) {\n            if (i % 2 == 0) {\n                evens +=\
    \ i\n            } else {\n                odds += i\n            }\n        }\n\
    \        if (evens.isEmpty) {\n            return -1\n        }\n        if (evens.size\
    \ == 1) {\n            return evens.head\n        }\n        if (evens.size ==\
    \ 2) {\n            return evens.head + evens.last\n        }\n        val evensSet\
    \ = evens.toSet\n        val oddsSet = odds.toSet\n        val evensSetSize =\
    \ evensSet.size\n        val oddsSetSize = oddsSet.size\n        val maxEven =\
    \ evensSet.max\n        val maxOdd = oddsSet.max\n        if (evensSetSize ==\
    \ oddsSetSize) {\n            if (evensSetSize == 2) {\n                return\
    \ evensSet.head + evensSet.last\n            }\n            if (evensSetSize ==\
    \ 1) {\n                return evensSet.head\n            }\n        }\n     \
    \   if (evensSetSize > oddsSetSize) {\n            return maxEven\n        }\n\
    \        return maxOdd\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa2p8kdny.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpa2p8kdny.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794069
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        if (evens.isEmpty) {\n            return -1\n        } else {\n\
    \            val maxEven = evens.max\n            val maxOdd = odds.max\n    \
    \        if (maxEven > maxOdd) {\n                return maxEven\n           \
    \ } else {\n                return maxOdd\n            }\n        }\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx0jq816i.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpx0jq816i.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpx0jq816i.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx0jq816i.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794072
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        if (evens.isEmpty) {\n            return -1\n        } else {\n\
    \            val max = evens.max\n            if (evens.contains(max)) {\n   \
    \             return max\n            } else {\n                return -1\n  \
    \          }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfcf98cpw.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfcf98cpw.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpfcf98cpw.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfcf98cpw.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794074
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        for(i <- x until y) {\n\
    \            if(i%2 == 0) {\n                evens += i\n            } else {\n\
    \                odds += i\n            }\n        }\n        val even = evens.max\n\
    \        val odd = odds.max\n        if(even < odd) {\n            return even\n\
    \        } else {\n            return -1\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptlxdn_qs.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmptlxdn_qs.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794074
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        for (i <- x until y) {\n            if (i % 2 == 0) {\n             \
    \   evens += i\n            }\n        }\n        if (evens.isEmpty) {\n     \
    \       return -1\n        }\n        evens.max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt9n8uu1_.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794055
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        var evenNum = x % 2\n\
    \        var evenNum2 = y % 2\n        var evenNum3 = evenNum * evenNum2\n   \
    \     var evenNum4 = evenNum * evenNum2\n        var evenNum5 = evenNum * evenNum2\n\
    \        var evenNum6 = evenNum * evenNum2\n        var evenNum7 = evenNum * evenNum2\n\
    \        var evenNum8 = evenNum * evenNum2\n        var evenNum9 = evenNum * evenNum2\n\
    \        var evenNum10 = evenNum * evenNum2\n        var evenNum11 = evenNum *\
    \ evenNum2\n        var evenNum12 = evenNum * evenNum2\n        var evenNum13\
    \ = evenNum * evenNum2\n        var evenNum14 = evenNum * evenNum2\n        var\
    \ evenNum15 = evenNum * evenNum2\n        var evenNum16 = evenNum * evenNum2\n\
    \        var evenNum17 = evenNum * evenNum2\n        var evenNum18 = evenNum *\
    \ evenNum2\n        var evenNum19 = evenNum * evenNum2\n        var evenNum20\
    \ = evenNum * evenNum2\n        var evenNum21 = evenNum * evenNum2\n        var\
    \ evenNum22 = evenNum * evenNum2\n        var evenNum23 = evenNum * evenNum2\n\
    \        var evenNum24 = evenNum * evenNum2\n        var evenNum25 = evenNum *\
    \ evenNum2\n        var evenNum26 = evenNum * evenNum2\n        var evenNum27\
    \ = evenNum * evenNum2\n        var evenNum28 = evenNum * evenNum2\n        var\
    \ evenNum29 = evenNum * evenNum2\n        var evenNum30 = evenNum * evenNum2\n\
    \        var evenNum31 = evenNum * evenNum2\n        var evenNum32 = evenNum *\
    \ evenNum2\n        var evenNum33 = evenNum * evenNum2\n        var evenNum34\
    \ = evenNum * evenNum2\n        var evenNum35 = evenNum * evenNum2\n        var\
    \ evenNum36 = evenNum * evenNum2\n        var evenNum37 = evenNum * evenNum2\n\
    \        var evenNum38 = evenNum * evenNum2\n        var evenNum39 = evenNum *\
    \ evenNum2\n        var evenNum40 = evenNum * evenNum2\n        var evenNum41\
    \ = evenNum * evenNum2\n        var evenNum42 = evenNum * evenNum2\n        var\
    \ evenNum43 = evenNum * evenNum2\n        var evenNum44 = evenNum * evenNum2\n\
    \        var even\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvy3tfqmv.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpvy3tfqmv.scala:56:5 ---------------------\e[0m\e[0m\n\e[31m56 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794077
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val range = Range(x, y)\n   \
    \     range.foreach(x => if (x % 2 == 0) evens += x; else odds += x)\n       \
    \ val even = evens.max\n        val odd = odds.max\n        if (even > odd) even\
    \ else odd\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq1v2pqgd.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpq1v2pqgd.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpq1v2pqgd.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq1v2pqgd.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794068
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        if (evens.isEmpty) {\n            return -1\n        }\n      \
    \  if (evens.size > odds.size) {\n            return evens.last\n        }\n \
    \       val even = evens.last\n        val odd = odds.last\n        if (even >\
    \ odd) {\n            return even\n        } else {\n            return odd\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0amf5lke.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp0amf5lke.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp0amf5lke.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0amf5lke.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794079
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        var even = 0\n    \
    \    var odd = 0\n        var result = -1\n        var x = x.toInt\n        var\
    \ y = y.toInt\n        while (even < x && odd < y) {\n            if (x % 2 ==\
    \ 0 && y % 2 == 0) {\n                if (even < y) {\n                    even\
    \ = even + 1\n                    result = even\n                } else {\n  \
    \                  odd = odd + 1\n                    result = odd\n         \
    \       }\n            } else if (x % 2 != 0 && y % 2 != 0) {\n              \
    \  if (even < y) {\n                    even = even + 1\n                    result\
    \ = even\n                } else {\n                    odd = odd + 1\n      \
    \              result = odd\n                }\n            } else if (x % 2 ==\
    \ 0 && y % 2 != 0) {\n                if (even < y) {\n                    even\
    \ = even + 1\n                    result = even\n                } else {\n  \
    \                  odd = odd + 1\n                    result = odd\n         \
    \       }\n            } else if (x % 2 != 0 && y % 2 == 0) {\n              \
    \  if (even < y) {\n                    even = even + 1\n                    result\
    \ = even\n                } else {\n                    odd = odd + 1\n      \
    \              result = odd\n                }\n            }\n        }\n   \
    \     return result\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpz0lz7nk2.scala:14:16 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mx\e[0m = x.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvariable\e[0m \e[35mx\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpz0lz7nk2.scala:15:16 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36my\e[0m = y.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvariable\e[0m \e[35my\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794074
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x - y).abs\
    \ \n        val even = (x % 2) == 0\n        val odd = (x % 2) != 0\n        val\
    \ evenRange = range.filter(_ % 2 == 0).length\n        val oddRange = range.filter(_\
    \ % 2 != 0).length\n        val evens = range.filter(_ % 2 == 0).takeWhile(_ <=\
    \ y).filter(_ >= x).map(x => x + 1)\n        val odds = range.filter(_ % 2 !=\
    \ 0).takeWhile(_ <= y).filter(_ >= x).map(x => x - 1)\n        val even = evens.takeWhile(_\
    \ <= y).filter(_ >= x).map(x => x + 1)\n        val odd = odds.takeWhile(_ <=\
    \ y).filter(_ >= x).map(x => x - 1)\n        val evenEven = evens.takeWhile(_\
    \ <= y).filter(_ >= x).map(x => x + 1)\n        val evenOdd = odds.takeWhile(_\
    \ <= y).filter(_ >= x).map(x => x - 1)\n        val evenEvenOdd = evens.takeWhile(_\
    \ <= y).filter(_ >= x).map(x => x + 1)\n        val evenOddOdd = odds.takeWhile(_\
    \ <= y).filter(_ >= x).map(x => x - 1)\n        val evenEvenOddOdd = evens.takeWhile(_\
    \ <= y).filter(_ >= x).map(x => x + 1)\n        val evenOddEvenOdd = odds.takeWhile(_\
    \ <= y).filter(_ >= x).map(x => x - 1)\n        val evenEvenOddEvenOdd = evens.takeWhile(_\
    \ <= y).filter(_ >= x).map(x => x + 1)\n        val evenOddEvenEvenOdd = odds.takeWhile(_\
    \ <= y).filter(_ >= x).map(x => x - 1)\n        val evenEvenOddEvenEvenOdd = evens.takeWhile(_\
    \ <= y).filter(_ >= x).map(x => x + 1)\n        val evenOddEvenEvenEvenOdd = odds.takeWhile(_\
    \ <= y).filter(_ >= x).map(x => x - 1)\n        val evenEvenOddEvenEvenEvenOdd\
    \ = evens.takeWhile(_ <= y).filter(_ >= x).map(x => x + 1)\n        val evenOddEvenEvenEvenEvenOdd\
    \ = odds.takeWhile(_ <= y).filter(_ >= x).map(x => x - 1)\n        val evenEvenOddEvenEvenEvenEvenOdd\
    \ = evens.takeWhile(_ <= y).filter(_ >= \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpw0xgrgvx.scala:34:80 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mevenEvenOddEvenEvenEvenEvenOdd\e\
    [0m = evens.takeWhile(_ <= y).filter(_ >= \n\e[31m\e[31m   |\e[0m            \
    \                                                                    ^\e[0m\n\e\
    [31m   |\e[0m                                       expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw0xgrgvx.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevens\e[0m = range.filter(_ % \e[31m2\e[0m == \e[31m0\e[0m).takeWhile(_\
    \ <= y).filter(_ >= x).map(\e[36mx\e[0m => x + \e[31m1\e[0m)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevens is already defined as \e[33mvalue\e[0m \e[35mevens\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw0xgrgvx.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = range.filter(_ % \e[31m2\e\
    [0m != \e[31m0\e[0m).takeWhile(_ <= y).filter(_ >= x).map(\e[36mx\e[0m => x -\
    \ \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modds is already defined as \e[33mvalue\e[0m \e[35modds\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpw0xgrgvx.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = evens.takeWhile(_ <= y).filter(_\
    \ >= x).map(\e[36mx\e[0m => x + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0meven is already defined as \e[33mvalue\e[0m \e[35meven\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that"
  stdout: ''
  timestamp: 1659794080
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        var ans = -1\n    \
    \    var low = math.min(x, y)\n        var high = math.max(x, y)\n        while(low\
    \ < high) {\n            val mid = (low + high) / 2\n            if(mid % 2 ==\
    \ 0) {\n                ans = mid\n                low = mid + 1\n           \
    \ } else {\n                high = mid - 1\n            }\n        }\n       \
    \ ans\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph35s7ldj.scala:17:22\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m                ans = mid\n\e\
    [31m\e[31m   |\e[0m                      ^^^\e[0m\n\e[31m   |\e[0m           \
    \           Found:    (mid : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794078
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = x to y\
    \ by 2\n        val evensSorted = evens.toList\n        val evensSorted = evensSorted.sortBy(_\
    \ % 2 == 0)\n        val evensSorted = evensSorted.reverse\n        val evensSorted.head\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfhla9yxi.scala:16:4 ----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfhla9yxi.scala:13:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevensSorted\e[0m = evensSorted.sortBy(_ % \e[31m2\e[0m == \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSorted is already defined as \e[33mvalue\e[0m \e[35mevensSorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfhla9yxi.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mevensSorted\e[0m = evensSorted.reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mevensSorted is already defined as \e[33mvalue\e[0m \e[35mevensSorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E135] Type\
    \ Error: /tmp/tmpfhla9yxi.scala:15:24 -----------------------------\e[0m\e[0m\n\
    \e[31m15 |\e[0m        \e[33mval\e[0m evensSorted.head\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Stable identifier\
    \ required, but evensSorted.head found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpfhla9yxi.scala:16:5 ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659794078
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x - y).abs\
    \ \n        val even = (range / 2).toInt\n        val odd = (range / 2).toInt\n\
    \        val evenRange = range / 2\n        val oddRange = range / 2\n       \
    \ val evenRange2 = range / 2\n        val oddRange2 = range / 2\n        val evenRange3\
    \ = range / 2\n        val oddRange3 = range / 2\n        val evenRange4 = range\
    \ / 2\n        val oddRange4 = range / 2\n        val evenRange5 = range / 2\n\
    \        val oddRange5 = range / 2\n        val evenRange6 = range / 2\n     \
    \   val oddRange6 = range / 2\n        val evenRange7 = range / 2\n        val\
    \ oddRange7 = range / 2\n        val evenRange8 = range / 2\n        val oddRange8\
    \ = range / 2\n        val evenRange9 = range / 2\n        val oddRange9 = range\
    \ / 2\n        val evenRange10 = range / 2\n        val oddRange10 = range / 2\n\
    \        val evenRange11 = range / 2\n        val oddRange11 = range / 2\n   \
    \     val evenRange12 = range / 2\n        val oddRange12 = range / 2\n      \
    \  val evenRange13 = range / 2\n        val oddRange13 = range / 2\n        val\
    \ evenRange14 = range / 2\n        val oddRange14 = range / 2\n        val evenRange15\
    \ = range / 2\n        val oddRange15 = range / 2\n        val evenRange16 = range\
    \ / 2\n        val oddRange16 = range / 2\n        val evenRange17 = range / 2\n\
    \        val oddRange17 = range / 2\n        val evenRange18 = range / 2\n   \
    \     val oddRange18 = range / 2\n        val evenRange19 = range / 2\n      \
    \  val oddRange19 = range / 2\n        val evenRange20 = range / 2\n        val\
    \ oddRange20 = range / 2\n        val evenRange21 = range / 2\n        val oddRange21\
    \ = range / 2\n        val evenRange22 = range / 2\n        val oddRange22 = range\
    \ / 2\n        val evenRange23 = range / 2\n        val oddRange23 = range / 2\n\
    \        val evenRange24 = range / 2\n        val oddRange24 = range / 2\n\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4usn_190.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp4usn_190.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp4usn_190.scala:65:5 ---------------------\e\
    [0m\e[0m\n\e[31m65 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794078
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        for (i <- x until y) {\n            if (i % 2 == 0) {\n             \
    \   evens += i\n            }\n        }\n        if (evens.isEmpty) {\n     \
    \       return -1\n        }\n        evens.max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt9n8uu1_.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794055
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        for (i <- x until y) {\n\
    \            if (i % 2 == 0) {\n                evens += i\n            } else\
    \ {\n                odds += i\n            }\n        }\n        val even = evens.max\n\
    \        val odd = odds.max\n        if (even > odd) {\n            return even\n\
    \        } else {\n            return -1\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8k0k6mm5.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp8k0k6mm5.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794056
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        var even = x % 2 ==\
    \ 0\n        var low = y\n        var high = y\n        var num = 0\n        while\
    \ (even && low < high) {\n            num = low + (high - low) / 2\n         \
    \   even = num % 2 == 0\n            low = num\n            high = num\n     \
    \   }\n        if (even) {\n            high = high + 1\n        }\n        if\
    \ (low < high) {\n            return num\n        } else {\n            return\
    \ -1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2imd_uon.scala:16:18\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            num = low + (high\
    \ - low) / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Found:    Long\n\e[31m   |\e[0m        \
    \          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794080
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ < odd) {\n            return even\n        } else {\n            return -1\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxowmciex.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpxowmciex.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpxowmciex.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxowmciex.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794067
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        var max = 0\n     \
    \   var min = 0\n        var even = 0\n        var odd = 0\n        var evenMax\
    \ = 0\n        var evenMin = 0\n        var oddMax = 0\n        var oddMin = 0\n\
    \        var evenMaxIndex = 0\n        var evenMinIndex = 0\n        var oddMaxIndex\
    \ = 0\n        var oddMinIndex = 0\n        var evenMaxValue = 0\n        var\
    \ evenMinValue = 0\n        var oddMaxValue = 0\n        var oddMinValue = 0\n\
    \        var evenMaxIndexValue = 0\n        var evenMinIndexValue = 0\n      \
    \  var oddMaxIndexValue = 0\n        var oddMinIndexValue = 0\n        var evenMaxValueIndex\
    \ = 0\n        var evenMinValueIndex = 0\n        var oddMaxValueIndex = 0\n \
    \       var oddMinValueIndex = 0\n        var evenMaxIndexValueIndex = 0\n   \
    \     var evenMinIndexValueIndex = 0\n        var oddMaxIndexValueIndex = 0\n\
    \        var oddMinIndexValueIndex = 0\n        var evenMaxValueValueIndex = 0\n\
    \        var evenMinValueValueIndex = 0\n        var oddMaxValueValueIndex = 0\n\
    \        var oddMinValueValueIndex = 0\n        var evenMaxIndexIndexValue = 0\n\
    \        var evenMinIndexIndexValue = 0\n        var oddMaxIndexIndexValue = 0\n\
    \        var oddMinIndexIndexValue = 0\n        var evenMaxValueValueIndex = 0\n\
    \        var evenMinValueValueIndex = 0\n        var oddMaxValueValueIndex = 0\n\
    \        var oddMinValueValueIndex = 0\n        var evenMaxIndexIndexValueIndex\
    \ = 0\n        var evenMinIndexIndexValueIndex = 0\n        var oddMaxIndexIndexValueIndex\
    \ = 0\n        var oddMinIndexIndexValueIndex = 0\n        var evenMaxValueValueIndexIndex\
    \ = 0\n        var evenMinValueValueIndex = 0\n        var oddMaxValueValueIndex\
    \ = 0\n        var oddMinValueValueIndex = 0\n        var evenMaxIndexIndexValueIndex\
    \ = 0\n        var evenMinIndexIndexValueIndex = 0\n        var oddMaxIndexIndexValueIndex\
    \ = 0\n        var oddMinIndexIndexValueIndex = 0\n        var evenMaxValueValueIndexIndex\
    \ = 0\n        var evenMinValueValueIndex = 0\n        var oddMaxValueValueIndex\
    \ = 0\n        var oddMinValueValueIndex = 0\n        var evenMaxIndexIndexValueIndex\
    \ = 0\n        var evenMinIndexIndexValueIndex = 0\n        var oddMaxIndexIndexValueIndex\
    \ = 0\n        var oddMinIndexIndexValueIndex = 0\n        var evenMaxValueValueIndexIndex\
    \ = 0\n        var evenMinValueValueIndex = 0\n        var oddMaxValueValueIndex\
    \ = 0\n        var oddMinValueValueIndex = 0\n        var evenMaxIndexIndexValueIndex\
    \ = 0\n        var evenMinIndexIndexValueIndex = 0\n        var oddMaxIndexIndexValueIndex\
    \ = 0\n        var oddMinIndexIndexValueIndex = 0\n        var \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpnhbh9bpp.scala:79:11 ---------------------------\e\
    [0m\e[0m\n\e[31m79 |\e[0m        \e[33mvar\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpnhbh9bpp.scala:47:12 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mvar\e[0m \e[36mevenMaxValueValueIndex\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenMaxValueValueIndex is already defined as \e[33mvariable\e\
    [0m \e[35mevenMaxValueValueIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnhbh9bpp.scala:48:12 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mvar\e[0m \e[36mevenMinValueValueIndex\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenMinValueValueIndex is already defined as \e[33mvariable\e\
    [0m \e[35mevenMinValueValueIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnhbh9bpp.scala:49:12 ---------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m        \e[33mvar\e[0m \e[36moddMaxValueValueIndex\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddMaxValueValueIndex is already defined as \e[33mvariable\e\
    [0m \e[35moddMaxValueValueIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnhbh9bpp.scala:50:12 ---------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m        \e[33mvar\e[0m \e[36moddMinValueValueIndex\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddMinValueValueIndex is already defined as \e[33mvariable\e\
    [0m \e[35moddMinValueValueIndex\e[0m\n\e[31m   |\e[0m\n\e["
  stdout: ''
  timestamp: 1659794080
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val range = (x to y)\n      \
    \  range.foreach(x => {\n            if (x % 2 == 0) {\n                evens\
    \ += x\n            } else {\n                odds += x\n            }\n     \
    \   })\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ > odd) {\n            return even\n        } else {\n            return -1\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxopx78uq.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpxopx78uq.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        range.foreach { x =>\n            if (x % 2 == 0) {\n               \
    \ evens += x\n            } else {\n                odds += x\n            }\n\
    \        }\n        if (evens.isEmpty) {\n            return -1\n        }\n \
    \       if (evens.size == 1) {\n            return evens.head\n        }\n   \
    \     val even = evens.max\n        val odd = odds.max\n        if (even > odd)\
    \ {\n            return even\n        } else {\n            return odd\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp13w6g54t.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp13w6g54t.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp13w6g54t.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp13w6g54t.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794080
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x to y)\n\
    \        for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ > odd) {\n            return even\n        } else {\n            return -1\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_5jnd8bu.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_5jnd8bu.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794077
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val numsEven = mutable.ListBuffer[Long]()\n        val numsOdd = mutable.ListBuffer[Long]()\n\
    \        for (i <- x until y) {\n            if (i % 2 == 0) {\n             \
    \   evens += i\n            } else {\n                odds += i\n            }\n\
    \        }\n        for (i <- evens ++ odds) {\n            if (i % 2 == 0) {\n\
    \                numsEven += i\n            } else {\n                numsOdd\
    \ += i\n            }\n        }\n        if (numsEven.isEmpty && numsOdd.isEmpty)\
    \ {\n            return -1\n        }\n        if (numsEven.isEmpty) {\n     \
    \       return numsOdd.head\n        }\n        if (numsOdd.isEmpty) {\n     \
    \       return numsEven.head\n        }\n        val even = numsEven.head\n  \
    \      val odd = numsOdd.head\n        if (even > odd) {\n            return even\n\
    \        } else {\n            return odd\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8xguk8lb.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp8xguk8lb.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp8xguk8lb.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp8xguk8lb.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mnumsEven\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp8xguk8lb.scala:15:22 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnumsOdd\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n5 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794077
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        range.foreach(x => {\n            if (x % 2 == 0) {\n               \
    \ evens += x\n            } else {\n                odds += x\n            }\n\
    \        })\n        val even = evens.max\n        val odd = odds.max\n      \
    \  if (even < odd) {\n            return even\n        } else {\n            return\
    \ -1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzi16fmvc.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpzi16fmvc.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpzi16fmvc.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzi16fmvc.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794072
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        range.foreach { x =>\n            range.foreach { y =>\n            \
    \    if (x % 2 == 0 && y % 2 == 0) {\n                    evens += x\n       \
    \         } else {\n                    odds += y\n                }\n       \
    \     }\n        }\n        val even = evens.max\n        val odd = odds.max\n\
    \        if (even > odd) {\n            return even\n        } else {\n      \
    \      return -1\n        }\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx9iyysp4.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpx9iyysp4.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpx9iyysp4.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx9iyysp4.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794082
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        var even = 0\n    \
    \    var odd = 0\n        var max = 0\n        var min = 0\n        for(i <- x\
    \ to y) {\n            if(i%2 == 0) {\n                even += i\n           \
    \ } else {\n                odd += i\n            }\n        }\n        if(even\
    \ > odd) {\n            max = even\n        } else {\n            max = odd\n\
    \        }\n        for(i <- x to y) {\n            if(i%2 == 0) {\n         \
    \       if(i>max) {\n                    max = i\n                }\n        \
    \    } else {\n                if(i<min) {\n                    min = i\n    \
    \            }\n            }\n        }\n        if(max == -1) {\n          \
    \  return -1\n        }\n        return max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp004nk2vm.scala:17:21 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                even += i\n\e[31m\e[31m   |\e[0m    \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp004nk2vm.scala:19:20\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m                odd += i\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \    value += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp004nk2vm.scala:30:26 --------------------\e[0m\e\
    [0m\n\e[31m30 |\e[0m                    max = i\n\e[31m\e[31m   |\e[0m       \
    \                   ^\e[0m\n\e[31m   |\e[0m                          Found:  \
    \  (i : Long)\n\e[31m   |\e[0m                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp004nk2vm.scala:34:26 --------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m                    min = i\n\e[31m\e[31m   |\e[0m  \
    \                        ^\e[0m\n\e[31m   |\e[0m                          Found:\
    \    (i : Long)\n\e[31m   |\e[0m                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659794081
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = x to y\
    \ by 2\n        val evensSum = evens.sum\n        if (evensSum < 0) -1\n     \
    \   else evens.max\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: head of empty list\n\tat scala.collection.immutable.NumericRange.last(NumericRange.scala:82)\n\
    \tat scala.collection.immutable.NumericRange.max(NumericRange.scala:173)\n\tat\
    \ Problem$.chooseNum(tmpww32wfzv.scala:14)\n\tat Problem$.main(tmpww32wfzv.scala:18)\n\
    \tat Problem.main(tmpww32wfzv.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794082
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val range = Range(x, y)\n   \
    \     range.foreach(x => if (x % 2 == 0) evens += x; else odds += x)\n       \
    \ val even = evens.max\n        val odd = odds.max\n        if (even > odd) even\
    \ else odd\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq1v2pqgd.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpq1v2pqgd.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpq1v2pqgd.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq1v2pqgd.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794068
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val range = Range(x, y)\n   \
    \     range.foreach(x => if (x % 2 == 0) evens += x; else odds += x)\n       \
    \ val even = evens.max\n        val odd = odds.max\n        if (even > odd) even\
    \ else -1\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb1g41kcz.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpb1g41kcz.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpb1g41kcz.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb1g41kcz.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794083
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x to y).filter(_\
    \ % 2 == 0)\n        range.foreach(x => if (x % 2 == 0) evens += x)\n        range.foreach(x\
    \ => if (x % 2 == 1) odds += x)\n        val even = evens.max\n        val odd\
    \ = odds.max\n        if (even < odd) even else -1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5x85mh7j.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp5x85mh7j.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794079
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x - y).abs()\n\
    \        val evenRange = range.filter(_ % 2 == 0)\n        val oddRange = range.filter(_\
    \ % 2 == 1)\n        evenRange foreach { x => evens += x }\n        oddRange foreach\
    \ { x => odds += x }\n        val evenMax = evens.max\n        val oddMax = odds.max\n\
    \        if (evenMax < oddMax) {\n            return evenMax\n        } else {\n\
    \            return -1\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm_t35anm.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpm_t35anm.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E050] Type Error: /tmp/tmpm_t35anm.scala:13:28 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = (x - y).abs()\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                \e[33mmethod\e[0m \e[35mabs\e[0m in \e[33mclass\e[0m \e[35mRichLong\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794080
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        range.foreach{ i =>\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ > odd) {\n            return even\n        } else {\n            return -1\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqmme3y3r.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpqmme3y3r.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpqmme3y3r.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqmme3y3r.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794083
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ < odd) {\n            return even\n        } else {\n            return -1\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxowmciex.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpxowmciex.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpxowmciex.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxowmciex.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794067
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        range.foreach(x => if (x % 2 == 0) evens += x) else {\n            if\
    \ (x % 2 == 1) odds += x\n        })\n        val even = evens.max\n        val\
    \ odd = odds.max\n        if (even > odd) even else odd\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpiupzc1e5.scala:14:55 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        range.foreach(\e[36mx\e[0m => \e[33mif\e[0m (x\
    \ % \e[31m2\e[0m == \e[31m0\e[0m) evens += x) \e[33melse\e[0m {\n\e[31m\e[31m\
    \   |\e[0m                                                       ^^^^\e[0m\n\e\
    [31m   |\e[0m                              end of statement expected but 'else'\
    \ found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiupzc1e5.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpiupzc1e5.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpiupzc1e5.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiupzc1e5.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659794085
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = x to y\
    \ by 2\n        val evensSorted = evens.toSeq.sortWith(_ < _)\n        val evensSortedLength\
    \ = evensSorted.length\n        if (evensSortedLength == 0) -1\n        else evensSorted.last\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_y1x9kp2.scala:20)\n\tat Problem.main(tmp_y1x9kp2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794087
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        for(i <- x until y){\n\
    \            if((i&1) == 0){\n                evens += i\n            }else{\n\
    \                odds += i\n            }\n        }\n        val even = evens.max\n\
    \        val odd = odds.max\n        if(even > odd){\n            return even\n\
    \        }else{\n            return odd\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpredq6rxw.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpredq6rxw.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794083
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        if (evens.isEmpty) {\n            return -1\n        }\n      \
    \  if (evens.size == 1) {\n            return evens.head\n        }\n        val\
    \ even = evens.max\n        val odd = odds.max\n        if (even > odd) {\n  \
    \          return even\n        } else {\n            return odd\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpednq6xd0.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpednq6xd0.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpednq6xd0.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpednq6xd0.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794086
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        var max = 0L\n    \
    \    var min = 0L\n        var even = 0L\n        var odd = 0L\n        for(i\
    \ <- x until y){\n            val x = i\n            val y = i\n            val\
    \ z = i\n            val a = i\n            val b = i\n            val c = i\n\
    \            val d = i\n            val e = i\n            val f = i\n       \
    \     val g = i\n            val h = i\n            val i = i\n            val\
    \ j = i\n            val k = i\n            val l = i\n            val m = i\n\
    \            val n = i\n            val o = i\n            val p = i\n       \
    \     val q = i\n            val r = i\n            val s = i\n            val\
    \ t = i\n            val u = i\n            val v = i\n            val w = i\n\
    \            val x = i\n            val y = i\n            val z = i\n       \
    \     val a = i\n            val b = i\n            val c = i\n            val\
    \ d = i\n            val e = i\n            val f = i\n            val g = i\n\
    \            val h = i\n            val i = i\n            val j = i\n       \
    \     val k = i\n            val l = i\n            val m = i\n            val\
    \ n = i\n            val o = i\n            val p = i\n            val q = i\n\
    \            val r = i\n            val s = i\n            val t = i\n       \
    \     val u = i\n            val v = i\n            val w = i\n            val\
    \ x = i\n            val y = i\n            val z = i\n            val a = i\n\
    \            val b = i\n            val c = i\n            val d = i\n       \
    \     val e = i\n            val f = i\n            val g = i\n            val\
    \ h = i\n            val i = i\n            val j = i\n            val k = i\n\
    \            val l = i\n            val m = i\n            val n = i\n       \
    \     val o = i\n            val p = i\n            val q = i\n            val\
    \ r = i\n            val s = i\n            val t = i\n            val u = i\n\
    \            val v = i\n            val w = i\n            val x = i\n       \
    \     val y = i\n            val z = i\n            val a = i\n            val\
    \ b = i\n            val c = i\n            val d = i\n            val e = i\n\
    \            val f = i\n            val g = i\n            val h = i\n       \
    \     val i = i\n            val j = i\n            val k = i\n            val\
    \ l = i\n            val m = i\n            val n = i\n            val o = i\n\
    \            val p = \n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp8grx_6m5.scala:112:19 --------------------------\e\
    [0m\e[0m\n\e[31m112 |\e[0m            \e[33mval\e[0m \e[36mp\e[0m = \n\e[31m\e\
    [31m    |\e[0m                   ^\e[0m\n\e[31m    |\e[0m                   expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m    |\e[0m\n\e[31m    |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E040]\
    \ Syntax Error: /tmp/tmp8grx_6m5.scala:126:0 ---------------------------\e[0m\e\
    [0m\n\e[31m126 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8grx_6m5.scala:125:1\
    \ --------------------\e[0m\e[0m\n\e[31m125 |\e[0m}\n\e[31m\e[31m    |\e[0m ^\e\
    [0m\n\e[31m    |\e[0m Found:    Unit\n\e[31m    |\e[0m Required: Long\n\e[31m\
    \    |\e[0m\n\e[31m    |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmp8grx_6m5.scala:114:4 ---------------------------------------\e\
    [0m\e[0m\n\e[33m114 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m:\
    \ \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m    |\e[0m    ^\e[0m\n\
    \e[33m    |\e[0m    Line is indented too far to the left, or a `}` is missing\n\
    1 warning found\n3 errors found\n"
  stdout: ''
  timestamp: 1659794089
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        for (i <- x until y) {\n            if (i % 2 == 0) {\n             \
    \   evens += i\n            }\n        }\n        if (evens.isEmpty) {\n     \
    \       return -1\n        } else {\n            val max = evens.max\n       \
    \     if (max % 2 == 0) {\n                return max\n            } else {\n\
    \                return -1\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl6c0dljv.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794085
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ > odd) {\n            return even\n        } else {\n            return -1\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpus_cg864.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpus_cg864.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpus_cg864.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpus_cg864.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        var even = 0\n    \
    \    var odd = 0\n        var result = -1\n        while(x <= y) {\n         \
    \   if((x % 2) == 0) {\n                even += x\n            }\n           \
    \ else {\n                odd += x\n            }\n            x += 1\n      \
    \  }\n        if(even > odd) {\n            result = even\n        }\n       \
    \ else {\n            result = odd\n        }\n        return result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) ==\
    \ (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg0agsv_o.scala:16:21 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                even += x\n\e[31m\e[31m   |\e[0m    \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg0agsv_o.scala:19:20\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m                odd += x\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \    value += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpg0agsv_o.scala:21:14 ------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            x += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long\
    \ - did you mean x.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659794090
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        range.foreach(x => if (x % 2 == 0) evens += x else odds += x)\n     \
    \   val even = evens.max\n        val odd = odds.max\n        if (even > odd)\
    \ even else odd\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7hdicxca.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7hdicxca.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp7hdicxca.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7hdicxca.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794089
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ > odd) {\n            return even\n        } else {\n            return -1\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpus_cg864.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpus_cg864.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpus_cg864.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpus_cg864.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ > odd) {\n            return even\n        } else {\n            return -1\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpus_cg864.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpus_cg864.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpus_cg864.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpus_cg864.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val range = (x - y).abs \n  \
    \      val evenRange = range.filter(_ % 2 == 0)\n        val oddRange = range.filter(_\
    \ % 2 != 0)\n        evenRange.foreach(x => evens += x)\n        oddRange.foreach(x\
    \ => odds += x)\n        evens.max\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoj6i3cya.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpoj6i3cya.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpoj6i3cya.scala:14:30 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevenRange\e[0m = range.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \   ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        value filter is\
    \ not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpoj6i3cya.scala:15:29\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36moddRange\e[0m = range.filter(_ % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \             value filter is not a member of Long\n4 errors found\n"
  stdout: ''
  timestamp: 1659794090
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        range.foreach(x => if (x % 2 == 0) evens += x; else odds += x)\n    \
    \    val even = evens.max\n        val odd = odds.max\n        if (even > odd)\
    \ even else -1\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbp0_e7y6.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbp0_e7y6.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpbp0_e7y6.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbp0_e7y6.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794090
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        for (i <- x until y) {\n            if (i % 2 == 0) {\n             \
    \   evens += i\n            }\n        }\n        evens.max\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeh7mbt9y.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794086
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        var result = -1\n \
    \       var low = math.min(x, y)\n        var high = math.max(x, y)\n        var\
    \ mid = math.floor(low + (high - low) / 2)\n        while (low <= high) {\n  \
    \          if (math.mod(mid, 2) == 0) {\n                result = mid\n      \
    \          break\n            }\n            mid = math.ceil(mid)\n        }\n\
    \        return result\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0o9ovltr.scala:16:21 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (math.mod(mid, \e[31m2\e[0m)\
    \ == \e[31m0\e[0m) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                value mod is not a member of math\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp0o9ovltr.scala:17:25 --------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m                result = mid\n\e[31m\e[31m   |\e[0m      \
    \                   ^^^\e[0m\n\e[31m   |\e[0m                         Found: \
    \   (mid : Double)\n\e[31m   |\e[0m                         Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0o9ovltr.scala:18:16\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m                break\n\e\
    [31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e[31m   |\e[0m               \
    \ Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        range.foreach(x => {\n            if (x % 2 == 0) {\n               \
    \ evens += x\n            } else {\n                odds += x\n            }\n\
    \        })\n        val even = evens.max\n        val odd = odds.max\n      \
    \  if (even < odd) {\n            return even\n        } else {\n            return\
    \ -1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzi16fmvc.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpzi16fmvc.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpzi16fmvc.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzi16fmvc.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794072
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        for (i <- x until y) {\n\
    \            if (i % 2 == 0) {\n                evens += i\n            } else\
    \ {\n                odds += i\n            }\n        }\n        if (evens.isEmpty)\
    \ {\n            return -1\n        }\n        if (evens.size == 1) {\n      \
    \      return evens.head\n        }\n        val maxEven = evens.max\n       \
    \ val maxOdd = odds.max\n        if (maxEven % 2 == 0) {\n            return maxEven\n\
    \        } else {\n            return maxOdd\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfcxz42p5.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfcxz42p5.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794086
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val even = mutable.Set[Long]()\n\
    \        val odd = mutable.Set[Long]()\n        val range = Range(x, y)\n    \
    \    range.foreach(x => {\n            if (x % 2 == 0) {\n                evens\
    \ += x\n            } else {\n                odds += x\n            }\n     \
    \   })\n        evens.foreach(x => {\n            if (x % 2 == 0) {\n        \
    \        even += x\n            }\n        })\n        odds.foreach(x => {\n \
    \           if (x % 2 == 1) {\n                odd += x\n            }\n     \
    \   })\n        if (even.size == 0 && odd.size == 0) {\n            return -1\n\
    \        }\n        if (even.size == 0) {\n            return odd.head\n     \
    \   }\n        if (odd.size == 0) {\n            return even.head\n        }\n\
    \        if (even.size == odd.size) {\n            val result = even.head\n  \
    \          even.foreach(x => {\n                if (x % 2 == 0) {\n          \
    \          result = x\n                }\n            })\n            result\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppar8zxl9.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmppar8zxl9.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmppar8zxl9.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmppar8zxl9.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmppar8zxl9.scala:15:26 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppar8zxl9.scala:15:29\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31"
  stdout: ''
  timestamp: 1659794091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        if (evens.isEmpty) {\n            return -1\n        }\n      \
    \  if (evens.size > odds.size) {\n            return evens.last\n        } else\
    \ {\n            return -1\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplh10ro0z.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmplh10ro0z.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmplh10ro0z.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplh10ro0z.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        for (i <- x until y){\n            if (i % 2 == 0){\n               \
    \ evens += i\n            }\n        }\n        evens.max\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbocol_ds.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794087
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val range = Range(x, y)\n   \
    \     for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ < odd) {\n            return even\n        } else {\n            return -1\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzotwgrya.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpzotwgrya.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpzotwgrya.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzotwgrya.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x - y).toInt\n\
    \        val evenRange = range / 2\n        val oddRange = range % 2\n       \
    \ for (i <- 1 to range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        val evenMax = evens.max\n        val oddMax = odds.max\n      \
    \  if (evenMax < oddMax) {\n            return evenMax\n        } else {\n   \
    \         return -1\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpab6t6ir5.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpab6t6ir5.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794088
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ < odd) {\n            return even\n        } else {\n            return -1\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxowmciex.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpxowmciex.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpxowmciex.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxowmciex.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794067
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        var even = 0\n    \
    \    var odd = 0\n        var evenMax = 0\n        var oddMax = 0\n        var\
    \ evenMin = Long.MaxValue\n        var oddMin = Long.MinValue\n        var evenMaxIndex\
    \ = -1\n        var oddMaxIndex = -1\n        var evenMinIndex = -1\n        var\
    \ oddMinIndex = -1\n        var evenMaxCount = -1\n        var oddMaxCount = -1\n\
    \        var evenMinCount = -1\n        var oddMinCount = -1\n        var evenMaxSum\
    \ = -1\n        var oddMaxSum = -1\n        var evenMinSum = -1\n        var oddMinSum\
    \ = -1\n        var evenMaxAvg = 0\n        var oddMaxAvg = 0\n        var evenMinAvg\
    \ = 0\n        var oddMinAvg = 0\n        var evenMaxSumSquare = 0\n        var\
    \ oddMaxSumSquare = 0\n        var evenMinSumSquare = 0\n        var oddMinSumSquare\
    \ = 0\n        var evenMaxSumSquareAvg = 0\n        var oddMaxSumSquareAvg = 0\n\
    \        var evenMinSumSquareAvg = 0\n        var oddMinSumSquareAvg = 0\n   \
    \     var evenMaxSumSquareSum = 0\n        var oddMaxSumSquareSum = 0\n      \
    \  var evenMinSumSquareSum = 0\n        var oddMinSumSquareSum = 0\n        var\
    \ evenMaxSumSquareAvg = 0\n        var oddMaxSumSquareAvg = 0\n        var evenMinSumSquareAvg\
    \ = 0\n        var oddMinSumSquareAvg = 0\n        var evenMaxSumSquareSum = 0\n\
    \        var oddMaxSumSquareSum = 0\n        var evenMinSumSquareSum = 0\n   \
    \     var oddMinSumSquareSum = 0\n        var evenMaxSumSquareAvg = 0\n      \
    \  var oddMaxSumSquareAvg = 0\n        var evenMinSumSquareAvg = 0\n        var\
    \ oddMinSumSquareAvg = 0\n        var evenMaxSumSquareSum = 0\n        var oddMaxSumSquareSum\
    \ = 0\n        var evenMinSumSquareSum = 0\n        var oddMinSumSquareSum = 0\n\
    \        var evenMaxSumSquareAvg = 0\n        var oddMaxSumSquareAvg = 0\n   \
    \     var evenMinSumSquareAvg = 0\n        var oddMinSumSquareAvg = 0\n      \
    \  var evenMaxSumSquareSum = 0\n        var oddMaxSumSquareSum = 0\n        var\
    \ evenMinSumSquareSum = 0\n        var oddMinSumSquareSum = 0\n        var evenMaxSumSquareAvg\
    \ = 0\n        var oddMaxSumSquareAvg = 0\n        var evenMinSumSquareAvg = 0\n\
    \        var oddMinSumSquareAvg = 0\n        var evenMaxSumSquareSum = 0\n   \
    \     var oddMaxSumSquareSum = 0\n        var evenMinSumSquareSum = 0\n      \
    \  var oddMinSumSquareSum = 0\n        var evenMaxSumSquareAvg = 0\n        var\
    \ oddMaxSumSquareAvg = 0\n        var evenMinSumSquareAvg = 0\n        var oddMinSumSquareAvg\
    \ = 0\n\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnuzup3j6.scala:45:12 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mvar\e[0m \e[36mevenMaxSumSquareAvg\e[0m\
    \ = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mevenMaxSumSquareAvg is already defined as \e[33mvariable\e[0m \e\
    [35mevenMaxSumSquareAvg\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpnuzup3j6.scala:46:12 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mvar\e[0m \e[36moddMaxSumSquareAvg\e[0m\
    \ = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0moddMaxSumSquareAvg is already defined as \e[33mvariable\e[0m \e\
    [35moddMaxSumSquareAvg\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpnuzup3j6.scala:47:12 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mvar\e[0m \e[36mevenMinSumSquareAvg\e[0m\
    \ = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mevenMinSumSquareAvg is already defined as \e[33mvariable\e[0m \e\
    [35mevenMinSumSquareAvg\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpnuzup3j6.scala:48:12 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mvar\e[0m \e[36moddMinSumSquareAvg\e[0m\
    \ = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0moddMinSumSquareAvg is already defined as \e[33mvariable\e[0m \e\
    [35moddMinSumSquareAvg\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpnuzup3j6.scala:49:12 ---------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m        \e[33mvar\e[0m \e[36mevenMaxSumSquareSum\e[0m\
    \ = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e["
  stdout: ''
  timestamp: 1659794093
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        range.foreach(x => {\n            if (x % 2 == 0) {\n               \
    \ evens += x\n            } else {\n                odds += x\n            }\n\
    \        })\n        val even = evens.max\n        val odd = odds.max\n      \
    \  if (even > odd) {\n            return even\n        } else {\n            return\
    \ -1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpex7tj1w7.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpex7tj1w7.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpex7tj1w7.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpex7tj1w7.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        range.foreach { x =>\n            if (x % 2 == 0) {\n               \
    \ evens += x\n            } else {\n                odds += x\n            }\n\
    \        }\n        evens.foreach { x =>\n            if (x % 2 == 0) {\n    \
    \            even += x\n            } else {\n                odd += x\n     \
    \       }\n        }\n        val even = even.max\n        val odd = odd.max\n\
    \        if (even > odd) {\n            return even\n        } else {\n      \
    \      return -1\n        }\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvnj4xnw1.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = even.max\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0meven is already\
    \ defined as \e[33mvalue\e[0m \e[35meven\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvnj4xnw1.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = odd.max\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0modd is already defined\
    \ as \e[33mvalue\e[0m \e[35modd\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvnj4xnw1.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpvnj4xnw1.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpvnj4xnw1.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpvnj4xnw1.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e"
  stdout: ''
  timestamp: 1659794093
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        range.foreach(x => {\n            if (x % 2 == 0) {\n               \
    \ evens += x\n            } else {\n                odds += x\n            }\n\
    \        })\n        val even = evens.max\n        val odd = odds.max\n      \
    \  if (even > odd) {\n            return even\n        } else {\n            return\
    \ -1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpex7tj1w7.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpex7tj1w7.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpex7tj1w7.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpex7tj1w7.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        var max = 0\n     \
    \   var min = 0\n        var even = 0\n        var odd = 0\n        var evenMax\
    \ = 0\n        var evenMin = 0\n        var oddMax = 0\n        var oddMin = 0\n\
    \        var evenMaxCount = 0\n        var evenMinCount = 0\n        var oddMaxCount\
    \ = 0\n        var oddMinCount = 0\n        var evenMaxCount2 = 0\n        var\
    \ evenMinCount2 = 0\n        var oddMaxCount2 = 0\n        var oddMinCount2 =\
    \ 0\n        var evenMaxCount3 = 0\n        var evenMinCount3 = 0\n        var\
    \ oddMaxCount3 = 0\n        var oddMinCount3 = 0\n        var evenMaxCount4 =\
    \ 0\n        var evenMinCount4 = 0\n        var oddMaxCount4 = 0\n        var\
    \ oddMinCount4 = 0\n        var evenMaxCount5 = 0\n        var evenMinCount5 =\
    \ 0\n        var oddMaxCount5 = 0\n        var oddMinCount5 = 0\n        var evenMaxCount6\
    \ = 0\n        var evenMinCount6 = 0\n        var oddMaxCount6 = 0\n        var\
    \ oddMinCount6 = 0\n        var evenMaxCount7 = 0\n        var evenMinCount7 =\
    \ 0\n        var oddMaxCount7 = 0\n        var oddMinCount7 = 0\n        var evenMaxCount8\
    \ = 0\n        var evenMinCount8 = 0\n        var oddMaxCount8 = 0\n        var\
    \ oddMinCount8 = 0\n        var evenMaxCount9 = 0\n        var evenMinCount9 =\
    \ 0\n        var oddMaxCount9 = 0\n        var oddMinCount9 = 0\n        var evenMaxCount10\
    \ = 0\n        var evenMinCount10 = 0\n        var oddMaxCount10 = 0\n       \
    \ var oddMinCount10 = 0\n        var evenMaxCount11 = 0\n        var evenMinCount11\
    \ = 0\n        var oddMaxCount11 = 0\n        var oddMinCount11 = 0\n        var\
    \ evenMaxCount12 = 0\n        var evenMinCount12 = 0\n        var oddMaxCount12\
    \ = 0\n        var oddMinCount12 = 0\n        var evenMaxCount13 = 0\n       \
    \ var evenMinCount13 = 0\n        var oddMaxCount13 = 0\n        var oddMinCount13\
    \ = 0\n        var evenMaxCount14 = 0\n        var evenMinCount14 = 0\n      \
    \  var oddMaxCount14 = 0\n        var oddMinCount14 = 0\n        var evenMaxCount15\
    \ = 0\n        var evenMinCount15 = 0\n        var oddMaxCount15 = 0\n       \
    \ var oddMinCount15 = 0\n        var evenMaxCount16 = 0\n        var evenMinCount16\
    \ = 0\n        var oddMaxCount16 = 0\n        var oddMinCount16 = 0\n        var\
    \ evenMaxCount17 = 0\n        var evenMinCount17 = 0\n        var oddMaxCount17\
    \ = 0\n        var oddMinCount17 = 0\n        var evenMaxCount\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmph7c39atn.scala:88:4 ----------------------------\e\
    [0m\e[0m\n\e[31m88 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmph7c39atn.scala:88:5 ---------------------\e[0m\e[0m\n\e[31m88 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794094
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x to y).filter(_\
    \ % 2 == 0)\n        range.foreach(x => if (x % 2 == 0) evens += x)\n        range.foreach(x\
    \ => if (x % 2 == 1) odds += x)\n        val even = evens.max\n        val odd\
    \ = odds.max\n        if (even > odd) even else odd\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz6wxjpkg.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpz6wxjpkg.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794061
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x to y)\n\
    \        range.foreach(x => {\n            if (x % 2 == 0) {\n               \
    \ evens += x\n            } else {\n                odds += x\n            }\n\
    \        })\n        val even = evens.max\n        val odd = odds.max\n      \
    \  if (even > odd) {\n            return even\n        } else {\n            return\
    \ -1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmk0m5_f7.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpmk0m5_f7.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794092
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ > odd) {\n            return even\n        } else {\n            return -1\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpus_cg864.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpus_cg864.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpus_cg864.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpus_cg864.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val evensAndOdds = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsSet = mutable.Set[Long]()\n        val evensAndOddsSetSet\
    \ = mutable.Set[Long]()\n        val evensAndOddsSetSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSetSet = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSet\
    \ = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSetSetSetSetSet = mutable.Set[Long]()\n       \
    \ val evensAndOddsSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n        val\
    \ evensAndOddsSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSetSetSetSetSet\
    \ = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSetSetSetSetSetSet\
    \ = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSetSetSetSetSetSetSet\
    \ = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSetSetSetSetSetSetSet\
    \ = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSetSetSetSetSetSetSet\
    \ = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSetSetSetSetSetSetSet\
    \ = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSetSetSetSetSetSetSetSet\
    \ = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSetSetSetSetSetSetSetSet\
    \ = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSetSetSetSetSetSetSetSet\
    \ = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSetSetSetSetSetSetSetSet\
    \ = mutable.Set[Long]()\n        val evensAndOddsSetSetSet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwhrdpqcq.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwhrdpqcq.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevensAndOddsSetSetSetSetSetSetSetSetSet\e[0m = mutable.Set[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensAndOddsSetSetSetSetSetSetSetSetSet is already defined\
    \ as \e[33mvalue\e[0m \e[35mevensAndOddsSetSetSetSetSetSetSetSetSet\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpwhrdpqcq.scala:26:12 ---------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mval\e[0m \e[36mevensAndOddsSetSetSetSetSetSetSetSetSetSetSet\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensAndOddsSetSetSetSetSetSetSetSetSetSetSet is already defined\
    \ as \e[33mvalue\e[0m \e[35mevensAndOddsSetSetSetSetSetSetSetSetSetSetSet\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpwhrdpqcq.scala:27:12 ---------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mevensAndOddsSetSetSetSetSetSetSetSetSetSetSet\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensAndOddsSetSetSetSetSetSetSetSetSetSetSet is already defined\
    \ as \e[33mvalue\e[0m \e[35mevensAndOddsSetSetSetSetSetSetSetSetSetSetSet\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpwhrdpqcq.scala:28:12 ---------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0"
  stdout: ''
  timestamp: 1659794057
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        range.foreach(x => if (x % 2 == 0) evens += x else odds += x)\n     \
    \   val even = evens.max\n        val odd = odds.max\n        if (even > odd)\
    \ even else odd\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7hdicxca.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7hdicxca.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp7hdicxca.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7hdicxca.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794089
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        for(i <- x until y) {\n\
    \            if(i%2 == 0) {\n                evens += i\n            } else {\n\
    \                odds += i\n            }\n        }\n        val even = evens.max\n\
    \        val odd = odds.max\n        if(even > odd) {\n            return even\n\
    \        } else {\n            return -1\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyim36bz0.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpyim36bz0.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        var maxEven = math.max(x,\
    \ y)\n        var minEven = math.min(x, y)\n        var even = math.min(minEven,\
    \ maxEven)\n        var evens = math.max(minEven, maxEven)\n        var evensCount\
    \ = math.pow(2, evens)\n        var evensSum = evensCount - 1\n        var evensSum2\
    \ = evensSum * evensSum\n        var evensSum3 = evensSum2 * evensSum\n      \
    \  var evensSum4 = evensSum3 * evensSum\n        var evensSum5 = evensSum4 * evensSum\n\
    \        var evensSum6 = evensSum5 * evensSum\n        var evensSum7 = evensSum6\
    \ * evensSum\n        var evensSum8 = evensSum7 * evensSum\n        var evensSum9\
    \ = evensSum8 * evensSum\n        var evensSum10 = evensSum9 * evensSum\n    \
    \    var evensSum11 = evensSum10 * evensSum\n        var evensSum12 = evensSum11\
    \ * evensSum\n        var evensSum13 = evensSum12 * evensSum\n        var evensSum14\
    \ = evensSum13 * evensSum\n        var evensSum15 = evensSum14 * evensSum\n  \
    \      var evensSum16 = evensSum15 * evensSum\n        var evensSum17 = evensSum16\
    \ * evensSum\n        var evensSum18 = evensSum17 * evensSum\n        var evensSum19\
    \ = evensSum18 * evensSum\n        var evensSum20 = evensSum19 * evensSum\n  \
    \      var evensSum21 = evensSum20 * evensSum\n        var evensSum22 = evensSum21\
    \ * evensSum\n        var evensSum23 = evensSum22 * evensSum\n        var evensSum24\
    \ = evensSum23 * evensSum\n        var evensSum25 = evensSum24 * evensSum\n  \
    \      var evensSum26 = evensSum25 * evensSum\n        var evensSum27 = evensSum26\
    \ * evensSum\n        var evensSum28 = evensSum27 * evensSum\n        var evensSum29\
    \ = evensSum28 * evensSum\n        var evensSum30 = evensSum29 * evensSum\n  \
    \      var evensSum31 = evensSum30 * evensSum\n        var evensSum32 = evensSum31\
    \ * evensSum\n        var evensSum33\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpaldw5yp4.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpaldw5yp4.scala:49:5 ---------------------\e[0m\e[0m\n\e[31m49 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794094
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x to y).filter(_\
    \ % 2 == 0)\n        for (i <- range) {\n            if (i % 2 == 0) {\n     \
    \           evens += i\n            } else {\n                odds += i\n    \
    \        }\n        }\n        val even = evens.max\n        val odd = odds.max\n\
    \        if (even > odd) {\n            return even\n        } else {\n      \
    \      return -1\n        }\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdbipl944.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpdbipl944.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794094
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val range = (x to y)\n      \
    \  for (i <- range) {\n            if (i % 2 == 0) {\n                evens +=\
    \ i\n            } else {\n                odds += i\n            }\n        }\n\
    \        val even = evens.max\n        val odd = odds.max\n        if (even >\
    \ odd) {\n            return even\n        } else {\n            return -1\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6wiyje8m.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp6wiyje8m.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794094
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        for(i <- x until y){\n\
    \            if(i%2 == 0){\n                evens += i\n            }else{\n \
    \               odds += i\n            }\n        }\n        val even = evens.max\n\
    \        val odd = odds.max\n        if(even > odd){\n            return even\n\
    \        }else{\n            return odd\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_e_aq0la.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_e_aq0la.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794043
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x - y).abs\
    \ \n        val even = (range / 2).toInt\n        val odd = (range / 2).toInt\n\
    \        val evens = for (i <- 0 until even) yield {\n            val x = x +\
    \ i\n            if (x % 2 == 0) x else -1\n        }\n        val odds = for\
    \ (i <- 0 until odd) yield {\n            val x = x + i\n            if (x % 2\
    \ == 1) x else -1\n        }\n        val evens = evens.toList\n        val odds\
    \ = odds.toList\n        val even = evens.max\n        val odd = odds.max\n  \
    \      if (even > odd) even else odd\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8htm_g7_.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = \e[33mfor\e\
    [0m (i <- \e[31m0\e[0m until even) \e[33myield\e[0m {\n\e[31m\e[31m   |\e[0m \
    \       ^\e[0m\n\e[31m   |\e[0mevens is already defined as \e[33mvalue\e[0m \e\
    [35mevens\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must\
    \ all be defined in the same group of toplevel definitions\n\e[31m17 |\e[0m  \
    \          \e[33mval\e[0m \e[36mx\e[0m = x + i\n\e[31m18 |\e[0m            \e\
    [33mif\e[0m (x % \e[31m2\e[0m == \e[31m0\e[0m) x \e[33melse\e[0m -\e[31m1\e[0m\n\
    \e[31m19 |\e[0m        }\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8htm_g7_.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36modds\e[0m = \e[33mfor\e[0m (i <- \e[31m0\e[0m until odd) \e[33myield\e\
    [0m {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0modds is already defined\
    \ as \e[33mvalue\e[0m \e[35modds\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m21 |\e[0m            \e[33mval\e[0m \e[36mx\e[0m = x + i\n\e[31m22 |\e[0m\
    \            \e[33mif\e[0m (x % \e[31m2\e[0m == \e[31m1\e[0m) x \e[33melse\e[0m\
    \ -\e[31m1\e[0m\n\e[31m23 |\e[0m        }\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp8htm_g7_.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = evens.toList\n\e[31m\e[31m \
    \  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mevens is already\
    \ defined as \e[33mvalue\e[0m \e[35mevens\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8htm_g7_.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36modds\e[0m = odds.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modds is already defined as \e[33mvalue\e[0m \e[35modds\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error"
  stdout: ''
  timestamp: 1659794095
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = x to y\
    \ by 2\n        val evensSorted = evens.toList\n        val evensSorted = evensSorted.sortBy(x\
    \ => x)\n        val evensSorted = evensSorted.reverse\n        val evensSorted\
    \ = evensSorted.takeWhile(_ < y)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ < y)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_ < y)\n\
    \        val evensSorted = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_\
    \ < y)\n        val evensSorted = evensSorted.reverse\n        val evensSorted\
    \ = evensSorted.takeWhile(_ < y)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ < y)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_ < y)\n\
    \        val evensSorted = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_\
    \ < y)\n        val evensSorted = evensSorted.reverse\n        val evensSorted\
    \ = evensSorted.takeWhile(_ < y)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ < y)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_ < y)\n\
    \        val evensSorted = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_\
    \ < y)\n        val evensSorted = evensSorted.reverse\n        val evensSorted\
    \ = evensSorted.takeWhile(_ < y)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ < y)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_ < y)\n\
    \        val evensSorted = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_\
    \ < y)\n        val evensSorted = evensSorted.reverse\n        val evensSorted\
    \ = evensSorted.takeWhile(_ < y)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfj4x2kzf.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevensSorted\e[0m = evensSorted.sortBy(\e\
    [36mx\e[0m => x)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSorted is already defined as \e[33mvalue\e[0m \e[35mevensSorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfj4x2kzf.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mevensSorted\e[0m = evensSorted.reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mevensSorted is already defined as \e[33mvalue\e[0m \e[35mevensSorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfj4x2kzf.scala:15:12 ---------------------------\e[0m\e[0m\n\e\
    [31m15 |\e[0m        \e[33mval\e[0m \e[36mevensSorted\e[0m = evensSorted.takeWhile(_\
    \ < y)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSorted is already defined as \e[33mvalue\e[0m \e[35mevensSorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfj4x2kzf.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mevensSorted\e[0m = evensSorted.reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mevensSorted is already defined as \e[33mvalue\e[0m \e[35mevensSorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfj4x2kzf.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mevensSorted\e[0m = evensSorted.takeWhile(_\
    \ < y)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659794098
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        range.foreach { i =>\n            if (i % 2 == 0) {\n               \
    \ evens += i\n            } else {\n                odds += i\n            }\n\
    \        }\n        val even = evens.max\n        val odd = odds.max\n       \
    \ if (even > odd) {\n            return even\n        } else {\n            return\
    \ -1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdrljhmaf.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpdrljhmaf.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpdrljhmaf.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdrljhmaf.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794058
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x - y).abs\
    \ \n        val even = (x - y).abs % 2 == 0\n        val odd = (x - y).abs % 2\
    \ != 0\n        \n        for(i <- 1 to range){\n            if((x - i).abs %\
    \ 2 == 0 && even){\n                evens += i\n            }\n            else\
    \ if((x - i).abs % 2 != 0 && odd){\n                odds += i\n            }\n\
    \        }\n        \n        if(evens.isEmpty){\n            return -1\n    \
    \    }\n        else if(evens.size == 1){\n            return evens.head\n   \
    \     }\n        else{\n            val maxEven = evens.max\n            val maxOdd\
    \ = odds.max\n            \n            if(maxEven > maxOdd){\n              \
    \  return maxEven\n            }\n            else{\n                return maxOdd\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaggc9lh3.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpaggc9lh3.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpaggc9lh3.scala:17:22 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to range){\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^\e[0m\n\e[31m   |\e[0m       \
    \               Found:    (range : Long)\n\e[31m   |\e[0m                    \
    \  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794098
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        for (i <- x until y) {\n            if (i % 2 == 0) {\n             \
    \   evens += i\n            }\n        }\n        if (evens.isEmpty) {\n     \
    \       return -1\n        }\n        evens.max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt9n8uu1_.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794055
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val range = (x - y).abs \n  \
    \      val evenRange = range.filter(_ % 2 == 0)\n        val oddRange = range.filter(_\
    \ % 2 != 0)\n        evenRange foreach { x => evens += x }\n        oddRange foreach\
    \ { x => odds += x }\n        val evensSize = evens.size\n        val oddsSize\
    \ = odds.size\n        if (evensSize == 0 && oddsSize == 0) {\n            return\
    \ -1\n        }\n        if (evensSize == 0) {\n            return odds.head\n\
    \        }\n        if (oddsSize == 0) {\n            return evens.head\n    \
    \    }\n        val maxEven = evens.max\n        val maxOdd = odds.max\n     \
    \   if (maxEven < maxOdd) {\n            return maxEven\n        }\n        return\
    \ maxOdd\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp2r6id2r.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpp2r6id2r.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpp2r6id2r.scala:14:30 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevenRange\e[0m = range.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \   ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        value filter is\
    \ not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp2r6id2r.scala:15:29\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36moddRange\e[0m = range.filter(_ % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \             value filter is not a member of Long\n4 errors found\n"
  stdout: ''
  timestamp: 1659794099
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x to y).filter(_\
    \ % 2 == 0)\n        for (i <- range) {\n            if (i % 2 == 0) {\n     \
    \           evens += i\n            } else {\n                odds += i\n    \
    \        }\n        }\n        val even = evens.max\n        val odd = odds.max\n\
    \        if (even < odd) {\n            return even\n        } else {\n      \
    \      return -1\n        }\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaqpu85v9.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpaqpu85v9.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794042
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        range.foreach { x =>\n            if (x % 2 == 0) {\n               \
    \ evens += x\n            } else {\n                odds += x\n            }\n\
    \        }\n        val even = evens.max\n        val odd = odds.max\n       \
    \ if (even > odd) {\n            even\n        } else {\n            odd\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6ymxw5jw.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp6ymxw5jw.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp6ymxw5jw.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6ymxw5jw.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794099
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        for (i <- x until y) {\n            if (i % 2 == 0) {\n             \
    \   evens += i\n            }\n        }\n        if (evens.isEmpty) {\n     \
    \       return -1\n        }\n        evens.max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt9n8uu1_.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794055
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ > odd) {\n            return even\n        } else {\n            return -1\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpus_cg864.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpus_cg864.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpus_cg864.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpus_cg864.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ > odd) {\n            return even\n        } else {\n            return -1\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpus_cg864.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpus_cg864.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpus_cg864.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpus_cg864.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val num = mutable.ListBuffer[Long]()\n        val evenNum = mutable.ListBuffer[Long]()\n\
    \        val oddNum = mutable.ListBuffer[Long]()\n        val numNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNum = mutable.ListBuffer[Long]()\n        val oddNumNum =\
    \ mutable.ListBuffer[Long]()\n        val numNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNum = mutable.ListBuffer[Long]()\n        val oddNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val numNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNumNum = mutable.ListBuffer[Long]()\n        val oddNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val numNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val oddNumNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val numNumNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val\
    \ oddNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val numNumNumNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val evenNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val oddNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val\
    \ numNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val evenNumNumNumNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val oddNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val numNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val\
    \ evenNumNumNumNumNumNumNumNum = mutable.ListBuffer[Long\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr3zcrd96.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr3zcrd96.scala:38:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevenNumNumNumNumNumNumNum\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenNumNumNumNumNumNumNum is already defined as \e[33mvalue\e\
    [0m \e[35mevenNumNumNumNumNumNumNum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr3zcrd96.scala:39:12 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36moddNumNumNumNumNumNumNum\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddNumNumNumNumNumNumNum is already defined as \e[33mvalue\e\
    [0m \e[35moddNumNumNumNumNumNumNum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr3zcrd96.scala:40:12 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mnumNumNumNumNumNumNumNum\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumNumNumNumNumNumNumNum is already defined as \e[33mvalue\e\
    [0m \e[35mnumNumNumNumNumNumNumNum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr3zcrd96.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m"
  stdout: ''
  timestamp: 1659794047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ > odd) {\n            return even\n        } else {\n            return -1\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpus_cg864.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpus_cg864.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpus_cg864.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpus_cg864.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        range.foreach { i =>\n            if (i % 2 == 0) {\n               \
    \ evens += i\n            } else {\n                odds += i\n            }\n\
    \        }\n        val even = evens.max\n        val odd = odds.max\n       \
    \ if (even > odd) {\n            return even\n        } else {\n            return\
    \ -1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdrljhmaf.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpdrljhmaf.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpdrljhmaf.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdrljhmaf.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794058
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x to y).filter(_\
    \ % 2 == 0)\n        for (i <- range) {\n            if (i % 2 == 0) {\n     \
    \           evens += i\n            } else {\n                odds += i\n    \
    \        }\n        }\n        val even = evens.max\n        val odd = odds.max\n\
    \        if (even < odd) {\n            return even\n        } else {\n      \
    \      return -1\n        }\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaqpu85v9.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpaqpu85v9.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794042
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        if (evens.isEmpty) {\n            return -1\n        } else if\
    \ (evens.size == 1) {\n            return evens.head\n        } else {\n     \
    \       val maxEven = evens.max\n            val maxOdd = odds.max\n         \
    \   if (maxEven > maxOdd) {\n                return maxEven\n            } else\
    \ {\n                return maxOdd\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwoyxseln.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpwoyxseln.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpwoyxseln.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwoyxseln.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        range.foreach(x => if (x % 2 == 0) evens += x; else odds += x)\n    \
    \    val even = evens.max\n        val odd = odds.max\n        if (even > odd)\
    \ even else odd\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpilkghuju.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpilkghuju.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpilkghuju.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpilkghuju.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794069
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = x to y\
    \ by 2\n        val evensCount = evens.count(_ % 2 == 0)\n        if (evensCount\
    \ == 0) {\n            return -1\n        }\n        val maxEven = evens.max\n\
    \        if (maxEven % 2 == 0) {\n            return maxEven\n        }\n    \
    \    return -1\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd_5lcx4i.scala:25)\n\tat Problem.main(tmpd_5lcx4i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794101
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ > odd) {\n            return even\n        } else {\n            return -1\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpus_cg864.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpus_cg864.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpus_cg864.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpus_cg864.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        range.foreach(x => {\n            if (x % 2 == 0) {\n               \
    \ evens += x\n            } else {\n                odds += x\n            }\n\
    \        })\n        val even = evens.max\n        val odd = odds.max\n      \
    \  if (even > odd) {\n            return even\n        } else {\n            return\
    \ -1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpex7tj1w7.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpex7tj1w7.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpex7tj1w7.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpex7tj1w7.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        if (evens.isEmpty) {\n            return -1\n        }\n      \
    \  if (evens.size == 1) {\n            return evens.head\n        }\n        val\
    \ maxEven = evens.max\n        if (odds.length == 1) {\n            return maxEven\n\
    \        }\n        val maxOdd = odds.max\n        if (maxEven > maxOdd) {\n \
    \           return maxEven\n        } else {\n            return maxOdd\n    \
    \    }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbh58yadc.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbh58yadc.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpbh58yadc.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbh58yadc.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794099
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x - y).abs\
    \ \n        val evenRange = range / 2\n        val oddRange = range % 2\n    \
    \    val even = x to evenRange\n        val odd = x to oddRange\n        evens\
    \ += even\n        odds += odd\n        val evens = evens.toList\n        val\
    \ odds = odds.toList\n        evens.sortWith(_ < _)\n        odds.sortWith(_ <\
    \ _)\n        val evens = evens.last\n        val odds = odds.last\n        if\
    \ (evens.isEmpty) {\n            return -1\n        }\n        if (evens.last\
    \ % 2 == 0) {\n            return evens.last\n        }\n        if (odds.last\
    \ % 2 == 0) {\n            return odds.last\n        }\n        if (evens.last\
    \ < evens.last) {\n            return evens.last\n        }\n        if (odds.last\
    \ < odds.last) {\n            return odds.last\n        }\n        if (evens.last\
    \ < evens.last) {\n            return evens.last\n        }\n        if (odds.last\
    \ < odds.last) {\n            return odds.last\n        }\n        if (evens.last\
    \ < evens.last) {\n            return evens.last\n        }\n        if (odds.last\
    \ < odds.last) {\n            return odds.last\n        }\n        if (evens.last\
    \ < evens.last) {\n            return evens.last\n        }\n        if (odds.last\
    \ < odds.last) {\n            return odds.last\n        }\n        if (evens.last\
    \ < evens.last) {\n            return evens.last\n        }\n        if (odds.last\
    \ < odds.last) {\n            return odds.last\n        }\n        if (evens.last\
    \ < evens.last) {\n            return evens.last\n        }\n        if (odds.last\
    \ < odds.last) {\n            return odds.last\n        }\n        if (evens.last\
    \ < evens.last) {\n            return evens.last\n        }\n        if (odds.last\
    \ < odds.last) {\n            return odds.last\n        }\n        if (evens.last\
    \ < evens.last) {\n            return evens.last\n        }\n        if (odds.last\
    \ < odds.last) {\n            return odds.last\n        }\n        if (evens.last\
    \ < evens.last) {\n            return evens.last\n        }\n        if (odds.last\
    \ < odds.last) {\n            return odds.last\n        }\n        if (evens.last\
    \ < evens.last) {\n            return evens.last\n        }\n        if (odds.last\
    \ < odds.last) {\n            return odds.last\n        }\n        if (evens.last\
    \ < evens.last) {\n            return evens.last\n        }\n\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp69u6t94e.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = evens.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mevens\
    \ is already defined as \e[33mvalue\e[0m \e[35mevens\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp69u6t94e.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36modds\e[0m = odds.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modds is already defined as \e[33mvalue\e[0m \e[35modds\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp69u6t94e.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = evens.last\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mevens is already defined\
    \ as \e[33mvalue\e[0m \e[35mevens\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp69u6t94e.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = odds.last\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0modds is already\
    \ defined as \e[33mvalue\e[0m \e[35modds\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp69u6t94e.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp69u6t94e.scala:12:1"
  stdout: ''
  timestamp: 1659794098
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = x filter\
    \ (_ % 2 == 0)\n        val odds = x filter (_ % 2 != 0)\n        val evensAndOdds\
    \ = evens ++ odds\n        val evensAndOddsSet = evensAndOdds.toSet\n        val\
    \ evensAndOddsSetSize = evensAndOddsSet.size\n        val evensAndOddsSetSize\
    \ = evensAndOddsSet.size\n        val evensAndOddsSetSize = evensAndOddsSet.size\n\
    \        val evensAndOddsSetSize = evensAndOddsSet.size\n        val evensAndOddsSetSize\
    \ = evensAndOddsSet.size\n        val evensAndOddsSetSize = evensAndOddsSet.size\n\
    \        val evensAndOddsSetSize = evensAndOddsSet.size\n        val evensAndOddsSetSize\
    \ = evensAndOddsSet.size\n        val evensAndOddsSetSize = evensAndOddsSet.size\n\
    \        val evensAndOddsSetSize = evensAndOddsSet.size\n        val evensAndOddsSetSize\
    \ = evensAndOddsSet.size\n        val evensAndOddsSetSize = evensAndOddsSet.size\n\
    \        val evensAndOddsSetSize = evensAndOddsSet.size\n        val evensAndOddsSetSize\
    \ = evensAndOddsSet.size\n        val evensAndOddsSetSize = evensAndOddsSet.size\n\
    \        val evensAndOddsSetSize = evensAndOddsSet.size\n        val evensAndOddsSetSize\
    \ = evensAndOddsSet.size\n        val evensAndOddsSetSize = evensAndOddsSet.size\n\
    \        val evensAndOddsSetSize = evensAndOddsSet.size\n        val evensAndOddsSetSize\
    \ = evensAndOddsSet.size\n        val evensAndOddsSetSize = evensAndOddsSet.size\n\
    \        val evensAndOddsSetSize = evensAndOddsSet.size\n        val evensAndOddsSetSize\
    \ = evensAndOddsSet.size\n        val evensAndOddsSetSize = evensAndOddsSet.size\n\
    \        val evensAndOddsSetSize = evensAndOddsSet.size\n        val evensAndOddsSetSize\
    \ = evensAndOddsSet.size\n        val evensAndOddsSetSize = evensAndOddsSet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmplatpblgx.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mevensAndOddsSetSize\e[0m\
    \ = evensAndOddsSet.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensAndOddsSetSize is already defined as \e[33mvalue\e[0m\
    \ \e[35mevensAndOddsSetSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmplatpblgx.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mevensAndOddsSetSize\e[0m\
    \ = evensAndOddsSet.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensAndOddsSetSize is already defined as \e[33mvalue\e[0m\
    \ \e[35mevensAndOddsSetSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmplatpblgx.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mevensAndOddsSetSize\e[0m\
    \ = evensAndOddsSet.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensAndOddsSetSize is already defined as \e[33mvalue\e[0m\
    \ \e[35mevensAndOddsSetSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmplatpblgx.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mevensAndOddsSetSize\e[0m\
    \ = evensAndOddsSet.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensAndOddsSetSize is already defined as \e[33mvalue\e[0m\
    \ \e[35mevensAndOddsSetSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmplatpblgx.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m"
  stdout: ''
  timestamp: 1659794102
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val range = Range(x, y)\n   \
    \     range.foreach(x => if (x % 2 == 0) evens += x) else {\n            if (x\
    \ % 2 == 1) odds += x\n        })\n        val even = evens.max\n        val odd\
    \ = odds.max\n        if (even > odd) even else odd\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp8605nbl1.scala:14:55 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        range.foreach(\e[36mx\e[0m => \e[33mif\e[0m (x\
    \ % \e[31m2\e[0m == \e[31m0\e[0m) evens += x) \e[33melse\e[0m {\n\e[31m\e[31m\
    \   |\e[0m                                                       ^^^^\e[0m\n\e\
    [31m   |\e[0m                              end of statement expected but 'else'\
    \ found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8605nbl1.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp8605nbl1.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp8605nbl1.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8605nbl1.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659794101
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val range = Range(x, y)\n   \
    \     range.foreach(x => if (x % 2 == 0) evens += x)\n        range.foreach(x\
    \ => if (x % 2 != 0) odds += x)\n        val even = evens.max\n        val odd\
    \ = odds.max\n        if (even > odd) even else odd\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps7w8akjm.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmps7w8akjm.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmps7w8akjm.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps7w8akjm.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794102
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        var biggest = y\n \
    \       var even = 1\n        while(even <= x) {\n            biggest = biggest\
    \ + even\n            even = even + 2\n        }\n        if(biggest > x) {\n\
    \            biggest = -1\n        }\n        return biggest\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4u8uipcn.scala:23)\n\tat Problem.main(tmp4u8uipcn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794101
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x - y).abs\
    \ \n        val even = (range / 2).toInt\n        val odd = (range / 2).toInt\n\
    \        val evens = x until y by even\n        val odds = x until y by odd\n\
    \        evens.foreach(x => evens += x)\n        odds.foreach(x => odds += x)\n\
    \        evens.max\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_wx8s2pw.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = x until y by\
    \ even\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mevens is already defined as \e[33mvalue\e[0m \e[35mevens\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp_wx8s2pw.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = x until y by odd\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0modds is already\
    \ defined as \e[33mvalue\e[0m \e[35modds\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_wx8s2pw.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_wx8s2pw.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val range = Range(x, y)\n   \
    \     range.foreach(x => if (x % 2 == 0) evens += x; else odds += x)\n       \
    \ val even = evens.max\n        val odd = odds.max\n        if (even > odd) even\
    \ else odd\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq1v2pqgd.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpq1v2pqgd.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpq1v2pqgd.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq1v2pqgd.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794068
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val num = mutable.ListBuffer[Long]()\n        val evenNum = mutable.ListBuffer[Long]()\n\
    \        val oddNum = mutable.ListBuffer[Long]()\n        val numNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNum = mutable.ListBuffer[Long]()\n        val oddNumNum =\
    \ mutable.ListBuffer[Long]()\n        val numNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNum = mutable.ListBuffer[Long]()\n        val oddNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val numNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNumNum = mutable.ListBuffer[Long]()\n        val oddNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val numNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val oddNumNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val numNumNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val\
    \ oddNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val numNumNumNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val evenNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val oddNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val\
    \ numNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val evenNumNumNumNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val oddNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val numNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val\
    \ evenNumNumNumNumNumNumNumNum = mutable.ListBuffer[Long\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr3zcrd96.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr3zcrd96.scala:38:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevenNumNumNumNumNumNumNum\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenNumNumNumNumNumNumNum is already defined as \e[33mvalue\e\
    [0m \e[35mevenNumNumNumNumNumNumNum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr3zcrd96.scala:39:12 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36moddNumNumNumNumNumNumNum\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddNumNumNumNumNumNumNum is already defined as \e[33mvalue\e\
    [0m \e[35moddNumNumNumNumNumNumNum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr3zcrd96.scala:40:12 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mnumNumNumNumNumNumNumNum\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumNumNumNumNumNumNumNum is already defined as \e[33mvalue\e\
    [0m \e[35mnumNumNumNumNumNumNumNum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr3zcrd96.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m"
  stdout: ''
  timestamp: 1659794047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ > odd) {\n            return even\n        } else {\n            return -1\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpus_cg864.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpus_cg864.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpus_cg864.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpus_cg864.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794047
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = x until\
    \ y by 2\n        val evensCount = evens.count(_ % 2 == 0)\n        if (evensCount\
    \ == 0) -1\n        else evens.max\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_lmq8uy4.scala:19)\n\tat Problem.main(tmp_lmq8uy4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794103
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x - y).abs()\n\
    \        val evenRange = range.filter(_ % 2 == 0)\n        val oddRange = range.filter(_\
    \ % 2 != 0)\n        evenRange foreach { x => evens += x }\n        oddRange foreach\
    \ { x => odds += x }\n        val evenMax = evens.max\n        val oddMax = odds.max\n\
    \        if (evenMax == oddMax) {\n            return evenMax\n        } else\
    \ {\n            return -1\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsv0tw4q3.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpsv0tw4q3.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E050] Type Error: /tmp/tmpsv0tw4q3.scala:13:28 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = (x - y).abs()\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                \e[33mmethod\e[0m \e[35mabs\e[0m in \e[33mclass\e[0m \e[35mRichLong\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        var even = 0\n    \
    \    var odd = 0\n        var num = 0\n        var evenNum = 0\n        var oddNum\
    \ = 0\n        var evenMax = 0\n        var oddMax = 0\n        var evenMin =\
    \ 0\n        var oddMin = 0\n        for(i <- 1 to y){\n            for(j <- 1\
    \ to x){\n                if(i%2 == 0){\n                    even = even + 1\n\
    \                    if(even%2 == 0){\n                        evenNum = evenNum\
    \ + 1\n                        if(evenNum == even){\n                        \
    \    evenMax = even\n                            evenMin = i\n               \
    \         }\n                    }\n                }\n                else{\n\
    \                    odd = odd + 1\n                    if(odd%2 == 0){\n    \
    \                    oddNum = oddNum + 1\n                        if(oddNum ==\
    \ odd){\n                            oddMax = odd\n                          \
    \  oddMin = i\n                        }\n                    }\n            \
    \    }\n            }\n        }\n        if(evenNum == even){\n            num\
    \ = evenMax\n        }\n        else{\n            num = oddMax\n        }\n \
    \       if(num == 0){\n            num = -1\n        }\n        return num\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmma5kdbx.scala:20:22\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to y){\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m \
    \  |\e[0m                      Found:    (y : Long)\n\e[31m   |\e[0m         \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpmma5kdbx.scala:21:26 --------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m            \e[33mfor\e[0m(j <- \e[31m1\e[0m to x){\n\e[31m\e[31m   |\e\
    [0m                          ^\e[0m\n\e[31m   |\e[0m                         \
    \ Found:    (x : Long)\n\e[31m   |\e[0m                          Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794103
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x to y).filter(_\
    \ % 2 == 0)\n        range.foreach(x => if (x % 2 == 0) evens += x else odds +=\
    \ x)\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ > odd) even else odd\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9kbwao5z.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp9kbwao5z.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794101
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x - y).abs\
    \ \n        val evenRange = range.filter(_ % 2 == 0)\n        val oddRange = range.filter(_\
    \ % 2 != 0)\n        evenRange foreach { x => evens += x }\n        oddRange foreach\
    \ { x => odds += x }\n        val evenMax = evens.max\n        val oddMax = odds.max\n\
    \        if (evenMax > oddMax) evenMax else oddMax\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9tux5zq4.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp9tux5zq4.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp9tux5zq4.scala:14:30 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevenRange\e[0m = range.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \   ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        value filter is\
    \ not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9tux5zq4.scala:15:29\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36moddRange\e[0m = range.filter(_ % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \             value filter is not a member of Long\n4 errors found\n"
  stdout: ''
  timestamp: 1659794103
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val range = Range(x, y)\n   \
    \     range.foreach(x => {\n            if (x % 2 == 0) {\n                evens\
    \ += x\n            } else {\n                odds += x\n            }\n     \
    \   })\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ > odd) {\n            return even\n        } else {\n            return -1\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps6p2x68r.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmps6p2x68r.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmps6p2x68r.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps6p2x68r.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794057
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        if (evens.isEmpty) {\n            return -1\n        }\n      \
    \  if (evens.size > odds.size) {\n            return evens.last\n        }\n \
    \       val even = evens.last\n        val odd = odds.last\n        if (even >\
    \ odd) {\n            return even\n        }\n        return odd\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiwqc8pio.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpiwqc8pio.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpiwqc8pio.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiwqc8pio.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794103
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = x filter\
    \ (_ % 2 == 0)\n        val odds = x filter (_ % 2 != 0)\n        val evensSum\
    \ = evens.sum\n        val oddsSum = odds.sum\n        if (evensSum > oddsSum)\
    \ {\n            evensSum\n        } else {\n            oddsSum\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwimq3llc.scala:11:22 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = x filter (_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    value filter is not a member of Long\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwimq3llc.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = x filter (_\
    \ % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   value filter is not a member of Long\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659794103
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = x to y\
    \ by 2\n        val evensSorted = evens.toList\n        val evensSortedSorted:\
    \ mutable.Buffer[Long] = evensSorted.sortWith(_ < _)\n        val evensSortedSortedLast\
    \ = evensSortedSortedLast.last\n        val evensSortedSortedLastIndex = evensSortedSortedLast.indexOf\n\
    \        val evensSortedSortedLastValue = evensSortedSortedLast.last\n       \
    \ val evensSortedSortedLastIndex = evensSortedSortedLast.indexOf\n        val\
    \ evensSortedSortedLastValue = evensSortedSortedLast.last\n        val evensSortedSortedLastIndex\
    \ = evensSortedSortedLast.indexOf\n        val evensSortedSortedLastValue = evensSortedSortedLast.last\n\
    \        val evensSortedSortedLastIndex = evensSortedSortedLast.indexOf\n    \
    \    val evensSortedSortedLastValue = evensSortedSortedLast.last\n        val\
    \ evensSortedSortedLastIndex = evensSortedSortedLast.indexOf\n        val evensSortedSortedLastValue\
    \ = evensSortedSortedLast.last\n        val evensSortedSortedLastIndex = evensSortedSortedLast.indexOf\n\
    \        val evensSortedSortedLastValue = evensSortedSortedLast.last\n       \
    \ val evensSortedSortedLastIndex = evensSortedSortedLast.indexOf\n        val\
    \ evensSortedSortedLastValue = evensSortedSortedLast.last\n        val evensSortedSortedLastIndex\
    \ = evensSortedSortedLast.indexOf\n        val evensSortedSortedLastValue = evensSortedSortedLast.last\n\
    \        val evensSortedSortedLastIndex = evensSortedSortedLast.indexOf\n    \
    \    val evensSortedSortedLastValue = evensSortedSortedLast.last\n        val\
    \ evensSortedSortedLastIndex = evensSortedSortedLast.indexOf\n        val evensSortedSortedLastValue\
    \ = evensSortedSortedLast.last\n        val evensSortedSortedLastIndex = evensSortedSortedLast.indexOf\n\
    \        val evensSortedSortedLastValue = evensSortedSortedLast.last\n       \
    \ val evensSortedSortedLastIndex = evensSortedSortedLast.indexOf\n        val\
    \ evensSortedSortedLastValue = evensSortedSortedLast.last\n        val evensSortedSortedLastIndex\
    \ = evensSortedSortedLast.indexOf\n        val evensSortedSortedLastValue = evensSortedSortedLast.last\n\
    \        val evensSortedSortedLastIndex = evensSortedSortedLast.indexOf\n    \
    \    val evensSortedSortedLastValue = evensSortedSortedLast.last\n        val\
    \ even\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzro6mofz.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzro6mofz.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevensSortedSortedLastIndex\e[0m = evensSortedSortedLast.indexOf\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSortedSortedLastIndex is already defined as \e[33mvalue\e\
    [0m \e[35mevensSortedSortedLastIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzro6mofz.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mevensSortedSortedLastValue\e\
    [0m = evensSortedSortedLast.last\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSortedSortedLastValue is already defined as \e[33mvalue\e\
    [0m \e[35mevensSortedSortedLastValue\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzro6mofz.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mevensSortedSortedLastIndex\e\
    [0m = evensSortedSortedLast.indexOf\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSortedSortedLastIndex is already defined as \e[33mvalue\e\
    [0m \e[35mevensSortedSortedLastIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzro6mofz.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mevensSortedSortedLastValue\e\
    [0m = evensSortedSortedLast.last\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n"
  stdout: ''
  timestamp: 1659794103
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        var maxEven = math.max(x,\
    \ y)\n        var minEven = math.min(x, y)\n        var even = math.max(minEven,\
    \ maxEven)\n        var even2 = math.min(minEven, maxEven)\n        var even3\
    \ = math.max(minEven, maxEven)\n        var even4 = math.min(minEven, maxEven)\n\
    \        var even5 = math.max(minEven, maxEven)\n        var even6 = math.min(minEven,\
    \ maxEven)\n        var even7 = math.max(minEven, maxEven)\n        var even8\
    \ = math.min(minEven, maxEven)\n        var even9 = math.max(minEven, maxEven)\n\
    \        var even10 = math.min(minEven, maxEven)\n        var even11 = math.max(minEven,\
    \ maxEven)\n        var even12 = math.min(minEven, maxEven)\n        var even13\
    \ = math.max(minEven, maxEven)\n        var even14 = math.min(minEven, maxEven)\n\
    \        var even15 = math.max(minEven, maxEven)\n        var even16 = math.min(minEven,\
    \ maxEven)\n        var even17 = math.max(minEven, maxEven)\n        var even18\
    \ = math.min(minEven, maxEven)\n        var even19 = math.max(minEven, maxEven)\n\
    \        var even20 = math.min(minEven, maxEven)\n        var even21 = math.max(minEven,\
    \ maxEven)\n        var even22 = math.min(minEven, maxEven)\n        var even23\
    \ = math.max(minEven, maxEven)\n        var even24 = math.min(minEven, maxEven)\n\
    \        var even25 = math.max(minEven, maxEven)\n        var even26 = math.min(minEven,\
    \ maxEven)\n        var even27 = math.max(minEven, maxEven)\n        var even28\
    \ = math.min(minEven, maxEven)\n        var even29 = math.max(minEven, maxEven)\n\
    \        var even30 = math.min(minEven, maxEven)\n        var even31 = math.max(minEven,\
    \ maxEven)\n        var even32 = math.min(minEven, maxEven)\n        var even33\
    \ = math.max(minEven, maxEven)\n        var even34 = math.min(minEven, maxEven)\n\
    \        var even35 = math.max(minEven, maxEven)\n        var even36 = math.min(minEven,\
    \ maxEven)\n        var even37 = math.max(minEven, maxEven)\n        var even38\
    \ = math.min(minEven, maxEven)\n        var even39 = math.max(minEven, maxEven)\n\
    \        var \n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp1p2qg2mz.scala:52:11 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mvar\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1p2qg2mz.scala:53:5 ---------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794103
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ > odd) {\n            return even\n        } else {\n            return -1\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpus_cg864.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpus_cg864.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpus_cg864.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpus_cg864.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (y : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
    \    def chooseNum(x : Long, y : Long) : Long = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x - y).abs\
    \ \n        val evenRange = range.filter(_ % 2 == 0)\n        val oddRange = range.filter(_\
    \ % 2 != 0)\n        evenRange foreach { x => evens += x }\n        oddRange foreach\
    \ { x => odds += x }\n        val evenMax = evens.max\n        val oddMax = odds.max\n\
    \        if (evenMax == evenMax && oddMax == oddMax)\n            evenMax\n  \
    \      else\n            -1\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_6nugj_n.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_6nugj_n.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp_6nugj_n.scala:14:30 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevenRange\e[0m = range.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \   ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        value filter is\
    \ not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_6nugj_n.scala:15:29\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36moddRange\e[0m = range.filter(_ % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \             value filter is not a member of Long\n4 errors found\n"
  stdout: ''
  timestamp: 1659794103
