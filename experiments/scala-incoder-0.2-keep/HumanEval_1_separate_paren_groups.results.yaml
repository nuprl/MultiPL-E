language: scala
name: HumanEval_1_separate_paren_groups
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat3\
    \ = paren_groups_flat2.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat4\
    \ = paren_groups_flat3.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat5\
    \ = paren_groups_flat4.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat6\
    \ = paren_groups_flat5.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat7\
    \ = paren_groups_flat6.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat8\
    \ = paren_groups_flat7.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat9\
    \ = paren_groups_flat8.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat10\
    \ = paren_groups_flat9.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat11\
    \ = paren_groups_flat10.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat12\
    \ = paren_groups_flat11.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat13\
    \ = paren_groups_flat12.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat14\
    \ = paren_groups_flat13.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat15\
    \ = paren_groups_flat14.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat16\
    \ = paren_groups_flat15.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat17\
    \ = paren_groups_flat16.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat18\
    \ = paren_groups_flat17.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat19\
    \ = paren_groups_flat18.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat20\
    \ = paren_groups_flat19.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat21\
    \ = paren_groups_flat20.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat22\
    \ = paren_groups_flat21.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat23\
    \ = paren_groups_flat22.flat\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2zketgwa.scala:13:66 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m\
    \ = paren_groups_flat.flatMap(\e[36mx\e[0m => x.split(\e[31m\"\\\\)\"\e[0m))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                                     value\
    \ split is not a member of Char\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2zketgwa.scala:35:5\
    \ ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces.map(x => x.replace(\"( \", \"\
    \ (\"))\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpvudn6ekv.scala:22:177 --------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                                \
    \                                                                            \
    \                                                     ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpvudn6ekv.scala:20:148\
    \ --------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                                                                            \
    \    ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m\
    \  paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpvudn6ekv.scala:21:163 --------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_witho"
  stdout: ''
  timestamp: 1659795588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        var open_braces = 0\n        var close_braces = 0\n        var open_parens\
    \ = 0\n        var close_parens = 0\n        var paren_group = \"\"\n        var\
    \ paren_group_open = false\n        var paren_group_close = false\n        var\
    \ paren_group_open_brace = false\n        var paren_group_close_brace = false\n\
    \        var paren_group_open_paren = false\n        var paren_group_close_paren\
    \ = false\n        var paren_group_open_brace_close = false\n        var paren_group_close_brace_close\
    \ = false\n        var paren_group_open_paren_close = false\n        var paren_group_close_paren_close\
    \ = false\n        var paren_group_open_brace_close_paren = false\n        var\
    \ paren_group_close_brace_close_paren = false\n        var paren_group_open_paren_close_paren\
    \ = false\n        var paren_group_close_paren_close_paren = false\n        var\
    \ paren_group_open_brace_close_paren_close = false\n        var paren_group_close_brace_close_paren_close\
    \ = false\n        var paren_group_open_paren_close_paren_close = false\n    \
    \    var paren_group_close_paren_close_paren_close = false\n        var paren_group_open_brace_close_paren_close_paren\
    \ = false\n        var paren_group_close_brace_close_paren_close_paren = false\n\
    \        var paren_group_open_paren_close_paren_close_paren = false\n        var\
    \ paren_group_close_paren_close_paren_close_paren = false\n        var paren_group_open_brace_close_paren_close_paren_close\
    \ = false\n        var paren_group_close_brace_close_paren_close_paren_close =\
    \ false\n        var paren_group_open_paren_close_paren_close_paren_close = false\n\
    \        var paren_group_close_paren_close_paren_close_paren_close = false\n \
    \       var paren_group_open_brace_close_paren_close_paren_close_paren = false\n\
    \        var paren_group_close_brace_close_paren_close_paren_close_paren = false\n\
    \        var paren_group_open_paren_close_paren_close_paren_close_paren = false\n\
    \        var paren_group_close_paren_close_paren_close_paren_close_paren = false\n\
    \        var paren_group_open_brace_close_paren_close_paren_close_paren_close\
    \ = false\n        var paren_group_close_brace_close_paren_close_paren_close_paren_close\
    \ = false\n        var paren_group_open_paren_close_paren_close_paren_close_paren_close\
    \ = false\n        var paren_group_close_paren_close_paren_close_paren_close_paren_close\
    \ = false\n        var paren_group_open_bra\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbthl3t7y.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbthl3t7y.scala:11:27\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpbthl3t7y.scala:52:5 ---------------------\e[0m\e[0m\n\e[31m52\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795587
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_size = paren_groups.length\n        val paren_groups_size_list\
    \ = paren_groups_size.map(x => List(x))\n        val paren_groups_size_list =\
    \ paren_groups_size.map(x => List(x))\n        val paren_groups_size_list = paren_groups_size.map(x\
    \ => List(x))\n        val paren_groups_size_list = paren_groups_size.map(x =>\
    \ List(x))\n        val paren_groups_size_list = paren_groups_size.map(x => List(x))\n\
    \        val paren_groups_size_list = paren_groups_size.map(x => List(x))\n  \
    \      val paren_groups_size_list = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list = paren_groups_size.map(x => List(x))\n      \
    \  val paren_groups_size_list = paren_groups_size.map(x => List(x))\n        val\
    \ paren_groups_size_list = paren_groups_size.map(x => List(x))\n        val paren_groups_size_list\
    \ = paren_groups_size.map(x => List(x))\n        val paren_groups_size_list =\
    \ paren_groups_size.map(x => List(x))\n        val paren_groups_size_list = paren_groups_size.map(x\
    \ => List(x))\n        val paren_groups_size_list = paren_groups_size.map(x =>\
    \ List(x))\n        val paren_groups_size_list = paren_groups_size.map(x => List(x))\n\
    \        val paren_groups_size_list = paren_groups_size.map(x => List(x))\n  \
    \      val paren_groups_size_list = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list = paren_groups_size.map(x => List(x))\n      \
    \  val paren_groups_size_list = paren_groups_size.map(x => List(x))\n        val\
    \ paren_groups_size_list = paren_groups_size.map(x => List(x))\n        val paren_groups_size_list\
    \ = paren_groups_size.map(x => List(x))\n        val paren_groups_size_list =\
    \ paren_groups_size.map(x => List(x))\n        val paren_groups_size_list = paren_groups_size.map(x\
    \ => List(x))\n        val paren_groups_size_list = paren_groups_size.map(x =>\
    \ List(x))\n        val paren_groups_size_list = paren_groups_size.map(x => List(x))\n\
    \        val paren_groups_size_list = paren_groups_size.map(x => List(x))\n  \
    \      val paren_groups_size_list = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list = paren_groups_size.map(x => List(x))\n      \
    \  val paren_groups_size_list = paren_groups_size.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpa7ox2h59.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpa7ox2h59.scala:14:12 ---------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_size_list\e[0m = paren_groups_size.map(\e\
    [36mx\e[0m => List(x))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_size_list is already defined as \e[33mvalue\e\
    [0m \e[35mparen_groups_size_list\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa7ox2h59.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_size_list\e\
    [0m = paren_groups_size.map(\e[36mx\e[0m => List(x))\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mparen_groups_size_list is already defined as \e[33mvalue\e[0m \e\
    [35mparen_groups_size_list\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpa7ox2h59.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_size_list\e\
    [0m = paren_groups_size.map(\e[36mx\e[0m => List(x))\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mparen_groups_size_list is already defined as \e[33mvalue\e[0m \e\
    [35mparen_groups_size_list\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpa7ox2h59.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_size_list\e\
    [0m = paren_groups_size.map(\e[36mx\e[0m => List(x))\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659795588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer.empty[String]\n\
    \        val paren_open = mutable.ListBuffer.empty[String]\n        val paren_close\
    \ = mutable.ListBuffer.empty[String]\n        val paren_open_index = mutable.ListBuffer.empty[Int]\n\
    \        val paren_close_index = mutable.ListBuffer.empty[Int]\n        val paren_open_index\
    \ = paren_open_index.init\n        val paren_close_index = paren_close_index.init\n\
    \        val paren_open = paren_open.init\n        val paren_close = paren_close.init\n\
    \        val paren_groups = paren_groups.init\n        val paren_open_index =\
    \ paren_open_index.init\n        val paren_close_index = paren_close_index.init\n\
    \        val paren_open = paren_open.init\n        val paren_close = paren_close.init\n\
    \        val paren_groups = paren_groups.init\n        val paren_open_index =\
    \ paren_open_index.init\n        val paren_close_index = paren_close_index.init\n\
    \        val paren_open = paren_open.init\n        val paren_close = paren_close.init\n\
    \        val paren_groups = paren_groups.init\n        val paren_open_index =\
    \ paren_open_index.init\n        val paren_close_index = paren_close_index.init\n\
    \        val paren_open = paren_open.init\n        val paren_close = paren_close.init\n\
    \        val paren_groups = paren_groups.init\n        val paren_open_index =\
    \ paren_open_index.init\n        val paren_close_index = paren_close_index.init\n\
    \        val paren_open = paren_open.init\n        val paren_close = paren_close.init\n\
    \        val paren_groups = paren_groups.init\n        val paren_open_index =\
    \ paren_open_index.init\n        val paren_close_index = paren_close_index.init\n\
    \        val paren_open = paren_open.init\n        val paren_close = paren_close.init\n\
    \        val paren_groups = paren_groups.init\n        val paren_open_index =\
    \ paren_open_index.init\n        val paren_close_index = paren_close_index.init\n\
    \        val paren_open = paren_open.init\n        val paren_close = paren_close.init\n\
    \        val paren_groups = paren_groups.init\n        val paren_open_index =\
    \ paren_open_index.init\n        val paren_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp23pe7ccf.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp23pe7ccf.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_open_index\e[0m = paren_open_index.init\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mparen_open_index\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_open_index\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp23pe7ccf.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_close_index\e[0m = paren_close_index.init\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_close_index is already defined as \e[33mvalue\e[0m \e\
    [35mparen_close_index\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp23pe7ccf.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mparen_open\e[0m = paren_open.init\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mparen_open is already defined as \e[33mvalue\e[0m \e[35mparen_open\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp23pe7ccf.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_close\e[0m = paren_close.init\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mparen_close\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_close\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tm"
  stdout: ''
  timestamp: 1659795586
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").map(_.trim).toList\n        val paren_groups_count = paren_groups.size\n\
    \        val paren_groups_remainder = paren_groups_count % paren_groups_count\
    \ == 0\n        val paren_groups_remainder_count = paren_groups_count - paren_groups_remainder\n\
    \        val paren_groups_remainder_strings = paren_groups_remainder.map(x =>\
    \ paren_groups(x + 1))\n        val paren_groups_remainder_strings_count = paren_groups_remainder_strings.size\n\
    \        val paren_groups_remainder_strings_remainder = paren_groups_remainder_strings_count\
    \ % paren_groups_remainder_strings_count == 0\n        val paren_groups_remainder_strings_remainder_count\
    \ = paren_groups_remainder_strings_count - paren_groups_remainder_strings_remainder\n\
    \        val paren_groups_remainder_strings_remainder_strings = paren_groups_remainder_strings_remainder.map(x\
    \ => paren_groups_remainder_strings(x + 1))\n        val paren_groups_remainder_strings_remainder_strings_count\
    \ = paren_groups_remainder_strings_remainder_strings.size\n        val paren_groups_remainder_strings_remainder_strings_remainder\
    \ = paren_groups_remainder_strings_remainder_strings_count % paren_groups_remainder_strings_remainder_strings_count\
    \ == 0\n        val paren_groups_remainder_strings_remainder_strings_remainder_count\
    \ = paren_groups_remainder_strings_remainder_strings_count - paren_groups_remainder_strings_remainder_strings_remainder\n\
    \        val paren_groups_remainder_strings_remainder_strings_remainder_strings\
    \ = paren_groups_remainder_strings_remainder_strings_remainder.map(x => paren_groups_remainder_strings_remainder_strings(x\
    \ + 1))\n        val paren_groups_remainder_strings_remainder_strings_remainder_strings_count\
    \ = paren_groups_remainder_strings_remainder_strings_remainder_strings.size\n\
    \        val paren_groups_remainder_strings_remainder_strings_remainder_strings_remainder\
    \ = paren_groups_remainder_strings_remainder_strings_remainder_strings_count %\
    \ paren_groups_remainder_strings_remainder_strings_remainder_strings_count ==\
    \ 0\n        val paren_groups_remainder_strings_remainder_strings_remainder_strings_remainder_count\
    \ = paren_groups_remainder_strings_remainder_strings_remainder_strings_count -\
    \ paren_groups_remainder_strings_remainder_strings_remainder_strings_remainder_strings\n\
    \        val paren_groups_\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpc6jthc01.scala:28:4 ----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpc6jthc01.scala:14:62\
    \ -----------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e\
    [0m \e[36mparen_groups_remainder_count\e[0m = paren_groups_count - paren_groups_remainder\n\
    \e[31m\e[31m   |\e[0m                                           ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m None of the overloaded alternatives of \e[33mmethod\e[0m\
    \ \e[35m-\e[0m in \e[33mclass\e[0m \e[35mInt\e[0m with types\n\e[31m   |\e[0m\
    \  (x: Double): Double\n\e[31m   |\e[0m  (x: Float): Float\n\e[31m   |\e[0m  (x:\
    \ Long): Long\n\e[31m   |\e[0m  (x: Int): Int\n\e[31m   |\e[0m  (x: Char): Int\n\
    \e[31m   |\e[0m  (x: Short): Int\n\e[31m   |\e[0m  (x: Byte): Int\n\e[31m   |\e\
    [0m match arguments ((paren_groups_remainder : Boolean))\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpc6jthc01.scala:15:68 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_remainder_strings\e\
    [0m = paren_groups_remainder.map(\e[36mx\e[0m => paren_groups(x + \e[31m1\e[0m))\n\
    \e[31m\e[31m   |\e[0m                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value map is not a member\
    \ of Boolean\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc6jthc01.scala:28:5\
    \ ---------------------\e[0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659795589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_open_braces = paren_groups.map(x => x.replace(\"\
    )\", \"\"))\n        val paren_groups_with_close_braces = paren_groups_with_open_braces.map(x\
    \ => x.replace(\"(\", \"\"))\n        val paren_groups_with_open_brace_and_close_braces\
    \ = paren_groups_with_close_braces.map(x => x.replace(\")\", \"\"))\n        val\
    \ paren_groups_with_open_brace_and_close_brace_and_spaces = paren_groups_with_open_brace_and_close_braces.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_open_brace_and_close_brace_and_spaces_and_parentheses\
    \ = paren_groups_with_open_brace_and_close_brace_and_spaces.map(x => x.replace(\"\
    )\", \"\"))\n        val paren_groups_with_open_brace_and_close_brace_and_spaces_and_parentheses_and_parentheses\
    \ = paren_groups_with_open_brace_and_close_brace_and_spaces_and_parentheses.map(x\
    \ => x.replace(\"(\", \"\"))\n        val paren_groups_with_open_brace_and_close_brace_and_spaces_and_parentheses_and_parentheses_and_parentheses\
    \ = paren_groups_with_open_brace_and_close_brace_and_spaces_and_parentheses_and_parentheses.map(x\
    \ => x.replace(\")\", \"\"))\n        val paren_groups_with_open_brace_and_close_brace_and_spaces_and_parentheses_and_parentheses_and_parentheses_and_parentheses\
    \ = paren_groups_with_open_brace_and_close_brace_and_spaces_and_parentheses_and_parentheses_and_parentheses.map(x\
    \ => x.replace(\"(\", \"\"))\n        val paren_groups_with_open_brace_and_close_brace_and_spaces_and_parentheses_and_parentheses_and_parentheses_and_parentheses_and_parentheses\
    \ = paren_groups_with_open_brace_and_close_brace_and_spaces_and_parentheses_and_parentheses_and_parentheses_and_parentheses.map(x\
    \ => x.replace(\")\", \"\"))\n        val paren_groups_with_open_brace_and_close_brace_and_spaces_and_parentheses_and_parentheses_and_parentheses_and_parentheses_and_parentheses\
    \ = paren_groups_with_open_brace_and_close_brace_and_spaces_and_parentheses_and_parentheses_and_parentheses_and_parentheses.map(x\
    \ => x.replace(\"(\", \"\"))\n        val paren_groups_with_open_brace_and_close_brace_and_spaces_and_parentheses_and_parentheses_and_parentheses_and_parentheses_and_parentheses_and_parentheses\
    \ = paren_groups_with_open_brace_and_close_brace_and_spaces_and_parentheses_and_parentheses_and_parenthese\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp0i6utoo.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_open_brace_and_close_brace_and_spaces_and_parentheses_and_parentheses_and_parentheses_and_parentheses_and_parentheses\e\
    [0m = paren_groups_with_open_brace_and_close_brace_and_spaces_and_parentheses_and_parentheses_and_parentheses_and_parentheses.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"(\"\e[0m, \e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_with_open_brace_and_close_brace_and_spaces_and_parentheses_and_parentheses_and_parentheses_and_parentheses_and_parentheses\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_open_brace_and_close_brace_and_spaces_and_parentheses_and_parentheses_and_parentheses_and_parentheses_and_parentheses\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpp0i6utoo.scala:22:166 -----------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_open_brace_and_close_brace_and_spaces_and_parentheses_and_parentheses_and_parentheses_and_parentheses_and_parentheses_and_parentheses\e\
    [0m = paren_groups_with_open_brace_and_close_brace_and_spaces_and_parentheses_and_parentheses_and_parenthese\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_open_brace_and_close_brace_and_spaces_and_parentheses_and_pa"
  stdout: ''
  timestamp: 1659795589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_group_count = paren_groups.length\n        val paren_group_lengths\
    \ = paren_groups.map(_.length).toArray\n        val paren_group_lengths_sum =\
    \ paren_group_lengths.sum\n        val paren_group_lengths_product = paren_group_lengths.product\n\
    \        val paren_group_lengths_product2 = paren_group_lengths_product * paren_group_lengths_product\n\
    \        val paren_group_lengths_product3 = paren_group_lengths_product2 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product4 = paren_group_lengths_product3 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product5 = paren_group_lengths_product4 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product6 = paren_group_lengths_product5 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product7 = paren_group_lengths_product6 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product8 = paren_group_lengths_product7 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product9 = paren_group_lengths_product8 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product10 = paren_group_lengths_product9 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product11 = paren_group_lengths_product10 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product12 = paren_group_lengths_product11 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product13 = paren_group_lengths_product12 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product14 = paren_group_lengths_product13 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product15 = paren_group_lengths_product14 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product16 = paren_group_lengths_product15 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product17 = paren_group_lengths_product16 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product18 = paren_group_lengths_product17 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product19 = paren_group_lengths_product18 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkej1o48j.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpkej1o48j.scala:35:5 ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_closed\
    \ = mutable.ListBuffer[String]()\n        val paren_open_size = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_size = mutable.ListBuffer[Int]()\n        val paren_open_depth\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_depth = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth_limit = mutable.ListBuffer[Int]()\n        val paren_closed_depth_limit\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpagujgaam.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpagujgaam.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_open_depth_limit_reached\e[0m = mutable.ListBuffer[\e[35mBoolean\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_open_depth_limit_reached is already defined as \e[33mvalue\e\
    [0m \e[35mparen_open_depth_limit_reached\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpagujgaam.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mparen_closed_depth_limit_reached\e\
    [0m = mutable.ListBuffer[\e[35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_closed_depth_limit_reached is already defined as \e\
    [33mvalue\e[0m \e[35mparen_closed_depth_limit_reached\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpagujgaam.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_open_depth_limit_reached\e[0m = mutable.ListBuffer[\e[35mBoolean\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_open_depth_limit_reached is already defined as \e[33mvalue\e\
    [0m \e[35mparen_open_depth_limit_reached\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpagujgaam.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mparen_closed_depth_limit_reached\e\
    [0m = mutable.ListBuffer[\e[3"
  stdout: ''
  timestamp: 1659795586
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.filter(_ != \")\")\n        val paren_groups_flat3 = paren_groups_flat2.filter(_\
    \ != \")\")\n        val paren_groups_flat4 = paren_groups_flat3.filter(_ != \"\
    )\")\n        val paren_groups_flat5 = paren_groups_flat4.filter(_ != \")\")\n\
    \        val paren_groups_flat6 = paren_groups_flat5.filter(_ != \")\")\n    \
    \    val paren_groups_flat7 = paren_groups_flat6.filter(_ != \")\")\n        val\
    \ paren_groups_flat8 = paren_groups_flat7.filter(_ != \")\")\n        val paren_groups_flat9\
    \ = paren_groups_flat8.filter(_ != \")\")\n        val paren_groups_flat10 = paren_groups_flat9.filter(_\
    \ != \")\")\n        val paren_groups_flat11 = paren_groups_flat10.filter(_ !=\
    \ \")\")\n        val paren_groups_flat12 = paren_groups_flat11.filter(_ != \"\
    )\")\n        val paren_groups_flat13 = paren_groups_flat12.filter(_ != \")\"\
    )\n        val paren_groups_flat14 = paren_groups_flat13.filter(_ != \")\")\n\
    \        val paren_groups_flat15 = paren_groups_flat14.filter(_ != \")\")\n  \
    \      val paren_groups_flat16 = paren_groups_flat15.filter(_ != \")\")\n    \
    \    val paren_groups_flat17 = paren_groups_flat16.filter(_ != \")\")\n      \
    \  val paren_groups_flat18 = paren_groups_flat17.filter(_ != \")\")\n        val\
    \ paren_groups_flat19 = paren_groups_flat18.filter(_ != \")\")\n        val paren_groups_flat20\
    \ = paren_groups_flat19.filter(_ != \")\")\n        val paren_groups_flat21 =\
    \ paren_groups_flat20.filter(_ != \")\")\n        val paren_groups_flat22 = paren_groups_flat21.filter(_\
    \ != \")\")\n        val paren_groups_flat23 = paren_groups_flat22.filter(_ !=\
    \ \")\")\n        val paren_groups_flat24 = paren_groups_flat23.filter(_ != \"\
    )\")\n        val paren_groups_flat25 = paren_groups_flat24.filter(_ != \")\"\
    )\n        val paren_groups_flat26 = paren_groups_flat25.filter(_ != \")\")\n\
    \        val paren_groups_flat27 = paren_groups_flat26.filter(_ != \")\")\n  \
    \      val paren\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3qio8tty.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmp3qio8tty.scala:13:58\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m13 |\e[0m       \
    \ \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m = paren_groups_flat.filter(_ !=\
    \ \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m                                   \
    \                       ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp3qio8tty.scala:14:59\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m14 |\e[0m       \
    \ \e[33mval\e[0m \e[36mparen_groups_flat3\e[0m = paren_groups_flat2.filter(_ !=\
    \ \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m                                   \
    \                        ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp3qio8tty.scala:15:59\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m15 |\e[0m       \
    \ \e[33mval\e[0m \e[36mparen_groups_flat4\e[0m = paren_groups_flat3.filter(_ !=\
    \ \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m                                   \
    \                        ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp3qio8tty.scala:16:59\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m16 |\e[0m       \
    \ \e[33mval\e[0m \e[36mparen_groups_flat5\e[0m = paren_groups_flat4.filter(_ !=\
    \ \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m                                   \
    \                        ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp3qio8tty.scala:17:59\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m17 |\e[0m       \
    \ \e[33mval\e[0m \e[36mparen_groups_flat6\e[0m = paren_groups_flat5.filter(_ !=\
    \ \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m                                   \
    \                        ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Valu"
  stdout: ''
  timestamp: 1659795590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpfe4904sc.scala:21:338 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpfe4904sc.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpfe4904sc.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1659795587
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.filter(_ != \")\")\n        val paren_groups_flat3 = paren_groups_flat2.filter(_\
    \ != \")\")\n        val paren_groups_flat4 = paren_groups_flat3.filter(_ != \"\
    )\")\n        val paren_groups_flat5 = paren_groups_flat4.filter(_ != \")\")\n\
    \        val paren_groups_flat6 = paren_groups_flat5.filter(_ != \")\")\n    \
    \    val paren_groups_flat7 = paren_groups_flat6.filter(_ != \")\")\n        val\
    \ paren_groups_flat8 = paren_groups_flat7.filter(_ != \")\")\n        val paren_groups_flat9\
    \ = paren_groups_flat8.filter(_ != \")\")\n        val paren_groups_flat10 = paren_groups_flat9.filter(_\
    \ != \")\")\n        val paren_groups_flat11 = paren_groups_flat10.filter(_ !=\
    \ \")\")\n        val paren_groups_flat12 = paren_groups_flat11.filter(_ != \"\
    )\")\n        val paren_groups_flat13 = paren_groups_flat12.filter(_ != \")\"\
    )\n        val paren_groups_flat14 = paren_groups_flat13.filter(_ != \")\")\n\
    \        val paren_groups_flat15 = paren_groups_flat14.filter(_ != \")\")\n  \
    \      val paren_groups_flat16 = paren_groups_flat15.filter(_ != \")\")\n    \
    \    val paren_groups_flat17 = paren_groups_flat16.filter(_ != \")\")\n      \
    \  val paren_groups_flat18 = paren_groups_flat17.filter(_ != \")\")\n        val\
    \ paren_groups_flat19 = paren_groups_flat18.filter(_ != \")\")\n        val paren_groups_flat20\
    \ = paren_groups_flat19.filter(_ != \")\")\n        val paren_groups_flat21 =\
    \ paren_groups_flat20.filter(_ != \")\")\n        val paren_groups_flat22 = paren_groups_flat21.filter(_\
    \ != \")\")\n        val paren_groups_flat23 = paren_groups_flat22.filter(_ !=\
    \ \")\")\n        val paren_groups_flat24 = paren_groups_flat23.filter(_ != \"\
    )\")\n        val paren_groups_flat25 = paren_groups_flat24.filter(_ != \")\"\
    )\n        val paren_groups_flat26 = paren_groups_flat25.filter(_ != \")\")\n\
    \        val paren_groups_flat27 = paren_groups_flat26.filter(_ != \")\")\n  \
    \      val paren\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3qio8tty.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmp3qio8tty.scala:13:58\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m13 |\e[0m       \
    \ \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m = paren_groups_flat.filter(_ !=\
    \ \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m                                   \
    \                       ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp3qio8tty.scala:14:59\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m14 |\e[0m       \
    \ \e[33mval\e[0m \e[36mparen_groups_flat3\e[0m = paren_groups_flat2.filter(_ !=\
    \ \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m                                   \
    \                        ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp3qio8tty.scala:15:59\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m15 |\e[0m       \
    \ \e[33mval\e[0m \e[36mparen_groups_flat4\e[0m = paren_groups_flat3.filter(_ !=\
    \ \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m                                   \
    \                        ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp3qio8tty.scala:16:59\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m16 |\e[0m       \
    \ \e[33mval\e[0m \e[36mparen_groups_flat5\e[0m = paren_groups_flat4.filter(_ !=\
    \ \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m                                   \
    \                        ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp3qio8tty.scala:17:59\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m17 |\e[0m       \
    \ \e[33mval\e[0m \e[36mparen_groups_flat6\e[0m = paren_groups_flat5.filter(_ !=\
    \ \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m                                   \
    \                        ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Valu"
  stdout: ''
  timestamp: 1659795590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_trimmed = paren_groups_with_spaces.map(x\
    \ => x.trim())\n        val paren_groups_with_spaces_trimmed_sorted = paren_groups_with_spaces_trimmed.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_trimmed_sorted_reversed = paren_groups_with_spaces_trimmed_sorted.reverse\n\
    \        val paren_groups_with_spaces_trimmed_sorted_reversed_trimmed = paren_groups_with_spaces_trimmed_sorted_reversed.map(x\
    \ => x.trim())\n        val paren_groups_with_spaces_trimmed_sorted_reversed_trimmed_sorted\
    \ = paren_groups_with_spaces_trimmed_sorted_reversed_trimmed.sortBy(x => x)\n\
    \        val paren_groups_with_spaces_trimmed_sorted_reversed_trimmed_sorted_reversed\
    \ = paren_groups_with_spaces_trimmed_sorted_reversed_trimmed_sorted.reverse\n\
    \        val paren_groups_with_spaces_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed\
    \ = paren_groups_with_spaces_trimmed_sorted_reversed_trimmed_sorted_reversed.map(x\
    \ => x.trim())\n        val paren_groups_with_spaces_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed_sorted\
    \ = paren_groups_with_spaces_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed_sorted_reversed\
    \ = paren_groups_with_spaces_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed_sorted_reversed.map(x\
    \ => x.trim())\n        val paren_groups_with_spaces_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed\
    \ = paren_groups_with_spaces_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed_sorted.map(x\
    \ => x.trim())\n        val paren_groups_with_spaces_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed_sorted_reversed\
    \ = paren_groups_with_spaces_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed_sorted.map(x\
    \ => x.trim())\n        val paren_groups_with_spaces_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed_sorted_reversed_trim\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpm2n17f74.scala:25:4 ----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpm2n17f74.scala:21:111\
    \ --------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed_sorted_reversed\e\
    [0m = paren_groups_with_spaces_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed_sorted_reversed.map(\e\
    [36mx\e[0m => x.trim())\n\e[31m\e[31m   |\e[0m                               \
    \                                                                            \
    \    ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m\
    \  paren_groups_with_spaces_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed_sorted_reversed\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpm2n17f74.scala:22:119 -----------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed\e\
    [0m = paren_groups_with_spaces_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed_sorted.map(\e\
    [36mx\e[0m => x.trim())\n\e[31m\e[31m   |\e[0m                               \
    \                                                                            \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_spaces_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed_sorted\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm2n17f74.scala:23:135\
    \ -----------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_with_spaces_trimmed_sorted_reversed_trimmed_sorted_reversed_trimme"
  stdout: ''
  timestamp: 1659795587
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpfe4904sc.scala:21:338 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpfe4904sc.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpfe4904sc.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1659795587
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_size = paren_groups.length\n        val paren_groups_size_list\
    \ = paren_groups_size.map(x => List(x))\n        val paren_groups_size_list =\
    \ paren_groups_size.map(x => List(x))\n        val paren_groups_size_list = paren_groups_size.map(x\
    \ => List(x))\n        val paren_groups_size_list = paren_groups_size.map(x =>\
    \ List(x))\n        val paren_groups_size_list = paren_groups_size.map(x => List(x))\n\
    \        val paren_groups_size_list = paren_groups_size.map(x => List(x))\n  \
    \      val paren_groups_size_list = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list = paren_groups_size.map(x => List(x))\n      \
    \  val paren_groups_size_list = paren_groups_size.map(x => List(x))\n        val\
    \ paren_groups_size_list = paren_groups_size.map(x => List(x))\n        val paren_groups_size_list\
    \ = paren_groups_size.map(x => List(x))\n        val paren_groups_size_list =\
    \ paren_groups_size.map(x => List(x))\n        val paren_groups_size_list = paren_groups_size.map(x\
    \ => List(x))\n        val paren_groups_size_list = paren_groups_size.map(x =>\
    \ List(x))\n        val paren_groups_size_list = paren_groups_size.map(x => List(x))\n\
    \        val paren_groups_size_list = paren_groups_size.map(x => List(x))\n  \
    \      val paren_groups_size_list = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list = paren_groups_size.map(x => List(x))\n      \
    \  val paren_groups_size_list = paren_groups_size.map(x => List(x))\n        val\
    \ paren_groups_size_list = paren_groups_size.map(x => List(x))\n        val paren_groups_size_list\
    \ = paren_groups_size.map(x => List(x))\n        val paren_groups_size_list =\
    \ paren_groups_size.map(x => List(x))\n        val paren_groups_size_list = paren_groups_size.map(x\
    \ => List(x))\n        val paren_groups_size_list = paren_groups_size.map(x =>\
    \ List(x))\n        val paren_groups_size_list = paren_groups_size.map(x => List(x))\n\
    \        val paren_groups_size_list = paren_groups_size.map(x => List(x))\n  \
    \      val paren_groups_size_list = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list = paren_groups_size.map(x => List(x))\n      \
    \  val paren_groups_size_list = paren_groups_size.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpa7ox2h59.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpa7ox2h59.scala:14:12 ---------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_size_list\e[0m = paren_groups_size.map(\e\
    [36mx\e[0m => List(x))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_size_list is already defined as \e[33mvalue\e\
    [0m \e[35mparen_groups_size_list\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa7ox2h59.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_size_list\e\
    [0m = paren_groups_size.map(\e[36mx\e[0m => List(x))\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mparen_groups_size_list is already defined as \e[33mvalue\e[0m \e\
    [35mparen_groups_size_list\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpa7ox2h59.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_size_list\e\
    [0m = paren_groups_size.map(\e[36mx\e[0m => List(x))\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mparen_groups_size_list is already defined as \e[33mvalue\e[0m \e\
    [35mparen_groups_size_list\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpa7ox2h59.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_size_list\e\
    [0m = paren_groups_size.map(\e[36mx\e[0m => List(x))\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659795588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(|\\\\)\")\n        val paren_groups_set = paren_groups.toSet\n        val\
    \ paren_groups_list_with_duplicates = paren_groups.toList.distinct\n        val\
    \ paren_groups_list_without_duplicates = paren_groups_list_with_duplicates.toList\n\
    \        val paren_groups_list_without_duplicates_sorted = paren_groups_list_without_duplicates.sortBy(_.length)\n\
    \        val paren_groups_list_without_duplicates_sorted_reversed = paren_groups_list_without_duplicates_sorted.reverse\n\
    \        val paren_groups_list_without_duplicates_sorted_reversed_sorted = paren_groups_list_without_duplicates_sorted_reversed.sortBy(_.length)\n\
    \        val paren_groups_list_without_duplicates_sorted_reversed_sorted_with_duplicates\
    \ = paren_groups_list_without_duplicates_sorted_reversed_sorted.distinct\n   \
    \     val paren_groups_list_without_duplicates_sorted_reversed_sorted_with_duplicates_sorted\
    \ = paren_groups_list_without_duplicates_sorted_reversed_sorted_with_duplicates.sortBy(_.length)\n\
    \        val paren_groups_list_without_duplicates_sorted_reversed_sorted_with_duplicates_sorted_reversed\
    \ = paren_groups_list_without_duplicates_sorted_reversed_sorted_with_duplicates_sorted.reverse\n\
    \        val paren_groups_list_without_duplicates_sorted_reversed_sorted_with_duplicates_sorted_reversed_sorted\
    \ = paren_groups_list_without_duplicates_sorted_reversed_sorted_with_duplicates_sorted_reversed.sortBy(_.length)\n\
    \        val paren_groups_list_without_duplicates_sorted_reversed_sorted_with_duplicates_sorted_reversed_sorted_with_duplicates\
    \ = paren_groups_list_without_duplicates_sorted_reversed_sorted_with_duplicates_sorted_reversed_sorted.distinct\n\
    \        val paren_groups_list_without_duplicates_sorted_reversed_sorted_with_duplicates_sorted_reversed_sorted_with_duplicates_sorted\
    \ = paren_groups_list_without_duplicates_sorted_reversed_sorted_with_duplicates_sorted_reversed_sorted_with_duplicates.sortBy(_.length)\n\
    \        val paren_groups_list_without_duplicates_sorted_reversed_sorted_with_duplicates_sorted_reversed_sorted_with_duplicates_sorted_reversed\
    \ = paren_groups_list_without_duplicates_sorted_reversed_sorted_with_duplicates_sorted_reversed_sorted_with_duplicates_sorted.reverse\n\
    \        val paren_groups_list_without_duplicates_sorted_reversed_sorted_with_duplicates_sorted_reversed_sorted_with_duplicates_sorted_reversed_sorted\
    \ = paren_groups_list_without_duplicates_sorted_reversed_sorted_with_duplicates_sorted_reversed_sorted_with_duplicates_sorted_reversed.sortBy(_.length)\n\
    \        val paren_groups_list_without_duplicates_sorted_reversed_sorted_with_duplicates_sorted_reversed_sorted_with_duplicates_sorted_reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkxqvbzdp.scala:27:4 ----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpkxqvbzdp.scala:27:5 ---------------------\e[0m\e[0m\n\e[31m27 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795587
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_size = paren_groups.length\n        val paren_groups_size_remainder\
    \ = paren_groups_size % 2\n        val paren_groups_size_remainder_size = paren_groups_size_remainder\
    \ + 1\n        val paren_groups_size_remainder_size2 = paren_groups_size_remainder_size\
    \ * 2\n        val paren_groups_size_remainder_size3 = paren_groups_size_remainder_size2\
    \ * 2\n        val paren_groups_size_remainder_size4 = paren_groups_size_remainder_size3\
    \ * 2\n        val paren_groups_size_remainder_size5 = paren_groups_size_remainder_size4\
    \ * 2\n        val paren_groups_size_remainder_size6 = paren_groups_size_remainder_size5\
    \ * 2\n        val paren_groups_size_remainder_size7 = paren_groups_size_remainder_size6\
    \ * 2\n        val paren_groups_size_remainder_size8 = paren_groups_size_remainder_size7\
    \ * 2\n        val paren_groups_size_remainder_size9 = paren_groups_size_remainder_size8\
    \ * 2\n        val paren_groups_size_remainder_size10 = paren_groups_size_remainder_size9\
    \ * 2\n        val paren_groups_size_remainder_size11 = paren_groups_size_remainder_size10\
    \ * 2\n        val paren_groups_size_remainder_size12 = paren_groups_size_remainder_size11\
    \ * 2\n        val paren_groups_size_remainder_size13 = paren_groups_size_remainder_size12\
    \ * 2\n        val paren_groups_size_remainder_size14 = paren_groups_size_remainder_size13\
    \ * 2\n        val paren_groups_size_remainder_size15 = paren_groups_size_remainder_size14\
    \ * 2\n        val paren_groups_size_remainder_size16 = paren_groups_size_remainder_size15\
    \ * 2\n        val paren_groups_size_remainder_size17 = paren_groups_size_remainder_size16\
    \ * 2\n        val paren_groups_size_remainder_size18 = paren_groups_size_remainder_size17\
    \ * 2\n        val paren_groups_size_remainder_size19 = paren_groups_size_remainder_size18\
    \ * 2\n        val paren_groups_size_remainder_size20 = paren_groups_size_remainder_size19\
    \ * 2\n        val paren_groups_size_remainder_size21 = paren_groups_\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()())\
    \ ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\"\
    , \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbkrte41v.scala:34:49 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_size_remainder_size21\e\
    [0m = paren_groups_\n\e[31m\e[31m   |\e[0m                                   \
    \              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \                     Not found: paren_groups_\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpbkrte41v.scala:35:5 ---------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659795587
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").map(_.trim).toList\n        val open_paren_groups = paren_groups.filter(_.startsWith(\"\
    (\"))\n        val close_paren_groups = paren_groups.filter(_.endsWith(\")\"))\n\
    \        val open_paren_groups_count = open_paren_groups.length\n        val close_paren_groups_count\
    \ = close_paren_groups.length\n        val open_paren_groups_count = open_paren_groups.length\n\
    \        val close_paren_groups_count = close_paren_groups.length\n        val\
    \ open_paren_groups_count = open_paren_groups.length\n        val close_paren_groups_count\
    \ = close_paren_groups.length\n        val open_paren_groups_count = open_paren_groups.length\n\
    \        val close_paren_groups_count = close_paren_groups.length\n        val\
    \ open_paren_groups_count = open_paren_groups.length\n        val close_paren_groups_count\
    \ = close_paren_groups.length\n        val open_paren_groups_count = open_paren_groups.length\n\
    \        val close_paren_groups_count = close_paren_groups.length\n        val\
    \ open_paren_groups_count = open_paren_groups.length\n        val close_paren_groups_count\
    \ = close_paren_groups.length\n        val open_paren_groups_count = open_paren_groups.length\n\
    \        val close_paren_groups_count = close_paren_groups.length\n        val\
    \ open_paren_groups_count = open_paren_groups.length\n        val close_paren_groups_count\
    \ = close_paren_groups.length\n        val open_paren_groups_count = open_paren_groups.length\n\
    \        val close_paren_groups_count = close_paren_groups.length\n        val\
    \ open_paren_groups_count = open_paren_groups.length\n        val close_paren_groups_count\
    \ = close_paren_groups.length\n        val open_paren_groups_count = open_paren_groups.length\n\
    \        val close_paren_groups_count = close_paren_groups.length\n        val\
    \ open_paren_groups_count = open_paren_groups.length\n        val close_paren_groups_count\
    \ = close_paren_groups.length\n        val open_paren_groups_count = open_paren_groups.length\n\
    \        val close_paren_groups_count = close_paren_groups.length\n        val\
    \ open_paren_groups_count = open_paren_groups.length\n        val close_paren_groups_count\
    \ = close_paren_groups.length\n        val open_paren_groups_count = open_paren_groups.length\n\
    \        val close_paren_groups_count = close_paren_groups.length\n        val\
    \ open_paren_groups_count = open_paren_groups.length\n        val close_paren_groups_count\
    \ = close_paren_groups.length\n        val open_paren_groups_count = open_paren_groups.length\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpd0z9bto4.scala:49:11 ---------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpd0z9bto4.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mopen_paren_groups_count\e\
    [0m = open_paren_groups.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopen_paren_groups_count is already defined as \e[33mvalue\e\
    [0m \e[35mopen_paren_groups_count\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd0z9bto4.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mclose_paren_groups_count\e\
    [0m = close_paren_groups.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclose_paren_groups_count is already defined as \e[33mvalue\e\
    [0m \e[35mclose_paren_groups_count\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd0z9bto4.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mopen_paren_groups_count\e\
    [0m = open_paren_groups.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopen_paren_groups_count is already defined as \e[33mvalue\e\
    [0m \e[35mopen_paren_groups_count\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd0z9bto4.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mclose_paren_groups_count\e\
    [0m = close_paren_groups.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659795587
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatMap(x => x.split(\"\
    \\\\)\"))\n        val paren_groups_flat2 = paren_groups_flat.flatMap(x => x.split(\"\
    \\\\)\"))\n        val paren_groups_flat3 = paren_groups_flat2.flatMap(x => x.split(\"\
    \\\\)\"))\n        val paren_groups_flat4 = paren_groups_flat3.flatMap(x => x.split(\"\
    \\\\)\"))\n        val paren_groups_flat5 = paren_groups_flat4.flatMap(x => x.split(\"\
    \\\\)\"))\n        val paren_groups_flat6 = paren_groups_flat5.flatMap(x => x.split(\"\
    \\\\)\"))\n        val paren_groups_flat7 = paren_groups_flat6.flatMap(x => x.split(\"\
    \\\\)\"))\n        val paren_groups_flat8 = paren_groups_flat7.flatMap(x => x.split(\"\
    \\\\)\"))\n        val paren_groups_flat9 = paren_groups_flat8.flatMap(x => x.split(\"\
    \\\\)\"))\n        val paren_groups_flat10 = paren_groups_flat9.flatMap(x => x.split(\"\
    \\\\)\"))\n        val paren_groups_flat11 = paren_groups_flat10.flatMap(x =>\
    \ x.split(\"\\\\)\"))\n        val paren_groups_flat12 = paren_groups_flat11.flatMap(x\
    \ => x.split(\"\\\\)\"))\n        val paren_groups_flat13 = paren_groups_flat12.flatMap(x\
    \ => x.split(\"\\\\)\"))\n        val paren_groups_flat14 = paren_groups_flat13.flatMap(x\
    \ => x.split(\"\\\\)\"))\n        val paren_groups_flat15 = paren_groups_flat14.flatMap(x\
    \ => x.split(\"\\\\)\"))\n        val paren_groups_flat16 = paren_groups_flat15.flatMap(x\
    \ => x.split(\"\\\\)\"))\n        val paren_groups_flat17 = paren_groups_flat16.flatMap(x\
    \ => x.split(\"\\\\)\"))\n        val paren_groups_flat18 = paren_groups_flat17.flatMap(x\
    \ => x.split(\"\\\\)\"))\n        val paren_groups_flat19 = paren_groups_flat18.flatMap(x\
    \ => x.split(\"\\\\)\"))\n        val paren_groups_flat20 = paren_groups_flat19.flatMap(x\
    \ => x.split(\"\\\\)\"))\n        val paren_groups_flat21 = paren_groups_flat20.flatMap(x\
    \ => x.split(\"\\\\)\"))\n        val paren_groups_flat22 = paren_groups_flat21.flatMap(x\
    \ => x.split(\"\\\\)\"))\n        val paren_groups_flat\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9ychiphr.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp9ychiphr.scala:35:5 ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.filterNot(_ == \")\")\n        val paren_groups_flat3 =\
    \ paren_groups_flat2.filterNot(_ == \"(\")\n        val paren_groups_flat4 = paren_groups_flat3.filterNot(_\
    \ == \" \")\n        val paren_groups_flat5 = paren_groups_flat4.filterNot(_ ==\
    \ \"\\\\\")\n        val paren_groups_flat6 = paren_groups_flat5.filterNot(_ ==\
    \ \"\\\"\")\n        val paren_groups_flat7 = paren_groups_flat6.filterNot(_ ==\
    \ \"'\")\n        val paren_groups_flat8 = paren_groups_flat7.filterNot(_ == \"\
    \\n\")\n        val paren_groups_flat9 = paren_groups_flat8.filterNot(_ == \"\\\
    r\")\n        val paren_groups_flat10 = paren_groups_flat9.filterNot(_ == \"\\\
    t\")\n        val paren_groups_flat11 = paren_groups_flat10.filterNot(_ == \"\\\
    r\\n\")\n        val paren_groups_flat12 = paren_groups_flat11.filterNot(_ ==\
    \ \"\\t\\r\")\n        val paren_groups_flat13 = paren_groups_flat12.filterNot(_\
    \ == \"\\r\\t\")\n        val paren_groups_flat14 = paren_groups_flat13.filterNot(_\
    \ == \"\\t\\r\\n\")\n        val paren_groups_flat15 = paren_groups_flat14.filterNot(_\
    \ == \"\\r\\t\\r\")\n        val paren_groups_flat16 = paren_groups_flat15.filterNot(_\
    \ == \"\\r\\t\\r\\n\")\n        val paren_groups_flat17 = paren_groups_flat16.filterNot(_\
    \ == \"\\r\\t\\r\\t\")\n        val paren_groups_flat18 = paren_groups_flat17.filterNot(_\
    \ == \"\\r\\t\\r\\t\\n\")\n        val paren_groups_flat19 = paren_groups_flat18.filterNot(_\
    \ == \"\\r\\t\\r\\t\\r\")\n        val paren_groups_flat20 = paren_groups_flat19.filterNot(_\
    \ == \"\\r\\t\\r\\t\\r\\n\")\n        val paren_groups_flat21 = paren_groups_flat20.filterNot(_\
    \ == \"\\r\\t\\r\\t\\r\\t\")\n        val paren_groups_flat22 = paren_groups_flat21.filterNot(_\
    \ == \"\\r\\t\\r\\t\\r\\t\\n\")\n        val paren_groups_flat23 = paren_groups_flat22.filterNot(_\
    \ == \"\\r\\t\\r\\t\\r\\t\\r\")\n        val \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpv3ycq8qo.scala:35:11 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- Error: /tmp/tmpv3ycq8qo.scala:13:61 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m\
    \ = paren_groups_flat.filterNot(_ == \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                             ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types Char and String cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- Error: /tmp/tmpv3ycq8qo.scala:14:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat3\e[0m\
    \ = paren_groups_flat2.filterNot(_ == \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmpv3ycq8qo.scala:15:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat4\e[0m\
    \ = paren_groups_flat3.filterNot(_ == \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmpv3ycq8qo.scala:16:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat5\e[0m\
    \ = paren_groups_flat4.filterNot(_ == \e[31m\"\\\\\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                              ^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmpv3ycq8qo.scala:17:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat6\e[0m\
    \ = paren_groups_flat5.filterNo"
  stdout: ''
  timestamp: 1659795590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_group_open = mutable.ListBuffer[String]()\n        val paren_group_closed\
    \ = mutable.ListBuffer[String]()\n        val paren_group_open_index = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closed_index = mutable.ListBuffer[Int]()\n        val\
    \ paren_group_open_index2 = mutable.ListBuffer[Int]()\n        val paren_group_closed_index2\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_index3 = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closed_index3 = mutable.ListBuffer[Int]()\n        val\
    \ paren_group_open_index4 = mutable.ListBuffer[Int]()\n        val paren_group_closed_index4\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_index5 = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closed_index5 = mutable.ListBuffer[Int]()\n        val\
    \ paren_group_open_index6 = mutable.ListBuffer[Int]()\n        val paren_group_closed_index6\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_index7 = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closed_index7 = mutable.ListBuffer[Int]()\n        val\
    \ paren_group_open_index8 = mutable.ListBuffer[Int]()\n        val paren_group_closed_index8\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_index9 = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closed_index9 = mutable.ListBuffer[Int]()\n        val\
    \ paren_group_open_index10 = mutable.ListBuffer[Int]()\n        val paren_group_closed_index10\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_index11 = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closed_index11 = mutable.ListBuffer[Int]()\n        val\
    \ paren_group_open_index12 = mutable.ListBuffer[Int]()\n        val paren_group_closed_index12\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_index13 = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closed_index13 = mutable.ListBuffer[Int]()\n        val\
    \ paren_group_open_index14 = mut\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptehnlejf.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptehnlejf.scala:12:31 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_group_open\e[0m =\
    \ mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptehnlejf.scala:13:33\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_group_closed\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                                 ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                               Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmptehnlejf.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_group_open_index\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmptehnlejf.scala:15:39 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_group_closed_index\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                                       ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation avai"
  stdout: ''
  timestamp: 1659795587
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.filterNot(_ == \")\")\n        val paren_groups_flat3 =\
    \ paren_groups_flat2.filterNot(_ == \")(\")\n        val paren_groups_flat4 =\
    \ paren_groups_flat3.filterNot(_ == \")()\")\n        val paren_groups_flat5 =\
    \ paren_groups_flat4.filterNot(_ == \")()()\")\n        val paren_groups_flat6\
    \ = paren_groups_flat5.filterNot(_ == \")()()()\")\n        val paren_groups_flat7\
    \ = paren_groups_flat6.filterNot(_ == \")()()()()\")\n        val paren_groups_flat8\
    \ = paren_groups_flat7.filterNot(_ == \")()()()()()\")\n        val paren_groups_flat9\
    \ = paren_groups_flat8.filterNot(_ == \")()()()()()()\")\n        val paren_groups_flat10\
    \ = paren_groups_flat9.filterNot(_ == \")()()()()()()()()\")\n        val paren_groups_flat11\
    \ = paren_groups_flat10.filterNot(_ == \")()()()()()()()()()()\")\n        val\
    \ paren_groups_flat12 = paren_groups_flat11.filterNot(_ == \")()()()()()()()()()()()\"\
    )\n        val paren_groups_flat13 = paren_groups_flat12.filterNot(_ == \")()()()()()()()()()()()()()\"\
    )\n        val paren_groups_flat14 = paren_groups_flat13.filterNot(_ == \")()()()()()()()()()()()()()()()\"\
    )\n        val paren_groups_flat15 = paren_groups_flat14.filterNot(_ == \")()()()()()()()()()()()()()()()()\"\
    )\n        val paren_groups_flat16 = paren_groups_flat15.filterNot(_ == \")()()()()()()()()()()()()()()()()()\"\
    )\n        val paren_groups_flat17 = paren_groups_flat16.filterNot(_ == \")()()()()()()()()()()()()()()()()()()\"\
    )\n        val paren_groups_flat18 = paren_groups_flat17.filterNot(_ == \")()()()()()()()()()()()()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp7p4ifevs.scala:29:69 -----------------------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat18\e[0m\
    \ = paren_groups_flat17.filterNot(_ == \")()()()()()()()()()()()()\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \  ^\e[0m\n\e[31m   |\e[0m                                                 unclosed\
    \ string literal\n\e[31m\e[31m-- Error: /tmp/tmp7p4ifevs.scala:31:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                 end\
    \ of statement expected but '=' found\n\e[31m\e[31m-- Error: /tmp/tmp7p4ifevs.scala:13:61\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m13 |\e[0m       \
    \ \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m = paren_groups_flat.filterNot(_\
    \ == \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m                                \
    \                             ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of\
    \ types Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp7p4ifevs.scala:14:62 -----------------------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat3\e[0m = paren_groups_flat2.filterNot(_\
    \ == \e[31m\")(\"\e[0m)\n\e[31m\e[31m   |\e[0m                               \
    \                               ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp7p4ifevs.scala:15:62 -----------------------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat4\e[0m = paren_groups_flat3.filterNot(_\
    \ == \e[31m\")()\"\e[0m)\n\e[31m\e[31m   |\e[0m                              \
    \                                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp7p4ifevs.scala:16:62 -----------------------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        \e[33mval\e["
  stdout: ''
  timestamp: 1659795590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpfe4904sc.scala:21:338 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpfe4904sc.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpfe4904sc.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1659795587
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_group_strings = paren_groups.map(x => x.replace(\"\
    )\", \"\"))\n        val paren_group_strings_sorted = paren_group_strings.sortWith((x,\
    \ y) => x.compareTo(y) == -1)\n        val paren_group_strings_sorted_reversed\
    \ = paren_group_strings_sorted.reverse\n        val paren_group_strings_sorted_reversed_strings\
    \ = paren_group_strings_sorted_reversed.map(x => x.toString())\n        val paren_group_strings_sorted_reversed_strings_sorted\
    \ = paren_group_strings_sorted_reversed_strings.sortWith((x, y) => x.compareTo(y)\
    \ == -1)\n        val paren_group_strings_sorted_reversed_strings_sorted_strings\
    \ = paren_group_strings_sorted_reversed_strings_sorted.map(x => x.toString())\n\
    \        val paren_group_strings_sorted_reversed_strings_sorted_strings_sorted\
    \ = paren_group_strings_sorted_reversed_strings_sorted_strings.sortWith((x, y)\
    \ => x.compareTo(y) == -1)\n        val paren_group_strings_sorted_reversed_strings_sorted_strings_sorted_strings\
    \ = paren_group_strings_sorted_reversed_strings_sorted_strings_sorted.map(x =>\
    \ x.toString())\n        val paren_group_strings_sorted_reversed_strings_sorted_strings_sorted_strings_sorted\
    \ = paren_group_strings_sorted_reversed_strings_sorted_strings_sorted_strings.sortWith((x,\
    \ y) => x.compareTo(y) == -1)\n        val paren_group_strings_sorted_reversed_strings_sorted_strings_sorted_strings_sorted_strings\
    \ = paren_group_strings_sorted_reversed_strings_sorted_strings_sorted_strings_sorted.map(x\
    \ => x.toString())\n        val paren_group_strings_sorted_reversed_strings_sorted_strings_sorted_strings_sorted_strings_sorted\
    \ = paren_group_strings_sorted_reversed_strings_sorted_strings_sorted_strings_sorted_strings.sortWith((x,\
    \ y) => x.compareTo(y) == -1)\n        val paren_group_strings_sorted_reversed_strings_sorted_strings_sorted_strings_sorted_strings_sorted_strings\
    \ = paren_group_strings_sorted_reversed_strings_sorted_strings_sorted_strings_sorted_strings_sorted.map(x\
    \ => x.toString())\n        val paren_group_strings_sorted_reversed_strings_sorted_strings_sorted_strings_sorted_strings_sorted_strings_sorted\
    \ = paren_group_strings_sorted_reversed_strings_sorted_strings_sorted_strings_sorted_strings_sorted_strings.sortWith((x,\
    \ y) => x.compareTo(y) == -1)\n        val paren_group_strings_\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpc211cjnt.scala:26:4 ----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpc211cjnt.scala:26:5 ---------------------\e[0m\e[0m\n\e[31m26 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795587
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_group_size = mutable.ListBuffer[Int]()\n        paren_string.split(\"\
    \\\\(\").foreach(x => {\n            val paren_group_size = paren_group_size.updated(x.length,\
    \ 1)\n            paren_groups += x\n        })\n        paren_group_size.foreach(x\
    \ => {\n            val paren_group_size = paren_group_size.updated(x, 0)\n  \
    \          paren_groups += paren_group_size.last\n        })\n        paren_groups.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy0f41s4r.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy0f41s4r.scala:12:31 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_group_size\e[0m =\
    \ mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795583
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.filterNot(_ == \")\")\n        val paren_groups_flat3 =\
    \ paren_groups_flat2.filterNot(_ == \"(\")\n        val paren_groups_flat4 = paren_groups_flat3.filterNot(_\
    \ == \" \")\n        paren_groups_flat4.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpxct8guof.scala:13:61 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m\
    \ = paren_groups_flat.filterNot(_ == \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                             ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types Char and String cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- Error: /tmp/tmpxct8guof.scala:14:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat3\e[0m\
    \ = paren_groups_flat2.filterNot(_ == \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmpxct8guof.scala:15:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat4\e[0m\
    \ = paren_groups_flat3.filterNot(_ == \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxct8guof.scala:16:27\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        paren_groups_flat4.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \       Found:    List[\e[1m\e[31mChar\e[0m]\n\e[31m   |\e[0m        Required:\
    \ List[\e[1m\e[32mString\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659795589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val open_braces = mutable.ListBuffer[String]()\n        val close_braces\
    \ = mutable.ListBuffer[String]()\n        val open_brace_count = 0\n        val\
    \ close_brace_count = 0\n        val paren_open = mutable.ListBuffer[String]()\n\
    \        val paren_close = mutable.ListBuffer[String]()\n        val paren_open_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_close_size = mutable.ListBuffer[Int]()\n\
    \        val paren_open_count = mutable.ListBuffer[Int]()\n        val paren_close_count\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_size = paren_open_size.init\n\
    \        val paren_close_size = paren_close_size.init\n        val paren_open_count\
    \ = paren_open_count.init\n        val paren_close_count = paren_close_count.init\n\
    \        val paren_open = paren_open.init\n        val paren_close = paren_close.init\n\
    \        val paren_open_count = paren_open_count.init\n        val paren_close_count\
    \ = paren_close_count.init\n        val open_braces = open_braces.init\n     \
    \   val close_braces = close_braces.init\n        val paren_groups = paren_groups.init\n\
    \        val paren_group_size = paren_groups.init\n        val paren_group_size\
    \ = paren_group_size.init\n        val paren_groups = paren_groups.init\n    \
    \    val paren_group_size = paren_groups.init\n        val paren_group_size =\
    \ paren_group_size.init\n        val paren_groups = paren_groups.init\n      \
    \  val paren_group_size = paren_groups.init\n        val paren_group_size = paren_group_size.init\n\
    \        val paren_groups = paren_groups.init\n        val paren_group_size =\
    \ paren_groups.init\n        val paren_group_size = paren_group_size.init\n  \
    \      val paren_groups = paren_groups.init\n        val paren_group_size = paren_groups.init\n\
    \        val paren_group_size = paren_group_size.init\n        val paren_groups\
    \ = paren_groups.init\n        val paren_group_size = paren_groups.init\n    \
    \    val paren_group_size = paren_group_size.init\n        val paren_groups =\
    \ paren_groups.init\n        val paren_group_size = paren_groups.init\n      \
    \  val paren_group\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqtg2ggxm.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqtg2ggxm.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_open_size\e[0m = paren_open_size.init\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mparen_open_size\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_open_size\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqtg2ggxm.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_close_size\e[0m = paren_close_size.init\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mparen_close_size\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_close_size\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpqtg2ggxm.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_open_count\e[0m = paren_open_count.init\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mparen_open_count is already defined as \e[33mvalue\e[0m \e[35mparen_open_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqtg2ggxm.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mparen_close_count\e[0m = paren_close_count.init\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_close_count is already defined as \e[33mvalue\e[0m \e\
    [35mparen_close_count\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of to"
  stdout: ''
  timestamp: 1659795588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpfe4904sc.scala:21:338 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpfe4904sc.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpfe4904sc.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1659795587
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_group_count = paren_groups.length\n        val paren_groups_with_spaces\
    \ = paren_groups.map(x => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_count\
    \ = paren_groups_with_spaces.length\n        val paren_groups_with_spaces_with_brackets\
    \ = paren_groups_with_spaces.map(x => x.replace(\"(\", \"[ \"))\n        val paren_groups_with_spaces_with_brackets_count\
    \ = paren_groups_with_spaces_with_brackets.length\n        val paren_groups_with_spaces_with_brackets_with_brackets\
    \ = paren_groups_with_spaces_with_brackets.map(x => x.replace(\"[\", \"(\"))\n\
    \        val paren_groups_with_spaces_with_brackets_with_brackets_count = paren_groups_with_spaces_with_brackets_with_brackets.length\n\
    \        val paren_groups_with_spaces_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_spaces_with_brackets_with_brackets.map(x => x.replace(\"\
    )\", \" ] \"))\n        val paren_groups_with_spaces_with_brackets_with_brackets_with_brackets_count\
    \ = paren_groups_with_spaces_with_brackets_with_brackets_with_brackets.length\n\
    \        val paren_groups_with_spaces_with_brackets_with_brackets_with_brackets_with_brackets_count\
    \ = paren_groups_with_spaces_with_brackets_with_brackets_with_brackets_with_brackets.length\n\
    \        val paren_groups_with_spaces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_count\
    \ = paren_groups_with_spaces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu72sizob.scala:21:101 -----------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_with_brackets_with_brackets_with_brackets_with_brackets_count\e\
    [0m = paren_groups_with_spaces_with_brackets_with_brackets_with_brackets_with_brackets.length\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_spaces_with_brackets_with_brackets_with_brackets_with_brackets\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu72sizob.scala:22:115\
    \ -----------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_with_spaces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_count\e\
    [0m = paren_groups_with_spaces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_spaces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_w"
  stdout: ''
  timestamp: 1659795596
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        var paren_group_open = false\n        var paren_group_closed = false\n\
    \        var paren_group_opening_paren_count = 0\n        var paren_group_closing_paren_count\
    \ = 0\n        var paren_group_opening_paren_char = \"\"\n        var paren_group_closing_paren_char\
    \ = \"\"\n        var paren_group_opening_paren_char_index = 0\n        var paren_group_closing_paren_char_index\
    \ = 0\n        var paren_group_opening_paren_char_index = 0\n        var paren_group_closing_paren_char_index\
    \ = 0\n        var paren_group_opening_paren_char = \"\"\n        var paren_group_closing_paren_char\
    \ = \"\"\n        var paren_group_opening_paren_char_index = 0\n        var paren_group_closing_paren_char_index\
    \ = 0\n        var paren_group_opening_paren_char = \"\"\n        var paren_group_closing_paren_char\
    \ = \"\"\n        var paren_group_opening_paren_char_index = 0\n        var paren_group_closing_paren_char_index\
    \ = 0\n        var paren_group_opening_paren_char = \"\"\n        var paren_group_closing_paren_char\
    \ = \"\"\n        var paren_group_opening_paren_char_index = 0\n        var paren_group_closing_paren_char_index\
    \ = 0\n        var paren_group_opening_paren_char = \"\"\n        var paren_group_closing_paren_char\
    \ = \"\"\n        var paren_group_opening_paren_char_index = 0\n        var paren_group_closing_paren_char_index\
    \ = 0\n        var paren_group_opening_paren_char = \"\"\n        var paren_group_closing_paren_char\
    \ = \"\"\n        var paren_group_opening_paren_char_index = 0\n        var paren_group_closing_paren_char_index\
    \ = 0\n        var paren_group_opening_paren_char = \"\"\n        var paren_group_closing_paren_char\
    \ = \"\"\n        var paren_group_opening_paren_char_index = 0\n        var paren_group_closing_paren_char_index\
    \ = 0\n        var paren_group_opening_paren_char = \"\"\n        var paren_group_closing_paren_char\
    \ = \"\"\n        var paren_group_opening_paren_char_index = 0\n        var paren_group_closing_paren_char_index\
    \ = 0\n        var paren_group_opening_paren_char = \"\"\n        var paren_group_closing_paren_char\
    \ = \"\"\n        var paren_group_opening_paren_char_index = 0\n        var paren_group_closing_paren_char_index\
    \ = 0\n        var paren_group_opening_paren_char = \"\"\n        var paren_group_closing_paren_char\
    \ = \"\"\n        var paren\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5us5e5cu.scala:57:4 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5us5e5cu.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mparen_group_opening_paren_char_index\e[0m = \e[31m0\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mparen_group_opening_paren_char_index is already defined as \e[33mvariable\e\
    [0m \e[35mparen_group_opening_paren_char_index\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5us5e5cu.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mparen_group_closing_paren_char_index\e[0m = \e[31m0\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mparen_group_closing_paren_char_index is already defined as \e[33mvariable\e\
    [0m \e[35mparen_group_closing_paren_char_index\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5us5e5cu.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mparen_group_opening_paren_char\e[0m = \e[31m\"\"\e[0m\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mparen_group_opening_paren_char\
    \ is already defined as \e[33mvariable\e[0m \e[35mparen_group_opening_paren_char\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5us5e5cu.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mvar\e[0m \e[36mparen_group_closing_paren_char\e[0m\
    \ = \e[31m\"\"\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_closing_paren_char is already defi"
  stdout: ''
  timestamp: 1659795599
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").map(_.trim).toList\n        val paren_groups_with_spaces = paren_groups.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_without_spaces\
    \ = paren_groups_with_spaces.map(x => x.replace(\"(\", \"\").replace(\")\", \"\
    \"))\n        paren_groups_with_spaces_without_spaces.filter(x => !x.isEmpty)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_dud03h4.scala:17)\n\tat Problem.main(tmp_dud03h4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_group_count = paren_groups.length\n        val paren_group_lengths\
    \ = paren_groups.map(x => x.length)\n        val paren_group_lengths_sum = paren_group_lengths.sum\n\
    \        val paren_group_lengths_product = paren_group_lengths.product\n     \
    \   val paren_group_lengths_product2 = paren_group_lengths_product * paren_group_lengths_product\n\
    \        val paren_group_lengths_product3 = paren_group_lengths_product2 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product4 = paren_group_lengths_product3 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product5 = paren_group_lengths_product4 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product6 = paren_group_lengths_product5 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product7 = paren_group_lengths_product6 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product8 = paren_group_lengths_product7 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product9 = paren_group_lengths_product8 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product10 = paren_group_lengths_product9 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product11 = paren_group_lengths_product10 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product12 = paren_group_lengths_product11 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product13 = paren_group_lengths_product12 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product14 = paren_group_lengths_product13 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product15 = paren_group_lengths_product14 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product16 = paren_group_lengths_product15 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product17 = paren_group_lengths_product16 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product18 = paren_group_lengths_product17 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product19 = paren_group_lengths_product18 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdy2ixi0s.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpdy2ixi0s.scala:35:5 ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795599
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_size = paren_groups.length\n        val paren_groups_size2\
    \ = paren_groups_size * 2\n        val paren_groups_size3 = paren_groups_size2\
    \ * 2\n        val paren_groups_size4 = paren_groups_size3 * 2\n        val paren_groups_size5\
    \ = paren_groups_size4 * 2\n        val paren_groups_size6 = paren_groups_size5\
    \ * 2\n        val paren_groups_size7 = paren_groups_size6 * 2\n        val paren_groups_size8\
    \ = paren_groups_size7 * 2\n        val paren_groups_size9 = paren_groups_size8\
    \ * 2\n        val paren_groups_size10 = paren_groups_size9 * 2\n        val paren_groups_size11\
    \ = paren_groups_size10 * 2\n        val paren_groups_size12 = paren_groups_size11\
    \ * 2\n        val paren_groups_size13 = paren_groups_size12 * 2\n        val\
    \ paren_groups_size14 = paren_groups_size13 * 2\n        val paren_groups_size15\
    \ = paren_groups_size14 * 2\n        val paren_groups_size16 = paren_groups_size15\
    \ * 2\n        val paren_groups_size17 = paren_groups_size16 * 2\n        val\
    \ paren_groups_size18 = paren_groups_size17 * 2\n        val paren_groups_size19\
    \ = paren_groups_size18 * 2\n        val paren_groups_size20 = paren_groups_size19\
    \ * 2\n        val paren_groups_size21 = paren_groups_size20 * 2\n        val\
    \ paren_groups_size22 = paren_groups_size21 * 2\n        val paren_groups_size23\
    \ = paren_groups_size22 * 2\n        val paren_groups_size24 = paren_groups_size23\
    \ * 2\n        val paren_groups_size25 = paren_groups_size24 * 2\n        val\
    \ paren_groups_size26 = paren_groups_size25 * 2\n        val paren_groups_size27\
    \ = paren_groups_size26 * 2\n        val paren_groups_size28 = paren_groups_size27\
    \ * 2\n        val paren_groups_size29 = paren_groups_size28 * 2\n        val\
    \ paren_groups_size30 = paren_groups_size29 * 2\n        val paren_groups_size31\
    \ = paren_groups_size30 * 2\n        val paren_groups_size32 = paren_groups_size31\
    \ * 2\n        val paren_groups_size33 = paren_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp83k9q2wt.scala:44:34 ------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_size33\e[0m\
    \ = paren_\n\e[31m\e[31m   |\e[0m                                  ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Not found: paren_\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp83k9q2wt.scala:45:5 ---------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659795599
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_count = paren_groups.length\n        val paren_groups_array\
    \ = paren_groups.map(x => x.trim).filter(x => x.nonEmpty)\n        val paren_groups_array_count\
    \ = paren_groups_array.length\n        val paren_groups_array_array = paren_groups_array.map(x\
    \ => x.split(\"\\\\)\"))\n        val paren_groups_array_array_count = paren_groups_array_array.length\n\
    \        val paren_groups_array_array_array_count = paren_groups_array_array_array.length\n\
    \        val paren_groups_array_array_array_array_count = paren_groups_array_array_array_array.length\n\
    \        val paren_groups_array_array_array_array_array_count = paren_groups_array_array_array_array_array.length\n\
    \        val paren_groups_array_array_array_array_array_array_count = paren_groups_array_array_array_array_array_array.length\n\
    \        val paren_groups_array_array_array_array_array_array_array_count = paren_groups_array_array_array_array_array_array_array.length\n\
    \        val paren_groups_array_array_array_array_array_array_array_array_count\
    \ = paren_groups_array_array_array_array_array_array_array_array_array.length\n\
    \        val paren_groups_array_array_array_array_array_array_array_array_array_count\
    \ = paren_groups_array_array_array_array_array_array_array_array_array_array.length\n\
    \        val paren_groups_array_array_array_array_array_array_array_array_array_array_count\
    \ = paren_groups_array_array_array_array_array_array_array_array_array_array_array.length\n\
    \        val paren_groups_array_array_array_array_array_array_array_array_array_array_array_count\
    \ = paren_groups_array_array_array_array_array_array_array_array_array_array_array_array.length\n\
    \        val paren_groups_array_array_array_array_array_array_array_array_array_array_array_array_array_count\
    \ = paren_groups_array_array_array_array_array_array_array_array_array_array_array_array_array.length\n\
    \        val paren_groups_array_array_array_array_array_array_array_array_array_array_array_array_array_array_count\
    \ = paren_groups_array_array_array_array_array_array_array_array_array_array_array_array_array_array.length\n\
    \        val paren_groups_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_count\
    \ = paren_groups_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array.length\n\
    \        val paren_groups_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_count\
    \ = paren_groups_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array.length\n\
    \        val paren_groups_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxh0jo17q.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxh0jo17q.scala:17:51\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_array_array_array_count\e[0m = paren_groups_array_array_array.length\n\
    \e[31m\e[31m   |\e[0m                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               Not found: paren_groups_array_array_array\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxh0jo17q.scala:18:57\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_array_array_array_array_count\e[0m = paren_groups_array_array_array_array.length\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \        Not found: paren_groups_array_array_array_array\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpxh0jo17q.scala:19:63 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_array_array_array_array_array_count\e\
    [0m = paren_groups_array_array_array_array_array.length\n\e[31m\e[31m   |\e[0m\
    \                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Not found: paren_groups_array_array_array_array_array\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxh0jo17q.scala:20:69\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_array_array_array_array_array_array_count\e[0m = paren_groups_array_array_array_array_array_array.length\n\
    \e[31m\e[31m   |\e[0m                     "
  stdout: ''
  timestamp: 1659795599
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_group_counts = paren_groups.map(x => x.split(\"\\\\\
    )\").length).toList\n        val paren_group_lengths = paren_group_counts.map(x\
    \ => x.toDouble).toList\n        val paren_group_lengths_sum = paren_group_lengths.sum\n\
    \        val paren_group_lengths_average = paren_group_lengths_sum / paren_group_counts.length\n\
    \        val paren_group_lengths_variance = paren_group_lengths_sum / paren_group_counts.length\
    \ - 1\n        val paren_group_lengths_standard_deviation = math.sqrt(paren_group_lengths_variance)\n\
    \        val paren_group_lengths_min = paren_group_lengths.min\n        val paren_group_lengths_max\
    \ = paren_group_lengths.max\n        val paren_group_lengths_range = paren_group_lengths_max\
    \ - paren_group_lengths_min\n        val paren_group_lengths_range_average = paren_group_lengths_range\
    \ / paren_group_counts.length\n        val paren_group_lengths_range_variance\
    \ = paren_group_lengths_range / paren_group_counts.length - 1\n        val paren_group_lengths_range_standard_deviation\
    \ = math.sqrt(paren_group_lengths_range_variance)\n        val paren_group_lengths_range_min\
    \ = paren_group_lengths_range.min\n        val paren_group_lengths_range_max =\
    \ paren_group_lengths_range.max\n        val paren_group_lengths_range_range =\
    \ paren_group_lengths_range_max - paren_group_lengths_range_min\n        val paren_group_lengths_range_range_average\
    \ = paren_group_lengths_range_range / paren_group_counts.length\n        val paren_group_lengths_range_range_variance\
    \ = paren_group_lengths_range_range / paren_group_counts.length - 1\n        val\
    \ paren_group_lengths_range_range_standard_deviation = math.sqrt(paren_group_lengths_range_range_variance)\n\
    \        val paren_group_lengths_range_range_min = paren_group_lengths_range_range.min\n\
    \        val paren_group_lengths_range_range_max = paren_group_lengths_range_range.max\n\
    \        val paren_group_lengths_range_range_range = paren_group_lengths_range_range_max\
    \ - paren_group_lengths_range_range_min\n        val paren_group_lengths_range_range_range_average\
    \ = paren_group_lengths_range_range_range / paren_group_counts.length\n      \
    \  val paren_group_lengths_range_range_range_variance = paren_group_lengths_range_range_range\
    \ / paren_group_counts.length - 1\n        val paren_group_length\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()())\
    \ ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\"\
    , \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpv2znyxhy.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpv2znyxhy.scala:26:76\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_group_lengths_range_range\e[0m = paren_group_lengths_range_max - paren_group_lengths_range_min\n\
    \e[31m\e[31m   |\e[0m                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue - is not a member of Double => Double, but could be\
    \ made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpv2znyxhy.scala:36:5 ---------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659795600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_open_braces = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"\").trim())\n        val paren_groups_with_open_braces_with_spaces\
    \ = paren_groups_with_open_braces.map(x => x.replace(\")\", \"\").replace(\"(\"\
    , \"\").trim())\n        val paren_groups_with_open_braces_with_spaces_sorted\
    \ = paren_groups_with_open_braces_with_spaces.sortBy(x => x)\n        val paren_groups_with_open_braces_with_spaces_sorted_with_open_braces\
    \ = paren_groups_with_open_braces_with_spaces_sorted.map(x => x.replace(\")\"\
    , \"\").replace(\"(\", \"\").trim())\n        val paren_groups_with_open_braces_with_spaces_sorted_with_open_braces_with_spaces\
    \ = paren_groups_with_open_braces_with_spaces_sorted_with_open_braces.map(x =>\
    \ x.replace(\")\", \"\").replace(\"(\", \"\").trim())\n        val paren_groups_with_open_braces_with_spaces_sorted_with_open_braces_with_spaces_sorted\
    \ = paren_groups_with_open_braces_with_spaces_sorted_with_open_braces_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_open_braces_with_spaces_sorted_with_open_braces_with_spaces_sorted_with_open_braces\
    \ = paren_groups_with_open_braces_with_spaces_sorted_with_open_braces_with_spaces_sorted.map(x\
    \ => x.replace(\")\", \"\").replace(\"(\", \"\").trim())\n        val paren_groups_with_open_braces_with_spaces_sorted_with_open_braces_with_spaces_sorted_with_open_braces_with_spaces\
    \ = paren_groups_with_open_braces_with_spaces_sorted_with_open_braces_with_spaces_sorted_with_open_braces_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_open_braces_with_spaces_sorted_with_open_braces_with_spaces_sorted_with_open_braces_with_spaces_sorted\
    \ = paren_groups_with_open_braces_with_spaces_sorted_with_open_braces_with_spaces_sorted_with_open_braces_with_spaces_sorted.map(x\
    \ => x.replace(\")\", \"\").replace(\"(\", \"\").trim())\n        val paren_groups_with_open_braces_with_spaces_sorted_with_open_braces_with_spaces_sorted_with_open_braces_with_spaces_sorted_with_open_braces\
    \ = paren_groups_with_open_braces_with_spaces_sorted_with_open_braces_with_spaces_sorted_with_open_braces_with_spaces_sorted_with_open_braces_with_spaces_sor\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpigosqu38.scala:19:128 --------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_open_braces_with_spaces_sorted_with_open_braces_with_spaces_sorted_with_open_braces_with_spaces\e\
    [0m = paren_groups_with_open_braces_with_spaces_sorted_with_open_braces_with_spaces_sorted_with_open_braces_with_spaces.sortBy(\e\
    [36mx\e[0m => x)\n\e[31m\e[31m   |\e[0m                                      \
    \                                                                            \
    \              ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m\
    \   |\e[0m  paren_groups_with_open_braces_with_spaces_sorted_with_open_braces_with_spaces_sorted_with_open_braces_with_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpigosqu38.scala:20:135 --------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_open_braces_with_spaces_sorted_with_open_braces_with_spaces_sorted_with_open_braces_with_spaces_sorted\e\
    [0m = paren_groups_with_open_braces_with_spaces_sorted_with_open_braces_with_spaces_sorted_with_open_braces_with_spaces_sorted.map(\e\
    [36mx\e[0m => x.replace(\e[31m\")\"\e[0m, \e[31m\"\"\e[0m).replace(\e[31m\"(\"\
    \e[0m, \e[31m\"\"\e[0m).trim())\n\e[31m\e[31m   |\e[0m                       \
    \                                                                            \
    \                                    ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_open_braces_with_spaces_sorted_with_open_braces_with_spaces_sorted_with_open_braces_with_spaces_sorted\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpigosqu38.scala:21:152 -----------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups_with_open_braces_with_spaces_sorted_with_open_braces_with_spaces_sorted_with_open_braces_with_spaces_sorted_with_open_b"
  stdout: ''
  timestamp: 1659795600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val result = mutable.ListBuffer[String]()\n        paren_groups.foreach(group\
    \ => {\n            val paren_group_string = group.trim\n            val paren_group_open\
    \ = paren_group_string.indexOf(\"(\")\n            val paren_group_close = paren_group_string.indexOf(\"\
    )\")\n            val paren_group_length = paren_group_close - paren_group_open\n\
    \            if (paren_group_length == 0) result.add(paren_group_string)\n   \
    \         else {\n                val paren_group_open_brace = paren_group_string.substring(0,\
    \ paren_group_open)\n                val paren_group_close_brace = paren_group_string.substring(paren_group_close\
    \ + 1)\n                val paren_group_open_brace_length = paren_group_open_brace.trim\n\
    \                val paren_group_close_brace_length = paren_group_close_brace.trim\n\
    \                if (paren_group_open_brace_length == paren_group_close_brace_length)\
    \ {\n                    result.add(paren_group_string)\n                }\n \
    \               else {\n                    result.add(paren_group_string.substring(0,\
    \ paren_group_open_brace_length))\n                    result.add(paren_group_string.substring(paren_group_open_brace_length\
    \ + 1))\n                }\n            }\n        })\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxp7ejd76.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795596
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_group_strings = paren_groups.map(x => x.replace(\"\
    )\", \"\"))\n        paren_group_strings.filter(x => x.isEmpty).map(x => x.replace(\"\
    (\", \"\")).filter(x => x.isEmpty).map(x => x.replace(\")\", \"\"))\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()())\
    \ ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\"\
    , \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpicyqbd5i.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        paren_group_strings.filter(\e\
    [36mx\e[0m => x.isEmpty).map(\e[36mx\e[0m => x.replace(\e[31m\"(\"\e[0m, \e[31m\"\
    \"\e[0m)).filter(\e[36mx\e[0m => x.isEmpty).map(\e[36mx\e[0m => x.replace(\e[31m\"\
    )\"\e[0m, \e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mArray\e[0m[String]\n\e[31m  \
    \ |\e[0m        Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795599
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_trimmed = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_trimmed_trimmed\
    \ = paren_groups_with_spaces_trimmed.map(x => x.replace(\") \", \" ))\")\n   \
    \     val paren_groups_with_spaces_trimmed_trimmed_trimmed = paren_groups_with_spaces_trimmed_trimmed.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed\
    \ = paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed.map(x => x.replace(\"\
    ) \", \" ))\")\n        val paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed\
    \ = paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed.map(x =>\
    \ x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed\
    \ = paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed\
    \ = paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed\
    \ = paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed\
    \ = paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed\
    \ = paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trim\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxfka0r8j.scala:15:8 ----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_trimmed_trimmed_trimmed\e\
    [0m = paren_groups_with_spaces_trimmed_trimmed.map(\e[36mx\e[0m => x.replace(\e\
    [31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^\e[0m\n\e\
    [31m   |\e[0m        ')' expected, but 'val' found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpxfka0r8j.scala:31:1 ---------------------\e[0m\e[0m\n\
    \e[31m31 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\
    \e[31m   |\e[0m Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795599
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_close\
    \ = mutable.ListBuffer[String]()\n        val paren_open_size = mutable.ListBuffer[Int]()\n\
    \        val paren_close_size = mutable.ListBuffer[Int]()\n        val paren_group_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open = mutable.ListBuffer[Int]()\n\
    \        val paren_group_close = mutable.ListBuffer[Int]()\n        val paren_group_open_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_close_size = mutable.ListBuffer[Int]()\n\
    \        val paren_group_open_index = mutable.ListBuffer[Int]()\n        val paren_group_close_index\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_index_size = mutable.ListBuffer[Int]()\n\
    \        val paren_group_close_index_size = mutable.ListBuffer[Int]()\n      \
    \  val paren_group_open_index_size = mutable.ListBuffer[Int]()\n        val paren_group_close_index_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_index_size = mutable.ListBuffer[Int]()\n\
    \        val paren_group_close_index_size = mutable.ListBuffer[Int]()\n      \
    \  val paren_group_open_index_size = mutable.ListBuffer[Int]()\n        val paren_group_close_index_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_index_size = mutable.ListBuffer[Int]()\n\
    \        val paren_group_close_index_size = mutable.ListBuffer[Int]()\n      \
    \  val paren_group_open_index_size = mutable.ListBuffer[Int]()\n        val paren_group_close_index_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_index_size = mutable.ListBuffer[Int]()\n\
    \        val paren_group_close_index_size = mutable.ListBuffer[Int]()\n      \
    \  val paren_group_open_index_size = mutable.ListBuffer[Int]()\n        val paren_group_close_index_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_index_size = mutable.ListBuffer[Int]()\n\
    \        val paren_group_close_index_size = mutable.ListBuffer[Int]()\n      \
    \  val paren_group_open_index_size = mutable.ListBuffer[Int]()\n        val paren\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdv8hn3o2.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdv8hn3o2.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_group_open_index_size\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_open_index_size is already defined as \e[33mvalue\e\
    [0m \e[35mparen_group_open_index_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdv8hn3o2.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mparen_group_close_index_size\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_close_index_size is already defined as \e[33mvalue\e\
    [0m \e[35mparen_group_close_index_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdv8hn3o2.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mparen_group_open_index_size\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_open_index_size is already defined as \e[33mvalue\e\
    [0m \e[35mparen_group_open_index_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdv8hn3o2.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mparen_group_close_index_size\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659795600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replace(\"( \", \" ( \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replace(\"(\
    \ \", \" ( \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\"( \", \" ( \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\"( \", \" ( \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\"( \", \" ( \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp__a30k8v.scala:21:122 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.sortBy(\e\
    [36mx\e[0m => x)\n\e[31m\e[31m   |\e[0m                                      \
    \                                                                            \
    \        ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e\
    [0m  paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp__a30k8v.scala:23:141 -----------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp__a30k8v.scala:24:5\
    \ ---------------------\e[0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659795600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_close\
    \ = mutable.ListBuffer[String]()\n        paren_string.foreach {\n           \
    \ c =>\n            if (c == '(') {\n                paren_open += c\n       \
    \     } else if (c == ')') {\n                paren_close += c\n            }\
    \ else if (c == ' ') {\n                paren_groups += paren_open\n         \
    \       paren_open = paren_close\n                paren_close = mutable.ListBuffer[String]()\n\
    \            } else {\n                paren_close += c\n            }\n     \
    \   }\n        paren_groups += paren_open\n        paren_groups\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfxcsuesi.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfxcsuesi.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_open\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpfxcsuesi.scala:13:26 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_close\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmpfxcsuesi.scala:22:27 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                paren_open = paren_close\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \           Reassignment to val paren_open\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpfxcsuesi.scala:23:30 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m                paren_close = mutable.ListBuffer[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n5 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795596
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.filterNot(_ == \")\")\n        val paren_groups_flat3 =\
    \ paren_groups_flat2.filterNot(_ == \"(\")\n        val paren_groups_flat4 = paren_groups_flat3.filterNot(_\
    \ == \")\")\n        val paren_groups_flat5 = paren_groups_flat4.filterNot(_ ==\
    \ \"(\")\n        val paren_groups_flat6 = paren_groups_flat5.filterNot(_ == \"\
    )\")\n        val paren_groups_flat7 = paren_groups_flat6.filterNot(_ == \"(\"\
    )\n        val paren_groups_flat8 = paren_groups_flat7.filterNot(_ == \")\")\n\
    \        val paren_groups_flat9 = paren_groups_flat8.filterNot(_ == \"(\")\n \
    \       val paren_groups_flat10 = paren_groups_flat9.filterNot(_ == \")\")\n \
    \       val paren_groups_flat11 = paren_groups_flat10.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat12 = paren_groups_flat11.filterNot(_ == \")\")\n\
    \        val paren_groups_flat13 = paren_groups_flat12.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat14 = paren_groups_flat13.filterNot(_ == \")\")\n\
    \        val paren_groups_flat15 = paren_groups_flat14.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat16 = paren_groups_flat15.filterNot(_ == \")\")\n\
    \        val paren_groups_flat17 = paren_groups_flat16.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat18 = paren_groups_flat17.filterNot(_ == \")\")\n\
    \        val paren_groups_flat19 = paren_groups_flat18.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat20 = paren_groups_flat19.filterNot(_ == \")\")\n\
    \        val paren_groups_flat21 = paren_groups_flat20.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat22 = paren_groups_flat21.filterNot(_ == \")\")\n\
    \        val paren_groups_flat23 = paren_groups_flat22.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat24 = paren_groups_flat23.filterNot(_ == \")\")\n\
    \        val paren_groups_flat25 = paren_groups_flat24.filter\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp74rqaj8b.scala:13:61 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m\
    \ = paren_groups_flat.filterNot(_ == \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                             ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types Char and String cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- Error: /tmp/tmp74rqaj8b.scala:14:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat3\e[0m\
    \ = paren_groups_flat2.filterNot(_ == \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp74rqaj8b.scala:15:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat4\e[0m\
    \ = paren_groups_flat3.filterNot(_ == \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp74rqaj8b.scala:16:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat5\e[0m\
    \ = paren_groups_flat4.filterNot(_ == \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp74rqaj8b.scala:17:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat6\e[0m\
    \ = paren_groups_flat5.filterNot(_ == \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp74rqaj8b.scala:18:62 -----------------------------------------\e\
    [0m\e[0m\n\e"
  stdout: ''
  timestamp: 1659795604
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.filterNot(_ == \")\")\n        val paren_groups_flat3 =\
    \ paren_groups_flat2.filterNot(_ == \"(\")\n        val paren_groups_flat4 = paren_groups_flat3.filterNot(_\
    \ == \" \")\n        val paren_groups_flat5 = paren_groups_flat4.filterNot(_ ==\
    \ \"\\\\\")\n        val paren_groups_flat6 = paren_groups_flat5.filterNot(_ ==\
    \ \"\\\\(\")\n        val paren_groups_flat7 = paren_groups_flat6.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat8 = paren_groups_flat7.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat9 = paren_groups_flat8.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat10 = paren_groups_flat9.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat11 = paren_groups_flat10.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat12 = paren_groups_flat11.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat13 = paren_groups_flat12.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat14 = paren_groups_flat13.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat15 = paren_groups_flat14.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat16 = paren_groups_flat15.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat17 = paren_groups_flat16.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat18 = paren_groups_flat17.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat19 = paren_groups_flat18.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat20 = paren_groups_flat19.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat21 = paren_groups_flat20.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat22 = paren_groups_flat21.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat23 = paren_groups_flat22.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat24 = paren_groups_flat23.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat25 = paren_groups_flat24.filter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp8xajzkl1.scala:13:61 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m\
    \ = paren_groups_flat.filterNot(_ == \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                             ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types Char and String cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- Error: /tmp/tmp8xajzkl1.scala:14:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat3\e[0m\
    \ = paren_groups_flat2.filterNot(_ == \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp8xajzkl1.scala:15:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat4\e[0m\
    \ = paren_groups_flat3.filterNot(_ == \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp8xajzkl1.scala:16:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat5\e[0m\
    \ = paren_groups_flat4.filterNot(_ == \e[31m\"\\\\\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                              ^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp8xajzkl1.scala:17:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat6\e[0m\
    \ = paren_groups_flat5.filterNot(_ == \e[31m\"\\\\(\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                              ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp8xajzkl1.scala:18:62 -----------------------------------------\e\
    [0m"
  stdout: ''
  timestamp: 1659795604
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.filterNot(_ == \")\")\n        val paren_groups_flat3 =\
    \ paren_groups_flat2.filterNot(_ == \"(\")\n        val paren_groups_flat4 = paren_groups_flat3.filterNot(_\
    \ == \" \")\n        val paren_groups_flat5 = paren_groups_flat4.filterNot(_ ==\
    \ \"\")\n        val paren_groups_flat6 = paren_groups_flat5.filterNot(_ == \"\
    \\\\\")\n        val paren_groups_flat7 = paren_groups_flat6.filterNot(_ == \"\
    \\\\(\")\n        val paren_groups_flat8 = paren_groups_flat7.filterNot(_ == \"\
    \\\\)\")\n        val paren_groups_flat9 = paren_groups_flat8.filterNot(_ == \"\
    \\\\)\")\n        val paren_groups_flat10 = paren_groups_flat9.filterNot(_ ==\
    \ \"\\\\)\")\n        val paren_groups_flat11 = paren_groups_flat10.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat12 = paren_groups_flat11.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat13 = paren_groups_flat12.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat14 = paren_groups_flat13.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat15 = paren_groups_flat14.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat16 = paren_groups_flat15.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat17 = paren_groups_flat16.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat18 = paren_groups_flat17.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat19 = paren_groups_flat18.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat20 = paren_groups_flat19.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat21 = paren_groups_flat20.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat22 = paren_groups_flat21.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat23 = paren_groups_flat22.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat24 = paren_groups_flat23.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat25 = paren_groups_flat24.filterNo\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpukmktkyu.scala:13:61 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m\
    \ = paren_groups_flat.filterNot(_ == \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                             ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types Char and String cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- Error: /tmp/tmpukmktkyu.scala:14:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat3\e[0m\
    \ = paren_groups_flat2.filterNot(_ == \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmpukmktkyu.scala:15:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat4\e[0m\
    \ = paren_groups_flat3.filterNot(_ == \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmpukmktkyu.scala:16:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat5\e[0m\
    \ = paren_groups_flat4.filterNot(_ == \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types Char and String cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- Error: /tmp/tmpukmktkyu.scala:17:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat6\e[0m\
    \ = paren_groups_flat5.filterNot(_ == \e[31m\"\\\\\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                              ^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmpukmktkyu.scala:18:62 -----------------------------------------\e\
    [0m\e[0m\n\e"
  stdout: ''
  timestamp: 1659795605
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_group_strings = paren_groups.map(x => x.replace(\"\
    )\", \"\").trim())\n        val paren_group_strings_sorted = paren_group_strings.sortBy(x\
    \ => x)\n        val paren_group_strings_sorted_reversed = paren_group_strings_sorted.reverse\n\
    \        val paren_group_strings_sorted_reversed_distinct = paren_group_strings_sorted_reversed.distinct\n\
    \        val paren_group_strings_sorted_reversed_distinct_sorted = paren_group_strings_sorted_reversed_distinct.sortBy(x\
    \ => x)\n        val paren_group_strings_sorted_reversed_distinct_sorted_distinct\
    \ = paren_group_strings_sorted_reversed_distinct_sorted.distinct\n        val\
    \ paren_group_strings_sorted_reversed_distinct_sorted_distinct_sorted = paren_group_strings_sorted_reversed_distinct_sorted_distinct.sortBy(x\
    \ => x)\n        val paren_group_strings_sorted_reversed_distinct_sorted_distinct_sorted_distinct\
    \ = paren_group_strings_sorted_reversed_distinct_sorted_distinct_sorted.distinct\n\
    \        val paren_group_strings_sorted_reversed_distinct_sorted_distinct_sorted_distinct_sorted\
    \ = paren_group_strings_sorted_reversed_distinct_sorted_distinct_sorted_distinct.sortBy(x\
    \ => x)\n        val paren_group_strings_sorted_reversed_distinct_sorted_distinct_sorted_distinct_sorted_distinct\
    \ = paren_group_strings_sorted_reversed_distinct_sorted_distinct_sorted_distinct_sorted.distinct\n\
    \        val paren_group_strings_sorted_reversed_distinct_sorted_distinct_sorted_distinct_sorted_distinct_sorted\
    \ = paren_group_strings_sorted_reversed_distinct_sorted_distinct_sorted_distinct_sorted_distinct.sortBy(x\
    \ => x)\n        val paren_group_strings_sorted_reversed_distinct_sorted_distinct_sorted_distinct_sorted_distinct_sorted_distinct\
    \ = paren_group_strings_sorted_reversed_distinct_sorted_distinct_sorted_distinct_sorted_distinct_sorted.distinct\n\
    \        val paren_group_strings_sorted_reversed_distinct_sorted_distinct_sorted_distinct_sorted_distinct_sorted_distinct\
    \ = paren_group_strings_sorted_reversed_distinct_sorted_distinct_sorted_distinct_sorted_distinct_sorted_distinct.sortBy(x\
    \ => x)\n        val paren_group_strings_sorted_reversed_distinct_sorted_distinct_sorted_distinct_sorted_distinct_sorted_distinct_sorted\
    \ = paren_group_strings_sorted_reversed_distinct_sorted_distinct_sorted_distinct_sorted_distinct_sorted_distinct.sortBy(x\
    \ => x)\n        val paren\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpurtcgdlr.scala:27:4 ----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpurtcgdlr.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_group_strings_sorted_reversed_distinct_sorted_distinct_sorted_distinct_sorted_distinct_sorted_distinct\e\
    [0m = paren_group_strings_sorted_reversed_distinct_sorted_distinct_sorted_distinct_sorted_distinct_sorted_distinct.sortBy(\e\
    [36mx\e[0m => x)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_strings_sorted_reversed_distinct_sorted_distinct_sorted_distinct_sorted_distinct_sorted_distinct\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_group_strings_sorted_reversed_distinct_sorted_distinct_sorted_distinct_sorted_distinct_sorted_distinct\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpurtcgdlr.scala:27:5 ---------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659795602
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_reversed = paren_groups_with_spaces.reverse\n\
    \        val paren_groups_with_spaces_reversed_with_spaces = paren_groups_with_spaces_reversed.map(x\
    \ => x.replace(\"(\", \" ( \"))\n        val paren_groups_with_spaces_reversed_with_spaces_reversed\
    \ = paren_groups_with_spaces_reversed_with_spaces.reverse\n        val paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces\
    \ = paren_groups_with_spaces_reversed_with_spaces_reversed.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed\
    \ = paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces.reverse\n\
    \        val paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces\
    \ = paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces.map(x\
    \ => x.replace(\"(\", \" ( \"))\n        val paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed\
    \ = paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces\
    \ = paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces.map(x\
    \ => x.replace(\"(\", \" ( \"))\n        val paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed\
    \ = paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces\
    \ = paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpeawb5h__.scala:22:287 --------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces\e\
    [0m = paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \   ^\e[0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpeawb5h__.scala:18:102 --------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces\e\
    [0m = paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"(\"\e[0m, \e[31m\" ( \"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                                  ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpeawb5h__.scala:19:111 --------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed\e\
    [0m = paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed.map(\e\
    [36mx\e[0m => x.replace(\e"
  stdout: ''
  timestamp: 1659795601
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_count = paren_groups.length\n        val paren_groups_remainder\
    \ = paren_groups_count % 2\n        val paren_groups_remainder_count = paren_groups_remainder\
    \ + 1\n        val paren_groups_remainder_groups = paren_groups.take(paren_groups_remainder_count)\n\
    \        val paren_groups_remainder_groups_count = paren_groups_remainder_groups.length\n\
    \        val paren_groups_remainder_groups_remainder = paren_groups_remainder_groups_count\
    \ % 2\n        val paren_groups_remainder_groups_remainder_count = paren_groups_remainder_groups_remainder\
    \ + 1\n        val paren_groups_remainder_groups_remainder_groups = paren_groups_remainder_groups.take(paren_groups_remainder_groups_remainder_count)\n\
    \        val paren_groups_remainder_groups_remainder_groups_count = paren_groups_remainder_groups_remainder_groups.length\n\
    \        val paren_groups_remainder_groups_remainder_groups_remainder = paren_groups_remainder_groups_remainder_groups_count\
    \ % 2\n        val paren_groups_remainder_groups_remainder_groups_remainder_count\
    \ = paren_groups_remainder_groups_remainder_groups_remainder + 1\n        val\
    \ paren_groups_remainder_groups_remainder_groups_remainder_groups = paren_groups_remainder_groups_remainder_groups_remainder_groups.take(paren_groups_remainder_groups_remainder_groups_remainder_count)\n\
    \        val paren_groups_remainder_groups_remainder_groups_remainder_groups_count\
    \ = paren_groups_remainder_groups_remainder_groups_remainder_groups.length\n \
    \       val paren_groups_remainder_groups_remainder_groups_remainder_groups_remainder\
    \ = paren_groups_remainder_groups_remainder_groups_remainder_groups_count % 2\n\
    \        val paren_groups_remainder_groups_remainder_groups_remainder_groups_remainder_count\
    \ = paren_groups_remainder_groups_remainder_groups_remainder_groups_remainder\
    \ + 1\n        val paren_groups_remainder_groups_remainder_groups_remainder_groups_remainder_groups\
    \ = paren_groups_remainder_groups_remainder_groups_remainder_groups_remainder_groups.take(paren_groups_remainder_groups_remainder_groups_remainder_groups_remainder_count)\n\
    \        val paren_groups_remainder_groups_remainder_groups_remainder_groups_remainder_groups_count\
    \ = paren_groups_remainder_groups_remainder_groups_remainder_groups_remainder_groups.length\n\
    \        val paren_groups_remainder_groups_remainder_groups_remainder_groups_remainder_groups_remainder\
    \ = paren_groups_remainder_groups_remainder_groups_remainder_groups_remainder_groups_remainder_count\
    \ % 2\n        val paren_groups_remainder_groups_remainder_groups_\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()())\
    \ ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\"\
    , \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6vtpgqia.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp6vtpgqia.scala:23:78\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_remainder_groups_remainder_groups_remainder_groups\e[0m =\
    \ paren_groups_remainder_groups_remainder_groups_remainder_groups.take(paren_groups_remainder_groups_remainder_groups_remainder_count)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mparen_groups_remainder_groups_remainder_groups_remainder_groups\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp6vtpgqia.scala:27:95\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_remainder_groups_remainder_groups_remainder_groups_remainder_groups\e\
    [0m = paren_groups_remainder_groups_remainder_groups_remainder_groups_remainder_groups.take(paren_groups_remainder_groups_remainder_groups_remainder_groups_remainder_count)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                       ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_remainder_groups_remainder_groups_remainder_groups_remainder_groups\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp6vtpgqia.scala:29:105 -----------------------\e[0m\e[0m\n\e[31m29 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups_remainder_groups_remainder_groups_remainder_groups_remainder_groups_remainder\e\
    [0m = paren_groups_remainder_groups_remainder_groups_remainder_groups_remainder_groups_remainder_count\
    \ % \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                                      \
    \                                   "
  stdout: ''
  timestamp: 1659795602
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replace(\" \"\
    , \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp90lov807.scala:21:122 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.sortBy(\e\
    [36mx\e[0m => x)\n\e[31m\e[31m   |\e[0m                                      \
    \                                                                            \
    \        ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e\
    [0m  paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp90lov807.scala:23:141 -----------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp90lov807.scala:24:5\
    \ ---------------------\e[0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659795602
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_count = paren_groups.length\n        val paren_groups_count_with_paren\
    \ = paren_groups_count + 1\n        val paren_groups_count_without_paren = paren_groups_count\
    \ - 1\n        val paren_groups_count_with_paren_without_paren = paren_groups_count_with_paren\
    \ - 1\n        val paren_groups_count_with_paren_without_paren_without_paren =\
    \ paren_groups_count_with_paren_without_paren - 1\n        val paren_groups_count_with_paren_without_paren_without_paren_without_paren\
    \ = paren_groups_count_with_paren_without_paren_without_paren - 1\n        val\
    \ paren_groups_count_with_paren_without_paren_without_paren_without_paren_without_paren\
    \ = paren_groups_count_with_paren_without_paren_without_paren_without_paren -\
    \ 1\n        val paren_groups_count_with_paren_without_paren_without_paren_without_paren_without_paren_without_paren\
    \ = paren_groups_count_with_paren_without_paren_without_paren_without_paren_without_paren\
    \ - 1\n        val paren_groups_count_with_paren_without_paren_without_paren_without_paren_without_paren_without_paren_without_paren\
    \ = paren_groups_count_with_paren_without_paren_without_paren_without_paren_without_paren_without_paren\
    \ - 1\n        val paren_groups_count_with_paren_without_paren_without_paren_without_paren_without_paren_without_paren_without_paren_without_paren\
    \ = paren_groups_count_with_paren_without_paren_without_paren_without_paren_without_paren_without_paren_without_paren_without_paren\
    \ - 1\n        val paren_groups_count_with_paren_without_paren_without_paren_without_paren_without_paren_without_paren_without_paren_without_paren_without_paren\
    \ = paren_groups_count_with_paren_without_paren_without_paren_without_paren_without_paren_without_paren_without_paren_without_paren_without_paren\
    \ - 1\n        val paren_groups_count_with_paren_without_paren_without_paren_without_paren_without_paren_without_paren_without_paren_without_paren_without_paren_without_paren\
    \ = paren_groups_count_with_paren_without_paren_without_paren_without_paren_without_paren_without_paren_without_paren_without_paren_without_paren_without_paren\
    \ - 1\n        val paren_groups_count_with_paren_without_paren_without_paren_without_paren_without_paren_without_paren_without_paren_without_paren_without_paren_without_paren\
    \ = paren_groups_count_with_paren_without_paren_without_paren_without_paren_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfmkk8skj.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_count_with_paren_without_paren_without_paren_without_paren_without_paren_without_paren_without_paren_without_paren_without_paren_without_paren\e\
    [0m = paren_groups_count_with_paren_without_paren_without_paren_without_paren_\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_count_with_paren_without_paren_without_paren_without_paren_without_paren_without_paren_without_paren_without_paren_without_paren_without_paren\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_count_with_paren_without_paren_without_paren_without_paren_without_paren_without_paren_without_paren_without_paren_without_paren_without_paren\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpfmkk8skj.scala:21:142 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_count_with_paren_without_paren_without_paren_without_paren_without_paren_without_paren_without_paren_without_paren\e\
    [0m = paren_groups_count_with_paren_without_paren_without_paren_without_paren_without_paren_without_paren_without_paren_without_paren\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                                      \
    \                                                                            \
    \                            ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m\
    \ \e[35m\n\e[31m   |\e[0m  paren_groups_count_with_paren_without_paren_without_paren_without_paren_without_paren_without_paren_without_paren_without_paren\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[3"
  stdout: ''
  timestamp: 1659795602
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_size = paren_groups.length\n        val paren_groups_size2\
    \ = paren_groups_size * 2\n        val paren_groups_size3 = paren_groups_size2\
    \ * 2\n        val paren_groups_size4 = paren_groups_size3 * 2\n        val paren_groups_size5\
    \ = paren_groups_size4 * 2\n        val paren_groups_size6 = paren_groups_size5\
    \ * 2\n        val paren_groups_size7 = paren_groups_size6 * 2\n        val paren_groups_size8\
    \ = paren_groups_size7 * 2\n        val paren_groups_size9 = paren_groups_size8\
    \ * 2\n        val paren_groups_size10 = paren_groups_size9 * 2\n        val paren_groups_size11\
    \ = paren_groups_size10 * 2\n        val paren_groups_size12 = paren_groups_size11\
    \ * 2\n        val paren_groups_size13 = paren_groups_size12 * 2\n        val\
    \ paren_groups_size14 = paren_groups_size13 * 2\n        val paren_groups_size15\
    \ = paren_groups_size14 * 2\n        val paren_groups_size16 = paren_groups_size15\
    \ * 2\n        val paren_groups_size17 = paren_groups_size16 * 2\n        val\
    \ paren_groups_size18 = paren_groups_size17 * 2\n        val paren_groups_size19\
    \ = paren_groups_size18 * 2\n        val paren_groups_size20 = paren_groups_size19\
    \ * 2\n        val paren_groups_size21 = paren_groups_size20 * 2\n        val\
    \ paren_groups_size22 = paren_groups_size21 * 2\n        val paren_groups_size23\
    \ = paren_groups_size22 * 2\n        val paren_groups_size24 = paren_groups_size23\
    \ * 2\n        val paren_groups_size25 = paren_groups_size24 * 2\n        val\
    \ paren_groups_size26 = paren_groups_size25 * 2\n        val paren_groups_size27\
    \ = paren_groups_size26 * 2\n        val paren_groups_size28 = paren_groups_size27\
    \ * 2\n        val paren_groups_size29 = paren_groups_size28 * 2\n        val\
    \ paren_groups_size30 = paren_groups_size29 * 2\n        val paren_groups_size31\
    \ = paren_groups_size30 * 2\n        val paren_groups_size32 = paren_groups_size31\
    \ * 2\n        val paren_groups_size33 = paren_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp83k9q2wt.scala:44:34 ------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_size33\e[0m\
    \ = paren_\n\e[31m\e[31m   |\e[0m                                  ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Not found: paren_\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp83k9q2wt.scala:45:5 ---------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659795599
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").map(_.trim).toList\n        val paren_groups_count = paren_groups.size\n\
    \        val paren_groups_remaining = paren_groups_count - 1\n        val paren_groups_remaining_string\
    \ = paren_groups_remaining.toString\n        val paren_groups_remaining_string_reversed\
    \ = paren_groups_remaining_string.reverse\n        val paren_groups_remaining_string_reversed_reversed\
    \ = paren_groups_remaining_string_reversed.reverse\n        val paren_groups_remaining_string_reversed_reversed_reversed\
    \ = paren_groups_remaining_string_reversed_reversed.reverse\n        val paren_groups_remaining_string_reversed_reversed_reversed_reversed\
    \ = paren_groups_remaining_string_reversed_reversed_reversed.reverse\n       \
    \ val paren_groups_remaining_string_reversed_reversed_reversed_reversed_reversed\
    \ = paren_groups_remaining_string_reversed_reversed_reversed_reversed.reverse\n\
    \        val paren_groups_remaining_string_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = paren_groups_remaining_string_reversed_reversed_reversed_reversed_reversed.reverse\n\
    \        val paren_groups_remaining_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = paren_groups_remaining_string_reversed_reversed_reversed_reversed_reversed_reversed.reverse\n\
    \        val paren_groups_remaining_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = paren_groups_remaining_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed.reverse\n\
    \        val paren_groups_remaining_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = paren_groups_remaining_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.reverse\n\
    \        val paren_groups_remaining_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = paren_groups_remaining_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.reverse\n\
    \        val paren_groups_remaining_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = paren_groups_remaining_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.reverse\n\
    \        val paren_groups_\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7wnn_pmm.scala:27:4 ----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp7wnn_pmm.scala:23:125\
    \ --------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_remaining_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\e\
    [0m = paren_groups_remaining_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                     ^\e[0m\n\
    \e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_remaining_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp7wnn_pmm.scala:24:143 -----------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups_remaining_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\e\
    [0m = paren_groups_remaining_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_remaining_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7wnn_pmm.scala:27:5\
    \ ---------------------\e[0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m "
  stdout: ''
  timestamp: 1659795604
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_size = paren_groups.length\n        val paren_groups_size2\
    \ = paren_groups_size/2\n        val paren_groups_size3 = paren_groups_size/3\n\
    \        val paren_groups_size4 = paren_groups_size/4\n        val paren_groups_size5\
    \ = paren_groups_size/5\n        val paren_groups_size6 = paren_groups_size/6\n\
    \        val paren_groups_size7 = paren_groups_size/7\n        val paren_groups_size8\
    \ = paren_groups_size/8\n        val paren_groups_size9 = paren_groups_size/9\n\
    \        val paren_groups_size10 = paren_groups_size/10\n        val paren_groups_size11\
    \ = paren_groups_size/11\n        val paren_groups_size12 = paren_groups_size/12\n\
    \        val paren_groups_size13 = paren_groups_size/13\n        val paren_groups_size14\
    \ = paren_groups_size/14\n        val paren_groups_size15 = paren_groups_size/15\n\
    \        val paren_groups_size16 = paren_groups_size/16\n        val paren_groups_size17\
    \ = paren_groups_size/17\n        val paren_groups_size18 = paren_groups_size/18\n\
    \        val paren_groups_size19 = paren_groups_size/19\n        val paren_groups_size20\
    \ = paren_groups_size/20\n        val paren_groups_size21 = paren_groups_size/21\n\
    \        val paren_groups_size22 = paren_groups_size/22\n        val paren_groups_size23\
    \ = paren_groups_size/23\n        val paren_groups_size24 = paren_groups_size/24\n\
    \        val paren_groups_size25 = paren_groups_size/25\n        val paren_groups_size26\
    \ = paren_groups_size/26\n        val paren_groups_size27 = paren_groups_size/27\n\
    \        val paren_groups_size28 = paren_groups_size/28\n        val paren_groups_size29\
    \ = paren_groups_size/29\n        val paren_groups_size30 = paren_groups_size/30\n\
    \        val paren_groups_size31 = paren_groups_size/31\n        val paren_groups_size32\
    \ = paren_groups_size/32\n        val paren_groups_size33 = paren_groups_size/33\n\
    \        val paren_groups_size34 = paren_groups_size/34\n        val paren_groups_size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp97k__tod.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp97k__tod.scala:47:5 ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795608
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.filterNot(x => x.contains(\"\\\\(\"))\n        val paren_groups_flat3\
    \ = paren_groups_flat2.filterNot(x => x.contains(\"\\\\)\"))\n        val paren_groups_flat4\
    \ = paren_groups_flat3.filterNot(x => x.contains(\"\\\\)\\\\(\"))\n        paren_groups_flat4.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpegjhjea_.scala:13:68 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m\
    \ = paren_groups_flat.filterNot(\e[36mx\e[0m => x.contains(\e[31m\"\\\\(\"\e[0m))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \          ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                  value\
    \ contains is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpegjhjea_.scala:14:69\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_flat3\e[0m = paren_groups_flat2.filterNot(\e[36mx\e[0m => x.contains(\e\
    [31m\"\\\\)\"\e[0m))\n\e[31m\e[31m   |\e[0m                                  \
    \                                 ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                       value contains is not a member of Char\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpegjhjea_.scala:15:69 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat4\e[0m\
    \ = paren_groups_flat3.filterNot(\e[36mx\e[0m => x.contains(\e[31m\"\\\\)\\\\\
    (\"\e[0m))\n\e[31m\e[31m   |\e[0m                                            \
    \                       ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \             value contains is not a member of Char\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpegjhjea_.scala:16:27 --------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m        paren_groups_flat4.toList\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e\
    [31mChar\e[0m]\n\e[31m   |\e[0m        Required: List[\e[1m\e[32mString\e[0m]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659795609
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_group_counts = paren_groups.map(x => x.split(\"\\\\\
    )\").length).toList\n        val paren_group_counts_sum = paren_group_counts.sum\n\
    \        val paren_group_counts_avg = paren_group_counts.sum / paren_group_counts_sum\n\
    \        val paren_group_counts_min = paren_group_counts.min\n        val paren_group_counts_max\
    \ = paren_group_counts.max\n        val paren_group_counts_range = paren_group_counts_max\
    \ - paren_group_counts_min\n        val paren_group_counts_range_avg = paren_group_counts_range\
    \ / paren_group_counts_sum\n        val paren_group_counts_range_min = paren_group_counts_range\
    \ / paren_group_counts_avg\n        val paren_group_counts_range_max = paren_group_counts_range\
    \ / paren_group_counts_min\n        val paren_group_counts_range_max_avg = paren_group_counts_range_max\
    \ * paren_group_counts_avg\n        val paren_group_counts_range_max_min = paren_group_counts_range_max\
    \ * paren_group_counts_min\n        val paren_group_counts_range_max_min_avg =\
    \ paren_group_counts_range_max_min * paren_group_counts_avg\n        val paren_group_counts_range_max_min_min_avg\
    \ = paren_group_counts_range_max_min * paren_group_counts_min\n        val paren_group_counts_range_max_min_min_min_avg\
    \ = paren_group_counts_range_max_min * paren_group_counts_avg\n        val paren_group_counts_range_max_min_min_min_min_avg\
    \ = paren_group_counts_range_max_min * paren_group_counts_min\n        val paren_group_counts_range_max_min_min_min_min_min_avg\
    \ = paren_group_counts_range_max_min * paren_group_counts_avg\n        val paren_group_counts_range_max_min_min_min_min_min_min_avg\
    \ = paren_group_counts_range_max_min * paren_group_counts_min\n        val paren_group_counts_range_max_min_min_min_min_min_min_min_avg\
    \ = paren_group_counts_range_max_min * paren_group_counts_avg\n        val paren_group_counts_range_max_min_min_min_min_min_min_min_min_avg\
    \ = paren_group_counts_range_max_min * paren_group_counts_min\n        val paren_group_counts_range_max_min_min_min_min_min_min_min_min_min_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpi7cx0xxp.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpi7cx0xxp.scala:32:5 ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795609
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_size = paren_groups.length\n        val paren_groups_size2\
    \ = paren_groups_size/2\n        val paren_groups_size3 = paren_groups_size/3\n\
    \        val paren_groups_size4 = paren_groups_size/4\n        val paren_groups_size5\
    \ = paren_groups_size/5\n        val paren_groups_size6 = paren_groups_size/6\n\
    \        val paren_groups_size7 = paren_groups_size/7\n        val paren_groups_size8\
    \ = paren_groups_size/8\n        val paren_groups_size9 = paren_groups_size/9\n\
    \        val paren_groups_size10 = paren_groups_size/10\n        val paren_groups_size11\
    \ = paren_groups_size/11\n        val paren_groups_size12 = paren_groups_size/12\n\
    \        val paren_groups_size13 = paren_groups_size/13\n        val paren_groups_size14\
    \ = paren_groups_size/14\n        val paren_groups_size15 = paren_groups_size/15\n\
    \        val paren_groups_size16 = paren_groups_size/16\n        val paren_groups_size17\
    \ = paren_groups_size/17\n        val paren_groups_size18 = paren_groups_size/18\n\
    \        val paren_groups_size19 = paren_groups_size/19\n        val paren_groups_size20\
    \ = paren_groups_size/20\n        val paren_groups_size21 = paren_groups_size/21\n\
    \        val paren_groups_size22 = paren_groups_size/22\n        val paren_groups_size23\
    \ = paren_groups_size/23\n        val paren_groups_size24 = paren_groups_size/24\n\
    \        val paren_groups_size25 = paren_groups_size/25\n        val paren_groups_size26\
    \ = paren_groups_size/26\n        val paren_groups_size27 = paren_groups_size/27\n\
    \        val paren_groups_size28 = paren_groups_size/28\n        val paren_groups_size29\
    \ = paren_groups_size/29\n        val paren_groups_size30 = paren_groups_size/30\n\
    \        val paren_groups_size31 = paren_groups_size/31\n        val paren_groups_size32\
    \ = paren_groups_size/32\n        val paren_groups_size33 = paren_groups_size/33\n\
    \        val paren_groups_size34 = paren_groups_size/34\n        val paren_groups_size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp97k__tod.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp97k__tod.scala:47:5 ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795608
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").map(_.trim).toList\n        val open_braces = paren_groups.filter(_.startsWith(\"\
    (\"))\n        val close_braces = paren_groups.filter(_.startsWith(\")\"))\n \
    \       val unclosed_groups = paren_groups.filter(!_.startsWith(\"(\") && !_.startsWith(\"\
    )\"))\n        val unclosed_groups_with_spaces = unclosed_groups.map(x => \" \"\
    \ + x)\n        val open_braces_with_spaces = open_braces.map(x => \" \" + x)\n\
    \        val close_braces_with_spaces = close_braces.map(x => \" \" + x)\n   \
    \     val unclosed_groups_with_spaces_with_spaces = unclosed_groups_with_spaces.map(x\
    \ => \" \" + x)\n        val unclosed_groups_with_spaces_with_spaces_with_spaces\
    \ = unclosed_groups_with_spaces_with_spaces.map(x => \" \" + x)\n        val open_braces_with_spaces_with_spaces\
    \ = open_braces_with_spaces.map(x => \" \" + x)\n        val close_braces_with_spaces_with_spaces\
    \ = close_braces_with_spaces.map(x => \" \" + x)\n        val unclosed_groups_with_spaces_with_spaces_with_spaces\
    \ = unclosed_groups_with_spaces_with_spaces.map(x => \" \" + x)\n        val unclosed_groups_with_spaces_with_spaces_with_spaces_with_spaces\
    \ = unclosed_groups_with_spaces_with_spaces_with_spaces.map(x => \" \" + x)\n\
    \        val open_braces_with_spaces_with_spaces_with_spaces = open_braces_with_spaces_with_spaces.map(x\
    \ => \" \" + x)\n        val close_braces_with_spaces_with_spaces_with_spaces\
    \ = close_braces_with_spaces_with_spaces.map(x => \" \" + x)\n        val unclosed_groups_with_spaces_with_spaces_with_spaces_with_spaces\
    \ = unclosed_groups_with_spaces_with_spaces_with_spaces.map(x => \" \" + x)\n\
    \        val unclosed_groups_with_spaces_with_spaces_with_spaces_with_spaces_with_spaces\
    \ = unclosed_groups_with_spaces_with_spaces_with_spaces_with_spaces.map(x => \"\
    \ \" + x)\n        val open_braces_with_spaces_with_spaces_with_spaces_with_spaces\
    \ = open_braces_with_spaces_with_spaces_with_spaces.map(x => \" \" + x)\n    \
    \    val close_braces_with_spaces_with_spaces_with_spaces_with_spaces = close_braces_with_spaces_with_spaces_with_spaces.map(x\
    \ => \" \" + x)\n        val unclosed_groups_with_spaces_with_spaces_with_spaces_with_spaces_with_spaces\
    \ = unclosed_groups_with_spaces_with_spaces_with_spaces_with_spaces.map(x => \"\
    \ \" + x)\n        val unclosed_groups_with_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzmuttg_o.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzmuttg_o.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munclosed_groups_with_spaces_with_spaces_with_spaces\e[0m = unclosed_groups_with_spaces_with_spaces.map(\e\
    [36mx\e[0m => \e[31m\" \"\e[0m + x)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munclosed_groups_with_spaces_with_spaces_with_spaces is already\
    \ defined as \e[33mvalue\e[0m \e[35munclosed_groups_with_spaces_with_spaces_with_spaces\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpzmuttg_o.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36munclosed_groups_with_spaces_with_spaces_with_spaces_with_spaces\e\
    [0m = unclosed_groups_with_spaces_with_spaces_with_spaces.map(\e[36mx\e[0m =>\
    \ \e[31m\" \"\e[0m + x)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munclosed_groups_with_spaces_with_spaces_with_spaces_with_spaces\
    \ is already defined as \e[33mvalue\e[0m \e[35munclosed_groups_with_spaces_with_spaces_with_spaces_with_spaces\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpzmuttg_o.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36munclosed_groups_with_spaces_with_spaces_with_spaces_with_spaces_with_spaces\e\
    [0m = unclosed_groups_with_spaces_with_spaces_with_spaces_with_spaces.map(\e[36mx\e\
    [0m => \e[31m\" \"\e[0m + x)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659795611
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortWith((x,y)\
    \ => x.length <= y.length)\n        val paren_groups_with_spaces_sorted_with_paren\
    \ = paren_groups_with_spaces_sorted.map(x => x + \"(\")\n        val paren_groups_with_spaces_sorted_with_paren_sorted\
    \ = paren_groups_with_spaces_sorted_with_paren.sortWith((x,y) => x.length <= y.length)\n\
    \        val paren_groups_with_spaces_sorted_with_paren_sorted_with_paren = paren_groups_with_spaces_sorted_with_paren_sorted.map(x\
    \ => x + \"(\")\n        val paren_groups_with_spaces_sorted_with_paren_sorted_with_paren_sorted\
    \ = paren_groups_with_spaces_sorted_with_paren_sorted_with_paren.sortWith((x,y)\
    \ => x.length <= y.length)\n        val paren_groups_with_spaces_sorted_with_paren_sorted_with_paren_sorted_with_paren\
    \ = paren_groups_with_spaces_sorted_with_paren_sorted_with_paren_sorted.map(x\
    \ => x + \"(\")\n        val paren_groups_with_spaces_sorted_with_paren_sorted_with_paren_sorted_with_paren_sorted\
    \ = paren_groups_with_spaces_sorted_with_paren_sorted_with_paren_sorted_with_paren.sortWith((x,y)\
    \ => x.length <= y.length)\n        val paren_groups_with_spaces_sorted_with_paren_sorted_with_paren_sorted_with_paren_sorted_with_paren\
    \ = paren_groups_with_spaces_sorted_with_paren_sorted_with_paren_sorted_with_paren_sorted_with_paren.map(x\
    \ => x + \"(\")\n        val paren_groups_with_spaces_sorted_with_paren_sorted_with_paren_sorted_with_paren_sorted_with_paren_sorted\
    \ = paren_groups_with_spaces_sorted_with_paren_sorted_with_paren_sorted_with_paren_sorted_with_paren.sortWith((x,y)\
    \ => x.length <= y.length)\n        val paren_groups_with_spaces_sorted_with_paren_sorted_with_paren_sorted_with_paren_sorted_with_paren_sorted_with_paren\
    \ = paren_groups_with_spaces_sorted_with_paren_sorted_with_paren_sorted_with_paren_sorted_with_paren_sorted_with_paren.map(x\
    \ => x + \"(\")\n        val paren_groups_with_spaces_sorted_with_paren_sorted_with_paren_sorted_with_paren_sorted_with_paren_sorted_with_paren_sor\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmisqn9vg.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpmisqn9vg.scala:20:111\
    \ --------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_sorted_with_paren_sorted_with_paren_sorted_with_paren_sorted_with_paren\e\
    [0m = paren_groups_with_spaces_sorted_with_paren_sorted_with_paren_sorted_with_paren_sorted_with_paren.map(\e\
    [36mx\e[0m => x + \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m                   \
    \                                                                            \
    \                ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e\
    [31m   |\e[0m  paren_groups_with_spaces_sorted_with_paren_sorted_with_paren_sorted_with_paren_sorted_with_paren\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpmisqn9vg.scala:22:129 --------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_paren_sorted_with_paren_sorted_with_paren_sorted_with_paren_sorted_with_paren\e\
    [0m = paren_groups_with_spaces_sorted_with_paren_sorted_with_paren_sorted_with_paren_sorted_with_paren_sorted_with_paren.map(\e\
    [36mx\e[0m => x + \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m                   \
    \                                                                            \
    \                                  ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_sorted_with_paren_sorted_with_paren_sorted_with_paren_sorted_with_paren_sorted_with_paren\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpmisqn9vg.scala:24:5 ---------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n"
  stdout: ''
  timestamp: 1659795612
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_group_counts = paren_groups.map(x => x.split(\"\\\\\
    )\").length).sum\n        val paren_group_lengths = paren_groups.map(x => x.split(\"\
    \\\\)\").length).max\n        val paren_group_lengths_sum = paren_group_lengths.sum\n\
    \        val paren_group_lengths_product = paren_group_lengths.product\n     \
    \   val paren_group_lengths_product_sum = paren_group_lengths_product.sum\n  \
    \      val paren_group_lengths_product_product = paren_group_lengths_product.product\n\
    \        val paren_group_lengths_product_product_sum = paren_group_lengths_product_product.sum\n\
    \        val paren_group_lengths_product_product_product = paren_group_lengths_product_product.product\n\
    \        val paren_group_lengths_product_product_product_sum = paren_group_lengths_product_product_product.sum\n\
    \        val paren_group_lengths_product_product_product_product = paren_group_lengths_product_product_product.product\n\
    \        val paren_group_lengths_product_product_product_product_sum = paren_group_lengths_product_product_product_product.sum\n\
    \        val paren_group_lengths_product_product_product_product_product = paren_group_lengths_product_product_product_product.product\n\
    \        val paren_group_lengths_product_product_product_product_product_sum =\
    \ paren_group_lengths_product_product_product_product_product.sum\n        val\
    \ paren_group_lengths_product_product_product_product_product_product = paren_group_lengths_product_product_product_product_product.product\n\
    \        val paren_group_lengths_product_product_product_product_product_product_sum\
    \ = paren_group_lengths_product_product_product_product_product_product.sum\n\
    \        val paren_group_lengths_product_product_product_product_product_product_product\
    \ = paren_group_lengths_product_product_product_product_product_product.product\n\
    \        val paren_group_lengths_product_product_product_product_product_product_product_sum\
    \ = paren_group_lengths_product_product_product_product_product_product_product.sum\n\
    \        val paren_group_lengths_product_product_product_product_product_product_product_product\
    \ = paren_group_lengths_product_product_product_product_product_product_product.product\n\
    \        val paren_group_lengths_product_product_product_product_product_product_product_product_sum\
    \ = paren_group_lengths_product_product_product_product_product_product_product_product.sum\n\
    \        val paren_group_lengths_product_product_product_product_product_product_product_product_product\
    \ = paren_group_lengths_product_product_product_product_product_product_product_product_product.product\n\
    \        val paren_group_lengths_product_product_product_product_product_product_product_product_product_sum\
    \ = paren_group_lengths_product_product_product_product_product_product_product_product_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg7lto5jv.scala:14:58 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_group_lengths_sum\e\
    [0m = paren_group_lengths.sum\n\e[31m\e[31m   |\e[0m                         \
    \             ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \                    value sum is not a member of Int\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpg7lto5jv.scala:15:62 ------------------------\e[0m\e[0m\n\
    \e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_group_lengths_product\e[0m =\
    \ paren_group_lengths.product\n\e[31m\e[31m   |\e[0m                         \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                          value product is not a member of Int\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpg7lto5jv.scala:31:106 --------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mparen_group_lengths_product_product_product_product_product_product_product_product_product\e\
    [0m = paren_group_lengths_product_product_product_product_product_product_product_product_product.product\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                  ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_group_lengths_product_product_product_product_product_product_product_product_product\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpg7lto5jv.scala:32:110 -----------------------\e[0m\e[0m\n\e[31m32 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_group_lengths_product_product_product_product_product_product_product_product_product_sum\e\
    [0m = paren_group_lengths_product_product_product_product_product_product_product_product_\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_grou"
  stdout: ''
  timestamp: 1659795612
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_group_counts = paren_groups.map(paren_group => paren_group.split(\"\
    \\\\)\").length)\n        val paren_group_counts_sorted = paren_group_counts.sortBy(_\
    \ <=> -_)\n        val paren_group_counts_sorted_with_max_count = paren_group_counts_sorted.take(paren_group_counts_sorted.length\
    \ - 1)\n        val paren_group_counts_sorted_with_max_count_sorted = paren_group_counts_sorted_with_max_count.sortBy(_\
    \ <=> -_)\n        val paren_group_counts_sorted_with_max_count_sorted_with_max_count\
    \ = paren_group_counts_sorted_with_max_count_sorted.take(paren_group_counts_sorted_with_max_count.length\
    \ - 1)\n        val paren_group_counts_sorted_with_max_count_sorted_with_max_count_sorted\
    \ = paren_group_counts_sorted_with_max_count_sorted_with_max_count.sortBy(_ <=>\
    \ -_)\n        val paren_group_counts_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count\
    \ = paren_group_counts_sorted_with_max_count_sorted_with_max_count_sorted.take(paren_group_counts_sorted_with_max_count_sorted.length\
    \ - 1)\n        val paren_group_counts_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count_sorted\
    \ = paren_group_counts_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count.sortBy(_\
    \ <=> -_)\n        val paren_group_counts_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count\
    \ = paren_group_counts_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count_sorted.take(paren_group_counts_sorted_with_max_count_sorted.length\
    \ - 1)\n        val paren_group_counts_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count_sorted\
    \ = paren_group_counts_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count.sortBy(_\
    \ <=> -_)\n        val paren_group_counts_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count\
    \ = paren_group_counts_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count_sorted.take(paren_group_counts_sorted_with_max_count_sorted.length\
    \ - 1)\n        val paren_group_counts_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count\
    \ = paren_group_counts_sorted_with_max_count_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp81nqlj9j.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mparen_group_counts_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count\e\
    [0m = paren_group_counts_sorted_with_max_count_\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_counts_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_group_counts_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E086] Syntax Error: /tmp/tmp81nqlj9j.scala:13:66 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_group_counts_sorted\e\
    [0m = paren_group_counts.sortBy(_ <=> -_)\n\e[31m\e[31m   |\e[0m             \
    \                                                     ^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                                 Wrong number of parameters, expected:\
    \ 1\n\e[31m\e[31m-- Error: /tmp/tmp81nqlj9j.scala:13:75 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_group_counts_sorted\e\
    [0m = paren_group_counts.sortBy(_ <=> -_)\n\e[31m\e[31m   |\e[0m             \
    \                                                              ^\e[0m\n\e[31m\
    \   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mInt\e[0m in\
    \ \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mChar\e[0m\
    \ in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter\
    \ ord of \e[33mmethod\e[0m \e[35msortBy\e[0m in \e[33mclass\e[0m \e[35mArrayOps\e\
    [0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp81nqlj9j.scala:24:5 -----"
  stdout: ''
  timestamp: 1659795612
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.filterNot(_ == \")\")\n        val paren_groups_flat3 =\
    \ paren_groups_flat2.filterNot(_ == \"(\")\n        val paren_groups_flat4 = paren_groups_flat3.filterNot(_\
    \ == \")\")\n        val paren_groups_flat5 = paren_groups_flat4.filterNot(_ ==\
    \ \"(\")\n        val paren_groups_flat6 = paren_groups_flat5.filterNot(_ == \"\
    )\")\n        val paren_groups_flat7 = paren_groups_flat6.filterNot(_ == \"(\"\
    )\n        val paren_groups_flat8 = paren_groups_flat7.filterNot(_ == \")\")\n\
    \        val paren_groups_flat9 = paren_groups_flat8.filterNot(_ == \"(\")\n \
    \       val paren_groups_flat10 = paren_groups_flat9.filterNot(_ == \")\")\n \
    \       val paren_groups_flat11 = paren_groups_flat10.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat12 = paren_groups_flat11.filterNot(_ == \")\")\n\
    \        val paren_groups_flat13 = paren_groups_flat12.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat14 = paren_groups_flat13.filterNot(_ == \")\")\n\
    \        val paren_groups_flat15 = paren_groups_flat14.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat16 = paren_groups_flat15.filterNot(_ == \")\")\n\
    \        val paren_groups_flat17 = paren_groups_flat16.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat18 = paren_groups_flat17.filterNot(_ == \")\")\n\
    \        val paren_groups_flat19 = paren_groups_flat18.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat20 = paren_groups_flat19.filterNot(_ == \")\")\n\
    \        val paren_groups_flat21 = paren_groups_flat20.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat22 = paren_groups_flat21.filterNot(_ == \")\")\n\
    \        val paren_groups_flat23 = paren_groups_flat22.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat24 = paren_groups_flat23.filterNot(_ == \")\")\n\
    \        val paren_groups_flat25 = paren_groups_flat24.filter\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp74rqaj8b.scala:13:61 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m\
    \ = paren_groups_flat.filterNot(_ == \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                             ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types Char and String cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- Error: /tmp/tmp74rqaj8b.scala:14:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat3\e[0m\
    \ = paren_groups_flat2.filterNot(_ == \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp74rqaj8b.scala:15:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat4\e[0m\
    \ = paren_groups_flat3.filterNot(_ == \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp74rqaj8b.scala:16:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat5\e[0m\
    \ = paren_groups_flat4.filterNot(_ == \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp74rqaj8b.scala:17:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat6\e[0m\
    \ = paren_groups_flat5.filterNot(_ == \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp74rqaj8b.scala:18:62 -----------------------------------------\e\
    [0m\e[0m\n\e"
  stdout: ''
  timestamp: 1659795604
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        var open_braces = 0\n        var closed_braces = 0\n        var open_parens\
    \ = 0\n        var close_parens = 0\n        var open_brackets = 0\n        var\
    \ closed_brackets = 0\n        var open_curly_braces = 0\n        var close_curly_braces\
    \ = 0\n        var open_curly_brackets = 0\n        var close_curly_brackets =\
    \ 0\n        var open_curly_curly_braces = 0\n        var close_curly_curly_braces\
    \ = 0\n        var open_curly_curly_brackets = 0\n        var close_curly_curly_brackets\
    \ = 0\n        var open_curly_curly_curly_braces = 0\n        var close_curly_curly_curly_braces\
    \ = 0\n        var open_curly_curly_curly_brackets = 0\n        var close_curly_curly_curly_brackets\
    \ = 0\n        var open_curly_curly_curly_curly_braces = 0\n        var close_curly_curly_curly_curly_braces\
    \ = 0\n        var open_curly_curly_curly_curly_brackets = 0\n        var close_curly_curly_curly_curly_brackets\
    \ = 0\n        var open_curly_curly_curly_curly_curly_braces = 0\n        var\
    \ close_curly_curly_curly_curly_curly_braces = 0\n        var open_curly_curly_curly_curly_curly_brackets\
    \ = 0\n        var close_curly_curly_curly_curly_curly_brackets = 0\n        var\
    \ open_curly_curly_curly_curly_curly_curly_braces = 0\n        var close_curly_curly_curly_curly_curly_curly_braces\
    \ = 0\n        var open_curly_curly_curly_curly_curly_curly_brackets = 0\n   \
    \     var close_curly_curly_curly_curly_curly_curly_brackets = 0\n        var\
    \ open_curly_curly_curly_curly_curly_curly_curly_braces = 0\n        var close_curly_curly_curly_curly_curly_curly_curly_braces\
    \ = 0\n        var open_curly_curly_curly_curly_curly_curly_curly_brackets = 0\n\
    \        var close_curly_curly_curly_curly_curly_curly_curly_brackets = 0\n  \
    \      var open_curly_curly_curly_curly_curly_curly_curly_curly_braces = 0\n \
    \       var close_curly_curly_curly_curly_curly_curly_curly_curly_braces = 0\n\
    \        var open_curly_curly_curly_curly_curly_curly_curly_curly_brackets = 0\n\
    \        var close_curly_curly_curly_curly_curly_curly_curly_curly_brackets =\
    \ 0\n        var open_curly_curly_curly_curly_curly_curly_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmehrr0al.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmehrr0al.scala:11:27\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpmehrr0al.scala:51:5 ---------------------\e[0m\e[0m\n\e[31m51\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795611
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_set = paren_groups.toSet\n        val paren_groups_list_size\
    \ = paren_groups.length\n        val paren_groups_list_size_2 = paren_groups_list_size\
    \ * 2\n        val paren_groups_list_size_3 = paren_groups_list_size_2 * 2\n \
    \       val paren_groups_list_size_4 = paren_groups_list_size_3 * 2\n        val\
    \ paren_groups_list_size_5 = paren_groups_list_size_4 * 2\n        val paren_groups_list_size_6\
    \ = paren_groups_list_size_5 * 2\n        val paren_groups_list_size_7 = paren_groups_list_size_6\
    \ * 2\n        val paren_groups_list_size_8 = paren_groups_list_size_7 * 2\n \
    \       val paren_groups_list_size_9 = paren_groups_list_size_8 * 2\n        val\
    \ paren_groups_list_size_10 = paren_groups_list_size_9 * 2\n        val paren_groups_list_size_11\
    \ = paren_groups_list_size_10 * 2\n        val paren_groups_list_size_12 = paren_groups_list_size_11\
    \ * 2\n        val paren_groups_list_size_13 = paren_groups_list_size_12 * 2\n\
    \        val paren_groups_list_size_14 = paren_groups_list_size_13 * 2\n     \
    \   val paren_groups_list_size_15 = paren_groups_list_size_14 * 2\n        val\
    \ paren_groups_list_size_16 = paren_groups_list_size_15 * 2\n        val paren_groups_list_size_17\
    \ = paren_groups_list_size_16 * 2\n        val paren_groups_list_size_18 = paren_groups_list_size_17\
    \ * 2\n        val paren_groups_list_size_19 = paren_groups_list_size_18 * 2\n\
    \        val paren_groups_list_size_20 = paren_groups_list_size_19 * 2\n     \
    \   val paren_groups_list_size_21 = paren_groups_list_size_20 * 2\n        val\
    \ paren_groups_list_size_22 = paren_groups_list_size_21 * 2\n        val paren_groups_list_size_23\
    \ = paren_groups_list_size_22 * 2\n        val paren_groups_list_size_24 = paren_groups_list_size_23\
    \ * 2\n        val paren_groups_list_size_25 = paren_groups_list_size_24 * 2\n\
    \        val paren_groups_list_size_26 = paren_groups_list_size_25 * 2\n     \
    \   val paren_groups_list_size_27 = paren_groups_list_size_26 * 2\n        val\
    \ paren_groups_list_size_28 = paren_groups_list_size_27 * 2\n        val paren_groups_list_size_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmph97v_thx.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmph97v_thx.scala:42:5 ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795612
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val open_braces = mutable.ListBuffer[String]()\n        val close_braces\
    \ = mutable.ListBuffer[String]()\n        val open_brace_counts = mutable.ListBuffer[Int]()\n\
    \        val close_brace_counts = mutable.ListBuffer[Int]()\n        val paren_group_counts\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_opens = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closes = mutable.ListBuffer[Int]()\n        val paren_group_opens_sum\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_closes_sum = mutable.ListBuffer[Int]()\n\
    \        val paren_group_opens_product = mutable.ListBuffer[Int]()\n        val\
    \ paren_group_closes_product = mutable.ListBuffer[Int]()\n        val paren_group_opens_product_sum\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_closes_product_sum = mutable.ListBuffer[Int]()\n\
    \        val paren_group_opens_product_product = mutable.ListBuffer[Int]()\n \
    \       val paren_group_closes_product_product = mutable.ListBuffer[Int]()\n \
    \       val paren_group_opens_product_product_sum = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closes_product_product_sum = mutable.ListBuffer[Int]()\n\
    \        val paren_group_opens_product_product_product = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closes_product_product_product = mutable.ListBuffer[Int]()\n\
    \        val paren_group_opens_product_product_product_sum = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closes_product_product_product_sum = mutable.ListBuffer[Int]()\n\
    \        val paren_group_opens_product_product_product_product = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closes_product_product_product_product = mutable.ListBuffer[Int]()\n\
    \        val paren_group_opens_product_product_product_product_sum = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closes_product_product_product_product_sum = mutable.ListBuffer[Int]()\n\
    \        val paren_group_opens_product_product_product_product_product = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closes_product_product_product_product_product = mutable.ListBuffer\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp98n06w2t.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp98n06w2t.scala:12:26 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mopen_braces\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp98n06w2t.scala:13:27 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mclose_braces\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp98n06w2t.scala:14:32 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mopen_brace_counts\e[0m =\
    \ mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp98n06w2t.scala:15:33\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mclose_brace_counts\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                                 ^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                            Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found"
  stdout: ''
  timestamp: 1659795611
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").map(_.trim).toList\n        val open_paren_groups = paren_groups.filter(_.contains(\"\
    (\"))\n        val close_paren_groups = paren_groups.filter(_.contains(\")\"))\n\
    \        val open_paren_groups_count = open_paren_groups.length\n        val close_paren_groups_count\
    \ = close_paren_groups.length\n        val open_paren_groups_count_not_nested\
    \ = open_paren_groups_count - close_paren_groups_count\n        val close_paren_groups_count_not_nested\
    \ = close_paren_groups_count - open_paren_groups_count\n        val open_paren_groups_count_not_nested_or_zero\
    \ = open_paren_groups_count_not_nested + open_paren_groups_count - close_paren_groups_count_not_nested\n\
    \        val close_paren_groups_count_not_nested_or_zero = close_paren_groups_count_not_nested\
    \ + close_paren_groups_count - open_paren_groups_count_not_nested\n        val\
    \ open_paren_groups_count_not_nested_or_zero_or_zero = open_paren_groups_count_not_nested_or_zero\
    \ + open_paren_groups_count_not_nested + open_paren_groups_count - close_paren_groups_count_not_nested_or_zero\n\
    \        val close_paren_groups_count_not_nested_or_zero_or_zero = close_paren_groups_count_not_nested_or_zero\
    \ + close_paren_groups_count_not_nested + close_paren_groups_count - open_paren_groups_count_not_nested_or_zero\n\
    \        val open_paren_groups_count_not_nested_or_zero_or_zero_or_zero = open_paren_groups_count_not_nested_or_zero_or_zero\
    \ + open_paren_groups_count_not_nested_or_zero + open_paren_groups_count_not_nested\
    \ + open_paren_groups_count - close_paren_groups_count_not_nested_or_zero_or_zero\n\
    \        val close_paren_groups_count_not_nested_or_zero_or_zero_or_zero = close_paren_groups_count_not_nested_or_zero_or_zero\
    \ + close_paren_groups_count_not_nested_or_zero + close_paren_groups_count_not_nested\
    \ + close_paren_groups_count - open_paren_groups_count_not_nested_or_zero_or_zero\n\
    \        val open_paren_groups_count_not_nested_or_zero_or_zero_or_zero_or_zero\
    \ = open_paren_groups_count_not_nested_or_zero_or_zero_or_zero + open_paren_groups_count_not_nested_or_zero_or_zero\
    \ + open_paren_groups_count_not_nested_or_zero + open_paren_groups_count_not_nested\
    \ + open_paren_groups_count - close_paren_groups_count_not_nested_or_zero_or_zero_or_zero\n\
    \        val close_paren_groups_count_not_nested_or_zero_or_zero_or_zero_\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpaqv12ec5.scala:26:4 ----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpaqv12ec5.scala:26:5 ---------------------\e[0m\e[0m\n\e[31m26 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795612
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat3\
    \ = paren_groups_flat2.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat4\
    \ = paren_groups_flat3.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat5\
    \ = paren_groups_flat4.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat6\
    \ = paren_groups_flat5.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat7\
    \ = paren_groups_flat6.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat8\
    \ = paren_groups_flat7.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat9\
    \ = paren_groups_flat8.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat10\
    \ = paren_groups_flat9.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat11\
    \ = paren_groups_flat10.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat12\
    \ = paren_groups_flat11.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat13\
    \ = paren_groups_flat12.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat14\
    \ = paren_groups_flat13.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat15\
    \ = paren_groups_flat14.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat16\
    \ = paren_groups_flat15.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat17\
    \ = paren_groups_flat16.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat18\
    \ = paren_groups_flat17.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat19\
    \ = paren_groups_flat18.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat20\
    \ = paren_groups_flat19.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat21\
    \ = paren_groups_flat20.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat22\
    \ = paren_groups_flat21.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat23\
    \ = paren_groups_flat22.flat\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2zketgwa.scala:13:66 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m\
    \ = paren_groups_flat.flatMap(\e[36mx\e[0m => x.split(\e[31m\"\\\\)\"\e[0m))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                                     value\
    \ split is not a member of Char\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2zketgwa.scala:35:5\
    \ ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.distinct\n        val paren_groups_flat3 = paren_groups_flat2.filter(_\
    \ != \"\\\\\")\n        val paren_groups_flat4 = paren_groups_flat3.filter(_ !=\
    \ \"\\\\\")\n        val paren_groups_flat5 = paren_groups_flat4.filter(_ != \"\
    \\\\\")\n        val paren_groups_flat6 = paren_groups_flat5.filter(_ != \"\\\\\
    \")\n        val paren_groups_flat7 = paren_groups_flat6.filter(_ != \"\\\\\"\
    )\n        val paren_groups_flat8 = paren_groups_flat7.filter(_ != \"\\\\\")\n\
    \        val paren_groups_flat9 = paren_groups_flat8.filter(_ != \"\\\\\")\n \
    \       val paren_groups_flat10 = paren_groups_flat9.filter(_ != \"\\\\\")\n \
    \       val paren_groups_flat11 = paren_groups_flat10.filter(_ != \"\\\\\")\n\
    \        val paren_groups_flat12 = paren_groups_flat11.filter(_ != \"\\\\\")\n\
    \        val paren_groups_flat13 = paren_groups_flat12.filter(_ != \"\\\\\")\n\
    \        val paren_groups_flat14 = paren_groups_flat13.filter(_ != \"\\\\\")\n\
    \        val paren_groups_flat15 = paren_groups_flat14.filter(_ != \"\\\\\")\n\
    \        val paren_groups_flat16 = paren_groups_flat15.filter(_ != \"\\\\\")\n\
    \        val paren_groups_flat17 = paren_groups_flat16.filter(_ != \"\\\\\")\n\
    \        val paren_groups_flat18 = paren_groups_flat17.filter(_ != \"\\\\\")\n\
    \        val paren_groups_flat19 = paren_groups_flat18.filter(_ != \"\\\\\")\n\
    \        val paren_groups_flat20 = paren_groups_flat19.filter(_ != \"\\\\\")\n\
    \        val paren_groups_flat21 = paren_groups_flat20.filter(_ != \"\\\\\")\n\
    \        val paren_groups_flat22 = paren_groups_flat21.filter(_ != \"\\\\\")\n\
    \        val paren_groups_flat23 = paren_groups_flat22.filter(_ != \"\\\\\")\n\
    \        val paren_groups_flat24 = paren_groups_flat23.filter(_ != \"\\\\\")\n\
    \        val paren_groups_flat25 = paren_groups_flat24.filter(_ != \"\\\\\")\n\
    \        val paren_groups_flat26 = paren_groups_flat25.filter(_ != \"\\\\\")\n\
    \        val paren_groups_flat27 = paren_groups_flat26.filter(_ != \"\\\\\")\n\
    \        val paren_groups_flat28\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7p62slwn.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmp7p62slwn.scala:14:59\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m14 |\e[0m       \
    \ \e[33mval\e[0m \e[36mparen_groups_flat3\e[0m = paren_groups_flat2.filter(_ !=\
    \ \e[31m\"\\\\\"\e[0m)\n\e[31m\e[31m   |\e[0m                                \
    \                           ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp7p62slwn.scala:15:59\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m15 |\e[0m       \
    \ \e[33mval\e[0m \e[36mparen_groups_flat4\e[0m = paren_groups_flat3.filter(_ !=\
    \ \e[31m\"\\\\\"\e[0m)\n\e[31m\e[31m   |\e[0m                                \
    \                           ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp7p62slwn.scala:16:59\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m16 |\e[0m       \
    \ \e[33mval\e[0m \e[36mparen_groups_flat5\e[0m = paren_groups_flat4.filter(_ !=\
    \ \e[31m\"\\\\\"\e[0m)\n\e[31m\e[31m   |\e[0m                                \
    \                           ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp7p62slwn.scala:17:59\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m17 |\e[0m       \
    \ \e[33mval\e[0m \e[36mparen_groups_flat6\e[0m = paren_groups_flat5.filter(_ !=\
    \ \e[31m\"\\\\\"\e[0m)\n\e[31m\e[31m   |\e[0m                                \
    \                           ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp7p62slwn.scala:18:59\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m18 |\e[0m       \
    \ \e[33mval\e[0m \e[36mparen_groups_flat7\e[0m = paren_groups_flat6.filter(_ !=\
    \ \e[31m\"\\\\\"\e[0m)\n\e[31m\e[31m   |\e[0m                                \
    \                           ^^^^^^^^^\e[0m\n\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1659795617
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_group_strings = paren_groups.map(x => x.replace(\"\
    )\", \"\"))\n        val paren_group_strings_sorted = paren_group_strings.sortWith((x,\
    \ y) => x.compareTo(y) == -1)\n        val paren_group_strings_sorted_with_open_braces\
    \ = paren_group_strings_sorted.map(x => x.replace(\"(\", \"{\").replace(\")\"\
    , \"}\"))\n        val paren_group_strings_sorted_with_open_braces_without_spaces\
    \ = paren_group_strings_sorted_with_open_braces.map(x => x.replace(\"{\", \"{\\\
    n\"))\n        val paren_group_strings_sorted_with_open_braces_without_spaces_without_braces\
    \ = paren_group_strings_sorted_with_open_braces_without_spaces.map(x => x.replace(\"\
    }\", \"\\n}\"))\n        val paren_group_strings_sorted_with_open_braces_without_spaces_without_braces_without_spaces\
    \ = paren_group_strings_sorted_with_open_braces_without_spaces_without_braces.map(x\
    \ => x.replace(\"{\\n\", \"\\n\"))\n        val paren_group_strings_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_braces\
    \ = paren_group_strings_sorted_with_open_braces_without_spaces_without_braces_without_spaces.map(x\
    \ => x.replace(\"\\n}\", \"\\n\"))\n        val paren_group_strings_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_braces_without_spaces\
    \ = paren_group_strings_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_braces.map(x\
    \ => x.replace(\"\\n\", \"\\n\"))\n        val paren_group_strings_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_braces_without_spaces_without_braces\
    \ = paren_group_strings_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_braces_without_spaces.map(x\
    \ => x.replace(\"\\n}\", \"\\n\"))\n        val paren_group_strings_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_braces_without_spaces_without_braces_without_spaces\
    \ = paren_group_strings_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_braces_without_spaces_without_braces.map(x\
    \ => x.replace(\"\\n\", \"\\n\"))\n        val paren_group_strings_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_braces_without_spaces_without_brace\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwxjbeicm.scala:23:4 ----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpwxjbeicm.scala:23:5 ---------------------\e[0m\e[0m\n\e[31m23 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795613
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.filterNot(_ == \")\")\n        val paren_groups_flat3 =\
    \ paren_groups_flat2.filterNot(_ == \"(\")\n        val paren_groups_flat4 = paren_groups_flat3.filterNot(_\
    \ == \" \")\n        val paren_groups_flat5 = paren_groups_flat4.filterNot(_ ==\
    \ \"\\\\(\")\n        val paren_groups_flat6 = paren_groups_flat5.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat7 = paren_groups_flat6.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat8 = paren_groups_flat7.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat9 = paren_groups_flat8.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat10 = paren_groups_flat9.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat11 = paren_groups_flat10.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat12 = paren_groups_flat11.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat13 = paren_groups_flat12.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat14 = paren_groups_flat13.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat15 = paren_groups_flat14.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat16 = paren_groups_flat15.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat17 = paren_groups_flat16.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat18 = paren_groups_flat17.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat19 = paren_groups_flat18.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat20 = paren_groups_flat19.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat21 = paren_groups_flat20.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat22 = paren_groups_flat21.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat23 = paren_groups_flat22.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat24 = paren_groups_flat23.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat25 = paren_groups_flat24.filter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp9brdvuty.scala:13:61 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m\
    \ = paren_groups_flat.filterNot(_ == \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                             ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types Char and String cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- Error: /tmp/tmp9brdvuty.scala:14:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat3\e[0m\
    \ = paren_groups_flat2.filterNot(_ == \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp9brdvuty.scala:15:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat4\e[0m\
    \ = paren_groups_flat3.filterNot(_ == \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp9brdvuty.scala:16:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat5\e[0m\
    \ = paren_groups_flat4.filterNot(_ == \e[31m\"\\\\(\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                              ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp9brdvuty.scala:17:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat6\e[0m\
    \ = paren_groups_flat5.filterNot(_ == \e[31m\"\\\\)\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                              ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp9brdvuty.scala:18:62 -----------------------------------------\e\
    ["
  stdout: ''
  timestamp: 1659795617
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer.empty[String]\n\
    \        val paren_group_stack = mutable.ListBuffer.empty[String]\n        val\
    \ paren_group_open = mutable.ListBuffer.empty[String]\n        val paren_group_closed\
    \ = mutable.ListBuffer.empty[String]\n        paren_string.foreach { char =>\n\
    \            if (char == '(') {\n                paren_group_open += char\n  \
    \              paren_group_stack += char\n            } else if (char == ')')\
    \ {\n                paren_group_closed += char\n                paren_group_stack\
    \ += char\n            } else if (char == ' ') {\n                paren_groups\
    \ += paren_group_open\n                paren_groups += paren_group_closed\n  \
    \              paren_group_open = paren_group_closed = paren_group_stack.empty\n\
    \                paren_groups += char\n            } else {\n                paren_groups\
    \ += char\n            }\n        }\n        paren_groups += paren_group_open\n\
    \        paren_groups += paren_group_closed\n        paren_groups\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()())\
    \ ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\"\
    , \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwfpjo98w.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpwfpjo98w.scala:12:32 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_group_stack\e[0m =\
    \ mutable.ListBuffer.empty[\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m         \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpwfpjo98w.scala:13:31 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_group_open\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                               ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwfpjo98w.scala:14:33 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_group_closed\e[0m\
    \ = mutable.ListBuffer.empty[\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \            Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error:\
    \ /tmp/tmpwfpjo98w.scala:25:54 -----------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m                paren_group_open = paren_group_closed = paren_group_stack.empty\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Reassignment to val paren_group_closed\n\
    \e[31m   |\e["
  stdout: ''
  timestamp: 1659795610
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_trimmed = paren_groups_with_spaces.map(x\
    \ => x.trim())\n        val paren_groups_with_spaces_trimmed_flat = paren_groups_with_spaces_trimmed.flatMap(x\
    \ => x.split(\"\\\\s+\"))\n        val paren_groups_with_spaces_trimmed_flat =\
    \ paren_groups_with_spaces_trimmed.flatMap(x => x.split(\"\\\\s+\"))\n       \
    \ val paren_groups_with_spaces_trimmed_flat = paren_groups_with_spaces_trimmed.flatMap(x\
    \ => x.split(\"\\\\s+\"))\n        val paren_groups_with_spaces_trimmed_flat =\
    \ paren_groups_with_spaces_trimmed.flatMap(x => x.split(\"\\\\s+\"))\n       \
    \ val paren_groups_with_spaces_trimmed_flat = paren_groups_with_spaces_trimmed.flatMap(x\
    \ => x.split(\"\\\\s+\"))\n        val paren_groups_with_spaces_trimmed_flat =\
    \ paren_groups_with_spaces_trimmed.flatMap(x => x.split(\"\\\\s+\"))\n       \
    \ val paren_groups_with_spaces_trimmed_flat = paren_groups_with_spaces_trimmed.flatMap(x\
    \ => x.split(\"\\\\s+\"))\n        val paren_groups_with_spaces_trimmed_flat =\
    \ paren_groups_with_spaces_trimmed.flatMap(x => x.split(\"\\\\s+\"))\n       \
    \ val paren_groups_with_spaces_trimmed_flat = paren_groups_with_spaces_trimmed.flatMap(x\
    \ => x.split(\"\\\\s+\"))\n        val paren_groups_with_spaces_trimmed_flat =\
    \ paren_groups_with_spaces_trimmed.flatMap(x => x.split(\"\\\\s+\"))\n       \
    \ val paren_groups_with_spaces_trimmed_flat = paren_groups_with_spaces_trimmed.flatMap(x\
    \ => x.split(\"\\\\s+\"))\n        val paren_groups_with_spaces_trimmed_flat =\
    \ paren_groups_with_spaces_trimmed.flatMap(x => x.split(\"\\\\s+\"))\n       \
    \ val paren_groups_with_spaces_trimmed_flat = paren_groups_with_spaces_trimmed.flatMap(x\
    \ => x.split(\"\\\\s+\"))\n        val paren_groups_with_spaces_trimmed_flat =\
    \ paren_groups_with_spaces_trimmed.flatMap(x => x.split(\"\\\\s+\"))\n       \
    \ val paren_groups_with_spaces_trimmed_flat = paren_groups_with_spaces_\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()())\
    \ ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\"\
    , \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbmcw332k.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_trimmed_flat\e\
    [0m = paren_groups_with_spaces_trimmed.flatMap(\e[36mx\e[0m => x.split(\e[31m\"\
    \\\\s+\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_with_spaces_trimmed_flat is already defined as\
    \ \e[33mvalue\e[0m \e[35mparen_groups_with_spaces_trimmed_flat\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbmcw332k.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_trimmed_flat\e[0m = paren_groups_with_spaces_trimmed.flatMap(\e\
    [36mx\e[0m => x.split(\e[31m\"\\\\s+\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_with_spaces_trimmed_flat is already defined as\
    \ \e[33mvalue\e[0m \e[35mparen_groups_with_spaces_trimmed_flat\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbmcw332k.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_trimmed_flat\e[0m = paren_groups_with_spaces_trimmed.flatMap(\e\
    [36mx\e[0m => x.split(\e[31m\"\\\\s+\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_with_spaces_trimmed_flat is already defined as\
    \ \e[33mvalue\e[0m \e[35mparen_groups_with_spaces_trimmed_flat\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbmcw332k.scala:18:12\
    \ --------------------------"
  stdout: ''
  timestamp: 1659795615
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_trimmed = paren_groups_with_spaces.map(x\
    \ => x.trim())\n        val paren_groups_with_spaces_trimmed_without_spaces =\
    \ paren_groups_with_spaces_trimmed.map(x => x.replace(\"  \", \" \"))\n      \
    \  val paren_groups_with_spaces_trimmed_without_spaces_without_spaces = paren_groups_with_spaces_trimmed_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_trimmed_without_spaces_without_spaces.map(x => x.replace(\"\
    \  \", \" \"))\n        val paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphyawv4rp.scala:23:4 ----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmphyawv4rp.scala:20:152\
    \ --------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"  \"\e[0m, \e[31m\" \"\e[0m))\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \                                                                            \
    \       ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e\
    [0m  paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmphyawv4rp.scala:21:167 --------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"  \"\e[0m, \e[31m\" \"\e[0m))\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \                                                                            \
    \                      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\
    \e[31m   |\e[0m  paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_"
  stdout: ''
  timestamp: 1659795614
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat3\
    \ = paren_groups_flat2.filter(x => x.nonEmpty)\n        paren_groups_flat3.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnb6bazao.scala:13:66 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m\
    \ = paren_groups_flat.flatMap(\e[36mx\e[0m => x.split(\e[31m\"\\\\)\"\e[0m))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                                     value\
    \ split is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659795614
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_size = paren_groups.length\n        val paren_groups_size_reversed\
    \ = paren_groups_size.reverse\n        val paren_groups_size_reversed_size = paren_groups_size_reversed.length\n\
    \        val paren_groups_size_reversed_size_reversed = paren_groups_size_reversed_size.reverse\n\
    \        val paren_groups_size_reversed_size_reversed_size = paren_groups_size_reversed_size_reversed.length\n\
    \        val paren_groups_size_reversed_size_reversed_size_reversed = paren_groups_size_reversed_size_reversed_size.reverse\n\
    \        val paren_groups_size_reversed_size_reversed_size_reversed_size = paren_groups_size_reversed_size_reversed_size_reversed.length\n\
    \        val paren_groups_size_reversed_size_reversed_size_reversed_size_reversed\
    \ = paren_groups_size_reversed_size_reversed_size_reversed_size.reverse\n    \
    \    val paren_groups_size_reversed_size_reversed_size_reversed_size_reversed_size\
    \ = paren_groups_size_reversed_size_reversed_size_reversed_size_reversed.length\n\
    \        val paren_groups_size_reversed_size_reversed_size_reversed_size_reversed_size_reversed\
    \ = paren_groups_size_reversed_size_reversed_size_reversed_size_reversed_size.reverse\n\
    \        val paren_groups_size_reversed_size_reversed_size_reversed_size_reversed_size_reversed_size\
    \ = paren_groups_size_reversed_size_reversed_size_reversed_size_reversed_size_reversed.length\n\
    \        val paren_groups_size_reversed_size_reversed_size_reversed_size_reversed_size_reversed_size_reversed_size\
    \ = paren_groups_size_reversed_size_reversed_size_reversed_size_reversed_size_reversed_size_reversed.length\n\
    \        val paren_groups_size_reversed_size_reversed_size_reversed_size_reversed_size_reversed_size_reversed_size_reversed_size\
    \ = paren_groups_size_reversed_size_reversed_size_reversed_size_reversed_size_reversed_size_reversed_size_reversed.length\n\
    \        val paren_groups_size_reversed_size_reversed_size_reversed_size_reversed_size_reversed_size_reversed_size_re\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsp8w013x.scala:26:4 ----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsp8w013x.scala:13:59\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_size_reversed\e[0m = paren_groups_size.reverse\n\e[31m\e[31m\
    \   |\e[0m                                         ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value reverse is not a\
    \ member of Int\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsp8w013x.scala:23:116\
    \ -----------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_size_reversed_size_reversed_size_reversed_size_reversed_size_reversed_size_reversed_size\e\
    [0m = paren_groups_size_reversed_size_reversed_size_reversed_size_reversed_size_reversed_size_reversed.length\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_size_reversed_size_reversed_size_reversed_size_reversed_size_reversed_size_reversed\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsp8w013x.scala:24:130\
    \ -----------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_size_reversed_size_reversed_size_reversed_size_reversed_size_reversed_size_reversed_size_reversed_size\e\
    [0m = paren_groups_size_reversed_size_reversed_size_reversed_size_reversed_size_reversed_size_reversed_size_reversed.length\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_size_reversed"
  stdout: ''
  timestamp: 1659795615
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replace(\" \"\
    , \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpnjw4k5um.scala:23:268 --------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                            ^\e[0m\n\e[31m  \
    \ |\e[0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpnjw4k5um.scala:24:4\
    \ ------------------------------------------\e[0m\e[0m\n\e[31m24 |\e[0m    }\n\
    \e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both\
    \ \e[33mobject\e[0m \e[35mDeprecatedDoubleOrdering\e[0m in \e[33mobject\e[0m \e\
    [35mOrdering\e[0m and \e[33mobject\e[0m \e[35mChar\e[0m in \e[33mobject\e[0m \e\
    [35mOrdering\e[0m match type Ordering[B] of parameter ord of \e[33mmethod\e[0m\
    \ \e[35msortBy\e[0m in \e[33mclass\e[0m \e[35mArrayOps\e[0m\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpnjw4k5um.scala:24:5 ---------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659795617
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_open_braces = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"\"))\n        val paren_groups_with_open_braces_with_brackets\
    \ = paren_groups_with_open_braces.map(x => x.replace(\")\", \"\").replace(\"(\"\
    , \"\") + \"[\" + x + \"]\")\n        val paren_groups_with_open_braces_with_brackets_with_brackets\
    \ = paren_groups_with_open_braces_with_brackets.map(x => x.replace(\")\", \"\"\
    ).replace(\"(\", \"\") + \"[\" + x + \"]\" + \"[\" + x + \"]\")\n        val paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_open_braces_with_brackets_with_brackets.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"\") + \"[\" + x + \"]\" + \"[\" + x + \"]\" + \"[\"\
    \ + x + \"]\")\n        val paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets.map(x\
    \ => x.replace(\")\", \"\").replace(\"(\", \"\") + \"[\" + x + \"]\" + \"[\" +\
    \ x + \"]\" + \"[\" + x + \"]\" + \"[\" + x + \"]\")\n        val paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets.map(x\
    \ => x.replace(\")\", \"\").replace(\"(\", \"\") + \"[\" + x + \"]\" + \"[\" +\
    \ x + \"]\" + \"[\" + x + \"]\" + \"[\" + x + \"]\" + \"[\" + x + \"]\")\n   \
    \     val paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\n\
    \        val paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_bracket\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptx6kz9or.scala:20:4 ----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmptx6kz9or.scala:17:114\
    \ --------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\e\
    [0m = paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets.map(\e\
    [36mx\e[0m => x.replace(\e[31m\")\"\e[0m, \e[31m\"\"\e[0m).replace(\e[31m\"(\"\
    \e[0m, \e[31m\"\"\e[0m) + \e[31m\"[\"\e[0m + x + \e[31m\"]\"\e[0m + \e[31m\"[\"\
    \e[0m + x + \e[31m\"]\"\e[0m + \e[31m\"[\"\e[0m + x + \e[31m\"]\"\e[0m + \e[31m\"\
    [\"\e[0m + x + \e[31m\"]\"\e[0m + \e[31m\"[\"\e[0m + x + \e[31m\"]\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                                                        ^\e[0m\n\e[31m   |\e\
    [0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmptx6kz9or.scala:18:128 -----------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\e\
    [0m = paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\n\
    \e[31m   |\e[0m\n\e[31m   "
  stdout: ''
  timestamp: 1659795617
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_group_counts = paren_groups.map(x => x.split(\"\\\\\
    )\").length)\n        val paren_group_counts_sum = paren_group_counts.sum\n  \
    \      val paren_group_counts_product = paren_group_counts.product\n        val\
    \ paren_group_counts_product2 = paren_group_counts_product * paren_group_counts_product\n\
    \        val paren_group_counts_product3 = paren_group_counts_product2 * paren_group_counts_product\n\
    \        val paren_group_counts_product4 = paren_group_counts_product3 * paren_group_counts_product\n\
    \        val paren_group_counts_product5 = paren_group_counts_product4 * paren_group_counts_product\n\
    \        val paren_group_counts_product6 = paren_group_counts_product5 * paren_group_counts_product\n\
    \        val paren_group_counts_product7 = paren_group_counts_product6 * paren_group_counts_product\n\
    \        val paren_group_counts_product8 = paren_group_counts_product7 * paren_group_counts_product\n\
    \        val paren_group_counts_product9 = paren_group_counts_product8 * paren_group_counts_product\n\
    \        val paren_group_counts_product10 = paren_group_counts_product9 * paren_group_counts_product\n\
    \        val paren_group_counts_product11 = paren_group_counts_product10 * paren_group_counts_product\n\
    \        val paren_group_counts_product12 = paren_group_counts_product11 * paren_group_counts_product\n\
    \        val paren_group_counts_product13 = paren_group_counts_product12 * paren_group_counts_product\n\
    \        val paren_group_counts_product14 = paren_group_counts_product13 * paren_group_counts_product\n\
    \        val paren_group_counts_product15 = paren_group_counts_product14 * paren_group_counts_product\n\
    \        val paren_group_counts_product16 = paren_group_counts_product15 * paren_group_counts_product\n\
    \        val paren_group_counts_product17 = paren_group_counts_product16 * paren_group_counts_product\n\
    \        val paren_group_counts_product18 = paren_group_counts_product17 * paren_group_counts_product\n\
    \        val paren_group_counts_product19 = paren_group_counts_product18 * paren_group_counts_product\n\
    \        val paren_group_counts_product20 = paren_group_counts_product19\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3az9zfty.scala:34:5\
    \ ---------------------\e[0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795617
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(|\\\\)\")\n        val paren_group_count = paren_groups.length\n        val\
    \ paren_groups_with_open_braces = paren_groups.map(x => if (x.contains(\"(\"))\
    \ \"(\" + x else x)\n        val paren_groups_with_close_braces = paren_groups.map(x\
    \ => if (x.contains(\")\")) x + \")\" else x)\n        val paren_groups_with_open_braces_count\
    \ = paren_groups_with_open_braces.length\n        val paren_groups_with_close_braces_count\
    \ = paren_groups_with_close_braces.length\n        val paren_groups_with_open_braces_not_nested\
    \ = paren_groups_with_open_braces.filter(x => !paren_groups_with_close_braces.contains(x))\n\
    \        val paren_groups_with_close_braces_not_nested = paren_groups_with_close_braces.filter(x\
    \ => !paren_groups_with_open_braces.contains(x))\n        val paren_groups_with_open_braces_not_nested_count\
    \ = paren_groups_with_open_braces_not_nested.length\n        val paren_groups_with_close_braces_not_nested_count\
    \ = paren_groups_with_close_braces_not_nested.length\n        val paren_groups_with_open_braces_not_nested_not_balanced\
    \ = paren_groups_with_open_braces_not_nested.filter(x => !paren_groups_with_close_braces_not_nested.contains(x))\n\
    \        val paren_groups_with_close_braces_not_nested_not_balanced = paren_groups_with_close_braces_not_nested.filter(x\
    \ => !paren_groups_with_open_braces_not_nested.contains(x))\n        val paren_groups_with_open_braces_not_nested_not_balanced_count\
    \ = paren_groups_with_open_braces_not_nested_not_balanced.length\n        val\
    \ paren_groups_with_close_braces_not_nested_not_balanced_count = paren_groups_with_close_braces_not_nested_not_balanced.length\n\
    \        val paren_groups_with_open_braces_not_nested_not_balanced_not_nested\
    \ = paren_groups_with_open_braces_not_nested_not_balanced.filter(x => !paren_groups_with_close_braces_not_nested_not_balanced.contains(x))\n\
    \        val paren_groups_with_close_braces_not_nested_not_balanced_not_nested\
    \ = paren_groups_with_close_braces_not_nested_not_balanced.filter(x => !paren_groups_with_open_braces_not_nested_not_balanced.contains(x))\n\
    \        val paren_groups_with_open_braces_not_nested_not_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2x_5sxds.scala:28:4 ----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp2x_5sxds.scala:28:5 ---------------------\e[0m\e[0m\n\e[31m28 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795618
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat_reversed\
    \ = paren_groups_flat.reverse\n        val paren_groups_flat_reversed_flat = paren_groups_flat_reversed.flatten\n\
    \        val paren_groups_flat_reversed_flat_reversed = paren_groups_flat_reversed_flat.reverse\n\
    \        val paren_groups_flat_reversed_flat_reversed_flat = paren_groups_flat_reversed_flat_reversed.flatten\n\
    \        val paren_groups_flat_reversed_flat_reversed_flat_reversed = paren_groups_flat_reversed_flat_reversed_flat.reverse\n\
    \        val paren_groups_flat_reversed_flat_reversed_flat_reversed_flat = paren_groups_flat_reversed_flat_reversed_flat_reversed.flatten\n\
    \        val paren_groups_flat_reversed_flat_reversed_flat_reversed_flat_reversed\
    \ = paren_groups_flat_reversed_flat_reversed_flat_reversed_flat.reverse\n    \
    \    val paren_groups_flat_reversed_flat_reversed_flat_reversed_flat_reversed_flat\
    \ = paren_groups_flat_reversed_flat_reversed_flat_reversed_flat_reversed_flat.reverse\n\
    \        val paren_groups_flat_reversed_flat_reversed_flat_reversed_flat_reversed_flat_reversed\
    \ = paren_groups_flat_reversed_flat_reversed_flat_reversed_flat_reversed_flat.reverse\n\
    \        val paren_groups_flat_reversed_flat_reversed_flat_reversed_flat_reversed_flat_reversed_flat\
    \ = paren_groups_flat_reversed_flat_reversed_flat_reversed_flat_reversed_flat_reversed_flat.reverse\n\
    \        val paren_groups_flat_reversed_flat_reversed_flat_reversed_flat_reversed_flat_reversed_flat_reversed_flat\
    \ = paren_groups_flat_reversed_flat_reversed_flat_reversed_flat_reversed_flat_reversed_flat_reversed_flat.reverse\n\
    \        val paren_groups_flat_reversed_flat_reversed_flat_reversed_flat_reversed_flat_reversed_flat_reversed_flat_reversed_flat\
    \ = paren_groups_flat_reversed_flat_reversed_flat_reversed_flat_reversed_flat_reversed_flat_reversed_flat_reversed_flat.reverse\n\
    \        val paren_groups_flat_reversed_flat_reversed_flat_reversed_flat_re\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3mhc753b.scala:26:4 ----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmp3mhc753b.scala:14:80\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m14 |\e[0m       \
    \ \e[33mval\e[0m \e[36mparen_groups_flat_reversed_flat\e[0m = paren_groups_flat_reversed.flatten\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                        ^\e[0m\n\e[31m   |\e[0mno given instance of type Char\
    \ => IterableOnce[B] was found for parameter asIterable of \e[33mmethod\e[0m \e\
    [35mflatten\e[0m in \e[33mclass\e[0m \e[35mArrayOps\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mwhere:    B is a type variable\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp3mhc753b.scala:20:88 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat_reversed_flat_reversed_flat_reversed_flat_reversed_flat\e\
    [0m = paren_groups_flat_reversed_flat_reversed_flat_reversed_flat_reversed_flat.reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35mparen_groups_flat_reversed_flat_reversed_flat_reversed_flat_reversed_flat\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp3mhc753b.scala:22:102\
    \ --------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_flat_reversed_flat_reversed_flat_reversed_flat_reversed_flat_reversed_flat\e\
    [0m = paren_groups_flat_reversed_flat_reversed_flat_reversed_flat_reversed_flat_reversed_flat.reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                              ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_flat_reversed_flat_reversed_flat_reversed_flat_reversed_flat_reversed_flat\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ avail"
  stdout: ''
  timestamp: 1659795621
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces.map(x => x.trim).filter(x => !x.isEmpty)\n\
    \        val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted = paren_groups_with_spaces_sorted_with_spaces_trimmed.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces.map(x\
    \ => x.trim).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted.map(x\
    \ => x.trim).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvr77txgc.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvr77txgc.scala:21:120\
    \ -----------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted.map(\e\
    [36mx\e[0m => x.trim).filter(\e[36mx\e[0m => !x.isEmpty)\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvr77txgc.scala:22:139\
    \ -----------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed.map(\e\
    [36mx\e[0m => x.replace(\e[31m\")\"\e[0m, \e[31m\" ) \"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanat"
  stdout: ''
  timestamp: 1659795623
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.filterNot(_ == \")\")\n        val paren_groups_flat3 =\
    \ paren_groups_flat2.filterNot(_ == \"(\")\n        val paren_groups_flat4 = paren_groups_flat3.filterNot(_\
    \ == \" \")\n        val paren_groups_flat5 = paren_groups_flat4.filterNot(_ ==\
    \ \"\")\n        val paren_groups_flat6 = paren_groups_flat5.filterNot(_ == \"\
    (\")\n        val paren_groups_flat7 = paren_groups_flat6.filterNot(_ == \")\"\
    )\n        val paren_groups_flat8 = paren_groups_flat7.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat9 = paren_groups_flat8.filterNot(_ == \" \")\n \
    \       val paren_groups_flat10 = paren_groups_flat9.filterNot(_ == \"\")\n  \
    \      val paren_groups_flat11 = paren_groups_flat10.filterNot(_ == \"(\")\n \
    \       val paren_groups_flat12 = paren_groups_flat11.filterNot(_ == \")\")\n\
    \        val paren_groups_flat13 = paren_groups_flat12.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat14 = paren_groups_flat13.filterNot(_ == \" \")\n\
    \        val paren_groups_flat15 = paren_groups_flat14.filterNot(_ == \"\")\n\
    \        val paren_groups_flat16 = paren_groups_flat15.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat17 = paren_groups_flat16.filterNot(_ == \")\")\n\
    \        val paren_groups_flat18 = paren_groups_flat17.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat19 = paren_groups_flat18.filterNot(_ == \" \")\n\
    \        val paren_groups_flat20 = paren_groups_flat19.filterNot(_ == \"\")\n\
    \        val paren_groups_flat21 = paren_groups_flat20.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat22 = paren_groups_flat21.filterNot(_ == \")\")\n\
    \        val paren_groups_flat23 = paren_groups_flat22.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat24 = paren_groups_flat23.filterNot(_ == \" \")\n\
    \        val paren_groups_flat25 = paren_groups_flat24.filterNot(_ == \"\")\n\
    \        val paren\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6a5vwa5f.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmp6a5vwa5f.scala:13:61\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m13 |\e[0m       \
    \ \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m = paren_groups_flat.filterNot(_\
    \ == \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m                                \
    \                             ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of\
    \ types Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp6a5vwa5f.scala:14:62 -----------------------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat3\e[0m = paren_groups_flat2.filterNot(_\
    \ == \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m                                \
    \                              ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of\
    \ types Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp6a5vwa5f.scala:15:62 -----------------------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat4\e[0m = paren_groups_flat3.filterNot(_\
    \ == \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                                \
    \                              ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of\
    \ types Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp6a5vwa5f.scala:16:62 -----------------------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat5\e[0m = paren_groups_flat4.filterNot(_\
    \ == \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                                 \
    \                             ^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp6a5vwa5f.scala:17:62\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m17 |\e[0m       \
    \ \e[33mval\e[0m \e[36mparen_groups_flat6\e[0m = paren_groups_flat5.filterNot(_\
    \ == \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m                                \
    \                              ^^^^^^^^\e["
  stdout: ''
  timestamp: 1659795625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.filterNot(_ == \")\")\n        val paren_groups_flat3 =\
    \ paren_groups_flat2.filterNot(_ == \"(\")\n        val paren_groups_flat4 = paren_groups_flat3.filterNot(_\
    \ == \" \")\n        val paren_groups_flat5 = paren_groups_flat4.filterNot(_ ==\
    \ \"\\\\\")\n        val paren_groups_flat6 = paren_groups_flat5.filterNot(_ ==\
    \ \"(\")\n        val paren_groups_flat7 = paren_groups_flat6.filterNot(_ == \"\
    )\")\n        val paren_groups_flat8 = paren_groups_flat7.filterNot(_ == \" \"\
    )\n        val paren_groups_flat9 = paren_groups_flat8.filterNot(_ == \"\\\\\"\
    )\n        val paren_groups_flat10 = paren_groups_flat9.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat11 = paren_groups_flat10.filterNot(_ == \")\")\n\
    \        val paren_groups_flat12 = paren_groups_flat11.filterNot(_ == \" \")\n\
    \        val paren_groups_flat13 = paren_groups_flat12.filterNot(_ == \"\\\\\"\
    )\n        val paren_groups_flat14 = paren_groups_flat13.filterNot(_ == \"(\"\
    )\n        val paren_groups_flat15 = paren_groups_flat14.filterNot(_ == \")\"\
    )\n        val paren_groups_flat16 = paren_groups_flat15.filterNot(_ == \" \"\
    )\n        val paren_groups_flat17 = paren_groups_flat16.filterNot(_ == \"\\\\\
    \")\n        val paren_groups_flat18 = paren_groups_flat17.filterNot(_ == \"(\"\
    )\n        val paren_groups_flat19 = paren_groups_flat18.filterNot(_ == \")\"\
    )\n        val paren_groups_flat20 = paren_groups_flat19.filterNot(_ == \" \"\
    )\n        val paren_groups_flat21 = paren_groups_flat20.filterNot(_ == \"\\\\\
    \")\n        val paren_groups_flat22 = paren_groups_flat21.filterNot(_ == \"(\"\
    )\n        val paren_groups_flat23 = paren_groups_flat22.filterNot(_ == \")\"\
    )\n        val paren_groups_flat24 = paren_groups_flat23.filterNot(_ == \" \"\
    )\n        val paren_groups_flat25 = paren_groups_flat24.filterNot(_ == \"\\\\\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpmlhw70s5.scala:13:61 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m\
    \ = paren_groups_flat.filterNot(_ == \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                             ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types Char and String cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- Error: /tmp/tmpmlhw70s5.scala:14:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat3\e[0m\
    \ = paren_groups_flat2.filterNot(_ == \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmpmlhw70s5.scala:15:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat4\e[0m\
    \ = paren_groups_flat3.filterNot(_ == \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmpmlhw70s5.scala:16:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat5\e[0m\
    \ = paren_groups_flat4.filterNot(_ == \e[31m\"\\\\\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                              ^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmpmlhw70s5.scala:17:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat6\e[0m\
    \ = paren_groups_flat5.filterNot(_ == \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmpmlhw70s5.scala:18:62 -----------------------------------------\e\
    [0m\e[0m"
  stdout: ''
  timestamp: 1659795626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_open_braces = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"\")).filter(x => x != \"\")\n        val paren_groups_with_open_braces_with_brackets\
    \ = paren_groups_with_open_braces.map(x => x.replace(\")\", \"\").replace(\"(\"\
    , \"\")).filter(x => x != \"\")\n        val paren_groups_with_open_braces_with_brackets_with_brackets\
    \ = paren_groups_with_open_braces_with_brackets.map(x => x.replace(\")\", \"\"\
    ).replace(\"(\", \"\")).filter(x => x != \"\")\n        val paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_open_braces_with_brackets_with_brackets.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"\")).filter(x => x != \"\")\n        val paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets.map(x\
    \ => x.replace(\")\", \"\").replace(\"(\", \"\")).filter(x => x != \"\")\n   \
    \     val paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets.map(x\
    \ => x.replace(\")\", \"\").replace(\"(\", \"\")).filter(x => x != \"\")\n   \
    \     val paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets.map(x\
    \ => x.replace(\")\", \"\").replace(\"(\", \"\")).filter(x => x != \"\")\n   \
    \     val paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_bracket\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqq14wzfp.scala:20:4 ----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqq14wzfp.scala:17:114\
    \ --------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\e\
    [0m = paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets.map(\e\
    [36mx\e[0m => x.replace(\e[31m\")\"\e[0m, \e[31m\"\"\e[0m).replace(\e[31m\"(\"\
    \e[0m, \e[31m\"\"\e[0m)).filter(\e[36mx\e[0m => x != \e[31m\"\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                                  ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpqq14wzfp.scala:18:142 --------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\e\
    [0m = paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets.map(\e\
    [36mx\e[0m => x.replace(\e[31m\")\"\e[0m, \e[31m\"\"\e[0m).replace(\e[31m\"(\"\
    \e[0m, \e[31m\"\"\e[0m)).filter(\e[36mx\e[0m => x != \e[31m\"\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                                                            \
    \  ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m \
    \ paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available "
  stdout: ''
  timestamp: 1659795625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x.length)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x + \" \")\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces.map(x => x.replaceAll(\" \", \"\
    \"))\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_spaces.map(x => x.replaceAll(\"\
    \\\\(|\\\\)\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces.map(x\
    \ => x.replaceAll(\"\\\\(|\\\\)\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replaceAll(\"\\\\(|\\\\)\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replaceAll(\"\\\\(|\\\\)\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replaceAll(\"\\\\(|\\\\)\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replaceAll(\"\\\\(|\\\\)\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_space\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1dtrjb41.scala:23:4 ----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp1dtrjb41.scala:20:148\
    \ --------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replaceAll(\e[31m\"\\\\(|\\\\)\"\e[0m, \e[31m\"\"\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                                                            \
    \        ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e\
    [0m  paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp1dtrjb41.scala:21:163 --------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replaceAll(\e[31m\"\\\\(|\\\\)\"\e[0m, \e[31m\"\"\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                                                            \
    \                       ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\
    \e[31m   |\e[0m  paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spa"
  stdout: ''
  timestamp: 1659795624
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_close\
    \ = mutable.ListBuffer[String]()\n        val paren_open_braces = mutable.ListBuffer[String]()\n\
    \        val paren_close_braces = mutable.ListBuffer[String]()\n        val paren_open_parens\
    \ = mutable.ListBuffer[String]()\n        val paren_close_parens = mutable.ListBuffer[String]()\n\
    \        val paren_open_paren_braces = mutable.ListBuffer[String]()\n        val\
    \ paren_close_paren_braces = mutable.ListBuffer[String]()\n        val paren_open_paren_parens\
    \ = mutable.ListBuffer[String]()\n        val paren_close_paren_parens = mutable.ListBuffer[String]()\n\
    \        val paren_open_paren_paren_braces = mutable.ListBuffer[String]()\n  \
    \      val paren_close_paren_paren_braces = mutable.ListBuffer[String]()\n   \
    \     val paren_open_paren_paren_parens = mutable.ListBuffer[String]()\n     \
    \   val paren_close_paren_paren_parens = mutable.ListBuffer[String]()\n      \
    \  val paren_open_paren_paren_paren_braces = mutable.ListBuffer[String]()\n  \
    \      val paren_close_paren_paren_paren_braces = mutable.ListBuffer[String]()\n\
    \        val paren_open_paren_paren_paren_parens = mutable.ListBuffer[String]()\n\
    \        val paren_close_paren_paren_paren_parens = mutable.ListBuffer[String]()\n\
    \        val paren_open_paren_paren_paren_paren_braces = mutable.ListBuffer[String]()\n\
    \        val paren_close_paren_paren_paren_paren_braces = mutable.ListBuffer[String]()\n\
    \        val paren_open_paren_paren_paren_paren_parens = mutable.ListBuffer[String]()\n\
    \        val paren_close_paren_paren_paren_paren_parens = mutable.ListBuffer[String]()\n\
    \        val paren_open_paren_paren_paren_paren_paren_braces = mutable.ListBuffer[String]()\n\
    \        val paren_close_paren_paren_paren_paren_paren_braces = mutable.ListBuffer[String]()\n\
    \        val paren_open_paren_paren_paren_paren_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9kq5cmjf.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9kq5cmjf.scala:11:27\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp9kq5cmjf.scala:12:25 ------------------------\e[0m\e[0m\n\e[31m12 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_open\e[0m = mutable.ListBuffer[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp9kq5cmjf.scala:13:26 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_close\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp9kq5cmjf.scala:14:32 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_open_braces\e[0m =\
    \ mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9kq5cmjf.scala:15:33\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_close_braces\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                                 ^^^"
  stdout: ''
  timestamp: 1659795623
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").map(_.trim).toList\n        val paren_groups_with_spaces = paren_groups.map(x\
    \ => x.replaceAll(\"\\\\s+\", \" \"))\n        val paren_groups_with_spaces_sorted\
    \ = paren_groups_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted.map(x => x.replaceAll(\"\\\\s+\", \" \"))\n\
    \        val paren_groups_with_spaces_sorted_with_spaces_sorted = paren_groups_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replaceAll(\"\
    \\\\s+\", \" \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \" \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \" \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \" \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdjrhw9zz.scala:23:141 -----------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_\n\e[31m\e[31m   |\e[0m                              \
    \                                                                            \
    \                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                          Not found: paren_groups_with_\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdjrhw9zz.scala:24:5 ---------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659795624
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").map(_.trim).toList\n        val paren_groups_count = paren_groups.length\n\
    \        val paren_groups_remaining = paren_groups_count - 1\n        val paren_groups_remaining_list\
    \ = paren_groups.take(paren_groups_remaining).toList\n        val paren_groups_remaining_strings\
    \ = paren_groups_remaining_list.map(paren_group => paren_group + \"\\\\)\")\n\
    \        val paren_groups_remaining_strings_count = paren_groups_remaining_strings.length\n\
    \        val paren_groups_remaining_strings_remaining = paren_groups_remaining_strings_count\
    \ - 1\n        val paren_groups_remaining_strings_remaining_list = paren_groups_remaining_strings.take(paren_groups_remaining_strings_remaining).toList\n\
    \        val paren_groups_remaining_strings_remaining_strings = paren_groups_remaining_strings_remaining_list.map(paren_group\
    \ => paren_group + \"\\\\)\")\n        val paren_groups_remaining_strings_remaining_strings_count\
    \ = paren_groups_remaining_strings_remaining_strings.length\n        val paren_groups_remaining_strings_remaining_strings_remaining\
    \ = paren_groups_remaining_strings_remaining_strings_count - 1\n        val paren_groups_remaining_strings_remaining_strings_remaining_list\
    \ = paren_groups_remaining_strings_remaining_strings.take(paren_groups_remaining_strings_remaining_strings_remaining).toList\n\
    \        val paren_groups_remaining_strings_remaining_strings_remaining_strings\
    \ = paren_groups_remaining_strings_remaining_strings_remaining_list.map(paren_group\
    \ => paren_group + \"\\\\)\")\n        val paren_groups_remaining_strings_remaining_strings_remaining_strings_count\
    \ = paren_groups_remaining_strings_remaining_strings_remaining_strings.length\n\
    \        val paren_groups_remaining_strings_remaining_strings_remaining_strings_remaining\
    \ = paren_groups_remaining_strings_remaining_strings_remaining_strings_count -\
    \ 1\n        val paren_groups_remaining_strings_remaining_strings_remaining_strings_remaining_list\
    \ = paren_groups_remaining_strings_remaining_strings_remaining_strings.take(paren_groups_remaining_strings_remaining_strings_remaining_strings_remaining).toList\n\
    \        val paren_groups_remaining_strings_remaining_strings_remaining_strings_remaining_strings\
    \ = paren_groups_remaining_strings_remaining_strings_remaining_strings_remaining_list.map(paren_group\
    \ => paren_group + \"\\\\)\")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp96jintwy.scala:28:5\
    \ ---------------------\e[0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795624
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        var paren_open_braces = 0\n        var paren_closed_braces = 0\n    \
    \    var paren_group = \"\"\n        for (c <- paren_string) {\n            if\
    \ (c == '(') {\n                paren_open_braces += 1\n            } else if\
    \ (c == ')') {\n                paren_closed_braces += 1\n            } else if\
    \ (c == ' ') {\n                if (paren_open_braces == paren_closed_braces)\
    \ {\n                    paren_group += c\n                } else {\n        \
    \            paren_groups += paren_group\n                    paren_open_braces\
    \ = 0\n                    paren_closed_braces = 0\n                    paren_group\
    \ = \"\"\n                }\n            } else {\n                paren_group\
    \ += c\n            }\n        }\n        paren_groups += paren_group\n      \
    \  paren_groups\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo76mu3ph.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659795621
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_size = paren_groups.length\n        val paren_groups_sizes\
    \ = paren_groups.map(paren_group => paren_group.length)\n        val paren_groups_sizes_sum\
    \ = paren_groups_sizes.sum\n        val paren_groups_sizes_product = paren_groups_sizes.product\n\
    \        val paren_groups_sizes_product_sum = paren_groups_sizes_product.sum\n\
    \        val paren_groups_sizes_product_product = paren_groups_sizes_product.product\n\
    \        val paren_groups_sizes_product_product_sum = paren_groups_sizes_product_product.sum\n\
    \        val paren_groups_sizes_product_product_product = paren_groups_sizes_product_product.product\n\
    \        val paren_groups_sizes_product_product_product_sum = paren_groups_sizes_product_product_product.sum\n\
    \        val paren_groups_sizes_product_product_product_product = paren_groups_sizes_product_product_product.product\n\
    \        val paren_groups_sizes_product_product_product_product_sum = paren_groups_sizes_product_product_product_product.sum\n\
    \        val paren_groups_sizes_product_product_product_product_product = paren_groups_sizes_product_product_product_product.product\n\
    \        val paren_groups_sizes_product_product_product_product_product_sum =\
    \ paren_groups_sizes_product_product_product_product_product.sum\n        val\
    \ paren_groups_sizes_product_product_product_product_product_product = paren_groups_sizes_product_product_product_product_product.product\n\
    \        val paren_groups_sizes_product_product_product_product_product_product_sum\
    \ = paren_groups_sizes_product_product_product_product_product_product.sum\n \
    \       val paren_groups_sizes_product_product_product_product_product_product_product\
    \ = paren_groups_sizes_product_product_product_product_product_product.product\n\
    \        val paren_groups_sizes_product_product_product_product_product_product_product_sum\
    \ = paren_groups_sizes_product_product_product_product_product_product_product.sum\n\
    \        val paren_groups_sizes_product_product_product_product_product_product_product_product\
    \ = paren_groups_sizes_product_product_product_product_product_product_product.product\n\
    \        val paren_groups_sizes_product_product_product_product_product_product_product_product_sum\
    \ = paren_groups_sizes_product_product_product_product_product_product_product_product_product.sum\n\
    \        val paren_groups_sizes_product_product_product_product_product_product_product_product_product\
    \ = paren_groups_sizes_product_product_product_product_product_product_product_product_product_product.product\n\
    \        val paren_groups_sizes_product_product_product_product_product_product_product_product_product_sum\
    \ = paren_groups_sizes_product_product_product_product_product_product_product_product_product_product_product.sum\n\
    \        val paren_groups_\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxtmsd0de.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxtmsd0de.scala:16:72\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_sizes_product_sum\e[0m = paren_groups_sizes_product.sum\n\e[31m\e\
    [31m   |\e[0m                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                        value sum is not a\
    \ member of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxtmsd0de.scala:17:76\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_sizes_product_product\e[0m = paren_groups_sizes_product.product\n\
    \e[31m\e[31m   |\e[0m                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value product is not a\
    \ member of Int\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxtmsd0de.scala:31:105\
    \ -----------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_sizes_product_product_product_product_product_product_product_product_product\e\
    [0m = paren_groups_sizes_product_product_product_product_product_product_product_product_product_product.product\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_sizes_product_product_product_product_product_product_product_product_product_product\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxtmsd0de.scala:32:109\
    \ -----------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_sizes_product_product_product_product_product_product_product_product_product_sum\e\
    [0m = paren_groups_sizes_product_product_product_"
  stdout: ''
  timestamp: 1659795625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpfe4904sc.scala:21:338 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpfe4904sc.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpfe4904sc.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1659795587
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replace(\" \"\
    , \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp90lov807.scala:21:122 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.sortBy(\e\
    [36mx\e[0m => x)\n\e[31m\e[31m   |\e[0m                                      \
    \                                                                            \
    \        ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e\
    [0m  paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp90lov807.scala:23:141 -----------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp90lov807.scala:24:5\
    \ ---------------------\e[0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659795602
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_close\
    \ = mutable.ListBuffer[String]()\n        val paren_open_index = mutable.ListBuffer[Int]()\n\
    \        val paren_close_index = mutable.ListBuffer[Int]()\n        val paren_open_brace\
    \ = mutable.ListBuffer[Int]()\n        val paren_close_brace = mutable.ListBuffer[Int]()\n\
    \        val paren_open_brace_count = mutable.ListBuffer[Int]()\n        val paren_close_brace_count\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_index = mutable.ListBuffer[Int]()\n\
    \        val paren_close_brace_count_index = mutable.ListBuffer[Int]()\n     \
    \   val paren_open_brace_count_index_count = mutable.ListBuffer[Int]()\n     \
    \   val paren_close_brace_count_index_count = mutable.ListBuffer[Int]()\n    \
    \    val paren_open_brace_count_index_count_index = mutable.ListBuffer[Int]()\n\
    \        val paren_close_brace_count_index_count_index = mutable.ListBuffer[Int]()\n\
    \        val paren_open_brace_count_index_count_index_count = mutable.ListBuffer[Int]()\n\
    \        val paren_close_brace_count_index_count_index_count = mutable.ListBuffer[Int]()\n\
    \        val paren_open_brace_count_index_count_index_count_index = mutable.ListBuffer[Int]()\n\
    \        val paren_close_brace_count_index_count_index_count_index = mutable.ListBuffer[Int]()\n\
    \        val paren_open_brace_count_index_count_index_count_index_count = mutable.ListBuffer[Int]()\n\
    \        val paren_close_brace_count_index_count_index_count_index_count = mutable.ListBuffer[Int]()\n\
    \        val paren_open_brace_count_index_count_index_count_index_count_index\
    \ = mutable.ListBuffer[Int]()\n        val paren_close_brace_count_index_count_index_count_index_count_index\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_index_count_index_count_index_count_index_count\
    \ = mutable.ListBuffer[Int]()\n        val paren_close_brace_count_index_count_index_count_index_count_index_count\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_bra\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpg75eyntj.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg75eyntj.scala:11:27\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpg75eyntj.scala:12:25 ------------------------\e[0m\e[0m\n\e[31m12 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_open\e[0m = mutable.ListBuffer[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpg75eyntj.scala:13:26 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_close\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpg75eyntj.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_open_index\e[0m =\
    \ mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg75eyntj.scala:15:32\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_close_index\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                                ^^^^^^^\e[0m\n\e["
  stdout: ''
  timestamp: 1659795625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        var open_braces = 0\n        var close_braces = 0\n        var in_paren_group\
    \ = false\n        var paren_group_open = false\n        var paren_group_close\
    \ = false\n        var paren_group_opening_paren = false\n        var paren_group_closing_paren\
    \ = false\n        var paren_group_opening_paren_close = false\n        var paren_group_closing_paren_close\
    \ = false\n        var paren_group_opening_paren_close_close = false\n       \
    \ var paren_group_closing_paren_close_close = false\n        var paren_group_opening_paren_close_close_close\
    \ = false\n        var paren_group_closing_paren_close_close_close = false\n \
    \       var paren_group_opening_paren_close_close_close_close = false\n      \
    \  var paren_group_closing_paren_close_close_close_close = false\n        var\
    \ paren_group_opening_paren_close_close_close_close_close = false\n        var\
    \ paren_group_closing_paren_close_close_close_close_close = false\n        var\
    \ paren_group_opening_paren_close_close_close_close_close_close = false\n    \
    \    var paren_group_closing_paren_close_close_close_close_close_close = false\n\
    \        var paren_group_opening_paren_close_close_close_close_close_close_close\
    \ = false\n        var paren_group_closing_paren_close_close_close_close_close_close_close\
    \ = false\n        var paren_group_opening_paren_close_close_close_close_close_close_close_close\
    \ = false\n        var paren_group_closing_paren_close_close_close_close_close_close_close_close\
    \ = false\n        var paren_group_opening_paren_close_close_close_close_close_close_close_close_close\
    \ = false\n        var paren_group_closing_paren_close_close_close_close_close_close_close_close_close_close\
    \ = false\n        var paren_group_opening_paren_close_close_close_close_close_close_close_close_close_close_close\
    \ = false\n        var paren_group_closing_paren_close_close_close_close_close_close_close_close_close_close_close_close\
    \ = false\n        var paren_group_opening_paren_close_close_close_close_close_close_close_close_close_close_close_close\
    \ = false\n        var paren_group_closing_paren_close_close_close_close_close_close_close_close_close_close_close_close\
    \ = false\n        var paren_group_opening_paren_close_close_close_close_close_close_close_close_close_close_close_close_close\
    \ = false\n        var paren_group_closing_paren_close_close_close_close_close_close_close_close_close_close_close_close_close\
    \ = false\n        var paren_group_opening_paren_close_close_close_close_close_close_close_close_close_close_close_close_close_close\
    \ = false\n        var paren_group_closing_paren_close_close_close_close_close_close_close_close_close_close_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpf7yk16lb.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf7yk16lb.scala:40:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m40 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mparen_group_closing_paren_close_close_close_close_close_close_close_close_close_close_close_close\e\
    [0m = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_closing_paren_close_close_close_close_close_close_close_close_close_close_close_close\
    \ is already defined as \e[33mvariable\e[0m \e[35m\n\e[31m   |\e[0m  paren_group_closing_paren_close_close_close_close_close_close_close_close_close_close_close_close\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpf7yk16lb.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf7yk16lb.scala:45:5 ---------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659795625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpfe4904sc.scala:21:338 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpfe4904sc.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpfe4904sc.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1659795587
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_group_count = paren_groups.length\n        val paren_group_count_with_open_braces\
    \ = paren_group_count - paren_groups.length\n        val paren_group_count_with_open_braces_not_nested\
    \ = paren_group_count_with_open_braces - paren_groups.length\n        val paren_group_count_with_open_braces_not_nested_but_closed\
    \ = paren_group_count_with_open_braces_not_nested - paren_groups.length\n    \
    \    val paren_group_count_with_open_braces_not_nested_but_closed_but_not_balanced\
    \ = paren_group_count_with_open_braces_not_nested_but_closed - paren_groups.length\n\
    \        val paren_group_count_with_open_braces_not_nested_but_closed_but_not_balanced_but_not_nested\
    \ = paren_group_count_with_open_braces_not_nested_but_closed_but_not_balanced\
    \ - paren_groups.length\n        val paren_group_count_with_open_braces_not_nested_but_closed_but_not_balanced_but_not_nested_but_closed\
    \ = paren_group_count_with_open_braces_not_nested_but_closed_but_not_balanced_but_not_nested\
    \ - paren_groups.length\n        val paren_group_count_with_open_braces_not_nested_but_closed_but_not_balanced_but_not_nested_but_closed_but_not_balanced\
    \ = paren_group_count_with_open_braces_not_nested_but_closed_but_not_balanced_but_not_nested_but_closed\
    \ - paren_groups.length\n        val paren_group_count_with_open_braces_not_nested_but_closed_but_not_balanced_but_not_nested_but_closed_but_not_balanced_but_not_nested\
    \ = paren_group_count_with_open_braces_not_nested_but_closed_but_not_balanced_but_not_nested_but_closed_but_not_balanced\
    \ - paren_groups.length\n        val paren_group_count_with_open_braces_not_nested_but_closed_but_not_balanced_but_not_nested_but_closed_but_not_balanced_but_not_nested_but_closed\
    \ = paren_group_count_with_open_braces_not_nested_but_closed_but_not_balanced_but_not_nested_but_closed_but_not_balanced_but_not_nested\
    \ - paren_groups.length\n        val paren_group_count_with_open_braces_not_nested_but_closed_bu\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqmxiu_i4.scala:23:4 ----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpqmxiu_i4.scala:23:5 ---------------------\e[0m\e[0m\n\e[31m23 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795627
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_group_strings = paren_groups.map(x => x.replace(\"\
    )\", \"\"))\n        paren_group_strings.filter(x => !x.isEmpty)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5jhuqgck.scala:13:34\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        paren_group_strings.filter(\e\
    [36mx\e[0m => !x.isEmpty)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mArray\e[0m[String]\n\e[31m  \
    \ |\e[0m        Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795627
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.filterNot(_ == \")\")\n        val paren_groups_flat3 =\
    \ paren_groups_flat2.filterNot(_ == \"(\")\n        val paren_groups_flat4 = paren_groups_flat3.filterNot(_\
    \ == \" \")\n        val paren_groups_flat5 = paren_groups_flat4.filterNot(_ ==\
    \ \"\\\\\")\n        val paren_groups_flat6 = paren_groups_flat5.filterNot(_ ==\
    \ \"\\\\(\")\n        val paren_groups_flat7 = paren_groups_flat6.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat8 = paren_groups_flat7.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat9 = paren_groups_flat8.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat10 = paren_groups_flat9.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat11 = paren_groups_flat10.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat12 = paren_groups_flat11.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat13 = paren_groups_flat12.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat14 = paren_groups_flat13.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat15 = paren_groups_flat14.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat16 = paren_groups_flat15.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat17 = paren_groups_flat16.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat18 = paren_groups_flat17.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat19 = paren_groups_flat18.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat20 = paren_groups_flat19.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat21 = paren_groups_flat20.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat22 = paren_groups_flat21.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat23 = paren_groups_flat22.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat24 = paren_groups_flat23.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat25 = paren_groups_flat24.filter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp8xajzkl1.scala:13:61 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m\
    \ = paren_groups_flat.filterNot(_ == \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                             ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types Char and String cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- Error: /tmp/tmp8xajzkl1.scala:14:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat3\e[0m\
    \ = paren_groups_flat2.filterNot(_ == \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp8xajzkl1.scala:15:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat4\e[0m\
    \ = paren_groups_flat3.filterNot(_ == \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp8xajzkl1.scala:16:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat5\e[0m\
    \ = paren_groups_flat4.filterNot(_ == \e[31m\"\\\\\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                              ^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp8xajzkl1.scala:17:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat6\e[0m\
    \ = paren_groups_flat5.filterNot(_ == \e[31m\"\\\\(\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                              ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp8xajzkl1.scala:18:62 -----------------------------------------\e\
    [0m"
  stdout: ''
  timestamp: 1659795604
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val open_braces = mutable.ListBuffer[String]()\n        val close_braces\
    \ = mutable.ListBuffer[String]()\n        val open_brace_count = 0\n        val\
    \ close_brace_count = 0\n        val paren_count = 0\n        val paren_group\
    \ = \"\"\n        val open_brace_group = \"\"\n        val close_brace_group =\
    \ \"\"\n        val open_brace_group_size = 0\n        val close_brace_group_size\
    \ = 0\n        val open_brace_group_count = 0\n        val close_brace_group_count\
    \ = 0\n        val open_brace_group_paren_count = 0\n        val close_brace_group_paren_count\
    \ = 0\n        val open_brace_group_paren_group = \"\"\n        val close_brace_group_paren_group\
    \ = \"\"\n        val open_brace_group_paren_group_size = 0\n        val close_brace_group_paren_group_size\
    \ = 0\n        val open_brace_group_paren_group_count = 0\n        val close_brace_group_paren_group_count\
    \ = 0\n        val open_brace_group_paren_group_paren_count = 0\n        val close_brace_group_paren_group_paren_count\
    \ = 0\n        val open_brace_group_paren_group_paren_group = \"\"\n        val\
    \ close_brace_group_paren_group_paren_group = \"\"\n        val open_brace_group_paren_group_paren_group_size\
    \ = 0\n        val close_brace_group_paren_group_paren_group_size = 0\n      \
    \  val open_brace_group_paren_group_paren_group_count = 0\n        val close_brace_group_paren_group_paren_group_count\
    \ = 0\n        val open_brace_group_paren_group_paren_group_paren_count = 0\n\
    \        val close_brace_group_paren_group_paren_group_paren_count = 0\n     \
    \   val open_brace_group_paren_group_paren_group_paren_group = \"\"\n        val\
    \ close_brace_group_paren_group_paren_group_paren_group = \"\"\n        val open_brace_group_paren_group_paren_group_paren_group_size\
    \ = 0\n        val close_brace_group_paren_group_paren_group_paren_group_size\
    \ = 0\n        val open_brace_group_paren_group_paren_group_paren_group_count\
    \ = 0\n        val close_brace_group_paren_group_paren_group_paren_group_count\
    \ = 0\n        val open_brace_group_paren_group_paren_group_paren_group_paren_count\
    \ = 0\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp8loarj2e.scala:49:11 ---------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp8loarj2e.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8loarj2e.scala:12:26 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mopen_braces\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp8loarj2e.scala:13:27 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mclose_braces\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8loarj2e.scala:50:5 ---------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1659795627
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer.empty[String]\n\
    \        val paren_group_size = mutable.ListBuffer.empty[Int]\n        paren_string.split(\"\
    \\\\(\").foreach(x => {\n            val paren_group_size += x.split(\"\\\\)\"\
    ).length\n            paren_groups += x\n        })\n        paren_group_size.foreach(x\
    \ => paren_groups += \"(\" + x.toString + \")\")\n        paren_groups\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()())\
    \ ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\"\
    , \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpivdef0c3.scala:14:50 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m paren_group_size += x.split(\e\
    [31m\"\\\\)\"\e[0m).length\n\e[31m\e[31m   |\e[0m                            \
    \                      ^\e[0m\n\e[31m   |\e[0m                               \
    \              '=' expected, but '.' found\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpivdef0c3.scala:11:27 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpivdef0c3.scala:12:31 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_group_size\e[0m =\
    \ mutable.ListBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m            \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpivdef0c3.scala:14:33\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m\
    \ paren_group_size += x.split(\e[31m\"\\\\)\"\e[0m).length\n\e[31m\e[31m   |\e\
    [0m                                 ^^\e[0m\n\e[31m   |\e[0m                 \
    \                Not found: +=\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E134] Type Error:\
    \ /tmp/tmpivdef0c3.scala:14:38 -----------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m            \e[33mval\e[0m paren_group_size += x.split(\e[31m\"\\\\)\"\
    \e[0m).length\n\e[31m\e[31m   |\e[0m                                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35msplit\e[0m in \e[33mclass\e[0m \e[35mString\e[0m with types\n\e[31m   |\e\
    [0m (x$0: String): Array[String]\n\e[31m   |\e[0m (x$0: String, x$1: Int): Array[String]\n\
    \e[31m   |\e[0m"
  stdout: ''
  timestamp: 1659795625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => \" \" + x + \" \")\n        val paren_groups_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => \" \" + x + \"\
    \ \")\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => \" \" + x + \" \")\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => \" \" + x + \" \")\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => \" \" + x + \" \")\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sor\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp1o59ft8g.scala:21:122 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.sortBy(\e\
    [36mx\e[0m => x)\n\e[31m\e[31m   |\e[0m                                      \
    \                                                                            \
    \        ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e\
    [0m  paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp1o59ft8g.scala:23:141 -----------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sor\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sor\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1o59ft8g.scala:24:5\
    \ ---------------------\e[0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 error"
  stdout: ''
  timestamp: 1659795629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(|\\\\)\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortWith((x,y)\
    \ => x.length <=> y.length)\n        val paren_groups_with_spaces_sorted_with_open_braces\
    \ = paren_groups_with_spaces_sorted.map(x => x + \"{\")\n        val paren_groups_with_spaces_sorted_with_close_braces\
    \ = paren_groups_with_spaces_sorted_with_open_braces.map(x => x + \"}\")\n   \
    \     val paren_groups_with_spaces_sorted_with_open_braces_with_brackets = paren_groups_with_spaces_sorted_with_open_braces.map(x\
    \ => x + \"[\")\n        val paren_groups_with_spaces_sorted_with_close_braces_with_brackets\
    \ = paren_groups_with_spaces_sorted_with_close_braces.map(x => x + \"]\")\n  \
    \      val paren_groups_with_spaces_sorted_with_open_braces_with_brackets_with_brackets\
    \ = paren_groups_with_spaces_sorted_with_open_braces_with_brackets.map(x => x\
    \ + \"[\" + \"]\")\n        val paren_groups_with_spaces_sorted_with_close_braces_with_brackets_with_brackets\
    \ = paren_groups_with_spaces_sorted_with_close_braces_with_brackets.map(x => x\
    \ + \"]\" + \"]\")\n        val paren_groups_with_spaces_sorted_with_open_braces_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_spaces_sorted_with_open_braces_with_brackets_with_brackets.map(x\
    \ => x + \"[\" + \"]\" + \"]\" + \"]\")\n        val paren_groups_with_spaces_sorted_with_close_braces_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_spaces_sorted_with_close_braces_with_brackets_with_brackets.map(x\
    \ => x + \"]\" + \"]\" + \"]\")\n        val paren_groups_with_spaces_sorted_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_spaces_sorted_with_open_braces_with_brackets_with_brackets_with_brackets.map(x\
    \ => x + \"[\" + \"]\" + \"]\" + \"]\" + \"]\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpmfrqxs4d.scala:22:247 ----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets\e\
    [0m = paren_groups_with_spaces_sorted_with_open_braces_with_brackets_with_brackets_with_brackets.map(\e\
    [36mx\e[0m => x + \e[31m\"[\"\e[0m + \e[31m\"]\"\e[0m + \e[31m\"]\"\e[0m + \e\
    [31m\"]\"\e[0m + \"]\n\e[31m\e[31m   |\e[0m                                  \
    \                                                                            \
    \                                                                            \
    \                                                             ^\e[0m\n\e[31m \
    \  |\e[0m                                                 unclosed string literal\n\
    \e[31m\e[31m-- Error: /tmp/tmpmfrqxs4d.scala:24:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                 end\
    \ of statement expected but '=' found\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpmfrqxs4d.scala:13:98 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted\e[0m = paren_groups_with_spaces.sortWith((\e\
    [36mx\e[0m,\e[36my\e[0m) => x.length <=> y.length)\n\e[31m\e[31m   |\e[0m    \
    \                                                                            \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 value <=> is not\
    \ a member of Int - did you mean Int.<=?\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpmfrqxs4d.scala:23:5 ---------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpmfrqxs4d.scala:24:4 -------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36m"
  stdout: ''
  timestamp: 1659795630
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_group_counts = paren_groups.map(x => x.split(\"\\\\\
    )\").length).sum\n        val paren_group_lengths = paren_groups.map(x => x.split(\"\
    \\\\)\").length).max\n        val paren_group_lengths_array = paren_group_lengths.toArray\n\
    \        val paren_group_lengths_array_sorted = paren_group_lengths_array.sort\n\
    \        val paren_group_lengths_array_sorted_reversed = paren_group_lengths_array_sorted.reverse\n\
    \        val paren_group_lengths_array_sorted_reversed_index = paren_group_lengths_array_sorted.length\
    \ - paren_group_lengths_array_sorted_reversed.length\n        val paren_group_lengths_array_sorted_reversed_index_minus_1\
    \ = paren_group_lengths_array_sorted_reversed_index - 1\n        val paren_group_lengths_array_sorted_reversed_index_minus_2\
    \ = paren_group_lengths_array_sorted_reversed_index_minus_1 - 1\n        val paren_group_lengths_array_sorted_reversed_index_minus_3\
    \ = paren_group_lengths_array_sorted_reversed_index_minus_2 - 1\n        val paren_group_lengths_array_sorted_reversed_index_minus_4\
    \ = paren_group_lengths_array_sorted_reversed_index_minus_3 - 1\n        val paren_group_lengths_array_sorted_reversed_index_minus_5\
    \ = paren_group_lengths_array_sorted_reversed_index_minus_4 - 1\n        val paren_group_lengths_array_sorted_reversed_index_minus_6\
    \ = paren_group_lengths_array_sorted_reversed_index_minus_5 - 1\n        val paren_group_lengths_array_sorted_reversed_index_minus_7\
    \ = paren_group_lengths_array_sorted_reversed_index_minus_6 - 1\n        val paren_group_lengths_array_sorted_reversed_index_minus_8\
    \ = paren_group_lengths_array_sorted_reversed_index_minus_7 - 1\n        val paren_group_lengths_array_sorted_reversed_index_minus_9\
    \ = paren_group_lengths_array_sorted_reversed_index_minus_8 - 1\n        val paren_group_lengths_array_sorted_reversed_index_minus_10\
    \ = paren_group_lengths_array_sorted_reversed_index_minus_9 - 1\n        val paren_group_lengths_array_sorted_reversed_index_minus_11\
    \ = paren_group_lengths_array_sorted_reversed_index_minus_10 - 1\n        val\
    \ paren_group_lengths_array_sorted_reversed_index_minus_12 = paren_group_lengths_array_sorted_reversed_index_minus_11\
    \ - 1\n        val paren_group_lengths_array_sorted_reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzropeig_.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzropeig_.scala:14:60\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_group_lengths_array\e[0m = paren_group_lengths.toArray\n\e[31m\e[31m\
    \   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value toArray is not a\
    \ member of Int\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzropeig_.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659795631
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.filterNot(_ == \")\")\n        val paren_groups_flat3 =\
    \ paren_groups_flat2.filterNot(_ == \"(\")\n        val paren_groups_flat4 = paren_groups_flat3.filterNot(_\
    \ == \" \")\n        val paren_groups_flat5 = paren_groups_flat4.filterNot(_ ==\
    \ \"\\\\\")\n        val paren_groups_flat6 = paren_groups_flat5.filterNot(_ ==\
    \ \"\\\\(\")\n        val paren_groups_flat7 = paren_groups_flat6.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat8 = paren_groups_flat7.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat9 = paren_groups_flat8.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat10 = paren_groups_flat9.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat11 = paren_groups_flat10.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat12 = paren_groups_flat11.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat13 = paren_groups_flat12.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat14 = paren_groups_flat13.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat15 = paren_groups_flat14.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat16 = paren_groups_flat15.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat17 = paren_groups_flat16.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat18 = paren_groups_flat17.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat19 = paren_groups_flat18.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat20 = paren_groups_flat19.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat21 = paren_groups_flat20.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat22 = paren_groups_flat21.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat23 = paren_groups_flat22.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat24 = paren_groups_flat23.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat25 = paren_groups_flat24.filter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp8xajzkl1.scala:13:61 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m\
    \ = paren_groups_flat.filterNot(_ == \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                             ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types Char and String cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- Error: /tmp/tmp8xajzkl1.scala:14:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat3\e[0m\
    \ = paren_groups_flat2.filterNot(_ == \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp8xajzkl1.scala:15:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat4\e[0m\
    \ = paren_groups_flat3.filterNot(_ == \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp8xajzkl1.scala:16:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat5\e[0m\
    \ = paren_groups_flat4.filterNot(_ == \e[31m\"\\\\\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                              ^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp8xajzkl1.scala:17:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat6\e[0m\
    \ = paren_groups_flat5.filterNot(_ == \e[31m\"\\\\(\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                              ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp8xajzkl1.scala:18:62 -----------------------------------------\e\
    [0m"
  stdout: ''
  timestamp: 1659795604
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_open_braces = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"\")).filter(x => x != \"\")\n        val paren_groups_with_open_braces_with_brackets\
    \ = paren_groups_with_open_braces.map(x => x.replace(\")\", \"\").replace(\"(\"\
    , \"\")).filter(x => x != \"\")\n        val paren_groups_with_open_braces_with_brackets_with_brackets\
    \ = paren_groups_with_open_braces_with_brackets.map(x => x.replace(\")\", \"\"\
    ).replace(\"(\", \"\")).filter(x => x != \"\")\n        val paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_open_braces_with_brackets_with_brackets.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"\")).filter(x => x != \"\")\n        val paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets.map(x\
    \ => x.replace(\")\", \"\").replace(\"(\", \"\")).filter(x => x != \"\")\n   \
    \     val paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets.map(x\
    \ => x.replace(\")\", \"\").replace(\"(\", \"\")).filter(x => x != \"\")\n   \
    \     val paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets.map(x\
    \ => x.replace(\")\", \"\").replace(\"(\", \"\")).filter(x => x != \"\")\n   \
    \     val paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_bracket\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqq14wzfp.scala:20:4 ----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqq14wzfp.scala:17:114\
    \ --------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\e\
    [0m = paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets.map(\e\
    [36mx\e[0m => x.replace(\e[31m\")\"\e[0m, \e[31m\"\"\e[0m).replace(\e[31m\"(\"\
    \e[0m, \e[31m\"\"\e[0m)).filter(\e[36mx\e[0m => x != \e[31m\"\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                                  ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpqq14wzfp.scala:18:142 --------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\e\
    [0m = paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets.map(\e\
    [36mx\e[0m => x.replace(\e[31m\")\"\e[0m, \e[31m\"\"\e[0m).replace(\e[31m\"(\"\
    \e[0m, \e[31m\"\"\e[0m)).filter(\e[36mx\e[0m => x != \e[31m\"\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                                                            \
    \  ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m \
    \ paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available "
  stdout: ''
  timestamp: 1659795625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_group_count = paren_groups.length\n        val paren_group_lengths\
    \ = paren_groups.map(x => x.length)\n        val paren_group_lengths_sum = paren_group_lengths.sum\n\
    \        val paren_group_lengths_product = paren_group_lengths.product\n     \
    \   val paren_group_lengths_product2 = paren_group_lengths_product * paren_group_lengths_product\n\
    \        val paren_group_lengths_product3 = paren_group_lengths_product2 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product4 = paren_group_lengths_product3 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product5 = paren_group_lengths_product4 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product6 = paren_group_lengths_product5 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product7 = paren_group_lengths_product6 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product8 = paren_group_lengths_product7 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product9 = paren_group_lengths_product8 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product10 = paren_group_lengths_product9 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product11 = paren_group_lengths_product10 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product12 = paren_group_lengths_product11 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product13 = paren_group_lengths_product12 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product14 = paren_group_lengths_product13 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product15 = paren_group_lengths_product14 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product16 = paren_group_lengths_product15 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product17 = paren_group_lengths_product16 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product18 = paren_group_lengths_product17 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product19 = paren_group_lengths_product18 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdy2ixi0s.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpdy2ixi0s.scala:35:5 ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795599
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x.length)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces.map(x => x.replace(\")\", \" ))\"\
    )\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\")\", \" ))\")\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\")\", \" ))\")\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\")\", \" ))\")\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_space\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfnk7dphf.scala:16:8 ----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_without_spaces.map(\e[36mx\e\
    [0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m   |\e[0m\
    \        ^^^\e[0m\n\e[31m   |\e[0m        ')' expected, but 'val' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpfnk7dphf.scala:31:1 ---------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795630
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_count = paren_groups.length\n        val paren_groups_remainder\
    \ = paren_groups_count % paren_groups.length\n        val paren_groups_remainder_count\
    \ = paren_groups_remainder / paren_groups.length\n        val paren_groups_remainder_count_remainder\
    \ = paren_groups_remainder % paren_groups.length\n        val paren_groups_remainder_count_remainder_count\
    \ = paren_groups_remainder_count_remainder / paren_groups.length\n        val\
    \ paren_groups_remainder_count_remainder_count_remainder = paren_groups_remainder_count_remainder\
    \ % paren_groups.length\n        val paren_groups_remainder_count_remainder_count_remainder_count\
    \ = paren_groups_remainder_count_remainder_count_remainder / paren_groups.length\n\
    \        val paren_groups_remainder_count_remainder_count_remainder_count_remainder\
    \ = paren_groups_remainder_count_remainder_count_remainder % paren_groups.length\n\
    \        val paren_groups_remainder_count_remainder_count_remainder_count_remainder_count\
    \ = paren_groups_remainder_count_remainder_count_remainder_count_remainder / paren_groups.length\n\
    \        val paren_groups_remainder_count_remainder_count_remainder_count_remainder_count_remainder\
    \ = paren_groups_remainder_count_remainder_count_remainder_count_remainder_count_remainder\
    \ % paren_groups.length\n        val paren_groups_remainder_count_remainder_count_remainder_count_remainder_count_remainder_count\
    \ = paren_groups_remainder_count_remainder_count_remainder_count_remainder_count_remainder_count_remainder\
    \ / paren_groups.length\n        val paren_groups_remainder_count_remainder_count_remainder_count_remainder_count_remainder_count_remainder\
    \ = paren_groups_remainder_count_remainder_count_remainder_count_remainder_count_remainder_count_remainder_count_remainder\
    \ % paren_groups.length\n        val paren_groups_remainder_count_remainder_count_remainder_count_remainder_count_remainder_count_remainder_count\
    \ = paren_groups_remainder_count_remainder_count_remainder_count_remainder_count_remainder_count_remainder_count_remainder_count_remainder\
    \ / paren_groups.length\n        val paren_groups_remainder_count_remainder_count_remainder_count_remainder_count_remainder_count_remainder_count_remainder_count\
    \ = paren_groups_remainder_count_remainder_count_remainder_count_remainder_count_remainder_count_remainder_count_remainder_count_remainder_count_remainder\
    \ % paren_groups.length\n        val paren_groups_remainder_count_remainder_count_remainder_count_remainder_count_remainder_count_remainder_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprmzxjxj7.scala:27:4 ----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmprmzxjxj7.scala:21:101\
    \ --------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_remainder_count_remainder_count_remainder_count_remainder_count_remainder\e\
    [0m = paren_groups_remainder_count_remainder_count_remainder_count_remainder_count_remainder\
    \ % paren_groups.length\n\e[31m\e[31m   |\e[0m                               \
    \                                                                      ^\e[0m\n\
    \e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_remainder_count_remainder_count_remainder_count_remainder_count_remainder\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmprmzxjxj7.scala:23:117 -----------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups_remainder_count_remainder_count_remainder_count_remainder_count_remainder_count_remainder\e\
    [0m = paren_groups_remainder_count_remainder_count_remainder_count_remainder_count_remainder_count_remainder_count_remainder\
    \ % paren_groups.length\n\e[31m\e[31m   |\e[0m                               \
    \                                                                            \
    \          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_remainder_count_remainder_count_remainder_count_remainder_count_remainder_count_remainder_count_remainder\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmzxjxj7.scala:24:123\
    \ -----------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_remainder_count_remainder_count_remainder_count_remainder_count_remainder_count_remainder_count\e\
    [0m ="
  stdout: ''
  timestamp: 1659795629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_group_counts = paren_groups.map(x => x.split(\"\\\\\
    )\").length).toList\n        val paren_group_counts_sum = paren_group_counts.sum\n\
    \        val paren_group_counts_average = paren_group_counts.sum / paren_group_counts_sum\n\
    \        val paren_group_counts_min = paren_group_counts.min\n        val paren_group_counts_max\
    \ = paren_group_counts.max\n        val paren_group_counts_range = paren_group_counts_max\
    \ - paren_group_counts_min\n        val paren_group_counts_average = paren_group_counts_average\
    \ / paren_group_counts_sum\n        val paren_group_counts_range = paren_group_counts_range\
    \ / paren_group_counts_sum\n        val paren_group_counts_range_average = paren_group_counts_range\
    \ / paren_group_counts_sum\n        val paren_group_counts_range_average = paren_group_counts_range_average\
    \ / paren_group_counts_sum\n        val paren_group_counts_range_average = paren_group_counts_range_average\
    \ / paren_group_counts_sum\n        val paren_group_counts_range_average = paren_group_counts_range_average\
    \ / paren_group_counts_sum\n        val paren_group_counts_range_average = paren_group_counts_range_average\
    \ / paren_group_counts_sum\n        val paren_group_counts_range_average = paren_group_counts_range_average\
    \ / paren_group_counts_sum\n        val paren_group_counts_range_average = paren_group_counts_range_average\
    \ / paren_group_counts_sum\n        val paren_group_counts_range_average = paren_group_counts_range_average\
    \ / paren_group_counts_sum\n        val paren_group_counts_range_average = paren_group_counts_range_average\
    \ / paren_group_counts_sum\n        val paren_group_counts_range_average = paren_group_counts_range_average\
    \ / paren_group_counts_sum\n        val paren_group_counts_range_average = paren_group_counts_range_average\
    \ / paren_group_counts_sum\n        val paren_group_counts_range_average = paren_group_counts_range_average\
    \ / paren_group_counts_sum\n        val paren_group_counts_range_average = paren_group_counts_range_average\
    \ / paren_group_counts_sum\n        val paren_group_counts_range_average = paren_group_counts_range_average\
    \ / paren_group_count\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjzty93fz.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mparen_group_counts_average\e\
    [0m = paren_group_counts_average / paren_group_counts_sum\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_counts_average is already defined as \e[33mvalue\e\
    [0m \e[35mparen_group_counts_average\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjzty93fz.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mparen_group_counts_range\e\
    [0m = paren_group_counts_range / paren_group_counts_sum\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_counts_range is already defined as \e[33mvalue\e\
    [0m \e[35mparen_group_counts_range\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjzty93fz.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_group_counts_range_average\e\
    [0m = paren_group_counts_range_average / paren_group_counts_sum\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_counts_range_average is already defined as \e\
    [33mvalue\e[0m \e[35mparen_group_counts_range_average\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjzty93fz.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_group_counts_range_average\e[0m = paren_group_counts_range_average\
    \ / paren_group_counts_sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659795631
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(|\\\\)\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => \" \" + x + \" \")\n        val paren_groups_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => \" \" + x + \"\
    \ \")\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => \" \" + x + \" \")\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => \" \" + x + \" \")\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => \" \" + x + \" \")\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpjjz57_fx.scala:21:122 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.sortBy(\e\
    [36mx\e[0m => x)\n\e[31m\e[31m   |\e[0m                                      \
    \                                                                            \
    \        ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e\
    [0m  paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpjjz57_fx.scala:23:141 -----------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjjz57_fx.scala:24:5\
    \ ---------------------\e[0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659795634
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_closed\
    \ = mutable.ListBuffer[String]()\n        val paren_opened = mutable.ListBuffer[String]()\n\
    \        val paren_closed_in_a_row = mutable.ListBuffer[String]()\n        val\
    \ paren_closed_in_a_row_with_paren = mutable.ListBuffer[String]()\n        val\
    \ paren_opened_in_a_row = mutable.ListBuffer[String]()\n        val paren_opened_in_a_row_with_paren\
    \ = mutable.ListBuffer[String]()\n        val paren_opened_in_a_row_with_paren_closed\
    \ = mutable.ListBuffer[String]()\n        val paren_opened_in_a_row_with_paren_open\
    \ = mutable.ListBuffer[String]()\n        val paren_opened_in_a_row_with_paren_open_closed\
    \ = mutable.ListBuffer[String]()\n        val paren_opened_in_a_row_with_paren_open_open\
    \ = mutable.ListBuffer[String]()\n        val paren_opened_in_a_row_with_paren_open_open_closed\
    \ = mutable.ListBuffer[String]()\n        val paren_opened_in_a_row_with_paren_open_open_open\
    \ = mutable.ListBuffer[String]()\n        val paren_opened_in_a_row_with_paren_open_open_open_closed\
    \ = mutable.ListBuffer[String]()\n        val paren_opened_in_a_row_with_paren_open_open_open_open\
    \ = mutable.ListBuffer[String]()\n        val paren_opened_in_a_row_with_paren_open_open_open_open_closed\
    \ = mutable.ListBuffer[String]()\n        val paren_opened_in_a_row_with_paren_open_open_open_open_open\
    \ = mutable.ListBuffer[String]()\n        val paren_opened_in_a_row_with_paren_open_open_open_open_closed\
    \ = mutable.ListBuffer[String]()\n        val paren_opened_in_a_row_with_paren_open_open_open_open_open\
    \ = mutable.ListBuffer[String]()\n        val paren_opened_in_a_row_with_paren_open_open_open_open_closed\
    \ = mutable.ListBuffer[String]()\n        val paren_opened_in_a_row_with_paren_open_open_open_open_open\
    \ = mutable.ListBuffer[String]()\n        val paren_opened_in_a_row_with_paren_open_open_open_open_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpro_566es.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpro_566es.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_opened_in_a_row_with_paren_open_open_open_open_closed\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_opened_in_a_row_with_paren_open_open_open_open_closed\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_opened_in_a_row_with_paren_open_open_open_open_closed\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpro_566es.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mparen_opened_in_a_row_with_paren_open_open_open_open_open\e\
    [0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_opened_in_a_row_with_paren_open_open_open_open_open\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_opened_in_a_row_with_paren_open_open_open_open_open\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpro_566es.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mparen_opened_in_a_row_with_paren_open_open_open_open_closed\e\
    [0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_opened_in_a_row_with_paren_open_open_open_open_closed\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_opened_in_a_row_with_paren_open_open_open_open_cl"
  stdout: ''
  timestamp: 1659795634
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").map(_.trim).toList\n        val open_paren_groups = paren_groups.filter(_.contains(\"\
    (\"))\n        val close_paren_groups = paren_groups.filter(_.contains(\")\"))\n\
    \        val unbalanced_groups = open_paren_groups.filter(x => close_paren_groups.contains(x))\n\
    \        val balanced_groups = open_paren_groups.filter(x => close_paren_groups.contains(x)\
    \ && open_paren_groups.count(_ == x) == 0)\n        val unbalanced_groups_count\
    \ = unbalanced_groups.count()\n        val balanced_groups_count = balanced_groups.count()\n\
    \        val unbalanced_groups_count_plus_one = unbalanced_groups_count + 1\n\
    \        val balanced_groups_count_plus_one = balanced_groups_count + 1\n    \
    \    val unbalanced_groups_count_minus_one = unbalanced_groups_count - 1\n   \
    \     val balanced_groups_count_minus_one = balanced_groups_count - 1\n      \
    \  val unbalanced_groups_count_plus_one_plus_one = unbalanced_groups_count_plus_one\
    \ + 1\n        val balanced_groups_count_plus_one_plus_one = balanced_groups_count_plus_one\
    \ + 1\n        val unbalanced_groups_count_minus_one_minus_one = unbalanced_groups_count_minus_one\
    \ - 1\n        val balanced_groups_count_minus_one_minus_one = balanced_groups_count_minus_one\
    \ - 1\n        val unbalanced_groups_count_plus_one_minus_one = unbalanced_groups_count_plus_one\
    \ - 1\n        val balanced_groups_count_plus_one_minus_one = balanced_groups_count_plus_one\
    \ - 1\n        val unbalanced_groups_count_minus_one_minus_one = unbalanced_groups_count_minus_one\
    \ - 1\n        val balanced_groups_count_minus_one_minus_one = balanced_groups_count_minus_one\
    \ - 1\n        val unbalanced_groups_count_plus_one_minus_one_minus_one = unbalanced_groups_count_plus_one_minus_one\
    \ - 1\n        val balanced_groups_count_plus_one_minus_one_minus_one = balanced_groups_count_plus_one_minus_one\
    \ - 1\n        val unbalanced_groups_count_minus_one_minus_one_minus_one = unbalanced_groups_count_minus_one_minus_one\
    \ - 1\n        val balanced_groups_count_minus_one_minus_one_minus_one = balanced_groups_count_minus_one_minus_one\
    \ - 1\n        val unbalanced_groups_count_plus_one_minus_one_minus_one_minus_one\
    \ = unbalanced_groups_count_plus_one_minus_one_minus_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpc0lvw22c.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36munbalanced_groups_count_minus_one_minus_one\e\
    [0m = unbalanced_groups_count_minus_one - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munbalanced_groups_count_minus_one_minus_one is already defined\
    \ as \e[33mvalue\e[0m \e[35munbalanced_groups_count_minus_one_minus_one\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpc0lvw22c.scala:29:12 ---------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mval\e[0m \e[36mbalanced_groups_count_minus_one_minus_one\e\
    [0m = balanced_groups_count_minus_one - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbalanced_groups_count_minus_one_minus_one is already defined\
    \ as \e[33mvalue\e[0m \e[35mbalanced_groups_count_minus_one_minus_one\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- Error: /tmp/tmpc0lvw22c.scala:16:61\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m16 |\e[0m       \
    \ \e[33mval\e[0m \e[36munbalanced_groups_count\e[0m = unbalanced_groups.count()\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmissing argument for parameter p of \e[33mmethod\e[0m \e[35mcount\e\
    [0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e[0m: (p: String => Boolean): Int\n\
    \e[31m\e[31m-- Error: /tmp/tmpc0lvw22c.scala:17:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mbalanced_groups_count\e\
    [0m = balanced_groups.count()\n\e[31m\e[31m   |\e[0m                         \
    \           ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing argument for\
    \ parameter p of \e[33mmethod\e[0m \e[35mcount\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e\
    ["
  stdout: ''
  timestamp: 1659795635
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpfe4904sc.scala:21:338 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpfe4904sc.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpfe4904sc.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1659795587
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val open_braces = mutable.ListBuffer[String]()\n        val close_braces\
    \ = mutable.ListBuffer[String]()\n        val paren_open = mutable.ListBuffer[String]()\n\
    \        val paren_close = mutable.ListBuffer[String]()\n        val paren_group_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_count = mutable.ListBuffer[Int]()\n\
    \        val paren_group_open = mutable.ListBuffer[Int]()\n        val paren_group_close\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_size = mutable.ListBuffer[Int]()\n\
    \        val paren_group_close_size = mutable.ListBuffer[Int]()\n        val paren_group_open_count\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_close_count = mutable.ListBuffer[Int]()\n\
    \        val paren_group_open_count = mutable.ListBuffer[Int]()\n        val paren_group_close_count\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_count_size = mutable.ListBuffer[Int]()\n\
    \        val paren_group_close_count_size = mutable.ListBuffer[Int]()\n      \
    \  val paren_group_open_count_size = mutable.ListBuffer[Int]()\n        val paren_group_close_count_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_count_size = mutable.ListBuffer[Int]()\n\
    \        val paren_group_close_count_size = mutable.ListBuffer[Int]()\n      \
    \  val paren_group_open_count_size = mutable.ListBuffer[Int]()\n        val paren_group_close_count_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_count_size = mutable.ListBuffer[Int]()\n\
    \        val paren_group_close_count_size = mutable.ListBuffer[Int]()\n      \
    \  val paren_group_open_count_size = mutable.ListBuffer[Int]()\n        val paren_group_close_count_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_count_size = mutable.ListBuffer[Int]()\n\
    \        val paren_group_close_count_size = mutable.ListBuffer[Int]()\n      \
    \  val paren_group_open_count_size = mutable.ListBuffer[Int]()\n        val paren_group_close_count_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpekx53p6m.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpekx53p6m.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_group_open_count\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_open_count is already defined as \e[33mvalue\e\
    [0m \e[35mparen_group_open_count\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpekx53p6m.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mparen_group_close_count\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_close_count is already defined as \e[33mvalue\e\
    [0m \e[35mparen_group_close_count\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpekx53p6m.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mparen_group_open_count_size\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_open_count_size is already defined as \e[33mvalue\e\
    [0m \e[35mparen_group_open_count_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpekx53p6m.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mparen_group_close_count_size\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31"
  stdout: ''
  timestamp: 1659795634
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.filterNot(_ == \")\")\n        val paren_groups_flat3 =\
    \ paren_groups_flat2.filterNot(_ == \"(\")\n        val paren_groups_flat4 = paren_groups_flat3.filterNot(_\
    \ == \" \")\n        val paren_groups_flat5 = paren_groups_flat4.filterNot(_ ==\
    \ \"\\\\\")\n        val paren_groups_flat6 = paren_groups_flat5.filterNot(_ ==\
    \ \"(\")\n        val paren_groups_flat7 = paren_groups_flat6.filterNot(_ == \"\
    )\")\n        val paren_groups_flat8 = paren_groups_flat7.filterNot(_ == \"\\\\\
    \")\n        val paren_groups_flat9 = paren_groups_flat8.filterNot(_ == \" \"\
    )\n        val paren_groups_flat10 = paren_groups_flat9.filterNot(_ == \"\\\\\"\
    )\n        val paren_groups_flat11 = paren_groups_flat10.filterNot(_ == \"(\"\
    )\n        val paren_groups_flat12 = paren_groups_flat11.filterNot(_ == \")\"\
    )\n        val paren_groups_flat13 = paren_groups_flat12.filterNot(_ == \"\\\\\
    \")\n        val paren_groups_flat14 = paren_groups_flat13.filterNot(_ == \" \"\
    )\n        val paren_groups_flat15 = paren_groups_flat14.filterNot(_ == \"\\\\\
    \")\n        val paren_groups_flat16 = paren_groups_flat15.filterNot(_ == \"(\"\
    )\n        val paren_groups_flat17 = paren_groups_flat16.filterNot(_ == \")\"\
    )\n        val paren_groups_flat18 = paren_groups_flat17.filterNot(_ == \"\\\\\
    \")\n        val paren_groups_flat19 = paren_groups_flat18.filterNot(_ == \" \"\
    )\n        val paren_groups_flat20 = paren_groups_flat19.filterNot(_ == \"\\\\\
    \")\n        val paren_groups_flat21 = paren_groups_flat20.filterNot(_ == \"(\"\
    )\n        val paren_groups_flat22 = paren_groups_flat21.filterNot(_ == \")\"\
    )\n        val paren_groups_flat23 = paren_groups_flat22.filterNot(_ == \"\\\\\
    \")\n        val paren_groups_flat24 = paren_groups_flat23.filterNot(_ == \" \"\
    )\n        val paren_groups_flat25 = paren_groups_flat24.filterNot(_ == \"\\\\\
    \n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpixr5144k.scala:36:69 -----------------------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat25\e[0m\
    \ = paren_groups_flat24.filterNot(_ == \"\\\\\n\e[31m\e[31m   |\e[0m         \
    \                                                            ^\e[0m\n\e[31m  \
    \ |\e[0m                                                 unclosed string literal\n\
    \e[31m\e[31m-- Error: /tmp/tmpixr5144k.scala:38:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                 end\
    \ of statement expected but '=' found\n\e[31m\e[31m-- Error: /tmp/tmpixr5144k.scala:13:61\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m13 |\e[0m       \
    \ \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m = paren_groups_flat.filterNot(_\
    \ == \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m                                \
    \                             ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of\
    \ types Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpixr5144k.scala:14:62 -----------------------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat3\e[0m = paren_groups_flat2.filterNot(_\
    \ == \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m                                \
    \                              ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of\
    \ types Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpixr5144k.scala:15:62 -----------------------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat4\e[0m = paren_groups_flat3.filterNot(_\
    \ == \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                                \
    \                              ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of\
    \ types Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpixr5144k.scala:16:62 -----------------------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat5\e[0"
  stdout: ''
  timestamp: 1659795639
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_group_strings = paren_groups.map(x => x.replace(\"\
    )\", \"\"))\n        val paren_group_strings_sorted = paren_group_strings.sortWith((x,\
    \ y) => x.compareTo(y))\n        val paren_group_strings_sorted_without_spaces\
    \ = paren_group_strings_sorted.map(x => x.replace(\")\", \"\"))\n        val paren_group_strings_sorted_without_spaces_without_spaces\
    \ = paren_group_strings_sorted_without_spaces.map(x => x.replace(\"(\", \"\"))\n\
    \        val paren_group_strings_sorted_without_spaces_without_spaces_without_spaces\
    \ = paren_group_strings_sorted_without_spaces_without_spaces.map(x => x.replace(\"\
    {\", \"\"))\n        val paren_group_strings_sorted_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_group_strings_sorted_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"}\", \"\"))\n        val paren_group_strings_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_group_strings_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"[\", \"\"))\n        val paren_group_strings_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_group_strings_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"]\", \"\"))\n        val paren_group_strings_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_group_strings_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"{\", \"\"))\n        val paren_group_strings_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_group_strings_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"}\", \"\"))\n        val paren_group_strings_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_group_strings_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsmmsu732.scala:13:91\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_group_strings_sorted\e\
    [0m = paren_group_strings.sortWith((\e[36mx\e[0m, \e[36my\e[0m) => x.compareTo(y))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                       Found:    Int\n\e[31m   |\e[0m       \
    \                                                Required: Boolean\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpsmmsu732.scala:17:101 --------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_group_strings_sorted_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_group_strings_sorted_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"}\"\e[0m, \e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                           ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m\
    \ \e[35m\n\e[31m   |\e[0m  paren_group_strings_sorted_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpsmmsu732.scala:18:116 --------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_group_strings_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_group_strings_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"[\"\e[0m, \e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                          ^\e[0m\n\e[31m   |\e[0mRecursive \e\
    [33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_group_strings_sorted_without_spaces_without_spaces_without_s"
  stdout: ''
  timestamp: 1659795638
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_set = paren_groups.toSet\n        val paren_groups_list_size\
    \ = paren_groups.size\n        val paren_groups_list_size_2 = paren_groups_list_size\
    \ / 2\n        val paren_groups_list_size_3 = paren_groups_list_size / 3\n   \
    \     val paren_groups_list_size_4 = paren_groups_list_size / 4\n        val paren_groups_list_size_5\
    \ = paren_groups_list_size / 5\n        val paren_groups_list_size_6 = paren_groups_list_size\
    \ / 6\n        val paren_groups_list_size_7 = paren_groups_list_size / 7\n   \
    \     val paren_groups_list_size_8 = paren_groups_list_size / 8\n        val paren_groups_list_size_9\
    \ = paren_groups_list_size / 9\n        val paren_groups_list_size_10 = paren_groups_list_size\
    \ / 10\n        val paren_groups_list_size_11 = paren_groups_list_size / 11\n\
    \        val paren_groups_list_size_12 = paren_groups_list_size / 12\n       \
    \ val paren_groups_list_size_13 = paren_groups_list_size / 13\n        val paren_groups_list_size_14\
    \ = paren_groups_list_size / 14\n        val paren_groups_list_size_15 = paren_groups_list_size\
    \ / 15\n        val paren_groups_list_size_16 = paren_groups_list_size / 16\n\
    \        val paren_groups_list_size_17 = paren_groups_list_size / 17\n       \
    \ val paren_groups_list_size_18 = paren_groups_list_size / 18\n        val paren_groups_list_size_19\
    \ = paren_groups_list_size / 19\n        val paren_groups_list_size_20 = paren_groups_list_size\
    \ / 20\n        val paren_groups_list_size_21 = paren_groups_list_size / 21\n\
    \        val paren_groups_list_size_22 = paren_groups_list_size / 22\n       \
    \ val paren_groups_list_size_23 = paren_groups_list_size / 23\n        val paren_groups_list_size_24\
    \ = paren_groups_list_size / 24\n        val paren_groups_list_size_25 = paren_groups_list_size\
    \ / 25\n        val paren_groups_list_size_26 = paren_groups_list_size / 26\n\
    \        val paren_groups_list_size_27 = paren_groups_list_size / 27\n       \
    \ val paren_groups_list_size_28 = paren_groups_list_size / 28\n        val paren_groups_list_size_29\
    \ = paren_groups_list_size / 29\n        val paren_groups_list_size_30 = paren_groups_list_size\
    \ / 30\n        val paren_groups_list_size_31 = paren_groups_list_size / 31\n\
    \        val paren_groups_\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpaz17e3u7.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpaz17e3u7.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795637
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_close\
    \ = mutable.ListBuffer[String]()\n        paren_string.foreach {\n           \
    \ c =>\n                if(c == '(') paren_open += c\n                if(c ==\
    \ ')') paren_close += c\n                if(c == ' ') ()\n                if(c\
    \ == '(') paren_groups += c\n                if(c == ')') paren_groups += c\n\
    \        }\n        paren_groups.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfq7ieml3.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfq7ieml3.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_open\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpfq7ieml3.scala:13:26 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_close\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659795633
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_set = paren_groups.toSet\n        val paren_groups_list_with_duplicates\
    \ = paren_groups.toList.distinct\n        val paren_groups_list_without_duplicates\
    \ = paren_groups_list_with_duplicates.toList\n        val paren_groups_list_without_duplicates_set\
    \ = paren_groups_list_without_duplicates.toSet\n        val paren_groups_list_without_duplicates_set_size\
    \ = paren_groups_list_without_duplicates_set.size\n        val paren_groups_list_without_duplicates_set_size\
    \ = paren_groups_list_without_duplicates_set_size.toInt\n        val paren_groups_list_without_duplicates_set_size\
    \ = paren_groups_list_without_duplicates_set_size.toInt\n        val paren_groups_list_without_duplicates_set_size\
    \ = paren_groups_list_without_duplicates_set_size.toInt\n        val paren_groups_list_without_duplicates_set_size\
    \ = paren_groups_list_without_duplicates_set_size.toInt\n        val paren_groups_list_without_duplicates_set_size\
    \ = paren_groups_list_without_duplicates_set_size.toInt\n        val paren_groups_list_without_duplicates_set_size\
    \ = paren_groups_list_without_duplicates_set_size.toInt\n        val paren_groups_list_without_duplicates_set_size\
    \ = paren_groups_list_without_duplicates_set_size.toInt\n        val paren_groups_list_without_duplicates_set_size\
    \ = paren_groups_list_without_duplicates_set_size.toInt\n        val paren_groups_list_without_duplicates_set_size\
    \ = paren_groups_list_without_duplicates_set_size.toInt\n        val paren_groups_list_without_duplicates_set_size\
    \ = paren_groups_list_without_duplicates_set_size.toInt\n        val paren_groups_list_without_duplicates_set_size\
    \ = paren_groups_list_without_duplicates_set_size.toInt\n        val paren_groups_list_without_duplicates_set_size\
    \ = paren_groups_list_without_duplicates_set_size.toInt\n        val paren_groups_list_without_duplicates_set_size\
    \ = paren_groups_list_without_duplicates_set_size.toInt\n        val paren_groups_list_without_duplicates_set_size\
    \ = paren_groups_list_without_duplicates_set_size.toInt\n        val paren_groups_list_without_duplicates_set_size\
    \ = paren_groups_list_without_duplicates_set_size.toInt\n        val paren_groups_list_without_duplicates_set_size\
    \ = paren_groups_list_without_duplicates_set_size.toInt\n        val paren_groups_list_without_duplicates_set_size\
    \ = paren_groups_list_without_duplicates_set_size.toInt\n        val paren_groups_list_without_duplicates_set_size\
    \ = paren_groups_list_without_duplicates_set_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa3pupsrg.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_list_without_duplicates_set_size\e\
    [0m = paren_groups_list_without_duplicates_set_size.toInt\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_list_without_duplicates_set_size is already defined\
    \ as \e[33mvalue\e[0m \e[35mparen_groups_list_without_duplicates_set_size\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpa3pupsrg.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_list_without_duplicates_set_size\e\
    [0m = paren_groups_list_without_duplicates_set_size.toInt\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_list_without_duplicates_set_size is already defined\
    \ as \e[33mvalue\e[0m \e[35mparen_groups_list_without_duplicates_set_size\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpa3pupsrg.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_list_without_duplicates_set_size\e\
    [0m = paren_groups_list_without_duplicates_set_size.toInt\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_list_without_duplicates_set_size is already defined\
    \ as \e[33mvalue\e[0m \e[35mparen_groups_list_without_duplicates_set_size\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpa3pupsrg.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m "
  stdout: ''
  timestamp: 1659795636
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_count = paren_groups.length\n        val paren_groups_array\
    \ = new Array[String](paren_groups_count)\n        var paren_groups_index = 0\n\
    \        for(paren_group <- paren_groups) {\n            val paren_group_array\
    \ = paren_group.split(\"\\\\)\")\n            val paren_group_array_count = paren_group_array.length\n\
    \            val paren_group_array_array = new Array[String](paren_group_array_count)\n\
    \            var paren_group_array_index = 0\n            for(paren_group_array\
    \ <- paren_group_array) {\n                paren_group_array_array(paren_group_array_index)\
    \ = paren_group_array\n                paren_group_array_index += 1\n        \
    \    }\n            paren_groups_array(paren_groups_index) = paren_group_array_array\n\
    \            paren_groups_index += 1\n        }\n        paren_groups_array\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8a1ofmko.scala:24:53\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m            paren_groups_array(paren_groups_index)\
    \ = paren_group_array_array\n\e[31m\e[31m   |\e[0m                           \
    \                          ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                Found:    (paren_group_array_array : Array[String])\n\e[31m \
    \  |\e[0m                     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp8a1ofmko.scala:27:8 ---------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        paren_groups_array\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (paren_groups_array\
    \ : Array[String])\n\e[31m   |\e[0m        Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659795638
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpfe4904sc.scala:21:338 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpfe4904sc.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpfe4904sc.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1659795587
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").map(_.trim).filter(_.nonEmpty)\n        val paren_groups_with_spaces\
    \ = paren_groups.map(x => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces\
    \ = paren_groups_with_spaces.map(x => x.replace(\"( \", \" (\"))\n        val\
    \ paren_groups_with_spaces_without_spaces_without_spaces = paren_groups_with_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4xh23t53.scala:22:5\
    \ ---------------------\e[0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795638
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.filterNot(_ == \")\")\n        val paren_groups_flat3 =\
    \ paren_groups_flat2.filterNot(_ == \"(\")\n        val paren_groups_flat4 = paren_groups_flat3.filterNot(_\
    \ == \" \")\n        val paren_groups_flat5 = paren_groups_flat4.filterNot(_ ==\
    \ \"\")\n        paren_groups_flat5.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpd_z7osih.scala:13:61 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m\
    \ = paren_groups_flat.filterNot(_ == \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                             ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types Char and String cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- Error: /tmp/tmpd_z7osih.scala:14:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat3\e[0m\
    \ = paren_groups_flat2.filterNot(_ == \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmpd_z7osih.scala:15:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat4\e[0m\
    \ = paren_groups_flat3.filterNot(_ == \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmpd_z7osih.scala:16:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat5\e[0m\
    \ = paren_groups_flat4.filterNot(_ == \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types Char and String cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd_z7osih.scala:17:27\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        paren_groups_flat5.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \       Found:    List[\e[1m\e[31mChar\e[0m]\n\e[31m   |\e[0m        Required:\
    \ List[\e[1m\e[32mString\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659795639
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_group_regex = \"\"\"(?x)\n            \\((?P<paren_group>[^()]+)\\\
    )\n            |\n            \\((?P<paren_group>[^()]+)\\)\n            |\n \
    \           \\((?P<paren_group>[^()]+)\\)\n            |\n            \\((?P<paren_group>[^()]+)\\\
    )\n        \"\"\".r\n\n        paren_string.split(\"(?x)\").foreach { s =>\n \
    \           val m = paren_group_regex.findFirstMatchIn(s)\n            if (m !=\
    \ null) {\n                paren_groups += m.group(\"paren_group\")\n        \
    \    } else {\n                paren_groups += s\n            }\n        }\n \
    \       paren_groups.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu1327qtt.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659795634
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val open_braces = mutable.ListBuffer[String]()\n        val close_braces\
    \ = mutable.ListBuffer[String]()\n        val spaces = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_close\
    \ = mutable.ListBuffer[String]()\n        val paren_space = mutable.ListBuffer[String]()\n\
    \        val paren_open_index = mutable.ListBuffer[Int]()\n        val paren_close_index\
    \ = mutable.ListBuffer[Int]()\n        val paren_space_index = mutable.ListBuffer[Int]()\n\
    \        val paren_open_index = mutable.ListBuffer[Int]()\n        val paren_close_index\
    \ = mutable.ListBuffer[Int]()\n        val paren_space_index = mutable.ListBuffer[Int]()\n\
    \        val paren_open_index = mutable.ListBuffer[Int]()\n        val paren_close_index\
    \ = mutable.ListBuffer[Int]()\n        val paren_space_index = mutable.ListBuffer[Int]()\n\
    \        val paren_open_index = mutable.ListBuffer[Int]()\n        val paren_close_index\
    \ = mutable.ListBuffer[Int]()\n        val paren_space_index = mutable.ListBuffer[Int]()\n\
    \        val paren_open_index = mutable.ListBuffer[Int]()\n        val paren_close_index\
    \ = mutable.ListBuffer[Int]()\n        val paren_space_index = mutable.ListBuffer[Int]()\n\
    \        val paren_open_index = mutable.ListBuffer[Int]()\n        val paren_close_index\
    \ = mutable.ListBuffer[Int]()\n        val paren_space_index = mutable.ListBuffer[Int]()\n\
    \        val paren_open_index = mutable.ListBuffer[Int]()\n        val paren_close_index\
    \ = mutable.ListBuffer[Int]()\n        val paren_space_index = mutable.ListBuffer[Int]()\n\
    \        val paren_open_index = mutable.ListBuffer[Int]()\n        val paren_close_index\
    \ = mutable.ListBuffer[Int]()\n        val paren_space_index = mutable.ListBuffer[Int]()\n\
    \        val paren_open_index = mutable.ListBuffer[Int]()\n        val paren_close_index\
    \ = mutable.ListBuffer[Int]()\n        val paren_space_index = mutable.ListBuffer[Int]()\n\
    \        val paren_open\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0m_g0zar.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0m_g0zar.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_open_index\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mparen_open_index is already defined as \e[33mvalue\e[0m \e[35mparen_open_index\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0m_g0zar.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mparen_close_index\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_close_index is already defined as \e[33mvalue\e[0m \e\
    [35mparen_close_index\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp0m_g0zar.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mparen_space_index\e[0m =\
    \ mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_space_index is already defined as \e[33mvalue\e[0m \e\
    [35mparen_space_index\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp0m_g0zar.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mparen_open_index\e[0m =\
    \ mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_open_index is already defined as \e[33mvalue\e[0m \e\
    [35mparen_open_index\e[0m\n\e[31m   |\e[0m\n\e[31m   |"
  stdout: ''
  timestamp: 1659795639
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_group_strings = paren_groups.map(x => x.replace(\"\
    )\", \"\"))\n        val paren_group_strings_sorted = paren_group_strings.sortWith((x,\
    \ y) => x.compareTo(y) == -1)\n        val paren_group_strings_sorted_without_spaces\
    \ = paren_group_strings_sorted.map(x => x.replace(\"(\", \"\").replace(\")\",\
    \ \"\"))\n        val paren_group_strings_sorted_without_spaces_without_duplicates\
    \ = paren_group_strings_sorted_without_spaces.distinct\n        val paren_group_strings_sorted_without_spaces_without_duplicates_without_spaces\
    \ = paren_group_strings_sorted_without_spaces_without_duplicates.map(x => x.replace(\"\
    (\", \"\").replace(\")\", \"\"))\n        val paren_group_strings_sorted_without_spaces_without_duplicates_without_spaces_without_spaces\
    \ = paren_group_strings_sorted_without_spaces_without_duplicates_without_spaces.map(x\
    \ => x.replace(\"(\", \"\").replace(\")\", \"\"))\n        val paren_group_strings_sorted_without_spaces_without_duplicates_without_spaces_without_spaces_without_spaces\
    \ = paren_group_strings_sorted_without_spaces_without_duplicates_without_spaces_without_spaces.map(x\
    \ => x.replace(\"(\", \"\").replace(\")\", \"\"))\n        val paren_group_strings_sorted_without_spaces_without_duplicates_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_group_strings_sorted_without_spaces_without_duplicates_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"(\", \"\").replace(\")\", \"\"))\n        val paren_group_strings_sorted_without_spaces_without_duplicates_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_group_strings_sorted_without_spaces_without_duplicates_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"(\", \"\").replace(\")\", \"\"))\n        val paren_group_strings_sorted_without_spaces_without_duplicates_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_group_strings_sorted_without_spaces_without_duplicates_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"(\", \"\").replace(\")\", \"\"))\n        val paren_group_strings_sorted_without_spaces_without_duplicates_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_group_strings_sorted_without_spaces_without_duplicates_without_spaces_without_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpg__wyxfp.scala:20:150 --------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mparen_group_strings_sorted_without_spaces_without_duplicates_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_group_strings_sorted_without_spaces_without_duplicates_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"(\"\e[0m, \e[31m\"\"\e[0m).replace(\e[31m\")\"\
    \e[0m, \e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e[0m                              \
    \                                                                            \
    \                                            ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_group_strings_sorted_without_spaces_without_duplicates_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpg__wyxfp.scala:21:165 --------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_group_strings_sorted_without_spaces_without_duplicates_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_group_strings_sorted_without_spaces_without_duplicates_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"(\"\e[0m, \e[31m\"\"\e[0m).replace(\e[31m\")\"\
    \e[0m, \e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e[0m                              \
    \                                                                            \
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_group_strings_sorted_without_spaces_without_duplicates_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e["
  stdout: ''
  timestamp: 1659795639
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_set = paren_groups.toSet\n        val paren_groups_list_with_duplicates\
    \ = paren_groups.toList.distinct\n        val paren_groups_list_without_duplicates\
    \ = paren_groups_list_with_duplicates.toList\n        val paren_groups_list_without_duplicates_sorted\
    \ = paren_groups_list_without_duplicates.sortBy(x => x)\n        val paren_groups_list_without_duplicates_sorted_with_duplicates_removed\
    \ = paren_groups_list_without_duplicates_sorted.filterNot(x => paren_groups_list_without_duplicates_sorted.contains(x))\n\
    \        val paren_groups_list_without_duplicates_sorted_with_duplicates_removed_sorted\
    \ = paren_groups_list_without_duplicates_sorted_with_duplicates_removed.sortBy(x\
    \ => x)\n        val paren_groups_list_without_duplicates_sorted_with_duplicates_removed_sorted_with_duplicates_removed\
    \ = paren_groups_list_without_duplicates_sorted_with_duplicates_removed_sorted.filterNot(x\
    \ => paren_groups_list_without_duplicates_sorted_with_duplicates_removed_sorted.contains(x))\n\
    \        val paren_groups_list_without_duplicates_sorted_with_duplicates_removed_sorted_with_duplicates_removed_sorted\
    \ = paren_groups_list_without_duplicates_sorted_with_duplicates_removed_sorted_with_duplicates_removed.sortBy(x\
    \ => x)\n        val paren_groups_list_without_duplicates_sorted_with_duplicates_removed_sorted_with_duplicates_removed_sorted_with_duplicates_removed\
    \ = paren_groups_list_without_duplicates_sorted_with_duplicates_removed_sorted_with_duplicates_removed_sorted_with_duplicates_removed.filterNot(x\
    \ => paren_groups_list_without_duplicates_sorted_with_duplicates_removed_sorted_with_duplicates_removed_sorted.contains(x))\n\
    \        val paren_groups_list_without_duplicates_sorted_with_duplicates_removed_sorted_with_duplicates_removed_sorted_with_duplicates_removed_sorted\
    \ = paren_groups_list_without_duplicates_sorted_with_duplicates_removed_sorted_with_duplicates_removed_sorted_with_duplicates_removed_sorted.sortBy(x\
    \ => x)\n        val paren_groups_list_without_duplicates_sorted_with_duplicates_removed_sorted_with_duplicates_removed_sorted_with_duplicates_removed_sorted_with_duplicates_removed\
    \ = paren_groups_list_without_duplicates_sorted_with_duplicates_removed_sorted_with_duplicates_removed_sorted_with_duplicates_removed_sorted_with_duplicates_removed.filterNot(x\
    \ => paren_groups_list_without_duplicates_sorted_with_duplicates_removed_sorted_with_duplicates_removed_sorted_with_duplicates_removed_sorted.contains(x))\n\
    \        val paren_groups_list_without_duplicates_sorted_with_duplicates_removed_sorted_with_duplicates_removed_sorted_with_duplicates_removed_sorted_with_duplicates_removed_sorted\
    \ = paren_\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqred29qo.scala:20:144 --------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_list_without_duplicates_sorted_with_duplicates_removed_sorted_with_duplicates_removed_sorted_with_duplicates_removed\e\
    [0m = paren_groups_list_without_duplicates_sorted_with_duplicates_removed_sorted_with_duplicates_removed_sorted_with_duplicates_removed.filterNot(\e\
    [36mx\e[0m => paren_groups_list_without_duplicates_sorted_with_duplicates_removed_sorted_with_duplicates_removed_sorted.contains(x))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \            ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m\
    \   |\e[0m  paren_groups_list_without_duplicates_sorted_with_duplicates_removed_sorted_with_duplicates_removed_sorted_with_duplicates_removed\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpqred29qo.scala:21:151 --------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_list_without_duplicates_sorted_with_duplicates_removed_sorted_with_duplicates_removed_sorted_with_duplicates_removed_sorted\e\
    [0m = paren_groups_list_without_duplicates_sorted_with_duplicates_removed_sorted_with_duplicates_removed_sorted_with_duplicates_removed_sorted.sortBy(\e\
    [36mx\e[0m => x)\n\e[31m\e[31m   |\e[0m                                      \
    \                                                                            \
    \                                     ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_list_without_duplicates_sorted_with_duplicates_removed_sorted_with_duplicates_removed_sorted_with_duplicates_removed_sorted\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpqred29qo.scala:22:175 --------------------------\e[0m\e[0"
  stdout: ''
  timestamp: 1659795640
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\") \", \" ))\"\
    )\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3bjzmxbk.scala:15:8 ----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces.map(\e[36mx\e[0m\
    \ => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m   |\e[0m \
    \       ^^^\e[0m\n\e[31m   |\e[0m        ')' expected, but 'val' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp3bjzmxbk.scala:30:1 ---------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795639
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpfe4904sc.scala:21:338 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpfe4904sc.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpfe4904sc.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1659795587
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_close\
    \ = mutable.ListBuffer[String]()\n        paren_string.foreach { c =>\n      \
    \      c match {\n                case '(' -> paren_open += c\n              \
    \  case ')' -> paren_close += c\n                case _ -> paren_groups += c\n\
    \            }\n        }\n        if (paren_open.size == paren_close.size) {\n\
    \            paren_groups\n        } else {\n            paren_groups.toList\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxu0i3192.scala:17:16 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mcase\e[0m \e[31m')'\e[0m -> paren_close\
    \ += c\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m      \
    \          '=>' expected, but 'case' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpxu0i3192.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m            }\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\e[31m   |\e[0m\
    \            '=>' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpxu0i3192.scala:11:27 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpxu0i3192.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_open\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpxu0i3192.scala:13:26 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_close\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpxu0i3192.scala:16:39 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mcase\e[0m \e[31m'('\e[0m -> paren_open\
    \ += c\n\e[31m\e[31m   |\e[0m                                       ^^\e[0m\n\e\
    [31m   |\e[0m                                       Not found: +=\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when"
  stdout: ''
  timestamp: 1659795639
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_count = paren_groups.length\n        val paren_groups_count_with_paren\
    \ = paren_groups_count + 1\n        val paren_groups_count_with_paren_without_paren\
    \ = paren_groups_count_with_paren - 1\n        val paren_groups_count_with_paren_without_paren_without_spaces\
    \ = paren_groups_count_with_paren_without_paren - 1\n        val paren_groups_count_with_paren_without_paren_without_spaces_without_spaces\
    \ = paren_groups_count_with_paren_without_paren_without_spaces - 1\n        val\
    \ paren_groups_count_with_paren_without_paren_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_count_with_paren_without_paren_without_spaces_without_spaces\
    \ - 1\n        val paren_groups_count_with_paren_without_paren_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_count_with_paren_without_paren_without_spaces_without_spaces_without_spaces\
    \ - 1\n        val paren_groups_count_with_paren_without_paren_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_count_with_paren_without_paren_without_spaces_without_spaces_without_spaces_without_spaces\
    \ - 1\n        val paren_groups_count_with_paren_without_paren_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_count_with_paren_without_paren_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ - 1\n        val paren_groups_count_with_paren_without_paren_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_count_with_paren_without_paren_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ - 1\n        val paren_groups_count_with_paren_without_paren_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_count_with_paren_without_paren_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ - 1\n        val paren_groups_count_with_paren_without_paren_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_count_with_paren_without_paren_without_spaces_without_spaces_without_spaces_without_spaces_without_space\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp3en3hhp2.scala:21:163 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_count_with_paren_without_paren_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_count_with_paren_without_paren_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                                      \
    \                                                                            \
    \                                                 ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_count_with_paren_without_paren_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp3en3hhp2.scala:22:178 --------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_count_with_paren_without_paren_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_count_with_paren_without_paren_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                                      \
    \                                                                            \
    \                                                                ^\e[0m\n\e[31m\
    \   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_count_with_paren_without_paren_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp3en3hhp2."
  stdout: ''
  timestamp: 1659795641
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replace(\" \"\
    , \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpnjw4k5um.scala:23:268 --------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                            ^\e[0m\n\e[31m  \
    \ |\e[0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpnjw4k5um.scala:24:4\
    \ ------------------------------------------\e[0m\e[0m\n\e[31m24 |\e[0m    }\n\
    \e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both\
    \ \e[33mobject\e[0m \e[35mDeprecatedDoubleOrdering\e[0m in \e[33mobject\e[0m \e\
    [35mOrdering\e[0m and \e[33mobject\e[0m \e[35mChar\e[0m in \e[33mobject\e[0m \e\
    [35mOrdering\e[0m match type Ordering[B] of parameter ord of \e[33mmethod\e[0m\
    \ \e[35msortBy\e[0m in \e[33mclass\e[0m \e[35mArrayOps\e[0m\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpnjw4k5um.scala:24:5 ---------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659795617
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_count = paren_groups.length\n        val paren_groups_count_with_open_braces\
    \ = paren_groups_count - paren_groups.length\n        val paren_groups_count_with_open_braces_without_spaces\
    \ = paren_groups_count_with_open_braces - 1\n        val paren_groups_count_with_open_braces_without_spaces_without_spaces\
    \ = paren_groups_count_with_open_braces_without_spaces - 1\n        val paren_groups_count_with_open_braces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_count_with_open_braces_without_spaces_without_spaces - 1\n  \
    \      val paren_groups_count_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_count_with_open_braces_without_spaces_without_spaces_without_spaces\
    \ - 1\n        val paren_groups_count_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_count_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ - 1\n        val paren_groups_count_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_count_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ - 1\n        val paren_groups_count_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_count_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ - 1\n        val paren_groups_count_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_count_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ - 1\n        val paren_groups_count_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_count_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ - 1\n        val paren_groups_count_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_space\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5yoab65y.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp5yoab65y.scala:24:5 ---------------------\e[0m\e[0m\n\e[31m24 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795642
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_count = paren_groups_with_spaces.length\n\
    \        val paren_groups_with_spaces_count_with_paren = paren_groups_with_spaces_count\
    \ - paren_groups_with_spaces.filter(x => x.contains(\"(\")).size\n        val\
    \ paren_groups_with_spaces_count_without_paren = paren_groups_with_spaces_count\
    \ - paren_groups_with_spaces.filter(x => x.contains(\")\")).size\n        val\
    \ paren_groups_with_spaces_count_with_paren_and_without_paren = paren_groups_with_spaces_count_with_paren\
    \ + paren_groups_with_spaces_count_without_paren\n        val paren_groups_with_spaces_count_with_paren_and_without_paren_and_spaces\
    \ = paren_groups_with_spaces_count_with_paren_and_without_paren_and_spaces + 1\n\
    \        val paren_groups_with_spaces_count_with_paren_and_without_paren_and_spaces_and_paren\
    \ = paren_groups_with_spaces_count_with_paren_and_without_paren_and_spaces_and_paren\
    \ + 1\n        val paren_groups_with_spaces_count_with_paren_and_without_paren_and_spaces_and_paren_and_spaces\
    \ = paren_groups_with_spaces_count_with_paren_and_without_paren_and_spaces_and_paren_and_spaces\
    \ + 1\n        val paren_groups_with_spaces_count_with_paren_and_without_paren_and_spaces_and_paren_and_spaces_and_paren\
    \ = paren_groups_with_spaces_count_with_paren_and_without_paren_and_spaces_and_paren_and_spaces_and_paren\
    \ + 1\n        val paren_groups_with_spaces_count_with_paren_and_without_paren_and_spaces_and_paren_and_spaces_and_paren_and_spaces\
    \ = paren_groups_with_spaces_count_with_paren_and_without_paren_and_spaces_and_paren_and_spaces_and_paren_and_spaces\
    \ + 1\n        val paren_groups_with_spaces_count_with_paren_and_without_paren_and_spaces_and_paren_and_spaces_and_paren_and_spaces_and_paren\
    \ = paren_groups_with_spaces_count_with_paren_and_without_paren_and_spaces_and_paren_and_spaces_and_paren_and_spaces_and_paren\
    \ + 1\n        val paren_groups_with_spaces_count_with_paren_and_without_paren_and_spaces_and_paren_and_spaces_and_paren_and_spaces_and_paren_and_spaces\
    \ = paren_groups_with_spaces_count_with_paren_and_without_paren_and_spaces_and_paren_and_spaces_and_paren_and_spaces_and_paren_and_spaces\
    \ + 1\n        val paren_groups_with_spaces_count_with_paren_and_without_paren_and_spaces_and_paren_and_spaces_and_paren_and_spaces_and_paren_and_spaces_and_paren\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpo25r88ke.scala:24:157 --------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_count_with_paren_and_without_paren_and_spaces_and_paren_and_spaces_and_paren_and_spaces_and_paren_and_spaces_and_paren\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                                \
    \                                                                            \
    \                                 ^\e[0m\n\e[31m   |\e[0m                    \
    \                   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpo25r88ke.scala:17:85 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_count_with_paren_and_without_paren_and_spaces\e\
    [0m = paren_groups_with_spaces_count_with_paren_and_without_paren_and_spaces +\
    \ \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                                        \
    \                                             ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35mparen_groups_with_spaces_count_with_paren_and_without_paren_and_spaces\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpo25r88ke.scala:18:95\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_count_with_paren_and_without_paren_and_spaces_and_paren\e\
    [0m = paren_groups_with_spaces_count_with_paren_and_without_paren_and_spaces_and_paren\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                                      \
    \                                                         ^\e[0m\n\e[31m   |\e\
    [0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_count_with_paren_and_without_paren_and_spaces_and_paren\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpo25r88ke.scala:19:106 -----------"
  stdout: ''
  timestamp: 1659795642
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(|\\\\)\")\n        val paren_group_count = paren_groups.length\n        val\
    \ paren_group_lengths = paren_groups.map(_.length).toList\n        val paren_group_lengths_sum\
    \ = paren_group_lengths.sum\n        val paren_group_lengths_product = paren_group_lengths.product\n\
    \        val paren_group_lengths_product2 = paren_group_lengths_product * paren_group_lengths_product\n\
    \        val paren_group_lengths_product3 = paren_group_lengths_product2 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product4 = paren_group_lengths_product3 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product5 = paren_group_lengths_product4 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product6 = paren_group_lengths_product5 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product7 = paren_group_lengths_product6 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product8 = paren_group_lengths_product7 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product9 = paren_group_lengths_product8 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product10 = paren_group_lengths_product9 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product11 = paren_group_lengths_product10 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product12 = paren_group_lengths_product11 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product13 = paren_group_lengths_product12 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product14 = paren_group_lengths_product13 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product15 = paren_group_lengths_product14 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product16 = paren_group_lengths_product15 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product17 = paren_group_lengths_product16 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product18 = paren_group_lengths_product17 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product19 = paren_group_lengths_product18 * paren_group_lengths_product\n\
    \        val paren_group_lengths_\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq2ra1lwt.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpq2ra1lwt.scala:35:5 ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795645
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.filterNot(_ == \")\")\n        val paren_groups_flat3 =\
    \ paren_groups_flat2.filterNot(_ == \"(\")\n        val paren_groups_flat4 = paren_groups_flat3.filterNot(_\
    \ == \" \")\n        val paren_groups_flat5 = paren_groups_flat4.filterNot(_ ==\
    \ \"\\\\\")\n        val paren_groups_flat6 = paren_groups_flat5.filterNot(_ ==\
    \ \"\\\\(\")\n        val paren_groups_flat7 = paren_groups_flat6.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat8 = paren_groups_flat7.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat9 = paren_groups_flat8.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat10 = paren_groups_flat9.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat11 = paren_groups_flat10.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat12 = paren_groups_flat11.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat13 = paren_groups_flat12.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat14 = paren_groups_flat13.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat15 = paren_groups_flat14.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat16 = paren_groups_flat15.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat17 = paren_groups_flat16.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat18 = paren_groups_flat17.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat19 = paren_groups_flat18.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat20 = paren_groups_flat19.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat21 = paren_groups_flat20.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat22 = paren_groups_flat21.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat23 = paren_groups_flat22.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat24 = paren_groups_flat23.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat25 = paren_groups_flat24.filter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp8xajzkl1.scala:13:61 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m\
    \ = paren_groups_flat.filterNot(_ == \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                             ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types Char and String cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- Error: /tmp/tmp8xajzkl1.scala:14:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat3\e[0m\
    \ = paren_groups_flat2.filterNot(_ == \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp8xajzkl1.scala:15:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat4\e[0m\
    \ = paren_groups_flat3.filterNot(_ == \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp8xajzkl1.scala:16:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat5\e[0m\
    \ = paren_groups_flat4.filterNot(_ == \e[31m\"\\\\\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                              ^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp8xajzkl1.scala:17:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat6\e[0m\
    \ = paren_groups_flat5.filterNot(_ == \e[31m\"\\\\(\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                              ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp8xajzkl1.scala:18:62 -----------------------------------------\e\
    [0m"
  stdout: ''
  timestamp: 1659795604
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.filterNot(_ == \")\")\n        val paren_groups_flat3 =\
    \ paren_groups_flat2.filterNot(_ == \"(\")\n        val paren_groups_flat4 = paren_groups_flat3.filterNot(_\
    \ == \" \")\n        val paren_groups_flat5 = paren_groups_flat4.filterNot(_ ==\
    \ \"\\\\\")\n        val paren_groups_flat6 = paren_groups_flat5.filterNot(_ ==\
    \ \"\\\\(\")\n        val paren_groups_flat7 = paren_groups_flat6.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat8 = paren_groups_flat7.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat9 = paren_groups_flat8.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat10 = paren_groups_flat9.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat11 = paren_groups_flat10.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat12 = paren_groups_flat11.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat13 = paren_groups_flat12.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat14 = paren_groups_flat13.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat15 = paren_groups_flat14.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat16 = paren_groups_flat15.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat17 = paren_groups_flat16.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat18 = paren_groups_flat17.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat19 = paren_groups_flat18.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat20 = paren_groups_flat19.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat21 = paren_groups_flat20.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat22 = paren_groups_flat21.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat23 = paren_groups_flat22.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat24 = paren_groups_flat23.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat25 = paren_groups_flat24.filter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp8xajzkl1.scala:13:61 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m\
    \ = paren_groups_flat.filterNot(_ == \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                             ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types Char and String cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- Error: /tmp/tmp8xajzkl1.scala:14:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat3\e[0m\
    \ = paren_groups_flat2.filterNot(_ == \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp8xajzkl1.scala:15:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat4\e[0m\
    \ = paren_groups_flat3.filterNot(_ == \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp8xajzkl1.scala:16:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat5\e[0m\
    \ = paren_groups_flat4.filterNot(_ == \e[31m\"\\\\\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                              ^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp8xajzkl1.scala:17:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat6\e[0m\
    \ = paren_groups_flat5.filterNot(_ == \e[31m\"\\\\(\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                              ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp8xajzkl1.scala:18:62 -----------------------------------------\e\
    [0m"
  stdout: ''
  timestamp: 1659795604
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").map(_.trim).toList\n        val open_braces = paren_groups.filter(_.contains(\"\
    {\"))\n        val close_braces = paren_groups.filter(_.contains(\"}\"))\n   \
    \     val open_brace_counts = open_braces.map(x => x.count(\"{\") - x.count(\"\
    }\"))\n        val close_brace_counts = close_braces.map(x => x.count(\"{\") -\
    \ x.count(\"}\"))\n        val open_brace_counts_sum = open_brace_counts.sum\n\
    \        val close_brace_counts_sum = close_brace_counts.sum\n        val open_brace_counts_diff\
    \ = open_brace_counts_sum - close_brace_counts_sum\n        val close_brace_counts_diff\
    \ = close_brace_counts_sum - open_brace_counts_sum\n        val open_brace_counts_diff_percent\
    \ = open_brace_counts_diff / close_brace_counts_sum * 100\n        val close_brace_counts_diff_percent\
    \ = close_brace_counts_diff / open_brace_counts_sum * 100\n        val open_brace_counts_diff_percent_percent\
    \ = open_brace_counts_diff_percent / close_brace_counts_diff_percent * 100\n \
    \       val open_brace_counts_diff_percent_percent = open_brace_counts_diff_percent\
    \ / close_brace_counts_diff_percent * 100\n        val open_brace_counts_diff_percent_percent\
    \ = open_brace_counts_diff_percent / close_brace_counts_diff_percent * 100\n \
    \       val open_brace_counts_diff_percent_percent = open_brace_counts_diff_percent\
    \ / close_brace_counts_diff_percent * 100\n        val open_brace_counts_diff_percent_percent\
    \ = open_brace_counts_diff_percent / close_brace_counts_diff_percent * 100\n \
    \       val open_brace_counts_diff_percent_percent = open_brace_counts_diff_percent\
    \ / close_brace_counts_diff_percent * 100\n        val open_brace_counts_diff_percent_percent\
    \ = open_brace_counts_diff_percent / close_brace_counts_diff_percent * 100\n \
    \       val open_brace_counts_diff_percent_percent = open_brace_counts_diff_percent\
    \ / close_brace_counts_diff_percent * 100\n        val open_brace_counts_diff_percent_percent\
    \ = open\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptwucasqm.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mopen_brace_counts_diff_percent_percent\e\
    [0m = open_brace_counts_diff_percent / close_brace_counts_diff_percent * \e[31m100\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopen_brace_counts_diff_percent_percent is already defined\
    \ as \e[33mvalue\e[0m \e[35mopen_brace_counts_diff_percent_percent\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmptwucasqm.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mopen_brace_counts_diff_percent_percent\e\
    [0m = open_brace_counts_diff_percent / close_brace_counts_diff_percent * \e[31m100\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopen_brace_counts_diff_percent_percent is already defined\
    \ as \e[33mvalue\e[0m \e[35mopen_brace_counts_diff_percent_percent\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmptwucasqm.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mopen_brace_counts_diff_percent_percent\e\
    [0m = open_brace_counts_diff_percent / close_brace_counts_diff_percent * \e[31m100\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopen_brace_counts_diff_percent_percent is already defined\
    \ as \e[33mvalue\e[0m \e[35mopen_brace_counts_diff_percent_percent\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmptwucasqm.scala"
  stdout: ''
  timestamp: 1659795645
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_group_counts = paren_groups.map(x => x.split(\"\\\\\
    )\").length).sum\n        val paren_group_lengths = paren_groups.map(x => x.split(\"\
    \\\\)\").length).max\n        val paren_group_lengths_plus_one = paren_group_lengths\
    \ + 1\n        val paren_group_lengths_plus_two = paren_group_lengths_plus_one\
    \ * 2\n        val paren_group_lengths_plus_three = paren_group_lengths_plus_two\
    \ * 3\n        val paren_group_lengths_plus_four = paren_group_lengths_plus_three\
    \ * 4\n        val paren_group_lengths_plus_five = paren_group_lengths_plus_four\
    \ * 5\n        val paren_group_lengths_plus_six = paren_group_lengths_plus_five\
    \ * 6\n        val paren_group_lengths_plus_seven = paren_group_lengths_plus_six\
    \ * 7\n        val paren_group_lengths_plus_eight = paren_group_lengths_plus_seven\
    \ * 8\n        val paren_group_lengths_plus_nine = paren_group_lengths_plus_eight\
    \ * 9\n        val paren_group_lengths_plus_ten = paren_group_lengths_plus_nine\
    \ * 10\n        val paren_group_lengths_plus_eleven = paren_group_lengths_plus_ten\
    \ * 11\n        val paren_group_lengths_plus_twelve = paren_group_lengths_plus_eleven\
    \ * 12\n        val paren_group_lengths_plus_thirteen = paren_group_lengths_plus_twelve\
    \ * 13\n        val paren_group_lengths_plus_fourteen = paren_group_lengths_plus_thirteen\
    \ * 14\n        val paren_group_lengths_plus_fifteen = paren_group_lengths_plus_fourteen\
    \ * 15\n        val paren_group_lengths_plus_sixteen = paren_group_lengths_plus_fifteen\
    \ * 16\n        val paren_group_lengths_plus_seventeen = paren_group_lengths_plus_sixteen\
    \ * 17\n        val paren_group_lengths_plus_eighteen = paren_group_lengths_plus_seventeen\
    \ * 18\n        val paren_group_lengths_plus_nineteen = paren_group_lengths_plus_eighteen\
    \ * 19\n        val paren_group_lengths_plus_twenty = paren_group_lengths_plus_nineteen\
    \ * 20\n        val paren_group_lengths_plus_twenty_one = paren_group_lengths_plus_twenty\
    \ * \n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpzpjkyzw2.scala:34:83 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mparen_group_lengths_plus_twenty_one\e\
    [0m = paren_group_lengths_plus_twenty * \n\e[31m\e[31m   |\e[0m              \
    \                                                                     ^\e[0m\n\
    \e[31m   |\e[0m                                       expression expected but\
    \ \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzpjkyzw2.scala:35:5\
    \ ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795645
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_open_braces = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"\"))\n        val paren_groups_with_closed_braces\
    \ = paren_groups_with_open_braces.map(x => x.replace(\"(\", \"\").replace(\")\"\
    , \"\"))\n        val paren_groups_with_open_braces_with_brackets = paren_groups_with_open_braces.map(x\
    \ => x.replace(\"(\", \"[\").replace(\")\", \"]\"))\n        val paren_groups_with_closed_braces_with_brackets\
    \ = paren_groups_with_closed_braces.map(x => x.replace(\"[\", \"(\").replace(\"\
    ]\", \")\"))\n        val paren_groups_with_open_braces_with_brackets_with_brackets\
    \ = paren_groups_with_open_braces_with_brackets.map(x => x.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\"))\n        val paren_groups_with_closed_braces_with_brackets_with_brackets\
    \ = paren_groups_with_closed_braces_with_brackets.map(x => x.replace(\"(\", \"\
    [\").replace(\")\", \"]\"))\n        val paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_open_braces_with_brackets_with_brackets.map(x => x.replace(\"\
    [\", \"(\").replace(\"]\", \")\"))\n        val paren_groups_with_closed_braces_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_closed_braces_with_brackets_with_brackets.map(x => x.replace(\"\
    (\", \"[\").replace(\")\", \"]\"))\n        val paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets.map(x\
    \ => x.replace(\"[\", \"(\").replace(\"]\", \")\"))\n        val paren_groups_with_closed_braces_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_closed_braces_with_brackets_with_brackets_with_brackets.map(x\
    \ => x.replace(\"(\", \"[\").replace(\")\", \"]\"))\n        val paren_groups_with_open_braces_with_brackets_with_brackets_with_b\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvertbljo.scala:23:4 ----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpvertbljo.scala:23:5 ---------------------\e[0m\e[0m\n\e[31m23 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795646
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpfe4904sc.scala:21:338 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpfe4904sc.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpfe4904sc.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1659795587
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\") \", \" ))\"\
    )\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3bjzmxbk.scala:15:8 ----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces.map(\e[36mx\e[0m\
    \ => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m   |\e[0m \
    \       ^^^\e[0m\n\e[31m   |\e[0m        ')' expected, but 'val' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp3bjzmxbk.scala:30:1 ---------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795639
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        var open_braces = 0\n        var closed_braces = 0\n        var paren_count\
    \ = 0\n        var open_parens = 0\n        var close_parens = 0\n        for\
    \ (c <- paren_string) {\n            if (c == '(') {\n                paren_count\
    \ += 1\n                open_parens += 1\n            } else if (c == ')') {\n\
    \                paren_count -= 1\n                close_parens += 1\n       \
    \     } else if (c == ' ') {\n                if (paren_count == 0) {\n      \
    \              paren_groups += paren_string.substring(open_braces, close_parens)\n\
    \                    open_braces = close_parens\n                    closed_braces\
    \ = 0\n                    paren_count = 0\n                    open_parens =\
    \ 0\n                    close_parens = 0\n                }\n            } else\
    \ {\n                closed_braces += 1\n            }\n        }\n        if\
    \ (paren_count != 0) {\n            paren_groups += paren_string.substring(open_braces,\
    \ paren_string.length)\n        }\n        paren_groups.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphmk1a5nu.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659795643
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_group_counts = paren_groups.map(paren_group => paren_group.split(\"\
    \\\\)\").size)\n        val paren_group_counts_sum = paren_group_counts.sum\n\
    \        val paren_group_counts_average = paren_group_counts_sum / paren_groups.length\n\
    \        val paren_group_counts_minimum = paren_group_counts.min\n        val\
    \ paren_group_counts_maximum = paren_group_counts.max\n        val paren_group_counts_average\
    \ = paren_group_counts_sum / paren_groups.length\n        val paren_group_counts_minimum\
    \ = paren_group_counts.min\n        val paren_group_counts_maximum = paren_group_counts.max\n\
    \        val paren_group_counts_average = paren_group_counts_sum / paren_groups.length\n\
    \        val paren_group_counts_minimum = paren_group_counts.min\n        val\
    \ paren_group_counts_maximum = paren_group_counts.max\n        val paren_group_counts_average\
    \ = paren_group_counts_sum / paren_groups.length\n        val paren_group_counts_minimum\
    \ = paren_group_counts.min\n        val paren_group_counts_maximum = paren_group_counts.max\n\
    \        val paren_group_counts_average = paren_group_counts_sum / paren_groups.length\n\
    \        val paren_group_counts_minimum = paren_group_counts.min\n        val\
    \ paren_group_counts_maximum = paren_group_counts.max\n        val paren_group_counts_average\
    \ = paren_group_counts_sum / paren_groups.length\n        val paren_group_counts_minimum\
    \ = paren_group_counts.min\n        val paren_group_counts_maximum = paren_group_counts.max\n\
    \        val paren_group_counts_average = paren_group_counts_sum / paren_groups.length\n\
    \        val paren_group_counts_minimum = paren_group_counts.min\n        val\
    \ paren_group_counts_maximum = paren_group_counts.max\n        val paren_group_counts_average\
    \ = paren_group_counts_sum / paren_groups.length\n        val paren_group_counts_minimum\
    \ = paren_group_counts.min\n        val paren_group_counts_maximum = paren_group_counts.max\n\
    \        val paren_group_counts_average = paren_group_counts_sum / paren_groups.length\n\
    \        val paren_group_counts_minimum = paren_group_counts.min\n        val\
    \ paren_group_counts_maximum = paren_group_counts.max\n        \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbh18p53i.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_group_counts_average\e\
    [0m = paren_group_counts_sum / paren_groups.length\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_counts_average is already defined as \e[33mvalue\e\
    [0m \e[35mparen_group_counts_average\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbh18p53i.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mparen_group_counts_minimum\e\
    [0m = paren_group_counts.min\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_counts_minimum is already defined as \e[33mvalue\e\
    [0m \e[35mparen_group_counts_minimum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbh18p53i.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mparen_group_counts_maximum\e\
    [0m = paren_group_counts.max\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_counts_maximum is already defined as \e[33mvalue\e\
    [0m \e[35mparen_group_counts_maximum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbh18p53i.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mparen_group_counts_average\e\
    [0m = paren_group_counts_sum / paren_groups.length\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_counts_average is already defined as \e[33mvalue\e\
    [0m \e[35mparen_group_counts_average\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ th"
  stdout: ''
  timestamp: 1659795647
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_closed\
    \ = mutable.ListBuffer[String]()\n        paren_string.foreach { c =>\n      \
    \      c match {\n                case '(' -> paren_open += c\n              \
    \  case ')' -> paren_closed += c\n                case _ =>\n            }\n \
    \       }\n        paren_open.foreach { c =>\n            c match {\n        \
    \        case ')' =>\n                    paren_groups += paren_closed.mkString\n\
    \                    paren_closed.clear()\n                case _ =>\n       \
    \     }\n        }\n        paren_groups += paren_closed.mkString\n        paren_groups.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwqrepja2.scala:17:16 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mcase\e[0m \e[31m')'\e[0m -> paren_closed\
    \ += c\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m      \
    \          '=>' expected, but 'case' found\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpwqrepja2.scala:11:27 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpwqrepja2.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_open\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpwqrepja2.scala:13:27 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_closed\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwqrepja2.scala:16:39 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mcase\e[0m \e[31m'('\e[0m -> paren_open\
    \ += c\n\e[31m\e[31m   |\e[0m                                       ^^\e[0m\n\e\
    [31m   |\e[0m                                       Not found: +=\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1659795642
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replace(\" \"\
    , \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpnjw4k5um.scala:23:268 --------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                            ^\e[0m\n\e[31m  \
    \ |\e[0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpnjw4k5um.scala:24:4\
    \ ------------------------------------------\e[0m\e[0m\n\e[31m24 |\e[0m    }\n\
    \e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both\
    \ \e[33mobject\e[0m \e[35mDeprecatedDoubleOrdering\e[0m in \e[33mobject\e[0m \e\
    [35mOrdering\e[0m and \e[33mobject\e[0m \e[35mChar\e[0m in \e[33mobject\e[0m \e\
    [35mOrdering\e[0m match type Ordering[B] of parameter ord of \e[33mmethod\e[0m\
    \ \e[35msortBy\e[0m in \e[33mclass\e[0m \e[35mArrayOps\e[0m\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpnjw4k5um.scala:24:5 ---------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659795617
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.map(x => x.replace(\")\", \"\"))\n        val paren_groups_flat3\
    \ = paren_groups_flat2.map(x => x.replace(\"(\", \"\"))\n        val paren_groups_flat4\
    \ = paren_groups_flat3.map(x => x.replace(\" \", \"\"))\n        val paren_groups_flat5\
    \ = paren_groups_flat4.map(x => x.replace(\")\", \"\"))\n        val paren_groups_flat6\
    \ = paren_groups_flat5.map(x => x.replace(\"(\", \"\"))\n        val paren_groups_flat7\
    \ = paren_groups_flat6.map(x => x.replace(\" \", \"\"))\n        val paren_groups_flat8\
    \ = paren_groups_flat7.map(x => x.replace(\")\", \"\"))\n        val paren_groups_flat9\
    \ = paren_groups_flat8.map(x => x.replace(\"(\", \"\"))\n        val paren_groups_flat10\
    \ = paren_groups_flat9.map(x => x.replace(\" \", \"\"))\n        val paren_groups_flat11\
    \ = paren_groups_flat10.map(x => x.replace(\")\", \"\"))\n        val paren_groups_flat12\
    \ = paren_groups_flat11.map(x => x.replace(\"(\", \"\"))\n        val paren_groups_flat13\
    \ = paren_groups_flat12.map(x => x.replace(\" \", \"\"))\n        val paren_groups_flat14\
    \ = paren_groups_flat13.map(x => x.replace(\")\", \"\"))\n        val paren_groups_flat15\
    \ = paren_groups_flat14.map(x => x.replace(\"(\", \"\"))\n        val paren_groups_flat16\
    \ = paren_groups_flat15.map(x => x.replace(\" \", \"\"))\n        val paren_groups_flat17\
    \ = paren_groups_flat16.map(x => x.replace(\")\", \"\"))\n        val paren_groups_flat18\
    \ = paren_groups_flat17.map(x => x.replace(\"(\", \"\"))\n        val paren_groups_flat19\
    \ = paren_groups_flat18.map(x => x.replace(\" \", \"\"))\n        val paren_groups_flat20\
    \ = paren_groups_flat19.map(x => x.replace(\")\", \"\"))\n        val paren_groups_flat21\
    \ = paren_groups_flat20.map(x => x.replace(\"(\", \"\"))\n        val paren_groups_flat22\
    \ = paren_groups_flat21.map(x => x.replace(\" \", \"\"))\n        val paren_groups_flat23\
    \ = paren_groups_flat22.map(x => x.replace(\")\", \"\"))\n        val paren_groups_flat24\
    \ = paren_groups_flat23.\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8076lxi3.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp8076lxi3.scala:13:62 ------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m = paren_groups_flat.map(\e\
    [36mx\e[0m => x.replace(\e[31m\")\"\e[0m, \e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e\
    [0m                                                            ^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                   value replace is not a member\
    \ of Char\n\e[31m\e[31m-- Error: /tmp/tmp8076lxi3.scala:13:79 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m\
    \ = paren_groups_flat.map(\e[36mx\e[0m => x.replace(\e[31m\")\"\e[0m, \e[31m\"\
    \"\e[0m))\n\e[31m\e[31m   |\e[0m                                             \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                       No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m                                          where:    B is a type variable\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8076lxi3.scala:36:5 ---------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659795649
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.map(x => x.replaceAll(\"\\\\)\",\"\"))\n        val paren_groups_flat3\
    \ = paren_groups_flat2.map(x => x.replaceAll(\"\\\\)\",\"\"))\n        val paren_groups_flat4\
    \ = paren_groups_flat3.map(x => x.replaceAll(\"\\\\)\",\"\"))\n        val paren_groups_flat5\
    \ = paren_groups_flat4.map(x => x.replaceAll(\"\\\\)\",\"\"))\n        val paren_groups_flat6\
    \ = paren_groups_flat5.map(x => x.replaceAll(\"\\\\)\",\"\"))\n        val paren_groups_flat7\
    \ = paren_groups_flat6.map(x => x.replaceAll(\"\\\\)\",\"\"))\n        val paren_groups_flat8\
    \ = paren_groups_flat7.map(x => x.replaceAll(\"\\\\)\",\"\"))\n        val paren_groups_flat9\
    \ = paren_groups_flat8.map(x => x.replaceAll(\"\\\\)\",\"\"))\n        val paren_groups_flat10\
    \ = paren_groups_flat9.map(x => x.replaceAll(\"\\\\)\",\"\"))\n        val paren_groups_flat11\
    \ = paren_groups_flat10.map(x => x.replaceAll(\"\\\\)\",\"\"))\n        val paren_groups_flat12\
    \ = paren_groups_flat11.map(x => x.replaceAll(\"\\\\)\",\"\"))\n        val paren_groups_flat13\
    \ = paren_groups_flat12.map(x => x.replaceAll(\"\\\\)\",\"\"))\n        val paren_groups_flat14\
    \ = paren_groups_flat13.map(x => x.replaceAll(\"\\\\)\",\"\"))\n        val paren_groups_flat15\
    \ = paren_groups_flat14.map(x => x.replaceAll(\"\\\\)\",\"\"))\n        val paren_groups_flat16\
    \ = paren_groups_flat15.map(x => x.replaceAll(\"\\\\)\",\"\"))\n        val paren_groups_flat17\
    \ = paren_groups_flat16.map(x => x.replaceAll(\"\\\\)\",\"\"))\n        val paren_groups_flat18\
    \ = paren_groups_flat17.map(x => x.replaceAll(\"\\\\)\",\"\"))\n        val paren_groups_flat19\
    \ = paren_groups_flat18.map(x => x.replaceAll(\"\\\\)\",\"\"))\n        val paren_groups_flat20\
    \ = paren_groups_flat19.map(x => x.replaceAll(\"\\\\)\",\"\"))\n        val paren_groups_flat21\
    \ = paren_groups_flat20.map(x => x.replaceAll(\"\\\\)\",\"\"))\n        val paren_groups_flat22\
    \ = paren_groups_flat21.map(x => x.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp17_1b1bc.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp17_1b1bc.scala:13:62 ------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m = paren_groups_flat.map(\e\
    [36mx\e[0m => x.replaceAll(\e[31m\"\\\\)\"\e[0m,\e[31m\"\"\e[0m))\n\e[31m\e[31m\
    \   |\e[0m                                                            ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                value replaceAll is not a\
    \ member of Char\n\e[31m\e[31m-- Error: /tmp/tmp17_1b1bc.scala:13:83 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m\
    \ = paren_groups_flat.map(\e[36mx\e[0m => x.replaceAll(\e[31m\"\\\\)\"\e[0m,\e\
    [31m\"\"\e[0m))\n\e[31m\e[31m   |\e[0m                                       \
    \                                            ^\e[0m\n\e[31m   |\e[0m         \
    \                                 No ClassTag available for B\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m                                          where:    B is a type\
    \ variable\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp17_1b1bc.scala:34:5\
    \ ---------------------\e[0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659795650
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.filterNot(x => x.contains(\"\\\\(\"))\n        val paren_groups_flat3\
    \ = paren_groups_flat2.filterNot(x => x.contains(\"\\\\)\"))\n        val paren_groups_flat4\
    \ = paren_groups_flat3.filterNot(x => x.contains(\"\\\\)\"))\n        val paren_groups_flat5\
    \ = paren_groups_flat4.filterNot(x => x.contains(\"\\\\)\"))\n        val paren_groups_flat6\
    \ = paren_groups_flat5.filterNot(x => x.contains(\"\\\\)\"))\n        val paren_groups_flat7\
    \ = paren_groups_flat6.filterNot(x => x.contains(\"\\\\)\"))\n        val paren_groups_flat8\
    \ = paren_groups_flat7.filterNot(x => x.contains(\"\\\\)\"))\n        val paren_groups_flat9\
    \ = paren_groups_flat8.filterNot(x => x.contains(\"\\\\)\"))\n        val paren_groups_flat10\
    \ = paren_groups_flat9.filterNot(x => x.contains(\"\\\\)\"))\n        val paren_groups_flat11\
    \ = paren_groups_flat10.filterNot(x => x.contains(\"\\\\)\"))\n        val paren_groups_flat12\
    \ = paren_groups_flat11.filterNot(x => x.contains(\"\\\\)\"))\n        val paren_groups_flat13\
    \ = paren_groups_flat12.filterNot(x => x.contains(\"\\\\)\"))\n        val paren_groups_flat14\
    \ = paren_groups_flat13.filterNot(x => x.contains(\"\\\\)\"))\n        val paren_groups_flat15\
    \ = paren_groups_flat14.filterNot(x => x.contains(\"\\\\)\"))\n        val paren_groups_flat16\
    \ = paren_groups_flat15.filterNot(x => x.contains(\"\\\\)\"))\n        val paren_groups_flat17\
    \ = paren_groups_flat16.filterNot(x => x.contains(\"\\\\)\"))\n        val paren_groups_flat18\
    \ = paren_groups_flat17.filterNot(x => x.contains(\"\\\\)\"))\n        val paren_groups_flat19\
    \ = paren_groups_flat18.filterNot(x => x.contains(\"\\\\)\"))\n        val paren_groups_flat20\
    \ = paren_groups_flat19.filterNot(x => x.contains(\"\\\\)\"))\n        val paren_groups_flat21\
    \ = paren_groups_flat20.filterNot(x => x.contains(\"\\\\\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpa394c9jl.scala:32:80 -----------------------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat21\e[0m\
    \ = paren_groups_flat20.filterNot(\e[36mx\e[0m => x.contains(\"\\\\\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                ^\e[0m\n\e[31m   |\e[0m                                     \
    \            unclosed string literal\n\e[31m\e[31m-- Error: /tmp/tmpa394c9jl.scala:34:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m34 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m\
    \                                 end of statement expected but '=' found\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpa394c9jl.scala:13:68 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m\
    \ = paren_groups_flat.filterNot(\e[36mx\e[0m => x.contains(\e[31m\"\\\\(\"\e[0m))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \          ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                  value\
    \ contains is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpa394c9jl.scala:14:69\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_flat3\e[0m = paren_groups_flat2.filterNot(\e[36mx\e[0m => x.contains(\e\
    [31m\"\\\\)\"\e[0m))\n\e[31m\e[31m   |\e[0m                                  \
    \                                 ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                       value contains is not a member of Char\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpa394c9jl.scala:15:69 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat4\e[0m\
    \ = paren_groups_flat3.filterNot(\e[36mx\e[0m => x.contains(\e[31m\"\\\\)\"\e\
    [0m))\n\e[31m\e[31m   |\e[0m                                                 \
    \                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \        value contains is not a member of Char\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /"
  stdout: ''
  timestamp: 1659795654
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_count = paren_groups.length\n        val paren_groups_remaining\
    \ = paren_groups_count - 1\n        val paren_groups_remaining_list = mutable.ListBuffer[String]()\n\
    \        val paren_groups_remaining_list_size = paren_groups_remaining\n     \
    \   val paren_groups_remaining_list_index = 0\n        val paren_groups_remaining_list_index_size\
    \ = paren_groups_remaining\n        val paren_groups_remaining_list_index_index\
    \ = 0\n        val paren_groups_remaining_list_index_index_size = paren_groups_remaining\n\
    \        val paren_groups_remaining_list_index_index_index = 0\n        val paren_groups_remaining_list_index_index_index_size\
    \ = paren_groups_remaining\n        val paren_groups_remaining_list_index_index_index_index\
    \ = 0\n        val paren_groups_remaining_list_index_index_index_index_size =\
    \ paren_groups_remaining\n        val paren_groups_remaining_list_index_index_index_index_index\
    \ = 0\n        val paren_groups_remaining_list_index_index_index_index_index_size\
    \ = paren_groups_remaining\n        val paren_groups_remaining_list_index_index_index_index_index_index\
    \ = 0\n        val paren_groups_remaining_list_index_index_index_index_index_index_size\
    \ = paren_groups_remaining\n        val paren_groups_remaining_list_index_index_index_index_index_index_index\
    \ = 0\n        val paren_groups_remaining_list_index_index_index_index_index_index_index_size\
    \ = paren_groups_remaining\n        val paren_groups_remaining_list_index_index_index_index_index_index_index_index\
    \ = 0\n        val paren_groups_remaining_list_index_index_index_index_index_index_index_index_size\
    \ = paren_groups_remaining\n        val paren_groups_remaining_list_index_index_index_index_index_index_index_index_index\
    \ = 0\n        val paren_groups_remaining_list_index_index_index_index_index_index_index_index_index_size\
    \ = paren_groups_remaining\n        val paren_groups_remaining_list_index_index_index_index_index_index_index_index_index\
    \ = 0\n        val paren_groups_remaining_list_index_index_index_index_index_index_index_index_index_size\
    \ = paren_groups_remaining\n        val paren_groups_remaining_list_index_index_index_index_index_index_index_index_index_index\
    \ = 0\n        val paren_groups_remaining_list_index_index_index_index_index_index_index_index_index_index_size\
    \ = paren_groups_remaining\n        val paren_groups_remaining_list_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0\n        val paren_groups_remaining_list_index_index_index_index_index_index_index_index_index_index_index_size\
    \ = paren_groups_remaining\n        val paren_groups_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpl9752atm.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpl9752atm.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_remaining_list_index_index_index_index_index_index_index_index_index\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_remaining_list_index_index_index_index_index_index_index_index_index\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_remaining_list_index_index_index_index_index_index_index_index_index\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpl9752atm.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_remaining_list_index_index_index_index_index_index_index_index_index_size\e\
    [0m = paren_groups_remaining\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_remaining_list_index_index_index_index_index_index_index_index_index_size\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_remaining_list_index_index_index_index_index_index_index_index_index_size\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpl9752atm.scala:14:42 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_remaining_list\e\
    [0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m         \
    \                                 ^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                            Not found: "
  stdout: ''
  timestamp: 1659795648
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        var paren_open = false\n        var paren_closed = false\n        var\
    \ paren_group = \"\"\n        for (c <- paren_string) {\n            if (c ==\
    \ '(') {\n                paren_open = true\n                paren_group += c\n\
    \            } else if (c == ')') {\n                paren_closed = true\n   \
    \             paren_group += c\n            } else if (c == ' ') {\n         \
    \       if (paren_open && paren_closed) {\n                    paren_groups +=\
    \ paren_group\n                    paren_group = \"\"\n                }\n   \
    \         } else {\n                paren_group += c\n            }\n        }\n\
    \        if (paren_open && paren_closed) {\n            paren_groups += paren_group\n\
    \        }\n        paren_groups.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqv332qt8.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659795646
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_group_stack = mutable.ListBuffer[String]()\n        val paren_group_open\
    \ = mutable.ListBuffer[String]()\n        val paren_group_closed = mutable.ListBuffer[String]()\n\
    \        val paren_group_open_index = mutable.ListBuffer[Int]()\n        val paren_group_closed_index\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_index = paren_group_open_index.init\n\
    \        val paren_group_closed_index = paren_group_closed_index.init\n      \
    \  val paren_group_open = paren_group_open.init\n        val paren_group_closed\
    \ = paren_group_closed.init\n        val paren_group_open_index = paren_group_open_index.init\n\
    \        val paren_group_closed_index = paren_group_closed_index.init\n      \
    \  val paren_group_open = paren_group_open.init\n        val paren_group_closed\
    \ = paren_group_closed.init\n        val paren_group_open_index = paren_group_open_index.init\n\
    \        val paren_group_closed_index = paren_group_closed_index.init\n      \
    \  val paren_group_open = paren_group_open.init\n        val paren_group_closed\
    \ = paren_group_closed.init\n        val paren_group_open_index = paren_group_open_index.init\n\
    \        val paren_group_closed_index = paren_group_closed_index.init\n      \
    \  val paren_group_open = paren_group_open.init\n        val paren_group_closed\
    \ = paren_group_closed.init\n        val paren_group_open_index = paren_group_open_index.init\n\
    \        val paren_group_closed_index = paren_group_closed_index.init\n      \
    \  val paren_group_open = paren_group_open.init\n        val paren_group_closed\
    \ = paren_group_closed.init\n        val paren_group_open_index = paren_group_open_index.init\n\
    \        val paren_group_closed_index = paren_group_closed_index.init\n      \
    \  val paren_group_open = paren_group_open.init\n        val paren_group_closed\
    \ = paren_group_closed.init\n        val paren_group_open_index = paren_group_open_index.init\n\
    \        val paren_group_closed_index = paren_group_closed_index.init\n      \
    \  val paren_group_open = paren_group_open.init\n        val paren_group_closed\
    \ = paren_group_closed.init\n        val paren_group_open_index = paren_group_open_index.init\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp0_ia_vet.scala:46:11 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp0_ia_vet.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_group_open_index\e\
    [0m = paren_group_open_index.init\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_open_index is already defined as \e[33mvalue\e\
    [0m \e[35mparen_group_open_index\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0_ia_vet.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mparen_group_closed_index\e\
    [0m = paren_group_closed_index.init\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_closed_index is already defined as \e[33mvalue\e\
    [0m \e[35mparen_group_closed_index\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0_ia_vet.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mparen_group_open\e[0m =\
    \ paren_group_open.init\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_open is already defined as \e[33mvalue\e[0m \e\
    [35mparen_group_open\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp0_ia_vet.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mparen_group_closed\e[0m\
    \ = paren_group_closed.init\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659795650
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_size = paren_groups.length\n        val paren_groups_size_list\
    \ = paren_groups_size.map(x => List(x))\n        val paren_groups_size_list2 =\
    \ paren_groups_size.map(x => List(x))\n        val paren_groups_size_list3 = paren_groups_size.map(x\
    \ => List(x))\n        val paren_groups_size_list4 = paren_groups_size.map(x =>\
    \ List(x))\n        val paren_groups_size_list5 = paren_groups_size.map(x => List(x))\n\
    \        val paren_groups_size_list6 = paren_groups_size.map(x => List(x))\n \
    \       val paren_groups_size_list7 = paren_groups_size.map(x => List(x))\n  \
    \      val paren_groups_size_list8 = paren_groups_size.map(x => List(x))\n   \
    \     val paren_groups_size_list9 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list10 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list11 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list12 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list13 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list14 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list15 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list16 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list17 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list18 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list19 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list20 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list21 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list22 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list23 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list24 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list25 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list26 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmtvof5l2.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmtvof5l2.scala:13:55\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_size_list\e[0m = paren_groups_size.map(\e[36mx\e[0m => List(x))\n\
    \e[31m\e[31m   |\e[0m                                     ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     value map is not a member\
    \ of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmtvof5l2.scala:14:56\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_size_list2\e[0m = paren_groups_size.map(\e[36mx\e[0m => List(x))\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      value map is not a member\
    \ of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmtvof5l2.scala:15:56\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_size_list3\e[0m = paren_groups_size.map(\e[36mx\e[0m => List(x))\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      value map is not a member\
    \ of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmtvof5l2.scala:16:56\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_size_list4\e[0m = paren_groups_size.map(\e[36mx\e[0m => List(x))\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      value map is not a member\
    \ of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmtvof5l2.scala:17:56\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_size_list5\e[0m = paren_groups_size.map(\e[36mx\e[0m => List(x))\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    "
  stdout: ''
  timestamp: 1659795656
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.filterNot(_ == \")\")\n        val paren_groups_flat3 =\
    \ paren_groups_flat2.filterNot(_ == \"(\")\n        val paren_groups_flat4 = paren_groups_flat3.filterNot(_\
    \ == \")\")\n        val paren_groups_flat5 = paren_groups_flat4.filterNot(_ ==\
    \ \"(\")\n        val paren_groups_flat6 = paren_groups_flat5.filterNot(_ == \"\
    )\")\n        val paren_groups_flat7 = paren_groups_flat6.filterNot(_ == \"(\"\
    )\n        val paren_groups_flat8 = paren_groups_flat7.filterNot(_ == \")\")\n\
    \        val paren_groups_flat9 = paren_groups_flat8.filterNot(_ == \"(\")\n \
    \       val paren_groups_flat10 = paren_groups_flat9.filterNot(_ == \")\")\n \
    \       val paren_groups_flat11 = paren_groups_flat10.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat12 = paren_groups_flat11.filterNot(_ == \")\")\n\
    \        val paren_groups_flat13 = paren_groups_flat12.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat14 = paren_groups_flat13.filterNot(_ == \")\")\n\
    \        val paren_groups_flat15 = paren_groups_flat14.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat16 = paren_groups_flat15.filterNot(_ == \")\")\n\
    \        val paren_groups_flat17 = paren_groups_flat16.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat18 = paren_groups_flat17.filterNot(_ == \")\")\n\
    \        val paren_groups_flat19 = paren_groups_flat18.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat20 = paren_groups_flat19.filterNot(_ == \")\")\n\
    \        val paren_groups_flat21 = paren_groups_flat20.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat22 = paren_groups_flat21.filterNot(_ == \")\")\n\
    \        val paren_groups_flat23 = paren_groups_flat22.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat24 = paren_groups_flat23.filterNot(_ == \")\")\n\
    \        val paren_groups_flat25 = paren_groups_flat24.filter\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp74rqaj8b.scala:13:61 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m\
    \ = paren_groups_flat.filterNot(_ == \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                             ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types Char and String cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- Error: /tmp/tmp74rqaj8b.scala:14:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat3\e[0m\
    \ = paren_groups_flat2.filterNot(_ == \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp74rqaj8b.scala:15:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat4\e[0m\
    \ = paren_groups_flat3.filterNot(_ == \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp74rqaj8b.scala:16:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat5\e[0m\
    \ = paren_groups_flat4.filterNot(_ == \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp74rqaj8b.scala:17:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat6\e[0m\
    \ = paren_groups_flat5.filterNot(_ == \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp74rqaj8b.scala:18:62 -----------------------------------------\e\
    [0m\e[0m\n\e"
  stdout: ''
  timestamp: 1659795604
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_group_stack = mutable.ListBuffer[String]()\n        val paren_group_open\
    \ = mutable.ListBuffer[String]()\n        val paren_group_closed = mutable.ListBuffer[String]()\n\
    \        val paren_group_open_index = mutable.ListBuffer[Int]()\n        val paren_group_closed_index\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_index = paren_group_open_index.init\n\
    \        val paren_group_closed_index = paren_group_closed_index.init\n      \
    \  val paren_group_open = paren_group_open.init\n        val paren_group_closed\
    \ = paren_group_closed.init\n        val paren_group_open_index = paren_group_open_index.init\n\
    \        val paren_group_closed_index = paren_group_closed_index.init\n      \
    \  val paren_group_open = paren_group_open.init\n        val paren_group_closed\
    \ = paren_group_closed.init\n        val paren_group_open_index = paren_group_open_index.init\n\
    \        val paren_group_closed_index = paren_group_closed_index.init\n      \
    \  val paren_group_open = paren_group_open.init\n        val paren_group_closed\
    \ = paren_group_closed.init\n        val paren_group_open_index = paren_group_open_index.init\n\
    \        val paren_group_closed_index = paren_group_closed_index.init\n      \
    \  val paren_group_open = paren_group_open.init\n        val paren_group_closed\
    \ = paren_group_closed.init\n        val paren_group_open_index = paren_group_open_index.init\n\
    \        val paren_group_closed_index = paren_group_closed_index.init\n      \
    \  val paren_group_open = paren_group_open.init\n        val paren_group_closed\
    \ = paren_group_closed.init\n        val paren_group_open_index = paren_group_open_index.init\n\
    \        val paren_group_closed_index = paren_group_closed_index.init\n      \
    \  val paren_group_open = paren_group_open.init\n        val paren_group_closed\
    \ = paren_group_closed.init\n        val paren_group_open_index = paren_group_open_index.init\n\
    \        val paren_group_closed_index = paren_group_closed_index.init\n      \
    \  val paren_group_open = paren_group_open.init\n        val paren_group_closed\
    \ = paren_group_closed.init\n        val paren_group_open_index = paren_group_open_index.init\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp0_ia_vet.scala:46:11 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp0_ia_vet.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_group_open_index\e\
    [0m = paren_group_open_index.init\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_open_index is already defined as \e[33mvalue\e\
    [0m \e[35mparen_group_open_index\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0_ia_vet.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mparen_group_closed_index\e\
    [0m = paren_group_closed_index.init\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_closed_index is already defined as \e[33mvalue\e\
    [0m \e[35mparen_group_closed_index\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0_ia_vet.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mparen_group_open\e[0m =\
    \ paren_group_open.init\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_open is already defined as \e[33mvalue\e[0m \e\
    [35mparen_group_open\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp0_ia_vet.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mparen_group_closed\e[0m\
    \ = paren_group_closed.init\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659795650
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_group_counts = paren_groups.map(x => x.count(\"\\\\\
    (\") + x.count(\"\\\\)\"))\n        val paren_group_lengths = paren_group_counts.map(x\
    \ => x.toDouble)\n        val paren_group_lengths_sum = paren_group_lengths.sum\n\
    \        val paren_group_lengths_avg = paren_group_lengths.sum / paren_group_lengths_sum\n\
    \        val paren_group_lengths_min = paren_group_lengths.min\n        val paren_group_lengths_max\
    \ = paren_group_lengths.max\n        val paren_group_lengths_range = paren_group_lengths_max\
    \ - paren_group_lengths_min\n        val paren_group_lengths_range_avg = paren_group_lengths_range\
    \ / paren_group_lengths_sum\n        val paren_group_lengths_range_min = paren_group_lengths_range\
    \ / paren_group_lengths_avg\n        val paren_group_lengths_range_max = paren_group_lengths_range\
    \ / paren_group_lengths_min\n        val paren_group_lengths_range_std = math.sqrt(paren_group_lengths_range_avg)\n\
    \        val paren_group_lengths_range_std_min = paren_group_lengths_range_std\
    \ * paren_group_lengths_range_min\n        val paren_group_lengths_range_std_max\
    \ = paren_group_lengths_range_std * paren_group_lengths_range_max\n        val\
    \ paren_group_lengths_range_std_avg = paren_group_lengths_range_std * paren_group_lengths_range_avg\n\
    \        val paren_group_lengths_range_std_min = paren_group_lengths_range_std\
    \ * paren_group_lengths_range_min\n        val paren_group_lengths_range_std_max\
    \ = paren_group_lengths_range_std * paren_group_lengths_range_max\n        val\
    \ paren_group_lengths_range_std_avg = paren_group_lengths_range_std * paren_group_lengths_range_avg\n\
    \        val paren_group_lengths_range_std_avg = paren_group_lengths_range_std\
    \ * paren_group_lengths_range_avg\n        val paren_group_lengths_range_std_avg\
    \ = paren_group_lengths_range_std * paren_group_lengths_range_avg\n        val\
    \ paren_group_lengths_range_std_avg = paren_group_lengths_range_std * paren_group_lengths_range_avg\n\
    \        val paren_group_lengths_range_std_avg = paren_group_lengths_range_std\
    \ * paren_group_lengths_range_avg\n        val paren_group_lengths_range_std_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsfufvi8a.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsfufvi8a.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_group_lengths_range_std_min\e[0m = paren_group_lengths_range_std\
    \ * paren_group_lengths_range_min\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_lengths_range_std_min is already defined as \e\
    [33mvalue\e[0m \e[35mparen_group_lengths_range_std_min\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsfufvi8a.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_group_lengths_range_std_max\e[0m = paren_group_lengths_range_std\
    \ * paren_group_lengths_range_max\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_lengths_range_std_max is already defined as \e\
    [33mvalue\e[0m \e[35mparen_group_lengths_range_std_max\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsfufvi8a.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_group_lengths_range_std_avg\e[0m = paren_group_lengths_range_std\
    \ * paren_group_lengths_range_avg\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_lengths_range_std_avg is already defined as \e\
    [33mvalue\e[0m \e[35mparen_group_lengths_range_std_avg\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e"
  stdout: ''
  timestamp: 1659795653
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val open_braces = mutable.ListBuffer[String]()\n        val close_braces\
    \ = mutable.ListBuffer[String]()\n        paren_string.foreach { c =>\n      \
    \      c match {\n                case '(' -> open_braces += c\n             \
    \   case ')' -> close_braces += c\n                case _ -> paren_groups += c\n\
    \            }\n        }\n        if (open_braces.size == 0 && close_braces.size\
    \ == 0) {\n            paren_groups\n        } else {\n            val open_brace_count\
    \ = open_braces.size\n            val close_brace_count = close_braces.size\n\
    \            val open_brace_groups = open_braces.toList\n            val close_brace_groups\
    \ = close_braces.toList\n            val open_brace_group_count = open_brace_groups.size\n\
    \            val close_brace_group_count = close_brace_groups.size\n         \
    \   val open_brace_group_sum = 0\n            val close_brace_group_sum = 0\n\
    \            val open_brace_group_sums = mutable.ListBuffer[Int]()\n         \
    \   val close_brace_group_sums = mutable.ListBuffer[Int]()\n            val open_brace_group_sums_count\
    \ = mutable.ListBuffer[Int]()\n            val close_brace_group_sums_count =\
    \ mutable.ListBuffer[Int]()\n            val open_brace_group_sums_sum = mutable.ListBuffer[Int]()\n\
    \            val close_brace_group_sums_sum = mutable.ListBuffer[Int]()\n    \
    \        val open_brace_group_sums_sums = mutable.ListBuffer[Int]()\n        \
    \    val close_brace_group_sums_sums = mutable.ListBuffer[Int]()\n           \
    \ val open_brace_group_sums_sums_count = mutable.ListBuffer[Int]()\n         \
    \   val close_brace_group_sums_sums_count = mutable.ListBuffer[Int]()\n      \
    \      val open_brace_group_sums_sums_sum = mutable.ListBuffer[Int]()\n      \
    \      val close_brace_group_sums_sums_sum = mutable.ListBuffer[Int]()\n     \
    \       val open_brace_group_sums_sums_sums = mutable.ListBuffer[Int]()\n    \
    \        val close_brace_group_sums_sums_sums = mutable.ListBuffer[Int]()\n  \
    \          val open_brace_group_sums_sums_sums_count = mut\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqhv2g_7n.scala:17:16 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mcase\e[0m \e[31m')'\e[0m -> close_braces\
    \ += c\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m      \
    \          '=>' expected, but 'case' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpqhv2g_7n.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m            }\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\e[31m   |\e[0m\
    \            '=>' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpqhv2g_7n.scala:56:0 ----------------------------\e[0m\e[0m\n\e[31m56\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqhv2g_7n.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqhv2g_7n.scala:12:26 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mopen_braces\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpqhv2g_7n.scala:13:27 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mclose_braces\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqhv2g_7n.scala:16:40 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mcase\e[0m \e[31m'('\e[0m -> open_braces\
    \ += c\n\e[31m"
  stdout: ''
  timestamp: 1659795653
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val open_braces = mutable.ListBuffer[String]()\n        val close_braces\
    \ = mutable.ListBuffer[String]()\n        paren_string.foreach {\n           \
    \ c =>\n            if (c == '(') {\n                open_braces += c\n      \
    \      } else if (c == ')') {\n                close_braces += c\n           \
    \ } else if (c == ' ') {\n                paren_groups += c\n            } else\
    \ {\n                paren_groups += c\n            }\n        }\n        val\
    \ open_braces_count = open_braces.size\n        val close_braces_count = close_braces.size\n\
    \        if (open_braces_count != close_braces_count) {\n            throw new\
    \ RuntimeException(\"Invalid paren groups\")\n        }\n        val open_braces_index\
    \ = open_braces.indexWhere(_ == '(')\n        val close_braces_index = close_braces.indexWhere(_\
    \ == ')')\n        val open_braces_count = open_braces_index - open_braces_count\
    \ + 1\n        val close_braces_count = close_braces_index - close_braces_count\
    \ + 1\n        val open_braces_index = open_braces.indexWhere(_ == '(')\n    \
    \    val close_braces_index = close_braces.indexWhere(_ == ')')\n        val open_braces_count\
    \ = open_braces_index - open_braces_count + 1\n        val close_braces_count\
    \ = close_braces_index - close_braces_count + 1\n        val open_braces_index\
    \ = open_braces.indexWhere(_ == '(')\n        val close_braces_index = close_braces.indexWhere(_\
    \ == ')')\n        val open_braces_count = open_braces_index - open_braces_count\
    \ + 1\n        val close_braces_count = close_braces_index - close_braces_count\
    \ + 1\n        val open_braces_index = open_braces.indexWhere(_ == '(')\n    \
    \    val close_braces_index = close_braces.indexWhere(_ == ')')\n        val open_braces_count\
    \ = open_braces_index - open_braces_count + 1\n        val close_braces_count\
    \ = close_braces_index - close_braces_count + 1\n        val open_braces_index\
    \ = open_braces.indexWhere(_ == '(')\n        val close_braces_index = close_braces.indexWhere(_\
    \ == ')')\n        val open_braces_count = open_braces_index - open_brace\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt3o8kid3.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mopen_braces_count\e[0m =\
    \ open_braces_index - open_braces_count + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mopen_braces_count is already defined as \e[33mvalue\e[0m \e[35mopen_braces_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpt3o8kid3.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mclose_braces_count\e[0m = close_braces_index\
    \ - close_braces_count + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclose_braces_count is already defined as \e[33mvalue\e[0m\
    \ \e[35mclose_braces_count\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpt3o8kid3.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mopen_braces_index\e[0m =\
    \ open_braces.indexWhere(_ == \e[31m'('\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopen_braces_index is already defined as \e[33mvalue\e[0m \e\
    [35mopen_braces_index\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpt3o8kid3.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mclose_braces_index\e[0m\
    \ = close_braces.indexWhere(_ == \e[31m')'\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mclose_braces_index is already defined as \e[33mvalue\e[0m \e[35mclose_braces_index\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of top"
  stdout: ''
  timestamp: 1659795651
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_open_braces = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"\"))\n        val paren_groups_with_closed_braces\
    \ = paren_groups_with_open_braces.map(x => x.replace(\"(\", \"\"))\n        val\
    \ paren_groups_with_open_braces_and_closed_braces = paren_groups_with_open_braces.zip(paren_groups_with_closed_braces)\n\
    \        val paren_groups_with_open_braces_and_closed_braces_with_balanced_groups\
    \ = paren_groups_with_open_braces_and_closed_braces.filter(x => x._1.length ==\
    \ x._2.length)\n        val paren_groups_with_open_braces_and_closed_braces_with_balanced_groups_with_brackets\
    \ = paren_groups_with_open_braces_and_closed_braces_with_balanced_groups.map(x\
    \ => (x._1, x._2.replace(\")\", \"\").replace(\"(\", \"\")))\n        val paren_groups_with_open_braces_and_closed_braces_with_balanced_groups_with_brackets_with_brackets\
    \ = paren_groups_with_open_braces_and_closed_braces_with_balanced_groups_with_brackets.map(x\
    \ => (x._1, x._2.replace(\")\", \"\").replace(\"(\", \"\").replace(\")\", \"\"\
    )))\n        val paren_groups_with_open_braces_and_closed_braces_with_balanced_groups_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_open_braces_and_closed_braces_with_balanced_groups_with_brackets_with_brackets.map(x\
    \ => (x._1, x._2.replace(\")\", \"\").replace(\"(\", \"\").replace(\")\", \"\"\
    ).replace(\")\", \"\")))\n        val paren_groups_with_open_braces_and_closed_braces_with_balanced_groups_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_open_braces_and_closed_braces_with_balanced_groups_with_brackets_with_brackets_with_brackets.map(x\
    \ => (x._1, x._2.replace(\")\", \"\").replace(\"(\", \"\").replace(\")\", \"\"\
    ).replace(\")\", \"\").replace(\")\", \"\")))\n        val paren_groups_with_open_braces_and_closed_braces_with_balanced_groups_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_open_braces_and_closed_brace\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy_1jt3ok.scala:20:153 -----------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_open_braces_and_closed_braces_with_balanced_groups_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\e\
    [0m = paren_groups_with_open_braces_and_closed_brace\n\e[31m\e[31m   |\e[0m  \
    \                                                                            \
    \                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m               Not found: paren_groups_with_open_braces_and_closed_brace\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy_1jt3ok.scala:21:5\
    \ ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795652
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpfe4904sc.scala:21:338 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpfe4904sc.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpfe4904sc.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1659795587
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_group_strings = paren_groups.map(x => x.replace(\"\
    )\", \"\"))\n        paren_group_strings.filter(x => !x.isEmpty)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5jhuqgck.scala:13:34\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        paren_group_strings.filter(\e\
    [36mx\e[0m => !x.isEmpty)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mArray\e[0m[String]\n\e[31m  \
    \ |\e[0m        Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795627
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortWith((x,\
    \ y) => x.length <= y.length)\n        val paren_groups_with_spaces_sorted_with_open_braces\
    \ = paren_groups_with_spaces_sorted.map(x => x.replace(\")\", \"\").replace(\"\
    (\", \"\"))\n        val paren_groups_with_spaces_sorted_with_open_braces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_open_braces.map(x => x.replace(\"(\"\
    , \"\").replace(\")\", \"\"))\n        val paren_groups_with_spaces_sorted_with_open_braces_without_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_open_braces_without_spaces.sortWith((x,\
    \ y) => x.length <= y.length)\n        val paren_groups_with_spaces_sorted_with_open_braces_without_spaces_sorted_with_open_braces\
    \ = paren_groups_with_spaces_sorted_with_open_braces_without_spaces_sorted.map(x\
    \ => x.replace(\"(\", \"\").replace(\")\", \"\"))\n        val paren_groups_with_spaces_sorted_with_open_braces_without_spaces_sorted_with_open_braces_sorted\
    \ = paren_groups_with_spaces_sorted_with_open_braces_without_spaces_sorted_with_open_braces.sortWith((x,\
    \ y) => x.length <= y.length)\n        val paren_groups_with_spaces_sorted_with_open_braces_without_spaces_sorted_with_open_braces_sorted_with_open_braces\
    \ = paren_groups_with_spaces_sorted_with_open_braces_without_spaces_sorted_with_open_braces_sorted.map(x\
    \ => x.replace(\"(\", \"\").replace(\")\", \"\"))\n        val paren_groups_with_spaces_sorted_with_open_braces_without_spaces_sorted_with_open_braces_sorted_with_open_braces_sorted\
    \ = paren_groups_with_spaces_sorted_with_open_braces_without_spaces_sorted_with_open_braces_sorted_with_open_braces.sortWith((x,\
    \ y) => x.length <= y.length)\n        val paren_groups_with_spaces_sorted_with_open_braces_without_spaces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces\
    \ = paren_groups_with_spaces_sorted_with_open_braces_without_spaces_sorted_with_open_braces_sorted_with_open_braces_sorted.map(x\
    \ => x.replace(\"(\", \"\").replace(\")\", \"\"))\n        val paren_\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()())\
    \ ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\"\
    , \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphzhns58x.scala:23:4 ----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmphzhns58x.scala:23:5 ---------------------\e[0m\e[0m\n\e[31m23 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795653
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_group_strings = paren_groups.map(x => x.replace(\"\
    )\", \"\"))\n        val paren_group_strings_sorted = paren_group_strings.sortWith((x,\
    \ y) => x.compareTo(y) == -1)\n        val paren_group_strings_sorted_strings\
    \ = paren_group_strings_sorted.map(x => x.replace(\"(\", \"\").replace(\")\",\
    \ \"\"))\n        paren_group_strings_sorted_strings.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpedxqm5v7.scala:18)\n\tat Problem.main(tmpedxqm5v7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795655
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val open_braces = mutable.ListBuffer[String]()\n        val close_braces\
    \ = mutable.ListBuffer[String]()\n        val spaces = mutable.ListBuffer[String]()\n\
    \        val paren_group_size = mutable.ListBuffer[Int]()\n        val open_brace_size\
    \ = mutable.ListBuffer[Int]()\n        val close_brace_size = mutable.ListBuffer[Int]()\n\
    \        val space_size = mutable.ListBuffer[Int]()\n        val paren_group_size_limit\
    \ = mutable.ListBuffer[Int]()\n        val open_brace_size_limit = mutable.ListBuffer[Int]()\n\
    \        val close_brace_size_limit = mutable.ListBuffer[Int]()\n        val space_size_limit\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_size_limit_limit = mutable.ListBuffer[Int]()\n\
    \        val open_brace_size_limit_limit = mutable.ListBuffer[Int]()\n       \
    \ val close_brace_size_limit_limit = mutable.ListBuffer[Int]()\n        val space_size_limit_limit\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_size_limit_limit_limit\
    \ = mutable.ListBuffer[Int]()\n        val open_brace_size_limit_limit_limit =\
    \ mutable.ListBuffer[Int]()\n        val close_brace_size_limit_limit_limit =\
    \ mutable.ListBuffer[Int]()\n        val space_size_limit_limit_limit = mutable.ListBuffer[Int]()\n\
    \        val paren_group_size_limit_limit_limit_limit = mutable.ListBuffer[Int]()\n\
    \        val open_brace_size_limit_limit_limit = mutable.ListBuffer[Int]()\n \
    \       val close_brace_size_limit_limit_limit = mutable.ListBuffer[Int]()\n \
    \       val space_size_limit_limit_limit = mutable.ListBuffer[Int]()\n       \
    \ val paren_group_size_limit_limit_limit_limit = mutable.ListBuffer[Int]()\n \
    \       val open_brace_size_limit_limit_limit = mutable.ListBuffer[Int]()\n  \
    \      val close_brace_size_limit_limit_limit = mutable.ListBuffer[Int]()\n  \
    \      val space_size_limit_limit_limit = mutable.ListBuffer[Int]()\n        val\
    \ paren_group_size_limit_limit_limit_limit = mutable.ListBuffer[Int]()\n     \
    \   val open_brace_size_limit_limit_limit = mutable.ListBuffer[Int]()\n      \
    \  val close_brace_\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp39re04zi.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp39re04zi.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mopen_brace_size_limit_limit_limit\e[0m = mutable.ListBuffer[\e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopen_brace_size_limit_limit_limit is already defined as \e\
    [33mvalue\e[0m \e[35mopen_brace_size_limit_limit_limit\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp39re04zi.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mclose_brace_size_limit_limit_limit\e[0m = mutable.ListBuffer[\e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclose_brace_size_limit_limit_limit is already defined as \e\
    [33mvalue\e[0m \e[35mclose_brace_size_limit_limit_limit\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp39re04zi.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mspace_size_limit_limit_limit\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspace_size_limit_limit_limit is already defined as \e[33mvalue\e\
    [0m \e[35mspace_size_limit_limit_limit\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp39re04zi.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mparen_group_size_limit_limit_limit_limit\e\
    [0m = mutable.ListBuffer[\e[35mIn"
  stdout: ''
  timestamp: 1659795653
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x.length)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces.sortBy(x => x.length)\n      \
    \  val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x.length)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x.length)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.sortBy(x\
    \ => x.length)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()())\
    \ ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\"\
    , \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpg9r40mop.scala:21:122 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.sortBy(\e\
    [36mx\e[0m => x.length)\n\e[31m\e[31m   |\e[0m                               \
    \                                                                            \
    \               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m\
    \   |\e[0m  paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpg9r40mop.scala:23:141 -----------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                                                            \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mNot found: paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg9r40mop.scala:24:5\
    \ ---------------------\e[0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659795655
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_group_strings = paren_groups.map(x => x.replace(\"\
    )\", \"\"))\n        val paren_group_strings_sorted = paren_group_strings.sortBy(x\
    \ => x.length)\n        val paren_group_strings_sorted_reversed = paren_group_strings_sorted.reverse\n\
    \        val paren_group_strings_sorted_reversed_size = paren_group_strings_sorted_reversed.size\n\
    \        val paren_group_strings_sorted_reversed_size_2 = paren_group_strings_sorted_reversed_size\
    \ / 2\n        val paren_group_strings_sorted_reversed_size_3 = paren_group_strings_sorted_reversed_size_2\
    \ / 2\n        val paren_group_strings_sorted_reversed_size_4 = paren_group_strings_sorted_reversed_size_3\
    \ / 2\n        val paren_group_strings_sorted_reversed_size_5 = paren_group_strings_sorted_reversed_size_4\
    \ / 2\n        val paren_group_strings_sorted_reversed_size_6 = paren_group_strings_sorted_reversed_size_5\
    \ / 2\n        val paren_group_strings_sorted_reversed_size_7 = paren_group_strings_sorted_reversed_size_6\
    \ / 2\n        val paren_group_strings_sorted_reversed_size_8 = paren_group_strings_sorted_reversed_size_7\
    \ / 2\n        val paren_group_strings_sorted_reversed_size_9 = paren_group_strings_sorted_reversed_size_8\
    \ / 2\n        val paren_group_strings_sorted_reversed_size_10 = paren_group_strings_sorted_reversed_size_9\
    \ / 2\n        val paren_group_strings_sorted_reversed_size_11 = paren_group_strings_sorted_reversed_size_10\
    \ / 2\n        val paren_group_strings_sorted_reversed_size_12 = paren_group_strings_sorted_reversed_size_11\
    \ / 2\n        val paren_group_strings_sorted_reversed_size_13 = paren_group_strings_sorted_reversed_size_12\
    \ / 2\n        val paren_group_strings_sorted_reversed_size_14 = paren_group_strings_sorted_reversed_size_13\
    \ / 2\n        val paren_group_strings_sorted_reversed_size_15 = paren_group_strings_sorted_reversed_size_14\
    \ / 2\n        val paren_group_strings_sorted_reversed_size_16 = paren_group_strings_sorted_reversed_size_15\
    \ / 2\n        val paren_group_strings_sorted_reversed_size_17 = paren_group_strings_sorted_reversed_size_16\
    \ / 2\n        val paren_group_strings_sorted_reversed_size_18 = paren_group_string\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3ng3a2wi.scala:32:58 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mparen_group_strings_sorted_reversed_size_18\e\
    [0m = paren_group_string\n\e[31m\e[31m   |\e[0m                              \
    \                            ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                                   Not found: paren_group_string\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3ng3a2wi.scala:33:5 ---------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659795655
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(|\\\\)\")\n        val paren_groups_count = paren_groups.length\n       \
    \ val paren_groups_size = (paren_groups_count * 2) - paren_groups_count\n    \
    \    val paren_groups_size_remainder = paren_groups_size % 2\n        val paren_groups_size_remainder_count\
    \ = paren_groups_size_remainder == 0 ? paren_groups_size / 2 : paren_groups_size_remainder\n\
    \        val paren_groups_size_remainder_count_remainder = paren_groups_size_remainder_count\
    \ * 2\n        val paren_groups_size_remainder_count_remainder_count = paren_groups_size_remainder_count_remainder\
    \ == 0 ? paren_groups_size_remainder / 2 : paren_groups_size_remainder_count_remainder\n\
    \        val paren_groups_size_remainder_count_remainder_count_remainder = paren_groups_size_remainder_count_remainder_count\
    \ * 2\n        val paren_groups_size_remainder_count_remainder_count_remainder_count\
    \ = paren_groups_size_remainder_count_remainder_count_remainder == 0 ? paren_groups_size_remainder_count\
    \ / 2 : paren_groups_size_remainder_count_remainder_count_remainder\n        val\
    \ paren_groups_size_remainder_count_remainder_count_remainder_count_remainder\
    \ = paren_groups_size_remainder_count_remainder_count_remainder_count * 2\n  \
    \      val paren_groups_size_remainder_count_remainder_count_remainder_count_remainder_count\
    \ = paren_groups_size_remainder_count_remainder_count_remainder_count_remainder\
    \ == 0 ? paren_groups_size_remainder_count_remainder / 2 : paren_groups_size_remainder_count_remainder_count_remainder_count_remainder\n\
    \        val paren_groups_size_remainder_count_remainder_count_remainder_count_remainder_count_remainder\
    \ = paren_groups_size_remainder_count_remainder_count_remainder_count_remainder_count_remainder\
    \ == 0 ? paren_groups_size_remainder_count_remainder_count_remainder / 2 : paren_groups_size_remainder_count_remainder_count_remainder_count_remainder_count_remainder\n\
    \        val paren_groups_size_remainder_count_remainder_count_remainder_count_remainder_count_remainder_count\
    \ = paren_groups_size_remainder_count_remainder_count_remainder_count_remainder_count_remainder\
    \ == 0 ? paren_groups_size_remainder_count_remainder_count_remainder / 2 : paren_groups_size_remainder_count_remainder_count_remainder_count_remainder_count_remainder\n\
    \        val paren_groups_size_remainder_count_remainder_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzicd50zm.scala:25:4 ----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzicd50zm.scala:15:107\
    \ -----------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_size_remainder_count\e[0m = paren_groups_size_remainder == \e\
    [31m0\e[0m ? paren_groups_size / \e[31m2\e[0m : \e[35mparen_groups_size_remainder\e\
    [0m\n\e[31m\e[31m   |\e[0m                                                   \
    \                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Not found: type paren_groups_size_remainder\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzicd50zm.scala:15:81\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_size_remainder_count\e[0m = paren_groups_size_remainder == \e\
    [31m0\e[0m ? paren_groups_size / \e[31m2\e[0m : \e[35mparen_groups_size_remainder\e\
    [0m\n\e[31m\e[31m   |\e[0m                                                   \
    \                            ^^^\e[0m\n\e[31m   |\e[0m                       \
    \                   value ? is not a member of Int\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpzicd50zm.scala:17:149 -----------------------\e[0m\e[0m\n\
    \e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_size_remainder_count_remainder_count\e\
    [0m = paren_groups_size_remainder_count_remainder == \e[31m0\e[0m ? paren_groups_size_remainder\
    \ / \e[31m2\e[0m : \e[35mparen_groups_size_remainder_count_remainder\e[0m\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                                                                            \
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             Not found: type paren_groups_size_remainder_count_remainder\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m--"
  stdout: ''
  timestamp: 1659795656
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.filterNot(_ == \")\")\n        val paren_groups_flat3 =\
    \ paren_groups_flat2.filterNot(_ == \"(\")\n        val paren_groups_flat4 = paren_groups_flat3.filterNot(_\
    \ == \" \")\n        val paren_groups_flat5 = paren_groups_flat4.filterNot(_ ==\
    \ \"\\\\\")\n        val paren_groups_flat6 = paren_groups_flat5.filterNot(_ ==\
    \ \"\\\\(\")\n        val paren_groups_flat7 = paren_groups_flat6.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat8 = paren_groups_flat7.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat9 = paren_groups_flat8.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat10 = paren_groups_flat9.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat11 = paren_groups_flat10.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat12 = paren_groups_flat11.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat13 = paren_groups_flat12.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat14 = paren_groups_flat13.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat15 = paren_groups_flat14.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat16 = paren_groups_flat15.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat17 = paren_groups_flat16.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat18 = paren_groups_flat17.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat19 = paren_groups_flat18.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat20 = paren_groups_flat19.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat21 = paren_groups_flat20.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat22 = paren_groups_flat21.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat23 = paren_groups_flat22.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat24 = paren_groups_flat23.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat25 = paren_groups_flat24.filter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp8xajzkl1.scala:13:61 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m\
    \ = paren_groups_flat.filterNot(_ == \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                             ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types Char and String cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- Error: /tmp/tmp8xajzkl1.scala:14:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat3\e[0m\
    \ = paren_groups_flat2.filterNot(_ == \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp8xajzkl1.scala:15:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat4\e[0m\
    \ = paren_groups_flat3.filterNot(_ == \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp8xajzkl1.scala:16:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat5\e[0m\
    \ = paren_groups_flat4.filterNot(_ == \e[31m\"\\\\\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                              ^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp8xajzkl1.scala:17:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat6\e[0m\
    \ = paren_groups_flat5.filterNot(_ == \e[31m\"\\\\(\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                              ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp8xajzkl1.scala:18:62 -----------------------------------------\e\
    [0m"
  stdout: ''
  timestamp: 1659795604
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_group_count = paren_groups.length\n        val paren_groups_with_paren_count\
    \ = paren_groups.map(x => x + \"(\" + paren_group_count + \")\").mkString\n  \
    \      val paren_groups_with_paren_count_with_spaces = paren_groups_with_paren_count\
    \ + \" \" + paren_groups_with_paren_count\n        val paren_groups_with_paren_count_with_spaces_array\
    \ = paren_groups_with_paren_count_with_spaces.split(\"\\\\s+\")\n        val paren_groups_with_paren_count_with_spaces_array_length\
    \ = paren_groups_with_paren_count_with_spaces_array.length\n        val paren_groups_with_paren_count_with_spaces_array_with_spaces\
    \ = paren_groups_with_paren_count_with_spaces_array.map(x => x + \"(\" + paren_group_count\
    \ + \")\").mkString\n        val paren_groups_with_paren_count_with_spaces_array_with_spaces_array\
    \ = paren_groups_with_paren_count_with_spaces_array_with_spaces.split(\"\\\\s+\"\
    )\n        val paren_groups_with_paren_count_with_spaces_array_with_spaces_array_length\
    \ = paren_groups_with_paren_count_with_spaces_array_with_spaces_array.length\n\
    \        val paren_groups_with_paren_count_with_spaces_array_with_spaces_array_with_spaces\
    \ = paren_groups_with_paren_count_with_spaces_array_with_spaces_array.map(x =>\
    \ x + \"(\" + paren_group_count + \")\").mkString\n        val paren_groups_with_paren_count_with_spaces_array_with_spaces_array_with_spaces_array\
    \ = paren_groups_with_paren_count_with_spaces_array_with_spaces_array_with_spaces.split(\"\
    \\\\s+\")\n        val paren_groups_with_paren_count_with_spaces_array_with_spaces_array_with_spaces_array_length\
    \ = paren_groups_with_paren_count_with_spaces_array_with_spaces_array_with_spaces_array.length\n\
    \        val paren_groups_with_paren_count_with_spaces_array_with_spaces_array_with_spaces_array_with_spaces\
    \ = paren_groups_with_paren_count_with_spaces_array_with_spaces_array_with_spaces_array.map(x\
    \ => x + \"(\" + paren_group_count + \")\").mkString\n        val paren_groups_with_paren_count_with_spaces_array_with_spaces_array_with_spaces_array_with_spaces_array\
    \ = paren_groups_with_paren_count_with_spaces_array_with_spaces_array_with_spaces_array_with_spaces.split(\"\
    \\\\s+\")\n        val paren_groups_with_paren_count_with_spaces_array_\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()())\
    \ ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\"\
    , \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdokp73t2.scala:26:4 ----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpdokp73t2.scala:26:5 ---------------------\e[0m\e[0m\n\e[31m26 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795656
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_closed\
    \ = mutable.ListBuffer[String]()\n        paren_string.foreach {\n           \
    \ case c if c == '(' -> paren_open += c\n            case c if c == ')' -> paren_closed\
    \ += c\n            case c if c == ' ' -> ()\n            case c if c == '(' ->\
    \ paren_groups += c\n            case c if c == ')' -> paren_groups += c\n   \
    \         case c if c == ' ' -> ()\n            case c if c == '(' -> paren_groups\
    \ += c\n            case c if c == ')' -> paren_groups += c\n            case\
    \ c if c == ' ' -> ()\n            case c if c == '(' -> paren_groups += c\n \
    \           case c if c == ')' -> paren_groups += c\n            case c if c ==\
    \ ' ' -> ()\n            case c if c == '(' -> paren_groups += c\n           \
    \ case c if c == ')' -> paren_groups += c\n            case c if c == ' ' -> ()\n\
    \            case c if c == '(' -> paren_groups += c\n            case c if c\
    \ == ')' -> paren_groups += c\n            case c if c == ' ' -> ()\n        \
    \    case c if c == '(' -> paren_groups += c\n            case c if c == ')' ->\
    \ paren_groups += c\n            case c if c == ' ' -> ()\n            case c\
    \ if c == '(' -> paren_groups += c\n            case c if c == ')' -> paren_groups\
    \ += c\n            case c if c == ' ' -> ()\n            case c if c == '(' ->\
    \ paren_groups += c\n            case c if c == ')' -> paren_groups += c\n   \
    \         case c if c == ' ' -> ()\n            case c if c == '(' -> paren_groups\
    \ += c\n            case c if c == ')' -> paren_groups += c\n            case\
    \ c if c == ' ' -> ()\n            case c if c == '(' -> paren_groups += c\n \
    \           case c if c == ')' -> paren_groups += c\n            case c if c ==\
    \ ' ' -> ()\n            case c if c == '(' -> paren_groups += c\n           \
    \ case c if c == ')' -> paren_groups += c\n            case c if c == ' ' -> ()\n\
    \            case c if c == '(' -> paren_groups += c\n            case c if c\
    \ == ')' -> paren_groups += c\n            case c if c == ' ' -> ()\n        \
    \    case c if c\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmqclwwu4.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e[0m c \e[33mif\e[0m c == \e[31m')'\e\
    [0m -> paren_closed += c\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m \
    \  |\e[0m            '=>' expected, but 'case' found\n\e[31m\e[31m-- [E040] Syntax\
    \ Error: /tmp/tmpmqclwwu4.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m            \e[33mcase\e[0m c \e[33mif\e[0m c == \e[31m'('\e[0m ->\
    \ paren_groups += c\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e\
    [0m            '=>' expected, but 'case' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpmqclwwu4.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m            \e[33mcase\e[0m c \e[33mif\e[0m c == \e[31m' '\e[0m -> ()\n\
    \e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            '=>' expected,\
    \ but 'case' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmqclwwu4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mcase\e\
    [0m c \e[33mif\e[0m c == \e[31m')'\e[0m -> paren_groups += c\n\e[31m\e[31m   |\e\
    [0m            ^^^^\e[0m\n\e[31m   |\e[0m            '=>' expected, but 'case'\
    \ found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmqclwwu4.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mcase\e[0m c \e[33mif\e[0m c == \e[31m'('\e\
    [0m -> paren_groups += c\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m \
    \  |\e[0m            '=>' expected, but 'case' found\n\e[31m\e[31m-- [E040] Syntax\
    \ Error: /tmp/tmpmqclwwu4.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m            \e[33mcase\e[0m c \e[33mif\e[0m c == \e[31m' '\e[0m ->\
    \ ()\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            '=>'\
    \ expected, but 'case' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmqclwwu4.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m            \e[33mcase\e\
    [0m c \e[33mif\e[0m c == \e[31m')'\e[0m -> paren_groups += c\n\e[31m\e[31m   |\e\
    [0m            ^^^^\e[0m\n\e[31m   |\e[0m            '=>' expected, but 'case'\
    \ found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmqclwwu4.scala:30:12 ------"
  stdout: ''
  timestamp: 1659795663
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpfe4904sc.scala:21:338 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpfe4904sc.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpfe4904sc.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1659795587
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_size = paren_groups.length\n        val paren_groups_size_reversed\
    \ = paren_groups_size.reverse\n        val paren_groups_size_reversed_size = paren_groups_size_reversed.length\n\
    \        val paren_groups_size_reversed_size_reversed = paren_groups_size_reversed_size.reverse\n\
    \        val paren_groups_size_reversed_size_reversed_size = paren_groups_size_reversed_size_reversed.length\n\
    \        val paren_groups_size_reversed_size_reversed_size_reversed = paren_groups_size_reversed_size_reversed_size.reverse\n\
    \        val paren_groups_size_reversed_size_reversed_size_reversed_size = paren_groups_size_reversed_size_reversed_size_reversed.length\n\
    \        val paren_groups_size_reversed_size_reversed_size_reversed_size_reversed\
    \ = paren_groups_size_reversed_size_reversed_size_reversed_size.reverse\n    \
    \    val paren_groups_size_reversed_size_reversed_size_reversed_size_reversed_size\
    \ = paren_groups_size_reversed_size_reversed_size_reversed_size_reversed.length\n\
    \        val paren_groups_size_reversed_size_reversed_size_reversed_size_reversed_size_reversed\
    \ = paren_groups_size_reversed_size_reversed_size_reversed_size_reversed_size.reverse\n\
    \        val paren_groups_size_reversed_size_reversed_size_reversed_size_reversed_size_reversed_size\
    \ = paren_groups_size_reversed_size_reversed_size_reversed_size_reversed_size_reversed.length\n\
    \        val paren_groups_size_reversed_size_reversed_size_reversed_size_reversed_size_reversed_size_reversed\
    \ = paren_groups_size_reversed_size_reversed_size_reversed_size_reversed_size_reversed_size.reverse\n\
    \        val paren_groups_size_reversed_size_reversed_size_reversed_size_reversed_size_reversed_size_reversed_size\
    \ = paren_groups_size_reversed_size_reversed_size_reversed_size_reversed_size_reversed_size_reversed.length\n\
    \        val paren_groups_size_reversed_size_reversed_size_reversed_size_reversed_size_reversed_size_reversed_size_reversed\
    \ = paren_groups_size_reversed_size_reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp06ifjhln.scala:13:59 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_size_reversed\e\
    [0m = paren_groups_size.reverse\n\e[31m\e[31m   |\e[0m                       \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                         value reverse is not a member of Int\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp06ifjhln.scala:25:125 -----------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_size_reversed_size_reversed_size_reversed_size_reversed_size_reversed_size_reversed_size_reversed\e\
    [0m = paren_groups_size_reversed_size_reverse\n\e[31m\e[31m   |\e[0m         \
    \                                                                            \
    \                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Not found: paren_groups_size_reversed_size_reverse\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp06ifjhln.scala:26:5\
    \ ---------------------\e[0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659795658
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_open_braces = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"\"))\n        val paren_groups_with_open_braces_without_spaces\
    \ = paren_groups_with_open_braces.map(x => x.replace(\"  \", \"\"))\n        val\
    \ paren_groups_with_open_braces_without_spaces_without_spaces = paren_groups_with_open_braces_without_spaces.map(x\
    \ => x.replace(\"  \", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_spaces.map(x => x.replace(\"\
    \  \", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_space\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpkcxtnf2q.scala:19:149 --------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"  \"\e[0m, \e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                                                           ^\e\
    [0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpkcxtnf2q.scala:20:164 --------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"  \"\e[0m, \e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                                                            \
    \              ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m\
    \   |\e[0m  paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpkcxtnf2q.scala:21:179 -----------"
  stdout: ''
  timestamp: 1659795658
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"  \", \" \"))\n\
    \        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    \  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpzh3wtzqn.scala:16:99 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"  \"\e[0m, \e[31m\" \"\e[0m))\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \                              ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpzh3wtzqn.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"  \"\e[0m, \e[31m\" \"\e[0m))\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \                                             ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpzh3wtzqn.scala:18:129 --------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"  \"\e[0m, \e[31m\" \"\e[0m))\n\e[31m\e[31m  \
    \ |\e[0m                          "
  stdout: ''
  timestamp: 1659795658
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_group_strings = paren_groups.map(x => x.replace(\"\
    )\", \"\"))\n        paren_group_strings.filter(x => x.nonEmpty)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3dtkil3_.scala:13:34\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        paren_group_strings.filter(\e\
    [36mx\e[0m => x.nonEmpty)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mArray\e[0m[String]\n\e[31m  \
    \ |\e[0m        Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795659
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replace(\" \"\
    , \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp90lov807.scala:21:122 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.sortBy(\e\
    [36mx\e[0m => x)\n\e[31m\e[31m   |\e[0m                                      \
    \                                                                            \
    \        ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e\
    [0m  paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp90lov807.scala:23:141 -----------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp90lov807.scala:24:5\
    \ ---------------------\e[0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659795602
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        var open_braces = 0\n        var closed_braces = 0\n        var paren_group\
    \ = \"\"\n        for (c <- paren_string) {\n            if (c == '(') {\n   \
    \             open_braces += 1\n            } else if (c == ')') {\n         \
    \       closed_braces += 1\n            } else if (c == '(' && open_braces > closed_braces)\
    \ {\n                paren_group += c\n            } else if (c == ')' && closed_braces\
    \ > open_braces) {\n                paren_group += c\n                paren_groups\
    \ += paren_group\n                paren_group = \"\"\n                open_braces\
    \ = 0\n                closed_braces = 0\n            } else if (c == ' ') {\n\
    \                paren_group += c\n            } else {\n                paren_group\
    \ += c\n            }\n        }\n        if (paren_group.length > 0) {\n    \
    \        paren_groups += paren_group\n        }\n        paren_groups.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfb3uw5wk.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659795656
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"  \", \" \"))\n\
    \        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    \  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpzh3wtzqn.scala:16:99 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"  \"\e[0m, \e[31m\" \"\e[0m))\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \                              ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpzh3wtzqn.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"  \"\e[0m, \e[31m\" \"\e[0m))\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \                                             ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpzh3wtzqn.scala:18:129 --------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"  \"\e[0m, \e[31m\" \"\e[0m))\n\e[31m\e[31m  \
    \ |\e[0m                          "
  stdout: ''
  timestamp: 1659795658
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatMap(x => x.split(\"\
    \\\\)\"))\n        val paren_groups_flat2 = paren_groups_flat.flatMap(x => x.split(\"\
    \\\\)\"))\n        val paren_groups_flat3 = paren_groups_flat2.flatMap(x => x.split(\"\
    \\\\)\"))\n        val paren_groups_flat4 = paren_groups_flat3.flatMap(x => x.split(\"\
    \\\\)\"))\n        val paren_groups_flat5 = paren_groups_flat4.flatMap(x => x.split(\"\
    \\\\)\"))\n        val paren_groups_flat6 = paren_groups_flat5.flatMap(x => x.split(\"\
    \\\\)\"))\n        val paren_groups_flat7 = paren_groups_flat6.flatMap(x => x.split(\"\
    \\\\)\"))\n        val paren_groups_flat8 = paren_groups_flat7.flatMap(x => x.split(\"\
    \\\\)\"))\n        val paren_groups_flat9 = paren_groups_flat8.flatMap(x => x.split(\"\
    \\\\)\"))\n        val paren_groups_flat10 = paren_groups_flat9.flatMap(x => x.split(\"\
    \\\\)\"))\n        val paren_groups_flat11 = paren_groups_flat10.flatMap(x =>\
    \ x.split(\"\\\\)\"))\n        val paren_groups_flat12 = paren_groups_flat11.flatMap(x\
    \ => x.split(\"\\\\)\"))\n        val paren_groups_flat13 = paren_groups_flat12.flatMap(x\
    \ => x.split(\"\\\\)\"))\n        val paren_groups_flat14 = paren_groups_flat13.flatMap(x\
    \ => x.split(\"\\\\)\"))\n        val paren_groups_flat15 = paren_groups_flat14.flatMap(x\
    \ => x.split(\"\\\\)\"))\n        val paren_groups_flat16 = paren_groups_flat15.flatMap(x\
    \ => x.split(\"\\\\)\"))\n        val paren_groups_flat17 = paren_groups_flat16.flatMap(x\
    \ => x.split(\"\\\\)\"))\n        val paren_groups_flat18 = paren_groups_flat17.flatMap(x\
    \ => x.split(\"\\\\)\"))\n        val paren_groups_flat19 = paren_groups_flat18.flatMap(x\
    \ => x.split(\"\\\\)\"))\n        val paren_groups_flat20 = paren_groups_flat19.flatMap(x\
    \ => x.split(\"\\\\)\"))\n        val paren_groups_flat21 = paren_groups_flat20.flatMap(x\
    \ => x.split(\"\\\\)\"))\n        val paren_groups_flat22 = paren_groups_flat21.flatMap(x\
    \ => x.split(\"\\\\)\"))\n        val paren_groups_flat\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9ychiphr.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp9ychiphr.scala:35:5 ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_group_stack = mutable.Stack[String]()\n        val\
    \ paren_group_result: List[String] = Nil\n        for (paren_group <- paren_groups)\
    \ {\n            val paren_group_length = paren_group.length\n            val\
    \ paren_group_start = paren_group_stack.lastOption.orElse(paren_group_length)\n\
    \            val paren_group_end = paren_group_start + paren_group_length - 1\n\
    \            val paren_group_str = paren_group.substring(paren_group_start, paren_group_end)\n\
    \            paren_group_stack.push(paren_group_str)\n            if (paren_group_str.length\
    \ == paren_group_length) {\n                paren_group_result ::= paren_group_str\n\
    \            } else {\n                paren_group_result ::= paren_group_stack.last\n\
    \                paren_group_stack.clear()\n            }\n        }\n       \
    \ paren_group_result.reverse\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpumk5817s.scala:12:32 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_group_stack\e[0m =\
    \ mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                                Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpumk5817s.scala:21:35\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                paren_group_result\
    \ ::= paren_group_str\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue ::= is not a member of List[String] - did you mean paren_group_result.::?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpumk5817s.scala:23:35 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                paren_group_result ::= paren_group_stack.last\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue ::= is not a member of List[String] - did you mean paren_group_result.::?\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659795661
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_reversed = paren_groups_with_spaces.reverse\n\
    \        val paren_groups_with_spaces_reversed_with_spaces = paren_groups_with_spaces_reversed.map(x\
    \ => x.replace(\"(\", \" ( \"))\n        val paren_groups_with_spaces_reversed_with_spaces_reversed\
    \ = paren_groups_with_spaces_reversed_with_spaces.reverse\n        val paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces\
    \ = paren_groups_with_spaces_reversed_with_spaces_reversed.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed\
    \ = paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces.reverse\n\
    \        val paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces\
    \ = paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces.map(x\
    \ => x.replace(\"(\", \" ( \"))\n        val paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed\
    \ = paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces\
    \ = paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed.map(x\
    \ => x.replace(\"(\", \" ( \"))\n        val paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces\
    \ = paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed\
    \ = paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_space\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp91ppy8n2.scala:18:102 --------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces\e\
    [0m = paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"(\"\e[0m, \e[31m\" ( \"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                                  ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp91ppy8n2.scala:19:111 --------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed\e\
    [0m = paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed.map(\e\
    [36mx\e[0m => x.replace(\e[31m\")\"\e[0m, \e[31m\" ) \"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                                           ^\e[0m\n\e[31m   |\e[0mRecursive \e\
    [33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp91ppy8n2.scala:20:123 -----------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces\e\
    [0m = paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"(\"\e[0m, \e[31m\" ( \"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                          "
  stdout: ''
  timestamp: 1659795661
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(|\\\\)\")\n        val paren_groups_flat = paren_groups.flatten\n       \
    \ val paren_groups_flat2 = paren_groups_flat.distinct\n        val paren_groups_flat3\
    \ = paren_groups_flat2.filterNot(_ == \"\")\n        val paren_groups_flat4 =\
    \ paren_groups_flat3.filterNot(_ == \" \")\n        paren_groups_flat4.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpjxb1k_ti.scala:14:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat3\e[0m\
    \ = paren_groups_flat2.filterNot(_ == \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types Char and String cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- Error: /tmp/tmpjxb1k_ti.scala:15:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat4\e[0m\
    \ = paren_groups_flat3.filterNot(_ == \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjxb1k_ti.scala:16:27\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        paren_groups_flat4.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \       Found:    List[\e[1m\e[31mChar\e[0m]\n\e[31m   |\e[0m        Required:\
    \ List[\e[1m\e[32mString\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659795663
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val open_braces = mutable.ListBuffer[String]()\n        val close_braces\
    \ = mutable.ListBuffer[String]()\n        paren_string.split(\"\\\\(\").foreach(x\
    \ => {\n            val open_brace = x.split(\"\\\\)\").length == 1\n        \
    \    val close_brace = x.split(\"\\\\)\").length == 0\n            if (open_brace\
    \ && close_brace) {\n                paren_groups += x\n            } else if\
    \ (open_brace) {\n                open_braces += x\n            } else if (close_brace)\
    \ {\n                close_braces += x\n            }\n        })\n        paren_groups\
    \ += open_braces.mkString(\"(\")\n        paren_groups += close_braces.mkString(\"\
    )\")\n        paren_groups.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp216whyvf.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp216whyvf.scala:12:26 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mopen_braces\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp216whyvf.scala:13:27 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mclose_braces\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659795659
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat3\
    \ = paren_groups_flat2.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat4\
    \ = paren_groups_flat3.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat5\
    \ = paren_groups_flat4.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat6\
    \ = paren_groups_flat5.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat7\
    \ = paren_groups_flat6.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat8\
    \ = paren_groups_flat7.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat9\
    \ = paren_groups_flat8.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat10\
    \ = paren_groups_flat9.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat11\
    \ = paren_groups_flat10.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat12\
    \ = paren_groups_flat11.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat13\
    \ = paren_groups_flat12.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat14\
    \ = paren_groups_flat13.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat15\
    \ = paren_groups_flat14.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat16\
    \ = paren_groups_flat15.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat17\
    \ = paren_groups_flat16.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat18\
    \ = paren_groups_flat17.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat19\
    \ = paren_groups_flat18.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat20\
    \ = paren_groups_flat19.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat21\
    \ = paren_groups_flat20.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat22\
    \ = paren_groups_flat21.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat23\
    \ = paren_groups_flat22.flat\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2zketgwa.scala:13:66 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m\
    \ = paren_groups_flat.flatMap(\e[36mx\e[0m => x.split(\e[31m\"\\\\)\"\e[0m))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                                     value\
    \ split is not a member of Char\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2zketgwa.scala:35:5\
    \ ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val open_braces = mutable.ListBuffer[String]()\n        val closed_braces\
    \ = mutable.ListBuffer[String]()\n        val open_brace_count = 0\n        val\
    \ closed_brace_count = 0\n        val paren_open = mutable.ListBuffer[String]()\n\
    \        val paren_closed = mutable.ListBuffer[String]()\n        val paren_open_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_size = mutable.ListBuffer[Int]()\n\
    \        val paren_open_size = paren_open_size.init\n        val paren_closed_size\
    \ = paren_closed_size.init\n        val paren_open = paren_open.init\n       \
    \ val paren_closed = paren_closed.init\n        val paren_open_size = paren_open_size.init\n\
    \        val paren_closed_size = paren_closed_size.init\n        val paren_open\
    \ = paren_open.init\n        val paren_closed = paren_closed.init\n        val\
    \ paren_open_size = paren_open_size.init\n        val paren_closed_size = paren_closed_size.init\n\
    \        val paren_open = paren_open.init\n        val paren_closed = paren_closed.init\n\
    \        val paren_open_size = paren_open_size.init\n        val paren_closed_size\
    \ = paren_closed_size.init\n        val paren_open = paren_open.init\n       \
    \ val paren_closed = paren_closed.init\n        val paren_open_size = paren_open_size.init\n\
    \        val paren_closed_size = paren_closed_size.init\n        val paren_open\
    \ = paren_open.init\n        val paren_closed = paren_closed.init\n        val\
    \ paren_open_size = paren_open_size.init\n        val paren_closed_size = paren_closed_size.init\n\
    \        val paren_open = paren_open.init\n        val paren_closed = paren_closed.init\n\
    \        val paren_open_size = paren_open_size.init\n        val paren_closed_size\
    \ = paren_closed_size.init\n        val paren_open = paren_open.init\n       \
    \ val paren_closed = paren_closed.init\n        val paren_open_size = paren_open_size.init\n\
    \        val paren_closed_size = paren_closed_size.init\n        val paren_open\
    \ = paren_open.init\n        val paren_closed = paren_closed.\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpe34zhlny.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpe34zhlny.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_open_size\e[0m = paren_open_size.init\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mparen_open_size is already defined as \e[33mvalue\e[0m \e[35mparen_open_size\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpe34zhlny.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_closed_size\e[0m = paren_closed_size.init\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_closed_size is already defined as \e[33mvalue\e[0m \e\
    [35mparen_closed_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpe34zhlny.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mparen_open\e[0m = paren_open.init\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mparen_open is already defined as \e[33mvalue\e[0m \e[35mparen_open\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpe34zhlny.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_closed\e[0m = paren_closed.init\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mparen_closed is already defined as \e[33mvalue\e[0m \e[35mparen_closed\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Erro"
  stdout: ''
  timestamp: 1659795663
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_closed\
    \ = mutable.ListBuffer[String]()\n        paren_string.foreach {\n           \
    \ case ' ' =>\n            case ')' =>\n            case ')(' =>\n           \
    \ case ')(' =>\n            case ')(' =>\n            case ')(' =>\n         \
    \   case ')(' =>\n            case ')(' =>\n            case ')(' =>\n       \
    \     case ')(' =>\n            case ')(' =>\n            case ')(' =>\n     \
    \       case ')(' =>\n            case ')(' =>\n            case ')(' =>\n   \
    \         case ')(' =>\n            case ')(' =>\n            case ')(' =>\n \
    \           case ')(' =>\n            case ')(' =>\n            case ')(' =>\n\
    \            case ')(' =>\n            case ')(' =>\n            case ')(' =>\n\
    \            case ')(' =>\n            case ')(' =>\n            case ')(' =>\n\
    \            case ')(' =>\n            case ')(' =>\n            case ')(' =>\n\
    \            case ')(' =>\n            case ')(' =>\n            case ')(' =>\n\
    \            case ')(' =>\n            case ')(' =>\n            case ')(' =>\n\
    \            case ')(' =>\n            case ')(' =>\n            case ')(' =>\n\
    \            case ')(' =>\n            case ')(' =>\n            case ')(' =>\n\
    \            case ')(' =>\n            case ')(' =>\n            case ')(' =>\n\
    \            case ')(' =>\n            case ')(' =>\n            case ')(' =>\n\
    \            case ')(' =>\n            case ')(' =>\n            case ')(' =>\n\
    \            case ')(' =>\n            case ')(' =>\n            case ')(' =>\n\
    \            case ')(' =>\n            case ')(' =>\n            case ')(' =>\n\
    \            case ')(' =>\n            case ')(' =>\n            case ')(' =>\n\
    \            case ')(' =>\n            case ')(' =>\n            case ')(' =>\n\
    \            case ')(' =>\n            case ')(' =>\n            case ')(' =>\n\
    \            case ')(' =>\n            case ')(' =>\n            case ')(' =>\n\
    \            case ')(' =>\n            case ')(' =>\n            case ')(' =>\n\
    \            case ')(' =>\n            case ')(' =>\n            case ')(' =>\n\
    \            case ')(' =>\n            case ')(' =>\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpzii903un.scala:17:17 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mcase\e[0m ')(' =>\n\e[31m\e[31m   |\e\
    [0m                 ^\e[0m\n\e[31m   |\e[0m                 unclosed character\
    \ literal\n\e[31m\e[31m-- Error: /tmp/tmpzii903un.scala:18:17 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mcase\e[0m ')(' =>\n\e[31m\e[31m   |\e\
    [0m                 ^\e[0m\n\e[31m   |\e[0m                 unclosed character\
    \ literal\n\e[31m\e[31m-- Error: /tmp/tmpzii903un.scala:19:17 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mcase\e[0m ')(' =>\n\e[31m\e[31m   |\e\
    [0m                 ^\e[0m\n\e[31m   |\e[0m                 unclosed character\
    \ literal\n\e[31m\e[31m-- Error: /tmp/tmpzii903un.scala:20:17 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mcase\e[0m ')(' =>\n\e[31m\e[31m   |\e\
    [0m                 ^\e[0m\n\e[31m   |\e[0m                 unclosed character\
    \ literal\n\e[31m\e[31m-- Error: /tmp/tmpzii903un.scala:21:17 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mcase\e[0m ')(' =>\n\e[31m\e[31m   |\e\
    [0m                 ^\e[0m\n\e[31m   |\e[0m                 unclosed character\
    \ literal\n\e[31m\e[31m-- Error: /tmp/tmpzii903un.scala:22:17 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mcase\e[0m ')(' =>\n\e[31m\e[31m   |\e\
    [0m                 ^\e[0m\n\e[31m   |\e[0m                 unclosed character\
    \ literal\n\e[31m\e[31m-- Error: /tmp/tmpzii903un.scala:23:17 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mcase\e[0m ')(' =>\n\e[31m\e[31m   |\e\
    [0m                 ^\e[0m\n\e[31m   |\e[0m                 unclosed character\
    \ literal\n\e[31m\e[31m-- Error: /tmp/tmpzii903un.scala:24:17 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mcase\e[0m ')(' =>\n\e[31m\e[31m   |\e\
    [0m                 ^\e[0m\n\e[31m   |\e[0m                 unclosed character\
    \ literal\n\e[31m\e[31m-- Error: /tmp/tmpzii903un.scala:25:17 -----------------------------------------\e\
    [0m\e["
  stdout: ''
  timestamp: 1659795661
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_group_counts = paren_groups.map(x => x.split(\"\\\\\
    )\").length)\n        val paren_group_lengths = paren_group_counts.map(x => x.toDouble)\n\
    \        val paren_group_lengths_sum = paren_group_lengths.sum\n        val paren_group_lengths_avg\
    \ = paren_group_lengths_sum / paren_groups.length\n        val paren_group_lengths_min\
    \ = paren_group_lengths.min\n        val paren_group_lengths_max = paren_group_lengths.max\n\
    \        val paren_group_lengths_range = paren_group_lengths_max - paren_group_lengths_min\n\
    \        val paren_group_lengths_range_avg = paren_group_lengths_range / paren_groups.length\n\
    \        val paren_group_lengths_range_min = paren_group_lengths_range_min * 0.95\n\
    \        val paren_group_lengths_range_max = paren_group_lengths_range_max * 1.05\n\
    \        val paren_group_lengths_range_min = paren_group_lengths_range_min.toInt\n\
    \        val paren_group_lengths_range_max = paren_group_lengths_range_max.toInt\n\
    \        val paren_group_lengths_range_avg = paren_group_lengths_range_avg.toInt\n\
    \        val paren_group_lengths_range_min = paren_group_lengths_range_min\n \
    \       val paren_group_lengths_range_max = paren_group_lengths_range_max\n  \
    \      val paren_group_lengths_range_avg = paren_group_lengths_range_avg\n   \
    \     val paren_group_lengths_range_min = paren_group_lengths_range_min\n    \
    \    val paren_group_lengths_range_max = paren_group_lengths_range_max\n     \
    \   val paren_group_lengths_range_avg = paren_group_lengths_range_avg\n      \
    \  val paren_group_lengths_range_min = paren_group_lengths_range_min\n       \
    \ val paren_group_lengths_range_max = paren_group_lengths_range_max\n        val\
    \ paren_group_lengths_range_avg = paren_group_lengths_range_avg\n        val paren_group_lengths_range_min\
    \ = paren_group_lengths_range_min\n        val paren_group_lengths_range_max =\
    \ paren_group_lengths_range_max\n        val paren_group_lengths_range_avg = paren_group_lengths_range_avg\n\
    \        val paren_group_lengths_range_min = paren_group_lengths_range_min\n \
    \       val paren_group_lengths_range_max = paren_group_lengths_range_max\n  \
    \      val paren_group_lengths_range_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb14n1qwg.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb14n1qwg.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_group_lengths_range_min\e[0m = paren_group_lengths_range_min.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_lengths_range_min is already defined as \e[33mvalue\e\
    [0m \e[35mparen_group_lengths_range_min\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb14n1qwg.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mparen_group_lengths_range_max\e\
    [0m = paren_group_lengths_range_max.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_lengths_range_max is already defined as \e[33mvalue\e\
    [0m \e[35mparen_group_lengths_range_max\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb14n1qwg.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mparen_group_lengths_range_avg\e\
    [0m = paren_group_lengths_range_avg.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_lengths_range_avg is already defined as \e[33mvalue\e\
    [0m \e[35mparen_group_lengths_range_avg\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb14n1qwg.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mparen_group_lengths_range_min\e\
    [0m = paren_group_lengths_range_min\n\e[31m\e"
  stdout: ''
  timestamp: 1659795664
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_count = paren_groups.length\n        val paren_groups_list_size\
    \ = paren_groups_count * 2\n        val paren_groups_list_size_in_bytes = paren_groups_list_size\
    \ * 4\n        val paren_groups_list_size_str = paren_groups_list_size.toString\
    \ + \"B\"\n        val paren_groups_list_size_str_in_bytes = paren_groups_list_size_str.toByte\n\
    \        val paren_groups_list_size_str_in_bits = paren_groups_list_size_str_in_bytes.toInt\n\
    \        val paren_groups_list_size_str_in_bits_str = paren_groups_list_size_str_in_bits.toString\
    \ + \"B\"\n        val paren_groups_list_size_str_in_bits_str_in_bytes = paren_groups_list_size_str_in_bits_str.toByte\n\
    \        val paren_groups_list_size_str_in_bits_str_in_bits = paren_groups_list_size_str_in_bits_str_in_bytes.toInt\n\
    \        val paren_groups_list_size_str_in_bits_str_in_bits_str = paren_groups_list_size_str_in_bits_str_in_bits.toString\
    \ + \"B\"\n        val paren_groups_list_size_str_in_bits_str_in_bits_str_in_bytes\
    \ = paren_groups_list_size_str_in_bits_str_in_bits_str_in_bits.toByte\n      \
    \  val paren_groups_list_size_str_in_bits_str_in_bits_str_in_bits_str = paren_groups_list_size_str_in_bits_str_in_bits_str_in_bits_str.toInt\n\
    \        val paren_groups_list_size_str_in_bits_str_in_bits_str_in_bits_str_in_bits_str\
    \ = paren_groups_list_size_str_in_bits_str_in_bits_str_in_bits_str_in_bits_str.toString\
    \ + \"B\"\n        val paren_groups_list_size_str_in_bits_str_in_bits_str_in_bits_str_in_bits_str_in_bits_str\
    \ = paren_groups_list_size_str_in_bits_str_in_bits_str_in_bits_str_in_bits_str_in_bits_str.toByte\n\
    \        val paren_groups_list_size_str_in_bits_str_in_bits_str_in_bits_str_in_bits_str_in_bits_str_in_bits_str_in_bits_str\
    \ = paren_groups_list_size_str_in_bits_str_in_bits_str_in_bits_str_in_bits_str_in_bits_str_in_bits_str.toInt\n\
    \        val paren_groups_list_size_str_in_bits_str_in_bits_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwa4mtx3d.scala:28:4 ----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwa4mtx3d.scala:22:74\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_list_size_str_in_bits_str_in_bits_str_in_bytes\e[0m = paren_groups_list_size_str_in_bits_str_in_bits_str_in_bits.toByte\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m   Not found: paren_groups_list_size_str_in_bits_str_in_bits_str_in_bits\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpwa4mtx3d.scala:23:77\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_list_size_str_in_bits_str_in_bits_str_in_bits_str\e[0m =\
    \ paren_groups_list_size_str_in_bits_str_in_bits_str_in_bits_str.toInt\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \             ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mparen_groups_list_size_str_in_bits_str_in_bits_str_in_bits_str\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpwa4mtx3d.scala:24:89\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_list_size_str_in_bits_str_in_bits_str_in_bits_str_in_bits_str\e\
    [0m = paren_groups_list_size_str_in_bits_str_in_bits_str_in_bits_str_in_bits_str.toString\
    \ + \e[31m\"B\"\e[0m\n\e[31m\e[31m   |\e[0m                                  \
    \                                                       ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35mparen_groups_list_size_str_in_bits_str_in_bits_str_in_bits_str_in_bits_str\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] "
  stdout: ''
  timestamp: 1659795664
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(|\\\\)\")\n        val paren_groups_flat = paren_groups.flatten\n       \
    \ val paren_groups_flat2 = paren_groups_flat.filterNot(_ == \"\")\n        val\
    \ paren_groups_flat3 = paren_groups_flat2.filterNot(_ == \" \")\n        val paren_groups_flat4\
    \ = paren_groups_flat3.filterNot(_ == \"\")\n        val paren_groups_flat5 =\
    \ paren_groups_flat4.filterNot(_ == \" \")\n        val paren_groups_flat6 = paren_groups_flat5.filterNot(_\
    \ == \"\")\n        val paren_groups_flat7 = paren_groups_flat6.filterNot(_ ==\
    \ \" \")\n        val paren_groups_flat8 = paren_groups_flat7.filterNot(_ == \"\
    \")\n        val paren_groups_flat9 = paren_groups_flat8.filterNot(_ == \" \"\
    )\n        val paren_groups_flat10 = paren_groups_flat9.filterNot(_ == \"\")\n\
    \        val paren_groups_flat11 = paren_groups_flat10.filterNot(_ == \" \")\n\
    \        val paren_groups_flat12 = paren_groups_flat11.filterNot(_ == \"\")\n\
    \        val paren_groups_flat13 = paren_groups_flat12.filterNot(_ == \" \")\n\
    \        val paren_groups_flat14 = paren_groups_flat13.filterNot(_ == \"\")\n\
    \        val paren_groups_flat15 = paren_groups_flat14.filterNot(_ == \" \")\n\
    \        val paren_groups_flat16 = paren_groups_flat15.filterNot(_ == \"\")\n\
    \        val paren_groups_flat17 = paren_groups_flat16.filterNot(_ == \" \")\n\
    \        val paren_groups_flat18 = paren_groups_flat17.filterNot(_ == \"\")\n\
    \        val paren_groups_flat19 = paren_groups_flat18.filterNot(_ == \" \")\n\
    \        val paren_groups_flat20 = paren_groups_flat19.filterNot(_ == \"\")\n\
    \        val paren_groups_flat21 = paren_groups_flat20.filterNot(_ == \" \")\n\
    \        val paren_groups_flat22 = paren_groups_flat21.filterNot(_ == \"\")\n\
    \        val paren_groups_flat23 = paren_groups_flat22.filterNot(_ == \" \")\n\
    \        val paren_groups_flat24 = paren_groups_flat23.filterNot(_ == \"\")\n\
    \        val paren_groups_flat25 = paren_groups_flat24.filterNot(_ == \" \")\n\
    \        val paren_groups_flat26 = paren_groups_flat25.filterNot(\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()())\
    \ ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\"\
    , \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmph9q0d6pp.scala:37:64 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat26\e[0m\
    \ = paren_groups_flat25.filterNot(\n\e[31m\e[31m   |\e[0m                    \
    \                                            ^\e[0m\n\e[31m   |\e[0m         \
    \                              expression expected but \e[31m'}'\e[0m found\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- Error: /tmp/tmph9q0d6pp.scala:13:61 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m\
    \ = paren_groups_flat.filterNot(_ == \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m \
    \                                                            ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types Char and String cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- Error: /tmp/tmph9q0d6pp.scala:14:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat3\e[0m\
    \ = paren_groups_flat2.filterNot(_ == \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmph9q0d6pp.scala:15:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat4\e[0m\
    \ = paren_groups_flat3.filterNot(_ == \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types Char and String cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- Error: /tmp/tmph9q0d6pp.scala:16:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat5\e[0m\
    \ = paren_groups_flat4.filterNot(_ == \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp"
  stdout: ''
  timestamp: 1659795665
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortWith((x,y)\
    \ => x.length < y.length)\n        val paren_groups_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted.map(x => x.replace(\")\", \" ) \"))\n    \
    \    val paren_groups_with_spaces_sorted_with_spaces_trimmed = paren_groups_with_spaces_sorted_with_spaces.map(x\
    \ => x.trim).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed.sortWith((x,y) => x.length\
    \ < y.length)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces.map(x\
    \ => x.trim).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed.sortWith((x,y)\
    \ => x.length < y.length)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted.map(x\
    \ => x.trim).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp0_p15di3.scala:22:264 --------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                        ^\e[0m\n\e[31m   |\e\
    [0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0_p15di3.scala:22:127\
    \ -----------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0_p15di3.scala:23:5\
    \ ---------------------\e[0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer expl"
  stdout: ''
  timestamp: 1659795664
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_open_braces = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"(\"))\n        val paren_groups_with_closed_braces\
    \ = paren_groups_with_open_braces.map(x => x.replace(\"(\", \"\").replace(\")\"\
    , \"\"))\n        paren_groups_with_closed_braces.filter(x => x.isEmpty).map(x\
    \ => x.replace(\"(\", \"\").replace(\")\", \"\"))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy52glu00.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        paren_groups_with_closed_braces.filter(\e\
    [36mx\e[0m => x.isEmpty).map(\e[36mx\e[0m => x.replace(\e[31m\"(\"\e[0m, \e[31m\"\
    \"\e[0m).replace(\e[31m\")\"\e[0m, \e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mArray\e[0m[String]\n\e[31m  \
    \ |\e[0m        Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795665
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpfe4904sc.scala:21:338 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpfe4904sc.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpfe4904sc.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1659795587
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_set = paren_groups.toSet\n        val paren_groups_list_with_duplicates\
    \ = paren_groups.toList.distinct\n        val paren_groups_list_without_duplicates\
    \ = paren_groups_list_with_duplicates.toList\n        val paren_groups_list_without_duplicates_sorted\
    \ = paren_groups_list_without_duplicates.sortBy(x => x)\n        val paren_groups_list_without_duplicates_sorted_with_duplicates\
    \ = paren_groups_list_without_duplicates_sorted.distinct\n        val paren_groups_list_without_duplicates_sorted_with_duplicates_sorted\
    \ = paren_groups_list_without_duplicates_sorted_with_duplicates.sortBy(x => x)\n\
    \        val paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates\
    \ = paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates.distinct\n\
    \        val paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted\
    \ = paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted.sortBy(x\
    \ => x)\n        val paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates\
    \ = paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates.distinct\n\
    \        val paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted\
    \ = paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted.sortBy(x\
    \ => x)\n        val paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates\
    \ = paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates.distinct\n\
    \        val paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted\
    \ = paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted.sortBy(x\
    \ => x)\n        val paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates\
    \ = paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted.distinct\n\
    \        val paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates\
    \ = paren_groups_list_without_duplicate\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnt9ww1z1.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates\e\
    [0m = paren_groups_list_without_duplicate\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpnt9ww1z1.scala:18:97 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates\e\
    [0m = paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates.distinct\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                         ^\e[0m\n\e[31m   |\e[0mRecursive \e\
    [33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpnt9ww1z1.scala:19:104 --------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted\e\
    [0m = paren_groups_list_without_duplicates_sorted_with"
  stdout: ''
  timestamp: 1659795664
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").map(_.trim).toList\n        val open_braces = paren_groups.filter(_.startsWith(\"\
    (\"))\n        val close_braces = paren_groups.filter(_.startsWith(\")\"))\n \
    \       val open_brace_counts = open_braces.map(_.length).distinct\n        val\
    \ close_brace_counts = close_braces.map(_.length).distinct\n        val open_brace_counts_sum\
    \ = open_brace_counts.sum\n        val close_brace_counts_sum = close_brace_counts.sum\n\
    \        val open_brace_counts_diff = open_brace_counts_sum - open_brace_counts.length\n\
    \        val close_brace_counts_diff = close_brace_counts_sum - close_brace_counts.length\n\
    \        val open_brace_counts_diff_percent = open_brace_counts_diff / open_brace_counts_sum\
    \ * 100\n        val close_brace_counts_diff_percent = close_brace_counts_diff\
    \ / close_brace_counts_sum * 100\n        val open_brace_counts_diff_percent_percent\
    \ = open_brace_counts_diff_percent / 100\n        val close_brace_counts_diff_percent_percent\
    \ = close_brace_counts_diff_percent / 100\n        val open_brace_counts_diff_percent_percent_percent\
    \ = open_brace_counts_diff_percent_percent / 100\n        val close_brace_counts_diff_percent_percent_percent\
    \ = close_brace_counts_diff_percent_percent / 100\n        val open_brace_counts_diff_percent_percent_percent_percent\
    \ = open_brace_counts_diff_percent_percent_percent / 100\n        val close_brace_counts_diff_percent_percent_percent_percent\
    \ = close_brace_counts_diff_percent_percent_percent / 100\n        val open_brace_counts_diff_percent_percent_percent_percent\
    \ = open_brace_counts_diff_percent_percent_percent / 100\n        val close_brace_counts_diff_percent_percent_percent_percent\
    \ = close_brace_counts_diff_percent_percent_percent / 100\n        val open_brace_counts_diff_percent_percent_percent_percent\
    \ = open_brace_counts_diff_percent_percent_percent / 100\n        val close_brace_counts_diff_percent_percent_percent_percent\
    \ = close_brace_counts_diff_percent_percent_percent / 100\n        val open_brace_counts_diff_percent_percent_percent_percent\
    \ = open_brace_counts_diff_percent_percent_percent / 100\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpm0g0ayn1.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mopen_brace_counts_diff_percent_percent_percent_percent\e\
    [0m = open_brace_counts_diff_percent_percent_percent / \e[31m100\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopen_brace_counts_diff_percent_percent_percent_percent is\
    \ already defined as \e[33mvalue\e[0m \e[35mopen_brace_counts_diff_percent_percent_percent_percent\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpm0g0ayn1.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mclose_brace_counts_diff_percent_percent_percent_percent\e\
    [0m = close_brace_counts_diff_percent_percent_percent / \e[31m100\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclose_brace_counts_diff_percent_percent_percent_percent is\
    \ already defined as \e[33mvalue\e[0m \e[35mclose_brace_counts_diff_percent_percent_percent_percent\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpm0g0ayn1.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mopen_brace_counts_diff_percent_percent_percent_percent\e\
    [0m = open_brace_counts_diff_percent_percent_percent / \e[31m100\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopen_brace_counts_diff_percent_percent_percent_percent is\
    \ already defined as \e[33mvalue\e[0m \e[35mopen_brace_counts_diff_percent_percent_percent_percent\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the s"
  stdout: ''
  timestamp: 1659795665
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.filterNot(x => x.contains(\"\\\\(\"))\n        val paren_groups_flat3\
    \ = paren_groups_flat2.filterNot(x => x.contains(\"\\\\)\"))\n        val paren_groups_flat4\
    \ = paren_groups_flat3.filterNot(x => x.contains(\"\\\\)\"))\n        val paren_groups_flat5\
    \ = paren_groups_flat4.filterNot(x => x.contains(\"\\\\)\"))\n        val paren_groups_flat6\
    \ = paren_groups_flat5.filterNot(x => x.contains(\"\\\\)\"))\n        val paren_groups_flat7\
    \ = paren_groups_flat6.filterNot(x => x.contains(\"\\\\)\"))\n        val paren_groups_flat8\
    \ = paren_groups_flat7.filterNot(x => x.contains(\"\\\\)\"))\n        val paren_groups_flat9\
    \ = paren_groups_flat8.filterNot(x => x.contains(\"\\\\)\"))\n        val paren_groups_flat10\
    \ = paren_groups_flat9.filterNot(x => x.contains(\"\\\\)\"))\n        val paren_groups_flat11\
    \ = paren_groups_flat10.filterNot(x => x.contains(\"\\\\)\"))\n        val paren_groups_flat12\
    \ = paren_groups_flat11.filterNot(x => x.contains(\"\\\\)\"))\n        val paren_groups_flat13\
    \ = paren_groups_flat12.filterNot(x => x.contains(\"\\\\)\"))\n        val paren_groups_flat14\
    \ = paren_groups_flat13.filterNot(x => x.contains(\"\\\\)\"))\n        val paren_groups_flat15\
    \ = paren_groups_flat14.filterNot(x => x.contains(\"\\\\)\"))\n        val paren_groups_flat16\
    \ = paren_groups_flat15.filterNot(x => x.contains(\"\\\\)\"))\n        val paren_groups_flat17\
    \ = paren_groups_flat16.filterNot(x => x.contains(\"\\\\)\"))\n        val paren_groups_flat18\
    \ = paren_groups_flat17.filterNot(x => x.contains(\"\\\\)\"))\n        val paren_groups_flat19\
    \ = paren_groups_flat18.filterNot(x => x.contains(\"\\\\)\"))\n        val paren_groups_flat20\
    \ = paren_groups_flat19.filterNot(x => x.contains(\"\\\\)\"))\n        val paren_groups_flat21\
    \ = paren_groups_flat20.filterNot(x => x.contains(\"\\\\\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpa394c9jl.scala:32:80 -----------------------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat21\e[0m\
    \ = paren_groups_flat20.filterNot(\e[36mx\e[0m => x.contains(\"\\\\\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                ^\e[0m\n\e[31m   |\e[0m                                     \
    \            unclosed string literal\n\e[31m\e[31m-- Error: /tmp/tmpa394c9jl.scala:34:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m34 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m\
    \                                 end of statement expected but '=' found\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpa394c9jl.scala:13:68 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m\
    \ = paren_groups_flat.filterNot(\e[36mx\e[0m => x.contains(\e[31m\"\\\\(\"\e[0m))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \          ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                  value\
    \ contains is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpa394c9jl.scala:14:69\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_flat3\e[0m = paren_groups_flat2.filterNot(\e[36mx\e[0m => x.contains(\e\
    [31m\"\\\\)\"\e[0m))\n\e[31m\e[31m   |\e[0m                                  \
    \                                 ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                       value contains is not a member of Char\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpa394c9jl.scala:15:69 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat4\e[0m\
    \ = paren_groups_flat3.filterNot(\e[36mx\e[0m => x.contains(\e[31m\"\\\\)\"\e\
    [0m))\n\e[31m\e[31m   |\e[0m                                                 \
    \                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \        value contains is not a member of Char\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /"
  stdout: ''
  timestamp: 1659795654
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").map(_.trim).toList\n        val open_braces = paren_groups.filter(_.startsWith(\"\
    (\"))\n        val closed_braces = paren_groups.filter(_.endsWith(\")\"))\n  \
    \      val unclosed_braces = paren_groups.filter(!_.endsWith(\")\"))\n       \
    \ val open_brace_counts = open_braces.map(x => x.length).sum\n        val closed_brace_counts\
    \ = closed_braces.map(x => x.length).sum\n        val unclosed_brace_counts =\
    \ unclosed_braces.map(x => x.length).sum\n        val unclosed_brace_counts_ratio\
    \ = unclosed_brace_counts / (closed_brace_counts + unclosed_brace_counts)\n  \
    \      val unclosed_brace_counts_ratio_threshold = unclosed_brace_counts_ratio\
    \ * 0.8\n        val open_brace_counts_ratio = open_brace_counts / (closed_brace_counts\
    \ + unclosed_brace_counts)\n        val open_brace_counts_ratio_threshold = open_brace_counts_ratio\
    \ * 0.8\n        val open_brace_counts_ratio_threshold = open_brace_counts_ratio_threshold\
    \ * 0.8\n        val open_brace_counts_ratio_threshold = open_brace_counts_ratio_threshold\
    \ * 0.8\n        val open_brace_counts_ratio_threshold = open_brace_counts_ratio_threshold\
    \ * 0.8\n        val open_brace_counts_ratio_threshold = open_brace_counts_ratio_threshold\
    \ * 0.8\n        val open_brace_counts_ratio_threshold = open_brace_counts_ratio_threshold\
    \ * 0.8\n        val open_brace_counts_ratio_threshold = open_brace_counts_ratio_threshold\
    \ * 0.8\n        val open_brace_counts_ratio_threshold = open_brace_counts_ratio_threshold\
    \ * 0.8\n        val open_brace_counts_ratio_threshold = open_brace_counts_ratio_threshold\
    \ * 0.8\n        val open_brace_counts_ratio_threshold = open_brace_counts_ratio_threshold\
    \ * 0.8\n        val open_brace_counts_ratio_threshold = open_brace_counts_ratio_threshold\
    \ * 0.8\n        val open_brace_counts_ratio_threshold = open_brace_counts_ratio_threshold\
    \ * 0.8\n        val open_brace_counts_ratio_threshold = open_brace_counts_ratio_threshold\
    \ * 0.8\n        val open_brace_counts_ratio_threshold = open_brace_counts_ratio_threshold\
    \ * 0.8\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0n3xxygo.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mopen_brace_counts_ratio_threshold\e\
    [0m = open_brace_counts_ratio_threshold * \e[31m0.8\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopen_brace_counts_ratio_threshold is already defined as \e\
    [33mvalue\e[0m \e[35mopen_brace_counts_ratio_threshold\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0n3xxygo.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mopen_brace_counts_ratio_threshold\e[0m = open_brace_counts_ratio_threshold\
    \ * \e[31m0.8\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopen_brace_counts_ratio_threshold is already defined as \e\
    [33mvalue\e[0m \e[35mopen_brace_counts_ratio_threshold\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0n3xxygo.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mopen_brace_counts_ratio_threshold\e[0m = open_brace_counts_ratio_threshold\
    \ * \e[31m0.8\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopen_brace_counts_ratio_threshold is already defined as \e\
    [33mvalue\e[0m \e[35mopen_brace_counts_ratio_threshold\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0n3xxygo.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mopen_brace_counts_ratio_threshold\e[0m = open_brace_counts_ratio_threshold\
    \ * \e[31m0.8\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659795665
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat_list\
    \ = paren_groups_flat.distinct\n        val paren_groups_flat_list2 = paren_groups_flat_list.toList\n\
    \        val paren_groups_flat_list3 = paren_groups_flat_list2.toList\n      \
    \  val paren_groups_flat_list4 = paren_groups_flat_list3.toList\n        val paren_groups_flat_list5\
    \ = paren_groups_flat_list4.toList\n        val paren_groups_flat_list6 = paren_groups_flat_list5.toList\n\
    \        val paren_groups_flat_list7 = paren_groups_flat_list6.toList\n      \
    \  val paren_groups_flat_list8 = paren_groups_flat_list7.toList\n        val paren_groups_flat_list9\
    \ = paren_groups_flat_list8.toList\n        val paren_groups_flat_list10 = paren_groups_flat_list9.toList\n\
    \        val paren_groups_flat_list11 = paren_groups_flat_list10.toList\n    \
    \    val paren_groups_flat_list12 = paren_groups_flat_list11.toList\n        val\
    \ paren_groups_flat_list13 = paren_groups_flat_list12.toList\n        val paren_groups_flat_list14\
    \ = paren_groups_flat_list13.toList\n        val paren_groups_flat_list15 = paren_groups_flat_list14.toList\n\
    \        val paren_groups_flat_list16 = paren_groups_flat_list15.toList\n    \
    \    val paren_groups_flat_list17 = paren_groups_flat_list16.toList\n        val\
    \ paren_groups_flat_list18 = paren_groups_flat_list17.toList\n        val paren_groups_flat_list19\
    \ = paren_groups_flat_list18.toList\n        val paren_groups_flat_list20 = paren_groups_flat_list19.toList\n\
    \        val paren_groups_flat_list21 = paren_groups_flat_list20.toList\n    \
    \    val paren_groups_flat_list22 = paren_groups_flat_list21.toList\n        val\
    \ paren_groups_flat_list23 = paren_groups_flat_list22.toList\n        val paren_groups_flat_list24\
    \ = paren_groups_flat_list23.toList\n        val paren_groups_flat_list25 = paren_groups_flat_list24.toList\n\
    \        val paren_groups_flat_list26 = paren_groups_flat_list25.toList\n    \
    \    val paren_groups_flat_list27 = paren_groups_flat_list26.toList\n        val\
    \ paren_groups_flat_list28 = paren_groups_flat_list27.to\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpncia28rm.scala:41:5\
    \ ---------------------\e[0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795665
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_close\
    \ = mutable.ListBuffer[String]()\n        paren_string.foreach { char =>\n   \
    \         char match {\n                case '(' -> paren_open += char\n     \
    \           case ')' -> paren_close += char\n                case _ -> paren_groups\
    \ += char\n            }\n        }\n        if (paren_open.isEmpty || paren_close.isEmpty)\
    \ paren_groups.toList\n        else paren_groups.take(paren_open.length).flatMap(paren_open\
    \ => paren_groups.drop(paren_open.length).flatMap(paren_close => paren_open ++\
    \ paren_close)).toList\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplz7jkncm.scala:17:16 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mcase\e[0m \e[31m')'\e[0m -> paren_close\
    \ += char\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m   \
    \             '=>' expected, but 'case' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmplz7jkncm.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m            }\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\e[31m   |\e[0m\
    \            '=>' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmplz7jkncm.scala:11:27 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmplz7jkncm.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_open\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmplz7jkncm.scala:13:26 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_close\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmplz7jkncm.scala:16:39 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mcase\e[0m \e[31m'('\e[0m -> paren_open\
    \ += char\n\e[31m\e[31m   |\e[0m                                       ^^\e[0m\n\
    \e[31m   |\e[0m                                       Not found: +=\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation availabl"
  stdout: ''
  timestamp: 1659795664
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(|\\\\)\")\n        val paren_groups_count = paren_groups.length\n       \
    \ val paren_groups_map = mutable.Map[String, Int]()\n        paren_groups.foreach(group\
    \ => {\n            val group_count = group.split(\"\\\\)\").length\n        \
    \    paren_groups_map += (group -> group_count)\n        })\n        val paren_groups_count_map\
    \ = paren_groups_map.toMap\n        val paren_groups_count_map_keys = paren_groups_count_map.keys\n\
    \        val paren_groups_count_map_values = paren_groups_count_map.values\n \
    \       val paren_groups_count_map_keys_sorted = paren_groups_count_map_keys.sorted\n\
    \        val paren_groups_count_map_values_sorted = paren_groups_count_map_values.sorted\n\
    \        val paren_groups_count_map_keys_sorted_zipped = paren_groups_count_map_keys_sorted.zip(paren_groups_count_map_values_sorted)\n\
    \        val paren_groups_count_map_keys_sorted_zipped_sorted = paren_groups_count_map_keys_sorted_zipped.sortBy(_._1)\n\
    \        val paren_groups_count_map_keys_sorted_zipped_sorted_zipped = paren_groups_count_map_keys_sorted_zipped_sorted.zip(paren_groups_count_map_values_sorted)\n\
    \        val paren_groups_count_map_keys_sorted_zipped_sorted_zipped_sorted =\
    \ paren_groups_count_map_keys_sorted_zipped_sorted_zipped.sortBy(_._1)\n     \
    \   val paren_groups_count_map_keys_sorted_zipped_sorted_zipped_sorted_zipped\
    \ = paren_groups_count_map_keys_sorted_zipped_sorted_zipped_sorted.zip(paren_groups_count_map_values_sorted)\n\
    \        val paren_groups_count_map_keys_sorted_zipped_sorted_zipped_sorted_zipped_sorted\
    \ = paren_groups_count_map_keys_sorted_zipped_sorted_zipped_sorted_zipped.sortBy(_._1)\n\
    \        val paren_groups_count_map_keys_sorted_zipped_sorted_zipped_sorted_zipped_sorted_zipped\
    \ = paren_groups_count_map_keys_sorted_zipped_sorted_zipped_sorted_zipped_sorted.zip(paren_groups_count_map_values_sorted)\n\
    \        val paren_groups_count_map_keys_sorted_zipped_sorted_zipped_sorted_zipped_sorted_zipped_sorted\
    \ = paren_groups_count_map_keys_sorted_zipped_sorted_zipped_sorted_zipped_sorted_zipped.sortBy(_._1)\n\
    \        val paren_groups_count_map_keys_sorted_zipped_sorted_zipped_sorted_zipped_sorted_zipped_sorted_zipped\
    \ = paren_groups_count_map_keys_sorted_zipped_sorted_zipped_sorted_zipped_sorted_zipped_sorted.zip(paren_groups_count_map_values_sorted)\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe20f7jof.scala:13:31 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_map\e[0m =\
    \ mutable.Map[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m    \
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpe20f7jof.scala:33:5 ---------------------\e[0m\e[0m\n\e[31m33\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795665
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.filterNot(_ == \")\")\n        val paren_groups_flat3 =\
    \ paren_groups_flat2.filterNot(_ == \"(\")\n        val paren_groups_flat4 = paren_groups_flat3.filterNot(_\
    \ == \" \")\n        val paren_groups_flat5 = paren_groups_flat4.filterNot(_ ==\
    \ \"\\\\(\")\n        val paren_groups_flat6 = paren_groups_flat5.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat7 = paren_groups_flat6.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat8 = paren_groups_flat7.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat9 = paren_groups_flat8.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat10 = paren_groups_flat9.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat11 = paren_groups_flat10.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat12 = paren_groups_flat11.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat13 = paren_groups_flat12.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat14 = paren_groups_flat13.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat15 = paren_groups_flat14.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat16 = paren_groups_flat15.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat17 = paren_groups_flat16.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat18 = paren_groups_flat17.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat19 = paren_groups_flat18.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat20 = paren_groups_flat19.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat21 = paren_groups_flat20.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat22 = paren_groups_flat21.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat23 = paren_groups_flat22.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat24 = paren_groups_flat23.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat25 = paren_groups_flat24.filter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp9brdvuty.scala:13:61 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m\
    \ = paren_groups_flat.filterNot(_ == \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                             ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types Char and String cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- Error: /tmp/tmp9brdvuty.scala:14:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat3\e[0m\
    \ = paren_groups_flat2.filterNot(_ == \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp9brdvuty.scala:15:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat4\e[0m\
    \ = paren_groups_flat3.filterNot(_ == \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp9brdvuty.scala:16:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat5\e[0m\
    \ = paren_groups_flat4.filterNot(_ == \e[31m\"\\\\(\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                              ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp9brdvuty.scala:17:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat6\e[0m\
    \ = paren_groups_flat5.filterNot(_ == \e[31m\"\\\\)\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                              ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp9brdvuty.scala:18:62 -----------------------------------------\e\
    ["
  stdout: ''
  timestamp: 1659795617
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) ((\
    \ )( ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpfe4904sc.scala:21:338 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpfe4904sc.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpfe4904sc.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1659795587
