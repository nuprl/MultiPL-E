name: HumanEval_155_even_odd_count
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given an integer. return a tuple that has the number of even and odd digits\
  \ respectively.\n    // Example:\n    // even_odd_count(-12) ==> (1, 1)\n    //\
  \ even_odd_count(123) ==> (1, 2)\n    def evenOddCount(num : Long) : Tuple2[Long,\
  \ Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
  \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
  \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
  \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
  \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
completions: ["        var even = 0\n        var odd = 0\n        var numStr = num.toString\n\
    \        var evenStr = \"\"\n        var oddStr = \"\"\n        var evenStrArray\
    \ = new Array[String](1)\n        var oddStrArray = new Array[String](1)\n   \
    \     var evenStrArray2 = new Array[String](1)\n        var oddStrArray2 = new\
    \ Array[String](1)\n        var evenStrArray3 = new Array[String](1)\n       \
    \ var oddStrArray3 = new Array[String](1)\n        var evenStrArray4 = new Array[String](1)\n\
    \        var oddStrArray4 = new Array[String](1)\n        var evenStrArray5 =\
    \ new Array[String](1)\n        var oddStrArray5 = new Array[String](1)\n    \
    \    var evenStrArray6 = new Array[String](1)\n        var oddStrArray6 = new\
    \ Array[String](1)\n        var evenStrArray7 = new Array[String](1)\n       \
    \ var oddStrArray7 = new Array[String](1)\n        var evenStrArray8 = new Array[String](1)\n\
    \        var oddStrArray8 = new Array[String](1)\n        var evenStrArray9 =\
    \ new Array[String](1)\n        var oddStrArray9 = new Array[String](1)\n    \
    \    var evenStrArray10 = new Array[String](1)\n        var oddStrArray10 = new\
    \ Array[String](1)\n        var evenStrArray11 = new Array[String](1)\n      \
    \  var oddStrArray11 = new Array[String](1)\n        var evenStrArray12 = new\
    \ Array[String](1)\n        var oddStrArray12 = new Array[String](1)\n       \
    \ var evenStrArray13 = new Array[String](1)\n        var oddStrArray13 = new Array[String](1)\n\
    \        var evenStrArray14 = new Array[String](1)\n        var oddStrArray14\
    \ = new Array[String](1)\n        var evenStrArray15 = new Array[String](1)\n\
    \        var oddStrArray15 = new Array[String](1)\n        var evenStrArray16\
    \ = new Array[String](1)\n        var oddStrArray16 = new Array[String](1)\n \
    \       var evenStrArray17 = new Array[String](1)\n        var oddStrArray17 =\
    \ new Array[String](1)\n        var evenStrArray18 = new Array[String](1)\n  \
    \      var oddStrArray18 = new Array[String](1)\n        var evenStrArray19 =\
    \ new Array[String](1)\n        var oddStrArray19 = new Array[String](1)\n   \
    \     var evenStrArray20 = new Array[String](1)\n        var oddStrArray20 = new\
    \ Array[String](1)\n        var evenStrArray21 = new Array[String", "        val\
    \ even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(x => x % 2 == 0).length\n\
    \        val odd = num.toString.filter(x => x % 2 != 0).length\n        (even,\
    \ odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n        val\
    \ odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)", "      \
    \  var even = 0\n        var odd = 0\n        var numStr = num.toString\n    \
    \    var evenStr = \"\"\n        var oddStr = \"\"\n        var evenNum = 0\n\
    \        var oddNum = 0\n        var evenNumStr = \"\"\n        var oddNumStr\
    \ = \"\"\n        var evenNumStr = \"\"\n        var oddNumStr = \"\"\n      \
    \  var evenNumStr = \"\"\n        var oddNumStr = \"\"\n        var evenNumStr\
    \ = \"\"\n        var oddNumStr = \"\"\n        var evenNumStr = \"\"\n      \
    \  var oddNumStr = \"\"\n        var evenNumStr = \"\"\n        var oddNumStr\
    \ = \"\"\n        var evenNumStr = \"\"\n        var oddNumStr = \"\"\n      \
    \  var evenNumStr = \"\"\n        var oddNumStr = \"\"\n        var evenNumStr\
    \ = \"\"\n        var oddNumStr = \"\"\n        var evenNumStr = \"\"\n      \
    \  var oddNumStr = \"\"\n        var evenNumStr = \"\"\n        var oddNumStr\
    \ = \"\"\n        var evenNumStr = \"\"\n        var oddNumStr = \"\"\n      \
    \  var evenNumStr = \"\"\n        var oddNumStr = \"\"\n        var evenNumStr\
    \ = \"\"\n        var oddNumStr = \"\"\n        var evenNumStr = \"\"\n      \
    \  var oddNumStr = \"\"\n        var evenNumStr = \"\"\n        var oddNumStr\
    \ = \"\"\n        var evenNumStr = \"\"\n        var oddNumStr = \"\"\n      \
    \  var evenNumStr = \"\"\n        var oddNumStr = \"\"\n        var evenNumStr\
    \ = \"\"\n        var oddNumStr = \"\"\n        var evenNumStr = \"\"\n      \
    \  var oddNumStr = \"\"\n        var evenNumStr = \"\"\n        var oddNumStr\
    \ = \"\"\n        var evenNumStr = \"\"\n        var oddNumStr = \"\"\n      \
    \  var evenNumStr = \"\"\n        var oddNumStr = \"\"\n        var evenNumStr\
    \ = \"\"\n        var oddNumStr = \"\"\n        var evenNumStr = \"\"\n      \
    \  var oddNumStr = \"\"\n        var evenNumStr = \"\"\n        var oddNumStr\
    \ = \"\"\n        var evenNumStr = \"\"\n        var oddNumStr = \"\"\n      \
    \  var evenNumStr = \"\"\n        var oddNumStr = \"\"\n        var evenNumStr\
    \ = \"\"\n        var oddNumStr = \"\"\n        var evenNumStr = \"\"\n      \
    \  var oddNumStr = \"\"\n        var evenNumStr = \"\"\n        var oddNumStr\
    \ = \"\"\n        var evenNumStr = \"\"\n        var oddNumStr = \"\"\n      \
    \  var evenNumStr = \"\"\n        var oddNumStr = \"\"\n        var evenNumStr\
    \ = \"\"\n        var oddNumStr = \"\"\n        var evenNumStr = \"\"\n      \
    \  var oddNumStr = \"\"\n        var evenNumStr = \"\"\n        var oddNumStr\
    \ = \"\"\n        var evenNumStr = \"\"\n        var oddNumStr = \"\"\n      \
    \  var evenNumStr = \"\"\n        var oddNumStr = \"\"\n        var evenNumStr\
    \ = \"\"\n        var oddNumStr = \"\"\n        var evenNumStr = \"\"\n      \
    \  var oddNumStr", "        val even = num.toString.filter(x => x % 2 == 0).length\n\
    \        val odd = num.toString.filter(x => x % 2 != 0).length\n        (even,\
    \ odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n        val\
    \ odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)", "      \
    \  val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val evens = num.toString.filter(_\
    \ % 2 == 0).length\n        val odds = num.toString.filter(_ % 2 != 0).length\n\
    \        (evens, odds)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(x\
    \ => x % 2 == 0).length\n        val odd = num.toString.filter(x => x % 2 != 0).length\n\
    \        (even, odd)", "        var even = 0\n        var odd = 0\n        var\
    \ numStr = \"\" + num\n        var evenStr = \"\"\n        var oddStr = \"\"\n\
    \        var evenStrLen = 0\n        var oddStrLen = 0\n        var evenStrLen2\
    \ = 0\n        var oddStrLen2 = 0\n        var evenStrLen3 = 0\n        var oddStrLen3\
    \ = 0\n        var evenStrLen4 = 0\n        var oddStrLen4 = 0\n        var evenStrLen5\
    \ = 0\n        var oddStrLen5 = 0\n        var evenStrLen6 = 0\n        var oddStrLen6\
    \ = 0\n        var evenStrLen7 = 0\n        var oddStrLen7 = 0\n        var evenStrLen8\
    \ = 0\n        var oddStrLen8 = 0\n        var evenStrLen9 = 0\n        var oddStrLen9\
    \ = 0\n        var evenStrLen10 = 0\n        var oddStrLen10 = 0\n        var\
    \ evenStrLen11 = 0\n        var oddStrLen11 = 0\n        var evenStrLen12 = 0\n\
    \        var oddStrLen12 = 0\n        var evenStrLen13 = 0\n        var oddStrLen13\
    \ = 0\n        var evenStrLen14 = 0\n        var oddStrLen14 = 0\n        var\
    \ evenStrLen15 = 0\n        var oddStrLen15 = 0\n        var evenStrLen16 = 0\n\
    \        var oddStrLen16 = 0\n        var evenStrLen17 = 0\n        var oddStrLen17\
    \ = 0\n        var evenStrLen18 = 0\n        var oddStrLen18 = 0\n        var\
    \ evenStrLen19 = 0\n        var oddStrLen19 = 0\n        var evenStrLen20 = 0\n\
    \        var oddStrLen20 = 0\n        var evenStrLen21 = 0\n        var oddStrLen21\
    \ = 0\n        var evenStrLen22 = 0\n        var oddStrLen22 = 0\n        var\
    \ evenStrLen23 = 0\n        var oddStrLen23 = 0\n        var evenStrLen24 = 0\n\
    \        var oddStrLen24 = 0\n        var evenStrLen25 = 0\n        var oddStrLen25\
    \ = 0\n        var evenStrLen26 = 0\n        var oddStrLen26 = 0\n        var\
    \ evenStrLen27 = 0\n        var oddStrLen27 = 0\n        var evenStrLen28 = 0\n\
    \        var oddStrLen28 = 0\n        var evenStrLen29 = 0\n        var oddStrLen29\
    \ = 0\n        var evenStrLen30 = 0\n        var oddStrLen30 = 0\n        var\
    \ evenStrLen31 = 0\n        var oddStrLen31 = 0\n        var evenStrLen32 = 0\n\
    \        var oddStrLen32 = 0\n        var evenStrLen33 = 0\n        var oddStrLen33\
    \ = 0\n        var evenStrLen34 = 0\n        var oddStrLen34 = 0\n        var\
    \ evenStrLen35 = 0\n        var oddStrLen35 = 0", "        var even = 0\n    \
    \    var odd = 0\n        var digits = num.toString.reverse.grouped(2).map(_.toInt)\n\
    \        digits.foreach(x => if (x % 2 == 0) even += x else odd += x)\n      \
    \  (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(x => x % 2 == 0).length\n        val odd\
    \ = num.toString.filter(x => x % 2 != 0).length\n        (even, odd)"]
stop_tokens:
- "\n    }\n"
