name: HumanEval_120_maximum
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given an array arr of integers and a positive integer k, return a sorted\
  \ list \n    // of length k with the maximum k numbers in arr.\n    // Example 1:\n\
  \    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3, 5]\n    // Example\
  \ 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output: [4, 4]\n    // Example\
  \ 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n    // Output: [2]\n\
  \    // Note:\n    // 1. The length of the array will be in the range of [1, 1000].\n\
  \    // 2. The elements in the array will be in the range of [-1000, 1000].\n  \
  \  // 3. 0 <= k <= len(arr)\n    def maximum(arr : List[Long], k : Long) : List[Long]\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
  \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
  \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
  \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
  \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
  \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
  \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
  \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
  \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
  \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
  \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
  \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n    assert(maximum((List[Long](-1l.toLong,\
  \ 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong, -10l.toLong)), (2l)).equals((List[Long](3l.toLong,\
  \ 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 0l.toLong, 5l.toLong,\
  \ -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n    assert(maximum((List[Long](4l.toLong,\
  \ -4l.toLong)), (2l)).equals((List[Long](-4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong,\
  \ 10l.toLong)), (2l)).equals((List[Long](-10l.toLong, 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
  \    }\n\n}\n"
completions: ["        val result = new mutable.ListBuffer[Long]()\n        val max\
    \ = new mutable.PriorityQueue[Long]()\n        val min = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndex = new mutable.PriorityQueue[Int]()\n        val minIndex\
    \ = new mutable.PriorityQueue[Int]()\n        val maxCount = new mutable.PriorityQueue[Int]()\n\
    \        val minCount = new mutable.PriorityQueue[Int]()\n        val maxCountIndex\
    \ = mutable.PriorityQueue[Int]()\n        val minCountIndex = mutable.PriorityQueue[Int]()\n\
    \        val maxCountIndex = mutable.PriorityQueue[Int]()\n        val minCountIndex\
    \ = mutable.PriorityQueue[Int]()\n        val maxCountIndex = mutable.PriorityQueue[Int]()\n\
    \        val minCountIndex = mutable.PriorityQueue[Int]()\n        val maxCountIndex\
    \ = mutable.PriorityQueue[Int]()\n        val minCountIndex = mutable.PriorityQueue[Int]()\n\
    \        val maxCountIndex = mutable.PriorityQueue[Int]()\n        val minCountIndex\
    \ = mutable.PriorityQueue[Int]()\n        val maxCountIndex = mutable.PriorityQueue[Int]()\n\
    \        val minCountIndex = mutable.PriorityQueue[Int]()\n        val maxCountIndex\
    \ = mutable.PriorityQueue[Int]()\n        val minCountIndex = mutable.PriorityQueue[Int]()\n\
    \        val maxCountIndex = mutable.PriorityQueue[Int]()\n        val minCountIndex\
    \ = mutable.PriorityQueue[Int]()\n        val maxCountIndex = mutable.PriorityQueue[Int]()\n\
    \        val minCountIndex = mutable.PriorityQueue[Int]()\n        val maxCountIndex\
    \ = mutable.PriorityQueue[Int]()\n        val minCountIndex = mutable.PriorityQueue[Int]()\n\
    \        val maxCountIndex = mutable.PriorityQueue[Int]()\n        val minCountIndex\
    \ = mutable.PriorityQueue[Int]()\n        val maxCountIndex = mutable.PriorityQueue[Int]()\n\
    \        val minCountIndex = mutable.PriorityQueue[Int]()\n        val maxCountIndex\
    \ = mutable.PriorityQueue[Int]()\n        val minCountIndex = mutable.PriorityQueue[Int]()\n\
    \        val maxCountIndex = mutable.PriorityQueue[Int]()\n        val minCountIndex\
    \ = mutable.PriorityQueue[Int]()\n        val maxCountIndex = mutable.PriorityQueue[Int]()\n\
    \        val minCountIndex = mutable.PriorityQueue[Int", "        val max = new\
    \ mutable.PriorityQueue[Long]()\n        val maxIndex = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndexMap = new mutable.HashMap[Long, Long]()\n        val maxIndexMap2\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap3 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap4 = new mutable.HashMap[Long, Long]()\n    \
    \    val maxIndexMap5 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap6\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap7 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap8 = new mutable.HashMap[Long, Long]()\n    \
    \    val maxIndexMap9 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap10\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap11 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap12 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap13 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap14\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap15 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap16 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap17 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap18\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap19 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap20 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap21 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap22\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap23 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap24 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap25 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap26\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap27 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap28 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap29 = new mutable.", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var max = 0L\n        var index = 0\n        for (i <- 0 until arr.length)\
    \ {\n            if (max < arr(i)) {\n                max = arr(i)\n         \
    \       index = i\n            }\n        }\n        result.add(max)\n       \
    \ for (i <- 0 until arr.length - k) {\n            if (arr(index) < arr(i)) {\n\
    \                result.add(arr(i))\n                index = i\n            }\n\
    \        }\n        return result.toList", "        val maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxLength = arr.length\n        val maxK = k\n        val maxIndex\
    \ = arr.indexWhere(x => x > 0)\n        val maxValue = arr.take(maxIndex)\n  \
    \      val maxIndexList = arr.indexWhere(x => x > 0)\n        val maxValueList\
    \ = arr.take(maxIndexList)\n        val maxKList = arr.take(maxIndexList.take(maxK))\n\
    \        val maxKListLength = maxKList.length\n        val maxKListLength = maxKListLength\n\
    \        val maxKListLength = maxKListLength\n        val maxKListLength = maxKListLength\n\
    \        val maxKListLength = maxKListLength\n        val maxKListLength = maxKListLength\n\
    \        val maxKListLength = maxKListLength\n        val maxKListLength = maxKListLength\n\
    \        val maxKListLength = maxKListLength\n        val maxKListLength = maxKListLength\n\
    \        val maxKListLength = maxKListLength\n        val maxKListLength = maxKListLength\n\
    \        val maxKListLength = maxKListLength\n        val maxKListLength = maxKListLength\n\
    \        val maxKListLength = maxKListLength\n        val maxKListLength = maxKListLength\n\
    \        val maxKListLength = maxKListLength\n        val maxKListLength = maxKListLength\n\
    \        val maxKListLength = maxKListLength\n        val maxKListLength = maxKListLength\n\
    \        val maxKListLength = maxKListLength\n        val maxKListLength = maxKListLength\n\
    \        val maxKListLength = maxKListLength\n        val maxKListLength = maxKListLength\n\
    \        val maxKListLength = maxKListLength\n        val maxKListLength = maxKListLength\n\
    \        val maxKListLength = maxKListLength\n        val maxKListLength = maxKListLength\n\
    \        val maxKListLength = maxKListLength\n        val maxKListLength = maxKListLength\n\
    \        val maxKListLength = maxKListLength\n        val maxKListLength = maxKListLength\n\
    \        val maxKListLength = maxKListLength\n        val maxKListLength = maxKListLength\n\
    \        val maxKListLength = maxKListLength\n        val maxKListLength = maxKListLength\n\
    \        val maxKListLength = maxKListLength\n        val maxKListLength = maxKListLength\n\
    \        ", "        val result = new mutable.ListBuffer[Long]()\n        var\
    \ max = 0\n        var maxIndex = 0\n        for(i <- 0 until arr.length) {\n\
    \            if(arr(i) > max) {\n                max = arr(i)\n              \
    \  maxIndex = i\n            }\n        }\n        for(i <- 0 until arr.length)\
    \ {\n            if(arr(i) == max) {\n                result.add(arr(maxIndex))\n\
    \            }\n        }\n        return result.toList", "        val result\
    \ = new Array[Long](k)\n        var max = 0\n        var maxIndex = 0\n      \
    \  var i = 0\n        var j = 0\n        var k = 0\n        while (i < arr.length)\
    \ {\n            max = arr(i)\n            maxIndex = i\n            while (j\
    \ < arr.length) {\n                if (arr(j) > max) {\n                    max\
    \ = arr(j)\n                    maxIndex = j\n                }\n            \
    \    j += 1\n            }\n            result(k) = max\n            k += 1\n\
    \            i += 1\n        }\n        return result", "        val result =\
    \ new mutable.ListBuffer[Long]()\n        var max = 0\n        var i = 0\n   \
    \     while (i < arr.length) {\n            if (arr(i) > max) {\n            \
    \    max = arr(i)\n            }\n            i += 1\n        }\n        var j\
    \ = 0\n        while (j < arr.length) {\n            if (arr(j) < max) {\n   \
    \             result.add(arr(j))\n            }\n            j += 1\n        }\n\
    \        result.take(k).toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var max = 0L\n        var maxIndex = 0\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) > max) {\n                max = arr(i)\n         \
    \       maxIndex = i\n            }\n        }\n        result.add(max)\n    \
    \    for (i <- 0 until arr.length - 1) {\n            if (arr(i) > max && arr(i)\
    \ != max) {\n                result.add(arr(maxIndex))\n                result.add(arr(i))\n\
    \                maxIndex = i\n            }\n        }\n        result.toList",
  "        val max = new Array[Long](k)\n        var maxIndex = 0\n        var maxValue\
    \ = 0L\n        var i = 0\n        while (i < arr.length) {\n            if (arr(i)\
    \ > maxValue) {\n                maxValue = arr(i)\n                maxIndex =\
    \ i\n            }\n            i += 1\n        }\n        max.update(maxIndex,\
    \ maxValue)\n        max.toList", "        val arr = arr.sortBy(-_)\n        val\
    \ max = new mutable.PriorityQueue[Long]()\n        val maxIndex = new mutable.PriorityQueue[Int]()\n\
    \        val maxIndexSet = new mutable.HashSet[Int]()\n        val maxIndexSetSet\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSetSet = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSetSetSet = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSet\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val\
    \ maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val\
    \ maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val\
    \ maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val\
    \ maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val\
    \ maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet = new mut",
  "        val max = new mutable.PriorityQueue[Long]()\n        val maxIndex = new\
    \ mutable.PriorityQueue[Int]()\n        val maxIndexMap = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap2 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap3 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap4\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap5 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap6 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap7 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap8\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap9 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap10 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap11 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap12\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap13 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap14 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap15 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap16\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap17 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap18 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap19 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap20\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap21 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap22 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap23 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap24\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap25 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap26 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap27 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap28\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap29 = new mutable.",
  "        val maxList = mutable.ListBuffer[Long]()\n        val maxValue = arr.max\n\
    \        val maxIndex = arr.indexWhere(x => x == maxValue)\n        val maxListSize\
    \ = maxIndex - k + 1\n        val maxListArray = arr.take(maxListSize)\n     \
    \   maxListArray foreach { x => maxList += x }\n        maxList.toList", "   \
    \     val max = new Array[Long](k)\n        var maxIndex = 0\n        var maxValue\
    \ = arr(0)\n        for(i <- 0 until k) {\n            if(arr(i) > maxValue) {\n\
    \                maxValue = arr(i)\n                maxIndex = i\n           \
    \ }\n        }\n        for(i <- 0 until k) {\n            if(arr(i) == maxValue)\
    \ {\n                max(i) = arr(i)\n            }\n        }\n        max.toList",
  "        val result = new mutable.ListBuffer[Long]()\n        var max = 0L\n   \
    \     var i = 0\n        while (i < arr.length) {\n            if (arr(i) > max)\
    \ {\n                max = arr(i)\n            }\n            i += 1\n       \
    \ }\n        var j = 0\n        while (j < k) {\n            if (max < arr(j))\
    \ {\n                max += arr(j)\n            }\n            j += 1\n      \
    \  }\n        result.clear()\n        result.add(max)\n        return result.toList",
  "        val arr = arr.sortWith(_ < _)\n        val max = new Array[Long](k)\n \
    \       var maxIndex = 0\n        var maxValue = arr(0)\n        for(i <- 0 until\
    \ arr.length) {\n            if(arr(i) > maxValue) {\n                maxValue\
    \ = arr(i)\n                maxIndex = i\n            }\n        }\n        for(i\
    \ <- 0 until k) {\n            if(!arr.contains(maxIndex + i)) {\n           \
    \     max(i) = arr(maxIndex + i)\n            }\n        }\n        return max",
  "        val maxNums = mutable.ArrayBuffer.empty[Long]\n        val maxNumsSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndex = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxNumsIndexSize = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndexCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndexCountSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxNumsIndexCountMax = mutable.ArrayBuffer.empty[Long]\n        val\
    \ maxNumsIndexCountMaxSize = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndexCountMaxIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndexCountMaxIndexSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndexCountMaxIndexCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndexCountMaxIndexCountSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndexCountMaxIndexCountMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndexCountMaxIndexCountMaxSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndexCountMaxIndexCountMaxIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndexCountMaxIndexCountMaxIndexSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndexCountMaxIndexCountMaxIndexCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndexCountMaxIndexCountMaxIndexCountSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndexCountMaxIndexCountMaxIndexCountMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndexCountMaxIndexCountMaxIndexCountMaxSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndexCountMaxIndexCountMaxIndexCountMaxIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndexCountMaxIndexCountMaxIndexCountMaxIndexSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndexCountMaxIndexCountMaxIndexCountMaxIndexCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndexCountMaxIndexCountMaxIndexCountMaxIndexCountSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val ", "        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        var maxNum = arr(0)\n        for (i <- 0 until arr.length) {\n      \
    \      if (arr(i) > maxNum) {\n                maxNum = arr(i)\n            }\n\
    \        }\n        maxList += maxNum\n        for (i <- 0 until arr.length -\
    \ k) {\n            if (arr(i) > maxNum) {\n                maxNum = arr(i)\n\
    \            }\n        }\n        maxList += maxNum\n        return maxList.toList",
  "        val maxNum = arr.sortWith(_ > _)\n        val maxNums = maxNum.take(k)\n\
    \        val maxNumsSorted = maxNums.sortWith(_ > _)\n        val maxNumsSortedList\
    \ = maxNumsSorted.toList\n        return maxNumsSortedList", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        var max = 0\n        var maxIndex\
    \ = 0\n        var i = 0\n        while (i < arr.length) {\n            if (arr(i)\
    \ > max) {\n                max = arr(i)\n                maxIndex = i\n     \
    \       }\n            i += 1\n        }\n        var j = 0\n        while (j\
    \ < arr.length) {\n            if (arr(j) < max) {\n                result.add(arr(j))\n\
    \            }\n            j += 1\n        }\n        if (result.size < k) {\n\
    \            while (j < arr.length) {\n                result.add(arr(j))\n  \
    \              j += 1\n            }\n        }\n        result.toList", "   \
    \     val result = new mutable.ListBuffer[Long]()\n        val max = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndex = new mutable.PriorityQueue[Int]()\n        val maxIndexMap\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap2 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap3 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap4 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap5\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap6 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap7 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap8 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap9\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap10 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap11 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap12 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap13\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap14 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap15 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap16 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap17\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap18 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap19 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap20 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap21\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap22 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap23 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap24 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap25\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap26 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap27 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap28 = new mutable.HashMap[Int, "]
stop_tokens:
- "\n    }\n"
