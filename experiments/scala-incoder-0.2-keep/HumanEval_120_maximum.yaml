name: HumanEval_120_maximum
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given an array arr of integers and a positive integer k, return a sorted\
  \ list \n    // of length k with the maximum k numbers in arr.\n    // Example 1:\n\
  \    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3, 5]\n    // Example\
  \ 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output: [4, 4]\n    // Example\
  \ 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n    // Output: [2]\n\
  \    // Note:\n    // 1. The length of the array will be in the range of [1, 1000].\n\
  \    // 2. The elements in the array will be in the range of [-1000, 1000].\n  \
  \  // 3. 0 <= k <= len(arr)\n    def maximum(arr : List[Long], k : Long) : List[Long]\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
  \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
  \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
  \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
  \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
  \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
  \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
  \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
  \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
  \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
  \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
  \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n    assert(maximum((List[Long](-1l.toLong,\
  \ 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong, -10l.toLong)), (2l)).equals((List[Long](3l.toLong,\
  \ 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 0l.toLong, 5l.toLong,\
  \ -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n    assert(maximum((List[Long](4l.toLong,\
  \ -4l.toLong)), (2l)).equals((List[Long](-4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong,\
  \ 10l.toLong)), (2l)).equals((List[Long](-10l.toLong, 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
  \    }\n\n}\n"
completions: ["        val result = new mutable.ListBuffer[Long]()\n        val max\
    \ = new mutable.PriorityQueue[Long]()\n        val min = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndex = new mutable.PriorityQueue[Int]()\n        val minIndex\
    \ = new mutable.PriorityQueue[Int]()\n        val maxCount = new mutable.PriorityQueue[Int]()\n\
    \        val minCount = new mutable.PriorityQueue[Int]()\n        val maxCountIndex\
    \ = mutable.PriorityQueue[Int]()\n        val minCountIndex = mutable.PriorityQueue[Int]()\n\
    \        val maxCountIndex = mutable.PriorityQueue[Int]()\n        val minCountIndex\
    \ = mutable.PriorityQueue[Int]()\n        val maxCountIndex = mutable.PriorityQueue[Int]()\n\
    \        val minCountIndex = mutable.PriorityQueue[Int]()\n        val maxCountIndex\
    \ = mutable.PriorityQueue[Int]()\n        val minCountIndex = mutable.PriorityQueue[Int]()\n\
    \        val maxCountIndex = mutable.PriorityQueue[Int]()\n        val minCountIndex\
    \ = mutable.PriorityQueue[Int]()\n        val maxCountIndex = mutable.PriorityQueue[Int]()\n\
    \        val minCountIndex = mutable.PriorityQueue[Int]()\n        val maxCountIndex\
    \ = mutable.PriorityQueue[Int]()\n        val minCountIndex = mutable.PriorityQueue[Int]()\n\
    \        val maxCountIndex = mutable.PriorityQueue[Int]()\n        val minCountIndex\
    \ = mutable.PriorityQueue[Int]()\n        val maxCountIndex = mutable.PriorityQueue[Int]()\n\
    \        val minCountIndex = mutable.PriorityQueue[Int]()\n        val maxCountIndex\
    \ = mutable.PriorityQueue[Int]()\n        val minCountIndex = mutable.PriorityQueue[Int]()\n\
    \        val maxCountIndex = mutable.PriorityQueue[Int]()\n        val minCountIndex\
    \ = mutable.PriorityQueue[Int]()\n        val maxCountIndex = mutable.PriorityQueue[Int]()\n\
    \        val minCountIndex = mutable.PriorityQueue[Int]()\n        val maxCountIndex\
    \ = mutable.PriorityQueue[Int]()\n        val minCountIndex = mutable.PriorityQueue[Int]()\n\
    \        val maxCountIndex = mutable.PriorityQueue[Int]()\n        val minCountIndex\
    \ = mutable.PriorityQueue[Int]()\n        val maxCountIndex = mutable.PriorityQueue[Int]()\n\
    \        val minCountIndex = mutable.PriorityQueue[Int", "        val max = new\
    \ mutable.PriorityQueue[Long]()\n        val maxIndex = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndexMap = new mutable.HashMap[Long, Long]()\n        val maxIndexMap2\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap3 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap4 = new mutable.HashMap[Long, Long]()\n    \
    \    val maxIndexMap5 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap6\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap7 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap8 = new mutable.HashMap[Long, Long]()\n    \
    \    val maxIndexMap9 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap10\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap11 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap12 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap13 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap14\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap15 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap16 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap17 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap18\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap19 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap20 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap21 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap22\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap23 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap24 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap25 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap26\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap27 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap28 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap29 = new mutable.", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var max = 0L\n        var index = 0\n        for (i <- 0 until arr.length)\
    \ {\n            if (max < arr(i)) {\n                max = arr(i)\n         \
    \       index = i\n            }\n        }\n        result.add(max)\n       \
    \ for (i <- 0 until arr.length - k) {\n            if (arr(index) < arr(i)) {\n\
    \                result.add(arr(i))\n                index = i\n            }\n\
    \        }\n        return result.toList", "        val maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxLength = arr.length\n        val maxK = k\n        val maxIndex\
    \ = arr.indexWhere(x => x > 0)\n        val maxValue = arr.take(maxIndex)\n  \
    \      val maxIndexList = arr.indexWhere(x => x > 0)\n        val maxValueList\
    \ = arr.take(maxIndexList)\n        val maxKList = arr.take(maxIndexList.take(maxK))\n\
    \        val maxKListLength = maxKList.length\n        val maxKListLength = maxKListLength\n\
    \        val maxKListLength = maxKListLength\n        val maxKListLength = maxKListLength\n\
    \        val maxKListLength = maxKListLength\n        val maxKListLength = maxKListLength\n\
    \        val maxKListLength = maxKListLength\n        val maxKListLength = maxKListLength\n\
    \        val maxKListLength = maxKListLength\n        val maxKListLength = maxKListLength\n\
    \        val maxKListLength = maxKListLength\n        val maxKListLength = maxKListLength\n\
    \        val maxKListLength = maxKListLength\n        val maxKListLength = maxKListLength\n\
    \        val maxKListLength = maxKListLength\n        val maxKListLength = maxKListLength\n\
    \        val maxKListLength = maxKListLength\n        val maxKListLength = maxKListLength\n\
    \        val maxKListLength = maxKListLength\n        val maxKListLength = maxKListLength\n\
    \        val maxKListLength = maxKListLength\n        val maxKListLength = maxKListLength\n\
    \        val maxKListLength = maxKListLength\n        val maxKListLength = maxKListLength\n\
    \        val maxKListLength = maxKListLength\n        val maxKListLength = maxKListLength\n\
    \        val maxKListLength = maxKListLength\n        val maxKListLength = maxKListLength\n\
    \        val maxKListLength = maxKListLength\n        val maxKListLength = maxKListLength\n\
    \        val maxKListLength = maxKListLength\n        val maxKListLength = maxKListLength\n\
    \        val maxKListLength = maxKListLength\n        val maxKListLength = maxKListLength\n\
    \        val maxKListLength = maxKListLength\n        val maxKListLength = maxKListLength\n\
    \        val maxKListLength = maxKListLength\n        val maxKListLength = maxKListLength\n\
    \        ", "        val result = new mutable.ListBuffer[Long]()\n        var\
    \ max = 0\n        var maxIndex = 0\n        for(i <- 0 until arr.length) {\n\
    \            if(arr(i) > max) {\n                max = arr(i)\n              \
    \  maxIndex = i\n            }\n        }\n        for(i <- 0 until arr.length)\
    \ {\n            if(arr(i) == max) {\n                result.add(arr(maxIndex))\n\
    \            }\n        }\n        return result.toList", "        val result\
    \ = new Array[Long](k)\n        var max = 0\n        var maxIndex = 0\n      \
    \  var i = 0\n        var j = 0\n        var k = 0\n        while (i < arr.length)\
    \ {\n            max = arr(i)\n            maxIndex = i\n            while (j\
    \ < arr.length) {\n                if (arr(j) > max) {\n                    max\
    \ = arr(j)\n                    maxIndex = j\n                }\n            \
    \    j += 1\n            }\n            result(k) = max\n            k += 1\n\
    \            i += 1\n        }\n        return result", "        val result =\
    \ new mutable.ListBuffer[Long]()\n        var max = 0\n        var i = 0\n   \
    \     while (i < arr.length) {\n            if (arr(i) > max) {\n            \
    \    max = arr(i)\n            }\n            i += 1\n        }\n        var j\
    \ = 0\n        while (j < arr.length) {\n            if (arr(j) < max) {\n   \
    \             result.add(arr(j))\n            }\n            j += 1\n        }\n\
    \        result.take(k).toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var max = 0L\n        var maxIndex = 0\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) > max) {\n                max = arr(i)\n         \
    \       maxIndex = i\n            }\n        }\n        result.add(max)\n    \
    \    for (i <- 0 until arr.length - 1) {\n            if (arr(i) > max && arr(i)\
    \ != max) {\n                result.add(arr(maxIndex))\n                result.add(arr(i))\n\
    \                maxIndex = i\n            }\n        }\n        result.toList",
  "        val max = new Array[Long](k)\n        var maxIndex = 0\n        var maxValue\
    \ = 0L\n        var i = 0\n        while (i < arr.length) {\n            if (arr(i)\
    \ > maxValue) {\n                maxValue = arr(i)\n                maxIndex =\
    \ i\n            }\n            i += 1\n        }\n        max.update(maxIndex,\
    \ maxValue)\n        max.toList", "        val arr = arr.sortBy(-_)\n        val\
    \ max = new mutable.PriorityQueue[Long]()\n        val maxIndex = new mutable.PriorityQueue[Int]()\n\
    \        val maxIndexSet = new mutable.HashSet[Int]()\n        val maxIndexSetSet\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSetSet = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSetSetSet = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSet\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val\
    \ maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val\
    \ maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val\
    \ maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val\
    \ maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val\
    \ maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet = new mut",
  "        val max = new mutable.PriorityQueue[Long]()\n        val maxIndex = new\
    \ mutable.PriorityQueue[Int]()\n        val maxIndexMap = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap2 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap3 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap4\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap5 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap6 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap7 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap8\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap9 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap10 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap11 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap12\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap13 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap14 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap15 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap16\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap17 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap18 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap19 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap20\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap21 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap22 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap23 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap24\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap25 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap26 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap27 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap28\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap29 = new mutable.",
  "        val maxList = mutable.ListBuffer[Long]()\n        val maxValue = arr.max\n\
    \        val maxIndex = arr.indexWhere(x => x == maxValue)\n        val maxListSize\
    \ = maxIndex - k + 1\n        val maxListArray = arr.take(maxListSize)\n     \
    \   maxListArray foreach { x => maxList += x }\n        maxList.toList", "   \
    \     val max = new Array[Long](k)\n        var maxIndex = 0\n        var maxValue\
    \ = arr(0)\n        for(i <- 0 until k) {\n            if(arr(i) > maxValue) {\n\
    \                maxValue = arr(i)\n                maxIndex = i\n           \
    \ }\n        }\n        for(i <- 0 until k) {\n            if(arr(i) == maxValue)\
    \ {\n                max(i) = arr(i)\n            }\n        }\n        max.toList",
  "        val result = new mutable.ListBuffer[Long]()\n        var max = 0L\n   \
    \     var i = 0\n        while (i < arr.length) {\n            if (arr(i) > max)\
    \ {\n                max = arr(i)\n            }\n            i += 1\n       \
    \ }\n        var j = 0\n        while (j < k) {\n            if (max < arr(j))\
    \ {\n                max += arr(j)\n            }\n            j += 1\n      \
    \  }\n        result.clear()\n        result.add(max)\n        return result.toList",
  "        val arr = arr.sortWith(_ < _)\n        val max = new Array[Long](k)\n \
    \       var maxIndex = 0\n        var maxValue = arr(0)\n        for(i <- 0 until\
    \ arr.length) {\n            if(arr(i) > maxValue) {\n                maxValue\
    \ = arr(i)\n                maxIndex = i\n            }\n        }\n        for(i\
    \ <- 0 until k) {\n            if(!arr.contains(maxIndex + i)) {\n           \
    \     max(i) = arr(maxIndex + i)\n            }\n        }\n        return max",
  "        val maxNums = mutable.ArrayBuffer.empty[Long]\n        val maxNumsSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndex = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxNumsIndexSize = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndexCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndexCountSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxNumsIndexCountMax = mutable.ArrayBuffer.empty[Long]\n        val\
    \ maxNumsIndexCountMaxSize = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndexCountMaxIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndexCountMaxIndexSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndexCountMaxIndexCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndexCountMaxIndexCountSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndexCountMaxIndexCountMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndexCountMaxIndexCountMaxSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndexCountMaxIndexCountMaxIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndexCountMaxIndexCountMaxIndexSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndexCountMaxIndexCountMaxIndexCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndexCountMaxIndexCountMaxIndexCountSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndexCountMaxIndexCountMaxIndexCountMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndexCountMaxIndexCountMaxIndexCountMaxSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndexCountMaxIndexCountMaxIndexCountMaxIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndexCountMaxIndexCountMaxIndexCountMaxIndexSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndexCountMaxIndexCountMaxIndexCountMaxIndexCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndexCountMaxIndexCountMaxIndexCountMaxIndexCountSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val ", "        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        var maxNum = arr(0)\n        for (i <- 0 until arr.length) {\n      \
    \      if (arr(i) > maxNum) {\n                maxNum = arr(i)\n            }\n\
    \        }\n        maxList += maxNum\n        for (i <- 0 until arr.length -\
    \ k) {\n            if (arr(i) > maxNum) {\n                maxNum = arr(i)\n\
    \            }\n        }\n        maxList += maxNum\n        return maxList.toList",
  "        val maxNum = arr.sortWith(_ > _)\n        val maxNums = maxNum.take(k)\n\
    \        val maxNumsSorted = maxNums.sortWith(_ > _)\n        val maxNumsSortedList\
    \ = maxNumsSorted.toList\n        return maxNumsSortedList", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        var max = 0\n        var maxIndex\
    \ = 0\n        var i = 0\n        while (i < arr.length) {\n            if (arr(i)\
    \ > max) {\n                max = arr(i)\n                maxIndex = i\n     \
    \       }\n            i += 1\n        }\n        var j = 0\n        while (j\
    \ < arr.length) {\n            if (arr(j) < max) {\n                result.add(arr(j))\n\
    \            }\n            j += 1\n        }\n        if (result.size < k) {\n\
    \            while (j < arr.length) {\n                result.add(arr(j))\n  \
    \              j += 1\n            }\n        }\n        result.toList", "   \
    \     val result = new mutable.ListBuffer[Long]()\n        val max = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndex = new mutable.PriorityQueue[Int]()\n        val maxIndexMap\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap2 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap3 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap4 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap5\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap6 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap7 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap8 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap9\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap10 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap11 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap12 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap13\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap14 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap15 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap16 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap17\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap18 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap19 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap20 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap21\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap22 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap23 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap24 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap25\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap26 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap27 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap28 = new mutable.HashMap[Int, ", "        val max = new Array[Long](k)\n\
    \        val maxIndex = new Array[Int](k)\n        val maxIndexMap = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap2 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap3 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap4\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap5 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap6 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap7 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap8\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap9 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap10 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap11 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap12\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap13 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap14 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap15 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap16\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap17 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap18 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap19 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap20\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap21 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap22 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap23 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap24\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap25 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap26 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap27 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap28\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap29 = new mutable.HashMap[Long,\
    \ Int]", "        val result = new mutable.ListBuffer[Long]()\n        val max\
    \ = new mutable.PriorityQueue[Long]()\n        val min = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndex = new mutable.PriorityQueue[Int]()\n        val minIndex\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexMap = new mutable.HashMap[Int,\
    \ Int]()\n        val minIndexMap = new mutable.HashMap[Int, Int]()\n        val\
    \ maxIndexMap2 = new mutable.HashMap[Int, Int]()\n        val minIndexMap2 = new\
    \ mutable.HashMap[Int, Int]()\n        val maxIndexMap3 = new mutable.HashMap[Int,\
    \ Int]()\n        val minIndexMap3 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap4 = new mutable.HashMap[Int, Int]()\n        val minIndexMap4\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap5 = new mutable.HashMap[Int,\
    \ Int]()\n        val minIndexMap5 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap6 = new mutable.HashMap[Int, Int]()\n        val minIndexMap6\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap7 = new mutable.HashMap[Int,\
    \ Int]()\n        val minIndexMap7 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap8 = new mutable.HashMap[Int, Int]()\n        val minIndexMap8\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap9 = new mutable.HashMap[Int,\
    \ Int]()\n        val minIndexMap9 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap10 = new mutable.HashMap[Int, Int]()\n        val minIndexMap10\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap11 = new mutable.HashMap[Int,\
    \ Int]()\n        val minIndexMap11 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap12 = new mutable.HashMap[Int, Int]()\n        val minIndexMap12\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap13 = new mutable.HashMap[Int,\
    \ Int]()\n        val minIndexMap13 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap", "        val result = new Array[Long](k)\n        val max\
    \ = new Array[Long](k)\n        val maxIndex = new Array[Int](k)\n        val\
    \ maxIndexMap = new mutable.HashMap[Long, Int]()\n        val maxIndexMap2 = new\
    \ mutable.HashMap[Long, Int]()\n        val maxIndexMap3 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap4 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap5 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap6\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap7 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap8 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap9 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap10\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap11 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap12 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap13 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap14\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap15 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap16 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap17 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap18\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap19 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap20 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap21 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap22\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap23 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap24 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap25 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap26\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap27 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap28 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap", "        val maxNum = arr.max\n        val maxNumIndex =\
    \ arr.indexWhere(x => x == maxNum)\n        val maxNums = arr.take(maxNumIndex).toList\n\
    \        val maxNumsIndex = arr.indexWhere(x => x == maxNum)\n        val maxNumsIndex\
    \ = arr.indexWhere(x => x == maxNum)\n        val maxNumsIndex = arr.indexWhere(x\
    \ => x == maxNum)\n        val maxNumsIndex = arr.indexWhere(x => x == maxNum)\n\
    \        val maxNumsIndex = arr.indexWhere(x => x == maxNum)\n        val maxNumsIndex\
    \ = arr.indexWhere(x => x == maxNum)\n        val maxNumsIndex = arr.indexWhere(x\
    \ => x == maxNum)\n        val maxNumsIndex = arr.indexWhere(x => x == maxNum)\n\
    \        val maxNumsIndex = arr.indexWhere(x => x == maxNum)\n        val maxNumsIndex\
    \ = arr.indexWhere(x => x == maxNum)\n        val maxNumsIndex = arr.indexWhere(x\
    \ => x == maxNum)\n        val maxNumsIndex = arr.indexWhere(x => x == maxNum)\n\
    \        val maxNumsIndex = arr.indexWhere(x => x == maxNum)\n        val maxNumsIndex\
    \ = arr.indexWhere(x => x == maxNum)\n        val maxNumsIndex = arr.indexWhere(x\
    \ => x == maxNum)\n        val maxNumsIndex = arr.indexWhere(x => x == maxNum)\n\
    \        val maxNumsIndex = arr.indexWhere(x => x == maxNum)\n        val maxNumsIndex\
    \ = arr.indexWhere(x => x == maxNum)\n        val maxNumsIndex = arr.indexWhere(x\
    \ => x == maxNum)\n        val maxNumsIndex = arr.indexWhere(x => x == maxNum)\n\
    \        val maxNumsIndex = arr.indexWhere(x => x == maxNum)\n        val maxNumsIndex\
    \ = arr.indexWhere(x => x == maxNum)\n        val maxNumsIndex = arr.indexWhere(x\
    \ => x == maxNum)\n        val maxNumsIndex = arr.indexWhere(x => x == maxNum)\n\
    \        val maxNumsIndex = arr.indexWhere(x => x == maxNum)\n        val maxNumsIndex\
    \ = arr.indexWhere(x => x == maxNum)\n        val maxNumsIndex = arr.indexWhere(x\
    \ => x == maxNum)\n        val maxNumsIndex = arr.indexWhere(x => x == maxNum",
  "        val result = new mutable.ListBuffer[Long]()\n        val maxNum = arr.max\n\
    \        val maxIndex = arr.indexWhere(x => x == maxNum)\n        val maxNums\
    \ = arr.take(maxIndex).toList\n        val maxNumsIndex = arr.indexWhere(x =>\
    \ x == maxNums)\n        val maxNumsIndex = maxNumsIndex + 1\n        val maxNumsIndex2\
    \ = maxNumsIndex + k\n        val maxNumsIndex3 = maxNumsIndex2 + k\n        val\
    \ maxNumsIndex4 = maxNumsIndex3 + k\n        val maxNumsIndex5 = maxNumsIndex4\
    \ + k\n        val maxNumsIndex6 = maxNumsIndex5 + k\n        val maxNumsIndex7\
    \ = maxNumsIndex6 + k\n        val maxNumsIndex8 = maxNumsIndex7 + k\n       \
    \ val maxNumsIndex9 = maxNumsIndex8 + k\n        val maxNumsIndex10 = maxNumsIndex9\
    \ + k\n        val maxNumsIndex11 = maxNumsIndex10 + k\n        val maxNumsIndex12\
    \ = maxNumsIndex11 + k\n        val maxNumsIndex13 = maxNumsIndex12 + k\n    \
    \    val maxNumsIndex14 = maxNumsIndex13 + k\n        val maxNumsIndex15 = maxNumsIndex14\
    \ + k\n        val maxNumsIndex16 = maxNumsIndex15 + k\n        val maxNumsIndex17\
    \ = maxNumsIndex16 + k\n        val maxNumsIndex18 = maxNumsIndex17 + k\n    \
    \    val maxNumsIndex19 = maxNumsIndex18 + k\n        val maxNumsIndex20 = maxNumsIndex19\
    \ + k\n        val maxNumsIndex21 = maxNumsIndex20 + k\n        val maxNumsIndex22\
    \ = maxNumsIndex21 + k\n        val maxNumsIndex23 = maxNumsIndex22 + k\n    \
    \    val maxNumsIndex24 = maxNumsIndex23 + k\n        val maxNumsIndex25 = maxNumsIndex24\
    \ + k\n        val maxNumsIndex26 = maxNumsIndex25 + k\n        val maxNumsIndex27\
    \ = maxNumsIndex26 + k\n        val maxNumsIndex28 = maxNumsIndex27 + k\n    \
    \    val maxNumsIndex29 = maxNumsIndex28 + k\n        ", "        val maxList\
    \ = mutable.ArrayBuffer.empty[Long]\n        var maxNum = arr(0)\n        var\
    \ maxIndex = 0\n        var i = 0\n        while (i < arr.length) {\n        \
    \    if (arr(i) > maxNum) {\n                maxNum = arr(i)\n               \
    \ maxIndex = i\n            }\n            i += 1\n        }\n        val maxList\
    \ = maxList.updated(maxIndex, maxNum)\n        val newList = maxList.take(k).sorted\n\
    \        newList", "        val maxList = mutable.ArrayBuffer.empty[Long]\n  \
    \      var maxNum : Long = -1\n        var maxIndex : Int = 0\n        for (i\
    \ <- 0 until arr.length) {\n            if (arr(i) > maxNum) {\n             \
    \   maxNum = arr(i)\n                maxIndex = i\n            }\n        }\n\
    \        maxList += maxNum\n        if (maxIndex < k) {\n            maxList +=\
    \ arr(maxIndex)\n        }\n        maxList.sortWith(_ < _)\n        maxList.toList",
  "        val max = new Array[Long](k)\n        var maxIndex = 0\n        var maxValue\
    \ = arr(0)\n        var i = 0\n        while (i < arr.length) {\n            if\
    \ (arr(i) > maxValue) {\n                maxValue = arr(i)\n                maxIndex\
    \ = i\n            }\n            i += 1\n        }\n        val result = new\
    \ Array[Long](k)\n        var j = 0\n        while (j < k) {\n            result(j)\
    \ = arr(maxIndex)\n            j += 1\n        }\n        result", "        val\
    \ arr = arr.sortBy(-_)\n        val max = arr.take(k).toList\n        val rest\
    \ = arr.drop(k)\n        rest match {\n            case Nil => max\n         \
    \   case _ => maximum(max, rest.max)\n        }", "        val maxNums = mutable.ArrayBuffer.empty[Long]\n\
    \        var maxNumsIndex = 0\n        var maxNumsValue = 0L\n        var maxNumsIndex2\
    \ = 0\n        var maxNumsValue2 = 0L\n        for(i <- 0 until arr.length) {\n\
    \            if(arr(i) > maxNumsValue) {\n                maxNumsValue = arr(i)\n\
    \                maxNumsIndex = i\n            }\n            if(arr(i) > maxNumsValue2)\
    \ {\n                maxNumsValue2 = arr(i)\n                maxNumsIndex2 = i\n\
    \            }\n        }\n        if(maxNumsIndex == maxNumsIndex2) {\n     \
    \       val newMaxNums = mutable.ArrayBuffer.empty[Long]\n            newMaxNums\
    \ += maxNumsValue\n            newMaxNums += maxNumsValue2\n            return\
    \ newMaxNums\n        }\n        if(maxNumsIndex > maxNumsIndex2) {\n        \
    \    val newMaxNums = mutable.ArrayBuffer.empty[Long]\n            newMaxNums\
    \ += maxNumsValue\n            newMaxNums += maxNumsValue2\n            val newMaxNumsIndex\
    \ = maxNumsIndex\n            newMaxNums += arr(maxNumsIndex)\n            return\
    \ newMaxNums\n        }\n        val newMaxNums = mutable.ArrayBuffer.empty[Long]\n\
    \        newMaxNums += maxNumsValue\n        newMaxNums += maxNumsValue2\n   \
    \     newMaxNums += arr(maxNumsIndex2)\n        return newMaxNums", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        val maxArray = arr.sortWith(_\
    \ > _)\n        val maxLength = maxArray.length\n        val maxK = maxLength\
    \ - k\n        val maxArray2 = maxArray.take(maxK)\n        result.+=(maxArray2)\n\
    \        result", "        val result = new Array[Long](k)\n        var max =\
    \ 0L\n        var maxIndex = 0\n        var i = 0\n        while (i < arr.length)\
    \ {\n            if (arr(i) > max) {\n                max = arr(i)\n         \
    \       maxIndex = i\n            }\n            i += 1\n        }\n        var\
    \ j = 0\n        while (j < k) {\n            if (maxIndex < arr.length) {\n \
    \               result(j) = arr(maxIndex)\n                maxIndex += 1\n   \
    \         }\n            j += 1\n        }\n        result", "        val max\
    \ = new Array[Long](k)\n        val maxIndex = new Array[Int](k)\n        val\
    \ maxIndexMap = new mutable.HashMap[Long, Int]()\n        val maxIndexMap2 = new\
    \ mutable.HashMap[Long, Int]()\n        var index = 0\n        var maxIndexCount\
    \ = 0\n        var maxIndexCount2 = 0\n        var maxIndexCount3 = 0\n      \
    \  var maxIndexCount4 = 0\n        var maxIndexCount5 = 0\n        var maxIndexCount6\
    \ = 0\n        var maxIndexCount7 = 0\n        var maxIndexCount8 = 0\n      \
    \  var maxIndexCount9 = 0\n        var maxIndexCount10 = 0\n        var maxIndexCount11\
    \ = 0\n        var maxIndexCount12 = 0\n        var maxIndexCount13 = 0\n    \
    \    var maxIndexCount14 = 0\n        var maxIndexCount15 = 0\n        var maxIndexCount16\
    \ = 0\n        var maxIndexCount17 = 0\n        var maxIndexCount18 = 0\n    \
    \    var maxIndexCount19 = 0\n        var maxIndexCount20 = 0\n        var maxIndexCount21\
    \ = 0\n        var maxIndexCount22 = 0\n        var maxIndexCount23 = 0\n    \
    \    var maxIndexCount24 = 0\n        var maxIndexCount25 = 0\n        var maxIndexCount26\
    \ = 0\n        var maxIndexCount27 = 0\n        var maxIndexCount28 = 0\n    \
    \    var maxIndexCount29 = 0\n        var maxIndexCount30 = 0\n        var maxIndexCount31\
    \ = 0\n        var maxIndexCount32 = 0\n        var maxIndexCount33 = 0\n    \
    \    var maxIndexCount34 = 0\n        var maxIndexCount35 = 0\n        var maxIndexCount36\
    \ = 0\n        var maxIndexCount37 = 0\n        var maxIndexCount38 = 0\n    \
    \    var maxIndexCount39 = 0\n        var maxIndexCount40 = 0\n        var maxIndexCount41\
    \ = 0\n        var maxIndexCount42 = 0\n        var maxIndexCount43 = 0\n    \
    \    var maxIndexCount44 = 0\n        var maxIndexCount45 = 0\n        var maxIndexCount46\
    \ = 0\n        var maxIndexCount47 = 0\n        var maxIndexCount48 = 0\n    \
    \    var maxIndexCount49 = 0\n        var maxIndexCount50 = 0\n        var maxIndexCount51\
    \ = 0\n        var maxIndexCount52 = 0\n        var maxIndexCount53 = 0\n    \
    \    var maxIndexCount54 = 0\n        var maxIndexCount55 = 0\n        var maxIndexCount56\
    \ = 0\n        var maxIndexCount57 = 0\n        var maxIndexCount58 = 0\n    \
    \    var maxIndexCount59 = 0\n        var maxIndexCount60 = 0\n        var maxIndexCount61\
    \ = 0\n        var maxIndexCount62 = 0\n        var maxIndexCount63 = 0\n    \
    \    var maxIndexCount64 = 0\n        var maxIndexCount65 = 0\n", "        val\
    \ maxList = mutable.ArrayBuffer.empty[Long]\n        var maxLength = 0\n     \
    \   var maxIndex = 0\n        for (i <- 0 until arr.length) {\n            if\
    \ (arr(i) > arr(maxIndex)) {\n                maxLength += 1\n               \
    \ maxIndex += 1\n                maxList += arr(i)\n            }\n        }\n\
    \        if (maxLength > k) {\n            val newList = maxList.take(k - maxLength)\n\
    \            val newList2 = maxList.drop(k - maxLength)\n            val newList3\
    \ = newList.zip(newList2).map(_._1)\n            val newList4 = newList.zip(newList2).map(_._2)\n\
    \            val newList5 = newList.zip(newList3).map(_._1)\n            val newList6\
    \ = newList.zip(newList3).map(_._2)\n            val newList7 = newList.zip(newList4).map(_._1)\n\
    \            val newList8 = newList.zip(newList4).map(_._2)\n            val newList9\
    \ = newList.zip(newList5).map(_._1)\n            val newList10 = newList.zip(newList5).map(_._2)\n\
    \            val newList11 = newList.zip(newList6).map(_._1)\n            val\
    \ newList12 = newList.zip(newList6).map(_._2)\n            val newList13 = newList.zip(newList7).map(_._1)\n\
    \            val newList14 = newList.zip(newList7).map(_._2)\n            val\
    \ newList15 = newList.zip(newList8).map(_._1)\n            val newList16 = newList.zip(newList8).map(_._2)\n\
    \            val newList17 = newList.zip(newList9).map(_._1)\n            val\
    \ newList18 = newList.zip(newList9).map(_._2)\n            val newList19 = newList.zip(newList10).map(_._1)\n\
    \            val newList20 = newList.zip(newList10).map(_._2)\n            val\
    \ newList21 = newList.zip(newList11).map(_._1)\n            val newList22 = newList.zip(newList11).map(_._2)\n\
    \            val newList23 = newList.zip(newList12).map(_._1)\n            val\
    \ newList24 = newList.zip(newList12).map(_._2)\n            val newList25 = newList.zip(newList13).map(_._1)\n\
    \            val newList26 = newList.zip(newList13).map(_._2)\n            val\
    \ newList27 = newList.zip(newList14", "        val max = new Array[Long](k)\n\
    \        val maxIndex = new Array[Int](k)\n        val maxIndexMap = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap2 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap3 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap4\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap5 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap6 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap7 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap8\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap9 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap10 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap11 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap12\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap13 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap14 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap15 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap16\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap17 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap18 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap19 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap20\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap21 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap22 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap23 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap24\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap25 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap26 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap27 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap28\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap29 = new mutable.HashMap[Long,\
    \ Int]", "        val max = new mutable.PriorityQueue[Long]()\n        val maxIndex\
    \ = new mutable.PriorityQueue[Long]()\n        val maxIndexMap = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap2 = new mutable.HashMap[Long, Long]()\n    \
    \    val maxIndexMap3 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap4\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap5 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap6 = new mutable.HashMap[Long, Long]()\n    \
    \    val maxIndexMap7 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap8\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap9 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap10 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap11 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap12\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap13 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap14 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap15 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap16\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap17 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap18 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap19 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap20\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap21 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap22 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap23 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap24\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap25 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap26 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap27 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap28\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap29 = new mutable.",
  "        val result = new mutable.ListBuffer[Long]()\n        var max = 0\n    \
    \    var maxIndex = 0\n        var i = 0\n        while (i < arr.length) {\n \
    \           if (arr(i) > max) {\n                max = arr(i)\n              \
    \  maxIndex = i\n            }\n            i += 1\n        }\n        val maxIndex\
    \ = arr.length - 1\n        while (maxIndex >= 0) {\n            if (arr(maxIndex)\
    \ > max) {\n                max = arr(maxIndex)\n                maxIndex = maxIndex\
    \ - 1\n            }\n            maxIndex -= 1\n        }\n        result.clear()\n\
    \        result.add(max)\n        result.addAll(arr.take(maxIndex + 1))\n    \
    \    result", "        val maxNums = arr.take(k).maxBy(_.abs)\n        val maxNumsIndex\
    \ = arr.lastIndexWhere(_ == maxNums)\n        val maxNumsIndexList = maxNumsIndex.until(maxNumsIndex.drop(k))\n\
    \        val maxNumsIndexListReversed = maxNumsIndexList.reverse\n        val\
    \ maxNumsIndexListReversedList = maxNumsIndexList.reverse.take(k)\n        val\
    \ maxNumsIndexListReversedListReversed = maxNumsIndexListReversed.reverse.take(k)\n\
    \        val maxNumsIndexListReversedListReversedList = maxNumsIndexListReversedList.reverse.take(k)\n\
    \        val maxNumsIndexListReversedListReversedListReversed = maxNumsIndexListReversedListReversed.reverse.take(k)\n\
    \        val maxNumsIndexListReversedListReversedListReversedList = maxNumsIndexListReversedListReversedList.reverse.take(k)\n\
    \        val maxNumsIndexListReversedListReversedListReversedListReversed = maxNumsIndexListReversedListReversedListReversed.reverse.take(k)\n\
    \        val maxNumsIndexListReversedListReversedListReversedListReversedList\
    \ = maxNumsIndexListReversedListReversedListReversedList.reverse.take(k)\n   \
    \     val maxNumsIndexListReversedListReversedListReversedListReversedListReversed\
    \ = maxNumsIndexListReversedListReversedListReversedListReversed.reverse.take(k)\n\
    \        val maxNumsIndexListReversedListReversedListReversedListReversedListReversedList\
    \ = maxNumsIndexListReversedListReversedListReversedListReversedList.reverse.take(k)\n\
    \        val maxNumsIndexListReversedListReversedListReversedListReversedListReversedListReversed\
    \ = maxNumsIndexListReversedListReversedListReversedListReversedListReversed.reverse.take(k)\n\
    \        val maxNumsIndexListReversedListReversedListReversedListReversedListReversedListReversedList\
    \ = maxNumsIndexListReversedListReversedListReversedListReversedListReversedList.reverse.take(k)\n\
    \        val maxNumsIndexListReversedListReversedListReversedListReversedListReversedListReversed\
    \ = maxNumsIndexListReversedListReversedListReversedListReversedListReverse",
  "        val arr = arr.sortBy(-_)\n        val maxList = arr.take(k)\n        val\
    \ maxList = maxList.sortBy(-_)\n        maxList", "        val arr = arr.sortWith(_\
    \ < _)\n        val max = new mutable.PriorityQueue[Long]()\n        val maxIndex\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexMap = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap2 = new mutable.HashMap[Int, Long]()\n      \
    \  val maxIndexMap3 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap4\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap5 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap6 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap7 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap8\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap9 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap10 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap11 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap12\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap13 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap14 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap15 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap16\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap17 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap18 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap19 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap20\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap21 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap22 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap23 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap24\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap25 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap26 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap27 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap28\
    \ = new mutable.HashMap[Int, Int]", "        val arr = arr.sortBy(-_)\n      \
    \  val max = new mutable.ListBuffer[Long]()\n        var i = 0\n        while\
    \ (i < arr.length) {\n            if (arr.length <= k) {\n                max\
    \ += arr(i)\n                i += 1\n            } else {\n                val\
    \ maxIndex = i\n                val maxValue = arr(i)\n                val maxIndex2\
    \ = i\n                val maxValue2 = arr(i)\n                val maxIndex3 =\
    \ i\n                val maxValue3 = arr(i)\n                val maxIndex4 = i\n\
    \                val maxValue4 = arr(i)\n                val maxIndex5 = i\n \
    \               val maxValue5 = arr(i)\n                val maxIndex6 = i\n  \
    \              val maxValue6 = arr(i)\n                val maxIndex7 = i\n   \
    \             val maxValue7 = arr(i)\n                val maxIndex8 = i\n    \
    \            val maxValue8 = arr(i)\n                val maxIndex9 = i\n     \
    \           val maxValue9 = arr(i)\n                val maxIndex10 = i\n     \
    \           val maxValue10 = arr(i)\n                val maxIndex11 = i\n    \
    \            val maxValue11 = arr(i)\n                val maxIndex12 = i\n   \
    \             val maxValue12 = arr(i)\n                val maxIndex13 = i\n  \
    \              val maxValue13 = arr(i)\n                val maxIndex14 = i\n \
    \               val maxValue14 = arr(i)\n                val maxIndex15 = i\n\
    \                val maxValue15 = arr(i)\n                val maxIndex16 = i\n\
    \                val maxValue16 = arr(i)\n                val maxIndex17 = i\n\
    \                val maxValue17 = arr(i)\n                val maxIndex18 = i\n\
    \                val maxValue18 = arr(i)\n                val maxIndex19 = i\n\
    \                val maxValue19 = arr(i)\n                val maxIndex20 = i\n\
    \                val maxValue20 = arr(i)\n                val maxIndex21 = i\n\
    \                val maxValue21 = arr(i)\n                val maxIndex22 = i\n\
    \                val maxValue22 = arr(i)\n                val maxIndex23 = i\n\
    \                val maxValue23 = arr(i)\n                val maxIndex24 = i\n\
    \                val maxValue24 = arr(i)\n                val maxIndex25 = i\n\
    \                val maxValue25 = arr(i)\n                val maxIndex26 = i\n\
    \                val maxValue26 = arr(i)\n                val maxIndex27 = i\n\
    \                val maxValue27 = arr(i)\n                val maxIndex28 = i\n\
    \                val maxValue28 = arr(i)\n                val maxIndex29 = i\n\
    \                val maxValue29", "        val maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxLength = arr.length\n        val maxIndex = arr.indexOfMax\n \
    \       val maxValue = arr(maxIndex)\n        val maxIndexList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxIndexLength = arr.length - 1\n        val maxIndexValue = arr(maxIndexLength)\n\
    \        val maxIndexIndex = 0\n        val maxIndexValueIndex = 0\n        val\
    \ maxIndexValueIndexList = mutable.ArrayBuffer.empty[Long]\n        val maxIndexValueIndexListLength\
    \ = arr.length - 1\n        val maxIndexValueIndexListValue = arr(maxIndexValueIndexListLength)\n\
    \        val maxIndexValueIndexListIndex = 0\n        val maxIndexValueIndexListValueIndex\
    \ = 0\n        val maxIndexValueIndexListValueIndexList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxIndexValueIndexListValueIndexListLength = arr.length - 1\n   \
    \     val maxIndexValueIndexListValueIndexListValue = arr(maxIndexValueIndexListValueIndexListLength)\n\
    \        val maxIndexValueIndexListValueIndexListIndex = 0\n        val maxIndexValueIndexListValueIndexListValueIndex\
    \ = 0\n        val maxIndexValueIndexListValueIndexListValueIndexList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxIndexValueIndexListValueIndexListValueIndexListLength = arr.length\
    \ - 1\n        val maxIndexValueIndexListValueIndexListValueIndexListValue = arr(maxIndexValueIndexListValueIndexListValueIndexListLength)\n\
    \        val maxIndexValueIndexListValueIndexListValueIndexListIndex = 0\n   \
    \     val maxIndexValueIndexListValueIndexListValueIndexListValueIndex = 0\n \
    \       val maxIndexValueIndexListValueIndexListValueIndexListValueIndexList =\
    \ mutable.ArrayBuffer.empty[Long]\n        val maxIndexValueIndexListValueIndexListValueIndexListValueIndexListLength\
    \ = arr.length - 1\n        val maxIndexValueIndexListValueIndexListValueIndexListValueIndexListValue\
    \ = arr(maxIndexValueIndexListValueIndexListValueIndexListValueIndexListValueIndexListLength)\n\
    \        val maxIndexValueIndexListValueIndexListValueIndexListValueIndexListIndex\
    \ = 0\n        val maxIndexValueIndexListValueIndexListValueIndexListValueIndexListValueIndex\
    \ = 0\n        val maxIndexValueIndexListValueIndexListValueIndexListValueIndexListValueIndexList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxIndexValueIndexListValueIndexListValueIndexListValueIndexListValueIndex",
  "        val arr = arr.sortBy(-_)\n        val max = new Array[Long](k)\n      \
    \  val maxIndex = new Array[Int](k)\n        var i = 0\n        var j = 0\n  \
    \      var maxIndexIndex = 0\n        var maxIndexValue = 0\n        var maxValue\
    \ = 0\n        var maxIndexValueIndex = 0\n        var maxIndexValueValue = 0\n\
    \        var maxIndexValueValueIndex = 0\n        var maxIndexValueValueValue\
    \ = 0\n        var maxIndexValueValueValueIndex = 0\n        var maxIndexValueValueValueValue\
    \ = 0\n        var maxIndexValueValueValueIndex = 0\n        var maxIndexValueValueValueValue\
    \ = 0\n        var maxIndexValueValueValueIndex = 0\n        var maxIndexValueValueValueValue\
    \ = 0\n        var maxIndexValueValueValueIndex = 0\n        var maxIndexValueValueValueValue\
    \ = 0\n        var maxIndexValueValueValueIndex = 0\n        var maxIndexValueValueValueValue\
    \ = 0\n        var maxIndexValueValueValueIndex = 0\n        var maxIndexValueValueValueValue\
    \ = 0\n        var maxIndexValueValueValueIndex = 0\n        var maxIndexValueValueValueValue\
    \ = 0\n        var maxIndexValueValueValueIndex = 0\n        var maxIndexValueValueValueValue\
    \ = 0\n        var maxIndexValueValueValueIndex = 0\n        var maxIndexValueValueValueValue\
    \ = 0\n        var maxIndexValueValueValueIndex = 0\n        var maxIndexValueValueValueValue\
    \ = 0\n        var maxIndexValueValueValueIndex = 0\n        var maxIndexValueValueValueValue\
    \ = 0\n        var maxIndexValueValueValueIndex = 0\n        var maxIndexValueValueValueValue\
    \ = 0\n        var maxIndexValueValueValueIndex = 0\n        var maxIndexValueValueValueValue\
    \ = 0\n        var maxIndexValueValueValueIndex = 0\n        var maxIndexValueValueValueValue\
    \ = 0\n        var maxIndexValueValueValueIndex = 0\n        var maxIndexValueValueValueValue\
    \ = 0\n        var maxIndexValueValueValueIndex = 0\n        var maxIndexValueValueValueValue\
    \ = 0\n        var maxIndexValueValueValueIndex = 0\n        var maxIndexValueValueValueValue\
    \ = 0\n        var maxIndexValueValueValueIndex = 0\n        var maxIndexValueValueValueValue\
    \ = 0\n        var maxIndexValueValueValueIndex = 0\n        var maxIndexValueValueValueValue\
    \ = 0\n        var maxIndexValueValueValueIndex = 0\n        var maxIndexValueValueValueValue\
    \ = 0\n        var maxIndexValueValueValueIndex = 0\n        var maxIndexValueValueValueValue\
    \ = 0\n        var maxIndexValueValueValueIndex = 0\n        var maxIndexValueValueValueValue\
    \ = 0\n        var maxIndexValueValueValueIndex = 0\n        var maxIndexValueValueValueValue\
    \ = 0\n        var maxIndexValueValueValueIndex = 0\n        var maxIndexValue",
  "        val max = new mutable.PriorityQueue[Long]()\n        val maxArray = new\
    \ mutable.PriorityQueue[Long]()\n        val maxArray2 = new mutable.PriorityQueue[Long]()\n\
    \        val maxArray3 = new mutable.PriorityQueue[Long]()\n        val maxArray4\
    \ = new mutable.PriorityQueue[Long]()\n        val maxArray5 = new mutable.PriorityQueue[Long]()\n\
    \        val maxArray6 = new mutable.PriorityQueue[Long]()\n        val maxArray7\
    \ = new mutable.PriorityQueue[Long]()\n        val maxArray8 = new mutable.PriorityQueue[Long]()\n\
    \        val maxArray9 = new mutable.PriorityQueue[Long]()\n        val maxArray10\
    \ = new mutable.PriorityQueue[Long]()\n        val maxArray11 = new mutable.PriorityQueue[Long]()\n\
    \        val maxArray12 = new mutable.PriorityQueue[Long]()\n        val maxArray13\
    \ = new mutable.PriorityQueue[Long]()\n        val maxArray14 = new mutable.PriorityQueue[Long]()\n\
    \        val maxArray15 = new mutable.PriorityQueue[Long]()\n        val maxArray16\
    \ = new mutable.PriorityQueue[Long]()\n        val maxArray17 = new mutable.PriorityQueue[Long]()\n\
    \        val maxArray18 = new mutable.PriorityQueue[Long]()\n        val maxArray19\
    \ = new mutable.PriorityQueue[Long]()\n        val maxArray20 = new mutable.PriorityQueue[Long]()\n\
    \        val maxArray21 = new mutable.PriorityQueue[Long]()\n        val maxArray22\
    \ = new mutable.PriorityQueue[Long]()\n        val maxArray23 = new mutable.PriorityQueue[Long]()\n\
    \        val maxArray24 = new mutable.PriorityQueue[Long]()\n        val maxArray25\
    \ = new mutable.PriorityQueue[Long]()\n        val maxArray26 = new mutable.PriorityQueue[Long]()\n\
    \        val maxArray27 = new mutable.PriorityQueue[Long]()\n        val maxArray28\
    \ = new mutable.PriorityQueue[Long]()\n        val maxArray29 = new mutable.PriorityQueue[Long]()\n\
    \        val maxArray30 = new mutable.PriorityQueue[Long]()\n        val maxArray31\
    \ = new mutable.PriorityQueue[Long]()\n        val maxArray32 = new mutable.PriorityQueue[Long]()\n\
    \        val maxArray33 = new mutable.PriorityQueue[Long]()\n        val max",
  "        val result = new mutable.ListBuffer[Long]()\n        val maxNum = arr.max\n\
    \        val maxIndex = arr.indexWhere(x => x == maxNum)\n        val maxNums\
    \ = arr.take(maxIndex - k + 1)\n        result.addAll(maxNums)\n        result",
  "        val maxList = mutable.ArrayBuffer.empty[Long]\n        val maxLength =\
    \ arr.length\n        val maxK = k\n        val maxValue = arr(0)\n        val\
    \ maxIndex = 0\n        for(i <- 0 until maxLength) {\n            if(arr(i) >\
    \ maxValue) {\n                maxValue = arr(i)\n                maxIndex = i\n\
    \            }\n        }\n        for(i <- 0 until maxK) {\n            maxList\
    \ += maxValue\n        }\n        maxList.take(maxK)", "        val result = new\
    \ Array[Long](k)\n        var max = 0L\n        var index = 0\n        for(i <-\
    \ 0 until arr.length) {\n            if(arr(i) > max) {\n                max =\
    \ arr(i)\n                index = i\n            }\n        }\n        result(index)\
    \ = max\n        return result", "        val arr = arr.sortBy(-_)\n        val\
    \ maxList = arr.take(k)\n        val maxList2 = arr.drop(k)\n        val maxList3\
    \ = arr.takeRight(k)\n        val maxList4 = arr.dropRight(k)\n        val maxList5\
    \ = arr.take(k)\n        val maxList6 = arr.drop(k)\n        val maxList7 = arr.takeRight(k)\n\
    \        val maxList8 = arr.dropRight(k)\n        val maxList9 = arr.take(k)\n\
    \        val maxList10 = arr.drop(k)\n        val maxList11 = arr.takeRight(k)\n\
    \        val maxList12 = arr.dropRight(k)\n        val maxList13 = arr.take(k)\n\
    \        val maxList14 = arr.drop(k)\n        val maxList15 = arr.takeRight(k)\n\
    \        val maxList16 = arr.dropRight(k)\n        val maxList17 = arr.take(k)\n\
    \        val maxList18 = arr.drop(k)\n        val maxList19 = arr.takeRight(k)\n\
    \        val maxList20 = arr.dropRight(k)\n        val maxList21 = arr.take(k)\n\
    \        val maxList22 = arr.drop(k)\n        val maxList23 = arr.takeRight(k)\n\
    \        val maxList24 = arr.dropRight(k)\n        val maxList25 = arr.take(k)\n\
    \        val maxList26 = arr.drop(k)\n        val maxList27 = arr.takeRight(k)\n\
    \        val maxList28 = arr.dropRight(k)\n        val maxList29 = arr.take(k)\n\
    \        val maxList30 = arr.drop(k)\n        val maxList31 = arr.takeRight(k)\n\
    \        val maxList32 = arr.dropRight(k)\n        val maxList33 = arr.take(k)\n\
    \        val maxList34 = arr.drop(k)\n        val maxList35 = arr.takeRight(k)\n\
    \        val maxList36 = arr.dropRight(k)\n        val maxList37 = arr.take(k)\n\
    \        val maxList38 = arr.drop(k)\n        val maxList39 = arr.takeRight(k)\n\
    \        val maxList40 = arr.dropRight(k)\n        val maxList41 = arr.take(k)\n\
    \        val maxList42 = arr.drop(k)\n        val maxList43 = arr.takeRight(k)\n\
    \        val maxList44 = arr.dropRight(k)\n        val maxList45 = arr.take(",
  "        val result = new mutable.ListBuffer[Long]()\n        val max = new mutable.PriorityQueue[Long]()\n\
    \        val min = new mutable.PriorityQueue[Long]()\n        for(i <- 0 until\
    \ arr.length){\n            max.enqueue(arr(i))\n            min.enqueue(arr(i))\n\
    \        }\n        while(max.size < k){\n            val maxElement = max.dequeue()\n\
    \            val minElement = min.dequeue()\n            if(maxElement > minElement){\n\
    \                result.enqueue(maxElement)\n                max.enqueue(minElement)\n\
    \            }\n        }\n        result.take(k).toList", "        val maxList\
    \ = mutable.ArrayBuffer.empty[Long]\n        var maxNum = Long.MinValue\n    \
    \    var i = 0\n        while (i < arr.length) {\n            if (arr(i) > maxNum)\
    \ {\n                maxNum = arr(i)\n            }\n            i += 1\n    \
    \    }\n        var j = 0\n        while (j < arr.length) {\n            if (arr(j)\
    \ < maxNum) {\n                maxNum = arr(j)\n            }\n            j +=\
    \ 1\n        }\n        if (maxNum < k) {\n            while (j < arr.length)\
    \ {\n                if (arr(j) < maxNum) {\n                    maxNum = arr(j)\n\
    \                }\n                j += 1\n            }\n        }\n       \
    \ val maxList = maxList.take(k).toList\n        return maxList", "        val\
    \ maxList = mutable.ListBuffer.empty[Long]\n        val maxValue = arr.max\n \
    \       val maxIndex = arr.indexWhere(x => x == maxValue)\n        val maxLength\
    \ = arr.length\n        val maxK = k\n        val maxKIndex = maxIndex - k\n \
    \       val maxKLength = maxLength - k\n        val maxKValue = arr(maxKIndex)\n\
    \        val maxKIndexList = arr.take(maxKLength)\n        val maxKIndexListLength\
    \ = maxKIndexList.length\n        val maxKIndexListLength = maxKIndexListLength\
    \ - 1\n        val maxKIndexListLength = maxKIndexListLength - 1\n        val\
    \ maxKIndexListLength = maxKIndexListLength - 1\n        val maxKIndexListLength\
    \ = maxKIndexListLength - 1\n        val maxKIndexListLength = maxKIndexListLength\
    \ - 1\n        val maxKIndexListLength = maxKIndexListLength - 1\n        val\
    \ maxKIndexListLength = maxKIndexListLength - 1\n        val maxKIndexListLength\
    \ = maxKIndexListLength - 1\n        val maxKIndexListLength = maxKIndexListLength\
    \ - 1\n        val maxKIndexListLength = maxKIndexListLength - 1\n        val\
    \ maxKIndexListLength = maxKIndexListLength - 1\n        val maxKIndexListLength\
    \ = maxKIndexListLength - 1\n        val maxKIndexListLength = maxKIndexListLength\
    \ - 1\n        val maxKIndexListLength = maxKIndexListLength - 1\n        val\
    \ maxKIndexListLength = maxKIndexListLength - 1\n        val maxKIndexListLength\
    \ = maxKIndexListLength - 1\n        val maxKIndexListLength = maxKIndexListLength\
    \ - 1\n        val maxKIndexListLength = maxKIndexListLength - 1\n        val\
    \ maxKIndexListLength = maxKIndexListLength - 1\n        val maxKIndexListLength\
    \ = maxKIndexListLength - 1\n        val maxKIndexListLength = maxKIndexListLength\
    \ - 1\n        val maxKIndexListLength = maxKIndexListLength - 1\n        val\
    \ maxKIndexListLength = maxKIndexListLength - 1\n        val maxKIndexListLength\
    \ = maxKIndexListLength - 1\n        val maxKIndexListLength = maxKIndexListLength\
    \ - 1\n        val maxKIndexListLength = maxKIndexListLength - 1\n        val\
    \ maxKIndexListLength = maxKIndexListLength - 1\n        val maxKIndexListLength\
    \ = maxKIndexListLength - 1\n        val maxKIndexListLength = maxKIndexListLength\
    \ - 1\n", "        val max = new Array[Long](k)\n        val maxIndex = new Array[Int](k)\n\
    \        val maxIndexMap = new mutable.HashMap[Long, Int]()\n        val maxIndexMap2\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap3 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap4 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap5 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap6\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap7 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap8 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap9 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap10\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap11 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap12 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap13 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap14\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap15 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap16 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap17 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap18\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap19 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap20 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap21 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap22\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap23 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap24 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap25 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap26\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap27 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap28 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap29 = new mutable.HashMap[Long, Int]", "        val result =\
    \ new mutable.ListBuffer[Long]()\n        var max = 0\n        var maxIndex =\
    \ 0\n        var i = 0\n        while (i < arr.length) {\n            if (arr(i)\
    \ > max) {\n                max = arr(i)\n                maxIndex = i\n     \
    \       }\n            i += 1\n        }\n        val maxLength = arr.length -\
    \ maxIndex\n        val maxArray = arr.take(maxLength)\n        result.addAll(maxArray)\n\
    \        val newArray = arr.drop(maxIndex)\n        result.addAll(newArray)\n\
    \        result.sortWith(_ < _)\n        result.take(k)", "        val result\
    \ = new Array[Long](k)\n        var max = 0L\n        var maxIndex = 0\n     \
    \   for(i <- 0 until arr.length) {\n            if(arr(i) > max) {\n         \
    \       max = arr(i)\n                maxIndex = i\n            }\n        }\n\
    \        for(i <- 0 until k) {\n            result(i) = arr(maxIndex)\n      \
    \      maxIndex += 1\n        }\n        result", "        val result = new Array[Long](k)\n\
    \        var max = 0L\n        var maxIndex = 0\n        var i = 0\n        var\
    \ j = 0\n        while (i < arr.length) {\n            max = arr(i)\n        \
    \    maxIndex = i\n            while (j < arr.length && arr(j) < max) {\n    \
    \            max += arr(j)\n                maxIndex += 1\n                j +=\
    \ 1\n            }\n            result(i) = max\n            i += 1\n        }\n\
    \        result", "        val max = new Array[Long](k)\n        var i = 0\n \
    \       var j = 0\n        var maxIndex = 0\n        for(i <- 0 until arr.length)\
    \ {\n            for(j <- 0 until k) {\n                if(arr(i) > max(j)) {\n\
    \                    max(j) = arr(i)\n                    maxIndex = j\n     \
    \           }\n            }\n        }\n        max.reverse", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        var max = 0\n        var maxIndex\
    \ = 0\n        for (i <- 0 until arr.length) {\n            if (arr(i) > max)\
    \ {\n                max = arr(i)\n                maxIndex = i\n            }\n\
    \        }\n        for (i <- 0 until arr.length) {\n            if (arr(i) ==\
    \ max) {\n                result.add(arr(maxIndex))\n            }\n        }\n\
    \        result.toList", "        val result = new Array[Long](k)\n        var\
    \ max = 0L\n        var maxIndex = 0\n        var i = 0\n        while (i < arr.length)\
    \ {\n            if (arr(i) > max) {\n                max = arr(i)\n         \
    \       maxIndex = i\n            }\n            i += 1\n        }\n        val\
    \ maxList = arr.take(maxIndex).reverse\n        for (i <- 0 until maxList.length)\n\
    \            result(i) = maxList(i)\n        result", "        val maxNums = mutable.ArrayBuffer.empty[Long]\n\
    \        var maxNumsIndex = 0\n        var maxNumsValue = arr(0)\n        var\
    \ i = 0\n        while (i < arr.length) {\n            if (arr(i) > maxNumsValue)\
    \ {\n                maxNumsValue = arr(i)\n                maxNumsIndex = i\n\
    \            }\n            i += 1\n        }\n        val maxNumsIndex = arr.length\
    \ - k\n        val maxNumsValue = arr(maxNumsIndex)\n        val maxNumsIndex\
    \ = arr.length - k\n        val maxNumsValue = arr(maxNumsIndex)\n        val\
    \ maxNumsIndex = arr.length - k\n        val maxNumsValue = arr(maxNumsIndex)\n\
    \        val maxNumsIndex = arr.length - k\n        val maxNumsValue = arr(maxNumsIndex)\n\
    \        val maxNumsIndex = arr.length - k\n        val maxNumsValue = arr(maxNumsIndex)\n\
    \        val maxNumsIndex = arr.length - k\n        val maxNumsValue = arr(maxNumsIndex)\n\
    \        val maxNumsIndex = arr.length - k\n        val maxNumsValue = arr(maxNumsIndex)\n\
    \        val maxNumsIndex = arr.length - k\n        val maxNumsValue = arr(maxNumsIndex)\n\
    \        val maxNumsIndex = arr.length - k\n        val maxNumsValue = arr(maxNumsIndex)\n\
    \        val maxNumsIndex = arr.length - k\n        val maxNumsValue = arr(maxNumsIndex)\n\
    \        val maxNumsIndex = arr.length - k\n        val maxNumsValue = arr(maxNumsIndex)\n\
    \        val maxNumsIndex = arr.length - k\n        val maxNumsValue = arr(maxNumsIndex)\n\
    \        val maxNumsIndex = arr.length - k\n        val maxNumsValue = arr(maxNumsIndex)\n\
    \        val maxNumsIndex = arr.length - k\n        val maxNumsValue = arr(maxNumsIndex)\n\
    \        val maxNumsIndex = arr.length - k\n        val maxNumsValue = arr(maxNumsIndex)\n\
    \        val maxNumsIndex = arr.length - k\n        val maxNumsValue = arr(maxNumsIndex)\n\
    \        val maxNumsIndex = arr.length - k\n        val maxNumsValue = arr(maxNumsIndex)\n\
    \        val maxNumsIndex = arr.length - k\n        val maxNumsValue = arr(maxNumsIndex)\n\
    \        val maxNumsIndex = arr.length - k\n        val maxNumsValue = arr(maxNumsIndex)\n\
    \        val maxNumsIndex = arr.", "        val max = new Array[Long](k)\n   \
    \     val maxIndex = new Array[Int](k)\n        val maxIndexMap = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap2 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap3 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap4\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap5 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap6 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap7 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap8\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap9 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap10 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap11 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap12\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap13 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap14 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap15 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap16\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap17 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap18 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap19 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap20\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap21 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap22 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap23 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap24\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap25 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap26 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap27 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap28\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap29 = new mutable.HashMap[Long,\
    \ Int]", "        val result = new Array[Long](k)\n        var max = 0\n     \
    \   var maxIndex = 0\n        var i = 0\n        var j = 0\n        while (i <\
    \ arr.length) {\n            max = arr(i)\n            maxIndex = i\n        \
    \    while (j < arr.length && arr(j) < max) {\n                max += arr(j)\n\
    \                j++\n            }\n            result(maxIndex) = max\n    \
    \        i += 1\n        }\n        result", "        val maxNums = arr.take(k).maxBy(_.abs)\n\
    \        val maxNumsIndex = arr.lastIndexWhere(_ == maxNums)\n        val maxNumsIndex\
    \ = maxNumsIndex + 1\n        val maxNumsIndex2 = maxNumsIndex + k\n        val\
    \ maxNumsIndex3 = maxNumsIndex2 + k\n        val maxNumsIndex4 = maxNumsIndex3\
    \ + k\n        val maxNumsIndex5 = maxNumsIndex4 + k\n        val maxNumsIndex6\
    \ = maxNumsIndex5 + k\n        val maxNumsIndex7 = maxNumsIndex6 + k\n       \
    \ val maxNumsIndex8 = maxNumsIndex7 + k\n        val maxNumsIndex9 = maxNumsIndex8\
    \ + k\n        val maxNumsIndex10 = maxNumsIndex9 + k\n        val maxNumsIndex11\
    \ = maxNumsIndex10 + k\n        val maxNumsIndex12 = maxNumsIndex11 + k\n    \
    \    val maxNumsIndex13 = maxNumsIndex12 + k\n        val maxNumsIndex14 = maxNumsIndex13\
    \ + k\n        val maxNumsIndex15 = maxNumsIndex14 + k\n        val maxNumsIndex16\
    \ = maxNumsIndex15 + k\n        val maxNumsIndex17 = maxNumsIndex16 + k\n    \
    \    val maxNumsIndex18 = maxNumsIndex17 + k\n        val maxNumsIndex19 = maxNumsIndex18\
    \ + k\n        val maxNumsIndex20 = maxNumsIndex19 + k\n        val maxNumsIndex21\
    \ = maxNumsIndex20 + k\n        val maxNumsIndex22 = maxNumsIndex21 + k\n    \
    \    val maxNumsIndex23 = maxNumsIndex22 + k\n        val maxNumsIndex24 = maxNumsIndex23\
    \ + k\n        val maxNumsIndex25 = maxNumsIndex24 + k\n        val maxNumsIndex26\
    \ = maxNumsIndex25 + k\n        val maxNumsIndex27 = maxNumsIndex26 + k\n    \
    \    val maxNumsIndex28 = maxNumsIndex27 + k\n        val maxNumsIndex29 = maxNumsIndex28\
    \ + k\n        val maxNumsIndex30 = maxNumsIndex29 + k\n        val maxNumsIndex31\
    \ = maxNumsIndex30 + k\n        val maxNums", "        val maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        var maxLength = 0\n        var maxIndex = 0\n        var i = 0\n    \
    \    while (i < arr.length) {\n            if (arr(i) > 0) {\n               \
    \ maxLength += 1\n                if (maxLength > k) {\n                    maxList\
    \ = maxList :+ arr(i)\n                    maxLength = k\n                   \
    \ maxIndex = i\n                }\n            }\n            i += 1\n       \
    \ }\n        if (maxLength > k) {\n            maxList = maxList :+ arr(maxIndex)\n\
    \        }\n        return maxList.toList", "        val maxNums = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxNumsIndex = mutable.ArrayBuffer.empty[Int]\n        val maxNumsIndexMap\
    \ = mutable.HashMap.empty[Int, Long]\n        arr.foreach { x =>\n           \
    \ val index = maxNums.length\n            val maxNum = if (x > 0) x else 0\n \
    \           val maxNumIndex = if (x > 0) index else 0\n            val maxNumsIndexMap\
    \ = if (x > 0) maxNumsIndexMap + (maxNumIndex -> x) else None\n            val\
    \ maxNumsIndex = if (x > 0) maxNumsIndex + (index -> x) else None\n          \
    \  if (maxNumsIndexMap.contains(maxNumIndex)) {\n                maxNumsIndexMap(maxNumIndex)\
    \ = maxNumsIndexMap(maxNumIndex) + x\n            } else {\n                maxNumsIndexMap(maxNumIndex)\
    \ = x\n            }\n            if (maxNumsIndexMap.contains(maxNum)) {\n  \
    \              maxNumsIndexMap(maxNum) = maxNumsIndexMap(maxNum) + x\n       \
    \     } else {\n                maxNumsIndexMap(maxNum) = x\n            }\n \
    \       }\n        val maxNumsIndexMapSorted = maxNumsIndexMap.sortBy(_._1).reverse\n\
    \        val maxNumsSorted = maxNumsIndexMapSorted.map { case (index, x) => x\
    \ }\n        val maxNumsSorted = maxNumsSorted.take(k).sorted\n        val maxNumsSorted\
    \ = maxNumsSorted.reverse\n        val maxNumsSorted = maxNumsSorted.map { x =>\
    \ if (x > 0) x else 0 }\n        val maxNumsSorted = maxNumsSorted.take(k).sorted\n\
    \        val maxNumsSorted = maxNumsSorted.reverse\n        val maxNumsSorted\
    \ = maxNumsSorted.map { x => if (x > 0) x else 0 }\n        val maxNumsSorted\
    \ = maxNumsSorted.take(k).sorted\n        val maxNumsSorted = maxNumsSorted.reverse\n\
    \        val maxNumsSorted = maxNumsSorted.map { x => if (x > 0) x else 0 }\n\
    \        val maxNumsSorted = maxNumsSorted.take(k).sorted\n        val maxNumsSorted\
    \ = maxNumsSorted.reverse\n        val maxNumsSorted = maxNumsSorted.map { x =>\
    \ if (x > 0) x else 0 }\n        val maxNumsSorted = maxNumsSorted.take(k).sorted\n\
    \        val maxNumsSor", "        val arr = arr.sortBy(-_)\n        val max =\
    \ new Array[Long](k)\n        var i = 0\n        var j = 0\n        var maxIndex\
    \ = 0\n        while (i < arr.length) {\n            if (j == k) {\n         \
    \       maxIndex = i\n                while (j < k) {\n                    max(i)\
    \ = max(max(i), arr(j))\n                    j += 1\n                }\n     \
    \           i += 1\n                j = 0\n            } else {\n            \
    \    if (arr(i) > arr(j)) {\n                    maxIndex = i\n              \
    \      max(i) = arr(i)\n                    i += 1\n                } else {\n\
    \                    maxIndex = j\n                    max(j) = arr(j)\n     \
    \               j += 1\n                }\n            }\n        }\n        max.toList",
  "        val maxList = mutable.ListBuffer.empty[Long]\n        val maxIndex = mutable.ListBuffer.empty[Int]\n\
    \        val maxLength = mutable.ListBuffer.empty[Int]\n        val maxLengthIndex\
    \ = mutable.ListBuffer.empty[Int]\n        val maxLengthLength = mutable.ListBuffer.empty[Int]\n\
    \        val maxLengthLengthIndex = mutable.ListBuffer.empty[Int]\n        val\
    \ maxLengthLengthLength = mutable.ListBuffer.empty[Int]\n        val maxLengthLengthLengthIndex\
    \ = mutable.ListBuffer.empty[Int]\n        val maxLengthLengthLengthLength = mutable.ListBuffer.empty[Int]\n\
    \        val maxLengthLengthLengthIndex = mutable.ListBuffer.empty[Int]\n    \
    \    val maxLengthLengthLengthLength = mutable.ListBuffer.empty[Int]\n       \
    \ val maxLengthLengthLengthIndex = mutable.ListBuffer.empty[Int]\n        val\
    \ maxLengthLengthLengthLength = mutable.ListBuffer.empty[Int]\n        val maxLengthLengthLengthIndex\
    \ = mutable.ListBuffer.empty[Int]\n        val maxLengthLengthLengthLength = mutable.ListBuffer.empty[Int]\n\
    \        val maxLengthLengthLengthIndex = mutable.ListBuffer.empty[Int]\n    \
    \    val maxLengthLengthLengthLength = mutable.ListBuffer.empty[Int]\n       \
    \ val maxLengthLengthLengthIndex = mutable.ListBuffer.empty[Int]\n        val\
    \ maxLengthLengthLengthLength = mutable.ListBuffer.empty[Int]\n        val maxLengthLengthLengthIndex\
    \ = mutable.ListBuffer.empty[Int]\n        val maxLengthLengthLengthLength = mutable.ListBuffer.empty[Int]\n\
    \        val maxLengthLengthLengthIndex = mutable.ListBuffer.empty[Int]\n    \
    \    val maxLengthLengthLengthLength = mutable.ListBuffer.empty[Int]\n       \
    \ val maxLengthLengthLengthIndex = mutable.ListBuffer.empty[Int]\n        val\
    \ maxLengthLengthLengthLength = mutable.ListBuffer.empty[Int]\n        val maxLengthLengthLengthIndex\
    \ = mutable.ListBuffer.empty[Int]\n        val maxLengthLengthLengthLength = mutable.ListBuffer.empty[Int]\n\
    \        val maxLengthLengthLengthIndex = mutable.ListBuffer.empty[Int]\n    \
    \    val maxLengthLengthLengthLength = mutable.ListBuffer.empty[Int]\n       \
    \ val maxLengthLengthLengthIndex = mutable.ListBuffer.empty[Int]\n        val\
    \ maxLengthLengthLengthLength = mutable.ListBuffer.empty[Int]\n        val maxLengthLengthLengthIndex\
    \ = mutable.ListBuffer.empty[Int]\n        val maxLengthLengthLengthLength = mutable.ListBuffer.empty[Int]",
  "        val result = new mutable.ListBuffer[Long]()\n        var max = 0\n    \
    \    var maxIndex = 0\n        var i = 0\n        while (i < arr.length) {\n \
    \           if (max < arr(i)) {\n                max = arr(i)\n              \
    \  maxIndex = i\n            }\n            i += 1\n        }\n        val maxLength\
    \ = arr.length - maxIndex\n        val maxLength = maxLength - k\n        if (maxLength\
    \ < 0) {\n            while (maxLength < 0) {\n                max -= 1\n    \
    \            maxIndex -= 1\n                maxLength += 1\n            }\n  \
    \      }\n        val maxLength = maxLength + k\n        while (maxLength > 0)\
    \ {\n            max += 1\n            maxIndex += 1\n            maxLength -=\
    \ 1\n        }\n        result.clear()\n        result.add(max)\n        result.add(maxIndex)\n\
    \        result", "        val maxList = mutable.ListBuffer.empty[Long]\n    \
    \    val maxValue = arr.head\n        val maxIndex = arr.indexOfMax\n        arr.foreach\
    \ { x =>\n            if (x > maxValue) {\n                maxValue = x\n    \
    \            maxIndex = arr.indexOfMax\n            }\n        }\n        maxList\
    \ += maxValue\n        val newList = arr.take(maxIndex - k + 1)\n        newList\
    \ += maxValue\n        newList", "        val arr = arr.toList\n        val max\
    \ = arr.sortWith(_ > _)\n        val maxList = max.take(k)\n        val maxList2\
    \ = max.drop(k)\n        val maxList3 = maxList.zip(maxList2).map(_._1)\n    \
    \    val maxList4 = maxList3.sortWith(_ > _)\n        val maxList5 = maxList4.take(k)\n\
    \        val maxList6 = maxList4.drop(k)\n        val maxList7 = maxList5.zip(maxList6).map(_._1)\n\
    \        val maxList8 = maxList7.sortWith(_ > _)\n        val maxList9 = maxList8.take(k)\n\
    \        val maxList10 = maxList8.drop(k)\n        val maxList11 = maxList9.zip(maxList10).map(_._1)\n\
    \        val maxList12 = maxList11.sortWith(_ > _)\n        val maxList13 = maxList12.take(k)\n\
    \        val maxList14 = maxList12.drop(k)\n        val maxList15 = maxList13.zip(maxList14).map(_._1)\n\
    \        val maxList16 = maxList15.sortWith(_ > _)\n        val maxList17 = maxList16.take(k)\n\
    \        val maxList18 = maxList16.drop(k)\n        val maxList19 = maxList17.zip(maxList18).map(_._1)\n\
    \        val maxList20 = maxList19.sortWith(_ > _)\n        val maxList21 = maxList20.take(k)\n\
    \        val maxList22 = maxList20.drop(k)\n        val maxList23 = maxList21.zip(maxList22).map(_._1)\n\
    \        val maxList24 = maxList23.sortWith(_ > _)\n        val maxList25 = maxList24.take(k)\n\
    \        val maxList26 = maxList24.drop(k)\n        val maxList27 = maxList25.zip(maxList26).map(_._1)\n\
    \        val maxList28 = maxList27.sortWith(_ > _)\n        val maxList29 = maxList28.take(k)\n\
    \        val maxList30 = maxList28.drop(k)\n        val maxList31 = maxList29.zip(maxList30).map(_._1)\n\
    \        val maxList32 = maxList31.sortWith(_ > _)\n        val maxList33 = maxList32.take(k)\n\
    \        val maxList34 = maxList32.drop(k)", "        val result = new Array[Long](k)\n\
    \        var max = 0\n        var i = 0\n        while (i < arr.length) {\n  \
    \          if (arr(i) > max) {\n                max = arr(i)\n            }\n\
    \            i += 1\n        }\n        var j = 0\n        while (j < k) {\n \
    \           if (max < arr(j)) {\n                result(j) = max\n           \
    \     max += 1\n            } else {\n                result(j) = arr(j)\n   \
    \         }\n            j += 1\n        }\n        result", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        var max = 0\n        var maxIndex\
    \ = 0\n        var i = 0\n        while(i < arr.length) {\n            if(arr(i)\
    \ > max) {\n                max = arr(i)\n                maxIndex = i\n     \
    \       }\n            i += 1\n        }\n        while(i < arr.length) {\n  \
    \          if(arr(i) == max) {\n                result.add(arr(maxIndex))\n  \
    \              maxIndex += 1\n            }\n            i += 1\n        }\n \
    \       if(result.size == k) {\n            result\n        } else {\n       \
    \     result.take(k).toList\n        }", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val maxHeap = new mutable.PriorityQueue[Long]()\n        val heapSize\
    \ = arr.length\n        val heapSizeInt = new mutable.PriorityQueue[Int]()\n \
    \       val heapSizeInt2 = new mutable.PriorityQueue[Int]()\n        val heapSizeInt3\
    \ = new mutable.PriorityQueue[Int]()\n        val heapSizeInt4 = new mutable.PriorityQueue[Int]()\n\
    \        val heapSizeInt5 = new mutable.PriorityQueue[Int]()\n        val heapSizeInt6\
    \ = new mutable.PriorityQueue[Int]()\n        val heapSizeInt7 = new mutable.PriorityQueue[Int]()\n\
    \        val heapSizeInt8 = new mutable.PriorityQueue[Int]()\n        val heapSizeInt9\
    \ = new mutable.PriorityQueue[Int]()\n        val heapSizeInt10 = new mutable.PriorityQueue[Int]()\n\
    \        val heapSizeInt11 = new mutable.PriorityQueue[Int]()\n        val heapSizeInt12\
    \ = new mutable.PriorityQueue[Int]()\n        val heapSizeInt13 = new mutable.PriorityQueue[Int]()\n\
    \        val heapSizeInt14 = new mutable.PriorityQueue[Int]()\n        val heapSizeInt15\
    \ = new mutable.PriorityQueue[Int]()\n        val heapSizeInt16 = new mutable.PriorityQueue[Int]()\n\
    \        val heapSizeInt17 = new mutable.PriorityQueue[Int]()\n        val heapSizeInt18\
    \ = new mutable.PriorityQueue[Int]()\n        val heapSizeInt19 = new mutable.PriorityQueue[Int]()\n\
    \        val heapSizeInt20 = new mutable.PriorityQueue[Int]()\n        val heapSizeInt21\
    \ = new mutable.PriorityQueue[Int]()\n        val heapSizeInt22 = new mutable.PriorityQueue[Int]()\n\
    \        val heapSizeInt23 = new mutable.PriorityQueue[Int]()\n        val heapSizeInt24\
    \ = new mutable.PriorityQueue[Int]()\n        val heapSizeInt25 = new mutable.PriorityQueue[Int]()\n\
    \        val heapSizeInt26 = new mutable.PriorityQueue[Int]()\n        val heapSizeInt27\
    \ = new mutable.PriorityQueue[Int]()\n        val heapSizeInt28 = new mutable.PriorityQueue[Int]()\n\
    \        val heapSizeInt29 = new mutable.PriorityQueue[Int]()\n        val heapSizeInt30\
    \ = new mutable.PriorityQueue[Int", "        val arr = arr.sortBy(-_)\n      \
    \  val len = arr.length\n        val max = new Array[Long](k)\n        var i =\
    \ 0\n        var j = 0\n        var maxIndex = 0\n        while (i < len) {\n\
    \            while (j < k) {\n                if (arr(i) > arr(j)) {\n       \
    \             maxIndex = j\n                    arr(maxIndex) = arr(i)\n     \
    \               arr(i) = arr(j)\n                    arr(j) = arr(maxIndex)\n\
    \                }\n                j += 1\n            }\n            i += 1\n\
    \        }\n        arr", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var max = 0\n        var maxIndex = 0\n        var i = 0\n        while\
    \ (i < arr.length) {\n            if (arr(i) > max) {\n                max = arr(i)\n\
    \                maxIndex = i\n            }\n            i += 1\n        }\n\
    \        var j = 0\n        while (j < arr.length) {\n            if (arr(j) <\
    \ max) {\n                max -= arr(j)\n                maxIndex -= 1\n     \
    \       }\n            j += 1\n        }\n        var k = 0\n        while (k\
    \ <= maxIndex) {\n            result.add(arr(k))\n            k += 1\n       \
    \ }\n        return result.toList", "        val maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxCount = mutable.ArrayBuffer.empty[Long]\n        val maxCountIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex = mutable.ArrayBuffer.empty",
  "        val result = new mutable.ListBuffer[Long]()\n        val max = new mutable.PriorityQueue[Long]()\n\
    \        val min = new mutable.PriorityQueue[Long]()\n        val maxIndex = new\
    \ mutable.PriorityQueue[Int]()\n        val minIndex = new mutable.PriorityQueue[Int]()\n\
    \        val maxValue = new mutable.PriorityQueue[Long]()\n        val minValue\
    \ = new mutable.PriorityQueue[Long]()\n        val maxIndexValue = new mutable.PriorityQueue[Int]()\n\
    \        val minIndexValue = new mutable.PriorityQueue[Int]()\n        val maxValueValue\
    \ = new mutable.PriorityQueue[Long]()\n        val minValueValue = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndexIndex = new mutable.PriorityQueue[Int]()\n        val minIndexIndex\
    \ = new mutable.PriorityQueue[Int]()\n        val maxValueIndex = new mutable.PriorityQueue[Long]()\n\
    \        val minValueIndex = new mutable.PriorityQueue[Long]()\n        val maxIndexValueIndex\
    \ = new mutable.PriorityQueue[Int]()\n        val minIndexValueIndex = new mutable.PriorityQueue[Int]()\n\
    \        val maxValueValueIndex = new mutable.PriorityQueue[Long]()\n        val\
    \ minValueValueIndex = new mutable.PriorityQueue[Long]()\n        val maxIndexIndexIndex\
    \ = new mutable.PriorityQueue[Int]()\n        val minIndexIndexIndex = new mutable.PriorityQueue[Int]()\n\
    \        val maxValueIndexIndex = new mutable.PriorityQueue[Long]()\n        val\
    \ minValueIndexIndex = new mutable.PriorityQueue[Long]()\n        val maxValueValueIndex\
    \ = new mutable.PriorityQueue[Long]()\n        val minValueValueIndex = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndexIndexIndexIndex = new mutable.PriorityQueue[Int]()\n    \
    \    val minIndexIndexIndex = new mutable.PriorityQueue[Int]()\n        val maxValueIndexIndex\
    \ = new mutable.PriorityQueue[Long]()\n        val minValueIndexIndex = new mutable.PriorityQueue[Long]()\n\
    \        val maxValueValueIndex = new mutable.PriorityQueue[Long]()\n        val\
    \ minValueValueIndex = new mutable.PriorityQueue[Long]()\n        val maxIndexIndexIndexIndex\
    \ = new mutable.PriorityQueue[Int]()\n        val minIndexIndexIndex = new mutable.PriorityQueue[Int]()\n\
    \        val maxValueIndexIndex = new ", "        val maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxIndex = mutable.ArrayBuffer.empty[Int]\n        val maxValue =\
    \ mutable.ArrayBuffer.empty[Long]\n        val maxIndexList = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxValueList = mutable.ArrayBuffer.empty[Long]\n        for(i <-\
    \ 0 until arr.length){\n            if(arr(i) > 0){\n                maxList +=\
    \ arr(i)\n                maxIndex += i\n                maxValue += arr(i)\n\
    \                maxIndexList += i\n                maxValueList += arr(i)\n \
    \           }\n        }\n        val maxListLength = maxList.length\n       \
    \ val maxIndexLength = maxIndex.length\n        val maxValueLength = maxValue.length\n\
    \        val maxIndexListLength = maxIndexList.length\n        val maxValueListLength\
    \ = maxValueList.length\n        val maxListLength = maxListLength - k\n     \
    \   val maxIndexLength = maxIndexLength - k\n        val maxValueLength = maxValueLength\
    \ - k\n        val maxIndexListLength = maxIndexListLength - k\n        val maxValueListLength\
    \ = maxValueListLength - k\n        val maxListLength = maxListLength - k\n  \
    \      val maxIndexLength = maxIndexLength - k\n        val maxValueLength = maxValueLength\
    \ - k\n        val maxIndexListLength = maxIndexListLength - k\n        val maxValueListLength\
    \ = maxValueListLength - k\n        val maxListLength = maxListLength - k\n  \
    \      val maxIndexLength = maxIndexLength - k\n        val maxValueLength = maxValueLength\
    \ - k\n        val maxIndexListLength = maxIndexListLength - k\n        val maxValueListLength\
    \ = maxValueListLength - k\n        val maxListLength = maxListLength - k\n  \
    \      val maxIndexLength = maxIndexLength - k\n        val maxValueLength = maxValueLength\
    \ - k\n        val maxIndexListLength = maxIndexListLength - k\n        val maxValueListLength\
    \ = maxValueListLength - k\n        val maxListLength = maxListLength - k\n  \
    \      val maxIndexLength = maxIndexLength - k\n        val maxValueLength = maxValueLength\
    \ - k\n        val maxIndexListLength = maxIndexListLength - k\n        val maxValueListLength\
    \ = maxValueListLength - k\n        val maxListLength = maxListLength - k\n  \
    \      val maxIndexLength = maxIndexLength - k\n        val maxValueLength = maxValueLength\
    \ - k\n        val maxIndexListLength = maxIndexListLength - k", "        val\
    \ result = new Array[Long](k)\n        val max = new Array[Long](k)\n        var\
    \ i = 0\n        var j = 0\n        var maxIndex = 0\n        while(i < arr.length\
    \ && j < k) {\n            if(arr(i) > arr(j)) {\n                result(maxIndex)\
    \ = arr(i)\n                maxIndex(j) = i\n                i += 1\n        \
    \    } else {\n                result(maxIndex) = arr(j)\n                maxIndex(j)\
    \ = j\n                j += 1\n            }\n        }\n        while(i < arr.length)\
    \ {\n            result(maxIndex) = arr(i)\n            maxIndex(j) = i\n    \
    \        i += 1\n        }\n        while(j < k) {\n            result(maxIndex)\
    \ = arr(j)\n            maxIndex(j) = j\n            j += 1\n        }\n     \
    \   result", "        val max = new Array[Long](k)\n        val maxIndex = new\
    \ Array[Int](k)\n        val maxIndexMap = new mutable.HashMap[Long, Int]()\n\
    \        val maxIndexMap2 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap3\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap4 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap5 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap6 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap7\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap8 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap9 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap10 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap11\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap12 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap13 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap14 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap15\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap16 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap17 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap18 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap19\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap20 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap21 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap22 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap23\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap24 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap25 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap26 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap27\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap28 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap29 = new mutable.HashMap[Long, Int]", "     \
    \   val maxList = mutable.ListBuffer[Long]()\n        var maxNum : Long = arr(0)\n\
    \        var maxIndex : Int = 0\n        var index : Int = 0\n        while (index\
    \ < arr.length) {\n            if (arr(index) > maxNum) {\n                maxNum\
    \ = arr(index)\n                maxIndex = index\n            }\n            index\
    \ += 1\n        }\n        var i = 0\n        while (i < k) {\n            maxList\
    \ += maxNum\n            i += 1\n        }\n        return maxList.toList", " \
    \       val maxList = mutable.ArrayBuffer.empty[Long]\n        var maxNum : Long\
    \ = 0\n        var index = 0\n        for(i <- 0 until arr.length) {\n       \
    \     if(arr(i) > maxNum) {\n                maxNum = arr(i)\n               \
    \ maxList = mutable.ArrayBuffer.empty[Long]\n                maxList += arr(i)\n\
    \            }\n            else if(arr(i) == maxNum) {\n                maxList\
    \ += arr(i)\n            }\n            else if(arr(i) < maxNum) {\n         \
    \       maxNum = arr(i)\n                maxList = mutable.ArrayBuffer.empty[Long]\n\
    \                maxList += arr(i)\n            }\n        }\n        if(maxList.size\
    \ == k) {\n            return maxList\n        }\n        else {\n           \
    \ val maxList2 = mutable.ArrayBuffer.empty[Long]\n            val maxNum2 = maxList.last\n\
    \            for(i <- 0 until arr.length) {\n                if(arr(i) > maxNum2)\
    \ {\n                    maxList2 += arr(i)\n                }\n             \
    \   else if(arr(i) == maxNum2) {\n                    maxList2 += arr(i)\n   \
    \             }\n                else if(arr(i) < maxNum2) {\n               \
    \     maxNum2 = arr(i)\n                    maxList2 += arr(i)\n             \
    \   }\n            }\n            if(maxList2.size == k) {\n                return\
    \ maxList2\n            }\n            else {\n                return maxList\n\
    \            }\n        }", "        val max = new Array[Long](k)\n        var\
    \ maxIndex = 0\n        var maxValue = arr(0)\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) > maxValue) {\n                maxValue = arr(i)\n\
    \                maxIndex = i\n            }\n        }\n        val result =\
    \ new Array[Long](k)\n        for (i <- 0 until k) {\n            result(i) =\
    \ arr(maxIndex + i)\n        }\n        result", "        val maxList = mutable.ListBuffer[Long]()\n\
    \        val maxValue = arr.head\n        val maxIndex = arr.indexOfMax\n    \
    \    for(i <- 0 until arr.length){\n            if(arr(i) > maxValue){\n     \
    \           maxValue = arr(i)\n                maxIndex = i\n            }\n \
    \       }\n        maxList += maxValue\n        for(i <- 0 until arr.length){\n\
    \            if(i != maxIndex){\n                maxList += arr(i)\n         \
    \   }\n        }\n        maxList.sortWith(_ < _)", "        val result = new\
    \ mutable.ListBuffer[Long]()\n        var max = 0\n        var maxIndex = 0\n\
    \        var i = 0\n        while(i < arr.length) {\n            val current =\
    \ arr(i)\n            if(current > max) {\n                max = current\n   \
    \             maxIndex = i\n            }\n            i += 1\n        }\n   \
    \     while(i < arr.length) {\n            val current = arr(i)\n            if(current\
    \ > max) {\n                max = current\n                maxIndex = i\n    \
    \        }\n            i += 1\n        }\n        while(i < arr.length) {\n \
    \           val current = arr(i)\n            if(current > max) {\n          \
    \      max = current\n                maxIndex = i\n            }\n          \
    \  i += 1\n        }\n        while(i < arr.length) {\n            val current\
    \ = arr(i)\n            if(current > max) {\n                max = current\n \
    \               maxIndex = i\n            }\n            i += 1\n        }\n \
    \       while(i < arr.length) {\n            val current = arr(i)\n          \
    \  if(current > max) {\n                max = current\n                maxIndex\
    \ = i\n            }\n            i += 1\n        }\n        while(i < arr.length)\
    \ {\n            val current = arr(i)\n            if(current > max) {\n     \
    \           max = current\n                maxIndex = i\n            }\n     \
    \       i += 1\n        }\n        while(i < arr.length) {\n            val current\
    \ = arr(i)\n            if(current > max) {\n                max = current\n \
    \               maxIndex = i\n            }\n            i += 1\n        }\n \
    \       while(i < arr.length) {\n            val current = arr(i)\n          \
    \  if(current > max) {\n                max = current\n                maxIndex\
    \ = i\n            }\n            i += 1\n        }\n        while(i < arr.length)\
    \ {\n            val current = arr(i)\n            if(current > max) {\n     \
    \           max = current\n                maxIndex = i\n            }\n     \
    \       i += 1\n        }\n        while(i < arr.length) {\n            val current\
    \ = arr(i)\n            if(current > max) {\n                max = current\n \
    \               maxIndex = i\n            }\n            i += 1\n        }\n \
    \       while(i < arr.length) {\n            val current = arr(i)\n          \
    \  if(current > max) {\n                max = current\n                maxIndex\
    \ = i\n            }\n            i += 1\n        }\n        while(i < arr.length)\
    \ {\n            val current = arr(i)\n            if(current > max) {\n     \
    \           max = current\n                maxIndex = i\n            }\n     \
    \       i += 1\n        }\n        while(i < arr.length) {\n            val current\
    \ = arr(i)\n            if(current > max) {\n                max = current\n \
    \               maxIndex = i\n            }\n            i += 1\n        }\n \
    \       while(i < arr.length) {\n            val current = arr(i)\n          \
    \  if(current > max) {\n                max = current\n                maxIndex\
    \ = i\n            }\n            i += 1\n        }\n        while(i < arr.length)\
    \ {\n            val current = arr(i)", "        val max = new Array[Long](k)\n\
    \        val maxIndex = new Array[Int](k)\n        val maxIndexMap = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap2 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap3 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap4\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap5 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap6 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap7 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap8\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap9 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap10 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap11 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap12\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap13 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap14 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap15 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap16\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap17 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap18 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap19 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap20\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap21 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap22 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap23 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap24\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap25 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap26 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap27 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap28\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap29 = new mutable.HashMap[Long,\
    \ Int]", "        val result = new mutable.ListBuffer[Long]()\n        var max\
    \ = 0\n        var index = 0\n        var maxIndex = 0\n        for(i <- 0 until\
    \ arr.length) {\n            if(arr(i) > max) {\n                max = arr(i)\n\
    \                maxIndex = i\n            }\n        }\n        while(max !=\
    \ 0) {\n            result.add(max)\n            max -= 1\n            index +=\
    \ 1\n            if(index == k) {\n                break\n            }\n    \
    \        for(i <- 0 until arr.length) {\n                if(arr(i) > max) {\n\
    \                    max = arr(i)\n                    maxIndex = i\n        \
    \        }\n            }\n        }\n        result.toList", "        val max\
    \ = new Array[Long](k)\n        var maxIndex = 0\n        var maxValue = 0L\n\
    \        for (i <- 0 until arr.length) {\n            if (arr(i) > maxValue) {\n\
    \                maxValue = arr(i)\n                maxIndex = i\n           \
    \ }\n        }\n        val newArr = new Array[Long](k)\n        for (i <- 0 until\
    \ k) {\n            newArr(i) = arr(maxIndex + i)\n        }\n        newArr",
  "        val result = new mutable.ListBuffer[Long]()\n        var max = 0\n    \
    \    var maxIndex = 0\n        var i = 0\n        var j = 0\n        while (i\
    \ < arr.length) {\n            max = arr(i)\n            maxIndex = i\n      \
    \      while (j < arr.length && arr(j) < max) {\n                max += arr(j)\n\
    \                j += 1\n            }\n            result.add(max)\n        \
    \    i += 1\n        }\n        if (result.size < k) {\n            while (j <\
    \ arr.length) {\n                max += arr(j)\n                j += 1\n     \
    \       }\n            result.add(max)\n        }\n        result.toList", " \
    \       val maxList = mutable.ArrayBuffer.empty[Long]\n        val maxCount =\
    \ mutable.ArrayBuffer.empty[Long]\n        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxCountIndex = mutable.ArrayBuffer.empty", "        val arr = arr.sortWith(_\
    \ < _)\n        val max = new Array[Long](k)\n        var i = 0\n        var j\
    \ = 0\n        var maxIndex = 0\n        while (i < arr.length) {\n          \
    \  if (j == k) {\n                maxIndex = i\n                while (maxIndex\
    \ < arr.length && arr(maxIndex) < arr(maxIndex + 1)) {\n                    maxIndex\
    \ += 1\n                }\n                maxIndex -= 1\n                max(i)\
    \ = arr(maxIndex)\n                i += 1\n                j = 0\n           \
    \ } else {\n                if (arr(i) > arr(j)) {\n                    max(i)\
    \ = arr(j)\n                    j += 1\n                } else {\n           \
    \         max(i) = arr(i)\n                    i += 1\n                }\n   \
    \         }\n        }\n        if (maxIndex < arr.length) {\n            max(i)\
    \ = arr(maxIndex)\n        }\n        max.toList", "        val result = new Array[Long](k)\n\
    \        val max = new Array[Long](k)\n        val maxIndex = new Array[Int](k)\n\
    \        val maxIndexMap = new mutable.HashMap[Long, Int]()\n        val maxIndexMap2\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap3 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap4 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap5 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap6\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap7 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap8 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap9 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap10\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap11 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap12 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap13 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap14\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap15 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap16 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap17 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap18\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap19 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap20 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap21 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap22\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap23 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap24 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap25 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap26\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap27 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap28 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap", "        val maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxValue = arr.max\n        val maxIndex = arr.indexWhere(x => x\
    \ == maxValue)\n        val maxLength = arr.length\n        val maxIndex = maxIndex\
    \ / k\n        val maxLength = maxLength / k\n        val maxIndex = maxIndex.toInt\n\
    \        val maxLength = maxLength.toInt\n        val maxIndex = maxIndex % k\n\
    \        val maxLength = maxLength % k\n        val maxIndex = maxIndex + k\n\
    \        val maxLength = maxLength + k\n        val maxIndex = maxIndex.toInt\n\
    \        val maxLength = maxLength.toInt\n        val maxIndex = maxIndex % k\n\
    \        val maxLength = maxLength % k\n        val maxIndex = maxIndex + k\n\
    \        val maxLength = maxLength + k\n        val maxIndex = maxIndex.toInt\n\
    \        val maxLength = maxLength.toInt\n        val maxIndex = maxIndex % k\n\
    \        val maxLength = maxLength % k\n        val maxIndex = maxIndex + k\n\
    \        val maxLength = maxLength + k\n        val maxIndex = maxIndex.toInt\n\
    \        val maxLength = maxLength.toInt\n        val maxIndex = maxIndex % k\n\
    \        val maxLength = maxLength % k\n        val maxIndex = maxIndex + k\n\
    \        val maxLength = maxLength + k\n        val maxIndex = maxIndex.toInt\n\
    \        val maxLength = maxLength.toInt\n        val maxIndex = maxIndex % k\n\
    \        val maxLength = maxLength % k\n        val maxIndex = maxIndex + k\n\
    \        val maxLength = maxLength + k\n        val maxIndex = maxIndex.toInt\n\
    \        val maxLength = maxLength.toInt\n        val maxIndex = maxIndex % k\n\
    \        val maxLength = maxLength % k\n        val maxIndex = maxIndex + k\n\
    \        val maxLength = maxLength + k\n        val maxIndex = maxIndex.toInt\n\
    \        val maxLength = maxLength.toInt\n        val maxIndex = maxIndex % k\n\
    \        val maxLength = maxLength % k\n        val maxIndex = maxIndex + k\n\
    \        val maxLength = maxLength + k\n        val maxIndex = maxIndex.toInt\n\
    \        val maxLength = maxLength.toInt\n        val maxIndex = maxIndex % k\n\
    \        val maxLength = maxLength % k\n        val maxIndex = maxIndex + k\n\
    \        val maxLength = maxLength + k\n        val maxIndex = maxIndex.toInt\n\
    \        val maxLength = maxLength.toInt\n        val max", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        val max = new mutable.PriorityQueue[Long]()\n\
    \        val min = new mutable.PriorityQueue[Long]()\n        val minIndex = new\
    \ mutable.PriorityQueue[Int]()\n        val maxIndex = new mutable.PriorityQueue[Int]()\n\
    \        val maxIndexIndex = new mutable.PriorityQueue[Int]()\n        val maxIndexIndexIndex\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexIndexIndexIndex = new\
    \ mutable.PriorityQueue[Int]()\n        val maxIndexIndexIndexIndexIndex = new\
    \ mutable.PriorityQueue[Int]()\n        val maxIndexIndexIndexIndexIndexIndex\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexIndexIndexIndexIndexIndexIndex\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexIndexIndexIndexIndexIndexIndexIndexIndex",
  "        val maxList = mutable.ListBuffer.empty[Long]\n        var maxNum : Long\
    \ = 0\n        var i : Int = 0\n        while(i < arr.length) {\n            val\
    \ currentNum = arr(i)\n            if(currentNum > maxNum) {\n               \
    \ maxNum = currentNum\n            }\n            i += 1\n        }\n        while(i\
    \ < arr.length) {\n            val currentNum = arr(i)\n            if(currentNum\
    \ > maxNum) {\n                maxNum = currentNum\n            }\n          \
    \  i += 1\n        }\n        while(i < arr.length) {\n            val currentNum\
    \ = arr(i)\n            if(currentNum > maxNum) {\n                maxNum = currentNum\n\
    \            }\n            i += 1\n        }\n        while(i < arr.length) {\n\
    \            val currentNum = arr(i)\n            if(currentNum > maxNum) {\n\
    \                maxNum = currentNum\n            }\n            i += 1\n    \
    \    }\n        while(i < arr.length) {\n            val currentNum = arr(i)\n\
    \            if(currentNum > maxNum) {\n                maxNum = currentNum\n\
    \            }\n            i += 1\n        }\n        while(i < arr.length) {\n\
    \            val currentNum = arr(i)\n            if(currentNum > maxNum) {\n\
    \                maxNum = currentNum\n            }\n            i += 1\n    \
    \    }\n        while(i < arr.length) {\n            val currentNum = arr(i)\n\
    \            if(currentNum > maxNum) {\n                maxNum = currentNum\n\
    \            }\n            i += 1\n        }\n        while(i < arr.length) {\n\
    \            val currentNum = arr(i)\n            if(currentNum > maxNum) {\n\
    \                maxNum = currentNum\n            }\n            i += 1\n    \
    \    }\n        while(i < arr.length) {\n            val currentNum = arr(i)\n\
    \            if(currentNum > maxNum) {\n                maxNum = currentNum\n\
    \            }\n            i += 1\n        }\n        while(i < arr.length) {\n\
    \            val currentNum = arr(i)\n            if(currentNum > maxNum) {\n\
    \                maxNum = currentNum\n            }\n            i += 1\n    \
    \    }\n        while(i < arr.length) {\n            val currentNum = arr(i)\n\
    \            if(currentNum > maxNum) {\n                maxNum = currentNum\n\
    \            }\n            i += 1\n        }\n        while(i < arr.length) {\n\
    \            val currentNum = arr(i)\n            if(currentNum > maxNum) {\n\
    \                maxNum = currentNum\n            }\n            i += 1\n    \
    \    }\n        while(i < arr.length) {\n            val currentNum = arr(i)\n\
    \            if(currentNum > maxNum) {\n                maxNum = currentNum\n\
    \            }\n            i += 1\n        }\n        while(i < arr.length) {\n\
    \            val currentNum = arr(i)\n            if(currentNum > ", "       \
    \ val arr = arr.sortWith(_.compareTo(_) < 0)\n        val max = arr.take(k).toList\n\
    \        val rest = arr.drop(k)\n        rest.foreach(x => max.add(x))\n     \
    \   max", "        val maxList = mutable.ArrayBuffer(arr)\n        var maxLength\
    \ = 0\n        var maxIndex = 0\n        var maxValue = arr(0)\n        for(i\
    \ <- arr.indices) {\n            if(maxLength < k) {\n                maxLength\
    \ = k\n                maxIndex = i\n                maxValue = arr(i)\n     \
    \       }\n            else if(arr(i) > maxValue) {\n                maxLength\
    \ = k\n                maxIndex = i\n                maxValue = arr(i)\n     \
    \       }\n        }\n        maxList.updated(maxIndex, maxValue)\n        return\
    \ maxList.toList", "        val max = new Array[Long](k)\n        val maxIndex\
    \ = new Array[Int](k)\n        val maxIndexMap = new mutable.HashMap[Long, Int]()\n\
    \        val maxIndexMap2 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap3\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap4 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap5 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap6 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap7\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap8 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap9 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap10 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap11\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap12 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap13 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap14 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap15\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap16 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap17 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap18 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap19\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap20 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap21 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap22 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap23\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap24 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap25 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap26 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap27\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap28 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap29 = new mutable.HashMap[Long, Int]", "     \
    \   val max = new Array[Long](k)\n        val maxIndex = new Array[Int](k)\n \
    \       val maxIndexMap = new mutable.HashMap[Long, Int]()\n        val maxIndexMap2\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap3 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap4 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap5 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap6\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap7 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap8 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap9 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap10\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap11 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap12 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap13 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap14\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap15 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap16 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap17 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap18\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap19 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap20 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap21 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap22\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap23 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap24 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap25 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap26\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap27 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap28 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap29 = new mutable.HashMap[Long, Int]", "        val maxNum =\
    \ arr.max\n        val maxNumIndex = arr.indexWhere(x => x == maxNum)\n      \
    \  val maxNumList = arr.take(maxNumIndex + k).toList\n        val maxNumListIndex\
    \ = maxNumList.indexWhere(x => x == maxNum)\n        val maxNumList2 = maxNumList.take(maxNumListIndex\
    \ + k).toList\n        val maxNumList2Index = maxNumList2.indexWhere(x => x ==\
    \ maxNum)\n        val maxNumList3 = maxNumList2.take(maxNumList2Index + k).toList\n\
    \        val maxNumList3Index = maxNumList3.indexWhere(x => x == maxNum)\n   \
    \     val maxNumList4 = maxNumList3.take(maxNumList3Index + k).toList\n      \
    \  val maxNumList4Index = maxNumList4.indexWhere(x => x == maxNum)\n        val\
    \ maxNumList5 = maxNumList4.take(maxNumList4Index + k).toList\n        val maxNumList5Index\
    \ = maxNumList5.indexWhere(x => x == maxNum)\n        val maxNumList6 = maxNumList5.take(maxNumList5Index\
    \ + k).toList\n        val maxNumList6Index = maxNumList6.indexWhere(x => x ==\
    \ maxNum)\n        val maxNumList7 = maxNumList6.take(maxNumList6Index + k).toList\n\
    \        val maxNumList7Index = maxNumList7.indexWhere(x => x == maxNum)\n   \
    \     val maxNumList8 = maxNumList7.take(maxNumList7Index + k).toList\n      \
    \  val maxNumList8Index = maxNumList8.indexWhere(x => x == maxNum)\n        val\
    \ maxNumList9 = maxNumList8.take(maxNumList8Index + k).toList\n        val maxNumList9Index\
    \ = maxNumList9.indexWhere(x => x == maxNum)\n        val maxNumList10 = maxNumList9.take(maxNumList9Index\
    \ + k).toList\n        val maxNumList10Index = maxNumList10.indexWhere(x => x\
    \ == maxNum)\n        val maxNumList11 = maxNumList10.take(maxNumList10Index +\
    \ k).toList\n        val maxNumList11Index = maxNumList11.indexWhere(x => x ==\
    \ maxNum)\n        val maxNumList12 = maxNumList11.take(maxNumList11Index + k).toList\n\
    \        val max", "        val result = new mutable.ListBuffer[Long]()\n    \
    \    val max = new mutable.PriorityQueue[Long]()\n        val min = new mutable.PriorityQueue[Long]()\n\
    \        for(i <- 0 until arr.length){\n            max.enqueue(arr(i))\n    \
    \        min.enqueue(arr(i))\n        }\n        while(max.size < k){\n      \
    \      val max1 = max.dequeue()\n            val min1 = min.dequeue()\n      \
    \      if(max1 > min1){\n                result.add(max1)\n                max.enqueue(max1)\n\
    \                min.enqueue(min1)\n            }\n        }\n        while(max.size\
    \ > k){\n            val max1 = max.dequeue()\n            val min1 = min.dequeue()\n\
    \            if(max1 < min1){\n                result.add(max1)\n            \
    \    max.enqueue(max1)\n                min.enqueue(min1)\n            }\n   \
    \     }\n        result.toList", "        val result = new Array[Long](k)\n  \
    \      val max = new Array[Long](k)\n        val maxIndex = new Array[Int](k)\n\
    \        val maxIndexMap = new mutable.HashMap[Long, Int]()\n        val maxIndexMap2\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap3 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap4 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap5 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap6\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap7 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap8 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap9 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap10\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap11 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap12 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap13 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap14\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap15 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap16 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap17 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap18\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap19 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap20 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap21 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap22\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap23 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap24 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap25 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap26\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap27 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap28 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap", "        val max = new mutable.PriorityQueue[Long]()\n \
    \       val maxIndex = new mutable.PriorityQueue[Int]()\n        val maxLength\
    \ = new mutable.PriorityQueue[Int]()\n        val maxLengthIndex = new mutable.PriorityQueue[Int]()\n\
    \        val maxLengthLength = new mutable.PriorityQueue[Int]()\n        val maxLengthLengthIndex\
    \ = new mutable.PriorityQueue[Int]()\n        val maxLengthLengthLength = new\
    \ mutable.PriorityQueue[Int]()\n        val maxLengthLengthLengthIndex = new mutable.PriorityQueue[Int]()\n\
    \        val maxLengthLengthLengthIndex = new mutable.PriorityQueue[Int]()\n \
    \       val maxLengthLengthLengthIndex = new mutable.PriorityQueue[Int]()\n  \
    \      val maxLengthLengthLengthIndex = new mutable.PriorityQueue[Int]()\n   \
    \     val maxLengthLengthLengthIndex = new mutable.PriorityQueue[Int]()\n    \
    \    val maxLengthLengthLengthIndex = new mutable.PriorityQueue[Int]()\n     \
    \   val maxLengthLengthLengthIndex = new mutable.PriorityQueue[Int]()\n      \
    \  val maxLengthLengthLengthIndex = new mutable.PriorityQueue[Int]()\n       \
    \ val maxLengthLengthLengthIndex = new mutable.PriorityQueue[Int]()\n        val\
    \ maxLengthLengthLengthIndex = new mutable.PriorityQueue[Int]()\n        val maxLengthLengthLengthIndex\
    \ = new mutable.PriorityQueue[Int]()\n        val maxLengthLengthLengthIndex =\
    \ new mutable.PriorityQueue[Int]()\n        val maxLengthLengthLengthIndex = new\
    \ mutable.PriorityQueue[Int]()\n        val maxLengthLengthLengthIndex = new mutable.PriorityQueue[Int]()\n\
    \        val maxLengthLengthLengthIndex = new mutable.PriorityQueue[Int]()\n \
    \       val maxLengthLengthLengthIndex = new mutable.PriorityQueue[Int]()\n  \
    \      val maxLengthLengthLengthIndex = new mutable.PriorityQueue[Int]()\n   \
    \     val maxLengthLengthLengthIndex = new mutable.PriorityQueue[Int]()\n    \
    \    val maxLengthLengthLengthIndex = new mutable.PriorityQueue[Int]()\n     \
    \   val maxLengthLengthLengthIndex = new mutable.PriorityQueue[Int]()\n      \
    \  val maxLengthLengthLengthIndex = new mutable.PriorityQueue[Int]()\n       \
    \ val maxLengthLengthLengthIndex = new mutable.PriorityQueue[Int]()\n        val\
    \ maxLengthLengthLengthIndex = new mutable.PriorityQueue[Int]()\n        val maxLengthLengthLengthIndex\
    \ = new mutable.PriorityQueue[Int]()\n        ", "        val max = new Array[Long](k)\n\
    \        var maxIndex = 0\n        var maxValue = arr(0)\n        for(i <- 0 until\
    \ arr.length) {\n            val value = arr(i)\n            if(value > maxValue)\
    \ {\n                maxValue = value\n                maxIndex = i\n        \
    \    }\n        }\n        for(i <- 0 until maxIndex) {\n            val value\
    \ = arr(i)\n            val index = i\n            val temp = maxValue\n     \
    \       maxValue = maxIndex\n            maxIndex = index\n            maxValue\
    \ = temp\n        }\n        val result = new Array[Long](k)\n        for(i <-\
    \ 0 until maxIndex) {\n            result(i) = arr(i)\n        }\n        result",
  "        val result = new mutable.ListBuffer[Long]()\n        var max = 0\n    \
    \    var maxIndex = 0\n        var i = 0\n        while (i < arr.length) {\n \
    \           if (arr(i) > max) {\n                max = arr(i)\n              \
    \  maxIndex = i\n            }\n            i += 1\n        }\n        var j =\
    \ 0\n        while (j < arr.length) {\n            if (arr(j) < max && j < maxIndex)\
    \ {\n                result.add(arr(j))\n                j += 1\n            }\n\
    \            j += 1\n        }\n        result.sortWith((x, y) => x > y)\n   \
    \     result.take(k)", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var max = 0\n        var maxIndex = 0\n        var i = 0\n        while(i\
    \ < arr.length) {\n            val curr = arr(i)\n            if(curr > max) {\n\
    \                max = curr\n                maxIndex = i\n            }\n   \
    \         i += 1\n        }\n        while(i < arr.length) {\n            val\
    \ curr = arr(i)\n            if(curr > max) {\n                max = curr\n  \
    \              maxIndex = i\n            }\n            i += 1\n        }\n  \
    \      while(i < arr.length) {\n            val curr = arr(i)\n            if(curr\
    \ > max) {\n                max = curr\n                maxIndex = i\n       \
    \     }\n            i += 1\n        }\n        while(i < arr.length) {\n    \
    \        val curr = arr(i)\n            if(curr > max) {\n                max\
    \ = curr\n                maxIndex = i\n            }\n            i += 1\n  \
    \      }\n        while(i < arr.length) {\n            val curr = arr(i)\n   \
    \         if(curr > max) {\n                max = curr\n                maxIndex\
    \ = i\n            }\n            i += 1\n        }\n        while(i < arr.length)\
    \ {\n            val curr = arr(i)\n            if(curr > max) {\n           \
    \     max = curr\n                maxIndex = i\n            }\n            i +=\
    \ 1\n        }\n        while(i < arr.length) {\n            val curr = arr(i)\n\
    \            if(curr > max) {\n                max = curr\n                maxIndex\
    \ = i\n            }\n            i += 1\n        }\n        while(i < arr.length)\
    \ {\n            val curr = arr(i)\n            if(curr > max) {\n           \
    \     max = curr\n                maxIndex = i\n            }\n            i +=\
    \ 1\n        }\n        while(i < arr.length) {\n            val curr = arr(i)\n\
    \            if(curr > max) {\n                max = curr\n                maxIndex\
    \ = i\n            }\n            i += 1\n        }\n        while(i < arr.length)\
    \ {\n            val curr = arr(i)\n            if(curr > max) {\n           \
    \     max = curr\n                maxIndex = i\n            }\n            i +=\
    \ 1\n        }\n        while(i < arr.length) {\n            val curr = arr(i)\n\
    \            if(curr > max) {\n                max = curr\n                maxIndex\
    \ = i\n            }\n            i += 1\n        }\n        while(i < arr.length)\
    \ {\n            val curr = arr(i)\n            if(curr > max) {\n           \
    \     max = curr\n                maxIndex = i\n            }\n            i +=\
    \ 1\n        }\n        while(i < arr.length) {\n            val curr = arr(i)\n\
    \            if(curr > max) {\n                max = curr\n                maxIndex\
    \ = i\n            }\n            i += 1\n        }\n        while(i < arr.length)\
    \ {\n            val curr = arr(i)\n            if(curr > max) {\n           \
    \     max = curr\n                maxIndex = i\n            }\n            i +=\
    \ 1", "        val result = new mutable.ListBuffer[Long]()\n        var max =\
    \ 0\n        var maxIndex = 0\n        var i = 0\n        var j = 0\n        while(i\
    \ < arr.length) {\n            max = arr(i)\n            while(j < arr.length\
    \ && arr(j) < max) {\n                max += arr(j)\n                j++\n   \
    \         }\n            if(maxIndex < k) {\n                result.add(max)\n\
    \                maxIndex += 1\n            }\n            i += 1\n        }\n\
    \        return result.toList", "        val arr = arr.sortBy(-_)\n        val\
    \ max = new mutable.PriorityQueue[Long]()\n        for (i <- 0 until arr.length)\
    \ {\n            if (max.size < k) {\n                max += arr(i)\n        \
    \    }\n            else {\n                if (arr(i) > max.peek) {\n       \
    \             max += arr(i)\n                }\n            }\n        }\n   \
    \     max.toList", "        val max = new Array[Long](k)\n        val maxIndex\
    \ = new Array[Int](k)\n        val maxIndexMap = new mutable.HashMap[Long, Int]()\n\
    \        val maxIndexMap2 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap3\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap4 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap5 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap6 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap7\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap8 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap9 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap10 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap11\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap12 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap13 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap14 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap15\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap16 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap17 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap18 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap19\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap20 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap21 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap22 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap23\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap24 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap25 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap26 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap27\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap28 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap29 = new mutable.HashMap[Long, Int]", "     \
    \   val result = new mutable.ListBuffer[Long]()\n        val max = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndex = new mutable.PriorityQueue[Int]()\n        val maxIndexMap\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap2 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap3 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap4 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap5\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap6 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap7 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap8 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap9\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap10 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap11 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap12 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap13\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap14 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap15 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap16 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap17\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap18 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap19 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap20 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap21\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap22 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap23 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap24 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap25\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap26 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap27 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap28 = new mutable.HashMap[Int, ", "        val max = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndex = new mutable.PriorityQueue[Int]()\n        val maxIndexMap\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap2 = new mutable.HashMap[Int,\
    \ Long]()\n        val maxIndexMap3 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap4 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap5\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap6 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap7 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap8 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap9\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap10 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap11 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap12 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap13\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap14 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap15 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap16 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap17\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap18 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap19 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap20 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap21\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap22 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap23 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap24 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap25\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap26 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap27 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap28 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap29\
    \ = new mutable.", "        val result = new mutable.ListBuffer[Long]()\n    \
    \    val max = arr.max\n        val min = arr.min\n        val mid = max / 2\n\
    \        val mid2 = mid / 2\n        val mid3 = mid2 / 2\n        val mid4 = mid3\
    \ / 2\n        val mid5 = mid4 / 2\n        val mid6 = mid5 / 2\n        val mid7\
    \ = mid6 / 2\n        val mid8 = mid7 / 2\n        val mid9 = mid8 / 2\n     \
    \   val mid10 = mid9 / 2\n        val mid11 = mid10 / 2\n        val mid12 = mid11\
    \ / 2\n        val mid13 = mid12 / 2\n        val mid14 = mid13 / 2\n        val\
    \ mid15 = mid14 / 2\n        val mid16 = mid15 / 2\n        val mid17 = mid16\
    \ / 2\n        val mid18 = mid17 / 2\n        val mid19 = mid18 / 2\n        val\
    \ mid20 = mid19 / 2\n        val mid21 = mid20 / 2\n        val mid22 = mid21\
    \ / 2\n        val mid23 = mid22 / 2\n        val mid24 = mid23 / 2\n        val\
    \ mid25 = mid24 / 2\n        val mid26 = mid25 / 2\n        val mid27 = mid26\
    \ / 2\n        val mid28 = mid27 / 2\n        val mid29 = mid28 / 2\n        val\
    \ mid30 = mid29 / 2\n        val mid31 = mid30 / 2\n        val mid32 = mid31\
    \ / 2\n        val mid33 = mid32 / 2\n        val mid34 = mid33 / 2\n        val\
    \ mid35 = mid34 / 2\n        val mid36 = mid35 / 2\n        val mid37 = mid36\
    \ / 2\n        val mid38 = mid37 / 2\n        val mid39 = mid38 / 2\n        val\
    \ mid40 = mid39 / 2\n        val mid41 = mid40 / 2\n        val mid42 = mid41\
    \ / 2\n        val mid43 = mid42 / 2\n        val mid44 = mid43 / 2\n        val\
    \ mid45 = mid44 / 2\n        val mid46 = mid45 / 2\n        val mid47 = mid46\
    \ / 2\n        val mid48 = mid47 / 2\n        val mid49 = mid48 / 2\n        val\
    \ mid50 = mid49 / 2\n", "        val arr = arr.sortBy(-_)\n        val max = new\
    \ mutable.PriorityQueue[Long]()\n        val maxSize = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndex = new mutable.PriorityQueue[Long]()\n        val maxSizeIndex\
    \ = new mutable.PriorityQueue[Long]()\n        val maxSizeIndex2 = new mutable.PriorityQueue[Long]()\n\
    \        val maxSizeIndex3 = new mutable.PriorityQueue[Long]()\n        val maxSizeIndex4\
    \ = new mutable.PriorityQueue[Long]()\n        val maxSizeIndex5 = new mutable.PriorityQueue[Long]()\n\
    \        val maxSizeIndex6 = new mutable.PriorityQueue[Long]()\n        val maxSizeIndex7\
    \ = new mutable.PriorityQueue[Long]()\n        val maxSizeIndex8 = new mutable.PriorityQueue[Long]()\n\
    \        val maxSizeIndex9 = new mutable.PriorityQueue[Long]()\n        val maxSizeIndex10\
    \ = new mutable.PriorityQueue[Long]()\n        val maxSizeIndex11 = new mutable.PriorityQueue[Long]()\n\
    \        val maxSizeIndex12 = new mutable.PriorityQueue[Long]()\n        val maxSizeIndex13\
    \ = new mutable.PriorityQueue[Long]()\n        val maxSizeIndex14 = new mutable.PriorityQueue[Long]()\n\
    \        val maxSizeIndex15 = new mutable.PriorityQueue[Long]()\n        val maxSizeIndex16\
    \ = new mutable.PriorityQueue[Long]()\n        val maxSizeIndex17 = new mutable.PriorityQueue[Long]()\n\
    \        val maxSizeIndex18 = new mutable.PriorityQueue[Long]()\n        val maxSizeIndex19\
    \ = new mutable.PriorityQueue[Long]()\n        val maxSizeIndex20 = new mutable.PriorityQueue[Long]()\n\
    \        val maxSizeIndex21 = new mutable.PriorityQueue[Long]()\n        val maxSizeIndex22\
    \ = new mutable.PriorityQueue[Long]()\n        val maxSizeIndex23 = new mutable.PriorityQueue[Long]()\n\
    \        val maxSizeIndex24 = new mutable.PriorityQueue[Long]()\n        val maxSizeIndex25\
    \ = new mutable.PriorityQueue[Long]()\n        val maxSizeIndex26 = new mutable.PriorityQueue[Long]()\n\
    \        val maxSizeIndex27 = new mutable.PriorityQueue[Long]()\n        val maxSizeIndex28\
    \ = new mutable.PriorityQueue[Long]()\n        val maxSizeIndex29 = new mutable.PriorityQueue[Long",
  "        val result = new mutable.ListBuffer[Long]()\n        val max = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndex = new mutable.PriorityQueue[Int]()\n        val maxIndexMap\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap2 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap3 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap4 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap5\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap6 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap7 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap8 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap9\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap10 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap11 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap12 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap13\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap14 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap15 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap16 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap17\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap18 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap19 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap20 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap21\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap22 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap23 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap24 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap25\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap26 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap27 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap28 = new mutable.HashMap[Int, ", "        val arr = arr.toList\n\
    \        val maxList = arr.take(k).maxBy(x => x)\n        val maxList2 = arr.takeRight(k).maxBy(x\
    \ => x)\n        val maxList3 = arr.takeRight(k).reverse.maxBy(x => x)\n     \
    \   val maxList4 = arr.takeRight(k).reverse.maxBy(x => x)\n        val maxList5\
    \ = arr.takeRight(k).reverse.maxBy(x => x)\n        val maxList6 = arr.takeRight(k).reverse.maxBy(x\
    \ => x)\n        val maxList7 = arr.takeRight(k).reverse.maxBy(x => x)\n     \
    \   val maxList8 = arr.takeRight(k).reverse.maxBy(x => x)\n        val maxList9\
    \ = arr.takeRight(k).reverse.maxBy(x => x)\n        val maxList10 = arr.takeRight(k).reverse.maxBy(x\
    \ => x)\n        val maxList11 = arr.takeRight(k).reverse.maxBy(x => x)\n    \
    \    val maxList12 = arr.takeRight(k).reverse.maxBy(x => x)\n        val maxList13\
    \ = arr.takeRight(k).reverse.maxBy(x => x)\n        val maxList14 = arr.takeRight(k).reverse.maxBy(x\
    \ => x)\n        val maxList15 = arr.takeRight(k).reverse.maxBy(x => x)\n    \
    \    val maxList16 = arr.takeRight(k).reverse.maxBy(x => x)\n        val maxList17\
    \ = arr.takeRight(k).reverse.maxBy(x => x)\n        val maxList18 = arr.takeRight(k).reverse.maxBy(x\
    \ => x)\n        val maxList19 = arr.takeRight(k).reverse.maxBy(x => x)\n    \
    \    val maxList20 = arr.takeRight(k).reverse.maxBy(x => x)\n        val maxList21\
    \ = arr.takeRight(k).reverse.maxBy(x => x)\n        val maxList22 = arr.takeRight(k).reverse.maxBy(x\
    \ => x)\n        val maxList23 = arr.takeRight(k).reverse.maxBy(x => x)\n    \
    \    val maxList24 = arr.takeRight(k).reverse.maxBy(x => x)\n        val maxList25\
    \ = arr.takeRight(k).reverse.maxBy(x => x)\n        val maxList26 = arr.takeRight(k).reverse.maxBy(x\
    \ => x)\n        val maxList27 = arr.takeRight(k).reverse.maxBy(x => x)\n    \
    \    val maxList28 = arr.takeRight(k", "        val arr = arr.sortBy(-_)\n   \
    \     val max = arr.take(k).toList\n        val rest = arr.drop(k)\n        rest\
    \ match {\n            case Nil => max\n            case x :: rest => maximum(x\
    \ :: rest, k)\n        }", "        val max = new Array[Long](k)\n        val\
    \ maxIndex = new Array[Int](k)\n        var i = 0\n        var j = 0\n       \
    \ var maxIndex = 0\n        var maxValue = arr(0)\n        for(i <- 0 until arr.length)\
    \ {\n            if(arr(i) > maxValue) {\n                maxValue = arr(i)\n\
    \                maxIndex = i\n            }\n        }\n        for(i <- 0 until\
    \ arr.length) {\n            if(arr(i) == maxValue) {\n                maxIndex(i)\
    \ = i\n            }\n        }\n        for(i <- 0 until arr.length) {\n    \
    \        for(j <- 0 until arr.length) {\n                if(i != j) {\n      \
    \              if(arr(i) < arr(j)) {\n                        maxIndex(i) = j\n\
    \                    }\n                }\n            }\n        }\n        for(i\
    \ <- 0 until arr.length) {\n            for(j <- 0 until arr.length) {\n     \
    \           if(i != j) {\n                    if(arr(i) > arr(j)) {\n        \
    \                maxIndex(i) = j\n                    }\n                }\n \
    \           }\n        }\n        for(i <- 0 until arr.length) {\n           \
    \ for(j <- 0 until arr.length) {\n                if(i != j) {\n             \
    \       if(arr(i) < arr(j)) {\n                        maxIndex(i) = j\n     \
    \               }\n                }\n            }\n        }\n        for(i\
    \ <- 0 until arr.length) {\n            for(j <- 0 until arr.length) {\n     \
    \           if(i != j) {\n                    if(arr(i) > arr(j)) {\n        \
    \                maxIndex(i) = j\n                    }\n                }\n \
    \           }\n        }\n        for(i <- 0 until arr.length) {\n           \
    \ for(j <- 0 until arr.length) {\n                if(i != j) {\n             \
    \       if(arr(i) < arr(j)) {\n                        maxIndex(i) = j\n     \
    \               }\n                }\n            }\n        }\n        for(i\
    \ <- 0 until arr.length) {\n            for(j <- 0 until arr.length) {\n     \
    \           if(i != j) {\n                    if(arr(i) > arr(j)) {\n        \
    \                maxIndex(i) = j\n                    }\n                }\n \
    \           }\n        }\n        for(i <- 0 until arr.length) {\n           \
    \ for(j <- 0 until arr.length) {\n                if(i != j) {\n             \
    \       if(arr(i) < arr(j)) {\n                        maxIndex(i) = j\n     \
    \               }\n                }\n            }\n        }\n        for(i\
    \ <- 0 until arr.length) {\n            for(j <- 0 until arr.length) {\n     \
    \           if(i != j) {\n                    if(arr(i) > arr(j)) {\n        \
    \                maxIndex(i) = j\n                    }\n                }\n \
    \           }\n        }\n        for(i <- 0 until arr.length) {\n           \
    \ for(j <- 0 until arr.length) {\n                if(i != j) {\n             \
    \       if(arr(i) < arr(j", "        val maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxLength = arr.length\n        val maxK = k\n        val maxValue\
    \ = arr(0)\n        val maxIndex = arr.indexOf(0)\n        val maxIndexList =\
    \ mutable.ArrayBuffer.empty[Long]\n        val maxIndexLength = arr.indexOf(0)\n\
    \        val maxIndexK = k\n        val maxIndexValue = arr(0)\n        val maxIndexIndex\
    \ = arr.indexOf(0)\n        val maxIndexIndexList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxIndexIndexLength = arr.indexOf(0)\n        val maxIndexIndexK\
    \ = k\n        val maxIndexIndexValue = arr(0)\n        val maxIndexIndexIndex\
    \ = arr.indexOf(0)\n        val maxIndexIndexIndexList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxIndexIndexIndexLength = arr.indexOf(0)\n        val maxIndexIndexIndexK\
    \ = k\n        val maxIndexIndexIndexValue = arr(0)\n        val maxIndexIndexIndexIndex\
    \ = arr.indexOf(0)\n        val maxIndexIndexIndexIndexList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxIndexIndexIndexIndexLength = arr.indexOf(0)\n        val maxIndexIndexIndexIndexK\
    \ = k\n        val maxIndexIndexIndexIndexValue = arr(0)\n        val maxIndexIndexIndexIndexIndex\
    \ = arr.indexOf(0)\n        val maxIndexIndexIndexIndexList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxIndexIndexIndexIndexLength = arr.indexOf(0)\n        val maxIndexIndexIndexIndexK\
    \ = k\n        val maxIndexIndexIndexIndexValue = arr(0)\n        val maxIndexIndexIndexIndexIndex\
    \ = arr.indexOf(0)\n        val maxIndexIndexIndexIndexList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxIndexIndexIndexIndexLength = arr.indexOf(0)\n        val maxIndexIndexIndexIndexK\
    \ = k\n        val maxIndexIndexIndexIndexValue = arr(0)\n        val maxIndexIndexIndexIndexIndex\
    \ = arr.indexOf(0)\n        val maxIndexIndexIndexIndexList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxIndexIndexIndexIndexLength = arr.indexOf(0)\n        val maxIndexIndexIndexIndexK\
    \ = k\n        val maxIndexIndexIndexIndexValue = arr(0)\n        val maxIndexIndexIndexIndexIndex\
    \ = arr.indexOf(0)\n        val maxIndexIndexIndexIndexList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxIndexIndexIndexIndexLength = arr.indexOf(0)\n        val maxIndexIndexIndexIndexK\
    \ = k\n        val maxIndexIndexIndexIndexValue = arr(0)\n        val maxIndexIndexIndexIndexIndex\
    \ = ", "        val maxList = mutable.ArrayBuffer(arr.take(k))\n        val maxLength\
    \ = arr.length\n        for(i <- 0 until arr.length){\n            val curMax\
    \ = arr(i)\n            for(j <- 0 until maxLength){\n                if(curMax\
    \ < arr(j)){\n                    maxList += arr(j)\n                    maxLength\
    \ = j\n                }\n            }\n        }\n        maxList.toList", " \
    \       val arr = arr.toList\n        val max = arr.sortWith(_ < _)\n        val\
    \ maxList = max.take(k).toList\n        val maxList2 = max.drop(k).toList\n  \
    \      val maxList3 = maxList2.sortWith(_ < _)\n        val maxList4 = maxList3.take(k).toList\n\
    \        val maxList5 = maxList4.drop(k).toList\n        val maxList6 = maxList5.sortWith(_\
    \ < _)\n        val maxList7 = maxList6.take(k).toList\n        val maxList8 =\
    \ maxList7.drop(k).toList\n        val maxList9 = maxList8.sortWith(_ < _)\n \
    \       val maxList10 = maxList9.take(k).toList\n        val maxList11 = maxList10.drop(k).toList\n\
    \        val maxList12 = maxList11.sortWith(_ < _)\n        val maxList13 = maxList12.take(k).toList\n\
    \        val maxList14 = maxList13.drop(k).toList\n        val maxList15 = maxList14.sortWith(_\
    \ < _)\n        val maxList16 = maxList15.take(k).toList\n        val maxList17\
    \ = maxList16.drop(k).toList\n        val maxList18 = maxList17.sortWith(_ < _)\n\
    \        val maxList19 = maxList18.take(k).toList\n        val maxList20 = maxList19.drop(k).toList\n\
    \        val maxList21 = maxList20.sortWith(_ < _)\n        val maxList22 = maxList21.take(k).toList\n\
    \        val maxList23 = maxList22.drop(k).toList\n        val maxList24 = maxList23.sortWith(_\
    \ < _)\n        val maxList25 = maxList24.take(k).toList\n        val maxList26\
    \ = maxList25.drop(k).toList\n        val maxList27 = maxList26.sortWith(_ < _)\n\
    \        val maxList28 = maxList27.take(k).toList\n        val maxList29 = maxList28.drop(k).toList\n\
    \        val maxList30 = maxList29.sortWith(_ < _)\n        val maxList31 = maxList30.take(k).toList\n\
    \        val maxList32 = maxList31.drop(k).toList\n        val maxList33 = maxList32.sortWith(_\
    \ < _)\n        val maxList34 = maxList33.take(k).toList\n        val maxList35\
    \ = maxList34.drop(k).toList", "        val maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxCount = mutable.ArrayBuffer.empty[Long]\n        val maxIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxIndex = mutable.ArrayBuffer.empty[Long]\n        val maxCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxIndex = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxCount = mutable.ArrayBuffer.empty[Long]\n        val maxIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxIndex = mutable.ArrayBuffer.empty[Long]\n        val maxCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxIndex = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxCount = mutable.ArrayBuffer.empty[Long]\n        val maxIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxIndex = mutable.ArrayBuffer.empty[Long]\n        val maxCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxIndex = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxCount = mutable.ArrayBuffer.empty[Long]\n        val maxIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxIndex = mutable.ArrayBuffer.empty[Long]\n        val maxCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxIndex = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxCount = mutable.ArrayBuffer.empty[Long]\n        val maxIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxIndex = mutable.ArrayBuffer.empty[Long]\n        val maxCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxIndex = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxCount = mutable.ArrayBuffer.empty[Long]\n        val maxIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxIndex = mutable.ArrayBuffer.empty[Long]\n        val maxCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxIndex = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxCount = mutable.ArrayBuffer.empty[Long]\n        val maxIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxCount = mut", "        val\
    \ arr = arr.sortWith(_ < _)\n        val max = new Array[Long](k)\n        var\
    \ maxIndex = 0\n        var i = 0\n        while (i < arr.length) {\n        \
    \    if (maxIndex < k) {\n                maxIndex(k) = arr(i)\n             \
    \   max(i) = 0\n            }\n            i += 1\n        }\n        return max",
  "        val max = new Array[Long](k)\n        val maxIndex = new Array[Int](k)\n\
    \        val maxIndexMap = new mutable.HashMap[Long, Int]()\n        val maxIndexMap2\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap3 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap4 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap5 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap6\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap7 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap8 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap9 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap10\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap11 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap12 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap13 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap14\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap15 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap16 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap17 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap18\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap19 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap20 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap21 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap22\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap23 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap24 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap25 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap26\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap27 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap28 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap29 = new mutable.HashMap[Long, Int]", "        val maxList\
    \ = mutable.ListBuffer.empty[Long]\n        var maxNum = arr.head\n        var\
    \ maxIndex = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i)\
    \ > maxNum) {\n                maxNum = arr(i)\n                maxIndex = i\n\
    \            }\n        }\n        maxList += maxNum\n        for (i <- 0 until\
    \ arr.length - maxIndex + 1) {\n            if (arr(i) > maxNum) {\n         \
    \       maxNum = arr(i)\n                maxIndex = i\n            }\n       \
    \ }\n        maxList += maxNum\n        if (maxIndex < k) {\n            val newList\
    \ = arr.take(maxIndex).sorted\n            val newMaxList = newList.take(k - maxIndex).sorted\n\
    \            val newMaxList2 = newList.drop(maxIndex).sorted\n            val\
    \ newMaxList3 = newList.drop(k - maxIndex).sorted\n            val newMaxList4\
    \ = newList.take(k - maxIndex).sorted\n            val newMaxList5 = newList.drop(k\
    \ - maxIndex).sorted\n            val newMaxList6 = newList.take(k - maxIndex).sorted\n\
    \            val newMaxList7 = newList.drop(k - maxIndex).sorted\n           \
    \ val newMaxList8 = newList.take(k - maxIndex).sorted\n            val newMaxList9\
    \ = newList.drop(k - maxIndex).sorted\n            val newMaxList10 = newList.take(k\
    \ - maxIndex).sorted\n            val newMaxList11 = newList.drop(k - maxIndex).sorted\n\
    \            val newMaxList12 = newList.take(k - maxIndex).sorted\n          \
    \  val newMaxList13 = newList.drop(k - maxIndex).sorted\n            val newMaxList14\
    \ = newList.take(k - maxIndex).sorted\n            val newMaxList15 = newList.drop(k\
    \ - maxIndex).sorted\n            val newMaxList16 = newList.take(k - maxIndex).sorted\n\
    \            val newMaxList17 = newList.drop(k - maxIndex).sorted\n          \
    \  val newMaxList18 = newList.take(k - maxIndex).sorted\n            val newMaxList19\
    \ = newList.drop(k - maxIndex).sorted\n            val newMaxList20 = newList.take(k\
    \ - maxIndex).sorted\n            val newMaxList21 = newList.drop(k - maxIndex).sorted\n\
    \            val newMaxList22 = newList.take(k - maxIndex).sorted\n          \
    \  val newMaxList23 = newList.drop(k - maxIndex).sorted\n            val newMaxList24\
    \ = newList.take(k - maxIndex).sorted\n            val newMaxList", "        val\
    \ arr = arr.sortBy(-_)\n        val max = new Array[Long](k)\n        var i =\
    \ 0\n        var j = 0\n        while (i < arr.length && j < k) {\n          \
    \  if (arr(i) > arr(j)) {\n                max(i) = arr(i)\n                i\
    \ += 1\n            } else {\n                max(j) = arr(j)\n              \
    \  j += 1\n            }\n        }\n        if (i < arr.length) {\n         \
    \   val temp = arr.slice(i).toList\n            arr.clear\n            arr ++=\
    \ temp\n        }\n        if (j < k) {\n            val temp = arr.slice(j).toList\n\
    \            arr.clear\n            arr ++= temp\n        }\n        arr", " \
    \       val max = new mutable.PriorityQueue[Long]()\n        val maxIndex = new\
    \ mutable.PriorityQueue[Int]()\n        val maxIndexMap = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap2 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap3 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap4\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap5 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap6 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap7 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap8\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap9 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap10 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap11 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap12\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap13 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap14 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap15 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap16\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap17 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap18 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap19 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap20\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap21 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap22 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap23 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap24\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap25 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap26 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap27 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap28\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap29 = new mutable.",
  "        val result = new Array[Long](k)\n        var max = 0L\n        var maxIndex\
    \ = 0\n        var i = 0\n        while (i < arr.length) {\n            if (max\
    \ < arr(i)) {\n                max = arr(i)\n                maxIndex = i\n  \
    \          }\n            i += 1\n        }\n        var j = 0\n        while\
    \ (j < k) {\n            result(j) = arr(maxIndex)\n            j += 1\n     \
    \       maxIndex -= 1\n        }\n        result", "        val max = new Array[Long](k)\n\
    \        val maxIndex = new Array[Int](k)\n        val maxIndexSet = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSet = new mutable.HashSet[Int]()\n        val maxIndexSetSet2\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSet3 = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSet4 = new mutable.HashSet[Int]()\n        val maxIndexSetSet5\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSet6 = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSet7 = new mutable.HashSet[Int]()\n        val maxIndexSetSet8\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSet9 = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSet10 = new mutable.HashSet[Int]()\n        val maxIndexSetSet11\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSet12 = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSet13 = new mutable.HashSet[Int]()\n        val maxIndexSetSet14\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSet15 = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSet16 = new mutable.HashSet[Int]()\n        val maxIndexSetSet17\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSet18 = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSet19 = new mutable.HashSet[Int]()\n        val maxIndexSetSet20\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSet21 = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSet22 = new mutable.HashSet[Int]()\n        val maxIndexSetSet23\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSet24 = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSet25 = new mutable.HashSet[Int]()\n        val maxIndexSetSet26\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSet27 = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSet28 = new mutable.HashSet[Int]()\n", "        val maxList\
    \ = mutable.ArrayBuffer.empty[Long]\n        var maxIndex = 0\n        var maxVal\
    \ = arr(0)\n        var i = 0\n        while (i < arr.length) {\n            if\
    \ (arr(i) > maxVal) {\n                maxVal = arr(i)\n                maxIndex\
    \ = i\n            }\n            i += 1\n        }\n        if (maxIndex - k\
    \ >= 0) {\n            maxList += maxIndex - k\n        }\n        maxList +=\
    \ maxVal\n        return maxList.toList", "        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        val maxIndex = arr.length\n        val maxValue = arr(0)\n        for(i\
    \ <- 0 until arr.length) {\n            val currentValue = arr(i)\n          \
    \  if(currentValue > maxValue) {\n                maxValue = currentValue\n  \
    \              maxIndex = i\n            }\n        }\n        for(i <- 0 until\
    \ k) {\n            maxList += maxValue\n        }\n        maxList.toList", " \
    \       val result = new mutable.ListBuffer[Long]()\n        var max = 0\n   \
    \     var maxIndex = 0\n        var i = 0\n        while(i < arr.length) {\n \
    \           val value = arr(i)\n            if(value > max) {\n              \
    \  max = value\n                maxIndex = i\n            }\n            i +=\
    \ 1\n        }\n        while(maxIndex < arr.length) {\n            val value\
    \ = arr(maxIndex)\n            if(value > max) {\n                max = value\n\
    \                maxIndex = arr.length\n            }\n            arr.insert(maxIndex,\
    \ max)\n            maxIndex += 1\n        }\n        arr.take(k)", "        val\
    \ arr = arr.sortWith(_ < _)\n        val max = new Array[Long](k)\n        var\
    \ i = 0\n        while (i < k) {\n            if (arr(i) > arr(i + 1)) {\n   \
    \             max(i) = arr(i)\n                i += 1\n            } else {\n\
    \                max(i) = arr(i + 1)\n            }\n        }\n        max.toList",
  "        val result = new mutable.ListBuffer[Long]()\n        var max = 0\n    \
    \    var maxIndex = 0\n        var i = 0\n        while (i < arr.length) {\n \
    \           if (arr(i) > max) {\n                max = arr(i)\n              \
    \  maxIndex = i\n            }\n            i += 1\n        }\n        val maxIndex\
    \ = maxIndex\n        var j = 0\n        while (j < arr.length) {\n          \
    \  if (arr(j) < max && j < maxIndex) {\n                result.add(arr(j))\n \
    \           }\n            j += 1\n        }\n        if (result.size == k) {\n\
    \            result\n        } else {\n            result.take(k).reverse\n  \
    \      }", "        val maxList = mutable.ArrayBuffer.empty[Long]\n        var\
    \ maxNum : Long = 0\n        var maxIndex : Int = 0\n        for(i <- 0 until\
    \ arr.length) {\n            if(arr(i) > maxNum) {\n                maxNum = arr(i)\n\
    \                maxIndex = i\n            }\n        }\n        for(i <- 0 until\
    \ arr.length) {\n            if(arr(i) == maxNum) {\n                maxList +=\
    \ arr(i)\n            }\n        }\n        val result = maxList.take(k).toList\n\
    \        for(i <- 0 until result.length) {\n            if(result(i) < 0) {\n\
    \                result(i) = -result(i)\n            }\n        }\n        return\
    \ result", "        val max = new mutable.ListBuffer[Long]()\n        val maxIndex\
    \ = new mutable.ListBuffer[Int]()\n        var maxIndexCount = 0\n        var\
    \ maxIndexCount2 = 0\n        var maxIndexCount3 = 0\n        var maxIndexCount4\
    \ = 0\n        var maxIndexCount5 = 0\n        var maxIndexCount6 = 0\n      \
    \  var maxIndexCount7 = 0\n        var maxIndexCount8 = 0\n        var maxIndexCount9\
    \ = 0\n        var maxIndexCount10 = 0\n        var maxIndexCount11 = 0\n    \
    \    var maxIndexCount12 = 0\n        var maxIndexCount13 = 0\n        var maxIndexCount14\
    \ = 0\n        var maxIndexCount15 = 0\n        var maxIndexCount16 = 0\n    \
    \    var maxIndexCount17 = 0\n        var maxIndexCount18 = 0\n        var maxIndexCount19\
    \ = 0\n        var maxIndexCount20 = 0\n        var maxIndexCount21 = 0\n    \
    \    var maxIndexCount22 = 0\n        var maxIndexCount23 = 0\n        var maxIndexCount24\
    \ = 0\n        var maxIndexCount25 = 0\n        var maxIndexCount26 = 0\n    \
    \    var maxIndexCount27 = 0\n        var maxIndexCount28 = 0\n        var maxIndexCount29\
    \ = 0\n        var maxIndexCount30 = 0\n        var maxIndexCount31 = 0\n    \
    \    var maxIndexCount32 = 0\n        var maxIndexCount33 = 0\n        var maxIndexCount34\
    \ = 0\n        var maxIndexCount35 = 0\n        var maxIndexCount36 = 0\n    \
    \    var maxIndexCount37 = 0\n        var maxIndexCount38 = 0\n        var maxIndexCount39\
    \ = 0\n        var maxIndexCount40 = 0\n        var maxIndexCount41 = 0\n    \
    \    var maxIndexCount42 = 0\n        var maxIndexCount43 = 0\n        var maxIndexCount44\
    \ = 0\n        var maxIndexCount45 = 0\n        var maxIndexCount46 = 0\n    \
    \    var maxIndexCount47 = 0\n        var maxIndexCount48 = 0\n        var maxIndexCount49\
    \ = 0\n        var maxIndexCount50 = 0\n        var maxIndexCount51 = 0\n    \
    \    var maxIndexCount52 = 0\n        var maxIndexCount53 = 0\n        var maxIndexCount54\
    \ = 0\n        var maxIndexCount55 = 0\n        var maxIndexCount56 = 0\n    \
    \    var maxIndexCount57 = 0\n        var maxIndexCount58 = 0\n        var maxIndexCount59\
    \ = 0\n        var maxIndexCount60 = 0\n        var maxIndexCount61 = 0\n    \
    \    var maxIndexCount62 = 0\n        var maxIndexCount63 = 0\n        var maxIndexCount64\
    \ = 0\n        var maxIndexCount65 = 0\n        var maxIndexCount66 = 0\n    \
    \    var maxIndexCount67 = 0\n        var maxIndexCount68 = 0\n        var maxIndexCount69\
    \ = 0\n        var maxIndex", "        val arr = arr.sortBy(-_)\n        val max\
    \ = new mutable.ListBuffer[Long]()\n        var i = 0\n        while (i < arr.length)\
    \ {\n            if (max.length < k) {\n                max += arr(i)\n      \
    \      }\n            i += 1\n        }\n        max.toList", "        val result\
    \ = new Array[Long](k)\n        var max = 0L\n        var index = 0\n        for\
    \ (i <- 0 until arr.length) {\n            if (arr(i) > max) {\n             \
    \   max = arr(i)\n                index = i\n            }\n        }\n      \
    \  result(index) = max\n        return result", "        val arr = arr.sortBy(-_)\n\
    \        val max = new Array[Long](k)\n        var i = 0\n        var j = 0\n\
    \        var maxIndex = 0\n        while(i < arr.length) {\n            while(j\
    \ < arr.length && arr(j) < arr(i)) {\n                j += 1\n            }\n\
    \            if(j == arr.length) {\n                max(i) = arr(i)\n        \
    \        i += 1\n            } else {\n                max(i) = arr(j)\n     \
    \           j += 1\n            }\n            i += 1\n        }\n        max.toList",
  "        val arr = arr.sortBy(-_)\n        val max = new Array[Long](k)\n      \
    \  var i = 0\n        while(i < k) {\n            if(arr(i) > arr(i + 1)) {\n\
    \                max(i) = arr(i)\n                i += 1\n            } else {\n\
    \                max(i) = arr(i + 1)\n                i += 1\n            }\n\
    \        }\n        max.toList", "        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        var max = 0\n        var i = 0\n        while (i < arr.length) {\n  \
    \          if (arr(i) > max) {\n                max = arr(i)\n            }\n\
    \            i += 1\n        }\n        val maxListSize = k - max\n        val\
    \ maxListArray = Array.ofDim[Long](maxListSize)\n        var j = 0\n        while\
    \ (j < arr.length) {\n            if (arr(j) > max) {\n                maxListArray(j)\
    \ = arr(j)\n                j += 1\n            } else {\n                j +=\
    \ 1\n            }\n        }\n        val maxListArrayList = maxListArray.toList\n\
    \        val maxListArrayListSize = maxListArrayList.size\n        val maxListArrayListArray\
    \ = Array.ofDim[Long](maxListArrayListSize)\n        var k = 0\n        while\
    \ (k <= maxListArrayListSize) {\n            maxListArrayListArray(k) = maxListArrayList(k)\n\
    \            k += 1\n        }\n        return maxListArrayListArray.toList",
  "        val maxList = mutable.ListBuffer.empty[Long]\n        var maxNum : Long\
    \ = 0\n        var i : Int = 0\n        while(i < arr.length) {\n            if(arr(i)\
    \ > maxNum) {\n                maxNum = arr(i)\n            }\n            i +=\
    \ 1\n        }\n        while(i < arr.length) {\n            if(arr(i) > maxNum)\
    \ {\n                maxNum = arr(i)\n            }\n            i += 1\n    \
    \    }\n        while(i < arr.length) {\n            if(arr(i) > maxNum) {\n \
    \               maxNum = arr(i)\n            }\n            i += 1\n        }\n\
    \        while(i < arr.length) {\n            if(arr(i) > maxNum) {\n        \
    \        maxNum = arr(i)\n            }\n            i += 1\n        }\n     \
    \   while(i < arr.length) {\n            if(arr(i) > maxNum) {\n             \
    \   maxNum = arr(i)\n            }\n            i += 1\n        }\n        while(i\
    \ < arr.length) {\n            if(arr(i) > maxNum) {\n                maxNum =\
    \ arr(i)\n            }\n            i += 1\n        }\n        while(i < arr.length)\
    \ {\n            if(arr(i) > maxNum) {\n                maxNum = arr(i)\n    \
    \        }\n            i += 1\n        }\n        while(i < arr.length) {\n \
    \           if(arr(i) > maxNum) {\n                maxNum = arr(i)\n         \
    \   }\n            i += 1\n        }\n        while(i < arr.length) {\n      \
    \      if(arr(i) > maxNum) {\n                maxNum = arr(i)\n            }\n\
    \            i += 1\n        }\n        while(i < arr.length) {\n            if(arr(i)\
    \ > maxNum) {\n                maxNum = arr(i)\n            }\n            i +=\
    \ 1\n        }\n        while(i < arr.length) {\n            if(arr(i) > maxNum)\
    \ {\n                maxNum = arr(i)\n            }\n            i += 1\n    \
    \    }\n        while(i < arr.length) {\n            if(arr(i) > maxNum) {\n \
    \               maxNum = arr(i)\n            }\n            i += 1\n        }\n\
    \        while(i < arr.length) {\n            if(arr(i) > maxNum) {\n        \
    \        maxNum = arr(i)\n            }\n            i += 1\n        }\n     \
    \   while(i < arr.length) {\n            if(arr(i) > maxNum) {\n             \
    \   maxNum = arr(i)\n            }\n            i += 1\n        }\n        while(i\
    \ < arr.length) {\n            if(arr(i) > maxNum) {\n                maxNum =\
    \ arr(i)\n            }\n            i += 1\n        }\n        while(i < arr.length)\
    \ {\n            if(arr(i) > maxNum) {\n                maxNum = arr(i)\n    \
    \        }\n            i += 1\n        }\n        while(i < arr.length) {\n \
    \           if(arr(i) > maxNum) {\n                maxNum = arr(i)\n         \
    \   }\n            i += 1\n        }\n        while(i < arr.length) {\n      \
    \      if(arr(i) > ", "        val result = new Array[Long](k)\n        val max\
    \ = new Array[Long](k)\n        var maxIndex = 0\n        var maxValue = arr(0)\n\
    \        for(i <- 0 until k){\n            val value = arr(i)\n            if(value\
    \ > maxValue){\n                maxValue = value\n                maxIndex = i\n\
    \            }\n        }\n        for(i <- 0 until k){\n            result(i)\
    \ = arr(maxIndex)\n        }\n        result", "        val maxNums = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxNumsSize = mutable.ArrayBuffer.empty[Int]\n        val maxNumsIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxNumsSizeIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxNumsSizeIndexMap = mutable.HashMap.empty[Int, Int]\n        val\
    \ maxNumsIndexMap = mutable.HashMap.empty[Int, Int]\n        val maxNumsIndexMapSize\
    \ = mutable.HashMap.empty[Int, Int]\n        val maxNumsIndexMapSizeIndex = mutable.HashMap.empty[Int,\
    \ Int]\n        val maxNumsIndexMapSizeIndexMap = mutable.HashMap.empty[Int, Int]\n\
    \        val maxNumsIndexMapSizeIndexMapSize = mutable.HashMap.empty[Int, Int]\n\
    \        val maxNumsIndexMapSizeIndexMapSizeIndex = mutable.HashMap.empty[Int,\
    \ Int]\n        val maxNumsIndexMapSizeIndexMapSizeIndexMap = mutable.HashMap.empty[Int,\
    \ Int]\n        val maxNumsIndexMapSizeIndexMapSizeIndexMapSize = mutable.HashMap.empty[Int,\
    \ Int]\n        val maxNumsIndexMapSizeIndexMapSizeIndexMapSizeIndex = mutable.HashMap.empty[Int,\
    \ Int]\n        val maxNumsIndexMapSizeIndexMapSizeIndexMapSizeIndexMap = mutable.HashMap.empty[Int,\
    \ Int]\n        val maxNumsIndexMapSizeIndexMapSizeIndexMapSizeIndexMapSize =\
    \ mutable.HashMap.empty[Int, Int]\n        val maxNumsIndexMapSizeIndexMapSizeIndexMapSizeIndexMapSizeIndex\
    \ = mutable.HashMap.empty[Int, Int]\n        val maxNumsIndexMapSizeIndexMapSizeIndexMapSizeIndexMapSizeIndexMap\
    \ = mutable.HashMap.empty[Int, Int]\n        val maxNumsIndexMapSizeIndexMapSizeIndexMapSizeIndexMapSizeIndexMapSize\
    \ = mutable.HashMap.empty[Int, Int]\n        val maxNumsIndexMapSizeIndexMapSizeIndexMapSizeIndexMapSizeIndexMapSizeIndex\
    \ = mutable.HashMap.empty[Int, Int]\n        val maxNumsIndexMapSizeIndexMapSizeIndexMapSizeIndexMapSizeIndexMapSizeIndexMapSize\
    \ = mutable.HashMap.empty[Int, Int]\n        val maxNumsIndexMapSizeIndexMapSizeIndexMapSizeIndexMapSizeIndexMapSizeIndexMapSizeIndex\
    \ = ", "        val result = new mutable.ListBuffer[Long]()\n        var max =\
    \ 0\n        var i = 0\n        while (i < arr.length) {\n            if (arr(i)\
    \ > max) {\n                max = arr(i)\n            }\n            i += 1\n\
    \        }\n        var j = 0\n        while (j < arr.length) {\n            if\
    \ (arr(j) < max) {\n                result.add(arr(j))\n            }\n      \
    \      j += 1\n        }\n        result.sortWith((x, y) => x > y)\n        result.take(k)",
  "        val arr = arr.sortBy(-_)\n        val max = new mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while(i < arr.length) {\n            val curr = arr(i)\n\
    \            if(curr <= k) {\n                max += curr\n                i +=\
    \ 1\n            } else {\n                while(i < arr.length && arr(i) <= k)\
    \ {\n                    i += 1\n                }\n                max += k\n\
    \                i -= 1\n            }\n        }\n        max.toList", "    \
    \    val maxList = mutable.ListBuffer.empty[Long]\n        val maxLength = arr.length\n\
    \        val maxK = k\n        val maxValue = arr.max\n        val maxIndex =\
    \ arr.indexOf(maxValue)\n        val maxIndexList = mutable.ListBuffer.empty[Long]\n\
    \        val maxIndexLength = maxIndex + 1\n        val maxIndexK = maxIndexLength\
    \ / maxK\n        val maxIndexValue = maxIndex % maxK\n        val maxIndexIndexList\
    \ = mutable.ListBuffer.empty[Long]\n        val maxIndexIndexLength = maxIndexIndex\
    \ + 1\n        val maxIndexIndexK = maxIndexIndexLength / maxK\n        val maxIndexIndexValue\
    \ = maxIndexIndex % maxK\n        val maxIndexIndexIndexList = mutable.ListBuffer.empty[Long]\n\
    \        val maxIndexIndexIndexLength = maxIndexIndexIndex + 1\n        val maxIndexIndexIndexK\
    \ = maxIndexIndexIndexLength / maxK\n        val maxIndexIndexIndexValue = maxIndexIndexIndex\
    \ % maxK\n        val maxIndexIndexIndexIndexList = mutable.ListBuffer.empty[Long]\n\
    \        val maxIndexIndexIndexIndexLength = maxIndexIndexIndexIndex + 1\n   \
    \     val maxIndexIndexIndexIndexK = maxIndexIndexIndexIndexLength / maxK\n  \
    \      val maxIndexIndexIndexIndexValue = maxIndexIndexIndexIndex % maxK\n   \
    \     val maxIndexIndexIndexIndexIndexList = mutable.ListBuffer.empty[Long]\n\
    \        val maxIndexIndexIndexIndexIndexLength = maxIndexIndexIndexIndexIndex\
    \ + 1\n        val maxIndexIndexIndexIndexK = maxIndexIndexIndexIndexLength /\
    \ maxK\n        val maxIndexIndexIndexIndexValue = maxIndexIndexIndexIndex % maxK\n\
    \        val maxIndexIndexIndexIndexIndexList = mutable.ListBuffer.empty[Long]\n\
    \        val maxIndexIndexIndexIndexIndexLength = maxIndexIndexIndexIndexIndex\
    \ + 1\n        val maxIndexIndexIndexIndexK = maxIndexIndexIndexIndexLength /\
    \ maxK\n        val maxIndexIndexIndexIndexValue = maxIndexIndexIndexIndex % maxK\n\
    \        val maxIndexIndexIndexIndexIndexList = mutable.ListBuffer.empty[Long]\n\
    \        val maxIndexIndexIndexIndexIndexLength = maxIndexIndexIndexIndexIndex\
    \ + 1\n        val maxIndexIndexIndexIndexK = maxIndexIndexIndexIndexLength /\
    \ maxK\n        val maxIndexIndexIndexIndexValue = maxIndexIndexIndexIndex % maxK\n\
    \        val maxIndexIndexIndexIndexIndexList = mutable.ListBuffer.empty[Long]\n\
    \        val maxIndexIndexIndexIndexIndex", "        val arr = arr.sortWith(_\
    \ < _)\n        val result = new Array[Long](k)\n        var i = 0\n        var\
    \ j = 0\n        var max = 0\n        while (i < arr.length) {\n            if\
    \ (j == k) {\n                max += arr(i)\n                i += 1\n        \
    \        j = 0\n            } else {\n                max += arr(i)\n        \
    \        i += 1\n                j += 1\n            }\n        }\n        result(0)\
    \ = max\n        result", "        val arr = arr.sortBy(-_)\n        val max =\
    \ new Array[Long](k)\n        var i = 0\n        var j = 0\n        var maxIndex\
    \ = 0\n        while (i < arr.length) {\n            while (j < arr.length &&\
    \ arr(j) < arr(i)) {\n                j += 1\n            }\n            if (j\
    \ == arr.length) {\n                max(i) = arr(i)\n                i += 1\n\
    \            } else {\n                max(i) = arr(j)\n                j += 1\n\
    \            }\n        }\n        max.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var max = 0\n        var maxIndex = 0\n        var i = 0\n        while\
    \ (i < arr.length) {\n            if (arr(i) > max) {\n                max = arr(i)\n\
    \                maxIndex = i\n            }\n            i += 1\n        }\n\
    \        val maxValue = arr(maxIndex)\n        var j = 0\n        while (j < arr.length)\
    \ {\n            if (arr(j) < maxValue) {\n                result.add(arr(j))\n\
    \                j += 1\n            }\n            j += 1\n        }\n      \
    \  result.take(k).toList", "        val max = new mutable.ListBuffer[Long]()\n\
    \        var maxIndex = 0\n        arr.foreach(x => {\n            if (x > max.lastOption.getOrElse(-1L))\
    \ {\n                max += x\n                maxIndex += 1\n            }\n\
    \        })\n        max.take(k).toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val max = new mutable.PriorityQueue[Long]()\n        for (i <- 0 until\
    \ arr.length) {\n            if (max.size < k) {\n                max += arr(i)\n\
    \            }\n            else {\n                if (arr(i) > max.peek()) {\n\
    \                    max += arr(i)\n                }\n            }\n       \
    \ }\n        result ++= max\n        return result.toList", "        val arr =\
    \ arr.sortBy(-_)\n        val len = arr.length\n        val max = new Array[Long](k)\n\
    \        var i = 0\n        var j = 0\n        var maxIndex = 0\n        while\
    \ (i < len) {\n            while (j < k && arr(i) < arr(j)) {\n              \
    \  j += 1\n            }\n            if (j == k) {\n                max(i) =\
    \ arr(i)\n                i += 1\n                j += 1\n            } else {\n\
    \                max(i) = arr(j)\n                j += 1\n            }\n    \
    \    }\n        if (maxIndex == k) {\n            max.reverse\n        } else\
    \ {\n            max.reverse\n        }", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var max = 0\n        var maxIndex = 0\n        var i = 0\n        while\
    \ (i < arr.length) {\n            if (arr(i) > max) {\n                max = arr(i)\n\
    \                maxIndex = i\n            }\n            i += 1\n        }\n\
    \        if (maxIndex < k) {\n            while (maxIndex < k) {\n           \
    \     result.add(arr(maxIndex))\n                maxIndex += 1\n            }\n\
    \        }\n        result.toList", "        val result = new Array[Long](k)\n\
    \        var max = 0\n        var index = 0\n        for (i <- 0 until arr.length)\
    \ {\n            if (max < arr(i)) {\n                max = arr(i)\n         \
    \       index = i\n            }\n        }\n        for (i <- 0 until k) {\n\
    \            result(i) = arr(index)\n            index += 1\n        }\n     \
    \   result", "        val arr = arr.sortWith(_ < _)\n        val max = new Array[Long](k)\n\
    \        var i = 0\n        var j = 0\n        while (i < arr.length) {\n    \
    \        if (j == k) {\n                max += arr(j)\n                j = 0\n\
    \            }\n            else if (arr(i) > arr(j)) {\n                max +=\
    \ arr(j)\n                j += 1\n            }\n            else {\n        \
    \        max += arr(i)\n                i += 1\n            }\n        }\n   \
    \     max += arr(j)\n        max.toList", "        val max = new Array[Long](k)\n\
    \        var maxIndex = 0\n        var index = 0\n        var maxValue = arr(0)\n\
    \        for(i <- 0 until arr.length) {\n            if(arr(i) > maxValue) {\n\
    \                maxValue = arr(i)\n                maxIndex = i\n           \
    \ }\n        }\n        for(i <- 0 until arr.length) {\n            if(arr(i)\
    \ == maxValue) {\n                max(i) = arr(i)\n            }\n        }\n\
    \        for(i <- 0 until arr.length) {\n            if(arr(i) < maxValue) {\n\
    \                max(i) = arr(i)\n            }\n        }\n        for(i <- 0\
    \ until arr.length) {\n            if(arr(i) == maxValue) {\n                max(i)\
    \ = arr(i)\n            }\n        }\n        for(i <- 0 until arr.length) {\n\
    \            if(arr(i) < maxValue) {\n                max(i) = arr(i)\n      \
    \      }\n        }\n        for(i <- 0 until arr.length) {\n            if(arr(i)\
    \ == maxValue) {\n                max(i) = arr(i)\n            }\n        }\n\
    \        for(i <- 0 until arr.length) {\n            if(arr(i) < maxValue) {\n\
    \                max(i) = arr(i)\n            }\n        }\n        for(i <- 0\
    \ until arr.length) {\n            if(arr(i) == maxValue) {\n                max(i)\
    \ = arr(i)\n            }\n        }\n        for(i <- 0 until arr.length) {\n\
    \            if(arr(i) < maxValue) {\n                max(i) = arr(i)\n      \
    \      }\n        }\n        for(i <- 0 until arr.length) {\n            if(arr(i)\
    \ == maxValue) {\n                max(i) = arr(i)\n            }\n        }\n\
    \        for(i <- 0 until arr.length) {\n            if(arr(i) < maxValue) {\n\
    \                max(i) = arr(i)\n            }\n        }\n        for(i <- 0\
    \ until arr.length) {\n            if(arr(i) == maxValue) {\n                max(i)\
    \ = arr(i)\n            }\n        }\n        for(i <- 0 until arr.length) {\n\
    \            if(arr(i) < maxValue) {\n                max(i) = arr(i)\n      \
    \      }\n        }\n        for(i <- 0 until arr.length) {\n            if(arr(i)\
    \ == maxValue) {\n                max(i) = arr(i)\n            }\n        }\n\
    \        for(i <- 0 until arr.length) {\n            if(arr(i) < maxValue) {\n\
    \                max(i) = arr(i)\n            }\n        }\n        for(i <- 0\
    \ until arr.length) {\n            if(arr(i) == maxValue) {\n                max(i)\
    \ = arr(i)\n            }\n        }\n        for(i <- 0 until arr.length) {\n\
    \            if(arr(i) < maxValue) {\n                max(i) = arr(i)\n      \
    \      }\n        }\n        for(i <- 0 until arr.length) {\n            if(arr(i)\
    \ == maxValue) {\n                max(i) = arr(i)\n            }", "        val\
    \ maxList = mutable.ArrayBuffer.empty[Long]\n        var maxIndex = 0\n      \
    \  var maxValue = arr(0)\n        for(i <- 0 until arr.length) {\n           \
    \ if(arr(i) > maxValue) {\n                maxValue = arr(i)\n               \
    \ maxIndex = i\n            }\n        }\n        maxList += maxValue\n      \
    \  for(i <- 0 until arr.length - k) {\n            val value = arr(i)\n      \
    \      if(value > maxValue) {\n                maxValue = value\n            \
    \    maxIndex = i\n            }\n        }\n        maxList += maxValue\n   \
    \     arr.drop(maxIndex + 1).take(k).sorted", "        val arr = arr.toList\n\
    \        val max = arr.sortBy(-_).take(k).toList\n        arr.filterNot(x => max.contains(x))",
  "        val result = new mutable.ListBuffer[Long]()\n        var max = 0\n    \
    \    var maxIndex = 0\n        for(i <- 0 until arr.length) {\n            if(arr(i)\
    \ > max) {\n                max = arr(i)\n                maxIndex = i\n     \
    \       }\n        }\n        for(i <- 0 until arr.length) {\n            if(arr(i)\
    \ == max) {\n                result += arr(maxIndex)\n                maxIndex\
    \ += 1\n            }\n        }\n        result.toList", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        var max = 0\n        var maxIndex\
    \ = 0\n        var index = 0\n        for(i <- 0 until arr.length){\n        \
    \    if(arr(i) > max){\n                max = arr(i)\n                maxIndex\
    \ = i\n            }\n        }\n        for(i <- 0 until arr.length){\n     \
    \       if(arr(i) == max){\n                index += 1\n                if(index\
    \ == k){\n                    result += arr(maxIndex)\n                }\n   \
    \         }\n        }\n        return result.toList", "        val maxList =\
    \ mutable.ListBuffer.empty[Long]\n        val maxValue = arr.max\n        val\
    \ maxIndex = arr.indexWhere(x => x == maxValue)\n        val maxLength = arr.length\
    \ - maxIndex\n        val maxK = math.min(k, maxLength)\n        for (i <- 0 until\
    \ maxK) {\n            val maxIndex = arr.indexWhere(x => x == maxValue)\n   \
    \         val maxLength = arr.length - maxIndex\n            val maxK = math.min(k,\
    \ maxLength)\n            val maxValue = arr.max\n            val maxIndex = arr.indexWhere(x\
    \ => x == maxValue)\n            val maxLength = arr.length - maxIndex\n     \
    \       val maxK = math.min(k, maxLength)\n            val maxValue = arr.max\n\
    \            val maxIndex = arr.indexWhere(x => x == maxValue)\n            val\
    \ maxLength = arr.length - maxIndex\n            val maxK = math.min(k, maxLength)\n\
    \            val maxValue = arr.max\n            val maxIndex = arr.indexWhere(x\
    \ => x == maxValue)\n            val maxLength = arr.length - maxIndex\n     \
    \       val maxK = math.min(k, maxLength)\n            val maxValue = arr.max\n\
    \            val maxIndex = arr.indexWhere(x => x == maxValue)\n            val\
    \ maxLength = arr.length - maxIndex\n            val maxK = math.min(k, maxLength)\n\
    \            val maxValue = arr.max\n            val maxIndex = arr.indexWhere(x\
    \ => x == maxValue)\n            val maxLength = arr.length - maxIndex\n     \
    \       val maxK = math.min(k, maxLength)\n            val maxValue = arr.max\n\
    \            val maxIndex = arr.indexWhere(x => x == maxValue)\n            val\
    \ maxLength = arr.length - maxIndex\n            val maxK = math.min(k, maxLength)\n\
    \            val maxValue = arr.max\n            val maxIndex = arr.indexWhere(x\
    \ => x == maxValue)\n            val maxLength = arr.length - maxIndex\n     \
    \       val maxK = math.min(k, maxLength)\n            val maxValue = arr.max\n\
    \            val maxIndex = arr.indexWhere(x => x == maxValue)\n            val\
    \ maxLength = arr.length - maxIndex\n            val maxK = math.min(k, maxLength)\n\
    \            val maxValue = arr.max\n            val maxIndex = arr.indexWhere(x\
    \ => x == maxValue)\n            val maxLength = arr.length - maxIndex\n     \
    \       val maxK = math.min(k, maxLength)\n            val maxValue = arr.max\n\
    \            val maxIndex = arr.indexWhere(x => x == maxValue)\n            val\
    \ maxLength = arr.length - maxIndex\n            val maxK = ", "        val maxList\
    \ = mutable.ArrayBuffer(arr.take(k))\n        val maxLength = arr.length\n   \
    \     val maxLengthMinusOne = maxLength - 1\n        val maxLengthMinusOneMinusK\
    \ = maxLengthMinusOne - k\n        val maxLengthMinusOneMinusKMinusOne = maxLengthMinusOneMinusK\
    \ - 1\n        val maxLengthMinusOneMinusKMinusOneMinusK = maxLengthMinusOneMinusKMinusOne\
    \ - k - 1\n        val maxLengthMinusOneMinusKMinusOneMinusKMinusOne = maxLengthMinusOneMinusKMinusOneMinusK\
    \ - 1\n        val maxLengthMinusOneMinusKMinusOneMinusKMinusOneMinusK = maxLengthMinusOneMinusKMinusOneMinusKMinusOne\
    \ - k - 1 - 1\n        val maxLengthMinusOneMinusKMinusOneMinusKMinusOneMinusKMinusOne\
    \ = maxLengthMinusOneMinusKMinusOneMinusKMinusOneMinusK - 1\n        val maxLengthMinusOneMinusKMinusOneMinusKMinusOneMinusKMinusOneMinusK\
    \ = maxLengthMinusOneMinusKMinusOneMinusKMinusOneMinusKMinusOneMinusK - 1\n  \
    \      val maxLengthMinusOneMinusKMinusOneMinusKMinusOneMinusKMinusOneMinusKMinusOne\
    \ = maxLengthMinusOneMinusKMinusOneMinusKMinusOneMinusKMinusOneMinusKMinusOne\
    \ - k - 1 - 1 - 1 - 1\n        val maxLengthMinusOneMinusKMinusOneMinusKMinusOneMinusKMinusOneMinusKMinusOneMinusK\
    \ = maxLengthMinusOneMinusKMinusOneMinusKMinusOneMinusKMinusOneMinusKMinusOneMinusK\
    \ - 1\n        val maxLengthMinusOneMinusKMinusOneMinusKMinusOneMinusKMinusOneMinusKMinusOneMinusKMinusOne\
    \ = maxLengthMinusOneMinusKMinusOneMinusKMinusOneMinusKMinusOneMinusKMinusOneMinusK\
    \ - 1\n        val maxLengthMinusOneMin", "        val max = new Array[Long](k)\n\
    \        val maxIndex = new Array[Int](k)\n        val maxIndexMap = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap2 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap3 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap4\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap5 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap6 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap7 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap8\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap9 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap10 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap11 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap12\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap13 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap14 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap15 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap16\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap17 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap18 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap19 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap20\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap21 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap22 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap23 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap24\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap25 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap26 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap27 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap28\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap29 = new mutable.HashMap[Long,\
    \ Int]", "        val arr = arr.sortBy(-_)\n        val max = arr.take(k).toList\n\
    \        val rest = arr.drop(k)\n        rest match {\n            case Nil =>\
    \ max\n            case _ => maximum(max, rest.max)\n        }", "        val\
    \ arr = arr.sortBy(x => x)\n        val max = new Array[Long](k)\n        var\
    \ i = 0\n        while(i < k) {\n            if(arr(i) > arr(i + 1)) {\n     \
    \           max(i) = arr(i)\n                i += 1\n            } else {\n  \
    \              max(i) = arr(i + 1)\n                i += 1\n            }\n  \
    \      }\n        max.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var max = 0L\n        var maxIndex = 0\n        var i = 0\n        while\
    \ (i < arr.length) {\n            if (arr(i) > max) {\n                max = arr(i)\n\
    \                maxIndex = i\n            }\n            i += 1\n        }\n\
    \        var j = 0\n        while (j < arr.length) {\n            if (arr(j) <\
    \ max) {\n                result.add(arr(j))\n                j += 1\n       \
    \     } else {\n                result.add(max)\n                result.add(maxIndex)\n\
    \                max = arr(j)\n                maxIndex = j\n            }\n \
    \       }\n        result.toList", "        val result = new Array[Long](k)\n\
    \        var max = 0L\n        var index = 0\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) > max) {\n                max = arr(i)\n         \
    \       index = i\n            }\n        }\n        result(index) = max\n   \
    \     result", "        val result = new mutable.ListBuffer[Long]()\n        val\
    \ maxValue = arr.max\n        val maxIndex = arr.indexWhere(x => x == maxValue)\n\
    \        val maxIndexList = arr.take(maxIndex).toList\n        val maxIndexListSize\
    \ = maxIndexList.length\n        val maxIndexListSize = maxIndexListSize - 1\n\
    \        val maxIndexListSize = maxIndexListSize - 1\n        val maxIndexListSize\
    \ = maxIndexListSize - 1\n        val maxIndexListSize = maxIndexListSize - 1\n\
    \        val maxIndexListSize = maxIndexListSize - 1\n        val maxIndexListSize\
    \ = maxIndexListSize - 1\n        val maxIndexListSize = maxIndexListSize - 1\n\
    \        val maxIndexListSize = maxIndexListSize - 1\n        val maxIndexListSize\
    \ = maxIndexListSize - 1\n        val maxIndexListSize = maxIndexListSize - 1\n\
    \        val maxIndexListSize = maxIndexListSize - 1\n        val maxIndexListSize\
    \ = maxIndexListSize - 1\n        val maxIndexListSize = maxIndexListSize - 1\n\
    \        val maxIndexListSize = maxIndexListSize - 1\n        val maxIndexListSize\
    \ = maxIndexListSize - 1\n        val maxIndexListSize = maxIndexListSize - 1\n\
    \        val maxIndexListSize = maxIndexListSize - 1\n        val maxIndexListSize\
    \ = maxIndexListSize - 1\n        val maxIndexListSize = maxIndexListSize - 1\n\
    \        val maxIndexListSize = maxIndexListSize - 1\n        val maxIndexListSize\
    \ = maxIndexListSize - 1\n        val maxIndexListSize = maxIndexListSize - 1\n\
    \        val maxIndexListSize = maxIndexListSize - 1\n        val maxIndexListSize\
    \ = maxIndexListSize - 1\n        val maxIndexListSize = maxIndexListSize - 1\n\
    \        val maxIndexListSize = maxIndexListSize - 1\n        val maxIndexListSize\
    \ = maxIndexListSize - 1\n        val maxIndexListSize = maxIndexListSize - 1\n\
    \        val maxIndexListSize = maxIndexListSize - 1\n        val maxIndexListSize\
    \ = maxIndexListSize - 1\n        val maxIndexListSize = maxIndexListSize - 1\n\
    \        val maxIndexListSize = maxIndexListSize - 1\n        val maxIndexListSize\
    \ = maxIndexListSize - 1\n        val maxIndexListSize = maxIndexListSize - 1\n\
    \        val maxIndexListSize = maxIndexListSize - 1\n        val maxIndexListSize\
    \ = maxIndexListSize - 1\n        val maxIndexListSize = maxIndexListSize - 1\n\
    \        val maxIndexListSize = maxIndexListSize ", "        val maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxListSize = mutable.ArrayBuffer.empty[Long]\n        val maxListIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxListSize = arr.length\n  \
    \      val maxListIndex = arr.indices\n        val maxListSize = arr.length\n\
    \        val maxListIndex = arr.indices\n        var maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        var maxListSize = mutable.ArrayBuffer.empty[Long]\n        var maxListIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        var maxListSize = arr.length\n  \
    \      var maxListIndex = arr.indices\n        var maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        var maxListSize = mutable.ArrayBuffer.empty[Long]\n        var maxListIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        var maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        var maxListSize = arr.length\n        var maxListIndex = arr.indices\n\
    \        var maxList = mutable.ArrayBuffer.empty[Long]\n        var maxListSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        var maxListIndex = arr.indices\n\
    \        var maxList = mutable.ArrayBuffer.empty[Long]\n        var maxListSize\
    \ = arr.length\n        var maxListIndex = arr.indices\n        var maxList =\
    \ mutable.ArrayBuffer.empty[Long]\n        var maxListSize = arr.length\n    \
    \    var maxListIndex = arr.indices\n        var maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        var maxListSize = arr.length\n        var maxListIndex = arr.indices\n\
    \        var maxList = mutable.ArrayBuffer.empty[Long]\n        var maxListSize\
    \ = arr.length\n        var maxListIndex = arr.indices\n        var maxList =\
    \ mutable.ArrayBuffer.empty[Long]\n        var maxListSize = arr.length\n    \
    \    var maxListIndex = arr.indices\n        var maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        var maxListSize = arr.length\n        var maxListIndex = arr.indices\n\
    \        var maxList = mutable.ArrayBuffer.empty[Long]\n        var maxListSize\
    \ = arr.length\n        var maxListIndex = arr.indices\n        var maxList =\
    \ mutable.ArrayBuffer.empty[Long]\n        var maxListSize = arr.length\n    \
    \    var maxListIndex = arr.indices\n        var maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        var maxListSize = arr.length\n        var maxListIndex = arr.indices\n\
    \        var maxList = mutable.ArrayBuffer.empty[Long]\n        var maxListSize\
    \ = arr.length\n        var maxListIndex = arr.indices\n        var maxList =\
    \ mutable.ArrayBuffer.empty[Long]\n        var maxListSize = arr.length\n    \
    \    var maxListIndex = arr.indices\n        var maxList = mutable.", "      \
    \  val maxList = mutable.ListBuffer.empty[Long]\n        var maxNum = arr(0)\n\
    \        for(i <- 0 until arr.length) {\n            if(arr(i) > maxNum) {\n \
    \               maxNum = arr(i)\n            }\n        }\n        for(i <- 0\
    \ until arr.length) {\n            if(arr(i) == maxNum) {\n                maxList\
    \ += arr(i)\n            }\n        }\n        if(maxList.length < k) {\n    \
    \        for(i <- 0 until k - maxList.length) {\n                maxList += maxNum\n\
    \            }\n        }\n        maxList.toList", "        val arr = arr.toList\n\
    \        val len = arr.size\n        val max = new Array[Long](k)\n        var\
    \ maxIndex = 0\n        var maxVal = arr(0)\n        var i = 0\n        while\
    \ (i < len) {\n            if (arr(i) > maxVal) {\n                maxIndex =\
    \ i\n                maxVal = arr(i)\n            }\n            i += 1\n    \
    \    }\n        val result = new Array[Long](k)\n        var j = 0\n        while\
    \ (j < k) {\n            result(j) = arr(maxIndex)\n            j += 1\n     \
    \   }\n        result", "        val max = new Array[Long](k)\n        val maxIndex\
    \ = new Array[Int](k)\n        val maxIndexSet = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSet = new mutable.HashSet[Int]()\n        val maxIndexSetSetSet\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSet = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSetSetSet = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val\
    \ maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val\
    \ maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val\
    \ maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val\
    \ maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val\
    \ maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSet", "        val\
    \ maxList = mutable.ArrayBuffer.empty[Long]\n        val maxIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxValue = mutable.ArrayBuffer.empty[Long]\n        val maxIndexList\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxValueList = mutable.ArrayBuffer.empty[Long]\n\
    \        for(i <- 0 until arr.length) {\n            val currentValue = arr(i)\n\
    \            val currentIndex = i\n            val currentMax = currentValue\n\
    \            val currentMaxIndex = i\n            val currentMaxValue = currentValue\n\
    \            for(j <- 0 until arr.length) {\n                if(j != i) {\n  \
    \                  val currentValue2 = arr(j)\n                    val currentIndex2\
    \ = j\n                    val currentMax2 = currentValue2\n                 \
    \   val currentMaxIndex2 = j\n                    val currentMaxValue2 = currentValue2\n\
    \                    if(currentMax2 < currentMax) {\n                        currentMax\
    \ = currentMax2\n                        currentMaxIndex = currentMaxIndex2\n\
    \                        currentMaxValue = currentMaxValue2\n                \
    \    }\n                    if(currentMaxIndex2 < currentMaxIndex) {\n       \
    \                 currentMaxIndex = currentMaxIndex2\n                       \
    \ currentMaxValue = currentMaxValue2\n                    }\n                \
    \    if(currentMaxValue2 < currentMaxValue) {\n                        currentMaxValue\
    \ = currentMaxValue2\n                    }\n                }\n            }\n\
    \            maxList += currentMax\n            maxIndex += currentMaxIndex\n\
    \            maxValue += currentMaxValue\n            maxIndexList += currentMaxIndex\n\
    \            maxValueList += currentMaxValue\n        }\n        val maxList2\
    \ = maxList.sortWith(_ < _)\n        val maxIndex2 = maxIndex.sortWith(_ < _)\n\
    \        val maxValue2 = maxValue.sortWith(_ < _)\n        val maxIndexList2 =\
    \ maxIndexList.sortWith(_ < _)\n        val maxValueList2 = maxValueList.sortWith(_\
    \ < _)\n        val result = new ArrayList[Long](k)\n        for(i <- 0 until\
    \ k) {\n            result(i) = maxList2(i)\n        }\n        result", "   \
    \     val maxList = mutable.ListBuffer.empty[Long]\n        val maxValue = arr.head\n\
    \        val maxIndex = arr.indexOfMax\n        for(i <- 0 until arr.length){\n\
    \            if(arr(i) > maxValue){\n                maxValue = arr(i)\n     \
    \           maxIndex = i\n            }\n        }\n        maxList += maxValue\n\
    \        for(i <- 0 until maxIndex){\n            arr(i) = arr(i) - maxValue\n\
    \            val temp = arr.take(i)\n            arr(i) = maxValue\n         \
    \   maxList += temp\n        }\n        arr", "        val arr = arr.sortBy(-_)\n\
    \        val max = arr.take(k).toList\n        val rest = arr.drop(k)\n      \
    \  rest match {\n            case Nil => max\n            case _ => maximum(max,\
    \ rest.max)\n        }", "        val arr = arr.sortBy(-_)\n        val len =\
    \ arr.length\n        val max = new Array[Long](k)\n        var i = 0\n      \
    \  while (i < k) {\n            if (arr(i) > arr(i + 1)) {\n                val\
    \ temp = arr(i)\n                arr(i) = arr(i + 1)\n                arr(i +\
    \ 1) = temp\n            }\n            i += 1\n        }\n        arr.take(k).reverse",
  "        val result = new Array[Long](k)\n        var max = 0L\n        var maxIndex\
    \ = 0\n        for(i <- 0 until arr.length) {\n            if(arr(i) > max) {\n\
    \                max = arr(i)\n                maxIndex = i\n            }\n \
    \       }\n        for(i <- 0 until k) {\n            result(i) = arr(maxIndex)\n\
    \        }\n        result", "        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        val maxK = k\n        val maxIndex = arr.length\n        val maxValue\
    \ = arr(0)\n        for(i <- 0 until maxIndex){\n            val currentValue\
    \ = arr(i)\n            if(currentValue > maxValue){\n                maxValue\
    \ = currentValue\n                maxList.clear()\n            }\n           \
    \ if(currentValue == maxValue){\n                maxList += currentValue\n   \
    \         }\n        }\n        if(maxList.size == maxK){\n            return\
    \ maxList\n        }\n        val maxList2 = mutable.ListBuffer.empty[Long]\n\
    \        val maxK2 = k\n        val maxIndex2 = arr.length\n        val maxValue2\
    \ = arr(0)\n        for(i <- 0 until maxIndex2){\n            val currentValue2\
    \ = arr(i)\n            if(currentValue2 > maxValue2){\n                maxValue2\
    \ = currentValue2\n                maxList2.clear()\n            }\n         \
    \   if(currentValue2 == maxValue2){\n                maxList2 += currentValue2\n\
    \            }\n        }\n        if(maxList2.size == maxK2){\n            return\
    \ maxList2\n        }\n        val maxList3 = mutable.ListBuffer.empty[Long]\n\
    \        val maxK3 = k\n        val maxIndex3 = arr.length\n        val maxValue3\
    \ = arr(0)\n        for(i <- 0 until maxIndex3){\n            val currentValue3\
    \ = arr(i)\n            if(currentValue3 > maxValue3){\n                maxValue3\
    \ = currentValue3\n                maxList3.clear()\n            }\n         \
    \   if(currentValue3 == maxValue3){\n                maxList3 += currentValue3\n\
    \            }\n        }\n        if(maxList3.size == maxK3){\n            return\
    \ maxList3\n        }\n        val maxList4 = mutable.ListBuffer.empty[Long]\n\
    \        val maxK4 = k\n        val maxIndex4 = arr.length\n        val maxValue4\
    \ = arr(0)\n        for(i <- 0 until maxIndex4){\n            val currentValue4\
    \ = arr(i)\n            if(currentValue4 > maxValue4){\n                maxValue4\
    \ = currentValue4\n                maxList4.clear()\n            }\n         \
    \   if(currentValue4 == maxValue4){\n                maxList4 += currentValue4\n\
    \            }\n        }\n        if(maxList4.size == maxK4){\n            return\
    \ maxList4\n        }\n        val maxList5 = mutable.ListBuffer.empty[Long]\n\
    \        val maxK5 = k\n        val maxIndex5 = arr.length\n        val maxValue5\
    \ = arr(0)\n        for(i <- 0 until ", "        val arr = arr.sortBy(-_)\n  \
    \      val max = new mutable.PriorityQueue[Long]()\n        val maxIndex = new\
    \ mutable.PriorityQueue[Int]()\n        val maxIndexMap = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap2 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap3 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap4\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap5 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap6 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap7 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap8\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap9 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap10 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap11 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap12\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap13 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap14 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap15 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap16\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap17 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap18 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap19 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap20\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap21 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap22 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap23 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap24\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap25 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap26 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap27 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap28\
    \ = new mutable.HashMap[Int, Int]()", "        val result = new Array[Long](k)\n\
    \        var max = 0L\n        var i = 0\n        while (i < arr.length) {\n \
    \           if (arr(i) > max) {\n                max = arr(i)\n            }\n\
    \            i += 1\n        }\n        var j = 0\n        while (j < k) {\n \
    \           if (max < result[j]) {\n                result(j) = max\n        \
    \    }\n            j += 1\n        }\n        result", "        val max = new\
    \ mutable.PriorityQueue[Long]()\n        val maxIndex = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndexMap = new mutable.HashMap[Long, Long]()\n        val maxIndexMap2\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap3 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap4 = new mutable.HashMap[Long, Long]()\n    \
    \    val maxIndexMap5 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap6\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap7 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap8 = new mutable.HashMap[Long, Long]()\n    \
    \    val maxIndexMap9 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap10\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap11 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap12 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap13 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap14\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap15 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap16 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap17 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap18\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap19 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap20 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap21 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap22\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap23 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap24 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap25 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap26\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap27 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap28 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap29 = new mutable.", "        val result = new Array[Long](k)\n\
    \        var max = 0L\n        var maxIndex = 0\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) > max) {\n                max = arr(i)\n         \
    \       maxIndex = i\n            }\n        }\n        for (i <- 0 until k) {\n\
    \            result(i) = arr(maxIndex)\n            maxIndex += 1\n        }\n\
    \        result", "        val result = new Array[Long](k)\n        var max =\
    \ 0L\n        var maxIndex = 0\n        var index = 0\n        for(i <- 0 until\
    \ arr.length) {\n            if(max < arr(i)) {\n                max = arr(i)\n\
    \                maxIndex = i\n            }\n        }\n        for(i <- 0 until\
    \ arr.length) {\n            if(arr(i) == max) {\n                result(index)\
    \ = arr(i)\n                index += 1\n            }\n        }\n        result",
  "        val result = new mutable.ListBuffer[Long]()\n        val max = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndex = new mutable.PriorityQueue[Long]()\n        val maxValue\
    \ = new mutable.PriorityQueue[Long]()\n        val maxIndexValue = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndexValue2 = new mutable.PriorityQueue[Long]()\n        val maxIndexValue3\
    \ = new mutable.PriorityQueue[Long]()\n        val maxIndexValue4 = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndexValue5 = new mutable.PriorityQueue[Long]()\n        val maxIndexValue6\
    \ = new mutable.PriorityQueue[Long]()\n        val maxIndexValue7 = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndexValue8 = new mutable.PriorityQueue[Long]()\n        val maxIndexValue9\
    \ = new mutable.PriorityQueue[Long]()\n        val maxIndexValue10 = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndexValue11 = new mutable.PriorityQueue[Long]()\n        val\
    \ maxIndexValue12 = new mutable.PriorityQueue[Long]()\n        val maxIndexValue13\
    \ = new mutable.PriorityQueue[Long]()\n        val maxIndexValue14 = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndexValue15 = new mutable.PriorityQueue[Long]()\n        val\
    \ maxIndexValue16 = new mutable.PriorityQueue[Long]()\n        val maxIndexValue17\
    \ = new mutable.PriorityQueue[Long]()\n        val maxIndexValue18 = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndexValue19 = new mutable.PriorityQueue[Long]()\n        val\
    \ maxIndexValue20 = new mutable.PriorityQueue[Long]()\n        val maxIndexValue21\
    \ = new mutable.PriorityQueue[Long]()\n        val maxIndexValue22 = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndexValue23 = new mutable.PriorityQueue[Long]()\n        val\
    \ maxIndexValue24 = new mutable.PriorityQueue[Long]()\n        val maxIndexValue25\
    \ = new mutable.PriorityQueue[Long]()\n        val maxIndexValue26 = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndexValue27 = new mutable.PriorityQueue[Long]()\n        val\
    \ maxIndexValue28 = new mutable.PriorityQueue[Long]()\n        val maxIndexValue29\
    \ = new mutable.Priority", "        val arr = arr.sortBy(x => x)\n        val\
    \ max = arr.take(k).toList\n        val rest = arr.drop(k)\n        rest match\
    \ {\n            case Nil => max\n            case x :: xs => maximum(x :: xs,\
    \ k)\n        }", "        val maxList = mutable.ArrayBuffer(arr)\n        val\
    \ maxLength = arr.length\n        val maxLengthK = maxLength - k\n        val\
    \ maxLengthKList = maxList.take(maxLengthK).toList\n        val maxLengthKListLength\
    \ = maxLengthKList.length\n        val maxLengthKListLength = maxLengthKListLength\
    \ - 1\n        val maxLengthKListLength = maxLengthKListLength - 1\n        val\
    \ maxLengthKListLength = maxLengthKListLength - 1\n        val maxLengthKListLength\
    \ = maxLengthKListLength - 1\n        val maxLengthKListLength = maxLengthKListLength\
    \ - 1\n        val maxLengthKListLength = maxLengthKListLength - 1\n        val\
    \ maxLengthKListLength = maxLengthKListLength - 1\n        val maxLengthKListLength\
    \ = maxLengthKListLength - 1\n        val maxLengthKListLength = maxLengthKListLength\
    \ - 1\n        val maxLengthKListLength = maxLengthKListLength - 1\n        val\
    \ maxLengthKListLength = maxLengthKListLength - 1\n        val maxLengthKListLength\
    \ = maxLengthKListLength - 1\n        val maxLengthKListLength = maxLengthKListLength\
    \ - 1\n        val maxLengthKListLength = maxLengthKListLength - 1\n        val\
    \ maxLengthKListLength = maxLengthKListLength - 1\n        val maxLengthKListLength\
    \ = maxLengthKListLength - 1\n        val maxLengthKListLength = maxLengthKListLength\
    \ - 1\n        val maxLengthKListLength = maxLengthKListLength - 1\n        val\
    \ maxLengthKListLength = maxLengthKListLength - 1\n        val maxLengthKListLength\
    \ = maxLengthKListLength - 1\n        val maxLengthKListLength = maxLengthKListLength\
    \ - 1\n        val maxLengthKListLength = maxLengthKListLength - 1\n        val\
    \ maxLengthKListLength = maxLengthKListLength - 1\n        val maxLengthKListLength\
    \ = maxLengthKListLength - 1\n        val maxLengthKListLength = maxLengthKListLength\
    \ - 1\n        val maxLengthKListLength = maxLengthKListLength - 1\n        val\
    \ maxLengthKListLength = maxLengthKListLength - 1\n        val maxLengthKListLength\
    \ = maxLengthKListLength - 1\n        val maxLengthKListLength = maxLengthKListLength\
    \ - 1\n        val maxLengthKListLength = maxLengthKListLength - 1\n        val\
    \ maxLengthKListLength = maxLengthKListLength - 1\n        val maxLengthKListLength\
    \ = maxLengthKListLength - 1\n        val maxLengthKListLength = ", "        val\
    \ maxList = mutable.ArrayBuffer.empty[Long]\n        var maxValue = arr(0)\n \
    \       var maxIndex = 0\n        for (i <- 0 until arr.length) {\n          \
    \  if (arr(i) > maxValue) {\n                maxValue = arr(i)\n             \
    \   maxIndex = i\n            }\n        }\n        maxList += maxValue\n    \
    \    val newList = arr.take(maxIndex+1).drop(maxIndex).take(k).toList\n      \
    \  newList.sortWith(_ > _)", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var max = 0L\n        var i = 0\n        while (i < arr.length) {\n \
    \           if (arr(i) > max) {\n                max = arr(i)\n            }\n\
    \            i += 1\n        }\n        var j = 0\n        while (j < arr.length)\
    \ {\n            if (arr(j) < max) {\n                result.add(arr(j))\n   \
    \         }\n            j += 1\n        }\n        result.take(k).toList", " \
    \       val max = new Array[Long](k)\n        var maxIndex = 0\n        var maxValue\
    \ = arr(0)\n        for(i <- 0 until arr.length) {\n            if(arr(i) > maxValue)\
    \ {\n                maxValue = arr(i)\n                maxIndex = i\n       \
    \     }\n        }\n        for(i <- 0 until k) {\n            max(i) = arr(maxIndex)\n\
    \        }\n        return max", "        val arr = arr.sortBy(-_)\n        val\
    \ max = new Array[Long](k)\n        val maxIndex = new Array[Int](k)\n       \
    \ var maxIndexIndex = 0\n        var i = 0\n        while (i < k) {\n        \
    \    if (arr(i) > arr(i + 1)) {\n                max(i) = arr(i)\n           \
    \     maxIndex(i) = i\n                maxIndexIndex = i\n            }\n    \
    \        i += 1\n        }\n        var j = 0\n        while (j < k) {\n     \
    \       if (maxIndexIndex == j) maxIndex(j) = 0\n            else {\n        \
    \        if (arr(maxIndexIndex) < arr(j)) {\n                    maxIndex(j) =\
    \ 0\n                } else {\n                    maxIndex(j) = 1\n         \
    \       }\n            }\n            j += 1\n        }\n        val result =\
    \ new Array[Long](k)\n        var k = 0\n        while (k <= maxIndex.length -\
    \ 1) {\n            result(k) = arr(maxIndex(k))\n            k += 1\n       \
    \ }\n        result", "        val maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxLength = arr.length\n        val maxK = k\n        val maxIndex\
    \ = arr.indexWhere(x => x >= 0)\n        val maxValue = arr.max\n        val maxIndexList\
    \ = arr.toList.sortWith(_ < _)\n        val maxIndexListLength = maxIndexList.length\n\
    \        val maxIndexListLength = maxIndexListLength - maxK\n        val maxIndexListLength\
    \ = maxIndexListLength + 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexList", "        val arr = arr.sortWith(_ < _)\n   \
    \     val max = new Array[Long](k)\n        var i = 0\n        var j = 0\n   \
    \     var maxIndex = 0\n        while(i < arr.length && j < k) {\n           \
    \ if(arr(i) > arr(j)) {\n                max(i) = arr(i)\n                i +=\
    \ 1\n            } else {\n                max(j) = arr(j)\n                j\
    \ += 1\n            }\n        }\n        while(i < arr.length) {\n          \
    \  max(i) = arr(i)\n            i += 1\n        }\n        while(j < k) {\n  \
    \          max(j) = arr(j)\n            j += 1\n        }\n        max.toList",
  "        val max = new mutable.PriorityQueue[Long]()\n        val maxIndex = new\
    \ mutable.PriorityQueue[Long]()\n        val maxIndexMap = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap2 = new mutable.HashMap[Long, Long]()\n    \
    \    val maxIndexMap3 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap4\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap5 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap6 = new mutable.HashMap[Long, Long]()\n    \
    \    val maxIndexMap7 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap8\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap9 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap10 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap11 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap12\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap13 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap14 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap15 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap16\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap17 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap18 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap19 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap20\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap21 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap22 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap23 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap24\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap25 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap26 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap27 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap28\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap29 = new mutable.",
  "        val result = new Array[Long](k)\n        var max = 0\n        var maxIndex\
    \ = 0\n        var index = 0\n        for(i <- 0 until arr.length) {\n       \
    \     val value = arr(i)\n            if(value > max) {\n                max =\
    \ value\n                maxIndex = i\n            }\n        }\n        for(i\
    \ <- 0 until arr.length) {\n            val value = arr(i)\n            if(value\
    \ == max) {\n                result(index) = value\n                index += 1\n\
    \            }\n        }\n        result", "        val arr = arr.sortBy(-_)\n\
    \        val max = new Array[Long](k)\n        var i = 0\n        var j = 0\n\
    \        var maxIndex = 0\n        while (i < arr.length) {\n            if (arr(i)\
    \ > arr(maxIndex)) {\n                maxIndex = i\n            }\n          \
    \  i += 1\n        }\n        val maxList = arr.take(maxIndex)\n        val maxList2\
    \ = arr.drop(maxIndex)\n        val maxList3 = maxList2.sortBy(-_)\n        val\
    \ maxList4 = maxList3.take(k)\n        val maxList5 = maxList3.drop(k)\n     \
    \   val maxList6 = maxList4.sortBy(-_)\n        val maxList7 = maxList6.take(k)\n\
    \        val maxList8 = maxList6.drop(k)\n        val maxList9 = maxList7.sortBy(-_)\n\
    \        val maxList10 = maxList9.take(k)\n        val maxList11 = maxList9.drop(k)\n\
    \        val maxList12 = maxList10.sortBy(-_)\n        val maxList13 = maxList12.take(k)\n\
    \        val maxList14 = maxList12.drop(k)\n        val maxList15 = maxList13.sortBy(-_)\n\
    \        val maxList16 = maxList15.take(k)\n        val maxList17 = maxList15.drop(k)\n\
    \        val maxList18 = maxList16.sortBy(-_)\n        val maxList19 = maxList18.take(k)\n\
    \        val maxList20 = maxList18.drop(k)\n        val maxList21 = maxList19.sortBy(-_)\n\
    \        val maxList22 = maxList21.take(k)\n        val maxList23 = maxList21.drop(k)\n\
    \        val maxList24 = maxList22.sortBy(-_)\n        val maxList25 = maxList24.take(k)\n\
    \        val maxList26 = maxList24.drop(k)\n        val maxList27 = maxList25.sortBy(-_)\n\
    \        val maxList28 = maxList26.take(k)\n        val maxList29 = maxList26.drop(k)\n\
    \        val maxList30 = maxList27.sortBy(-_)\n        val maxList31 = maxList28.take(k)\n\
    \        val maxList32 = maxList28.drop(k)\n        val maxList33 = maxList30.sortBy(-_)\n\
    \        val maxList34 = maxList31.take(k)\n        val maxList", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        val max = new mutable.PriorityQueue[Long]()\n\
    \        val min = new mutable.PriorityQueue[Long]()\n        val maxIndex = new\
    \ mutable.PriorityQueue[Int]()\n        val minIndex = new mutable.PriorityQueue[Int]()\n\
    \        val maxCount = new mutable.PriorityQueue[Int]()\n        val minCount\
    \ = new mutable.PriorityQueue[Int]()\n        val maxCountIndex = new mutable.PriorityQueue[Int]()\n\
    \        val minCountIndex = new mutable.PriorityQueue[Int]()\n        val maxCountMinCount\
    \ = new mutable.PriorityQueue[Int]()\n        val minCountMaxCount = new mutable.PriorityQueue[Int]()\n\
    \        val maxCountMinCountIndex = new mutable.PriorityQueue[Int]()\n      \
    \  val minCountMaxCountIndex = new mutable.PriorityQueue[Int]()\n        val maxCountMinCountMinCount\
    \ = new mutable.PriorityQueue[Int]()\n        val minCountMaxCountMaxCount = new\
    \ mutable.PriorityQueue[Int]()\n        val maxCountMinCountMinCountIndex = new\
    \ mutable.PriorityQueue[Int]()\n        val minCountMaxCountMaxCountIndex = new\
    \ mutable.PriorityQueue[Int]()\n        val maxCountMinCountMinCountMinCount =\
    \ new mutable.PriorityQueue[Int]()\n        val minCountMaxCountMaxCountMaxCount\
    \ = new mutable.PriorityQueue[Int]()\n        val maxCountMinCountMinCountMinCountIndex\
    \ = new mutable.PriorityQueue[Int]()\n        val minCountMaxCountMaxCountMaxCountIndex\
    \ = new mutable.PriorityQueue[Int]()\n        val maxCountMinCountMinCountMinCountMinCount\
    \ = new mutable.PriorityQueue[Int]()\n        val minCountMaxCountMaxCountMaxCountMaxCount\
    \ = new mutable.PriorityQueue[Int]()\n        val maxCountMinCountMinCountMinCountMinCountIndex\
    \ = new mutable.PriorityQueue[Int]()\n        val minCountMaxCountMaxCountMaxCountMaxCountIndex\
    \ = new mutable.PriorityQueue[Int]()\n        val maxCountMinCountMinCountMinCountMinCountMinCount\
    \ = new mutable.PriorityQueue[Int]()\n        val minCountMaxCountMaxCountMaxCountMaxCountMaxCount\
    \ = new mutable.PriorityQueue[Int]()\n        val maxCountMinCountMinCountMinCountMinCountMinCountIndex\
    \ = new mutable.PriorityQueue[Int]()\n        val ", "        val max = new mutable.ListBuffer[Long]()\n\
    \        val maxIndex = new mutable.ListBuffer[Int]()\n        val maxIndexCount\
    \ = new mutable.ListBuffer[Int]()\n        val maxIndexCountMap = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexCountMap2 = new mutable.HashMap[Int, Int]()\n  \
    \      val maxIndexCountMap3 = new mutable.HashMap[Int, Int]()\n        val maxIndexCountMap4\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexCountMap5 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexCountMap6 = new mutable.HashMap[Int, Int]()\n  \
    \      val maxIndexCountMap7 = new mutable.HashMap[Int, Int]()\n        val maxIndexCountMap8\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexCountMap9 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexCountMap10 = new mutable.HashMap[Int, Int]()\n \
    \       val maxIndexCountMap11 = new mutable.HashMap[Int, Int]()\n        val\
    \ maxIndexCountMap12 = new mutable.HashMap[Int, Int]()\n        val maxIndexCountMap13\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexCountMap14 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexCountMap15 = new mutable.HashMap[Int, Int]()\n \
    \       val maxIndexCountMap16 = new mutable.HashMap[Int, Int]()\n        val\
    \ maxIndexCountMap17 = new mutable.HashMap[Int, Int]()\n        val maxIndexCountMap18\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexCountMap19 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexCountMap20 = new mutable.HashMap[Int, Int]()\n \
    \       val maxIndexCountMap21 = new mutable.HashMap[Int, Int]()\n        val\
    \ maxIndexCountMap22 = new mutable.HashMap[Int, Int]()\n        val maxIndexCountMap23\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexCountMap24 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexCountMap25 = new mutable.HashMap[Int, Int]()\n \
    \       val maxIndexCountMap26 = new mutable.HashMap[Int, Int]()\n        val ",
  "        val max = new mutable.PriorityQueue[Long]()\n        val maxIndex = new\
    \ mutable.PriorityQueue[Int]()\n        val maxIndexMap = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap2 = new mutable.HashMap[Int, Long]()\n      \
    \  val maxIndexMap3 = new mutable.HashMap[Int, Long]()\n        val maxIndexMap4\
    \ = new mutable.HashMap[Int, Long]()\n        val maxIndexMap5 = new mutable.HashMap[Int,\
    \ Long]()\n        val maxIndexMap6 = new mutable.HashMap[Int, Long]()\n     \
    \   val maxIndexMap7 = new mutable.HashMap[Int, Long]()\n        val maxIndexMap8\
    \ = new mutable.HashMap[Int, Long]()\n        val maxIndexMap9 = new mutable.HashMap[Int,\
    \ Long]()\n        val maxIndexMap10 = new mutable.HashMap[Int, Long]()\n    \
    \    val maxIndexMap11 = new mutable.HashMap[Int, Long]()\n        val maxIndexMap12\
    \ = new mutable.HashMap[Int, Long]()\n        val maxIndexMap13 = new mutable.HashMap[Int,\
    \ Long]()\n        val maxIndexMap14 = new mutable.HashMap[Int, Long]()\n    \
    \    val maxIndexMap15 = new mutable.HashMap[Int, Long]()\n        val maxIndexMap16\
    \ = new mutable.HashMap[Int, Long]()\n        val maxIndexMap17 = new mutable.HashMap[Int,\
    \ Long]()\n        val maxIndexMap18 = new mutable.HashMap[Int, Long]()\n    \
    \    val maxIndexMap19 = new mutable.HashMap[Int, Long]()\n        val maxIndexMap20\
    \ = new mutable.HashMap[Int, Long]()\n        val maxIndexMap21 = new mutable.HashMap[Int,\
    \ Long]()\n        val maxIndexMap22 = new mutable.HashMap[Int, Long]()\n    \
    \    val maxIndexMap23 = new mutable.HashMap[Int, Long]()\n        val maxIndexMap24\
    \ = new mutable.HashMap[Int, Long]()\n        val maxIndexMap25 = new mutable.HashMap[Int,\
    \ Long]()\n        val maxIndexMap26 = new mutable.HashMap[Int, Long]()\n    \
    \    val maxIndexMap27 = new mutable.HashMap[Int, Long]()\n        val maxIndexMap28\
    \ = new mutable.HashMap[Int, Long]()\n        val maxIndexMap29 = new mutable.",
  "        val maxList = mutable.ArrayBuffer.empty[Long]\n        val maxLength =\
    \ arr.length\n        val maxK = k\n        val maxElement = arr.max\n       \
    \ val maxIndex = arr.indexWhere(x => x == maxElement)\n        val maxIndex =\
    \ maxIndex.toInt\n        val maxElementIndex = maxIndex - k\n        val maxElement\
    \ = arr(maxIndex)\n        val maxElementIndex = maxElementIndex.toInt\n     \
    \   val maxElementIndex = maxElementIndex + 1\n        val maxElementIndex = maxElementIndex\
    \ - 1\n        val maxElementIndex = maxElementIndex - 1\n        val maxElementIndex\
    \ = maxElementIndex - 1\n        val maxElementIndex = maxElementIndex - 1\n \
    \       val maxElementIndex = maxElementIndex - 1\n        val maxElementIndex\
    \ = maxElementIndex - 1\n        val maxElementIndex = maxElementIndex - 1\n \
    \       val maxElementIndex = maxElementIndex - 1\n        val maxElementIndex\
    \ = maxElementIndex - 1\n        val maxElementIndex = maxElementIndex - 1\n \
    \       val maxElementIndex = maxElementIndex - 1\n        val maxElementIndex\
    \ = maxElementIndex - 1\n        val maxElementIndex = maxElementIndex - 1\n \
    \       val maxElementIndex = maxElementIndex - 1\n        val maxElementIndex\
    \ = maxElementIndex - 1\n        val maxElementIndex = maxElementIndex - 1\n \
    \       val maxElementIndex = maxElementIndex - 1\n        val maxElementIndex\
    \ = maxElementIndex - 1\n        val maxElementIndex = maxElementIndex - 1\n \
    \       val maxElementIndex = maxElementIndex - 1\n        val maxElementIndex\
    \ = maxElementIndex - 1\n        val maxElementIndex = maxElementIndex - 1\n \
    \       val maxElementIndex = maxElementIndex - 1\n        val maxElementIndex\
    \ = maxElementIndex - 1\n        val maxElementIndex = maxElementIndex - 1\n \
    \       val maxElementIndex = maxElementIndex - 1\n        val maxElementIndex\
    \ = maxElementIndex - 1\n        val maxElementIndex = maxElementIndex - 1\n \
    \       val maxElementIndex = maxElementIndex - 1\n        val maxElementIndex\
    \ = maxElementIndex - 1\n        val maxElementIndex = maxElementIndex - 1\n \
    \       val maxElementIndex = maxElementIndex - 1\n        val maxElementIndex\
    \ = maxElementIndex - 1\n        val maxElementIndex = maxElementIndex - 1\n \
    \       val maxElementIndex = maxElementIndex - 1\n        val maxElementIndex\
    \ = maxElementIndex - 1\n        val maxElementIndex = maxElementIndex - 1\n \
    \       val maxElementIndex = maxElementIndex - 1\n        val maxElementIndex\
    \ = maxElementIndex - 1\n        val maxElementIndex = maxElementIndex - 1\n \
    \       val maxElementIndex = maxElementIndex - 1\n        val ", "        val\
    \ result = new Array[Long](k)\n        val max = new Array[Long](k)\n        val\
    \ maxIndex = new Array[Int](k)\n        val maxIndexSet = new HashSet[Int]()\n\
    \        val maxIndexSetSet = new HashSet[Int]()\n        val maxIndexSetSetSet\
    \ = new HashSet[Int]()\n        val maxIndexSetSetSetSet = new HashSet[Int]()\n\
    \        val maxIndexSetSetSetSet = new HashSet[Int]()\n        val maxIndexSetSetSetSetSet\
    \ = new HashSet[Int]()\n        val maxIndexSetSetSetSetSet = new HashSet[Int]()\n\
    \        val maxIndexSetSetSetSetSet = new HashSet[Int]()\n        val maxIndexSetSetSetSetSet\
    \ = new HashSet[Int]()\n        val maxIndexSetSetSetSetSet = new HashSet[Int]()\n\
    \        val maxIndexSetSetSetSetSet = new HashSet[Int]()\n        val maxIndexSetSetSetSetSet\
    \ = new HashSet[Int]()\n        val maxIndexSetSetSetSetSet = new HashSet[Int]()\n\
    \        val maxIndexSetSetSetSetSet = new HashSet[Int]()\n        val maxIndexSetSetSetSetSet\
    \ = new HashSet[Int]()\n        val maxIndexSetSetSetSetSet = new HashSet[Int]()\n\
    \        val maxIndexSetSetSetSetSet = new HashSet[Int]()\n        val maxIndexSetSetSetSetSet\
    \ = new HashSet[Int]()\n        val maxIndexSetSetSetSetSet = new HashSet[Int]()\n\
    \        val maxIndexSetSetSetSetSet = new HashSet[Int]()\n        val maxIndexSetSetSetSetSet\
    \ = new HashSet[Int]()\n        val maxIndexSetSetSetSetSet = new HashSet[Int]()\n\
    \        val maxIndexSetSetSetSetSet = new HashSet[Int]()\n        val maxIndexSetSetSetSetSet\
    \ = new HashSet[Int]()\n        val maxIndexSetSetSetSetSet = new HashSet[Int]()\n\
    \        val maxIndexSetSetSetSetSet = new HashSet[Int]()\n        val maxIndexSetSetSetSetSet\
    \ = new HashSet[Int]()\n        val maxIndexSetSetSetSetSet = new HashSet[Int]()\n\
    \        val maxIndexSetSetSetSetSet = new HashSet[Int]()", "        val maxList\
    \ = mutable.ListBuffer.empty[Long]\n        val maxValue = arr.head\n        val\
    \ maxIndex = arr.indexOfMax\n        for(i <- 0 until arr.length){\n         \
    \   if(arr(i) > maxValue){\n                maxValue = arr(i)\n              \
    \  maxIndex = i\n            }\n        }\n        maxList += maxValue\n     \
    \   val newList = arr.drop(maxIndex + 1)\n        val newMaxList = newList.take(k)\n\
    \        newMaxList += maxValue\n        newMaxList"]
stop_tokens:
- "\n    }\n"
