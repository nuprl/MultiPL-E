name: HumanEval_0_has_close_elements
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Check if in given list of numbers, are any two numbers closer to each other\
  \ than\n    // given threshold.\n    // >>> has_close_elements([1.0, 2.0, 3.0],\
  \ 0.5)\n    // False\n    // >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0],\
  \ 0.3)\n    // True\n    def hasCloseElements(numbers : List[Float], threshold :\
  \ Float) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(hasCloseElements((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)), (0.3f))\
  \ == (true));\n    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
  \ 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)), (0.05f)) == (false));\n\
  \    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat,\
  \ 4.0f.toFloat, 5.0f.toFloat)), (0.95f)) == (true));\n    assert(hasCloseElements((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat)), (0.8f)) == (false));\n\
  \    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
  \ 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)), (0.1f)) == (true));\n    assert(hasCloseElements((List[Float](1.1f.toFloat,\
  \ 2.2f.toFloat, 3.1f.toFloat, 4.1f.toFloat, 5.1f.toFloat)), (1.0f)) == (true));\n\
  \    assert(hasCloseElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
  \ 4.1f.toFloat, 5.1f.toFloat)), (0.5f)) == (false));\n    }\n\n}\n"
completions: ["        val nums = numbers.toList\n        val numsSorted = nums.sortWith(_\
    \ < _)\n        val threshold = threshold * threshold\n        val numsSortedWithThreshold\
    \ = numsSorted.filter(_ > threshold)\n        numsSortedWithThreshold.size ==\
    \ nums.size", "        val minDistance = numbers.min\n        val maxDistance\
    \ = numbers.max\n        val minDistanceIndex = numbers.indexOf(minDistance)\n\
    \        val maxDistanceIndex = numbers.indexOf(maxDistance)\n        val minDistanceDistance\
    \ = minDistance - numbers(minDistanceIndex)\n        val maxDistanceDistance =\
    \ maxDistance - numbers(maxDistanceIndex)\n        val minDistanceDistanceSquared\
    \ = minDistanceDistance * minDistanceDistance\n        val maxDistanceDistanceSquared\
    \ = maxDistanceDistance * maxDistanceDistance\n        val threshold = threshold\
    \ * threshold\n        val minDistanceDistanceSquaredThreshold = minDistanceDistanceSquared\
    \ * threshold\n        val maxDistanceDistanceSquaredThreshold = maxDistanceDistanceSquared\
    \ * threshold\n        val minDistanceDistanceSquaredThresholdIndex = numbers.indexOf(minDistanceDistanceSquaredThreshold)\n\
    \        val maxDistanceDistanceSquaredThresholdIndex = numbers.indexOf(maxDistanceDistanceSquaredThreshold)\n\
    \        val minDistanceDistanceSquaredThresholdIndexInRange = minDistanceDistanceSquaredThresholdIndex\
    \ >= 0 && minDistanceDistanceSquaredThresholdIndex < numbers.length\n        val\
    \ maxDistanceDistanceSquaredThresholdIndexInRange = maxDistanceDistanceSquaredThresholdIndex\
    \ >= 0 && maxDistanceDistanceSquaredThresholdIndex < numbers.length\n        val\
    \ minDistanceDistanceSquaredThresholdIndexOutOfRange = minDistanceDistanceSquaredThresholdIndex\
    \ < 0\n        val maxDistanceDistanceSquaredThresholdIndexOutOfRange = maxDistanceDistanceSquaredThresholdIndex\
    \ < 0\n        val minDistanceDistanceSquaredThresholdIndexOutOfRangeOrZero =\
    \ minDistanceDistanceSquaredThresholdIndex == 0\n        val maxDistanceDistanceSquaredThresholdIndexOutOfRangeOrZero\
    \ = maxDistanceDistanceSquaredThresholdIndex == 0\n        val minDistanceDistanceSquaredThresholdIndexOutOfRangeOrZeroOrNegative\
    \ = minDistanceDistanceSquaredThresholdIndex < 0\n        val maxDistanceDistanceSquaredThresholdIndexOutOfRangeOrZeroOrNegative\
    \ = maxDistanceDistanceSquaredThresholdIndex < 0\n        val minDistanceDistanceSquaredThresholdIndexOutOfRangeOrZeroOrNegativeOrZero\
    \ = minDistanceDistanceSquaredThresholdIndex == 0\n        val maxDistanceDistanceSquaredThresholdIndexOutOfRangeOrZeroOrNegativeOrZero\
    \ = maxDistanceDistanceSquaredThresholdIndex == 0\n        val minDistanceDistanceSquaredThresholdIndexOutOfRangeOrZeroOrNegativeOrZeroOrNegative\
    \ = minDistanceDistanceSquaredThresholdIndex < 0\n        val maxDistanceDistanceSquaredThresholdIndexOutOfRangeOrZeroOrNegativeOrZeroOrNegative\
    \ = maxDistanceDistanceSquaredThresholdIndex < 0\n        val minDistanceDistance",
  "        val sortedNumbers = numbers.toList.sortWith(_ < _)\n        val closeNumbers\
    \ = sortedNumbers.takeWhile(_ < threshold)\n        val closeNumbersSet = closeNumbers.toSet\n\
    \        val numberSet = sortedNumbers.toSet\n        closeNumbersSet.subsetOf(numberSet)",
  "        val distances = numbers.map(x => Math.abs(x - threshold))\n        val\
    \ minDistance = distances.min\n        distances.forall(x => x == minDistance)",
  "        val sortedNumbers = numbers.sorted\n        val closeElements = mutable.HashSet[Float]()\n\
    \        val closeElementsCount = mutable.HashMap[Float, Int]()\n        val closeElementsCount2\
    \ = mutable.HashMap[Float, Int]()\n        val closeElementsCount3 = mutable.HashMap[Float,\
    \ Int]()\n        val closeElementsCount4 = mutable.HashMap[Float, Int]()\n  \
    \      val closeElementsCount5 = mutable.HashMap[Float, Int]()\n        val closeElementsCount6\
    \ = mutable.HashMap[Float, Int]()\n        val closeElementsCount7 = mutable.HashMap[Float,\
    \ Int]()\n        val closeElementsCount8 = mutable.HashMap[Float, Int]()\n  \
    \      val closeElementsCount9 = mutable.HashMap[Float, Int]()\n        val closeElementsCount10\
    \ = mutable.HashMap[Float, Int]()\n        val closeElementsCount11 = mutable.HashMap[Float,\
    \ Int]()\n        val closeElementsCount12 = mutable.HashMap[Float, Int]()\n \
    \       val closeElementsCount13 = mutable.HashMap[Float, Int]()\n        val\
    \ closeElementsCount14 = mutable.HashMap[Float, Int]()\n        val closeElementsCount15\
    \ = mutable.HashMap[Float, Int]()\n        val closeElementsCount16 = mutable.HashMap[Float,\
    \ Int]()\n        val closeElementsCount17 = mutable.HashMap[Float, Int]()\n \
    \       val closeElementsCount18 = mutable.HashMap[Float, Int]()\n        val\
    \ closeElementsCount19 = mutable.HashMap[Float, Int]()\n        val closeElementsCount20\
    \ = mutable.HashMap[Float, Int]()\n        val closeElementsCount21 = mutable.HashMap[Float,\
    \ Int]()\n        val closeElementsCount22 = mutable.HashMap[Float, Int]()\n \
    \       val closeElementsCount23 = mutable.HashMap[Float, Int]()\n        val\
    \ closeElementsCount24 = mutable.HashMap[Float, Int]()\n        val closeElementsCount25\
    \ = mutable.HashMap[Float, Int]()\n        val closeElementsCount26 = mutable.HashMap[Float,\
    \ Int]()\n        val closeElementsCount27 = mutable.HashMap[Float, Int]()\n \
    \       val closeElementsCount28 = mutable.HashMap[Float, Int]()", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val diffs = sortedNumbers.zip(sortedNumbers.tail).map\
    \ { case (first, second) =>\n            abs(first - second)\n        }\n    \
    \    diffs.min < threshold", "        val distances = numbers.map(x => Math.abs(x\
    \ - threshold))\n        distances.forall(x => x < threshold)", "        val distances\
    \ = numbers.map(x => abs(x - threshold))\n        distances.min < distances.max",
  "        val distances = numbers.map(x => (x - threshold).abs)\n        val minDistance\
    \ = distances.min\n        distances.forall(x => x < minDistance)", "        val\
    \ nums = numbers.toSet\n        val numsSet = nums.toList\n        val numsSetSize\
    \ = numsSet.size\n        val numsSetIterator = numsSet.iterator\n        val\
    \ numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val ", "        val sortedNumbers = numbers.sorted\n        val closeElements\
    \ = mutable.Set[Float]()\n        var currentClose = sortedNumbers.head\n    \
    \    var currentCloseIndex = sortedNumbers.indexOf(0)\n        var currentCloseIndex\
    \ = sortedNumbers.indexOf(0)\n        var currentCloseIndex = sortedNumbers.indexOf(0)\n\
    \        var currentCloseIndex = sortedNumbers.indexOf(0)\n        var currentCloseIndex\
    \ = sortedNumbers.indexOf(0)\n        var currentCloseIndex = sortedNumbers.indexOf(0)\n\
    \        var currentCloseIndex = sortedNumbers.indexOf(0)\n        var currentCloseIndex\
    \ = sortedNumbers.indexOf(0)\n        var currentCloseIndex = sortedNumbers.indexOf(0)\n\
    \        var currentCloseIndex = sortedNumbers.indexOf(0)\n        var currentCloseIndex\
    \ = sortedNumbers.indexOf(0)\n        var currentCloseIndex = sortedNumbers.indexOf(0)\n\
    \        var currentCloseIndex = sortedNumbers.indexOf(0)\n        var currentCloseIndex\
    \ = sortedNumbers.indexOf(0)\n        var currentCloseIndex = sortedNumbers.indexOf(0)\n\
    \        var currentCloseIndex = sortedNumbers.indexOf(0)\n        var currentCloseIndex\
    \ = sortedNumbers.indexOf(0)\n        var currentCloseIndex = sortedNumbers.indexOf(0)\n\
    \        var currentCloseIndex = sortedNumbers.indexOf(0)\n        var currentCloseIndex\
    \ = sortedNumbers.indexOf(0)\n        var currentCloseIndex = sortedNumbers.indexOf(0)\n\
    \        var currentCloseIndex = sortedNumbers.indexOf(0)\n        var currentCloseIndex\
    \ = sortedNumbers.indexOf(0)\n        var currentCloseIndex = sortedNumbers.indexOf(0)\n\
    \        var currentCloseIndex = sortedNumbers.indexOf(0)\n        var currentCloseIndex\
    \ = sortedNumbers.indexOf(0)\n        var currentCloseIndex = sortedNumbers.indexOf(0)\n\
    \        var currentCloseIndex = sortedNumbers.indexOf(0)\n        var currentCloseIndex\
    \ = sortedNumbers.indexOf(0)\n        var currentCloseIndex = sortedNumbers.indexOf(0)\n\
    \        var currentCloseIndex = sortedNumbers.indexOf(0)\n        var currentCloseIndex\
    \ = sortedNumbers.indexOf(0)\n        var currentCloseIndex = sortedNumbers.indexOf(0)\n\
    \        var currentCloseIndex = sortedNumbers.indexOf(0)\n        var currentCloseIndex\
    \ = sortedNumbers.indexOf(0)\n        var currentCloseIndex = sortedNumbers.indexOf(0)\n\
    \        var currentCloseIndex = sortedNumbers.indexOf(0)\n        var currentCloseIndex\
    \ = sortedNumbers.indexOf(0)\n        var currentCloseIndex = sortedNumbers.indexOf(0)\n\
    \        var currentCloseIndex = sortedNumbers.indexOf(0)\n        var currentCloseIndex\
    \ = sortedNumbers.indexOf(0)\n        var currentCloseIndex = sortedNumbers.indexOf(0)\n\
    \        var currentCloseIndex = sortedNumbers.indexOf(0)\n        var currentCloseIndex\
    \ = sortedNumbers.indexOf(0)\n        var currentCloseIndex = sortedNumbers.indexOf(0)\n\
    \        var currentCloseIndex = sortedNumbers.indexOf(0)\n        var currentCloseIndex\
    \ = sortedNumbers.indexOf(0)\n        var currentCloseIndex = sortedNumbers.indexOf(0)\n\
    \        var current", "        val distances = numbers.map(x => Math.abs(x -\
    \ threshold))\n        val minDistance = distances.min\n        distances.forall(x\
    \ => x < minDistance)", "        val nums = numbers.toList\n        val numsSorted\
    \ = nums.sortWith(_ < _)\n        val numsSortedLength = numsSorted.length\n \
    \       val numsSortedLength = numsSortedLength - 1\n        val numsSortedLast\
    \ = numsSorted.last\n        val numsSortedLastIndex = numsSorted.lastIndex\n\
    \        val numsSortedLastIndex = numsSortedLastIndex - 1\n        val numsSortedLastElement\
    \ = numsSortedLast._1\n        val numsSortedLastElementIndex = numsSortedLast._2\n\
    \        val numsSortedLastElementIndex = numsSortedLastElementIndex - 1\n   \
    \     val numsSortedLastElementElement = numsSortedLastElement._1\n        val\
    \ numsSortedLastElementElementIndex = numsSortedLastElement._2\n        val numsSortedLastElementElementIndex\
    \ = numsSortedLastElementElementIndex - 1\n        val numsSortedLastElementElementElement\
    \ = numsSortedLastElementElement._1\n        val numsSortedLastElementElementIndex\
    \ = numsSortedLastElementElement._2\n        val numsSortedLastElementElementIndex\
    \ = numsSortedLastElementElementIndex - 1\n        val numsSortedLastElementElementElement\
    \ = numsSortedLastElementElement._1\n        val numsSortedLastElementElementIndex\
    \ = numsSortedLastElementElement._2\n        val numsSortedLastElementElementIndex\
    \ = numsSortedLastElementElementIndex - 1\n        val numsSortedLastElementElementElement\
    \ = numsSortedLastElementElement._1\n        val numsSortedLastElementElementIndex\
    \ = numsSortedLastElementElement._2\n        val numsSortedLastElementElementIndex\
    \ = numsSortedLastElementElementIndex - 1\n        val numsSortedLastElementElementElement\
    \ = numsSortedLastElementElement._1\n        val numsSortedLastElementElementIndex\
    \ = numsSortedLastElementElement._2\n        val numsSortedLastElementElementIndex\
    \ = numsSortedLastElementElementIndex - 1\n        val numsSortedLastElementElementElement\
    \ = numsSortedLastElementElement._1\n        val numsSortedLastElementElementIndex\
    \ = numsSortedLastElementElement._2\n        val numsSortedLastElementElementIndex\
    \ = numsSortedLastElementElementIndex - 1\n        val numsSortedLastElementElementElement\
    \ = numsSortedLastElementElement._1\n        val numsSortedLastElementElementIndex\
    \ = numsSortedLastElementElement._2\n        val numsSortedLastElementElementIndex\
    \ = numsSortedLastElementElement", "        val sortedNumbers = numbers.toList.sortWith(_\
    \ < _)\n        val closeElements = mutable.HashSet[Float]()\n        val closeElementsCount\
    \ = mutable.HashMap[Float, Int]()\n        val closeElementsCountCount = mutable.HashMap[Float,\
    \ Int]()\n        val closeElementsCountCountCount = mutable.HashMap[Float, Int]()\n\
    \        val closeElementsCountCountCountCount = mutable.HashMap[Float, Int]()\n\
    \        val closeElementsCountCountCountCountCount = mutable.HashMap[Float, Int]()\n\
    \        val closeElementsCountCountCountCountCountCount = mutable.HashMap[Float,\
    \ Int]()\n        val closeElementsCountCountCountCountCountCountCount = mutable.HashMap[Float,\
    \ Int]()\n        val closeElementsCountCountCountCountCountCountCountCount =\
    \ mutable.HashMap[Float, Int]()\n        val closeElementsCountCountCountCountCountCountCountCountCount\
    \ = mutable.HashMap[Float, Int]()\n        val closeElementsCountCountCountCountCountCountCountCountCountCount\
    \ = mutable.HashMap[Float, Int]()\n        val closeElementsCountCountCountCountCountCountCountCountCountCountCount\
    \ = mutable.HashMap[Float, Int]()\n        val closeElementsCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = mutable.HashMap[Float, Int]()\n        val closeElementsCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = mutable.HashMap[Float, Int]()\n        val closeElementsCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = mutable.HashMap[Float, Int]()\n        val closeElementsCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = mutable.HashMap[Float, Int]()\n        val closeElementsCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = mutable.HashMap[Float, Int]()\n        val closeElementsCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = mutable.HashMap[Float, Int]()\n        val closeElementsCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = mutable.HashMap[Float, Int]()\n        val closeElementsCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = mutable.HashMap[Float, Int]()\n        val closeElementsCountCountCountCountCountCountCount",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val closestToOthers\
    \ = sortedNumbers.zip(sortedNumbers.tail).filter(_._2 < threshold).map(_._1)\n\
    \        closestToOthers.isEmpty", "        val sortedNumbers = numbers.toList.sortBy(_)\n\
    \        val closestToClosest = sortedNumbers.zip(sortedNumbers.tail).map {\n\
    \            case (first, second) => math.abs(first - second) < threshold\n  \
    \      }\n        closestToClosest.forall(identity)", '        numbers.foldLeft(false)((acc,
    n) => acc || Math.abs(n - numbers(numbers.indexOf(n))) < threshold)', "      \
    \  val sortedNumbers = numbers.toList.sortWith(_ < _)\n        val closestTo =\
    \ sortedNumbers.zip(sortedNumbers.tail).map { case (first, second) =>\n      \
    \      val distance = math.abs(first - second)\n            if (distance < threshold)\
    \ {\n                (first, second)\n            } else {\n                None\n\
    \            }\n        }.filter(_._2.isDefined).map(_._1).size == 2", "     \
    \   val sortedNumbers = numbers.toList.sortWith(_ < _)\n        val closestTo\
    \ = sortedNumbers.foldLeft(sortedNumbers.head) { (a, b) => if (a > b) a else b\
    \ }\n        val closestToIndex = sortedNumbers.indexOf(closestTo)\n        val\
    \ closestToIndex = sortedNumbers.indexOf(closestTo)\n        val closestToIndex\
    \ = sortedNumbers.indexOf(closestTo)\n        val closestToIndex = sortedNumbers.indexOf(closestTo)\n\
    \        val closestToIndex = sortedNumbers.indexOf(closestTo)\n        val closestToIndex\
    \ = sortedNumbers.indexOf(closestTo)\n        val closestToIndex = sortedNumbers.indexOf(closestTo)\n\
    \        val closestToIndex = sortedNumbers.indexOf(closestTo)\n        val closestToIndex\
    \ = sortedNumbers.indexOf(closestTo)\n        val closestToIndex = sortedNumbers.indexOf(closestTo)\n\
    \        val closestToIndex = sortedNumbers.indexOf(closestTo)\n        val closestToIndex\
    \ = sortedNumbers.indexOf(closestTo)\n        val closestToIndex = sortedNumbers.indexOf(closestTo)\n\
    \        val closestToIndex = sortedNumbers.indexOf(closestTo)\n        val closestToIndex\
    \ = sortedNumbers.indexOf(closestTo)\n        val closestToIndex = sortedNumbers.indexOf(closestTo)\n\
    \        val closestToIndex = sortedNumbers.indexOf(closestTo)\n        val closestToIndex\
    \ = sortedNumbers.indexOf(closestTo)\n        val closestToIndex = sortedNumbers.indexOf(closestTo)\n\
    \        val closestToIndex = sortedNumbers.indexOf(closestTo)\n        val closestToIndex\
    \ = sortedNumbers.indexOf(closestTo)\n        val closestToIndex = sortedNumbers.indexOf(closestTo)\n\
    \        val closestToIndex = sortedNumbers.indexOf(closestTo)\n        val closestToIndex\
    \ = sortedNumbers.indexOf(closestTo)\n        val closestToIndex = sortedNumbers.indexOf(closestTo)\n\
    \        val closestToIndex = sortedNumbers.indexOf(closestTo)\n        val closestToIndex\
    \ = sortedNumbers.indexOf(closestTo)\n        val closestToIndex = sortedNumbers.indexOf(closestTo)\n\
    \        val closestToIndex = sortedNumbers.indexOf(closestTo)\n        val closestToIndex\
    \ = sortedNumbers.indexOf(closestTo)\n        val closestToIndex = sortedNumbers.indexOf(closestTo)\n\
    \        val closestToIndex = sortedNumbers.indexOf(closestTo)\n        val closestToIndex\
    \ = sortedNumbers.indexOf(closestTo)\n        val closestToIndex = sortedNumbers.indexOf(closestTo)\n\
    \        val closestToIndex = sortedNumbers.indexOf(closestTo)\n        val closestToIndex\
    \ = sortedNumbers.indexOf(closestTo)", "        val distances = numbers.map(x\
    \ => (x - threshold).abs)\n        val minDistance = distances.min\n        distances.forall(x\
    \ => x < minDistance)"]
stop_tokens:
- "\n    }\n"
